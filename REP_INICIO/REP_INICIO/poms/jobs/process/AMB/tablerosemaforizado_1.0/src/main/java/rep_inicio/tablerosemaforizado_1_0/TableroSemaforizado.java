// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package rep_inicio.tablerosemaforizado_1_0;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.Utils;
import routines.getEdad;
import routines.StringHandling;
import routines.ArrayFromFile;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: TableroSemaforizado Purpose: <br>
 * Description: MÃ³dulo Salud ambiental <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status PROD
 */
public class TableroSemaforizado implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(db_origen_AdditionalParams != null){
				
					this.setProperty("db_origen_AdditionalParams", db_origen_AdditionalParams.toString());
				
			}
			
			if(db_origen_Login != null){
				
					this.setProperty("db_origen_Login", db_origen_Login.toString());
				
			}
			
			if(db_origen_Password != null){
				
					this.setProperty("db_origen_Password", db_origen_Password.toString());
				
			}
			
			if(db_origen_Port != null){
				
					this.setProperty("db_origen_Port", db_origen_Port.toString());
				
			}
			
			if(db_origen_Schema != null){
				
					this.setProperty("db_origen_Schema", db_origen_Schema.toString());
				
			}
			
			if(db_origen_Server != null){
				
					this.setProperty("db_origen_Server", db_origen_Server.toString());
				
			}
			
			if(db_origen_ServiceName != null){
				
					this.setProperty("db_origen_ServiceName", db_origen_ServiceName.toString());
				
			}
			
			if(db_destino_AdditionalParams != null){
				
					this.setProperty("db_destino_AdditionalParams", db_destino_AdditionalParams.toString());
				
			}
			
			if(db_destino_Login != null){
				
					this.setProperty("db_destino_Login", db_destino_Login.toString());
				
			}
			
			if(db_destino_Password != null){
				
					this.setProperty("db_destino_Password", db_destino_Password.toString());
				
			}
			
			if(db_destino_Port != null){
				
					this.setProperty("db_destino_Port", db_destino_Port.toString());
				
			}
			
			if(db_destino_Schema != null){
				
					this.setProperty("db_destino_Schema", db_destino_Schema.toString());
				
			}
			
			if(db_destino_Server != null){
				
					this.setProperty("db_destino_Server", db_destino_Server.toString());
				
			}
			
			if(db_destino_ServiceName != null){
				
					this.setProperty("db_destino_ServiceName", db_destino_ServiceName.toString());
				
			}
			
			if(ACTUALIZACION_TOTAL != null){
				
					this.setProperty("ACTUALIZACION_TOTAL", ACTUALIZACION_TOTAL.toString());
				
			}
			
			if(BODEGA != null){
				
					this.setProperty("BODEGA", BODEGA.toString());
				
			}
			
			if(ERROR != null){
				
					this.setProperty("ERROR", ERROR.toString());
				
			}
			
			if(ESTADO != null){
				
					this.setProperty("ESTADO", ESTADO.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(FANTERIOR != null){
				
					this.setProperty("FANTERIOR", FANTERIOR.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(FECHA_TERMINACION != null){
				
					this.setProperty("FECHA_TERMINACION", FECHA_TERMINACION.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(ID_SOLICITUD != null){
				
					this.setProperty("ID_SOLICITUD", ID_SOLICITUD.toString());
				
			}
			
			if(LAST_DAYS != null){
				
					this.setProperty("LAST_DAYS", LAST_DAYS.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
			if(Anio != null){
				
					this.setProperty("Anio", Anio.toString());
				
			}
			
			if(CONDITION != null){
				
					this.setProperty("CONDITION", CONDITION.toString());
				
			}
			
			if(INNER_HDAC != null){
				
					this.setProperty("INNER_HDAC", INNER_HDAC.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String db_origen_AdditionalParams;
public String getDb_origen_AdditionalParams(){
	return this.db_origen_AdditionalParams;
}
public String db_origen_Login;
public String getDb_origen_Login(){
	return this.db_origen_Login;
}
public java.lang.String db_origen_Password;
public java.lang.String getDb_origen_Password(){
	return this.db_origen_Password;
}
public String db_origen_Port;
public String getDb_origen_Port(){
	return this.db_origen_Port;
}
public String db_origen_Schema;
public String getDb_origen_Schema(){
	return this.db_origen_Schema;
}
public String db_origen_Server;
public String getDb_origen_Server(){
	return this.db_origen_Server;
}
public String db_origen_ServiceName;
public String getDb_origen_ServiceName(){
	return this.db_origen_ServiceName;
}
public String db_destino_AdditionalParams;
public String getDb_destino_AdditionalParams(){
	return this.db_destino_AdditionalParams;
}
public String db_destino_Login;
public String getDb_destino_Login(){
	return this.db_destino_Login;
}
public java.lang.String db_destino_Password;
public java.lang.String getDb_destino_Password(){
	return this.db_destino_Password;
}
public String db_destino_Port;
public String getDb_destino_Port(){
	return this.db_destino_Port;
}
public String db_destino_Schema;
public String getDb_destino_Schema(){
	return this.db_destino_Schema;
}
public String db_destino_Server;
public String getDb_destino_Server(){
	return this.db_destino_Server;
}
public String db_destino_ServiceName;
public String getDb_destino_ServiceName(){
	return this.db_destino_ServiceName;
}
public Boolean ACTUALIZACION_TOTAL;
public Boolean getACTUALIZACION_TOTAL(){
	return this.ACTUALIZACION_TOTAL;
}
public String BODEGA;
public String getBODEGA(){
	return this.BODEGA;
}
public String ERROR;
public String getERROR(){
	return this.ERROR;
}
public String ESTADO;
public String getESTADO(){
	return this.ESTADO;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public String FANTERIOR;
public String getFANTERIOR(){
	return this.FANTERIOR;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String FECHA_TERMINACION;
public String getFECHA_TERMINACION(){
	return this.FECHA_TERMINACION;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public Integer ID_SOLICITUD;
public Integer getID_SOLICITUD(){
	return this.ID_SOLICITUD;
}
public Integer LAST_DAYS;
public Integer getLAST_DAYS(){
	return this.LAST_DAYS;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
public String Anio;
public String getAnio(){
	return this.Anio;
}
public String CONDITION;
public String getCONDITION(){
	return this.CONDITION;
}
public String INNER_HDAC;
public String getINNER_HDAC(){
	return this.INNER_HDAC;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "1.0";
	private final String jobName = "TableroSemaforizado";
	private final String projectName = "REP_INICIO";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				TableroSemaforizado.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(TableroSemaforizado.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tIntervalMatch_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tIntervalMatch_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tIntervalMatch_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tIntervalMatch_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tIntervalMatch_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tIntervalMatch_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHash_row5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHash_row9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHash_row11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHash_row13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHash_row17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_1_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_1_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_1_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tFileInputXML_2Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row75Struct implements routines.system.IPersistableRow<row75Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return true;
				}
				public Integer HostLength(){
				    return 13;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return true;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return true;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 16;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 12;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 12;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 3;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Host == null) ? 0 : this.Host.hashCode());
					
						result = prime * result + ((this.Port == null) ? 0 : this.Port.hashCode());
					
						result = prime * result + ((this.Sid == null) ? 0 : this.Sid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row75Struct other = (row75Struct) obj;
		
						if (this.Host == null) {
							if (other.Host != null)
								return false;
						
						} else if (!this.Host.equals(other.Host))
						
							return false;
					
						if (this.Port == null) {
							if (other.Port != null)
								return false;
						
						} else if (!this.Port.equals(other.Port))
						
							return false;
					
						if (this.Sid == null) {
							if (other.Sid != null)
								return false;
						
						} else if (!this.Sid.equals(other.Sid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row75Struct other) {

		other.Host = this.Host;
	            other.Port = this.Port;
	            other.Sid = this.Sid;
	            other.ServiceName = this.ServiceName;
	            other.Schema = this.Schema;
	            other.User = this.User;
	            other.Password = this.Password;
	            other.SMTPHost = this.SMTPHost;
	            other.SMTPPort = this.SMTPPort;
	            other.UsernameMail = this.UsernameMail;
	            other.PasswordMail = this.PasswordMail;
	            
	}

	public void copyKeysDataTo(row75Struct other) {

		other.Host = this.Host;
	            	other.Port = this.Port;
	            	other.Sid = this.Sid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row75Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Host, other.Host);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Port, other.Port);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Sid, other.Sid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row75Struct row75 = new row75Struct();




	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row75");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tFileInputXML_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_2", false);
		start_Hash.put("tFileInputXML_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_2";
	
	
		int tos_count_tFileInputXML_2 = 0;
		

	

int nb_line_tFileInputXML_2 = 0;

	String os_tFileInputXML_2 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_2=false;
	if(os_tFileInputXML_2.indexOf("windows") > -1 || os_tFileInputXML_2.indexOf("nt") > -1){
		isWindows_tFileInputXML_2=true;
	}
class NameSpaceTool_tFileInputXML_2 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_2{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getStringValue().isEmpty();
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_2 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_2 = null;
try {
	filename_tFileInputXML_2 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
	
	throw(e);
	
}
if(filename_tFileInputXML_2 != null && filename_tFileInputXML_2 instanceof String && filename_tFileInputXML_2.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_2){
		filename_tFileInputXML_2 = filename_tFileInputXML_2.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_2 = true;
org.dom4j.Document doc_tFileInputXML_2 = null;
java.io.Closeable toClose_tFileInputXML_2 = null;
try{
	if(filename_tFileInputXML_2 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_2 = (java.io.InputStream)filename_tFileInputXML_2;
		toClose_tFileInputXML_2 = inputStream_tFileInputXML_2;
		doc_tFileInputXML_2 = reader_tFileInputXML_2.read(inputStream_tFileInputXML_2);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_2 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_2)),"UTF-8");
		toClose_tFileInputXML_2 = unicodeReader_tFileInputXML_2;
		org.xml.sax.InputSource in_tFileInputXML_2= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_2);
		doc_tFileInputXML_2 = reader_tFileInputXML_2.read(in_tFileInputXML_2);
	}
}catch(java.lang.Exception e){
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
	throw(e);
} finally {
	if(toClose_tFileInputXML_2!=null) {
		toClose_tFileInputXML_2.close();
	}
}
if(isValidFile_tFileInputXML_2){
NameSpaceTool_tFileInputXML_2 nsTool_tFileInputXML_2 = new NameSpaceTool_tFileInputXML_2();
nsTool_tFileInputXML_2.countNSMap(doc_tFileInputXML_2.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_2 = nsTool_tFileInputXML_2.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_2 = doc_tFileInputXML_2.createXPath(nsTool_tFileInputXML_2.addDefaultNSPrefix("/connectionStrings"));  
x_tFileInputXML_2.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_2); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_2.selectNodes(doc_tFileInputXML_2);	
XML_API_tFileInputXML_2 xml_api_tFileInputXML_2 = new XML_API_tFileInputXML_2();
String str_tFileInputXML_2 = "";
org.dom4j.Node node_tFileInputXML_2 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_2=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_2{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_2 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Host","/connectionStrings"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Port","/connectionStrings"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Sid","/connectionStrings"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("ServiceName","/connectionStrings"));
	xpath_3.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(3,xpath_3);
			
	org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Schema","/connectionStrings"));
	xpath_4.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(4,xpath_4);
			
	org.dom4j.XPath xpath_5 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("User","/connectionStrings"));
	xpath_5.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(5,xpath_5);
			
	org.dom4j.XPath xpath_6 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Password","/connectionStrings"));
	xpath_6.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(6,xpath_6);
			
	org.dom4j.XPath xpath_7 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPHost","/connectionStrings"));
	xpath_7.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(7,xpath_7);
			
	org.dom4j.XPath xpath_8 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPPort","/connectionStrings"));
	xpath_8.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(8,xpath_8);
			
	org.dom4j.XPath xpath_9 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("UsernameMail","/connectionStrings"));
	xpath_9.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(9,xpath_9);
			
	org.dom4j.XPath xpath_10 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PasswordMail","/connectionStrings"));
	xpath_10.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(10,xpath_10);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_2 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_2 xPathUtil_tFileInputXML_2 = new XPathUtil_tFileInputXML_2();
	xPathUtil_tFileInputXML_2.initXPaths(xpaths_tFileInputXML_2, nsTool_tFileInputXML_2, xmlNameSpaceMap_tFileInputXML_2);
for (org.dom4j.Node temp_tFileInputXML_2: nodeList_tFileInputXML_2) {
	if (nb_line_tFileInputXML_2>=50) {
	
		break;
	}
		nb_line_tFileInputXML_2++;
		
	row75 = null;			
	boolean whetherReject_tFileInputXML_2 = false;
	row75 = new row75Struct();
	try{
    Object obj0_tFileInputXML_2 = xpaths_tFileInputXML_2.get(0).evaluate(temp_tFileInputXML_2);
    if(obj0_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj0_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj0_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_2 instanceof String || obj0_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj0_tFileInputXML_2);
    } else if(obj0_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row75.Host =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row75.Host ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row75.Host =null;
									}else{
		row75.Host = str_tFileInputXML_2;
	}
    Object obj1_tFileInputXML_2 = xpaths_tFileInputXML_2.get(1).evaluate(temp_tFileInputXML_2);
    if(obj1_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj1_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj1_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_2 instanceof String || obj1_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj1_tFileInputXML_2);
    } else if(obj1_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row75.Port =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row75.Port ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row75.Port =null;
									}else{
		row75.Port = str_tFileInputXML_2;
	}
    Object obj2_tFileInputXML_2 = xpaths_tFileInputXML_2.get(2).evaluate(temp_tFileInputXML_2);
    if(obj2_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj2_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj2_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_2 instanceof String || obj2_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj2_tFileInputXML_2);
    } else if(obj2_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row75.Sid =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row75.Sid ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row75.Sid =null;
									}else{
		row75.Sid = str_tFileInputXML_2;
	}
    Object obj3_tFileInputXML_2 = xpaths_tFileInputXML_2.get(3).evaluate(temp_tFileInputXML_2);
    if(obj3_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj3_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj3_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj3_tFileInputXML_2 instanceof String || obj3_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj3_tFileInputXML_2);
    } else if(obj3_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj3_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row75.ServiceName =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row75.ServiceName ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row75.ServiceName =null;
									}else{
		row75.ServiceName = str_tFileInputXML_2;
	}
    Object obj4_tFileInputXML_2 = xpaths_tFileInputXML_2.get(4).evaluate(temp_tFileInputXML_2);
    if(obj4_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj4_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj4_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj4_tFileInputXML_2 instanceof String || obj4_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj4_tFileInputXML_2);
    } else if(obj4_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj4_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row75.Schema =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row75.Schema ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row75.Schema =null;
									}else{
		row75.Schema = str_tFileInputXML_2;
	}
    Object obj5_tFileInputXML_2 = xpaths_tFileInputXML_2.get(5).evaluate(temp_tFileInputXML_2);
    if(obj5_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj5_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj5_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj5_tFileInputXML_2 instanceof String || obj5_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj5_tFileInputXML_2);
    } else if(obj5_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj5_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row75.User =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row75.User ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row75.User =null;
									}else{
		row75.User = str_tFileInputXML_2;
	}
    Object obj6_tFileInputXML_2 = xpaths_tFileInputXML_2.get(6).evaluate(temp_tFileInputXML_2);
    if(obj6_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj6_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj6_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj6_tFileInputXML_2 instanceof String || obj6_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj6_tFileInputXML_2);
    } else if(obj6_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj6_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row75.Password =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row75.Password ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row75.Password =null;
									}else{
		row75.Password = str_tFileInputXML_2;
	}
    Object obj7_tFileInputXML_2 = xpaths_tFileInputXML_2.get(7).evaluate(temp_tFileInputXML_2);
    if(obj7_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj7_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj7_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj7_tFileInputXML_2 instanceof String || obj7_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj7_tFileInputXML_2);
    } else if(obj7_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj7_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row75.SMTPHost =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row75.SMTPHost ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row75.SMTPHost =null;
									}else{
		row75.SMTPHost = str_tFileInputXML_2;
	}
    Object obj8_tFileInputXML_2 = xpaths_tFileInputXML_2.get(8).evaluate(temp_tFileInputXML_2);
    if(obj8_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj8_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj8_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj8_tFileInputXML_2 instanceof String || obj8_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj8_tFileInputXML_2);
    } else if(obj8_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj8_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row75.SMTPPort =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row75.SMTPPort ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row75.SMTPPort =null;
									}else{
		row75.SMTPPort = str_tFileInputXML_2;
	}
    Object obj9_tFileInputXML_2 = xpaths_tFileInputXML_2.get(9).evaluate(temp_tFileInputXML_2);
    if(obj9_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj9_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj9_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj9_tFileInputXML_2 instanceof String || obj9_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj9_tFileInputXML_2);
    } else if(obj9_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj9_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row75.UsernameMail =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row75.UsernameMail ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row75.UsernameMail =null;
									}else{
		row75.UsernameMail = str_tFileInputXML_2;
	}
    Object obj10_tFileInputXML_2 = xpaths_tFileInputXML_2.get(10).evaluate(temp_tFileInputXML_2);
    if(obj10_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj10_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj10_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj10_tFileInputXML_2 instanceof String || obj10_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj10_tFileInputXML_2);
    } else if(obj10_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj10_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row75.PasswordMail =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row75.PasswordMail ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row75.PasswordMail =null;
									}else{
		row75.PasswordMail = str_tFileInputXML_2;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_2 = true;
            throw(e);
    }
			
			

 



/**
 * [tFileInputXML_2 begin ] stop
 */
	
	/**
	 * [tFileInputXML_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 


	tos_count_tFileInputXML_2++;

/**
 * [tFileInputXML_2 main ] stop
 */
	
	/**
	 * [tFileInputXML_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_begin ] stop
 */
// Start of branch "row75"
if(row75 != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row75"
						
						);
					}
					

    context.db_origen_Server = row75.Host;
context.db_origen_Port = row75.Port;
//context.db_origen_Sid = row75.Sid;
context.db_origen_Login = row75.User;
context.db_origen_Password = row75.Password;
context.db_origen_ServiceName = row75.ServiceName;
context.db_origen_Schema = row75.Schema;

context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");

System.out.println("+ AMB ");
System.out.println("  - Start:" + TalendDate.getDate("DD/MM/YYYY") + " "  + TalendDate.getDate("HH:mm:ss") );



    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */

} // End of branch "row75"




	
	/**
	 * [tFileInputXML_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	


}
	}
	globalMap.put("tFileInputXML_2_NB_LINE",nb_line_tFileInputXML_2);

	

 

ok_Hash.put("tFileInputXML_2", true);
end_Hash.put("tFileInputXML_2", System.currentTimeMillis());




/**
 * [tFileInputXML_2 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row75");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);



/**
 * [tJavaRow_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 1);
	}
	


public static class row77Struct implements routines.system.IPersistableRow<row77Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return true;
				}
				public Integer HostLength(){
				    return 13;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return true;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return true;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 16;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 12;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 12;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 12;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Host == null) ? 0 : this.Host.hashCode());
					
						result = prime * result + ((this.Port == null) ? 0 : this.Port.hashCode());
					
						result = prime * result + ((this.Sid == null) ? 0 : this.Sid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row77Struct other = (row77Struct) obj;
		
						if (this.Host == null) {
							if (other.Host != null)
								return false;
						
						} else if (!this.Host.equals(other.Host))
						
							return false;
					
						if (this.Port == null) {
							if (other.Port != null)
								return false;
						
						} else if (!this.Port.equals(other.Port))
						
							return false;
					
						if (this.Sid == null) {
							if (other.Sid != null)
								return false;
						
						} else if (!this.Sid.equals(other.Sid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row77Struct other) {

		other.Host = this.Host;
	            other.Port = this.Port;
	            other.Sid = this.Sid;
	            other.ServiceName = this.ServiceName;
	            other.Schema = this.Schema;
	            other.User = this.User;
	            other.Password = this.Password;
	            
	}

	public void copyKeysDataTo(row77Struct other) {

		other.Host = this.Host;
	            	other.Port = this.Port;
	            	other.Sid = this.Sid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row77Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Host, other.Host);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Port, other.Port);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Sid, other.Sid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row77Struct row77 = new row77Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row77");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class NameSpaceTool_tFileInputXML_1 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_1{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getStringValue().isEmpty();
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.BODEGA;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	throw(e);
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_1 = true;
org.dom4j.Document doc_tFileInputXML_1 = null;
java.io.Closeable toClose_tFileInputXML_1 = null;
try{
	if(filename_tFileInputXML_1 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream)filename_tFileInputXML_1;
		toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(inputStream_tFileInputXML_1);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_1)),"UTF-8");
		toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
		org.xml.sax.InputSource in_tFileInputXML_1= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_1);
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(in_tFileInputXML_1);
	}
}catch(java.lang.Exception e){
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	throw(e);
} finally {
	if(toClose_tFileInputXML_1!=null) {
		toClose_tFileInputXML_1.close();
	}
}
if(isValidFile_tFileInputXML_1){
NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1.createXPath(nsTool_tFileInputXML_1.addDefaultNSPrefix("/connectionStrings"));  
x_tFileInputXML_1.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_1.selectNodes(doc_tFileInputXML_1);	
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
String str_tFileInputXML_1 = "";
org.dom4j.Node node_tFileInputXML_1 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_1=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_1{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Host","/connectionStrings"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Port","/connectionStrings"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Sid","/connectionStrings"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("ServiceName","/connectionStrings"));
	xpath_3.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(3,xpath_3);
			
	org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Schema","/connectionStrings"));
	xpath_4.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(4,xpath_4);
			
	org.dom4j.XPath xpath_5 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("User","/connectionStrings"));
	xpath_5.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(5,xpath_5);
			
	org.dom4j.XPath xpath_6 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Password","/connectionStrings"));
	xpath_6.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(6,xpath_6);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_1 xPathUtil_tFileInputXML_1 = new XPathUtil_tFileInputXML_1();
	xPathUtil_tFileInputXML_1.initXPaths(xpaths_tFileInputXML_1, nsTool_tFileInputXML_1, xmlNameSpaceMap_tFileInputXML_1);
for (org.dom4j.Node temp_tFileInputXML_1: nodeList_tFileInputXML_1) {
	if (nb_line_tFileInputXML_1>=50) {
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row77 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row77 = new row77Struct();
	try{
    Object obj0_tFileInputXML_1 = xpaths_tFileInputXML_1.get(0).evaluate(temp_tFileInputXML_1);
    if(obj0_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj0_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_1 instanceof String || obj0_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj0_tFileInputXML_1);
    } else if(obj0_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row77.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row77.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row77.Host =null;
									}else{
		row77.Host = str_tFileInputXML_1;
	}
    Object obj1_tFileInputXML_1 = xpaths_tFileInputXML_1.get(1).evaluate(temp_tFileInputXML_1);
    if(obj1_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj1_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj1_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_1 instanceof String || obj1_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj1_tFileInputXML_1);
    } else if(obj1_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row77.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row77.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row77.Port =null;
									}else{
		row77.Port = str_tFileInputXML_1;
	}
    Object obj2_tFileInputXML_1 = xpaths_tFileInputXML_1.get(2).evaluate(temp_tFileInputXML_1);
    if(obj2_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj2_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj2_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_1 instanceof String || obj2_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj2_tFileInputXML_1);
    } else if(obj2_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row77.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row77.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row77.Sid =null;
									}else{
		row77.Sid = str_tFileInputXML_1;
	}
    Object obj3_tFileInputXML_1 = xpaths_tFileInputXML_1.get(3).evaluate(temp_tFileInputXML_1);
    if(obj3_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj3_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj3_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj3_tFileInputXML_1 instanceof String || obj3_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj3_tFileInputXML_1);
    } else if(obj3_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj3_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row77.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row77.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row77.ServiceName =null;
									}else{
		row77.ServiceName = str_tFileInputXML_1;
	}
    Object obj4_tFileInputXML_1 = xpaths_tFileInputXML_1.get(4).evaluate(temp_tFileInputXML_1);
    if(obj4_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj4_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj4_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj4_tFileInputXML_1 instanceof String || obj4_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj4_tFileInputXML_1);
    } else if(obj4_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj4_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row77.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row77.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row77.Schema =null;
									}else{
		row77.Schema = str_tFileInputXML_1;
	}
    Object obj5_tFileInputXML_1 = xpaths_tFileInputXML_1.get(5).evaluate(temp_tFileInputXML_1);
    if(obj5_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj5_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj5_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj5_tFileInputXML_1 instanceof String || obj5_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj5_tFileInputXML_1);
    } else if(obj5_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj5_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row77.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row77.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row77.User =null;
									}else{
		row77.User = str_tFileInputXML_1;
	}
    Object obj6_tFileInputXML_1 = xpaths_tFileInputXML_1.get(6).evaluate(temp_tFileInputXML_1);
    if(obj6_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj6_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj6_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj6_tFileInputXML_1 instanceof String || obj6_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj6_tFileInputXML_1);
    } else if(obj6_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj6_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row77.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row77.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row77.Password =null;
									}else{
		row77.Password = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
            throw(e);
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row77"
if(row77 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row77"
						
						);
					}
					

    context.db_destino_Server = row77.Host;
context.db_destino_Port = row77.Port;
//context.db_destino_Sid = row77.Sid;
context.db_destino_Login = row77.User;
context.db_destino_Password = row77.Password;
context.db_destino_ServiceName = row77.ServiceName;
context.db_destino_Schema = row77.Schema;

/*System.out.println("Contexto destino");
System.out.println("context.DB_destino_Connections_Server: "+context.db_destino_Server);
System.out.println("context.DB_destino_Connections_Port: "+ context.db_destino_Port );
System.out.println("context.DB_destino_Connections_ServiceName: "+ context.db_destino_ServiceName);
System.out.println("context.DB_destino_Connections_Schema: "+ context.db_destino_Schema);
System.out.println("context.DB_destino_Connections_Login " + context.db_destino_Login );
System.out.println("context.DB_destino_Connections_Password " + context.db_destino_Password);*/
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row77"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


}
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row77");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.db_origen_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.db_origen_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.db_origen_Server);
        globalMap.put("port_" + "tOracleConnection_1",context.db_origen_Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.db_origen_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.db_origen_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.db_origen_Login);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tOracleConnection_2Process(globalMap);



/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_2", false);
		start_Hash.put("tOracleConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_2";
	
	
		int tos_count_tOracleConnection_2 = 0;
		
	

	
        String url_tOracleConnection_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_2", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_2 = context.db_destino_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_2 = context.db_destino_Password; 
		String dbPwd_tOracleConnection_2 = decryptedPassword_tOracleConnection_2;
	
	
	java.sql.Connection conn_tOracleConnection_2 = null;
	
		
			String driverClass_tOracleConnection_2 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_2 = java.lang.Class.forName(driverClass_tOracleConnection_2);
			globalMap.put("driverClass_tOracleConnection_2", driverClass_tOracleConnection_2);
		
			java.util.Properties atnParamsPrope_tOracleConnection_2 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_2.put("user",dbUser_tOracleConnection_2);
			    atnParamsPrope_tOracleConnection_2.put("password",dbPwd_tOracleConnection_2);
			if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                atnParamsPrope_tOracleConnection_2.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_2 = java.sql.DriverManager.getConnection(url_tOracleConnection_2, atnParamsPrope_tOracleConnection_2);

		globalMap.put("conn_tOracleConnection_2", conn_tOracleConnection_2);
	if (null != conn_tOracleConnection_2) {
		
			conn_tOracleConnection_2.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_2",context.db_destino_Server);
        globalMap.put("port_" + "tOracleConnection_2",context.db_destino_Port);
        globalMap.put("dbname_" + "tOracleConnection_2",context.db_destino_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_2", context.db_destino_Schema);
	globalMap.put("username_" + "tOracleConnection_2",context.db_destino_Login);
	globalMap.put("password_" + "tOracleConnection_2",dbPwd_tOracleConnection_2);

 



/**
 * [tOracleConnection_2 begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 


	tos_count_tOracleConnection_2++;

/**
 * [tOracleConnection_2 main ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_2 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 

ok_Hash.put("tOracleConnection_2", true);
end_Hash.put("tOracleConnection_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tJava_3Process(globalMap);



/**
 * [tOracleConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 1);
	}
	


public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";
	
	
		int tos_count_tJava_3 = 0;
		


context.FANTERIOR = TalendDate.formatDate("dd-MM-YYYY",TalendDate.addDate(TalendDate.getCurrentDate(),-1,"DD"));
System.out.println("context.FANTERIOR: "+context.FANTERIOR);

if (!context.ACTUALIZACION_TOTAL){
context.INNER_HDAC ="LEFT JOIN ( SELECT AA2.ID, ADA2.UORG_ID   FROM AMB_HDACTIVIDADES HADA2  INNER JOIN AMB_DACTIVIDADES ADA2 ON HADA2.DACTIVIDADES_ID = ADA2.ID  AND ADA2.ESTREGISTRO_ID = 1  INNER JOIN AMB_ACTIVIDADES AA2 ON AA2.ID  = ADA2.ACTIVIDADES_ID AND AA2.ESTREGISTRO_ID = 1  WHERE   HADA2.FECHA BETWEEN TO_DATE('"+ context.FANTERIOR +"', 'DD/MM/YYYY') AND SYSDATE + 1 AND  HADA2.ESTREGISTRO_ID = 1)  DIARIO ON   ( DIARIO.ID = AA.ID AND DIARIO.UORG_ID = ADA.UORG_ID )";
context.CONDITION = " ( DIARIO.ID IS NOT NULL OR AA.FECHA BETWEEN TO_DATE('"+ context.FANTERIOR +"', 'DD/MM/YYYY') AND SYSDATE+ 1 OR AA.ID IN (SELECT  ACTIVIDADES_ID FROM AMB_HACTIVIDADES WHERE FECHA BETWEEN TO_DATE('"+ context.FANTERIOR +"', 'DD/MM/YYYY') AND SYSDATE + 1 ) )  AND ";
System.out.println("ActualizaciÃ³n diaria");
} else {
System.out.println("ActualizaciÃ³n total");
context.INNER_HDAC =" ";
context.CONDITION = " ";
}
context.Anio = TalendDate.getDate("YYYY");



 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tOracleInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public int VIGENCIA;

				public int getVIGENCIA () {
					return this.VIGENCIA;
				}

				public Boolean VIGENCIAIsNullable(){
				    return false;
				}
				public Boolean VIGENCIAIsKey(){
				    return false;
				}
				public Integer VIGENCIALength(){
				    return 1;
				}
				public Integer VIGENCIAPrecision(){
				    return 0;
				}
				public String VIGENCIADefault(){
				
					return null;
				
				}
				public String VIGENCIAComment(){
				
				    return "";
				
				}
				public String VIGENCIAPattern(){
				
					return "";
				
				}
				public String VIGENCIAOriginalDbColumnName(){
				
					return "VIGENCIA";
				
				}

				
			    public String REGIONAL;

				public String getREGIONAL () {
					return this.REGIONAL;
				}

				public Boolean REGIONALIsNullable(){
				    return true;
				}
				public Boolean REGIONALIsKey(){
				    return false;
				}
				public Integer REGIONALLength(){
				    return null;
				}
				public Integer REGIONALPrecision(){
				    return null;
				}
				public String REGIONALDefault(){
				
					return null;
				
				}
				public String REGIONALComment(){
				
				    return "";
				
				}
				public String REGIONALPattern(){
				
					return "";
				
				}
				public String REGIONALOriginalDbColumnName(){
				
					return "REGIONAL";
				
				}

				
			    public String FUERZA;

				public String getFUERZA () {
					return this.FUERZA;
				}

				public Boolean FUERZAIsNullable(){
				    return false;
				}
				public Boolean FUERZAIsKey(){
				    return false;
				}
				public Integer FUERZALength(){
				    return null;
				}
				public Integer FUERZAPrecision(){
				    return null;
				}
				public String FUERZADefault(){
				
					return null;
				
				}
				public String FUERZAComment(){
				
				    return "";
				
				}
				public String FUERZAPattern(){
				
					return "";
				
				}
				public String FUERZAOriginalDbColumnName(){
				
					return "FUERZA";
				
				}

				
			    public String ESM;

				public String getESM () {
					return this.ESM;
				}

				public Boolean ESMIsNullable(){
				    return false;
				}
				public Boolean ESMIsKey(){
				    return false;
				}
				public Integer ESMLength(){
				    return null;
				}
				public Integer ESMPrecision(){
				    return null;
				}
				public String ESMDefault(){
				
					return null;
				
				}
				public String ESMComment(){
				
				    return "";
				
				}
				public String ESMPattern(){
				
					return "";
				
				}
				public String ESMOriginalDbColumnName(){
				
					return "ESM";
				
				}

				
			    public String SUBPROGRAMA;

				public String getSUBPROGRAMA () {
					return this.SUBPROGRAMA;
				}

				public Boolean SUBPROGRAMAIsNullable(){
				    return false;
				}
				public Boolean SUBPROGRAMAIsKey(){
				    return false;
				}
				public Integer SUBPROGRAMALength(){
				    return null;
				}
				public Integer SUBPROGRAMAPrecision(){
				    return null;
				}
				public String SUBPROGRAMADefault(){
				
					return null;
				
				}
				public String SUBPROGRAMAComment(){
				
				    return "";
				
				}
				public String SUBPROGRAMAPattern(){
				
					return "";
				
				}
				public String SUBPROGRAMAOriginalDbColumnName(){
				
					return "SUBPROGRAMA";
				
				}

				
			    public String ACTIVIDAD;

				public String getACTIVIDAD () {
					return this.ACTIVIDAD;
				}

				public Boolean ACTIVIDADIsNullable(){
				    return false;
				}
				public Boolean ACTIVIDADIsKey(){
				    return false;
				}
				public Integer ACTIVIDADLength(){
				    return null;
				}
				public Integer ACTIVIDADPrecision(){
				    return null;
				}
				public String ACTIVIDADDefault(){
				
					return null;
				
				}
				public String ACTIVIDADComment(){
				
				    return "";
				
				}
				public String ACTIVIDADPattern(){
				
					return "";
				
				}
				public String ACTIVIDADOriginalDbColumnName(){
				
					return "ACTIVIDAD";
				
				}

				
			    public Double PORC_ANUAL_ACTIVIDAD;

				public Double getPORC_ANUAL_ACTIVIDAD () {
					return this.PORC_ANUAL_ACTIVIDAD;
				}

				public Boolean PORC_ANUAL_ACTIVIDADIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUAL_ACTIVIDADIsKey(){
				    return false;
				}
				public Integer PORC_ANUAL_ACTIVIDADLength(){
				    return null;
				}
				public Integer PORC_ANUAL_ACTIVIDADPrecision(){
				    return null;
				}
				public String PORC_ANUAL_ACTIVIDADDefault(){
				
					return null;
				
				}
				public String PORC_ANUAL_ACTIVIDADComment(){
				
				    return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADPattern(){
				
					return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADOriginalDbColumnName(){
				
					return "PORC_ANUAL_ACTIVIDAD";
				
				}

				
			    public String CAT_PORC_ANUAL_ACT;

				public String getCAT_PORC_ANUAL_ACT () {
					return this.CAT_PORC_ANUAL_ACT;
				}

				public Boolean CAT_PORC_ANUAL_ACTIsNullable(){
				    return true;
				}
				public Boolean CAT_PORC_ANUAL_ACTIsKey(){
				    return false;
				}
				public Integer CAT_PORC_ANUAL_ACTLength(){
				    return 255;
				}
				public Integer CAT_PORC_ANUAL_ACTPrecision(){
				    return 0;
				}
				public String CAT_PORC_ANUAL_ACTDefault(){
				
					return null;
				
				}
				public String CAT_PORC_ANUAL_ACTComment(){
				
				    return null;
				
				}
				public String CAT_PORC_ANUAL_ACTPattern(){
				
				    return null;
				
				}
				public String CAT_PORC_ANUAL_ACTOriginalDbColumnName(){
				
					return "CAT_PORC_ANUAL_ACT";
				
				}

				
			    public String FORMATO;

				public String getFORMATO () {
					return this.FORMATO;
				}

				public Boolean FORMATOIsNullable(){
				    return false;
				}
				public Boolean FORMATOIsKey(){
				    return false;
				}
				public Integer FORMATOLength(){
				    return null;
				}
				public Integer FORMATOPrecision(){
				    return null;
				}
				public String FORMATODefault(){
				
					return null;
				
				}
				public String FORMATOComment(){
				
				    return "";
				
				}
				public String FORMATOPattern(){
				
					return "";
				
				}
				public String FORMATOOriginalDbColumnName(){
				
					return "FORMATO";
				
				}

				
			    public Double PORC_TRIM_1;

				public Double getPORC_TRIM_1 () {
					return this.PORC_TRIM_1;
				}

				public Boolean PORC_TRIM_1IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_1Length(){
				    return null;
				}
				public Integer PORC_TRIM_1Precision(){
				    return null;
				}
				public String PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_1OriginalDbColumnName(){
				
					return "PORC_TRIM_1";
				
				}

				
			    public String CAT_PORC_TRIM_1;

				public String getCAT_PORC_TRIM_1 () {
					return this.CAT_PORC_TRIM_1;
				}

				public Boolean CAT_PORC_TRIM_1IsNullable(){
				    return false;
				}
				public Boolean CAT_PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer CAT_PORC_TRIM_1Length(){
				    return null;
				}
				public Integer CAT_PORC_TRIM_1Precision(){
				    return null;
				}
				public String CAT_PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String CAT_PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String CAT_PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String CAT_PORC_TRIM_1OriginalDbColumnName(){
				
					return "CAT_PORC_TRIM_1";
				
				}

				
			    public Double PORC_TRIM_2;

				public Double getPORC_TRIM_2 () {
					return this.PORC_TRIM_2;
				}

				public Boolean PORC_TRIM_2IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_2Length(){
				    return null;
				}
				public Integer PORC_TRIM_2Precision(){
				    return null;
				}
				public String PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_2OriginalDbColumnName(){
				
					return "PORC_TRIM_2";
				
				}

				
			    public String CAT_PORC_TRIM_2;

				public String getCAT_PORC_TRIM_2 () {
					return this.CAT_PORC_TRIM_2;
				}

				public Boolean CAT_PORC_TRIM_2IsNullable(){
				    return false;
				}
				public Boolean CAT_PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer CAT_PORC_TRIM_2Length(){
				    return null;
				}
				public Integer CAT_PORC_TRIM_2Precision(){
				    return null;
				}
				public String CAT_PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String CAT_PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String CAT_PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String CAT_PORC_TRIM_2OriginalDbColumnName(){
				
					return "CAT_PORC_TRIM_2";
				
				}

				
			    public Double PORC_TRIM_3;

				public Double getPORC_TRIM_3 () {
					return this.PORC_TRIM_3;
				}

				public Boolean PORC_TRIM_3IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_3Length(){
				    return null;
				}
				public Integer PORC_TRIM_3Precision(){
				    return null;
				}
				public String PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_3OriginalDbColumnName(){
				
					return "PORC_TRIM_3";
				
				}

				
			    public String CAT_PORC_TRIM_3;

				public String getCAT_PORC_TRIM_3 () {
					return this.CAT_PORC_TRIM_3;
				}

				public Boolean CAT_PORC_TRIM_3IsNullable(){
				    return false;
				}
				public Boolean CAT_PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer CAT_PORC_TRIM_3Length(){
				    return null;
				}
				public Integer CAT_PORC_TRIM_3Precision(){
				    return null;
				}
				public String CAT_PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String CAT_PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String CAT_PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String CAT_PORC_TRIM_3OriginalDbColumnName(){
				
					return "CAT_PORC_TRIM_3";
				
				}

				
			    public Double PORC_TRIM_4;

				public Double getPORC_TRIM_4 () {
					return this.PORC_TRIM_4;
				}

				public Boolean PORC_TRIM_4IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_4Length(){
				    return null;
				}
				public Integer PORC_TRIM_4Precision(){
				    return null;
				}
				public String PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_4OriginalDbColumnName(){
				
					return "PORC_TRIM_4";
				
				}

				
			    public String CAT_PORC_TRIM_4;

				public String getCAT_PORC_TRIM_4 () {
					return this.CAT_PORC_TRIM_4;
				}

				public Boolean CAT_PORC_TRIM_4IsNullable(){
				    return false;
				}
				public Boolean CAT_PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer CAT_PORC_TRIM_4Length(){
				    return null;
				}
				public Integer CAT_PORC_TRIM_4Precision(){
				    return null;
				}
				public String CAT_PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String CAT_PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String CAT_PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String CAT_PORC_TRIM_4OriginalDbColumnName(){
				
					return "CAT_PORC_TRIM_4";
				
				}

				
			    public Double PORC_ANUAL;

				public Double getPORC_ANUAL () {
					return this.PORC_ANUAL;
				}

				public Boolean PORC_ANUALIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUALIsKey(){
				    return false;
				}
				public Integer PORC_ANUALLength(){
				    return null;
				}
				public Integer PORC_ANUALPrecision(){
				    return null;
				}
				public String PORC_ANUALDefault(){
				
					return null;
				
				}
				public String PORC_ANUALComment(){
				
				    return "";
				
				}
				public String PORC_ANUALPattern(){
				
					return "";
				
				}
				public String PORC_ANUALOriginalDbColumnName(){
				
					return "PORC_ANUAL";
				
				}

				
			    public String CAT_PORC_ANUAL;

				public String getCAT_PORC_ANUAL () {
					return this.CAT_PORC_ANUAL;
				}

				public Boolean CAT_PORC_ANUALIsNullable(){
				    return false;
				}
				public Boolean CAT_PORC_ANUALIsKey(){
				    return false;
				}
				public Integer CAT_PORC_ANUALLength(){
				    return null;
				}
				public Integer CAT_PORC_ANUALPrecision(){
				    return null;
				}
				public String CAT_PORC_ANUALDefault(){
				
					return null;
				
				}
				public String CAT_PORC_ANUALComment(){
				
				    return "";
				
				}
				public String CAT_PORC_ANUALPattern(){
				
					return "";
				
				}
				public String CAT_PORC_ANUALOriginalDbColumnName(){
				
					return "CAT_PORC_ANUAL";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return 0;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row15Struct other = (row15Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row15Struct other) {

		other.ID = this.ID;
	            other.VIGENCIA = this.VIGENCIA;
	            other.REGIONAL = this.REGIONAL;
	            other.FUERZA = this.FUERZA;
	            other.ESM = this.ESM;
	            other.SUBPROGRAMA = this.SUBPROGRAMA;
	            other.ACTIVIDAD = this.ACTIVIDAD;
	            other.PORC_ANUAL_ACTIVIDAD = this.PORC_ANUAL_ACTIVIDAD;
	            other.CAT_PORC_ANUAL_ACT = this.CAT_PORC_ANUAL_ACT;
	            other.FORMATO = this.FORMATO;
	            other.PORC_TRIM_1 = this.PORC_TRIM_1;
	            other.CAT_PORC_TRIM_1 = this.CAT_PORC_TRIM_1;
	            other.PORC_TRIM_2 = this.PORC_TRIM_2;
	            other.CAT_PORC_TRIM_2 = this.CAT_PORC_TRIM_2;
	            other.PORC_TRIM_3 = this.PORC_TRIM_3;
	            other.CAT_PORC_TRIM_3 = this.CAT_PORC_TRIM_3;
	            other.PORC_TRIM_4 = this.PORC_TRIM_4;
	            other.CAT_PORC_TRIM_4 = this.CAT_PORC_TRIM_4;
	            other.PORC_ANUAL = this.PORC_ANUAL;
	            other.CAT_PORC_ANUAL = this.CAT_PORC_ANUAL;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            
	}

	public void copyKeysDataTo(row15Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.CAT_PORC_ANUAL_ACT = readString(dis);
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
					this.CAT_PORC_TRIM_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
					this.CAT_PORC_TRIM_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
					this.CAT_PORC_TRIM_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
					this.CAT_PORC_TRIM_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
					this.CAT_PORC_ANUAL = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.CAT_PORC_ANUAL_ACT = readString(dis);
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
					this.CAT_PORC_TRIM_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
					this.CAT_PORC_TRIM_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
					this.CAT_PORC_TRIM_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
					this.CAT_PORC_TRIM_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
					this.CAT_PORC_ANUAL = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_ANUAL_ACT,dos);
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_TRIM_1,dos);
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_TRIM_2,dos);
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_TRIM_3,dos);
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_TRIM_4,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_ANUAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_ANUAL_ACT,dos);
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_TRIM_1,dos);
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_TRIM_2,dos);
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_TRIM_3,dos);
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_TRIM_4,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_ANUAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VIGENCIA="+String.valueOf(VIGENCIA));
		sb.append(",REGIONAL="+REGIONAL);
		sb.append(",FUERZA="+FUERZA);
		sb.append(",ESM="+ESM);
		sb.append(",SUBPROGRAMA="+SUBPROGRAMA);
		sb.append(",ACTIVIDAD="+ACTIVIDAD);
		sb.append(",PORC_ANUAL_ACTIVIDAD="+String.valueOf(PORC_ANUAL_ACTIVIDAD));
		sb.append(",CAT_PORC_ANUAL_ACT="+CAT_PORC_ANUAL_ACT);
		sb.append(",FORMATO="+FORMATO);
		sb.append(",PORC_TRIM_1="+String.valueOf(PORC_TRIM_1));
		sb.append(",CAT_PORC_TRIM_1="+CAT_PORC_TRIM_1);
		sb.append(",PORC_TRIM_2="+String.valueOf(PORC_TRIM_2));
		sb.append(",CAT_PORC_TRIM_2="+CAT_PORC_TRIM_2);
		sb.append(",PORC_TRIM_3="+String.valueOf(PORC_TRIM_3));
		sb.append(",CAT_PORC_TRIM_3="+CAT_PORC_TRIM_3);
		sb.append(",PORC_TRIM_4="+String.valueOf(PORC_TRIM_4));
		sb.append(",CAT_PORC_TRIM_4="+CAT_PORC_TRIM_4);
		sb.append(",PORC_ANUAL="+String.valueOf(PORC_ANUAL));
		sb.append(",CAT_PORC_ANUAL="+CAT_PORC_ANUAL);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public int VIGENCIA;

				public int getVIGENCIA () {
					return this.VIGENCIA;
				}

				public Boolean VIGENCIAIsNullable(){
				    return false;
				}
				public Boolean VIGENCIAIsKey(){
				    return false;
				}
				public Integer VIGENCIALength(){
				    return 1;
				}
				public Integer VIGENCIAPrecision(){
				    return 0;
				}
				public String VIGENCIADefault(){
				
					return null;
				
				}
				public String VIGENCIAComment(){
				
				    return "";
				
				}
				public String VIGENCIAPattern(){
				
					return "";
				
				}
				public String VIGENCIAOriginalDbColumnName(){
				
					return "VIGENCIA";
				
				}

				
			    public String REGIONAL;

				public String getREGIONAL () {
					return this.REGIONAL;
				}

				public Boolean REGIONALIsNullable(){
				    return true;
				}
				public Boolean REGIONALIsKey(){
				    return false;
				}
				public Integer REGIONALLength(){
				    return null;
				}
				public Integer REGIONALPrecision(){
				    return null;
				}
				public String REGIONALDefault(){
				
					return null;
				
				}
				public String REGIONALComment(){
				
				    return "";
				
				}
				public String REGIONALPattern(){
				
					return "";
				
				}
				public String REGIONALOriginalDbColumnName(){
				
					return "REGIONAL";
				
				}

				
			    public String FUERZA;

				public String getFUERZA () {
					return this.FUERZA;
				}

				public Boolean FUERZAIsNullable(){
				    return false;
				}
				public Boolean FUERZAIsKey(){
				    return false;
				}
				public Integer FUERZALength(){
				    return null;
				}
				public Integer FUERZAPrecision(){
				    return null;
				}
				public String FUERZADefault(){
				
					return null;
				
				}
				public String FUERZAComment(){
				
				    return "";
				
				}
				public String FUERZAPattern(){
				
					return "";
				
				}
				public String FUERZAOriginalDbColumnName(){
				
					return "FUERZA";
				
				}

				
			    public String ESM;

				public String getESM () {
					return this.ESM;
				}

				public Boolean ESMIsNullable(){
				    return false;
				}
				public Boolean ESMIsKey(){
				    return false;
				}
				public Integer ESMLength(){
				    return null;
				}
				public Integer ESMPrecision(){
				    return null;
				}
				public String ESMDefault(){
				
					return null;
				
				}
				public String ESMComment(){
				
				    return "";
				
				}
				public String ESMPattern(){
				
					return "";
				
				}
				public String ESMOriginalDbColumnName(){
				
					return "ESM";
				
				}

				
			    public String SUBPROGRAMA;

				public String getSUBPROGRAMA () {
					return this.SUBPROGRAMA;
				}

				public Boolean SUBPROGRAMAIsNullable(){
				    return false;
				}
				public Boolean SUBPROGRAMAIsKey(){
				    return false;
				}
				public Integer SUBPROGRAMALength(){
				    return null;
				}
				public Integer SUBPROGRAMAPrecision(){
				    return null;
				}
				public String SUBPROGRAMADefault(){
				
					return null;
				
				}
				public String SUBPROGRAMAComment(){
				
				    return "";
				
				}
				public String SUBPROGRAMAPattern(){
				
					return "";
				
				}
				public String SUBPROGRAMAOriginalDbColumnName(){
				
					return "SUBPROGRAMA";
				
				}

				
			    public String ACTIVIDAD;

				public String getACTIVIDAD () {
					return this.ACTIVIDAD;
				}

				public Boolean ACTIVIDADIsNullable(){
				    return false;
				}
				public Boolean ACTIVIDADIsKey(){
				    return false;
				}
				public Integer ACTIVIDADLength(){
				    return null;
				}
				public Integer ACTIVIDADPrecision(){
				    return null;
				}
				public String ACTIVIDADDefault(){
				
					return null;
				
				}
				public String ACTIVIDADComment(){
				
				    return "";
				
				}
				public String ACTIVIDADPattern(){
				
					return "";
				
				}
				public String ACTIVIDADOriginalDbColumnName(){
				
					return "ACTIVIDAD";
				
				}

				
			    public Double PORC_ANUAL_ACTIVIDAD;

				public Double getPORC_ANUAL_ACTIVIDAD () {
					return this.PORC_ANUAL_ACTIVIDAD;
				}

				public Boolean PORC_ANUAL_ACTIVIDADIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUAL_ACTIVIDADIsKey(){
				    return false;
				}
				public Integer PORC_ANUAL_ACTIVIDADLength(){
				    return null;
				}
				public Integer PORC_ANUAL_ACTIVIDADPrecision(){
				    return null;
				}
				public String PORC_ANUAL_ACTIVIDADDefault(){
				
					return null;
				
				}
				public String PORC_ANUAL_ACTIVIDADComment(){
				
				    return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADPattern(){
				
					return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADOriginalDbColumnName(){
				
					return "PORC_ANUAL_ACTIVIDAD";
				
				}

				
			    public String CAT_PORC_ANUAL_ACT;

				public String getCAT_PORC_ANUAL_ACT () {
					return this.CAT_PORC_ANUAL_ACT;
				}

				public Boolean CAT_PORC_ANUAL_ACTIsNullable(){
				    return true;
				}
				public Boolean CAT_PORC_ANUAL_ACTIsKey(){
				    return false;
				}
				public Integer CAT_PORC_ANUAL_ACTLength(){
				    return 255;
				}
				public Integer CAT_PORC_ANUAL_ACTPrecision(){
				    return 0;
				}
				public String CAT_PORC_ANUAL_ACTDefault(){
				
					return null;
				
				}
				public String CAT_PORC_ANUAL_ACTComment(){
				
				    return null;
				
				}
				public String CAT_PORC_ANUAL_ACTPattern(){
				
				    return null;
				
				}
				public String CAT_PORC_ANUAL_ACTOriginalDbColumnName(){
				
					return "CAT_PORC_ANUAL_ACT";
				
				}

				
			    public String FORMATO;

				public String getFORMATO () {
					return this.FORMATO;
				}

				public Boolean FORMATOIsNullable(){
				    return false;
				}
				public Boolean FORMATOIsKey(){
				    return false;
				}
				public Integer FORMATOLength(){
				    return null;
				}
				public Integer FORMATOPrecision(){
				    return null;
				}
				public String FORMATODefault(){
				
					return null;
				
				}
				public String FORMATOComment(){
				
				    return "";
				
				}
				public String FORMATOPattern(){
				
					return "";
				
				}
				public String FORMATOOriginalDbColumnName(){
				
					return "FORMATO";
				
				}

				
			    public Double PORC_TRIM_1;

				public Double getPORC_TRIM_1 () {
					return this.PORC_TRIM_1;
				}

				public Boolean PORC_TRIM_1IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_1Length(){
				    return null;
				}
				public Integer PORC_TRIM_1Precision(){
				    return null;
				}
				public String PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_1OriginalDbColumnName(){
				
					return "PORC_TRIM_1";
				
				}

				
			    public String CAT_PORC_TRIM_1;

				public String getCAT_PORC_TRIM_1 () {
					return this.CAT_PORC_TRIM_1;
				}

				public Boolean CAT_PORC_TRIM_1IsNullable(){
				    return false;
				}
				public Boolean CAT_PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer CAT_PORC_TRIM_1Length(){
				    return null;
				}
				public Integer CAT_PORC_TRIM_1Precision(){
				    return null;
				}
				public String CAT_PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String CAT_PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String CAT_PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String CAT_PORC_TRIM_1OriginalDbColumnName(){
				
					return "CAT_PORC_TRIM_1";
				
				}

				
			    public Double PORC_TRIM_2;

				public Double getPORC_TRIM_2 () {
					return this.PORC_TRIM_2;
				}

				public Boolean PORC_TRIM_2IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_2Length(){
				    return null;
				}
				public Integer PORC_TRIM_2Precision(){
				    return null;
				}
				public String PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_2OriginalDbColumnName(){
				
					return "PORC_TRIM_2";
				
				}

				
			    public String CAT_PORC_TRIM_2;

				public String getCAT_PORC_TRIM_2 () {
					return this.CAT_PORC_TRIM_2;
				}

				public Boolean CAT_PORC_TRIM_2IsNullable(){
				    return false;
				}
				public Boolean CAT_PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer CAT_PORC_TRIM_2Length(){
				    return null;
				}
				public Integer CAT_PORC_TRIM_2Precision(){
				    return null;
				}
				public String CAT_PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String CAT_PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String CAT_PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String CAT_PORC_TRIM_2OriginalDbColumnName(){
				
					return "CAT_PORC_TRIM_2";
				
				}

				
			    public Double PORC_TRIM_3;

				public Double getPORC_TRIM_3 () {
					return this.PORC_TRIM_3;
				}

				public Boolean PORC_TRIM_3IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_3Length(){
				    return null;
				}
				public Integer PORC_TRIM_3Precision(){
				    return null;
				}
				public String PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_3OriginalDbColumnName(){
				
					return "PORC_TRIM_3";
				
				}

				
			    public String CAT_PORC_TRIM_3;

				public String getCAT_PORC_TRIM_3 () {
					return this.CAT_PORC_TRIM_3;
				}

				public Boolean CAT_PORC_TRIM_3IsNullable(){
				    return false;
				}
				public Boolean CAT_PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer CAT_PORC_TRIM_3Length(){
				    return null;
				}
				public Integer CAT_PORC_TRIM_3Precision(){
				    return null;
				}
				public String CAT_PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String CAT_PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String CAT_PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String CAT_PORC_TRIM_3OriginalDbColumnName(){
				
					return "CAT_PORC_TRIM_3";
				
				}

				
			    public Double PORC_TRIM_4;

				public Double getPORC_TRIM_4 () {
					return this.PORC_TRIM_4;
				}

				public Boolean PORC_TRIM_4IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_4Length(){
				    return null;
				}
				public Integer PORC_TRIM_4Precision(){
				    return null;
				}
				public String PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_4OriginalDbColumnName(){
				
					return "PORC_TRIM_4";
				
				}

				
			    public String CAT_PORC_TRIM_4;

				public String getCAT_PORC_TRIM_4 () {
					return this.CAT_PORC_TRIM_4;
				}

				public Boolean CAT_PORC_TRIM_4IsNullable(){
				    return false;
				}
				public Boolean CAT_PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer CAT_PORC_TRIM_4Length(){
				    return null;
				}
				public Integer CAT_PORC_TRIM_4Precision(){
				    return null;
				}
				public String CAT_PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String CAT_PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String CAT_PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String CAT_PORC_TRIM_4OriginalDbColumnName(){
				
					return "CAT_PORC_TRIM_4";
				
				}

				
			    public Double PORC_ANUAL;

				public Double getPORC_ANUAL () {
					return this.PORC_ANUAL;
				}

				public Boolean PORC_ANUALIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUALIsKey(){
				    return false;
				}
				public Integer PORC_ANUALLength(){
				    return null;
				}
				public Integer PORC_ANUALPrecision(){
				    return null;
				}
				public String PORC_ANUALDefault(){
				
					return null;
				
				}
				public String PORC_ANUALComment(){
				
				    return "";
				
				}
				public String PORC_ANUALPattern(){
				
					return "";
				
				}
				public String PORC_ANUALOriginalDbColumnName(){
				
					return "PORC_ANUAL";
				
				}

				
			    public String CAT_PORC_ANUAL;

				public String getCAT_PORC_ANUAL () {
					return this.CAT_PORC_ANUAL;
				}

				public Boolean CAT_PORC_ANUALIsNullable(){
				    return false;
				}
				public Boolean CAT_PORC_ANUALIsKey(){
				    return false;
				}
				public Integer CAT_PORC_ANUALLength(){
				    return null;
				}
				public Integer CAT_PORC_ANUALPrecision(){
				    return null;
				}
				public String CAT_PORC_ANUALDefault(){
				
					return null;
				
				}
				public String CAT_PORC_ANUALComment(){
				
				    return "";
				
				}
				public String CAT_PORC_ANUALPattern(){
				
					return "";
				
				}
				public String CAT_PORC_ANUALOriginalDbColumnName(){
				
					return "CAT_PORC_ANUAL";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return 0;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final OnRowsEndStructtSortRow_1 other = (OnRowsEndStructtSortRow_1) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(OnRowsEndStructtSortRow_1 other) {

		other.ID = this.ID;
	            other.VIGENCIA = this.VIGENCIA;
	            other.REGIONAL = this.REGIONAL;
	            other.FUERZA = this.FUERZA;
	            other.ESM = this.ESM;
	            other.SUBPROGRAMA = this.SUBPROGRAMA;
	            other.ACTIVIDAD = this.ACTIVIDAD;
	            other.PORC_ANUAL_ACTIVIDAD = this.PORC_ANUAL_ACTIVIDAD;
	            other.CAT_PORC_ANUAL_ACT = this.CAT_PORC_ANUAL_ACT;
	            other.FORMATO = this.FORMATO;
	            other.PORC_TRIM_1 = this.PORC_TRIM_1;
	            other.CAT_PORC_TRIM_1 = this.CAT_PORC_TRIM_1;
	            other.PORC_TRIM_2 = this.PORC_TRIM_2;
	            other.CAT_PORC_TRIM_2 = this.CAT_PORC_TRIM_2;
	            other.PORC_TRIM_3 = this.PORC_TRIM_3;
	            other.CAT_PORC_TRIM_3 = this.CAT_PORC_TRIM_3;
	            other.PORC_TRIM_4 = this.PORC_TRIM_4;
	            other.CAT_PORC_TRIM_4 = this.CAT_PORC_TRIM_4;
	            other.PORC_ANUAL = this.PORC_ANUAL;
	            other.CAT_PORC_ANUAL = this.CAT_PORC_ANUAL;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            
	}

	public void copyKeysDataTo(OnRowsEndStructtSortRow_1 other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.CAT_PORC_ANUAL_ACT = readString(dis);
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
					this.CAT_PORC_TRIM_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
					this.CAT_PORC_TRIM_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
					this.CAT_PORC_TRIM_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
					this.CAT_PORC_TRIM_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
					this.CAT_PORC_ANUAL = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.CAT_PORC_ANUAL_ACT = readString(dis);
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
					this.CAT_PORC_TRIM_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
					this.CAT_PORC_TRIM_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
					this.CAT_PORC_TRIM_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
					this.CAT_PORC_TRIM_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
					this.CAT_PORC_ANUAL = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_ANUAL_ACT,dos);
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_TRIM_1,dos);
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_TRIM_2,dos);
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_TRIM_3,dos);
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_TRIM_4,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_ANUAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_ANUAL_ACT,dos);
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_TRIM_1,dos);
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_TRIM_2,dos);
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_TRIM_3,dos);
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_TRIM_4,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_ANUAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VIGENCIA="+String.valueOf(VIGENCIA));
		sb.append(",REGIONAL="+REGIONAL);
		sb.append(",FUERZA="+FUERZA);
		sb.append(",ESM="+ESM);
		sb.append(",SUBPROGRAMA="+SUBPROGRAMA);
		sb.append(",ACTIVIDAD="+ACTIVIDAD);
		sb.append(",PORC_ANUAL_ACTIVIDAD="+String.valueOf(PORC_ANUAL_ACTIVIDAD));
		sb.append(",CAT_PORC_ANUAL_ACT="+CAT_PORC_ANUAL_ACT);
		sb.append(",FORMATO="+FORMATO);
		sb.append(",PORC_TRIM_1="+String.valueOf(PORC_TRIM_1));
		sb.append(",CAT_PORC_TRIM_1="+CAT_PORC_TRIM_1);
		sb.append(",PORC_TRIM_2="+String.valueOf(PORC_TRIM_2));
		sb.append(",CAT_PORC_TRIM_2="+CAT_PORC_TRIM_2);
		sb.append(",PORC_TRIM_3="+String.valueOf(PORC_TRIM_3));
		sb.append(",CAT_PORC_TRIM_3="+CAT_PORC_TRIM_3);
		sb.append(",PORC_TRIM_4="+String.valueOf(PORC_TRIM_4));
		sb.append(",CAT_PORC_TRIM_4="+CAT_PORC_TRIM_4);
		sb.append(",PORC_ANUAL="+String.valueOf(PORC_ANUAL));
		sb.append(",CAT_PORC_ANUAL="+CAT_PORC_ANUAL);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_1 other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfout6Struct implements routines.system.IPersistableRow<copyOfout6Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public int VIGENCIA;

				public int getVIGENCIA () {
					return this.VIGENCIA;
				}

				public Boolean VIGENCIAIsNullable(){
				    return false;
				}
				public Boolean VIGENCIAIsKey(){
				    return false;
				}
				public Integer VIGENCIALength(){
				    return 1;
				}
				public Integer VIGENCIAPrecision(){
				    return 0;
				}
				public String VIGENCIADefault(){
				
					return null;
				
				}
				public String VIGENCIAComment(){
				
				    return "";
				
				}
				public String VIGENCIAPattern(){
				
					return "";
				
				}
				public String VIGENCIAOriginalDbColumnName(){
				
					return "VIGENCIA";
				
				}

				
			    public String REGIONAL;

				public String getREGIONAL () {
					return this.REGIONAL;
				}

				public Boolean REGIONALIsNullable(){
				    return true;
				}
				public Boolean REGIONALIsKey(){
				    return false;
				}
				public Integer REGIONALLength(){
				    return null;
				}
				public Integer REGIONALPrecision(){
				    return null;
				}
				public String REGIONALDefault(){
				
					return null;
				
				}
				public String REGIONALComment(){
				
				    return "";
				
				}
				public String REGIONALPattern(){
				
					return "";
				
				}
				public String REGIONALOriginalDbColumnName(){
				
					return "REGIONAL";
				
				}

				
			    public String FUERZA;

				public String getFUERZA () {
					return this.FUERZA;
				}

				public Boolean FUERZAIsNullable(){
				    return false;
				}
				public Boolean FUERZAIsKey(){
				    return false;
				}
				public Integer FUERZALength(){
				    return null;
				}
				public Integer FUERZAPrecision(){
				    return null;
				}
				public String FUERZADefault(){
				
					return null;
				
				}
				public String FUERZAComment(){
				
				    return "";
				
				}
				public String FUERZAPattern(){
				
					return "";
				
				}
				public String FUERZAOriginalDbColumnName(){
				
					return "FUERZA";
				
				}

				
			    public String ESM;

				public String getESM () {
					return this.ESM;
				}

				public Boolean ESMIsNullable(){
				    return false;
				}
				public Boolean ESMIsKey(){
				    return false;
				}
				public Integer ESMLength(){
				    return null;
				}
				public Integer ESMPrecision(){
				    return null;
				}
				public String ESMDefault(){
				
					return null;
				
				}
				public String ESMComment(){
				
				    return "";
				
				}
				public String ESMPattern(){
				
					return "";
				
				}
				public String ESMOriginalDbColumnName(){
				
					return "ESM";
				
				}

				
			    public String SUBPROGRAMA;

				public String getSUBPROGRAMA () {
					return this.SUBPROGRAMA;
				}

				public Boolean SUBPROGRAMAIsNullable(){
				    return false;
				}
				public Boolean SUBPROGRAMAIsKey(){
				    return false;
				}
				public Integer SUBPROGRAMALength(){
				    return null;
				}
				public Integer SUBPROGRAMAPrecision(){
				    return null;
				}
				public String SUBPROGRAMADefault(){
				
					return null;
				
				}
				public String SUBPROGRAMAComment(){
				
				    return "";
				
				}
				public String SUBPROGRAMAPattern(){
				
					return "";
				
				}
				public String SUBPROGRAMAOriginalDbColumnName(){
				
					return "SUBPROGRAMA";
				
				}

				
			    public String ACTIVIDAD;

				public String getACTIVIDAD () {
					return this.ACTIVIDAD;
				}

				public Boolean ACTIVIDADIsNullable(){
				    return false;
				}
				public Boolean ACTIVIDADIsKey(){
				    return false;
				}
				public Integer ACTIVIDADLength(){
				    return null;
				}
				public Integer ACTIVIDADPrecision(){
				    return null;
				}
				public String ACTIVIDADDefault(){
				
					return null;
				
				}
				public String ACTIVIDADComment(){
				
				    return "";
				
				}
				public String ACTIVIDADPattern(){
				
					return "";
				
				}
				public String ACTIVIDADOriginalDbColumnName(){
				
					return "ACTIVIDAD";
				
				}

				
			    public Double PORC_ANUAL_ACTIVIDAD;

				public Double getPORC_ANUAL_ACTIVIDAD () {
					return this.PORC_ANUAL_ACTIVIDAD;
				}

				public Boolean PORC_ANUAL_ACTIVIDADIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUAL_ACTIVIDADIsKey(){
				    return false;
				}
				public Integer PORC_ANUAL_ACTIVIDADLength(){
				    return null;
				}
				public Integer PORC_ANUAL_ACTIVIDADPrecision(){
				    return null;
				}
				public String PORC_ANUAL_ACTIVIDADDefault(){
				
					return null;
				
				}
				public String PORC_ANUAL_ACTIVIDADComment(){
				
				    return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADPattern(){
				
					return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADOriginalDbColumnName(){
				
					return "PORC_ANUAL_ACTIVIDAD";
				
				}

				
			    public String CAT_PORC_ANUAL_ACT;

				public String getCAT_PORC_ANUAL_ACT () {
					return this.CAT_PORC_ANUAL_ACT;
				}

				public Boolean CAT_PORC_ANUAL_ACTIsNullable(){
				    return true;
				}
				public Boolean CAT_PORC_ANUAL_ACTIsKey(){
				    return false;
				}
				public Integer CAT_PORC_ANUAL_ACTLength(){
				    return 255;
				}
				public Integer CAT_PORC_ANUAL_ACTPrecision(){
				    return 0;
				}
				public String CAT_PORC_ANUAL_ACTDefault(){
				
					return null;
				
				}
				public String CAT_PORC_ANUAL_ACTComment(){
				
				    return null;
				
				}
				public String CAT_PORC_ANUAL_ACTPattern(){
				
				    return null;
				
				}
				public String CAT_PORC_ANUAL_ACTOriginalDbColumnName(){
				
					return "CAT_PORC_ANUAL_ACT";
				
				}

				
			    public String FORMATO;

				public String getFORMATO () {
					return this.FORMATO;
				}

				public Boolean FORMATOIsNullable(){
				    return false;
				}
				public Boolean FORMATOIsKey(){
				    return false;
				}
				public Integer FORMATOLength(){
				    return null;
				}
				public Integer FORMATOPrecision(){
				    return null;
				}
				public String FORMATODefault(){
				
					return null;
				
				}
				public String FORMATOComment(){
				
				    return "";
				
				}
				public String FORMATOPattern(){
				
					return "";
				
				}
				public String FORMATOOriginalDbColumnName(){
				
					return "FORMATO";
				
				}

				
			    public Double PORC_TRIM_1;

				public Double getPORC_TRIM_1 () {
					return this.PORC_TRIM_1;
				}

				public Boolean PORC_TRIM_1IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_1Length(){
				    return null;
				}
				public Integer PORC_TRIM_1Precision(){
				    return null;
				}
				public String PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_1OriginalDbColumnName(){
				
					return "PORC_TRIM_1";
				
				}

				
			    public String CAT_PORC_TRIM_1;

				public String getCAT_PORC_TRIM_1 () {
					return this.CAT_PORC_TRIM_1;
				}

				public Boolean CAT_PORC_TRIM_1IsNullable(){
				    return false;
				}
				public Boolean CAT_PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer CAT_PORC_TRIM_1Length(){
				    return null;
				}
				public Integer CAT_PORC_TRIM_1Precision(){
				    return null;
				}
				public String CAT_PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String CAT_PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String CAT_PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String CAT_PORC_TRIM_1OriginalDbColumnName(){
				
					return "CAT_PORC_TRIM_1";
				
				}

				
			    public Double PORC_TRIM_2;

				public Double getPORC_TRIM_2 () {
					return this.PORC_TRIM_2;
				}

				public Boolean PORC_TRIM_2IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_2Length(){
				    return null;
				}
				public Integer PORC_TRIM_2Precision(){
				    return null;
				}
				public String PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_2OriginalDbColumnName(){
				
					return "PORC_TRIM_2";
				
				}

				
			    public String CAT_PORC_TRIM_2;

				public String getCAT_PORC_TRIM_2 () {
					return this.CAT_PORC_TRIM_2;
				}

				public Boolean CAT_PORC_TRIM_2IsNullable(){
				    return false;
				}
				public Boolean CAT_PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer CAT_PORC_TRIM_2Length(){
				    return null;
				}
				public Integer CAT_PORC_TRIM_2Precision(){
				    return null;
				}
				public String CAT_PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String CAT_PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String CAT_PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String CAT_PORC_TRIM_2OriginalDbColumnName(){
				
					return "CAT_PORC_TRIM_2";
				
				}

				
			    public Double PORC_TRIM_3;

				public Double getPORC_TRIM_3 () {
					return this.PORC_TRIM_3;
				}

				public Boolean PORC_TRIM_3IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_3Length(){
				    return null;
				}
				public Integer PORC_TRIM_3Precision(){
				    return null;
				}
				public String PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_3OriginalDbColumnName(){
				
					return "PORC_TRIM_3";
				
				}

				
			    public String CAT_PORC_TRIM_3;

				public String getCAT_PORC_TRIM_3 () {
					return this.CAT_PORC_TRIM_3;
				}

				public Boolean CAT_PORC_TRIM_3IsNullable(){
				    return false;
				}
				public Boolean CAT_PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer CAT_PORC_TRIM_3Length(){
				    return null;
				}
				public Integer CAT_PORC_TRIM_3Precision(){
				    return null;
				}
				public String CAT_PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String CAT_PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String CAT_PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String CAT_PORC_TRIM_3OriginalDbColumnName(){
				
					return "CAT_PORC_TRIM_3";
				
				}

				
			    public Double PORC_TRIM_4;

				public Double getPORC_TRIM_4 () {
					return this.PORC_TRIM_4;
				}

				public Boolean PORC_TRIM_4IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_4Length(){
				    return null;
				}
				public Integer PORC_TRIM_4Precision(){
				    return null;
				}
				public String PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_4OriginalDbColumnName(){
				
					return "PORC_TRIM_4";
				
				}

				
			    public String CAT_PORC_TRIM_4;

				public String getCAT_PORC_TRIM_4 () {
					return this.CAT_PORC_TRIM_4;
				}

				public Boolean CAT_PORC_TRIM_4IsNullable(){
				    return false;
				}
				public Boolean CAT_PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer CAT_PORC_TRIM_4Length(){
				    return null;
				}
				public Integer CAT_PORC_TRIM_4Precision(){
				    return null;
				}
				public String CAT_PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String CAT_PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String CAT_PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String CAT_PORC_TRIM_4OriginalDbColumnName(){
				
					return "CAT_PORC_TRIM_4";
				
				}

				
			    public Double PORC_ANUAL;

				public Double getPORC_ANUAL () {
					return this.PORC_ANUAL;
				}

				public Boolean PORC_ANUALIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUALIsKey(){
				    return false;
				}
				public Integer PORC_ANUALLength(){
				    return null;
				}
				public Integer PORC_ANUALPrecision(){
				    return null;
				}
				public String PORC_ANUALDefault(){
				
					return null;
				
				}
				public String PORC_ANUALComment(){
				
				    return "";
				
				}
				public String PORC_ANUALPattern(){
				
					return "";
				
				}
				public String PORC_ANUALOriginalDbColumnName(){
				
					return "PORC_ANUAL";
				
				}

				
			    public String CAT_PORC_ANUAL;

				public String getCAT_PORC_ANUAL () {
					return this.CAT_PORC_ANUAL;
				}

				public Boolean CAT_PORC_ANUALIsNullable(){
				    return false;
				}
				public Boolean CAT_PORC_ANUALIsKey(){
				    return false;
				}
				public Integer CAT_PORC_ANUALLength(){
				    return null;
				}
				public Integer CAT_PORC_ANUALPrecision(){
				    return null;
				}
				public String CAT_PORC_ANUALDefault(){
				
					return null;
				
				}
				public String CAT_PORC_ANUALComment(){
				
				    return "";
				
				}
				public String CAT_PORC_ANUALPattern(){
				
					return "";
				
				}
				public String CAT_PORC_ANUALOriginalDbColumnName(){
				
					return "CAT_PORC_ANUAL";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return 0;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfout6Struct other = (copyOfout6Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfout6Struct other) {

		other.ID = this.ID;
	            other.VIGENCIA = this.VIGENCIA;
	            other.REGIONAL = this.REGIONAL;
	            other.FUERZA = this.FUERZA;
	            other.ESM = this.ESM;
	            other.SUBPROGRAMA = this.SUBPROGRAMA;
	            other.ACTIVIDAD = this.ACTIVIDAD;
	            other.PORC_ANUAL_ACTIVIDAD = this.PORC_ANUAL_ACTIVIDAD;
	            other.CAT_PORC_ANUAL_ACT = this.CAT_PORC_ANUAL_ACT;
	            other.FORMATO = this.FORMATO;
	            other.PORC_TRIM_1 = this.PORC_TRIM_1;
	            other.CAT_PORC_TRIM_1 = this.CAT_PORC_TRIM_1;
	            other.PORC_TRIM_2 = this.PORC_TRIM_2;
	            other.CAT_PORC_TRIM_2 = this.CAT_PORC_TRIM_2;
	            other.PORC_TRIM_3 = this.PORC_TRIM_3;
	            other.CAT_PORC_TRIM_3 = this.CAT_PORC_TRIM_3;
	            other.PORC_TRIM_4 = this.PORC_TRIM_4;
	            other.CAT_PORC_TRIM_4 = this.CAT_PORC_TRIM_4;
	            other.PORC_ANUAL = this.PORC_ANUAL;
	            other.CAT_PORC_ANUAL = this.CAT_PORC_ANUAL;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            
	}

	public void copyKeysDataTo(copyOfout6Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.CAT_PORC_ANUAL_ACT = readString(dis);
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
					this.CAT_PORC_TRIM_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
					this.CAT_PORC_TRIM_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
					this.CAT_PORC_TRIM_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
					this.CAT_PORC_TRIM_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
					this.CAT_PORC_ANUAL = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.CAT_PORC_ANUAL_ACT = readString(dis);
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
					this.CAT_PORC_TRIM_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
					this.CAT_PORC_TRIM_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
					this.CAT_PORC_TRIM_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
					this.CAT_PORC_TRIM_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
					this.CAT_PORC_ANUAL = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_ANUAL_ACT,dos);
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_TRIM_1,dos);
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_TRIM_2,dos);
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_TRIM_3,dos);
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_TRIM_4,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_ANUAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_ANUAL_ACT,dos);
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_TRIM_1,dos);
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_TRIM_2,dos);
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_TRIM_3,dos);
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_TRIM_4,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// String
				
						writeString(this.CAT_PORC_ANUAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VIGENCIA="+String.valueOf(VIGENCIA));
		sb.append(",REGIONAL="+REGIONAL);
		sb.append(",FUERZA="+FUERZA);
		sb.append(",ESM="+ESM);
		sb.append(",SUBPROGRAMA="+SUBPROGRAMA);
		sb.append(",ACTIVIDAD="+ACTIVIDAD);
		sb.append(",PORC_ANUAL_ACTIVIDAD="+String.valueOf(PORC_ANUAL_ACTIVIDAD));
		sb.append(",CAT_PORC_ANUAL_ACT="+CAT_PORC_ANUAL_ACT);
		sb.append(",FORMATO="+FORMATO);
		sb.append(",PORC_TRIM_1="+String.valueOf(PORC_TRIM_1));
		sb.append(",CAT_PORC_TRIM_1="+CAT_PORC_TRIM_1);
		sb.append(",PORC_TRIM_2="+String.valueOf(PORC_TRIM_2));
		sb.append(",CAT_PORC_TRIM_2="+CAT_PORC_TRIM_2);
		sb.append(",PORC_TRIM_3="+String.valueOf(PORC_TRIM_3));
		sb.append(",CAT_PORC_TRIM_3="+CAT_PORC_TRIM_3);
		sb.append(",PORC_TRIM_4="+String.valueOf(PORC_TRIM_4));
		sb.append(",CAT_PORC_TRIM_4="+CAT_PORC_TRIM_4);
		sb.append(",PORC_ANUAL="+String.valueOf(PORC_ANUAL));
		sb.append(",CAT_PORC_ANUAL="+CAT_PORC_ANUAL);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public int VIGENCIA;

				public int getVIGENCIA () {
					return this.VIGENCIA;
				}

				public Boolean VIGENCIAIsNullable(){
				    return false;
				}
				public Boolean VIGENCIAIsKey(){
				    return false;
				}
				public Integer VIGENCIALength(){
				    return 1;
				}
				public Integer VIGENCIAPrecision(){
				    return 0;
				}
				public String VIGENCIADefault(){
				
					return null;
				
				}
				public String VIGENCIAComment(){
				
				    return "";
				
				}
				public String VIGENCIAPattern(){
				
					return "";
				
				}
				public String VIGENCIAOriginalDbColumnName(){
				
					return "VIGENCIA";
				
				}

				
			    public String REGIONAL;

				public String getREGIONAL () {
					return this.REGIONAL;
				}

				public Boolean REGIONALIsNullable(){
				    return true;
				}
				public Boolean REGIONALIsKey(){
				    return false;
				}
				public Integer REGIONALLength(){
				    return null;
				}
				public Integer REGIONALPrecision(){
				    return null;
				}
				public String REGIONALDefault(){
				
					return null;
				
				}
				public String REGIONALComment(){
				
				    return "";
				
				}
				public String REGIONALPattern(){
				
					return "";
				
				}
				public String REGIONALOriginalDbColumnName(){
				
					return "REGIONAL";
				
				}

				
			    public String FUERZA;

				public String getFUERZA () {
					return this.FUERZA;
				}

				public Boolean FUERZAIsNullable(){
				    return false;
				}
				public Boolean FUERZAIsKey(){
				    return false;
				}
				public Integer FUERZALength(){
				    return null;
				}
				public Integer FUERZAPrecision(){
				    return null;
				}
				public String FUERZADefault(){
				
					return null;
				
				}
				public String FUERZAComment(){
				
				    return "";
				
				}
				public String FUERZAPattern(){
				
					return "";
				
				}
				public String FUERZAOriginalDbColumnName(){
				
					return "FUERZA";
				
				}

				
			    public String ESM;

				public String getESM () {
					return this.ESM;
				}

				public Boolean ESMIsNullable(){
				    return false;
				}
				public Boolean ESMIsKey(){
				    return false;
				}
				public Integer ESMLength(){
				    return null;
				}
				public Integer ESMPrecision(){
				    return null;
				}
				public String ESMDefault(){
				
					return null;
				
				}
				public String ESMComment(){
				
				    return "";
				
				}
				public String ESMPattern(){
				
					return "";
				
				}
				public String ESMOriginalDbColumnName(){
				
					return "ESM";
				
				}

				
			    public String SUBPROGRAMA;

				public String getSUBPROGRAMA () {
					return this.SUBPROGRAMA;
				}

				public Boolean SUBPROGRAMAIsNullable(){
				    return false;
				}
				public Boolean SUBPROGRAMAIsKey(){
				    return false;
				}
				public Integer SUBPROGRAMALength(){
				    return null;
				}
				public Integer SUBPROGRAMAPrecision(){
				    return null;
				}
				public String SUBPROGRAMADefault(){
				
					return null;
				
				}
				public String SUBPROGRAMAComment(){
				
				    return "";
				
				}
				public String SUBPROGRAMAPattern(){
				
					return "";
				
				}
				public String SUBPROGRAMAOriginalDbColumnName(){
				
					return "SUBPROGRAMA";
				
				}

				
			    public String ACTIVIDAD;

				public String getACTIVIDAD () {
					return this.ACTIVIDAD;
				}

				public Boolean ACTIVIDADIsNullable(){
				    return false;
				}
				public Boolean ACTIVIDADIsKey(){
				    return false;
				}
				public Integer ACTIVIDADLength(){
				    return null;
				}
				public Integer ACTIVIDADPrecision(){
				    return null;
				}
				public String ACTIVIDADDefault(){
				
					return null;
				
				}
				public String ACTIVIDADComment(){
				
				    return "";
				
				}
				public String ACTIVIDADPattern(){
				
					return "";
				
				}
				public String ACTIVIDADOriginalDbColumnName(){
				
					return "ACTIVIDAD";
				
				}

				
			    public Double PORC_ANUAL_ACTIVIDAD;

				public Double getPORC_ANUAL_ACTIVIDAD () {
					return this.PORC_ANUAL_ACTIVIDAD;
				}

				public Boolean PORC_ANUAL_ACTIVIDADIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUAL_ACTIVIDADIsKey(){
				    return false;
				}
				public Integer PORC_ANUAL_ACTIVIDADLength(){
				    return null;
				}
				public Integer PORC_ANUAL_ACTIVIDADPrecision(){
				    return null;
				}
				public String PORC_ANUAL_ACTIVIDADDefault(){
				
					return null;
				
				}
				public String PORC_ANUAL_ACTIVIDADComment(){
				
				    return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADPattern(){
				
					return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADOriginalDbColumnName(){
				
					return "PORC_ANUAL_ACTIVIDAD";
				
				}

				
			    public String FORMATO;

				public String getFORMATO () {
					return this.FORMATO;
				}

				public Boolean FORMATOIsNullable(){
				    return false;
				}
				public Boolean FORMATOIsKey(){
				    return false;
				}
				public Integer FORMATOLength(){
				    return null;
				}
				public Integer FORMATOPrecision(){
				    return null;
				}
				public String FORMATODefault(){
				
					return null;
				
				}
				public String FORMATOComment(){
				
				    return "";
				
				}
				public String FORMATOPattern(){
				
					return "";
				
				}
				public String FORMATOOriginalDbColumnName(){
				
					return "FORMATO";
				
				}

				
			    public Double PORC_TRIM_1;

				public Double getPORC_TRIM_1 () {
					return this.PORC_TRIM_1;
				}

				public Boolean PORC_TRIM_1IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_1Length(){
				    return null;
				}
				public Integer PORC_TRIM_1Precision(){
				    return null;
				}
				public String PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_1OriginalDbColumnName(){
				
					return "PORC_TRIM_1";
				
				}

				
			    public String NOM_PORC_TRIM_1;

				public String getNOM_PORC_TRIM_1 () {
					return this.NOM_PORC_TRIM_1;
				}

				public Boolean NOM_PORC_TRIM_1IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_1Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_1Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_1OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_1";
				
				}

				
			    public Double PORC_TRIM_2;

				public Double getPORC_TRIM_2 () {
					return this.PORC_TRIM_2;
				}

				public Boolean PORC_TRIM_2IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_2Length(){
				    return null;
				}
				public Integer PORC_TRIM_2Precision(){
				    return null;
				}
				public String PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_2OriginalDbColumnName(){
				
					return "PORC_TRIM_2";
				
				}

				
			    public String NOM_PORC_TRIM_2;

				public String getNOM_PORC_TRIM_2 () {
					return this.NOM_PORC_TRIM_2;
				}

				public Boolean NOM_PORC_TRIM_2IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_2Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_2Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_2OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_2";
				
				}

				
			    public Double PORC_TRIM_3;

				public Double getPORC_TRIM_3 () {
					return this.PORC_TRIM_3;
				}

				public Boolean PORC_TRIM_3IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_3Length(){
				    return null;
				}
				public Integer PORC_TRIM_3Precision(){
				    return null;
				}
				public String PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_3OriginalDbColumnName(){
				
					return "PORC_TRIM_3";
				
				}

				
			    public String NOM_PORC_TRIM_3;

				public String getNOM_PORC_TRIM_3 () {
					return this.NOM_PORC_TRIM_3;
				}

				public Boolean NOM_PORC_TRIM_3IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_3Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_3Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_3OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_3";
				
				}

				
			    public Double PORC_TRIM_4;

				public Double getPORC_TRIM_4 () {
					return this.PORC_TRIM_4;
				}

				public Boolean PORC_TRIM_4IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_4Length(){
				    return null;
				}
				public Integer PORC_TRIM_4Precision(){
				    return null;
				}
				public String PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_4OriginalDbColumnName(){
				
					return "PORC_TRIM_4";
				
				}

				
			    public String NOM_PORC_TRIM_4;

				public String getNOM_PORC_TRIM_4 () {
					return this.NOM_PORC_TRIM_4;
				}

				public Boolean NOM_PORC_TRIM_4IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_4Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_4Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_4OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_4";
				
				}

				
			    public Double PORC_ANUAL;

				public Double getPORC_ANUAL () {
					return this.PORC_ANUAL;
				}

				public Boolean PORC_ANUALIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUALIsKey(){
				    return false;
				}
				public Integer PORC_ANUALLength(){
				    return null;
				}
				public Integer PORC_ANUALPrecision(){
				    return null;
				}
				public String PORC_ANUALDefault(){
				
					return null;
				
				}
				public String PORC_ANUALComment(){
				
				    return "";
				
				}
				public String PORC_ANUALPattern(){
				
					return "";
				
				}
				public String PORC_ANUALOriginalDbColumnName(){
				
					return "PORC_ANUAL";
				
				}

				
			    public String NOM_PORC_ANUAL;

				public String getNOM_PORC_ANUAL () {
					return this.NOM_PORC_ANUAL;
				}

				public Boolean NOM_PORC_ANUALIsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_ANUALIsKey(){
				    return false;
				}
				public Integer NOM_PORC_ANUALLength(){
				    return null;
				}
				public Integer NOM_PORC_ANUALPrecision(){
				    return null;
				}
				public String NOM_PORC_ANUALDefault(){
				
					return null;
				
				}
				public String NOM_PORC_ANUALComment(){
				
				    return "";
				
				}
				public String NOM_PORC_ANUALPattern(){
				
					return "";
				
				}
				public String NOM_PORC_ANUALOriginalDbColumnName(){
				
					return "NOM_PORC_ANUAL";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return 0;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public String LOOKUP;

				public String getLOOKUP () {
					return this.LOOKUP;
				}

				public Boolean LOOKUPIsNullable(){
				    return true;
				}
				public Boolean LOOKUPIsKey(){
				    return false;
				}
				public Integer LOOKUPLength(){
				    return 255;
				}
				public Integer LOOKUPPrecision(){
				    return 0;
				}
				public String LOOKUPDefault(){
				
					return null;
				
				}
				public String LOOKUPComment(){
				
				    return null;
				
				}
				public String LOOKUPPattern(){
				
				    return null;
				
				}
				public String LOOKUPOriginalDbColumnName(){
				
					return "LOOKUP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
					this.NOM_PORC_ANUAL = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.LOOKUP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
					this.NOM_PORC_ANUAL = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.LOOKUP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_1,dos);
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_2,dos);
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_3,dos);
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_4,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_ANUAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.LOOKUP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_1,dos);
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_2,dos);
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_3,dos);
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_4,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_ANUAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.LOOKUP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VIGENCIA="+String.valueOf(VIGENCIA));
		sb.append(",REGIONAL="+REGIONAL);
		sb.append(",FUERZA="+FUERZA);
		sb.append(",ESM="+ESM);
		sb.append(",SUBPROGRAMA="+SUBPROGRAMA);
		sb.append(",ACTIVIDAD="+ACTIVIDAD);
		sb.append(",PORC_ANUAL_ACTIVIDAD="+String.valueOf(PORC_ANUAL_ACTIVIDAD));
		sb.append(",FORMATO="+FORMATO);
		sb.append(",PORC_TRIM_1="+String.valueOf(PORC_TRIM_1));
		sb.append(",NOM_PORC_TRIM_1="+NOM_PORC_TRIM_1);
		sb.append(",PORC_TRIM_2="+String.valueOf(PORC_TRIM_2));
		sb.append(",NOM_PORC_TRIM_2="+NOM_PORC_TRIM_2);
		sb.append(",PORC_TRIM_3="+String.valueOf(PORC_TRIM_3));
		sb.append(",NOM_PORC_TRIM_3="+NOM_PORC_TRIM_3);
		sb.append(",PORC_TRIM_4="+String.valueOf(PORC_TRIM_4));
		sb.append(",NOM_PORC_TRIM_4="+NOM_PORC_TRIM_4);
		sb.append(",PORC_ANUAL="+String.valueOf(PORC_ANUAL));
		sb.append(",NOM_PORC_ANUAL="+NOM_PORC_ANUAL);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",LOOKUP="+LOOKUP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out6Struct implements routines.system.IPersistableRow<out6Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public int VIGENCIA;

				public int getVIGENCIA () {
					return this.VIGENCIA;
				}

				public Boolean VIGENCIAIsNullable(){
				    return false;
				}
				public Boolean VIGENCIAIsKey(){
				    return false;
				}
				public Integer VIGENCIALength(){
				    return 1;
				}
				public Integer VIGENCIAPrecision(){
				    return 0;
				}
				public String VIGENCIADefault(){
				
					return null;
				
				}
				public String VIGENCIAComment(){
				
				    return "";
				
				}
				public String VIGENCIAPattern(){
				
					return "";
				
				}
				public String VIGENCIAOriginalDbColumnName(){
				
					return "VIGENCIA";
				
				}

				
			    public String REGIONAL;

				public String getREGIONAL () {
					return this.REGIONAL;
				}

				public Boolean REGIONALIsNullable(){
				    return true;
				}
				public Boolean REGIONALIsKey(){
				    return false;
				}
				public Integer REGIONALLength(){
				    return null;
				}
				public Integer REGIONALPrecision(){
				    return null;
				}
				public String REGIONALDefault(){
				
					return null;
				
				}
				public String REGIONALComment(){
				
				    return "";
				
				}
				public String REGIONALPattern(){
				
					return "";
				
				}
				public String REGIONALOriginalDbColumnName(){
				
					return "REGIONAL";
				
				}

				
			    public String FUERZA;

				public String getFUERZA () {
					return this.FUERZA;
				}

				public Boolean FUERZAIsNullable(){
				    return false;
				}
				public Boolean FUERZAIsKey(){
				    return false;
				}
				public Integer FUERZALength(){
				    return null;
				}
				public Integer FUERZAPrecision(){
				    return null;
				}
				public String FUERZADefault(){
				
					return null;
				
				}
				public String FUERZAComment(){
				
				    return "";
				
				}
				public String FUERZAPattern(){
				
					return "";
				
				}
				public String FUERZAOriginalDbColumnName(){
				
					return "FUERZA";
				
				}

				
			    public String ESM;

				public String getESM () {
					return this.ESM;
				}

				public Boolean ESMIsNullable(){
				    return false;
				}
				public Boolean ESMIsKey(){
				    return false;
				}
				public Integer ESMLength(){
				    return null;
				}
				public Integer ESMPrecision(){
				    return null;
				}
				public String ESMDefault(){
				
					return null;
				
				}
				public String ESMComment(){
				
				    return "";
				
				}
				public String ESMPattern(){
				
					return "";
				
				}
				public String ESMOriginalDbColumnName(){
				
					return "ESM";
				
				}

				
			    public String SUBPROGRAMA;

				public String getSUBPROGRAMA () {
					return this.SUBPROGRAMA;
				}

				public Boolean SUBPROGRAMAIsNullable(){
				    return false;
				}
				public Boolean SUBPROGRAMAIsKey(){
				    return false;
				}
				public Integer SUBPROGRAMALength(){
				    return null;
				}
				public Integer SUBPROGRAMAPrecision(){
				    return null;
				}
				public String SUBPROGRAMADefault(){
				
					return null;
				
				}
				public String SUBPROGRAMAComment(){
				
				    return "";
				
				}
				public String SUBPROGRAMAPattern(){
				
					return "";
				
				}
				public String SUBPROGRAMAOriginalDbColumnName(){
				
					return "SUBPROGRAMA";
				
				}

				
			    public String ACTIVIDAD;

				public String getACTIVIDAD () {
					return this.ACTIVIDAD;
				}

				public Boolean ACTIVIDADIsNullable(){
				    return false;
				}
				public Boolean ACTIVIDADIsKey(){
				    return false;
				}
				public Integer ACTIVIDADLength(){
				    return null;
				}
				public Integer ACTIVIDADPrecision(){
				    return null;
				}
				public String ACTIVIDADDefault(){
				
					return null;
				
				}
				public String ACTIVIDADComment(){
				
				    return "";
				
				}
				public String ACTIVIDADPattern(){
				
					return "";
				
				}
				public String ACTIVIDADOriginalDbColumnName(){
				
					return "ACTIVIDAD";
				
				}

				
			    public Double PORC_ANUAL_ACTIVIDAD;

				public Double getPORC_ANUAL_ACTIVIDAD () {
					return this.PORC_ANUAL_ACTIVIDAD;
				}

				public Boolean PORC_ANUAL_ACTIVIDADIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUAL_ACTIVIDADIsKey(){
				    return false;
				}
				public Integer PORC_ANUAL_ACTIVIDADLength(){
				    return null;
				}
				public Integer PORC_ANUAL_ACTIVIDADPrecision(){
				    return null;
				}
				public String PORC_ANUAL_ACTIVIDADDefault(){
				
					return null;
				
				}
				public String PORC_ANUAL_ACTIVIDADComment(){
				
				    return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADPattern(){
				
					return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADOriginalDbColumnName(){
				
					return "PORC_ANUAL_ACTIVIDAD";
				
				}

				
			    public String FORMATO;

				public String getFORMATO () {
					return this.FORMATO;
				}

				public Boolean FORMATOIsNullable(){
				    return false;
				}
				public Boolean FORMATOIsKey(){
				    return false;
				}
				public Integer FORMATOLength(){
				    return null;
				}
				public Integer FORMATOPrecision(){
				    return null;
				}
				public String FORMATODefault(){
				
					return null;
				
				}
				public String FORMATOComment(){
				
				    return "";
				
				}
				public String FORMATOPattern(){
				
					return "";
				
				}
				public String FORMATOOriginalDbColumnName(){
				
					return "FORMATO";
				
				}

				
			    public Double PORC_TRIM_1;

				public Double getPORC_TRIM_1 () {
					return this.PORC_TRIM_1;
				}

				public Boolean PORC_TRIM_1IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_1Length(){
				    return null;
				}
				public Integer PORC_TRIM_1Precision(){
				    return null;
				}
				public String PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_1OriginalDbColumnName(){
				
					return "PORC_TRIM_1";
				
				}

				
			    public String NOM_PORC_TRIM_1;

				public String getNOM_PORC_TRIM_1 () {
					return this.NOM_PORC_TRIM_1;
				}

				public Boolean NOM_PORC_TRIM_1IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_1Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_1Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_1OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_1";
				
				}

				
			    public Double PORC_TRIM_2;

				public Double getPORC_TRIM_2 () {
					return this.PORC_TRIM_2;
				}

				public Boolean PORC_TRIM_2IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_2Length(){
				    return null;
				}
				public Integer PORC_TRIM_2Precision(){
				    return null;
				}
				public String PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_2OriginalDbColumnName(){
				
					return "PORC_TRIM_2";
				
				}

				
			    public String NOM_PORC_TRIM_2;

				public String getNOM_PORC_TRIM_2 () {
					return this.NOM_PORC_TRIM_2;
				}

				public Boolean NOM_PORC_TRIM_2IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_2Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_2Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_2OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_2";
				
				}

				
			    public Double PORC_TRIM_3;

				public Double getPORC_TRIM_3 () {
					return this.PORC_TRIM_3;
				}

				public Boolean PORC_TRIM_3IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_3Length(){
				    return null;
				}
				public Integer PORC_TRIM_3Precision(){
				    return null;
				}
				public String PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_3OriginalDbColumnName(){
				
					return "PORC_TRIM_3";
				
				}

				
			    public String NOM_PORC_TRIM_3;

				public String getNOM_PORC_TRIM_3 () {
					return this.NOM_PORC_TRIM_3;
				}

				public Boolean NOM_PORC_TRIM_3IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_3Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_3Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_3OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_3";
				
				}

				
			    public Double PORC_TRIM_4;

				public Double getPORC_TRIM_4 () {
					return this.PORC_TRIM_4;
				}

				public Boolean PORC_TRIM_4IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_4Length(){
				    return null;
				}
				public Integer PORC_TRIM_4Precision(){
				    return null;
				}
				public String PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_4OriginalDbColumnName(){
				
					return "PORC_TRIM_4";
				
				}

				
			    public String NOM_PORC_TRIM_4;

				public String getNOM_PORC_TRIM_4 () {
					return this.NOM_PORC_TRIM_4;
				}

				public Boolean NOM_PORC_TRIM_4IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_4Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_4Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_4OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_4";
				
				}

				
			    public Double PORC_ANUAL;

				public Double getPORC_ANUAL () {
					return this.PORC_ANUAL;
				}

				public Boolean PORC_ANUALIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUALIsKey(){
				    return false;
				}
				public Integer PORC_ANUALLength(){
				    return null;
				}
				public Integer PORC_ANUALPrecision(){
				    return null;
				}
				public String PORC_ANUALDefault(){
				
					return null;
				
				}
				public String PORC_ANUALComment(){
				
				    return "";
				
				}
				public String PORC_ANUALPattern(){
				
					return "";
				
				}
				public String PORC_ANUALOriginalDbColumnName(){
				
					return "PORC_ANUAL";
				
				}

				
			    public String NOM_PORC_ANUAL;

				public String getNOM_PORC_ANUAL () {
					return this.NOM_PORC_ANUAL;
				}

				public Boolean NOM_PORC_ANUALIsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_ANUALIsKey(){
				    return false;
				}
				public Integer NOM_PORC_ANUALLength(){
				    return null;
				}
				public Integer NOM_PORC_ANUALPrecision(){
				    return null;
				}
				public String NOM_PORC_ANUALDefault(){
				
					return null;
				
				}
				public String NOM_PORC_ANUALComment(){
				
				    return "";
				
				}
				public String NOM_PORC_ANUALPattern(){
				
					return "";
				
				}
				public String NOM_PORC_ANUALOriginalDbColumnName(){
				
					return "NOM_PORC_ANUAL";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return 0;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
					this.NOM_PORC_ANUAL = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
					this.NOM_PORC_ANUAL = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_1,dos);
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_2,dos);
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_3,dos);
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_4,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_ANUAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_1,dos);
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_2,dos);
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_3,dos);
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_4,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_ANUAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VIGENCIA="+String.valueOf(VIGENCIA));
		sb.append(",REGIONAL="+REGIONAL);
		sb.append(",FUERZA="+FUERZA);
		sb.append(",ESM="+ESM);
		sb.append(",SUBPROGRAMA="+SUBPROGRAMA);
		sb.append(",ACTIVIDAD="+ACTIVIDAD);
		sb.append(",PORC_ANUAL_ACTIVIDAD="+String.valueOf(PORC_ANUAL_ACTIVIDAD));
		sb.append(",FORMATO="+FORMATO);
		sb.append(",PORC_TRIM_1="+String.valueOf(PORC_TRIM_1));
		sb.append(",NOM_PORC_TRIM_1="+NOM_PORC_TRIM_1);
		sb.append(",PORC_TRIM_2="+String.valueOf(PORC_TRIM_2));
		sb.append(",NOM_PORC_TRIM_2="+NOM_PORC_TRIM_2);
		sb.append(",PORC_TRIM_3="+String.valueOf(PORC_TRIM_3));
		sb.append(",NOM_PORC_TRIM_3="+NOM_PORC_TRIM_3);
		sb.append(",PORC_TRIM_4="+String.valueOf(PORC_TRIM_4));
		sb.append(",NOM_PORC_TRIM_4="+NOM_PORC_TRIM_4);
		sb.append(",PORC_ANUAL="+String.valueOf(PORC_ANUAL));
		sb.append(",NOM_PORC_ANUAL="+NOM_PORC_ANUAL);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public int VIGENCIA;

				public int getVIGENCIA () {
					return this.VIGENCIA;
				}

				public Boolean VIGENCIAIsNullable(){
				    return false;
				}
				public Boolean VIGENCIAIsKey(){
				    return false;
				}
				public Integer VIGENCIALength(){
				    return 1;
				}
				public Integer VIGENCIAPrecision(){
				    return 0;
				}
				public String VIGENCIADefault(){
				
					return null;
				
				}
				public String VIGENCIAComment(){
				
				    return "";
				
				}
				public String VIGENCIAPattern(){
				
					return "";
				
				}
				public String VIGENCIAOriginalDbColumnName(){
				
					return "VIGENCIA";
				
				}

				
			    public String REGIONAL;

				public String getREGIONAL () {
					return this.REGIONAL;
				}

				public Boolean REGIONALIsNullable(){
				    return true;
				}
				public Boolean REGIONALIsKey(){
				    return false;
				}
				public Integer REGIONALLength(){
				    return null;
				}
				public Integer REGIONALPrecision(){
				    return null;
				}
				public String REGIONALDefault(){
				
					return null;
				
				}
				public String REGIONALComment(){
				
				    return "";
				
				}
				public String REGIONALPattern(){
				
					return "";
				
				}
				public String REGIONALOriginalDbColumnName(){
				
					return "REGIONAL";
				
				}

				
			    public String FUERZA;

				public String getFUERZA () {
					return this.FUERZA;
				}

				public Boolean FUERZAIsNullable(){
				    return false;
				}
				public Boolean FUERZAIsKey(){
				    return false;
				}
				public Integer FUERZALength(){
				    return null;
				}
				public Integer FUERZAPrecision(){
				    return null;
				}
				public String FUERZADefault(){
				
					return null;
				
				}
				public String FUERZAComment(){
				
				    return "";
				
				}
				public String FUERZAPattern(){
				
					return "";
				
				}
				public String FUERZAOriginalDbColumnName(){
				
					return "FUERZA";
				
				}

				
			    public String ESM;

				public String getESM () {
					return this.ESM;
				}

				public Boolean ESMIsNullable(){
				    return false;
				}
				public Boolean ESMIsKey(){
				    return false;
				}
				public Integer ESMLength(){
				    return null;
				}
				public Integer ESMPrecision(){
				    return null;
				}
				public String ESMDefault(){
				
					return null;
				
				}
				public String ESMComment(){
				
				    return "";
				
				}
				public String ESMPattern(){
				
					return "";
				
				}
				public String ESMOriginalDbColumnName(){
				
					return "ESM";
				
				}

				
			    public String SUBPROGRAMA;

				public String getSUBPROGRAMA () {
					return this.SUBPROGRAMA;
				}

				public Boolean SUBPROGRAMAIsNullable(){
				    return false;
				}
				public Boolean SUBPROGRAMAIsKey(){
				    return false;
				}
				public Integer SUBPROGRAMALength(){
				    return null;
				}
				public Integer SUBPROGRAMAPrecision(){
				    return null;
				}
				public String SUBPROGRAMADefault(){
				
					return null;
				
				}
				public String SUBPROGRAMAComment(){
				
				    return "";
				
				}
				public String SUBPROGRAMAPattern(){
				
					return "";
				
				}
				public String SUBPROGRAMAOriginalDbColumnName(){
				
					return "SUBPROGRAMA";
				
				}

				
			    public String ACTIVIDAD;

				public String getACTIVIDAD () {
					return this.ACTIVIDAD;
				}

				public Boolean ACTIVIDADIsNullable(){
				    return false;
				}
				public Boolean ACTIVIDADIsKey(){
				    return false;
				}
				public Integer ACTIVIDADLength(){
				    return null;
				}
				public Integer ACTIVIDADPrecision(){
				    return null;
				}
				public String ACTIVIDADDefault(){
				
					return null;
				
				}
				public String ACTIVIDADComment(){
				
				    return "";
				
				}
				public String ACTIVIDADPattern(){
				
					return "";
				
				}
				public String ACTIVIDADOriginalDbColumnName(){
				
					return "ACTIVIDAD";
				
				}

				
			    public Double PORC_ANUAL_ACTIVIDAD;

				public Double getPORC_ANUAL_ACTIVIDAD () {
					return this.PORC_ANUAL_ACTIVIDAD;
				}

				public Boolean PORC_ANUAL_ACTIVIDADIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUAL_ACTIVIDADIsKey(){
				    return false;
				}
				public Integer PORC_ANUAL_ACTIVIDADLength(){
				    return null;
				}
				public Integer PORC_ANUAL_ACTIVIDADPrecision(){
				    return null;
				}
				public String PORC_ANUAL_ACTIVIDADDefault(){
				
					return null;
				
				}
				public String PORC_ANUAL_ACTIVIDADComment(){
				
				    return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADPattern(){
				
					return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADOriginalDbColumnName(){
				
					return "PORC_ANUAL_ACTIVIDAD";
				
				}

				
			    public String FORMATO;

				public String getFORMATO () {
					return this.FORMATO;
				}

				public Boolean FORMATOIsNullable(){
				    return false;
				}
				public Boolean FORMATOIsKey(){
				    return false;
				}
				public Integer FORMATOLength(){
				    return null;
				}
				public Integer FORMATOPrecision(){
				    return null;
				}
				public String FORMATODefault(){
				
					return null;
				
				}
				public String FORMATOComment(){
				
				    return "";
				
				}
				public String FORMATOPattern(){
				
					return "";
				
				}
				public String FORMATOOriginalDbColumnName(){
				
					return "FORMATO";
				
				}

				
			    public Double PORC_TRIM_1;

				public Double getPORC_TRIM_1 () {
					return this.PORC_TRIM_1;
				}

				public Boolean PORC_TRIM_1IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_1Length(){
				    return null;
				}
				public Integer PORC_TRIM_1Precision(){
				    return null;
				}
				public String PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_1OriginalDbColumnName(){
				
					return "PORC_TRIM_1";
				
				}

				
			    public String NOM_PORC_TRIM_1;

				public String getNOM_PORC_TRIM_1 () {
					return this.NOM_PORC_TRIM_1;
				}

				public Boolean NOM_PORC_TRIM_1IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_1Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_1Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_1OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_1";
				
				}

				
			    public Double PORC_TRIM_2;

				public Double getPORC_TRIM_2 () {
					return this.PORC_TRIM_2;
				}

				public Boolean PORC_TRIM_2IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_2Length(){
				    return null;
				}
				public Integer PORC_TRIM_2Precision(){
				    return null;
				}
				public String PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_2OriginalDbColumnName(){
				
					return "PORC_TRIM_2";
				
				}

				
			    public String NOM_PORC_TRIM_2;

				public String getNOM_PORC_TRIM_2 () {
					return this.NOM_PORC_TRIM_2;
				}

				public Boolean NOM_PORC_TRIM_2IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_2Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_2Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_2OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_2";
				
				}

				
			    public Double PORC_TRIM_3;

				public Double getPORC_TRIM_3 () {
					return this.PORC_TRIM_3;
				}

				public Boolean PORC_TRIM_3IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_3Length(){
				    return null;
				}
				public Integer PORC_TRIM_3Precision(){
				    return null;
				}
				public String PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_3OriginalDbColumnName(){
				
					return "PORC_TRIM_3";
				
				}

				
			    public String NOM_PORC_TRIM_3;

				public String getNOM_PORC_TRIM_3 () {
					return this.NOM_PORC_TRIM_3;
				}

				public Boolean NOM_PORC_TRIM_3IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_3Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_3Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_3OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_3";
				
				}

				
			    public Double PORC_TRIM_4;

				public Double getPORC_TRIM_4 () {
					return this.PORC_TRIM_4;
				}

				public Boolean PORC_TRIM_4IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_4Length(){
				    return null;
				}
				public Integer PORC_TRIM_4Precision(){
				    return null;
				}
				public String PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_4OriginalDbColumnName(){
				
					return "PORC_TRIM_4";
				
				}

				
			    public String NOM_PORC_TRIM_4;

				public String getNOM_PORC_TRIM_4 () {
					return this.NOM_PORC_TRIM_4;
				}

				public Boolean NOM_PORC_TRIM_4IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_4Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_4Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_4OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_4";
				
				}

				
			    public Double PORC_ANUAL;

				public Double getPORC_ANUAL () {
					return this.PORC_ANUAL;
				}

				public Boolean PORC_ANUALIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUALIsKey(){
				    return false;
				}
				public Integer PORC_ANUALLength(){
				    return null;
				}
				public Integer PORC_ANUALPrecision(){
				    return null;
				}
				public String PORC_ANUALDefault(){
				
					return null;
				
				}
				public String PORC_ANUALComment(){
				
				    return "";
				
				}
				public String PORC_ANUALPattern(){
				
					return "";
				
				}
				public String PORC_ANUALOriginalDbColumnName(){
				
					return "PORC_ANUAL";
				
				}

				
			    public String NOM_PORC_ANUAL;

				public String getNOM_PORC_ANUAL () {
					return this.NOM_PORC_ANUAL;
				}

				public Boolean NOM_PORC_ANUALIsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_ANUALIsKey(){
				    return false;
				}
				public Integer NOM_PORC_ANUALLength(){
				    return null;
				}
				public Integer NOM_PORC_ANUALPrecision(){
				    return null;
				}
				public String NOM_PORC_ANUALDefault(){
				
					return null;
				
				}
				public String NOM_PORC_ANUALComment(){
				
				    return "";
				
				}
				public String NOM_PORC_ANUALPattern(){
				
					return "";
				
				}
				public String NOM_PORC_ANUALOriginalDbColumnName(){
				
					return "NOM_PORC_ANUAL";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return 0;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public String LOOKUP;

				public String getLOOKUP () {
					return this.LOOKUP;
				}

				public Boolean LOOKUPIsNullable(){
				    return true;
				}
				public Boolean LOOKUPIsKey(){
				    return false;
				}
				public Integer LOOKUPLength(){
				    return 255;
				}
				public Integer LOOKUPPrecision(){
				    return 0;
				}
				public String LOOKUPDefault(){
				
					return "";
				
				}
				public String LOOKUPComment(){
				
				    return null;
				
				}
				public String LOOKUPPattern(){
				
				    return null;
				
				}
				public String LOOKUPOriginalDbColumnName(){
				
					return "LOOKUP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
					this.NOM_PORC_ANUAL = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.LOOKUP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
					this.NOM_PORC_ANUAL = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.LOOKUP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_1,dos);
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_2,dos);
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_3,dos);
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_4,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_ANUAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.LOOKUP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_1,dos);
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_2,dos);
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_3,dos);
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_4,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_ANUAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.LOOKUP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VIGENCIA="+String.valueOf(VIGENCIA));
		sb.append(",REGIONAL="+REGIONAL);
		sb.append(",FUERZA="+FUERZA);
		sb.append(",ESM="+ESM);
		sb.append(",SUBPROGRAMA="+SUBPROGRAMA);
		sb.append(",ACTIVIDAD="+ACTIVIDAD);
		sb.append(",PORC_ANUAL_ACTIVIDAD="+String.valueOf(PORC_ANUAL_ACTIVIDAD));
		sb.append(",FORMATO="+FORMATO);
		sb.append(",PORC_TRIM_1="+String.valueOf(PORC_TRIM_1));
		sb.append(",NOM_PORC_TRIM_1="+NOM_PORC_TRIM_1);
		sb.append(",PORC_TRIM_2="+String.valueOf(PORC_TRIM_2));
		sb.append(",NOM_PORC_TRIM_2="+NOM_PORC_TRIM_2);
		sb.append(",PORC_TRIM_3="+String.valueOf(PORC_TRIM_3));
		sb.append(",NOM_PORC_TRIM_3="+NOM_PORC_TRIM_3);
		sb.append(",PORC_TRIM_4="+String.valueOf(PORC_TRIM_4));
		sb.append(",NOM_PORC_TRIM_4="+NOM_PORC_TRIM_4);
		sb.append(",PORC_ANUAL="+String.valueOf(PORC_ANUAL));
		sb.append(",NOM_PORC_ANUAL="+NOM_PORC_ANUAL);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",LOOKUP="+LOOKUP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out5Struct implements routines.system.IPersistableRow<out5Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public int VIGENCIA;

				public int getVIGENCIA () {
					return this.VIGENCIA;
				}

				public Boolean VIGENCIAIsNullable(){
				    return false;
				}
				public Boolean VIGENCIAIsKey(){
				    return false;
				}
				public Integer VIGENCIALength(){
				    return 1;
				}
				public Integer VIGENCIAPrecision(){
				    return 0;
				}
				public String VIGENCIADefault(){
				
					return null;
				
				}
				public String VIGENCIAComment(){
				
				    return "";
				
				}
				public String VIGENCIAPattern(){
				
					return "";
				
				}
				public String VIGENCIAOriginalDbColumnName(){
				
					return "VIGENCIA";
				
				}

				
			    public String REGIONAL;

				public String getREGIONAL () {
					return this.REGIONAL;
				}

				public Boolean REGIONALIsNullable(){
				    return true;
				}
				public Boolean REGIONALIsKey(){
				    return false;
				}
				public Integer REGIONALLength(){
				    return null;
				}
				public Integer REGIONALPrecision(){
				    return null;
				}
				public String REGIONALDefault(){
				
					return null;
				
				}
				public String REGIONALComment(){
				
				    return "";
				
				}
				public String REGIONALPattern(){
				
					return "";
				
				}
				public String REGIONALOriginalDbColumnName(){
				
					return "REGIONAL";
				
				}

				
			    public String FUERZA;

				public String getFUERZA () {
					return this.FUERZA;
				}

				public Boolean FUERZAIsNullable(){
				    return false;
				}
				public Boolean FUERZAIsKey(){
				    return false;
				}
				public Integer FUERZALength(){
				    return null;
				}
				public Integer FUERZAPrecision(){
				    return null;
				}
				public String FUERZADefault(){
				
					return null;
				
				}
				public String FUERZAComment(){
				
				    return "";
				
				}
				public String FUERZAPattern(){
				
					return "";
				
				}
				public String FUERZAOriginalDbColumnName(){
				
					return "FUERZA";
				
				}

				
			    public String ESM;

				public String getESM () {
					return this.ESM;
				}

				public Boolean ESMIsNullable(){
				    return false;
				}
				public Boolean ESMIsKey(){
				    return false;
				}
				public Integer ESMLength(){
				    return null;
				}
				public Integer ESMPrecision(){
				    return null;
				}
				public String ESMDefault(){
				
					return null;
				
				}
				public String ESMComment(){
				
				    return "";
				
				}
				public String ESMPattern(){
				
					return "";
				
				}
				public String ESMOriginalDbColumnName(){
				
					return "ESM";
				
				}

				
			    public String SUBPROGRAMA;

				public String getSUBPROGRAMA () {
					return this.SUBPROGRAMA;
				}

				public Boolean SUBPROGRAMAIsNullable(){
				    return false;
				}
				public Boolean SUBPROGRAMAIsKey(){
				    return false;
				}
				public Integer SUBPROGRAMALength(){
				    return null;
				}
				public Integer SUBPROGRAMAPrecision(){
				    return null;
				}
				public String SUBPROGRAMADefault(){
				
					return null;
				
				}
				public String SUBPROGRAMAComment(){
				
				    return "";
				
				}
				public String SUBPROGRAMAPattern(){
				
					return "";
				
				}
				public String SUBPROGRAMAOriginalDbColumnName(){
				
					return "SUBPROGRAMA";
				
				}

				
			    public String ACTIVIDAD;

				public String getACTIVIDAD () {
					return this.ACTIVIDAD;
				}

				public Boolean ACTIVIDADIsNullable(){
				    return false;
				}
				public Boolean ACTIVIDADIsKey(){
				    return false;
				}
				public Integer ACTIVIDADLength(){
				    return null;
				}
				public Integer ACTIVIDADPrecision(){
				    return null;
				}
				public String ACTIVIDADDefault(){
				
					return null;
				
				}
				public String ACTIVIDADComment(){
				
				    return "";
				
				}
				public String ACTIVIDADPattern(){
				
					return "";
				
				}
				public String ACTIVIDADOriginalDbColumnName(){
				
					return "ACTIVIDAD";
				
				}

				
			    public Double PORC_ANUAL_ACTIVIDAD;

				public Double getPORC_ANUAL_ACTIVIDAD () {
					return this.PORC_ANUAL_ACTIVIDAD;
				}

				public Boolean PORC_ANUAL_ACTIVIDADIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUAL_ACTIVIDADIsKey(){
				    return false;
				}
				public Integer PORC_ANUAL_ACTIVIDADLength(){
				    return null;
				}
				public Integer PORC_ANUAL_ACTIVIDADPrecision(){
				    return null;
				}
				public String PORC_ANUAL_ACTIVIDADDefault(){
				
					return null;
				
				}
				public String PORC_ANUAL_ACTIVIDADComment(){
				
				    return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADPattern(){
				
					return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADOriginalDbColumnName(){
				
					return "PORC_ANUAL_ACTIVIDAD";
				
				}

				
			    public String FORMATO;

				public String getFORMATO () {
					return this.FORMATO;
				}

				public Boolean FORMATOIsNullable(){
				    return false;
				}
				public Boolean FORMATOIsKey(){
				    return false;
				}
				public Integer FORMATOLength(){
				    return null;
				}
				public Integer FORMATOPrecision(){
				    return null;
				}
				public String FORMATODefault(){
				
					return null;
				
				}
				public String FORMATOComment(){
				
				    return "";
				
				}
				public String FORMATOPattern(){
				
					return "";
				
				}
				public String FORMATOOriginalDbColumnName(){
				
					return "FORMATO";
				
				}

				
			    public Double PORC_TRIM_1;

				public Double getPORC_TRIM_1 () {
					return this.PORC_TRIM_1;
				}

				public Boolean PORC_TRIM_1IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_1Length(){
				    return null;
				}
				public Integer PORC_TRIM_1Precision(){
				    return null;
				}
				public String PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_1OriginalDbColumnName(){
				
					return "PORC_TRIM_1";
				
				}

				
			    public String NOM_PORC_TRIM_1;

				public String getNOM_PORC_TRIM_1 () {
					return this.NOM_PORC_TRIM_1;
				}

				public Boolean NOM_PORC_TRIM_1IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_1Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_1Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_1OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_1";
				
				}

				
			    public Double PORC_TRIM_2;

				public Double getPORC_TRIM_2 () {
					return this.PORC_TRIM_2;
				}

				public Boolean PORC_TRIM_2IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_2Length(){
				    return null;
				}
				public Integer PORC_TRIM_2Precision(){
				    return null;
				}
				public String PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_2OriginalDbColumnName(){
				
					return "PORC_TRIM_2";
				
				}

				
			    public String NOM_PORC_TRIM_2;

				public String getNOM_PORC_TRIM_2 () {
					return this.NOM_PORC_TRIM_2;
				}

				public Boolean NOM_PORC_TRIM_2IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_2Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_2Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_2OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_2";
				
				}

				
			    public Double PORC_TRIM_3;

				public Double getPORC_TRIM_3 () {
					return this.PORC_TRIM_3;
				}

				public Boolean PORC_TRIM_3IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_3Length(){
				    return null;
				}
				public Integer PORC_TRIM_3Precision(){
				    return null;
				}
				public String PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_3OriginalDbColumnName(){
				
					return "PORC_TRIM_3";
				
				}

				
			    public String NOM_PORC_TRIM_3;

				public String getNOM_PORC_TRIM_3 () {
					return this.NOM_PORC_TRIM_3;
				}

				public Boolean NOM_PORC_TRIM_3IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_3Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_3Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_3OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_3";
				
				}

				
			    public Double PORC_TRIM_4;

				public Double getPORC_TRIM_4 () {
					return this.PORC_TRIM_4;
				}

				public Boolean PORC_TRIM_4IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_4Length(){
				    return null;
				}
				public Integer PORC_TRIM_4Precision(){
				    return null;
				}
				public String PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_4OriginalDbColumnName(){
				
					return "PORC_TRIM_4";
				
				}

				
			    public String NOM_PORC_TRIM_4;

				public String getNOM_PORC_TRIM_4 () {
					return this.NOM_PORC_TRIM_4;
				}

				public Boolean NOM_PORC_TRIM_4IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_4Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_4Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_4OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_4";
				
				}

				
			    public Double PORC_ANUAL;

				public Double getPORC_ANUAL () {
					return this.PORC_ANUAL;
				}

				public Boolean PORC_ANUALIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUALIsKey(){
				    return false;
				}
				public Integer PORC_ANUALLength(){
				    return null;
				}
				public Integer PORC_ANUALPrecision(){
				    return null;
				}
				public String PORC_ANUALDefault(){
				
					return null;
				
				}
				public String PORC_ANUALComment(){
				
				    return "";
				
				}
				public String PORC_ANUALPattern(){
				
					return "";
				
				}
				public String PORC_ANUALOriginalDbColumnName(){
				
					return "PORC_ANUAL";
				
				}

				
			    public String NOM_PORC_ANUAL;

				public String getNOM_PORC_ANUAL () {
					return this.NOM_PORC_ANUAL;
				}

				public Boolean NOM_PORC_ANUALIsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_ANUALIsKey(){
				    return false;
				}
				public Integer NOM_PORC_ANUALLength(){
				    return null;
				}
				public Integer NOM_PORC_ANUALPrecision(){
				    return null;
				}
				public String NOM_PORC_ANUALDefault(){
				
					return null;
				
				}
				public String NOM_PORC_ANUALComment(){
				
				    return "";
				
				}
				public String NOM_PORC_ANUALPattern(){
				
					return "";
				
				}
				public String NOM_PORC_ANUALOriginalDbColumnName(){
				
					return "NOM_PORC_ANUAL";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return 0;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
					this.NOM_PORC_ANUAL = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
					this.NOM_PORC_ANUAL = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_1,dos);
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_2,dos);
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_3,dos);
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_4,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_ANUAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_1,dos);
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_2,dos);
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_3,dos);
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_4,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_ANUAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VIGENCIA="+String.valueOf(VIGENCIA));
		sb.append(",REGIONAL="+REGIONAL);
		sb.append(",FUERZA="+FUERZA);
		sb.append(",ESM="+ESM);
		sb.append(",SUBPROGRAMA="+SUBPROGRAMA);
		sb.append(",ACTIVIDAD="+ACTIVIDAD);
		sb.append(",PORC_ANUAL_ACTIVIDAD="+String.valueOf(PORC_ANUAL_ACTIVIDAD));
		sb.append(",FORMATO="+FORMATO);
		sb.append(",PORC_TRIM_1="+String.valueOf(PORC_TRIM_1));
		sb.append(",NOM_PORC_TRIM_1="+NOM_PORC_TRIM_1);
		sb.append(",PORC_TRIM_2="+String.valueOf(PORC_TRIM_2));
		sb.append(",NOM_PORC_TRIM_2="+NOM_PORC_TRIM_2);
		sb.append(",PORC_TRIM_3="+String.valueOf(PORC_TRIM_3));
		sb.append(",NOM_PORC_TRIM_3="+NOM_PORC_TRIM_3);
		sb.append(",PORC_TRIM_4="+String.valueOf(PORC_TRIM_4));
		sb.append(",NOM_PORC_TRIM_4="+NOM_PORC_TRIM_4);
		sb.append(",PORC_ANUAL="+String.valueOf(PORC_ANUAL));
		sb.append(",NOM_PORC_ANUAL="+NOM_PORC_ANUAL);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public int VIGENCIA;

				public int getVIGENCIA () {
					return this.VIGENCIA;
				}

				public Boolean VIGENCIAIsNullable(){
				    return false;
				}
				public Boolean VIGENCIAIsKey(){
				    return false;
				}
				public Integer VIGENCIALength(){
				    return 1;
				}
				public Integer VIGENCIAPrecision(){
				    return 0;
				}
				public String VIGENCIADefault(){
				
					return null;
				
				}
				public String VIGENCIAComment(){
				
				    return "";
				
				}
				public String VIGENCIAPattern(){
				
					return "";
				
				}
				public String VIGENCIAOriginalDbColumnName(){
				
					return "VIGENCIA";
				
				}

				
			    public String REGIONAL;

				public String getREGIONAL () {
					return this.REGIONAL;
				}

				public Boolean REGIONALIsNullable(){
				    return true;
				}
				public Boolean REGIONALIsKey(){
				    return false;
				}
				public Integer REGIONALLength(){
				    return null;
				}
				public Integer REGIONALPrecision(){
				    return null;
				}
				public String REGIONALDefault(){
				
					return null;
				
				}
				public String REGIONALComment(){
				
				    return "";
				
				}
				public String REGIONALPattern(){
				
					return "";
				
				}
				public String REGIONALOriginalDbColumnName(){
				
					return "REGIONAL";
				
				}

				
			    public String FUERZA;

				public String getFUERZA () {
					return this.FUERZA;
				}

				public Boolean FUERZAIsNullable(){
				    return false;
				}
				public Boolean FUERZAIsKey(){
				    return false;
				}
				public Integer FUERZALength(){
				    return null;
				}
				public Integer FUERZAPrecision(){
				    return null;
				}
				public String FUERZADefault(){
				
					return null;
				
				}
				public String FUERZAComment(){
				
				    return "";
				
				}
				public String FUERZAPattern(){
				
					return "";
				
				}
				public String FUERZAOriginalDbColumnName(){
				
					return "FUERZA";
				
				}

				
			    public String ESM;

				public String getESM () {
					return this.ESM;
				}

				public Boolean ESMIsNullable(){
				    return false;
				}
				public Boolean ESMIsKey(){
				    return false;
				}
				public Integer ESMLength(){
				    return null;
				}
				public Integer ESMPrecision(){
				    return null;
				}
				public String ESMDefault(){
				
					return null;
				
				}
				public String ESMComment(){
				
				    return "";
				
				}
				public String ESMPattern(){
				
					return "";
				
				}
				public String ESMOriginalDbColumnName(){
				
					return "ESM";
				
				}

				
			    public String SUBPROGRAMA;

				public String getSUBPROGRAMA () {
					return this.SUBPROGRAMA;
				}

				public Boolean SUBPROGRAMAIsNullable(){
				    return false;
				}
				public Boolean SUBPROGRAMAIsKey(){
				    return false;
				}
				public Integer SUBPROGRAMALength(){
				    return null;
				}
				public Integer SUBPROGRAMAPrecision(){
				    return null;
				}
				public String SUBPROGRAMADefault(){
				
					return null;
				
				}
				public String SUBPROGRAMAComment(){
				
				    return "";
				
				}
				public String SUBPROGRAMAPattern(){
				
					return "";
				
				}
				public String SUBPROGRAMAOriginalDbColumnName(){
				
					return "SUBPROGRAMA";
				
				}

				
			    public String ACTIVIDAD;

				public String getACTIVIDAD () {
					return this.ACTIVIDAD;
				}

				public Boolean ACTIVIDADIsNullable(){
				    return false;
				}
				public Boolean ACTIVIDADIsKey(){
				    return false;
				}
				public Integer ACTIVIDADLength(){
				    return null;
				}
				public Integer ACTIVIDADPrecision(){
				    return null;
				}
				public String ACTIVIDADDefault(){
				
					return null;
				
				}
				public String ACTIVIDADComment(){
				
				    return "";
				
				}
				public String ACTIVIDADPattern(){
				
					return "";
				
				}
				public String ACTIVIDADOriginalDbColumnName(){
				
					return "ACTIVIDAD";
				
				}

				
			    public Double PORC_ANUAL_ACTIVIDAD;

				public Double getPORC_ANUAL_ACTIVIDAD () {
					return this.PORC_ANUAL_ACTIVIDAD;
				}

				public Boolean PORC_ANUAL_ACTIVIDADIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUAL_ACTIVIDADIsKey(){
				    return false;
				}
				public Integer PORC_ANUAL_ACTIVIDADLength(){
				    return null;
				}
				public Integer PORC_ANUAL_ACTIVIDADPrecision(){
				    return null;
				}
				public String PORC_ANUAL_ACTIVIDADDefault(){
				
					return null;
				
				}
				public String PORC_ANUAL_ACTIVIDADComment(){
				
				    return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADPattern(){
				
					return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADOriginalDbColumnName(){
				
					return "PORC_ANUAL_ACTIVIDAD";
				
				}

				
			    public String FORMATO;

				public String getFORMATO () {
					return this.FORMATO;
				}

				public Boolean FORMATOIsNullable(){
				    return false;
				}
				public Boolean FORMATOIsKey(){
				    return false;
				}
				public Integer FORMATOLength(){
				    return null;
				}
				public Integer FORMATOPrecision(){
				    return null;
				}
				public String FORMATODefault(){
				
					return null;
				
				}
				public String FORMATOComment(){
				
				    return "";
				
				}
				public String FORMATOPattern(){
				
					return "";
				
				}
				public String FORMATOOriginalDbColumnName(){
				
					return "FORMATO";
				
				}

				
			    public Double PORC_TRIM_1;

				public Double getPORC_TRIM_1 () {
					return this.PORC_TRIM_1;
				}

				public Boolean PORC_TRIM_1IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_1Length(){
				    return null;
				}
				public Integer PORC_TRIM_1Precision(){
				    return null;
				}
				public String PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_1OriginalDbColumnName(){
				
					return "PORC_TRIM_1";
				
				}

				
			    public String NOM_PORC_TRIM_1;

				public String getNOM_PORC_TRIM_1 () {
					return this.NOM_PORC_TRIM_1;
				}

				public Boolean NOM_PORC_TRIM_1IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_1Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_1Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_1OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_1";
				
				}

				
			    public Double PORC_TRIM_2;

				public Double getPORC_TRIM_2 () {
					return this.PORC_TRIM_2;
				}

				public Boolean PORC_TRIM_2IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_2Length(){
				    return null;
				}
				public Integer PORC_TRIM_2Precision(){
				    return null;
				}
				public String PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_2OriginalDbColumnName(){
				
					return "PORC_TRIM_2";
				
				}

				
			    public String NOM_PORC_TRIM_2;

				public String getNOM_PORC_TRIM_2 () {
					return this.NOM_PORC_TRIM_2;
				}

				public Boolean NOM_PORC_TRIM_2IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_2Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_2Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_2OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_2";
				
				}

				
			    public Double PORC_TRIM_3;

				public Double getPORC_TRIM_3 () {
					return this.PORC_TRIM_3;
				}

				public Boolean PORC_TRIM_3IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_3Length(){
				    return null;
				}
				public Integer PORC_TRIM_3Precision(){
				    return null;
				}
				public String PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_3OriginalDbColumnName(){
				
					return "PORC_TRIM_3";
				
				}

				
			    public String NOM_PORC_TRIM_3;

				public String getNOM_PORC_TRIM_3 () {
					return this.NOM_PORC_TRIM_3;
				}

				public Boolean NOM_PORC_TRIM_3IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_3Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_3Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_3OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_3";
				
				}

				
			    public Double PORC_TRIM_4;

				public Double getPORC_TRIM_4 () {
					return this.PORC_TRIM_4;
				}

				public Boolean PORC_TRIM_4IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_4Length(){
				    return null;
				}
				public Integer PORC_TRIM_4Precision(){
				    return null;
				}
				public String PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_4OriginalDbColumnName(){
				
					return "PORC_TRIM_4";
				
				}

				
			    public String NOM_PORC_TRIM_4;

				public String getNOM_PORC_TRIM_4 () {
					return this.NOM_PORC_TRIM_4;
				}

				public Boolean NOM_PORC_TRIM_4IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_4Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_4Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_4OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_4";
				
				}

				
			    public Double PORC_ANUAL;

				public Double getPORC_ANUAL () {
					return this.PORC_ANUAL;
				}

				public Boolean PORC_ANUALIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUALIsKey(){
				    return false;
				}
				public Integer PORC_ANUALLength(){
				    return null;
				}
				public Integer PORC_ANUALPrecision(){
				    return null;
				}
				public String PORC_ANUALDefault(){
				
					return null;
				
				}
				public String PORC_ANUALComment(){
				
				    return "";
				
				}
				public String PORC_ANUALPattern(){
				
					return "";
				
				}
				public String PORC_ANUALOriginalDbColumnName(){
				
					return "PORC_ANUAL";
				
				}

				
			    public String NOM_PORC_ANUAL;

				public String getNOM_PORC_ANUAL () {
					return this.NOM_PORC_ANUAL;
				}

				public Boolean NOM_PORC_ANUALIsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_ANUALIsKey(){
				    return false;
				}
				public Integer NOM_PORC_ANUALLength(){
				    return null;
				}
				public Integer NOM_PORC_ANUALPrecision(){
				    return null;
				}
				public String NOM_PORC_ANUALDefault(){
				
					return null;
				
				}
				public String NOM_PORC_ANUALComment(){
				
				    return "";
				
				}
				public String NOM_PORC_ANUALPattern(){
				
					return "";
				
				}
				public String NOM_PORC_ANUALOriginalDbColumnName(){
				
					return "NOM_PORC_ANUAL";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return 0;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public String LOOKUP;

				public String getLOOKUP () {
					return this.LOOKUP;
				}

				public Boolean LOOKUPIsNullable(){
				    return true;
				}
				public Boolean LOOKUPIsKey(){
				    return false;
				}
				public Integer LOOKUPLength(){
				    return 255;
				}
				public Integer LOOKUPPrecision(){
				    return 0;
				}
				public String LOOKUPDefault(){
				
					return null;
				
				}
				public String LOOKUPComment(){
				
				    return null;
				
				}
				public String LOOKUPPattern(){
				
				    return null;
				
				}
				public String LOOKUPOriginalDbColumnName(){
				
					return "LOOKUP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
					this.NOM_PORC_ANUAL = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.LOOKUP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
					this.NOM_PORC_ANUAL = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.LOOKUP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_1,dos);
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_2,dos);
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_3,dos);
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_4,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_ANUAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.LOOKUP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_1,dos);
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_2,dos);
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_3,dos);
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_4,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_ANUAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.LOOKUP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VIGENCIA="+String.valueOf(VIGENCIA));
		sb.append(",REGIONAL="+REGIONAL);
		sb.append(",FUERZA="+FUERZA);
		sb.append(",ESM="+ESM);
		sb.append(",SUBPROGRAMA="+SUBPROGRAMA);
		sb.append(",ACTIVIDAD="+ACTIVIDAD);
		sb.append(",PORC_ANUAL_ACTIVIDAD="+String.valueOf(PORC_ANUAL_ACTIVIDAD));
		sb.append(",FORMATO="+FORMATO);
		sb.append(",PORC_TRIM_1="+String.valueOf(PORC_TRIM_1));
		sb.append(",NOM_PORC_TRIM_1="+NOM_PORC_TRIM_1);
		sb.append(",PORC_TRIM_2="+String.valueOf(PORC_TRIM_2));
		sb.append(",NOM_PORC_TRIM_2="+NOM_PORC_TRIM_2);
		sb.append(",PORC_TRIM_3="+String.valueOf(PORC_TRIM_3));
		sb.append(",NOM_PORC_TRIM_3="+NOM_PORC_TRIM_3);
		sb.append(",PORC_TRIM_4="+String.valueOf(PORC_TRIM_4));
		sb.append(",NOM_PORC_TRIM_4="+NOM_PORC_TRIM_4);
		sb.append(",PORC_ANUAL="+String.valueOf(PORC_ANUAL));
		sb.append(",NOM_PORC_ANUAL="+NOM_PORC_ANUAL);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",LOOKUP="+LOOKUP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public int VIGENCIA;

				public int getVIGENCIA () {
					return this.VIGENCIA;
				}

				public Boolean VIGENCIAIsNullable(){
				    return false;
				}
				public Boolean VIGENCIAIsKey(){
				    return false;
				}
				public Integer VIGENCIALength(){
				    return 1;
				}
				public Integer VIGENCIAPrecision(){
				    return 0;
				}
				public String VIGENCIADefault(){
				
					return null;
				
				}
				public String VIGENCIAComment(){
				
				    return "";
				
				}
				public String VIGENCIAPattern(){
				
					return "";
				
				}
				public String VIGENCIAOriginalDbColumnName(){
				
					return "VIGENCIA";
				
				}

				
			    public String REGIONAL;

				public String getREGIONAL () {
					return this.REGIONAL;
				}

				public Boolean REGIONALIsNullable(){
				    return true;
				}
				public Boolean REGIONALIsKey(){
				    return false;
				}
				public Integer REGIONALLength(){
				    return null;
				}
				public Integer REGIONALPrecision(){
				    return null;
				}
				public String REGIONALDefault(){
				
					return null;
				
				}
				public String REGIONALComment(){
				
				    return "";
				
				}
				public String REGIONALPattern(){
				
					return "";
				
				}
				public String REGIONALOriginalDbColumnName(){
				
					return "REGIONAL";
				
				}

				
			    public String FUERZA;

				public String getFUERZA () {
					return this.FUERZA;
				}

				public Boolean FUERZAIsNullable(){
				    return false;
				}
				public Boolean FUERZAIsKey(){
				    return false;
				}
				public Integer FUERZALength(){
				    return null;
				}
				public Integer FUERZAPrecision(){
				    return null;
				}
				public String FUERZADefault(){
				
					return null;
				
				}
				public String FUERZAComment(){
				
				    return "";
				
				}
				public String FUERZAPattern(){
				
					return "";
				
				}
				public String FUERZAOriginalDbColumnName(){
				
					return "FUERZA";
				
				}

				
			    public String ESM;

				public String getESM () {
					return this.ESM;
				}

				public Boolean ESMIsNullable(){
				    return false;
				}
				public Boolean ESMIsKey(){
				    return false;
				}
				public Integer ESMLength(){
				    return null;
				}
				public Integer ESMPrecision(){
				    return null;
				}
				public String ESMDefault(){
				
					return null;
				
				}
				public String ESMComment(){
				
				    return "";
				
				}
				public String ESMPattern(){
				
					return "";
				
				}
				public String ESMOriginalDbColumnName(){
				
					return "ESM";
				
				}

				
			    public String SUBPROGRAMA;

				public String getSUBPROGRAMA () {
					return this.SUBPROGRAMA;
				}

				public Boolean SUBPROGRAMAIsNullable(){
				    return false;
				}
				public Boolean SUBPROGRAMAIsKey(){
				    return false;
				}
				public Integer SUBPROGRAMALength(){
				    return null;
				}
				public Integer SUBPROGRAMAPrecision(){
				    return null;
				}
				public String SUBPROGRAMADefault(){
				
					return null;
				
				}
				public String SUBPROGRAMAComment(){
				
				    return "";
				
				}
				public String SUBPROGRAMAPattern(){
				
					return "";
				
				}
				public String SUBPROGRAMAOriginalDbColumnName(){
				
					return "SUBPROGRAMA";
				
				}

				
			    public String ACTIVIDAD;

				public String getACTIVIDAD () {
					return this.ACTIVIDAD;
				}

				public Boolean ACTIVIDADIsNullable(){
				    return false;
				}
				public Boolean ACTIVIDADIsKey(){
				    return false;
				}
				public Integer ACTIVIDADLength(){
				    return null;
				}
				public Integer ACTIVIDADPrecision(){
				    return null;
				}
				public String ACTIVIDADDefault(){
				
					return null;
				
				}
				public String ACTIVIDADComment(){
				
				    return "";
				
				}
				public String ACTIVIDADPattern(){
				
					return "";
				
				}
				public String ACTIVIDADOriginalDbColumnName(){
				
					return "ACTIVIDAD";
				
				}

				
			    public Double PORC_ANUAL_ACTIVIDAD;

				public Double getPORC_ANUAL_ACTIVIDAD () {
					return this.PORC_ANUAL_ACTIVIDAD;
				}

				public Boolean PORC_ANUAL_ACTIVIDADIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUAL_ACTIVIDADIsKey(){
				    return false;
				}
				public Integer PORC_ANUAL_ACTIVIDADLength(){
				    return null;
				}
				public Integer PORC_ANUAL_ACTIVIDADPrecision(){
				    return null;
				}
				public String PORC_ANUAL_ACTIVIDADDefault(){
				
					return null;
				
				}
				public String PORC_ANUAL_ACTIVIDADComment(){
				
				    return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADPattern(){
				
					return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADOriginalDbColumnName(){
				
					return "PORC_ANUAL_ACTIVIDAD";
				
				}

				
			    public String FORMATO;

				public String getFORMATO () {
					return this.FORMATO;
				}

				public Boolean FORMATOIsNullable(){
				    return false;
				}
				public Boolean FORMATOIsKey(){
				    return false;
				}
				public Integer FORMATOLength(){
				    return null;
				}
				public Integer FORMATOPrecision(){
				    return null;
				}
				public String FORMATODefault(){
				
					return null;
				
				}
				public String FORMATOComment(){
				
				    return "";
				
				}
				public String FORMATOPattern(){
				
					return "";
				
				}
				public String FORMATOOriginalDbColumnName(){
				
					return "FORMATO";
				
				}

				
			    public Double PORC_TRIM_1;

				public Double getPORC_TRIM_1 () {
					return this.PORC_TRIM_1;
				}

				public Boolean PORC_TRIM_1IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_1Length(){
				    return null;
				}
				public Integer PORC_TRIM_1Precision(){
				    return null;
				}
				public String PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_1OriginalDbColumnName(){
				
					return "PORC_TRIM_1";
				
				}

				
			    public String NOM_PORC_TRIM_1;

				public String getNOM_PORC_TRIM_1 () {
					return this.NOM_PORC_TRIM_1;
				}

				public Boolean NOM_PORC_TRIM_1IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_1Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_1Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_1OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_1";
				
				}

				
			    public Double PORC_TRIM_2;

				public Double getPORC_TRIM_2 () {
					return this.PORC_TRIM_2;
				}

				public Boolean PORC_TRIM_2IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_2Length(){
				    return null;
				}
				public Integer PORC_TRIM_2Precision(){
				    return null;
				}
				public String PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_2OriginalDbColumnName(){
				
					return "PORC_TRIM_2";
				
				}

				
			    public String NOM_PORC_TRIM_2;

				public String getNOM_PORC_TRIM_2 () {
					return this.NOM_PORC_TRIM_2;
				}

				public Boolean NOM_PORC_TRIM_2IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_2Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_2Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_2OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_2";
				
				}

				
			    public Double PORC_TRIM_3;

				public Double getPORC_TRIM_3 () {
					return this.PORC_TRIM_3;
				}

				public Boolean PORC_TRIM_3IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_3Length(){
				    return null;
				}
				public Integer PORC_TRIM_3Precision(){
				    return null;
				}
				public String PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_3OriginalDbColumnName(){
				
					return "PORC_TRIM_3";
				
				}

				
			    public String NOM_PORC_TRIM_3;

				public String getNOM_PORC_TRIM_3 () {
					return this.NOM_PORC_TRIM_3;
				}

				public Boolean NOM_PORC_TRIM_3IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_3Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_3Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_3OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_3";
				
				}

				
			    public Double PORC_TRIM_4;

				public Double getPORC_TRIM_4 () {
					return this.PORC_TRIM_4;
				}

				public Boolean PORC_TRIM_4IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_4Length(){
				    return null;
				}
				public Integer PORC_TRIM_4Precision(){
				    return null;
				}
				public String PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_4OriginalDbColumnName(){
				
					return "PORC_TRIM_4";
				
				}

				
			    public String NOM_PORC_TRIM_4;

				public String getNOM_PORC_TRIM_4 () {
					return this.NOM_PORC_TRIM_4;
				}

				public Boolean NOM_PORC_TRIM_4IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_4Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_4Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_4OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_4";
				
				}

				
			    public Double PORC_ANUAL;

				public Double getPORC_ANUAL () {
					return this.PORC_ANUAL;
				}

				public Boolean PORC_ANUALIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUALIsKey(){
				    return false;
				}
				public Integer PORC_ANUALLength(){
				    return null;
				}
				public Integer PORC_ANUALPrecision(){
				    return null;
				}
				public String PORC_ANUALDefault(){
				
					return null;
				
				}
				public String PORC_ANUALComment(){
				
				    return "";
				
				}
				public String PORC_ANUALPattern(){
				
					return "";
				
				}
				public String PORC_ANUALOriginalDbColumnName(){
				
					return "PORC_ANUAL";
				
				}

				
			    public String NOM_PORC_ANUAL;

				public String getNOM_PORC_ANUAL () {
					return this.NOM_PORC_ANUAL;
				}

				public Boolean NOM_PORC_ANUALIsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_ANUALIsKey(){
				    return false;
				}
				public Integer NOM_PORC_ANUALLength(){
				    return null;
				}
				public Integer NOM_PORC_ANUALPrecision(){
				    return null;
				}
				public String NOM_PORC_ANUALDefault(){
				
					return null;
				
				}
				public String NOM_PORC_ANUALComment(){
				
				    return "";
				
				}
				public String NOM_PORC_ANUALPattern(){
				
					return "";
				
				}
				public String NOM_PORC_ANUALOriginalDbColumnName(){
				
					return "NOM_PORC_ANUAL";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return 0;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
					this.NOM_PORC_ANUAL = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
					this.NOM_PORC_ANUAL = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_1,dos);
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_2,dos);
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_3,dos);
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_4,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_ANUAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_1,dos);
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_2,dos);
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_3,dos);
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_4,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_ANUAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VIGENCIA="+String.valueOf(VIGENCIA));
		sb.append(",REGIONAL="+REGIONAL);
		sb.append(",FUERZA="+FUERZA);
		sb.append(",ESM="+ESM);
		sb.append(",SUBPROGRAMA="+SUBPROGRAMA);
		sb.append(",ACTIVIDAD="+ACTIVIDAD);
		sb.append(",PORC_ANUAL_ACTIVIDAD="+String.valueOf(PORC_ANUAL_ACTIVIDAD));
		sb.append(",FORMATO="+FORMATO);
		sb.append(",PORC_TRIM_1="+String.valueOf(PORC_TRIM_1));
		sb.append(",NOM_PORC_TRIM_1="+NOM_PORC_TRIM_1);
		sb.append(",PORC_TRIM_2="+String.valueOf(PORC_TRIM_2));
		sb.append(",NOM_PORC_TRIM_2="+NOM_PORC_TRIM_2);
		sb.append(",PORC_TRIM_3="+String.valueOf(PORC_TRIM_3));
		sb.append(",NOM_PORC_TRIM_3="+NOM_PORC_TRIM_3);
		sb.append(",PORC_TRIM_4="+String.valueOf(PORC_TRIM_4));
		sb.append(",NOM_PORC_TRIM_4="+NOM_PORC_TRIM_4);
		sb.append(",PORC_ANUAL="+String.valueOf(PORC_ANUAL));
		sb.append(",NOM_PORC_ANUAL="+NOM_PORC_ANUAL);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public int VIGENCIA;

				public int getVIGENCIA () {
					return this.VIGENCIA;
				}

				public Boolean VIGENCIAIsNullable(){
				    return false;
				}
				public Boolean VIGENCIAIsKey(){
				    return false;
				}
				public Integer VIGENCIALength(){
				    return 1;
				}
				public Integer VIGENCIAPrecision(){
				    return 0;
				}
				public String VIGENCIADefault(){
				
					return null;
				
				}
				public String VIGENCIAComment(){
				
				    return "";
				
				}
				public String VIGENCIAPattern(){
				
					return "";
				
				}
				public String VIGENCIAOriginalDbColumnName(){
				
					return "VIGENCIA";
				
				}

				
			    public String REGIONAL;

				public String getREGIONAL () {
					return this.REGIONAL;
				}

				public Boolean REGIONALIsNullable(){
				    return true;
				}
				public Boolean REGIONALIsKey(){
				    return false;
				}
				public Integer REGIONALLength(){
				    return null;
				}
				public Integer REGIONALPrecision(){
				    return null;
				}
				public String REGIONALDefault(){
				
					return null;
				
				}
				public String REGIONALComment(){
				
				    return "";
				
				}
				public String REGIONALPattern(){
				
					return "";
				
				}
				public String REGIONALOriginalDbColumnName(){
				
					return "REGIONAL";
				
				}

				
			    public String FUERZA;

				public String getFUERZA () {
					return this.FUERZA;
				}

				public Boolean FUERZAIsNullable(){
				    return false;
				}
				public Boolean FUERZAIsKey(){
				    return false;
				}
				public Integer FUERZALength(){
				    return null;
				}
				public Integer FUERZAPrecision(){
				    return null;
				}
				public String FUERZADefault(){
				
					return null;
				
				}
				public String FUERZAComment(){
				
				    return "";
				
				}
				public String FUERZAPattern(){
				
					return "";
				
				}
				public String FUERZAOriginalDbColumnName(){
				
					return "FUERZA";
				
				}

				
			    public String ESM;

				public String getESM () {
					return this.ESM;
				}

				public Boolean ESMIsNullable(){
				    return false;
				}
				public Boolean ESMIsKey(){
				    return false;
				}
				public Integer ESMLength(){
				    return null;
				}
				public Integer ESMPrecision(){
				    return null;
				}
				public String ESMDefault(){
				
					return null;
				
				}
				public String ESMComment(){
				
				    return "";
				
				}
				public String ESMPattern(){
				
					return "";
				
				}
				public String ESMOriginalDbColumnName(){
				
					return "ESM";
				
				}

				
			    public String SUBPROGRAMA;

				public String getSUBPROGRAMA () {
					return this.SUBPROGRAMA;
				}

				public Boolean SUBPROGRAMAIsNullable(){
				    return false;
				}
				public Boolean SUBPROGRAMAIsKey(){
				    return false;
				}
				public Integer SUBPROGRAMALength(){
				    return null;
				}
				public Integer SUBPROGRAMAPrecision(){
				    return null;
				}
				public String SUBPROGRAMADefault(){
				
					return null;
				
				}
				public String SUBPROGRAMAComment(){
				
				    return "";
				
				}
				public String SUBPROGRAMAPattern(){
				
					return "";
				
				}
				public String SUBPROGRAMAOriginalDbColumnName(){
				
					return "SUBPROGRAMA";
				
				}

				
			    public String ACTIVIDAD;

				public String getACTIVIDAD () {
					return this.ACTIVIDAD;
				}

				public Boolean ACTIVIDADIsNullable(){
				    return false;
				}
				public Boolean ACTIVIDADIsKey(){
				    return false;
				}
				public Integer ACTIVIDADLength(){
				    return null;
				}
				public Integer ACTIVIDADPrecision(){
				    return null;
				}
				public String ACTIVIDADDefault(){
				
					return null;
				
				}
				public String ACTIVIDADComment(){
				
				    return "";
				
				}
				public String ACTIVIDADPattern(){
				
					return "";
				
				}
				public String ACTIVIDADOriginalDbColumnName(){
				
					return "ACTIVIDAD";
				
				}

				
			    public Double PORC_ANUAL_ACTIVIDAD;

				public Double getPORC_ANUAL_ACTIVIDAD () {
					return this.PORC_ANUAL_ACTIVIDAD;
				}

				public Boolean PORC_ANUAL_ACTIVIDADIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUAL_ACTIVIDADIsKey(){
				    return false;
				}
				public Integer PORC_ANUAL_ACTIVIDADLength(){
				    return null;
				}
				public Integer PORC_ANUAL_ACTIVIDADPrecision(){
				    return null;
				}
				public String PORC_ANUAL_ACTIVIDADDefault(){
				
					return null;
				
				}
				public String PORC_ANUAL_ACTIVIDADComment(){
				
				    return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADPattern(){
				
					return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADOriginalDbColumnName(){
				
					return "PORC_ANUAL_ACTIVIDAD";
				
				}

				
			    public String FORMATO;

				public String getFORMATO () {
					return this.FORMATO;
				}

				public Boolean FORMATOIsNullable(){
				    return false;
				}
				public Boolean FORMATOIsKey(){
				    return false;
				}
				public Integer FORMATOLength(){
				    return null;
				}
				public Integer FORMATOPrecision(){
				    return null;
				}
				public String FORMATODefault(){
				
					return null;
				
				}
				public String FORMATOComment(){
				
				    return "";
				
				}
				public String FORMATOPattern(){
				
					return "";
				
				}
				public String FORMATOOriginalDbColumnName(){
				
					return "FORMATO";
				
				}

				
			    public Double PORC_TRIM_1;

				public Double getPORC_TRIM_1 () {
					return this.PORC_TRIM_1;
				}

				public Boolean PORC_TRIM_1IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_1Length(){
				    return null;
				}
				public Integer PORC_TRIM_1Precision(){
				    return null;
				}
				public String PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_1OriginalDbColumnName(){
				
					return "PORC_TRIM_1";
				
				}

				
			    public String NOM_PORC_TRIM_1;

				public String getNOM_PORC_TRIM_1 () {
					return this.NOM_PORC_TRIM_1;
				}

				public Boolean NOM_PORC_TRIM_1IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_1Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_1Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_1OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_1";
				
				}

				
			    public Double PORC_TRIM_2;

				public Double getPORC_TRIM_2 () {
					return this.PORC_TRIM_2;
				}

				public Boolean PORC_TRIM_2IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_2Length(){
				    return null;
				}
				public Integer PORC_TRIM_2Precision(){
				    return null;
				}
				public String PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_2OriginalDbColumnName(){
				
					return "PORC_TRIM_2";
				
				}

				
			    public String NOM_PORC_TRIM_2;

				public String getNOM_PORC_TRIM_2 () {
					return this.NOM_PORC_TRIM_2;
				}

				public Boolean NOM_PORC_TRIM_2IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_2Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_2Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_2OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_2";
				
				}

				
			    public Double PORC_TRIM_3;

				public Double getPORC_TRIM_3 () {
					return this.PORC_TRIM_3;
				}

				public Boolean PORC_TRIM_3IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_3Length(){
				    return null;
				}
				public Integer PORC_TRIM_3Precision(){
				    return null;
				}
				public String PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_3OriginalDbColumnName(){
				
					return "PORC_TRIM_3";
				
				}

				
			    public String NOM_PORC_TRIM_3;

				public String getNOM_PORC_TRIM_3 () {
					return this.NOM_PORC_TRIM_3;
				}

				public Boolean NOM_PORC_TRIM_3IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_3Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_3Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_3OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_3";
				
				}

				
			    public Double PORC_TRIM_4;

				public Double getPORC_TRIM_4 () {
					return this.PORC_TRIM_4;
				}

				public Boolean PORC_TRIM_4IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_4Length(){
				    return null;
				}
				public Integer PORC_TRIM_4Precision(){
				    return null;
				}
				public String PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_4OriginalDbColumnName(){
				
					return "PORC_TRIM_4";
				
				}

				
			    public String NOM_PORC_TRIM_4;

				public String getNOM_PORC_TRIM_4 () {
					return this.NOM_PORC_TRIM_4;
				}

				public Boolean NOM_PORC_TRIM_4IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_4Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_4Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_4OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_4";
				
				}

				
			    public Double PORC_ANUAL;

				public Double getPORC_ANUAL () {
					return this.PORC_ANUAL;
				}

				public Boolean PORC_ANUALIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUALIsKey(){
				    return false;
				}
				public Integer PORC_ANUALLength(){
				    return null;
				}
				public Integer PORC_ANUALPrecision(){
				    return null;
				}
				public String PORC_ANUALDefault(){
				
					return null;
				
				}
				public String PORC_ANUALComment(){
				
				    return "";
				
				}
				public String PORC_ANUALPattern(){
				
					return "";
				
				}
				public String PORC_ANUALOriginalDbColumnName(){
				
					return "PORC_ANUAL";
				
				}

				
			    public String NOM_PORC_ANUAL;

				public String getNOM_PORC_ANUAL () {
					return this.NOM_PORC_ANUAL;
				}

				public Boolean NOM_PORC_ANUALIsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_ANUALIsKey(){
				    return false;
				}
				public Integer NOM_PORC_ANUALLength(){
				    return null;
				}
				public Integer NOM_PORC_ANUALPrecision(){
				    return null;
				}
				public String NOM_PORC_ANUALDefault(){
				
					return null;
				
				}
				public String NOM_PORC_ANUALComment(){
				
				    return "";
				
				}
				public String NOM_PORC_ANUALPattern(){
				
					return "";
				
				}
				public String NOM_PORC_ANUALOriginalDbColumnName(){
				
					return "NOM_PORC_ANUAL";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return 0;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public String LOOKUP;

				public String getLOOKUP () {
					return this.LOOKUP;
				}

				public Boolean LOOKUPIsNullable(){
				    return true;
				}
				public Boolean LOOKUPIsKey(){
				    return false;
				}
				public Integer LOOKUPLength(){
				    return 255;
				}
				public Integer LOOKUPPrecision(){
				    return 0;
				}
				public String LOOKUPDefault(){
				
					return null;
				
				}
				public String LOOKUPComment(){
				
				    return null;
				
				}
				public String LOOKUPPattern(){
				
				    return null;
				
				}
				public String LOOKUPOriginalDbColumnName(){
				
					return "LOOKUP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
					this.NOM_PORC_ANUAL = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.LOOKUP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
					this.NOM_PORC_ANUAL = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.LOOKUP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_1,dos);
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_2,dos);
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_3,dos);
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_4,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_ANUAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.LOOKUP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_1,dos);
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_2,dos);
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_3,dos);
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_4,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_ANUAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.LOOKUP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VIGENCIA="+String.valueOf(VIGENCIA));
		sb.append(",REGIONAL="+REGIONAL);
		sb.append(",FUERZA="+FUERZA);
		sb.append(",ESM="+ESM);
		sb.append(",SUBPROGRAMA="+SUBPROGRAMA);
		sb.append(",ACTIVIDAD="+ACTIVIDAD);
		sb.append(",PORC_ANUAL_ACTIVIDAD="+String.valueOf(PORC_ANUAL_ACTIVIDAD));
		sb.append(",FORMATO="+FORMATO);
		sb.append(",PORC_TRIM_1="+String.valueOf(PORC_TRIM_1));
		sb.append(",NOM_PORC_TRIM_1="+NOM_PORC_TRIM_1);
		sb.append(",PORC_TRIM_2="+String.valueOf(PORC_TRIM_2));
		sb.append(",NOM_PORC_TRIM_2="+NOM_PORC_TRIM_2);
		sb.append(",PORC_TRIM_3="+String.valueOf(PORC_TRIM_3));
		sb.append(",NOM_PORC_TRIM_3="+NOM_PORC_TRIM_3);
		sb.append(",PORC_TRIM_4="+String.valueOf(PORC_TRIM_4));
		sb.append(",NOM_PORC_TRIM_4="+NOM_PORC_TRIM_4);
		sb.append(",PORC_ANUAL="+String.valueOf(PORC_ANUAL));
		sb.append(",NOM_PORC_ANUAL="+NOM_PORC_ANUAL);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",LOOKUP="+LOOKUP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public int VIGENCIA;

				public int getVIGENCIA () {
					return this.VIGENCIA;
				}

				public Boolean VIGENCIAIsNullable(){
				    return false;
				}
				public Boolean VIGENCIAIsKey(){
				    return false;
				}
				public Integer VIGENCIALength(){
				    return 1;
				}
				public Integer VIGENCIAPrecision(){
				    return 0;
				}
				public String VIGENCIADefault(){
				
					return null;
				
				}
				public String VIGENCIAComment(){
				
				    return "";
				
				}
				public String VIGENCIAPattern(){
				
					return "";
				
				}
				public String VIGENCIAOriginalDbColumnName(){
				
					return "VIGENCIA";
				
				}

				
			    public String REGIONAL;

				public String getREGIONAL () {
					return this.REGIONAL;
				}

				public Boolean REGIONALIsNullable(){
				    return true;
				}
				public Boolean REGIONALIsKey(){
				    return false;
				}
				public Integer REGIONALLength(){
				    return null;
				}
				public Integer REGIONALPrecision(){
				    return null;
				}
				public String REGIONALDefault(){
				
					return null;
				
				}
				public String REGIONALComment(){
				
				    return "";
				
				}
				public String REGIONALPattern(){
				
					return "";
				
				}
				public String REGIONALOriginalDbColumnName(){
				
					return "REGIONAL";
				
				}

				
			    public String FUERZA;

				public String getFUERZA () {
					return this.FUERZA;
				}

				public Boolean FUERZAIsNullable(){
				    return false;
				}
				public Boolean FUERZAIsKey(){
				    return false;
				}
				public Integer FUERZALength(){
				    return null;
				}
				public Integer FUERZAPrecision(){
				    return null;
				}
				public String FUERZADefault(){
				
					return null;
				
				}
				public String FUERZAComment(){
				
				    return "";
				
				}
				public String FUERZAPattern(){
				
					return "";
				
				}
				public String FUERZAOriginalDbColumnName(){
				
					return "FUERZA";
				
				}

				
			    public String ESM;

				public String getESM () {
					return this.ESM;
				}

				public Boolean ESMIsNullable(){
				    return false;
				}
				public Boolean ESMIsKey(){
				    return false;
				}
				public Integer ESMLength(){
				    return null;
				}
				public Integer ESMPrecision(){
				    return null;
				}
				public String ESMDefault(){
				
					return null;
				
				}
				public String ESMComment(){
				
				    return "";
				
				}
				public String ESMPattern(){
				
					return "";
				
				}
				public String ESMOriginalDbColumnName(){
				
					return "ESM";
				
				}

				
			    public String SUBPROGRAMA;

				public String getSUBPROGRAMA () {
					return this.SUBPROGRAMA;
				}

				public Boolean SUBPROGRAMAIsNullable(){
				    return false;
				}
				public Boolean SUBPROGRAMAIsKey(){
				    return false;
				}
				public Integer SUBPROGRAMALength(){
				    return null;
				}
				public Integer SUBPROGRAMAPrecision(){
				    return null;
				}
				public String SUBPROGRAMADefault(){
				
					return null;
				
				}
				public String SUBPROGRAMAComment(){
				
				    return "";
				
				}
				public String SUBPROGRAMAPattern(){
				
					return "";
				
				}
				public String SUBPROGRAMAOriginalDbColumnName(){
				
					return "SUBPROGRAMA";
				
				}

				
			    public String ACTIVIDAD;

				public String getACTIVIDAD () {
					return this.ACTIVIDAD;
				}

				public Boolean ACTIVIDADIsNullable(){
				    return false;
				}
				public Boolean ACTIVIDADIsKey(){
				    return false;
				}
				public Integer ACTIVIDADLength(){
				    return null;
				}
				public Integer ACTIVIDADPrecision(){
				    return null;
				}
				public String ACTIVIDADDefault(){
				
					return null;
				
				}
				public String ACTIVIDADComment(){
				
				    return "";
				
				}
				public String ACTIVIDADPattern(){
				
					return "";
				
				}
				public String ACTIVIDADOriginalDbColumnName(){
				
					return "ACTIVIDAD";
				
				}

				
			    public Double PORC_ANUAL_ACTIVIDAD;

				public Double getPORC_ANUAL_ACTIVIDAD () {
					return this.PORC_ANUAL_ACTIVIDAD;
				}

				public Boolean PORC_ANUAL_ACTIVIDADIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUAL_ACTIVIDADIsKey(){
				    return false;
				}
				public Integer PORC_ANUAL_ACTIVIDADLength(){
				    return null;
				}
				public Integer PORC_ANUAL_ACTIVIDADPrecision(){
				    return null;
				}
				public String PORC_ANUAL_ACTIVIDADDefault(){
				
					return null;
				
				}
				public String PORC_ANUAL_ACTIVIDADComment(){
				
				    return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADPattern(){
				
					return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADOriginalDbColumnName(){
				
					return "PORC_ANUAL_ACTIVIDAD";
				
				}

				
			    public String FORMATO;

				public String getFORMATO () {
					return this.FORMATO;
				}

				public Boolean FORMATOIsNullable(){
				    return false;
				}
				public Boolean FORMATOIsKey(){
				    return false;
				}
				public Integer FORMATOLength(){
				    return null;
				}
				public Integer FORMATOPrecision(){
				    return null;
				}
				public String FORMATODefault(){
				
					return null;
				
				}
				public String FORMATOComment(){
				
				    return "";
				
				}
				public String FORMATOPattern(){
				
					return "";
				
				}
				public String FORMATOOriginalDbColumnName(){
				
					return "FORMATO";
				
				}

				
			    public Double PORC_TRIM_1;

				public Double getPORC_TRIM_1 () {
					return this.PORC_TRIM_1;
				}

				public Boolean PORC_TRIM_1IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_1Length(){
				    return null;
				}
				public Integer PORC_TRIM_1Precision(){
				    return null;
				}
				public String PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_1OriginalDbColumnName(){
				
					return "PORC_TRIM_1";
				
				}

				
			    public String NOM_PORC_TRIM_1;

				public String getNOM_PORC_TRIM_1 () {
					return this.NOM_PORC_TRIM_1;
				}

				public Boolean NOM_PORC_TRIM_1IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_1Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_1Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_1OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_1";
				
				}

				
			    public Double PORC_TRIM_2;

				public Double getPORC_TRIM_2 () {
					return this.PORC_TRIM_2;
				}

				public Boolean PORC_TRIM_2IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_2Length(){
				    return null;
				}
				public Integer PORC_TRIM_2Precision(){
				    return null;
				}
				public String PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_2OriginalDbColumnName(){
				
					return "PORC_TRIM_2";
				
				}

				
			    public String NOM_PORC_TRIM_2;

				public String getNOM_PORC_TRIM_2 () {
					return this.NOM_PORC_TRIM_2;
				}

				public Boolean NOM_PORC_TRIM_2IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_2Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_2Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_2OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_2";
				
				}

				
			    public Double PORC_TRIM_3;

				public Double getPORC_TRIM_3 () {
					return this.PORC_TRIM_3;
				}

				public Boolean PORC_TRIM_3IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_3Length(){
				    return null;
				}
				public Integer PORC_TRIM_3Precision(){
				    return null;
				}
				public String PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_3OriginalDbColumnName(){
				
					return "PORC_TRIM_3";
				
				}

				
			    public String NOM_PORC_TRIM_3;

				public String getNOM_PORC_TRIM_3 () {
					return this.NOM_PORC_TRIM_3;
				}

				public Boolean NOM_PORC_TRIM_3IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_3Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_3Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_3OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_3";
				
				}

				
			    public Double PORC_TRIM_4;

				public Double getPORC_TRIM_4 () {
					return this.PORC_TRIM_4;
				}

				public Boolean PORC_TRIM_4IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_4Length(){
				    return null;
				}
				public Integer PORC_TRIM_4Precision(){
				    return null;
				}
				public String PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_4OriginalDbColumnName(){
				
					return "PORC_TRIM_4";
				
				}

				
			    public String NOM_PORC_TRIM_4;

				public String getNOM_PORC_TRIM_4 () {
					return this.NOM_PORC_TRIM_4;
				}

				public Boolean NOM_PORC_TRIM_4IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_4Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_4Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_4OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_4";
				
				}

				
			    public Double PORC_ANUAL;

				public Double getPORC_ANUAL () {
					return this.PORC_ANUAL;
				}

				public Boolean PORC_ANUALIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUALIsKey(){
				    return false;
				}
				public Integer PORC_ANUALLength(){
				    return null;
				}
				public Integer PORC_ANUALPrecision(){
				    return null;
				}
				public String PORC_ANUALDefault(){
				
					return null;
				
				}
				public String PORC_ANUALComment(){
				
				    return "";
				
				}
				public String PORC_ANUALPattern(){
				
					return "";
				
				}
				public String PORC_ANUALOriginalDbColumnName(){
				
					return "PORC_ANUAL";
				
				}

				
			    public String NOM_PORC_ANUAL;

				public String getNOM_PORC_ANUAL () {
					return this.NOM_PORC_ANUAL;
				}

				public Boolean NOM_PORC_ANUALIsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_ANUALIsKey(){
				    return false;
				}
				public Integer NOM_PORC_ANUALLength(){
				    return null;
				}
				public Integer NOM_PORC_ANUALPrecision(){
				    return null;
				}
				public String NOM_PORC_ANUALDefault(){
				
					return null;
				
				}
				public String NOM_PORC_ANUALComment(){
				
				    return "";
				
				}
				public String NOM_PORC_ANUALPattern(){
				
					return "";
				
				}
				public String NOM_PORC_ANUALOriginalDbColumnName(){
				
					return "NOM_PORC_ANUAL";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return 0;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
					this.NOM_PORC_ANUAL = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
					this.NOM_PORC_ANUAL = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_1,dos);
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_2,dos);
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_3,dos);
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_4,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_ANUAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_1,dos);
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_2,dos);
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_3,dos);
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_4,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_ANUAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VIGENCIA="+String.valueOf(VIGENCIA));
		sb.append(",REGIONAL="+REGIONAL);
		sb.append(",FUERZA="+FUERZA);
		sb.append(",ESM="+ESM);
		sb.append(",SUBPROGRAMA="+SUBPROGRAMA);
		sb.append(",ACTIVIDAD="+ACTIVIDAD);
		sb.append(",PORC_ANUAL_ACTIVIDAD="+String.valueOf(PORC_ANUAL_ACTIVIDAD));
		sb.append(",FORMATO="+FORMATO);
		sb.append(",PORC_TRIM_1="+String.valueOf(PORC_TRIM_1));
		sb.append(",NOM_PORC_TRIM_1="+NOM_PORC_TRIM_1);
		sb.append(",PORC_TRIM_2="+String.valueOf(PORC_TRIM_2));
		sb.append(",NOM_PORC_TRIM_2="+NOM_PORC_TRIM_2);
		sb.append(",PORC_TRIM_3="+String.valueOf(PORC_TRIM_3));
		sb.append(",NOM_PORC_TRIM_3="+NOM_PORC_TRIM_3);
		sb.append(",PORC_TRIM_4="+String.valueOf(PORC_TRIM_4));
		sb.append(",NOM_PORC_TRIM_4="+NOM_PORC_TRIM_4);
		sb.append(",PORC_ANUAL="+String.valueOf(PORC_ANUAL));
		sb.append(",NOM_PORC_ANUAL="+NOM_PORC_ANUAL);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public int VIGENCIA;

				public int getVIGENCIA () {
					return this.VIGENCIA;
				}

				public Boolean VIGENCIAIsNullable(){
				    return false;
				}
				public Boolean VIGENCIAIsKey(){
				    return false;
				}
				public Integer VIGENCIALength(){
				    return 1;
				}
				public Integer VIGENCIAPrecision(){
				    return 0;
				}
				public String VIGENCIADefault(){
				
					return null;
				
				}
				public String VIGENCIAComment(){
				
				    return "";
				
				}
				public String VIGENCIAPattern(){
				
					return "";
				
				}
				public String VIGENCIAOriginalDbColumnName(){
				
					return "VIGENCIA";
				
				}

				
			    public String REGIONAL;

				public String getREGIONAL () {
					return this.REGIONAL;
				}

				public Boolean REGIONALIsNullable(){
				    return true;
				}
				public Boolean REGIONALIsKey(){
				    return false;
				}
				public Integer REGIONALLength(){
				    return null;
				}
				public Integer REGIONALPrecision(){
				    return null;
				}
				public String REGIONALDefault(){
				
					return null;
				
				}
				public String REGIONALComment(){
				
				    return "";
				
				}
				public String REGIONALPattern(){
				
					return "";
				
				}
				public String REGIONALOriginalDbColumnName(){
				
					return "REGIONAL";
				
				}

				
			    public String FUERZA;

				public String getFUERZA () {
					return this.FUERZA;
				}

				public Boolean FUERZAIsNullable(){
				    return false;
				}
				public Boolean FUERZAIsKey(){
				    return false;
				}
				public Integer FUERZALength(){
				    return null;
				}
				public Integer FUERZAPrecision(){
				    return null;
				}
				public String FUERZADefault(){
				
					return null;
				
				}
				public String FUERZAComment(){
				
				    return "";
				
				}
				public String FUERZAPattern(){
				
					return "";
				
				}
				public String FUERZAOriginalDbColumnName(){
				
					return "FUERZA";
				
				}

				
			    public String ESM;

				public String getESM () {
					return this.ESM;
				}

				public Boolean ESMIsNullable(){
				    return false;
				}
				public Boolean ESMIsKey(){
				    return false;
				}
				public Integer ESMLength(){
				    return null;
				}
				public Integer ESMPrecision(){
				    return null;
				}
				public String ESMDefault(){
				
					return null;
				
				}
				public String ESMComment(){
				
				    return "";
				
				}
				public String ESMPattern(){
				
					return "";
				
				}
				public String ESMOriginalDbColumnName(){
				
					return "ESM";
				
				}

				
			    public String SUBPROGRAMA;

				public String getSUBPROGRAMA () {
					return this.SUBPROGRAMA;
				}

				public Boolean SUBPROGRAMAIsNullable(){
				    return false;
				}
				public Boolean SUBPROGRAMAIsKey(){
				    return false;
				}
				public Integer SUBPROGRAMALength(){
				    return null;
				}
				public Integer SUBPROGRAMAPrecision(){
				    return null;
				}
				public String SUBPROGRAMADefault(){
				
					return null;
				
				}
				public String SUBPROGRAMAComment(){
				
				    return "";
				
				}
				public String SUBPROGRAMAPattern(){
				
					return "";
				
				}
				public String SUBPROGRAMAOriginalDbColumnName(){
				
					return "SUBPROGRAMA";
				
				}

				
			    public String ACTIVIDAD;

				public String getACTIVIDAD () {
					return this.ACTIVIDAD;
				}

				public Boolean ACTIVIDADIsNullable(){
				    return false;
				}
				public Boolean ACTIVIDADIsKey(){
				    return false;
				}
				public Integer ACTIVIDADLength(){
				    return null;
				}
				public Integer ACTIVIDADPrecision(){
				    return null;
				}
				public String ACTIVIDADDefault(){
				
					return null;
				
				}
				public String ACTIVIDADComment(){
				
				    return "";
				
				}
				public String ACTIVIDADPattern(){
				
					return "";
				
				}
				public String ACTIVIDADOriginalDbColumnName(){
				
					return "ACTIVIDAD";
				
				}

				
			    public Double PORC_ANUAL_ACTIVIDAD;

				public Double getPORC_ANUAL_ACTIVIDAD () {
					return this.PORC_ANUAL_ACTIVIDAD;
				}

				public Boolean PORC_ANUAL_ACTIVIDADIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUAL_ACTIVIDADIsKey(){
				    return false;
				}
				public Integer PORC_ANUAL_ACTIVIDADLength(){
				    return null;
				}
				public Integer PORC_ANUAL_ACTIVIDADPrecision(){
				    return null;
				}
				public String PORC_ANUAL_ACTIVIDADDefault(){
				
					return null;
				
				}
				public String PORC_ANUAL_ACTIVIDADComment(){
				
				    return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADPattern(){
				
					return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADOriginalDbColumnName(){
				
					return "PORC_ANUAL_ACTIVIDAD";
				
				}

				
			    public String FORMATO;

				public String getFORMATO () {
					return this.FORMATO;
				}

				public Boolean FORMATOIsNullable(){
				    return false;
				}
				public Boolean FORMATOIsKey(){
				    return false;
				}
				public Integer FORMATOLength(){
				    return null;
				}
				public Integer FORMATOPrecision(){
				    return null;
				}
				public String FORMATODefault(){
				
					return null;
				
				}
				public String FORMATOComment(){
				
				    return "";
				
				}
				public String FORMATOPattern(){
				
					return "";
				
				}
				public String FORMATOOriginalDbColumnName(){
				
					return "FORMATO";
				
				}

				
			    public Double PORC_TRIM_1;

				public Double getPORC_TRIM_1 () {
					return this.PORC_TRIM_1;
				}

				public Boolean PORC_TRIM_1IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_1Length(){
				    return null;
				}
				public Integer PORC_TRIM_1Precision(){
				    return null;
				}
				public String PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_1OriginalDbColumnName(){
				
					return "PORC_TRIM_1";
				
				}

				
			    public String NOM_PORC_TRIM_1;

				public String getNOM_PORC_TRIM_1 () {
					return this.NOM_PORC_TRIM_1;
				}

				public Boolean NOM_PORC_TRIM_1IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_1Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_1Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_1OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_1";
				
				}

				
			    public Double PORC_TRIM_2;

				public Double getPORC_TRIM_2 () {
					return this.PORC_TRIM_2;
				}

				public Boolean PORC_TRIM_2IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_2Length(){
				    return null;
				}
				public Integer PORC_TRIM_2Precision(){
				    return null;
				}
				public String PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_2OriginalDbColumnName(){
				
					return "PORC_TRIM_2";
				
				}

				
			    public String NOM_PORC_TRIM_2;

				public String getNOM_PORC_TRIM_2 () {
					return this.NOM_PORC_TRIM_2;
				}

				public Boolean NOM_PORC_TRIM_2IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_2Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_2Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_2OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_2";
				
				}

				
			    public Double PORC_TRIM_3;

				public Double getPORC_TRIM_3 () {
					return this.PORC_TRIM_3;
				}

				public Boolean PORC_TRIM_3IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_3Length(){
				    return null;
				}
				public Integer PORC_TRIM_3Precision(){
				    return null;
				}
				public String PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_3OriginalDbColumnName(){
				
					return "PORC_TRIM_3";
				
				}

				
			    public String NOM_PORC_TRIM_3;

				public String getNOM_PORC_TRIM_3 () {
					return this.NOM_PORC_TRIM_3;
				}

				public Boolean NOM_PORC_TRIM_3IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_3Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_3Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_3OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_3";
				
				}

				
			    public Double PORC_TRIM_4;

				public Double getPORC_TRIM_4 () {
					return this.PORC_TRIM_4;
				}

				public Boolean PORC_TRIM_4IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_4Length(){
				    return null;
				}
				public Integer PORC_TRIM_4Precision(){
				    return null;
				}
				public String PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_4OriginalDbColumnName(){
				
					return "PORC_TRIM_4";
				
				}

				
			    public String NOM_PORC_TRIM_4;

				public String getNOM_PORC_TRIM_4 () {
					return this.NOM_PORC_TRIM_4;
				}

				public Boolean NOM_PORC_TRIM_4IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_4Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_4Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_4OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_4";
				
				}

				
			    public Double PORC_ANUAL;

				public Double getPORC_ANUAL () {
					return this.PORC_ANUAL;
				}

				public Boolean PORC_ANUALIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUALIsKey(){
				    return false;
				}
				public Integer PORC_ANUALLength(){
				    return null;
				}
				public Integer PORC_ANUALPrecision(){
				    return null;
				}
				public String PORC_ANUALDefault(){
				
					return null;
				
				}
				public String PORC_ANUALComment(){
				
				    return "";
				
				}
				public String PORC_ANUALPattern(){
				
					return "";
				
				}
				public String PORC_ANUALOriginalDbColumnName(){
				
					return "PORC_ANUAL";
				
				}

				
			    public String NOM_PORC_ANUAL;

				public String getNOM_PORC_ANUAL () {
					return this.NOM_PORC_ANUAL;
				}

				public Boolean NOM_PORC_ANUALIsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_ANUALIsKey(){
				    return false;
				}
				public Integer NOM_PORC_ANUALLength(){
				    return null;
				}
				public Integer NOM_PORC_ANUALPrecision(){
				    return null;
				}
				public String NOM_PORC_ANUALDefault(){
				
					return null;
				
				}
				public String NOM_PORC_ANUALComment(){
				
				    return "";
				
				}
				public String NOM_PORC_ANUALPattern(){
				
					return "";
				
				}
				public String NOM_PORC_ANUALOriginalDbColumnName(){
				
					return "NOM_PORC_ANUAL";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return 0;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public String LOOKUP;

				public String getLOOKUP () {
					return this.LOOKUP;
				}

				public Boolean LOOKUPIsNullable(){
				    return true;
				}
				public Boolean LOOKUPIsKey(){
				    return false;
				}
				public Integer LOOKUPLength(){
				    return 255;
				}
				public Integer LOOKUPPrecision(){
				    return 0;
				}
				public String LOOKUPDefault(){
				
					return null;
				
				}
				public String LOOKUPComment(){
				
				    return null;
				
				}
				public String LOOKUPPattern(){
				
				    return null;
				
				}
				public String LOOKUPOriginalDbColumnName(){
				
					return "LOOKUP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
					this.NOM_PORC_ANUAL = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.LOOKUP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
					this.NOM_PORC_ANUAL = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.LOOKUP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_1,dos);
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_2,dos);
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_3,dos);
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_4,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_ANUAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.LOOKUP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_1,dos);
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_2,dos);
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_3,dos);
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_4,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_ANUAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.LOOKUP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VIGENCIA="+String.valueOf(VIGENCIA));
		sb.append(",REGIONAL="+REGIONAL);
		sb.append(",FUERZA="+FUERZA);
		sb.append(",ESM="+ESM);
		sb.append(",SUBPROGRAMA="+SUBPROGRAMA);
		sb.append(",ACTIVIDAD="+ACTIVIDAD);
		sb.append(",PORC_ANUAL_ACTIVIDAD="+String.valueOf(PORC_ANUAL_ACTIVIDAD));
		sb.append(",FORMATO="+FORMATO);
		sb.append(",PORC_TRIM_1="+String.valueOf(PORC_TRIM_1));
		sb.append(",NOM_PORC_TRIM_1="+NOM_PORC_TRIM_1);
		sb.append(",PORC_TRIM_2="+String.valueOf(PORC_TRIM_2));
		sb.append(",NOM_PORC_TRIM_2="+NOM_PORC_TRIM_2);
		sb.append(",PORC_TRIM_3="+String.valueOf(PORC_TRIM_3));
		sb.append(",NOM_PORC_TRIM_3="+NOM_PORC_TRIM_3);
		sb.append(",PORC_TRIM_4="+String.valueOf(PORC_TRIM_4));
		sb.append(",NOM_PORC_TRIM_4="+NOM_PORC_TRIM_4);
		sb.append(",PORC_ANUAL="+String.valueOf(PORC_ANUAL));
		sb.append(",NOM_PORC_ANUAL="+NOM_PORC_ANUAL);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",LOOKUP="+LOOKUP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public int VIGENCIA;

				public int getVIGENCIA () {
					return this.VIGENCIA;
				}

				public Boolean VIGENCIAIsNullable(){
				    return false;
				}
				public Boolean VIGENCIAIsKey(){
				    return false;
				}
				public Integer VIGENCIALength(){
				    return 1;
				}
				public Integer VIGENCIAPrecision(){
				    return 0;
				}
				public String VIGENCIADefault(){
				
					return null;
				
				}
				public String VIGENCIAComment(){
				
				    return "";
				
				}
				public String VIGENCIAPattern(){
				
					return "";
				
				}
				public String VIGENCIAOriginalDbColumnName(){
				
					return "VIGENCIA";
				
				}

				
			    public String REGIONAL;

				public String getREGIONAL () {
					return this.REGIONAL;
				}

				public Boolean REGIONALIsNullable(){
				    return true;
				}
				public Boolean REGIONALIsKey(){
				    return false;
				}
				public Integer REGIONALLength(){
				    return null;
				}
				public Integer REGIONALPrecision(){
				    return null;
				}
				public String REGIONALDefault(){
				
					return null;
				
				}
				public String REGIONALComment(){
				
				    return "";
				
				}
				public String REGIONALPattern(){
				
					return "";
				
				}
				public String REGIONALOriginalDbColumnName(){
				
					return "REGIONAL";
				
				}

				
			    public String FUERZA;

				public String getFUERZA () {
					return this.FUERZA;
				}

				public Boolean FUERZAIsNullable(){
				    return false;
				}
				public Boolean FUERZAIsKey(){
				    return false;
				}
				public Integer FUERZALength(){
				    return null;
				}
				public Integer FUERZAPrecision(){
				    return null;
				}
				public String FUERZADefault(){
				
					return null;
				
				}
				public String FUERZAComment(){
				
				    return "";
				
				}
				public String FUERZAPattern(){
				
					return "";
				
				}
				public String FUERZAOriginalDbColumnName(){
				
					return "FUERZA";
				
				}

				
			    public String ESM;

				public String getESM () {
					return this.ESM;
				}

				public Boolean ESMIsNullable(){
				    return false;
				}
				public Boolean ESMIsKey(){
				    return false;
				}
				public Integer ESMLength(){
				    return null;
				}
				public Integer ESMPrecision(){
				    return null;
				}
				public String ESMDefault(){
				
					return null;
				
				}
				public String ESMComment(){
				
				    return "";
				
				}
				public String ESMPattern(){
				
					return "";
				
				}
				public String ESMOriginalDbColumnName(){
				
					return "ESM";
				
				}

				
			    public String SUBPROGRAMA;

				public String getSUBPROGRAMA () {
					return this.SUBPROGRAMA;
				}

				public Boolean SUBPROGRAMAIsNullable(){
				    return false;
				}
				public Boolean SUBPROGRAMAIsKey(){
				    return false;
				}
				public Integer SUBPROGRAMALength(){
				    return null;
				}
				public Integer SUBPROGRAMAPrecision(){
				    return null;
				}
				public String SUBPROGRAMADefault(){
				
					return null;
				
				}
				public String SUBPROGRAMAComment(){
				
				    return "";
				
				}
				public String SUBPROGRAMAPattern(){
				
					return "";
				
				}
				public String SUBPROGRAMAOriginalDbColumnName(){
				
					return "SUBPROGRAMA";
				
				}

				
			    public String ACTIVIDAD;

				public String getACTIVIDAD () {
					return this.ACTIVIDAD;
				}

				public Boolean ACTIVIDADIsNullable(){
				    return false;
				}
				public Boolean ACTIVIDADIsKey(){
				    return false;
				}
				public Integer ACTIVIDADLength(){
				    return null;
				}
				public Integer ACTIVIDADPrecision(){
				    return null;
				}
				public String ACTIVIDADDefault(){
				
					return null;
				
				}
				public String ACTIVIDADComment(){
				
				    return "";
				
				}
				public String ACTIVIDADPattern(){
				
					return "";
				
				}
				public String ACTIVIDADOriginalDbColumnName(){
				
					return "ACTIVIDAD";
				
				}

				
			    public Double PORC_ANUAL_ACTIVIDAD;

				public Double getPORC_ANUAL_ACTIVIDAD () {
					return this.PORC_ANUAL_ACTIVIDAD;
				}

				public Boolean PORC_ANUAL_ACTIVIDADIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUAL_ACTIVIDADIsKey(){
				    return false;
				}
				public Integer PORC_ANUAL_ACTIVIDADLength(){
				    return null;
				}
				public Integer PORC_ANUAL_ACTIVIDADPrecision(){
				    return null;
				}
				public String PORC_ANUAL_ACTIVIDADDefault(){
				
					return null;
				
				}
				public String PORC_ANUAL_ACTIVIDADComment(){
				
				    return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADPattern(){
				
					return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADOriginalDbColumnName(){
				
					return "PORC_ANUAL_ACTIVIDAD";
				
				}

				
			    public String FORMATO;

				public String getFORMATO () {
					return this.FORMATO;
				}

				public Boolean FORMATOIsNullable(){
				    return false;
				}
				public Boolean FORMATOIsKey(){
				    return false;
				}
				public Integer FORMATOLength(){
				    return null;
				}
				public Integer FORMATOPrecision(){
				    return null;
				}
				public String FORMATODefault(){
				
					return null;
				
				}
				public String FORMATOComment(){
				
				    return "";
				
				}
				public String FORMATOPattern(){
				
					return "";
				
				}
				public String FORMATOOriginalDbColumnName(){
				
					return "FORMATO";
				
				}

				
			    public Double PORC_TRIM_1;

				public Double getPORC_TRIM_1 () {
					return this.PORC_TRIM_1;
				}

				public Boolean PORC_TRIM_1IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_1Length(){
				    return null;
				}
				public Integer PORC_TRIM_1Precision(){
				    return null;
				}
				public String PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_1OriginalDbColumnName(){
				
					return "PORC_TRIM_1";
				
				}

				
			    public String NOM_PORC_TRIM_1;

				public String getNOM_PORC_TRIM_1 () {
					return this.NOM_PORC_TRIM_1;
				}

				public Boolean NOM_PORC_TRIM_1IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_1Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_1Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_1OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_1";
				
				}

				
			    public Double PORC_TRIM_2;

				public Double getPORC_TRIM_2 () {
					return this.PORC_TRIM_2;
				}

				public Boolean PORC_TRIM_2IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_2Length(){
				    return null;
				}
				public Integer PORC_TRIM_2Precision(){
				    return null;
				}
				public String PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_2OriginalDbColumnName(){
				
					return "PORC_TRIM_2";
				
				}

				
			    public String NOM_PORC_TRIM_2;

				public String getNOM_PORC_TRIM_2 () {
					return this.NOM_PORC_TRIM_2;
				}

				public Boolean NOM_PORC_TRIM_2IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_2Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_2Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_2OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_2";
				
				}

				
			    public Double PORC_TRIM_3;

				public Double getPORC_TRIM_3 () {
					return this.PORC_TRIM_3;
				}

				public Boolean PORC_TRIM_3IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_3Length(){
				    return null;
				}
				public Integer PORC_TRIM_3Precision(){
				    return null;
				}
				public String PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_3OriginalDbColumnName(){
				
					return "PORC_TRIM_3";
				
				}

				
			    public String NOM_PORC_TRIM_3;

				public String getNOM_PORC_TRIM_3 () {
					return this.NOM_PORC_TRIM_3;
				}

				public Boolean NOM_PORC_TRIM_3IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_3Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_3Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_3OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_3";
				
				}

				
			    public Double PORC_TRIM_4;

				public Double getPORC_TRIM_4 () {
					return this.PORC_TRIM_4;
				}

				public Boolean PORC_TRIM_4IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_4Length(){
				    return null;
				}
				public Integer PORC_TRIM_4Precision(){
				    return null;
				}
				public String PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_4OriginalDbColumnName(){
				
					return "PORC_TRIM_4";
				
				}

				
			    public String NOM_PORC_TRIM_4;

				public String getNOM_PORC_TRIM_4 () {
					return this.NOM_PORC_TRIM_4;
				}

				public Boolean NOM_PORC_TRIM_4IsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer NOM_PORC_TRIM_4Length(){
				    return null;
				}
				public Integer NOM_PORC_TRIM_4Precision(){
				    return null;
				}
				public String NOM_PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String NOM_PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String NOM_PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String NOM_PORC_TRIM_4OriginalDbColumnName(){
				
					return "NOM_PORC_TRIM_4";
				
				}

				
			    public Double PORC_ANUAL;

				public Double getPORC_ANUAL () {
					return this.PORC_ANUAL;
				}

				public Boolean PORC_ANUALIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUALIsKey(){
				    return false;
				}
				public Integer PORC_ANUALLength(){
				    return null;
				}
				public Integer PORC_ANUALPrecision(){
				    return null;
				}
				public String PORC_ANUALDefault(){
				
					return null;
				
				}
				public String PORC_ANUALComment(){
				
				    return "";
				
				}
				public String PORC_ANUALPattern(){
				
					return "";
				
				}
				public String PORC_ANUALOriginalDbColumnName(){
				
					return "PORC_ANUAL";
				
				}

				
			    public String NOM_PORC_ANUAL;

				public String getNOM_PORC_ANUAL () {
					return this.NOM_PORC_ANUAL;
				}

				public Boolean NOM_PORC_ANUALIsNullable(){
				    return false;
				}
				public Boolean NOM_PORC_ANUALIsKey(){
				    return false;
				}
				public Integer NOM_PORC_ANUALLength(){
				    return null;
				}
				public Integer NOM_PORC_ANUALPrecision(){
				    return null;
				}
				public String NOM_PORC_ANUALDefault(){
				
					return null;
				
				}
				public String NOM_PORC_ANUALComment(){
				
				    return "";
				
				}
				public String NOM_PORC_ANUALPattern(){
				
					return "";
				
				}
				public String NOM_PORC_ANUALOriginalDbColumnName(){
				
					return "NOM_PORC_ANUAL";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return 0;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
					this.NOM_PORC_ANUAL = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
					this.NOM_PORC_TRIM_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
					this.NOM_PORC_ANUAL = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_1,dos);
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_2,dos);
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_3,dos);
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_4,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_ANUAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_1,dos);
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_2,dos);
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_3,dos);
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_TRIM_4,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// String
				
						writeString(this.NOM_PORC_ANUAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VIGENCIA="+String.valueOf(VIGENCIA));
		sb.append(",REGIONAL="+REGIONAL);
		sb.append(",FUERZA="+FUERZA);
		sb.append(",ESM="+ESM);
		sb.append(",SUBPROGRAMA="+SUBPROGRAMA);
		sb.append(",ACTIVIDAD="+ACTIVIDAD);
		sb.append(",PORC_ANUAL_ACTIVIDAD="+String.valueOf(PORC_ANUAL_ACTIVIDAD));
		sb.append(",FORMATO="+FORMATO);
		sb.append(",PORC_TRIM_1="+String.valueOf(PORC_TRIM_1));
		sb.append(",NOM_PORC_TRIM_1="+NOM_PORC_TRIM_1);
		sb.append(",PORC_TRIM_2="+String.valueOf(PORC_TRIM_2));
		sb.append(",NOM_PORC_TRIM_2="+NOM_PORC_TRIM_2);
		sb.append(",PORC_TRIM_3="+String.valueOf(PORC_TRIM_3));
		sb.append(",NOM_PORC_TRIM_3="+NOM_PORC_TRIM_3);
		sb.append(",PORC_TRIM_4="+String.valueOf(PORC_TRIM_4));
		sb.append(",NOM_PORC_TRIM_4="+NOM_PORC_TRIM_4);
		sb.append(",PORC_ANUAL="+String.valueOf(PORC_ANUAL));
		sb.append(",NOM_PORC_ANUAL="+NOM_PORC_ANUAL);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public int VIGENCIA;

				public int getVIGENCIA () {
					return this.VIGENCIA;
				}

				public Boolean VIGENCIAIsNullable(){
				    return false;
				}
				public Boolean VIGENCIAIsKey(){
				    return false;
				}
				public Integer VIGENCIALength(){
				    return 1;
				}
				public Integer VIGENCIAPrecision(){
				    return 0;
				}
				public String VIGENCIADefault(){
				
					return null;
				
				}
				public String VIGENCIAComment(){
				
				    return "";
				
				}
				public String VIGENCIAPattern(){
				
					return "";
				
				}
				public String VIGENCIAOriginalDbColumnName(){
				
					return "VIGENCIA";
				
				}

				
			    public String REGIONAL;

				public String getREGIONAL () {
					return this.REGIONAL;
				}

				public Boolean REGIONALIsNullable(){
				    return true;
				}
				public Boolean REGIONALIsKey(){
				    return false;
				}
				public Integer REGIONALLength(){
				    return null;
				}
				public Integer REGIONALPrecision(){
				    return null;
				}
				public String REGIONALDefault(){
				
					return null;
				
				}
				public String REGIONALComment(){
				
				    return "";
				
				}
				public String REGIONALPattern(){
				
					return "";
				
				}
				public String REGIONALOriginalDbColumnName(){
				
					return "REGIONAL";
				
				}

				
			    public String FUERZA;

				public String getFUERZA () {
					return this.FUERZA;
				}

				public Boolean FUERZAIsNullable(){
				    return false;
				}
				public Boolean FUERZAIsKey(){
				    return false;
				}
				public Integer FUERZALength(){
				    return null;
				}
				public Integer FUERZAPrecision(){
				    return null;
				}
				public String FUERZADefault(){
				
					return null;
				
				}
				public String FUERZAComment(){
				
				    return "";
				
				}
				public String FUERZAPattern(){
				
					return "";
				
				}
				public String FUERZAOriginalDbColumnName(){
				
					return "FUERZA";
				
				}

				
			    public String ESM;

				public String getESM () {
					return this.ESM;
				}

				public Boolean ESMIsNullable(){
				    return false;
				}
				public Boolean ESMIsKey(){
				    return false;
				}
				public Integer ESMLength(){
				    return null;
				}
				public Integer ESMPrecision(){
				    return null;
				}
				public String ESMDefault(){
				
					return null;
				
				}
				public String ESMComment(){
				
				    return "";
				
				}
				public String ESMPattern(){
				
					return "";
				
				}
				public String ESMOriginalDbColumnName(){
				
					return "ESM";
				
				}

				
			    public String SUBPROGRAMA;

				public String getSUBPROGRAMA () {
					return this.SUBPROGRAMA;
				}

				public Boolean SUBPROGRAMAIsNullable(){
				    return false;
				}
				public Boolean SUBPROGRAMAIsKey(){
				    return false;
				}
				public Integer SUBPROGRAMALength(){
				    return null;
				}
				public Integer SUBPROGRAMAPrecision(){
				    return null;
				}
				public String SUBPROGRAMADefault(){
				
					return null;
				
				}
				public String SUBPROGRAMAComment(){
				
				    return "";
				
				}
				public String SUBPROGRAMAPattern(){
				
					return "";
				
				}
				public String SUBPROGRAMAOriginalDbColumnName(){
				
					return "SUBPROGRAMA";
				
				}

				
			    public String ACTIVIDAD;

				public String getACTIVIDAD () {
					return this.ACTIVIDAD;
				}

				public Boolean ACTIVIDADIsNullable(){
				    return false;
				}
				public Boolean ACTIVIDADIsKey(){
				    return false;
				}
				public Integer ACTIVIDADLength(){
				    return null;
				}
				public Integer ACTIVIDADPrecision(){
				    return null;
				}
				public String ACTIVIDADDefault(){
				
					return null;
				
				}
				public String ACTIVIDADComment(){
				
				    return "";
				
				}
				public String ACTIVIDADPattern(){
				
					return "";
				
				}
				public String ACTIVIDADOriginalDbColumnName(){
				
					return "ACTIVIDAD";
				
				}

				
			    public Double PORC_ANUAL_ACTIVIDAD;

				public Double getPORC_ANUAL_ACTIVIDAD () {
					return this.PORC_ANUAL_ACTIVIDAD;
				}

				public Boolean PORC_ANUAL_ACTIVIDADIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUAL_ACTIVIDADIsKey(){
				    return false;
				}
				public Integer PORC_ANUAL_ACTIVIDADLength(){
				    return null;
				}
				public Integer PORC_ANUAL_ACTIVIDADPrecision(){
				    return null;
				}
				public String PORC_ANUAL_ACTIVIDADDefault(){
				
					return null;
				
				}
				public String PORC_ANUAL_ACTIVIDADComment(){
				
				    return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADPattern(){
				
					return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADOriginalDbColumnName(){
				
					return "PORC_ANUAL_ACTIVIDAD";
				
				}

				
			    public String FORMATO;

				public String getFORMATO () {
					return this.FORMATO;
				}

				public Boolean FORMATOIsNullable(){
				    return false;
				}
				public Boolean FORMATOIsKey(){
				    return false;
				}
				public Integer FORMATOLength(){
				    return null;
				}
				public Integer FORMATOPrecision(){
				    return null;
				}
				public String FORMATODefault(){
				
					return null;
				
				}
				public String FORMATOComment(){
				
				    return "";
				
				}
				public String FORMATOPattern(){
				
					return "";
				
				}
				public String FORMATOOriginalDbColumnName(){
				
					return "FORMATO";
				
				}

				
			    public Double PORC_TRIM_1;

				public Double getPORC_TRIM_1 () {
					return this.PORC_TRIM_1;
				}

				public Boolean PORC_TRIM_1IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_1Length(){
				    return null;
				}
				public Integer PORC_TRIM_1Precision(){
				    return null;
				}
				public String PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_1OriginalDbColumnName(){
				
					return "PORC_TRIM_1";
				
				}

				
			    public Double PORC_TRIM_2;

				public Double getPORC_TRIM_2 () {
					return this.PORC_TRIM_2;
				}

				public Boolean PORC_TRIM_2IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_2Length(){
				    return null;
				}
				public Integer PORC_TRIM_2Precision(){
				    return null;
				}
				public String PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_2OriginalDbColumnName(){
				
					return "PORC_TRIM_2";
				
				}

				
			    public Double PORC_TRIM_3;

				public Double getPORC_TRIM_3 () {
					return this.PORC_TRIM_3;
				}

				public Boolean PORC_TRIM_3IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_3Length(){
				    return null;
				}
				public Integer PORC_TRIM_3Precision(){
				    return null;
				}
				public String PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_3OriginalDbColumnName(){
				
					return "PORC_TRIM_3";
				
				}

				
			    public Double PORC_TRIM_4;

				public Double getPORC_TRIM_4 () {
					return this.PORC_TRIM_4;
				}

				public Boolean PORC_TRIM_4IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_4Length(){
				    return null;
				}
				public Integer PORC_TRIM_4Precision(){
				    return null;
				}
				public String PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_4OriginalDbColumnName(){
				
					return "PORC_TRIM_4";
				
				}

				
			    public Double PORC_ANUAL;

				public Double getPORC_ANUAL () {
					return this.PORC_ANUAL;
				}

				public Boolean PORC_ANUALIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUALIsKey(){
				    return false;
				}
				public Integer PORC_ANUALLength(){
				    return 0;
				}
				public Integer PORC_ANUALPrecision(){
				    return 0;
				}
				public String PORC_ANUALDefault(){
				
					return "";
				
				}
				public String PORC_ANUALComment(){
				
				    return "";
				
				}
				public String PORC_ANUALPattern(){
				
					return "";
				
				}
				public String PORC_ANUALOriginalDbColumnName(){
				
					return "PORC_ANUAL";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return 0;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public String LOOKUP;

				public String getLOOKUP () {
					return this.LOOKUP;
				}

				public Boolean LOOKUPIsNullable(){
				    return true;
				}
				public Boolean LOOKUPIsKey(){
				    return false;
				}
				public Integer LOOKUPLength(){
				    return 255;
				}
				public Integer LOOKUPPrecision(){
				    return 0;
				}
				public String LOOKUPDefault(){
				
					return null;
				
				}
				public String LOOKUPComment(){
				
				    return null;
				
				}
				public String LOOKUPPattern(){
				
				    return null;
				
				}
				public String LOOKUPOriginalDbColumnName(){
				
					return "LOOKUP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.LOOKUP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.LOOKUP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.LOOKUP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.LOOKUP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VIGENCIA="+String.valueOf(VIGENCIA));
		sb.append(",REGIONAL="+REGIONAL);
		sb.append(",FUERZA="+FUERZA);
		sb.append(",ESM="+ESM);
		sb.append(",SUBPROGRAMA="+SUBPROGRAMA);
		sb.append(",ACTIVIDAD="+ACTIVIDAD);
		sb.append(",PORC_ANUAL_ACTIVIDAD="+String.valueOf(PORC_ANUAL_ACTIVIDAD));
		sb.append(",FORMATO="+FORMATO);
		sb.append(",PORC_TRIM_1="+String.valueOf(PORC_TRIM_1));
		sb.append(",PORC_TRIM_2="+String.valueOf(PORC_TRIM_2));
		sb.append(",PORC_TRIM_3="+String.valueOf(PORC_TRIM_3));
		sb.append(",PORC_TRIM_4="+String.valueOf(PORC_TRIM_4));
		sb.append(",PORC_ANUAL="+String.valueOf(PORC_ANUAL));
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",LOOKUP="+LOOKUP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public int VIGENCIA;

				public int getVIGENCIA () {
					return this.VIGENCIA;
				}

				public Boolean VIGENCIAIsNullable(){
				    return false;
				}
				public Boolean VIGENCIAIsKey(){
				    return false;
				}
				public Integer VIGENCIALength(){
				    return 1;
				}
				public Integer VIGENCIAPrecision(){
				    return 0;
				}
				public String VIGENCIADefault(){
				
					return null;
				
				}
				public String VIGENCIAComment(){
				
				    return "";
				
				}
				public String VIGENCIAPattern(){
				
					return "";
				
				}
				public String VIGENCIAOriginalDbColumnName(){
				
					return "VIGENCIA";
				
				}

				
			    public String REGIONAL;

				public String getREGIONAL () {
					return this.REGIONAL;
				}

				public Boolean REGIONALIsNullable(){
				    return true;
				}
				public Boolean REGIONALIsKey(){
				    return false;
				}
				public Integer REGIONALLength(){
				    return null;
				}
				public Integer REGIONALPrecision(){
				    return null;
				}
				public String REGIONALDefault(){
				
					return null;
				
				}
				public String REGIONALComment(){
				
				    return "";
				
				}
				public String REGIONALPattern(){
				
					return "";
				
				}
				public String REGIONALOriginalDbColumnName(){
				
					return "REGIONAL";
				
				}

				
			    public String FUERZA;

				public String getFUERZA () {
					return this.FUERZA;
				}

				public Boolean FUERZAIsNullable(){
				    return false;
				}
				public Boolean FUERZAIsKey(){
				    return false;
				}
				public Integer FUERZALength(){
				    return null;
				}
				public Integer FUERZAPrecision(){
				    return null;
				}
				public String FUERZADefault(){
				
					return null;
				
				}
				public String FUERZAComment(){
				
				    return "";
				
				}
				public String FUERZAPattern(){
				
					return "";
				
				}
				public String FUERZAOriginalDbColumnName(){
				
					return "FUERZA";
				
				}

				
			    public String ESM;

				public String getESM () {
					return this.ESM;
				}

				public Boolean ESMIsNullable(){
				    return false;
				}
				public Boolean ESMIsKey(){
				    return false;
				}
				public Integer ESMLength(){
				    return null;
				}
				public Integer ESMPrecision(){
				    return null;
				}
				public String ESMDefault(){
				
					return null;
				
				}
				public String ESMComment(){
				
				    return "";
				
				}
				public String ESMPattern(){
				
					return "";
				
				}
				public String ESMOriginalDbColumnName(){
				
					return "ESM";
				
				}

				
			    public String SUBPROGRAMA;

				public String getSUBPROGRAMA () {
					return this.SUBPROGRAMA;
				}

				public Boolean SUBPROGRAMAIsNullable(){
				    return false;
				}
				public Boolean SUBPROGRAMAIsKey(){
				    return false;
				}
				public Integer SUBPROGRAMALength(){
				    return null;
				}
				public Integer SUBPROGRAMAPrecision(){
				    return null;
				}
				public String SUBPROGRAMADefault(){
				
					return null;
				
				}
				public String SUBPROGRAMAComment(){
				
				    return "";
				
				}
				public String SUBPROGRAMAPattern(){
				
					return "";
				
				}
				public String SUBPROGRAMAOriginalDbColumnName(){
				
					return "SUBPROGRAMA";
				
				}

				
			    public String ACTIVIDAD;

				public String getACTIVIDAD () {
					return this.ACTIVIDAD;
				}

				public Boolean ACTIVIDADIsNullable(){
				    return false;
				}
				public Boolean ACTIVIDADIsKey(){
				    return false;
				}
				public Integer ACTIVIDADLength(){
				    return null;
				}
				public Integer ACTIVIDADPrecision(){
				    return null;
				}
				public String ACTIVIDADDefault(){
				
					return null;
				
				}
				public String ACTIVIDADComment(){
				
				    return "";
				
				}
				public String ACTIVIDADPattern(){
				
					return "";
				
				}
				public String ACTIVIDADOriginalDbColumnName(){
				
					return "ACTIVIDAD";
				
				}

				
			    public Double PORC_ANUAL_ACTIVIDAD;

				public Double getPORC_ANUAL_ACTIVIDAD () {
					return this.PORC_ANUAL_ACTIVIDAD;
				}

				public Boolean PORC_ANUAL_ACTIVIDADIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUAL_ACTIVIDADIsKey(){
				    return false;
				}
				public Integer PORC_ANUAL_ACTIVIDADLength(){
				    return null;
				}
				public Integer PORC_ANUAL_ACTIVIDADPrecision(){
				    return null;
				}
				public String PORC_ANUAL_ACTIVIDADDefault(){
				
					return null;
				
				}
				public String PORC_ANUAL_ACTIVIDADComment(){
				
				    return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADPattern(){
				
					return "";
				
				}
				public String PORC_ANUAL_ACTIVIDADOriginalDbColumnName(){
				
					return "PORC_ANUAL_ACTIVIDAD";
				
				}

				
			    public String FORMATO;

				public String getFORMATO () {
					return this.FORMATO;
				}

				public Boolean FORMATOIsNullable(){
				    return false;
				}
				public Boolean FORMATOIsKey(){
				    return false;
				}
				public Integer FORMATOLength(){
				    return null;
				}
				public Integer FORMATOPrecision(){
				    return null;
				}
				public String FORMATODefault(){
				
					return null;
				
				}
				public String FORMATOComment(){
				
				    return "";
				
				}
				public String FORMATOPattern(){
				
					return "";
				
				}
				public String FORMATOOriginalDbColumnName(){
				
					return "FORMATO";
				
				}

				
			    public Double PORC_TRIM_1;

				public Double getPORC_TRIM_1 () {
					return this.PORC_TRIM_1;
				}

				public Boolean PORC_TRIM_1IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_1Length(){
				    return null;
				}
				public Integer PORC_TRIM_1Precision(){
				    return null;
				}
				public String PORC_TRIM_1Default(){
				
					return null;
				
				}
				public String PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_1OriginalDbColumnName(){
				
					return "PORC_TRIM_1";
				
				}

				
			    public Double PORC_TRIM_2;

				public Double getPORC_TRIM_2 () {
					return this.PORC_TRIM_2;
				}

				public Boolean PORC_TRIM_2IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_2Length(){
				    return null;
				}
				public Integer PORC_TRIM_2Precision(){
				    return null;
				}
				public String PORC_TRIM_2Default(){
				
					return null;
				
				}
				public String PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_2OriginalDbColumnName(){
				
					return "PORC_TRIM_2";
				
				}

				
			    public Double PORC_TRIM_3;

				public Double getPORC_TRIM_3 () {
					return this.PORC_TRIM_3;
				}

				public Boolean PORC_TRIM_3IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_3Length(){
				    return null;
				}
				public Integer PORC_TRIM_3Precision(){
				    return null;
				}
				public String PORC_TRIM_3Default(){
				
					return null;
				
				}
				public String PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_3OriginalDbColumnName(){
				
					return "PORC_TRIM_3";
				
				}

				
			    public Double PORC_TRIM_4;

				public Double getPORC_TRIM_4 () {
					return this.PORC_TRIM_4;
				}

				public Boolean PORC_TRIM_4IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_4Length(){
				    return null;
				}
				public Integer PORC_TRIM_4Precision(){
				    return null;
				}
				public String PORC_TRIM_4Default(){
				
					return null;
				
				}
				public String PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_4OriginalDbColumnName(){
				
					return "PORC_TRIM_4";
				
				}

				
			    public Double PORC_ANUAL;

				public Double getPORC_ANUAL () {
					return this.PORC_ANUAL;
				}

				public Boolean PORC_ANUALIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUALIsKey(){
				    return false;
				}
				public Integer PORC_ANUALLength(){
				    return 0;
				}
				public Integer PORC_ANUALPrecision(){
				    return 0;
				}
				public String PORC_ANUALDefault(){
				
					return "";
				
				}
				public String PORC_ANUALComment(){
				
				    return "";
				
				}
				public String PORC_ANUALPattern(){
				
					return "";
				
				}
				public String PORC_ANUALOriginalDbColumnName(){
				
					return "PORC_ANUAL";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return 0;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL_ACTIVIDAD = null;
           				} else {
           			    	this.PORC_ANUAL_ACTIVIDAD = dis.readDouble();
           				}
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// Double
				
						if(this.PORC_ANUAL_ACTIVIDAD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL_ACTIVIDAD);
		            	}
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
					// Double
				
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
					// Double
				
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
					// Double
				
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VIGENCIA="+String.valueOf(VIGENCIA));
		sb.append(",REGIONAL="+REGIONAL);
		sb.append(",FUERZA="+FUERZA);
		sb.append(",ESM="+ESM);
		sb.append(",SUBPROGRAMA="+SUBPROGRAMA);
		sb.append(",ACTIVIDAD="+ACTIVIDAD);
		sb.append(",PORC_ANUAL_ACTIVIDAD="+String.valueOf(PORC_ANUAL_ACTIVIDAD));
		sb.append(",FORMATO="+FORMATO);
		sb.append(",PORC_TRIM_1="+String.valueOf(PORC_TRIM_1));
		sb.append(",PORC_TRIM_2="+String.valueOf(PORC_TRIM_2));
		sb.append(",PORC_TRIM_3="+String.valueOf(PORC_TRIM_3));
		sb.append(",PORC_TRIM_4="+String.valueOf(PORC_TRIM_4));
		sb.append(",PORC_ANUAL="+String.valueOf(PORC_ANUAL));
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 160;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal ACTIVIDAD_ID;

				public BigDecimal getACTIVIDAD_ID () {
					return this.ACTIVIDAD_ID;
				}

				public Boolean ACTIVIDAD_IDIsNullable(){
				    return false;
				}
				public Boolean ACTIVIDAD_IDIsKey(){
				    return false;
				}
				public Integer ACTIVIDAD_IDLength(){
				    return 0;
				}
				public Integer ACTIVIDAD_IDPrecision(){
				    return null;
				}
				public String ACTIVIDAD_IDDefault(){
				
					return "";
				
				}
				public String ACTIVIDAD_IDComment(){
				
				    return "";
				
				}
				public String ACTIVIDAD_IDPattern(){
				
					return "";
				
				}
				public String ACTIVIDAD_IDOriginalDbColumnName(){
				
					return "ACTIVIDAD_ID";
				
				}

				
			    public BigDecimal ESM_ID;

				public BigDecimal getESM_ID () {
					return this.ESM_ID;
				}

				public Boolean ESM_IDIsNullable(){
				    return false;
				}
				public Boolean ESM_IDIsKey(){
				    return false;
				}
				public Integer ESM_IDLength(){
				    return 0;
				}
				public Integer ESM_IDPrecision(){
				    return null;
				}
				public String ESM_IDDefault(){
				
					return "";
				
				}
				public String ESM_IDComment(){
				
				    return "";
				
				}
				public String ESM_IDPattern(){
				
					return "";
				
				}
				public String ESM_IDOriginalDbColumnName(){
				
					return "ESM_ID";
				
				}

				
			    public int VIGENCIA;

				public int getVIGENCIA () {
					return this.VIGENCIA;
				}

				public Boolean VIGENCIAIsNullable(){
				    return false;
				}
				public Boolean VIGENCIAIsKey(){
				    return false;
				}
				public Integer VIGENCIALength(){
				    return 0;
				}
				public Integer VIGENCIAPrecision(){
				    return null;
				}
				public String VIGENCIADefault(){
				
					return "";
				
				}
				public String VIGENCIAComment(){
				
				    return "";
				
				}
				public String VIGENCIAPattern(){
				
					return "";
				
				}
				public String VIGENCIAOriginalDbColumnName(){
				
					return "VIGENCIA";
				
				}

				
			    public String REGIONAL;

				public String getREGIONAL () {
					return this.REGIONAL;
				}

				public Boolean REGIONALIsNullable(){
				    return true;
				}
				public Boolean REGIONALIsKey(){
				    return false;
				}
				public Integer REGIONALLength(){
				    return 50;
				}
				public Integer REGIONALPrecision(){
				    return 0;
				}
				public String REGIONALDefault(){
				
					return null;
				
				}
				public String REGIONALComment(){
				
				    return "";
				
				}
				public String REGIONALPattern(){
				
					return "";
				
				}
				public String REGIONALOriginalDbColumnName(){
				
					return "REGIONAL";
				
				}

				
			    public String FUERZA;

				public String getFUERZA () {
					return this.FUERZA;
				}

				public Boolean FUERZAIsNullable(){
				    return false;
				}
				public Boolean FUERZAIsKey(){
				    return false;
				}
				public Integer FUERZALength(){
				    return 100;
				}
				public Integer FUERZAPrecision(){
				    return 0;
				}
				public String FUERZADefault(){
				
					return null;
				
				}
				public String FUERZAComment(){
				
				    return "";
				
				}
				public String FUERZAPattern(){
				
					return "";
				
				}
				public String FUERZAOriginalDbColumnName(){
				
					return "FUERZA";
				
				}

				
			    public String ESM;

				public String getESM () {
					return this.ESM;
				}

				public Boolean ESMIsNullable(){
				    return false;
				}
				public Boolean ESMIsKey(){
				    return false;
				}
				public Integer ESMLength(){
				    return 2000;
				}
				public Integer ESMPrecision(){
				    return 0;
				}
				public String ESMDefault(){
				
					return null;
				
				}
				public String ESMComment(){
				
				    return "";
				
				}
				public String ESMPattern(){
				
					return "";
				
				}
				public String ESMOriginalDbColumnName(){
				
					return "ESM";
				
				}

				
			    public String SUBPROGRAMA;

				public String getSUBPROGRAMA () {
					return this.SUBPROGRAMA;
				}

				public Boolean SUBPROGRAMAIsNullable(){
				    return false;
				}
				public Boolean SUBPROGRAMAIsKey(){
				    return false;
				}
				public Integer SUBPROGRAMALength(){
				    return 2000;
				}
				public Integer SUBPROGRAMAPrecision(){
				    return 0;
				}
				public String SUBPROGRAMADefault(){
				
					return null;
				
				}
				public String SUBPROGRAMAComment(){
				
				    return "";
				
				}
				public String SUBPROGRAMAPattern(){
				
					return "";
				
				}
				public String SUBPROGRAMAOriginalDbColumnName(){
				
					return "SUBPROGRAMA";
				
				}

				
			    public String ACTIVIDAD;

				public String getACTIVIDAD () {
					return this.ACTIVIDAD;
				}

				public Boolean ACTIVIDADIsNullable(){
				    return false;
				}
				public Boolean ACTIVIDADIsKey(){
				    return false;
				}
				public Integer ACTIVIDADLength(){
				    return 2000;
				}
				public Integer ACTIVIDADPrecision(){
				    return 0;
				}
				public String ACTIVIDADDefault(){
				
					return null;
				
				}
				public String ACTIVIDADComment(){
				
				    return "";
				
				}
				public String ACTIVIDADPattern(){
				
					return "";
				
				}
				public String ACTIVIDADOriginalDbColumnName(){
				
					return "ACTIVIDAD";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return 0;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public String FORMATO;

				public String getFORMATO () {
					return this.FORMATO;
				}

				public Boolean FORMATOIsNullable(){
				    return false;
				}
				public Boolean FORMATOIsKey(){
				    return false;
				}
				public Integer FORMATOLength(){
				    return 2000;
				}
				public Integer FORMATOPrecision(){
				    return 0;
				}
				public String FORMATODefault(){
				
					return null;
				
				}
				public String FORMATOComment(){
				
				    return "";
				
				}
				public String FORMATOPattern(){
				
					return "";
				
				}
				public String FORMATOOriginalDbColumnName(){
				
					return "FORMATO";
				
				}

				
			    public Double PORC_ANUAL;

				public Double getPORC_ANUAL () {
					return this.PORC_ANUAL;
				}

				public Boolean PORC_ANUALIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUALIsKey(){
				    return false;
				}
				public Integer PORC_ANUALLength(){
				    return 0;
				}
				public Integer PORC_ANUALPrecision(){
				    return 0;
				}
				public String PORC_ANUALDefault(){
				
					return "";
				
				}
				public String PORC_ANUALComment(){
				
				    return "";
				
				}
				public String PORC_ANUALPattern(){
				
					return "";
				
				}
				public String PORC_ANUALOriginalDbColumnName(){
				
					return "PORC_ANUAL";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.ACTIVIDAD_ID = (BigDecimal) dis.readObject();
					
						this.ESM_ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.ACTIVIDAD_ID = (BigDecimal) dis.readObject();
					
						this.ESM_ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ACTIVIDAD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESM_ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ACTIVIDAD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESM_ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",ACTIVIDAD_ID="+String.valueOf(ACTIVIDAD_ID));
		sb.append(",ESM_ID="+String.valueOf(ESM_ID));
		sb.append(",VIGENCIA="+String.valueOf(VIGENCIA));
		sb.append(",REGIONAL="+REGIONAL);
		sb.append(",FUERZA="+FUERZA);
		sb.append(",ESM="+ESM);
		sb.append(",SUBPROGRAMA="+SUBPROGRAMA);
		sb.append(",ACTIVIDAD="+ACTIVIDAD);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",FORMATO="+FORMATO);
		sb.append(",PORC_ANUAL="+String.valueOf(PORC_ANUAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_2Struct implements routines.system.IPersistableRow<after_tOracleInput_2Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 160;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal ACTIVIDAD_ID;

				public BigDecimal getACTIVIDAD_ID () {
					return this.ACTIVIDAD_ID;
				}

				public Boolean ACTIVIDAD_IDIsNullable(){
				    return false;
				}
				public Boolean ACTIVIDAD_IDIsKey(){
				    return false;
				}
				public Integer ACTIVIDAD_IDLength(){
				    return 0;
				}
				public Integer ACTIVIDAD_IDPrecision(){
				    return null;
				}
				public String ACTIVIDAD_IDDefault(){
				
					return "";
				
				}
				public String ACTIVIDAD_IDComment(){
				
				    return "";
				
				}
				public String ACTIVIDAD_IDPattern(){
				
					return "";
				
				}
				public String ACTIVIDAD_IDOriginalDbColumnName(){
				
					return "ACTIVIDAD_ID";
				
				}

				
			    public BigDecimal ESM_ID;

				public BigDecimal getESM_ID () {
					return this.ESM_ID;
				}

				public Boolean ESM_IDIsNullable(){
				    return false;
				}
				public Boolean ESM_IDIsKey(){
				    return false;
				}
				public Integer ESM_IDLength(){
				    return 0;
				}
				public Integer ESM_IDPrecision(){
				    return null;
				}
				public String ESM_IDDefault(){
				
					return "";
				
				}
				public String ESM_IDComment(){
				
				    return "";
				
				}
				public String ESM_IDPattern(){
				
					return "";
				
				}
				public String ESM_IDOriginalDbColumnName(){
				
					return "ESM_ID";
				
				}

				
			    public int VIGENCIA;

				public int getVIGENCIA () {
					return this.VIGENCIA;
				}

				public Boolean VIGENCIAIsNullable(){
				    return false;
				}
				public Boolean VIGENCIAIsKey(){
				    return false;
				}
				public Integer VIGENCIALength(){
				    return 0;
				}
				public Integer VIGENCIAPrecision(){
				    return null;
				}
				public String VIGENCIADefault(){
				
					return "";
				
				}
				public String VIGENCIAComment(){
				
				    return "";
				
				}
				public String VIGENCIAPattern(){
				
					return "";
				
				}
				public String VIGENCIAOriginalDbColumnName(){
				
					return "VIGENCIA";
				
				}

				
			    public String REGIONAL;

				public String getREGIONAL () {
					return this.REGIONAL;
				}

				public Boolean REGIONALIsNullable(){
				    return true;
				}
				public Boolean REGIONALIsKey(){
				    return false;
				}
				public Integer REGIONALLength(){
				    return 50;
				}
				public Integer REGIONALPrecision(){
				    return 0;
				}
				public String REGIONALDefault(){
				
					return null;
				
				}
				public String REGIONALComment(){
				
				    return "";
				
				}
				public String REGIONALPattern(){
				
					return "";
				
				}
				public String REGIONALOriginalDbColumnName(){
				
					return "REGIONAL";
				
				}

				
			    public String FUERZA;

				public String getFUERZA () {
					return this.FUERZA;
				}

				public Boolean FUERZAIsNullable(){
				    return false;
				}
				public Boolean FUERZAIsKey(){
				    return false;
				}
				public Integer FUERZALength(){
				    return 100;
				}
				public Integer FUERZAPrecision(){
				    return 0;
				}
				public String FUERZADefault(){
				
					return null;
				
				}
				public String FUERZAComment(){
				
				    return "";
				
				}
				public String FUERZAPattern(){
				
					return "";
				
				}
				public String FUERZAOriginalDbColumnName(){
				
					return "FUERZA";
				
				}

				
			    public String ESM;

				public String getESM () {
					return this.ESM;
				}

				public Boolean ESMIsNullable(){
				    return false;
				}
				public Boolean ESMIsKey(){
				    return false;
				}
				public Integer ESMLength(){
				    return 2000;
				}
				public Integer ESMPrecision(){
				    return 0;
				}
				public String ESMDefault(){
				
					return null;
				
				}
				public String ESMComment(){
				
				    return "";
				
				}
				public String ESMPattern(){
				
					return "";
				
				}
				public String ESMOriginalDbColumnName(){
				
					return "ESM";
				
				}

				
			    public String SUBPROGRAMA;

				public String getSUBPROGRAMA () {
					return this.SUBPROGRAMA;
				}

				public Boolean SUBPROGRAMAIsNullable(){
				    return false;
				}
				public Boolean SUBPROGRAMAIsKey(){
				    return false;
				}
				public Integer SUBPROGRAMALength(){
				    return 2000;
				}
				public Integer SUBPROGRAMAPrecision(){
				    return 0;
				}
				public String SUBPROGRAMADefault(){
				
					return null;
				
				}
				public String SUBPROGRAMAComment(){
				
				    return "";
				
				}
				public String SUBPROGRAMAPattern(){
				
					return "";
				
				}
				public String SUBPROGRAMAOriginalDbColumnName(){
				
					return "SUBPROGRAMA";
				
				}

				
			    public String ACTIVIDAD;

				public String getACTIVIDAD () {
					return this.ACTIVIDAD;
				}

				public Boolean ACTIVIDADIsNullable(){
				    return false;
				}
				public Boolean ACTIVIDADIsKey(){
				    return false;
				}
				public Integer ACTIVIDADLength(){
				    return 2000;
				}
				public Integer ACTIVIDADPrecision(){
				    return 0;
				}
				public String ACTIVIDADDefault(){
				
					return null;
				
				}
				public String ACTIVIDADComment(){
				
				    return "";
				
				}
				public String ACTIVIDADPattern(){
				
					return "";
				
				}
				public String ACTIVIDADOriginalDbColumnName(){
				
					return "ACTIVIDAD";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return true;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return 0;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public String FORMATO;

				public String getFORMATO () {
					return this.FORMATO;
				}

				public Boolean FORMATOIsNullable(){
				    return false;
				}
				public Boolean FORMATOIsKey(){
				    return false;
				}
				public Integer FORMATOLength(){
				    return 2000;
				}
				public Integer FORMATOPrecision(){
				    return 0;
				}
				public String FORMATODefault(){
				
					return null;
				
				}
				public String FORMATOComment(){
				
				    return "";
				
				}
				public String FORMATOPattern(){
				
					return "";
				
				}
				public String FORMATOOriginalDbColumnName(){
				
					return "FORMATO";
				
				}

				
			    public Double PORC_ANUAL;

				public Double getPORC_ANUAL () {
					return this.PORC_ANUAL;
				}

				public Boolean PORC_ANUALIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUALIsKey(){
				    return false;
				}
				public Integer PORC_ANUALLength(){
				    return 0;
				}
				public Integer PORC_ANUALPrecision(){
				    return 0;
				}
				public String PORC_ANUALDefault(){
				
					return "";
				
				}
				public String PORC_ANUALComment(){
				
				    return "";
				
				}
				public String PORC_ANUALPattern(){
				
					return "";
				
				}
				public String PORC_ANUALOriginalDbColumnName(){
				
					return "PORC_ANUAL";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.ACTIVIDAD_ID = (BigDecimal) dis.readObject();
					
						this.ESM_ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.ACTIVIDAD_ID = (BigDecimal) dis.readObject();
					
						this.ESM_ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
					this.REGIONAL = readString(dis);
					
					this.FUERZA = readString(dis);
					
					this.ESM = readString(dis);
					
					this.SUBPROGRAMA = readString(dis);
					
					this.ACTIVIDAD = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.FORMATO = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ACTIVIDAD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESM_ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ACTIVIDAD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESM_ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
					// String
				
						writeString(this.REGIONAL,dos);
					
					// String
				
						writeString(this.FUERZA,dos);
					
					// String
				
						writeString(this.ESM,dos);
					
					// String
				
						writeString(this.SUBPROGRAMA,dos);
					
					// String
				
						writeString(this.ACTIVIDAD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.FORMATO,dos);
					
					// Double
				
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",ACTIVIDAD_ID="+String.valueOf(ACTIVIDAD_ID));
		sb.append(",ESM_ID="+String.valueOf(ESM_ID));
		sb.append(",VIGENCIA="+String.valueOf(VIGENCIA));
		sb.append(",REGIONAL="+REGIONAL);
		sb.append(",FUERZA="+FUERZA);
		sb.append(",ESM="+ESM);
		sb.append(",SUBPROGRAMA="+SUBPROGRAMA);
		sb.append(",ACTIVIDAD="+ACTIVIDAD);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",FORMATO="+FORMATO);
		sb.append(",PORC_ANUAL="+String.valueOf(PORC_ANUAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_1Process(globalMap);
		tOracleInput_3Process(globalMap);
		tOracleInput_5Process(globalMap);
		tOracleInput_6Process(globalMap);
		tOracleInput_7Process(globalMap);
		tOracleInput_8Process(globalMap);
		tOracleInput_4Process(globalMap);

		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();
row8Struct row8 = new row8Struct();
out2Struct out2 = new out2Struct();
row10Struct row10 = new row10Struct();
out3Struct out3 = new out3Struct();
row12Struct row12 = new row12Struct();
out4Struct out4 = new out4Struct();
row14Struct row14 = new row14Struct();
out5Struct out5 = new out5Struct();
row6Struct row6 = new row6Struct();
out6Struct out6 = new out6Struct();
row16Struct row16 = new row16Struct();
copyOfout6Struct copyOfout6 = new copyOfout6Struct();
row15Struct row15 = new row15Struct();

















	
	/**
	 * [tSortRow_1_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortOut", false);
		start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout6");
					}
				
		int tos_count_tSortRow_1_SortOut = 0;
		


class ComparablecopyOfout6Struct extends copyOfout6Struct implements Comparable<ComparablecopyOfout6Struct> {
	
	public int compareTo(ComparablecopyOfout6Struct other) {

		String thisSVIGENCIA = String.valueOf(this.VIGENCIA);
		String otherSVIGENCIA = String.valueOf(other.VIGENCIA);
		if(!thisSVIGENCIA.equals(otherSVIGENCIA)){
			return thisSVIGENCIA.compareTo(otherSVIGENCIA);
							
		}
		if(this.REGIONAL == null && other.REGIONAL != null){
			return -1;
						
		}else if(this.REGIONAL != null && other.REGIONAL == null){
			return 1;
						
		}else if(this.REGIONAL != null && other.REGIONAL != null){
			if(!this.REGIONAL.equals(other.REGIONAL)){
				return this.REGIONAL.compareTo(other.REGIONAL);
			}
		}
		if(this.FUERZA == null && other.FUERZA != null){
			return -1;
						
		}else if(this.FUERZA != null && other.FUERZA == null){
			return 1;
						
		}else if(this.FUERZA != null && other.FUERZA != null){
			if(!this.FUERZA.equals(other.FUERZA)){
				return this.FUERZA.compareTo(other.FUERZA);
			}
		}
		if(this.ESM == null && other.ESM != null){
			return -1;
						
		}else if(this.ESM != null && other.ESM == null){
			return 1;
						
		}else if(this.ESM != null && other.ESM != null){
			if(!this.ESM.equals(other.ESM)){
				return this.ESM.compareTo(other.ESM);
			}
		}
		if(this.SUBPROGRAMA == null && other.SUBPROGRAMA != null){
			return -1;
						
		}else if(this.SUBPROGRAMA != null && other.SUBPROGRAMA == null){
			return 1;
						
		}else if(this.SUBPROGRAMA != null && other.SUBPROGRAMA != null){
			if(!this.SUBPROGRAMA.equals(other.SUBPROGRAMA)){
				return this.SUBPROGRAMA.compareTo(other.SUBPROGRAMA);
			}
		}
		if(this.ACTIVIDAD == null && other.ACTIVIDAD != null){
			return -1;
						
		}else if(this.ACTIVIDAD != null && other.ACTIVIDAD == null){
			return 1;
						
		}else if(this.ACTIVIDAD != null && other.ACTIVIDAD != null){
			if(!this.ACTIVIDAD.equals(other.ACTIVIDAD)){
				return this.ACTIVIDAD.compareTo(other.ACTIVIDAD);
			}
		}
		if(this.FORMATO == null && other.FORMATO != null){
			return -1;
						
		}else if(this.FORMATO != null && other.FORMATO == null){
			return 1;
						
		}else if(this.FORMATO != null && other.FORMATO != null){
			if(!this.FORMATO.equals(other.FORMATO)){
				return this.FORMATO.compareTo(other.FORMATO);
			}
		}
		return 0;
	}
}

java.util.List<ComparablecopyOfout6Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<ComparablecopyOfout6Struct>();


 



/**
 * [tSortRow_1_SortOut begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout6Struct copyOfout6_tmp = new copyOfout6Struct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tIntervalMatch_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tIntervalMatch_6", false);
		start_Hash.put("tIntervalMatch_6", System.currentTimeMillis());
		
	
	currentComponent="tIntervalMatch_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out6");
					}
				
		int tos_count_tIntervalMatch_6 = 0;
		
 

        int nb_line_tIntervalMatch_6 = 0; 
        final java.util.List<row17Struct> list_tIntervalMatch_6 = new java.util.ArrayList(((java.util.Map<row17Struct, row17Struct>) globalMap.get("tHash_row17")).keySet());
        java.util.Collections.sort((java.util.List<row17Struct>) list_tIntervalMatch_6, new java.util.Comparator<row17Struct>(){

            public int compare(row17Struct o1, row17Struct o2) {
                    Double o1_min = o1.VMINIMO;
                    Double o1_max = o1.VMAXIMO;
                    Double o2_min = o2.VMINIMO;
                    Double o2_max = o2.VMAXIMO;
                
                        if(o1_min == null && o2_min != null) {
                            return -1;
                        } else if(o1_min != null && o2_min == null) {
                            return 1;
                        } else if(o1_min != null && o2_min != null && o1_min != o2_min) {
                            if(o1_min < o2_min) {
                                return -1;
                            } else {
                                return 1;
                            }
                        } else {
                            if(o1_max == null && o2_max != null) {
                                return -1;
                            } else if(o1_max != null && o2_max == null) {
                                return 1;
                            } else if(o1_max != null && o2_max != null && o1_max != o2_max) {
                                if(o1_max < o2_max) {
                                    return -1;
                                } else {
                                    return 1;
                                }
                            } else {
                                return 0;
                            }
                        }         	
            }
	
        });

        final row17Struct[] array_tIntervalMatch_6 = (row17Struct[])list_tIntervalMatch_6.toArray(new row17Struct[list_tIntervalMatch_6.size()]);

        class Util_tIntervalMatch_6 {
        
            public String getLookup(out6Struct row_Main) {

                int lowerBound = 0;
                int upperBound = array_tIntervalMatch_6.length - 1;               
                while(true) {
                    int currentIndex = (lowerBound + upperBound)/2;
                        Double tmpMain = row_Main.PORC_ANUAL_ACTIVIDAD;
                        Double tmpMin = array_tIntervalMatch_6[currentIndex].VMINIMO;
                        Double tmpMax = array_tIntervalMatch_6[currentIndex].VMAXIMO;
                            if(tmpMain == null) {
                                return null;
                            }                            
                            if((tmpMin == null && tmpMax != null && tmpMain <= tmpMax) || 
                                    (tmpMin != null && tmpMax == null && tmpMain >= tmpMin) || 
                                    (tmpMin != null && tmpMax != null && tmpMain >= tmpMin && tmpMain <= tmpMax)) {
                        return array_tIntervalMatch_6[currentIndex].PARAMETRIZACION;
                    } else if (lowerBound > upperBound) {
                        return null;
                    } else {
                                if(tmpMin != null && tmpMain < tmpMin) {
                                    upperBound = currentIndex - 1;
                                } else if(tmpMin != null && tmpMain > tmpMin) {
                                    lowerBound = currentIndex + 1;
                                } else {
                                    upperBound = currentIndex - 1;
                                }
                    }
                }
            }
        }
        
        Util_tIntervalMatch_6 util_tIntervalMatch_6 = new Util_tIntervalMatch_6();


 



/**
 * [tIntervalMatch_6 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
out6Struct out6_tmp = new out6Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tIntervalMatch_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tIntervalMatch_5", false);
		start_Hash.put("tIntervalMatch_5", System.currentTimeMillis());
		
	
	currentComponent="tIntervalMatch_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out5");
					}
				
		int tos_count_tIntervalMatch_5 = 0;
		
 

        int nb_line_tIntervalMatch_5 = 0; 
        final java.util.List<row13Struct> list_tIntervalMatch_5 = new java.util.ArrayList(((java.util.Map<row13Struct, row13Struct>) globalMap.get("tHash_row13")).keySet());
        java.util.Collections.sort((java.util.List<row13Struct>) list_tIntervalMatch_5, new java.util.Comparator<row13Struct>(){

            public int compare(row13Struct o1, row13Struct o2) {
                    Double o1_min = o1.VMINIMO;
                    Double o1_max = o1.VMAXIMO;
                    Double o2_min = o2.VMINIMO;
                    Double o2_max = o2.VMAXIMO;
                
                        if(o1_min == null && o2_min != null) {
                            return -1;
                        } else if(o1_min != null && o2_min == null) {
                            return 1;
                        } else if(o1_min != null && o2_min != null && o1_min != o2_min) {
                            if(o1_min < o2_min) {
                                return -1;
                            } else {
                                return 1;
                            }
                        } else {
                            if(o1_max == null && o2_max != null) {
                                return -1;
                            } else if(o1_max != null && o2_max == null) {
                                return 1;
                            } else if(o1_max != null && o2_max != null && o1_max != o2_max) {
                                if(o1_max < o2_max) {
                                    return -1;
                                } else {
                                    return 1;
                                }
                            } else {
                                return 0;
                            }
                        }         	
            }
	
        });

        final row13Struct[] array_tIntervalMatch_5 = (row13Struct[])list_tIntervalMatch_5.toArray(new row13Struct[list_tIntervalMatch_5.size()]);

        class Util_tIntervalMatch_5 {
        
            public String getLookup(out5Struct row_Main) {

                int lowerBound = 0;
                int upperBound = array_tIntervalMatch_5.length - 1;               
                while(true) {
                    int currentIndex = (lowerBound + upperBound)/2;
                        Double tmpMain = row_Main.PORC_ANUAL;
                        Double tmpMin = array_tIntervalMatch_5[currentIndex].VMINIMO;
                        Double tmpMax = array_tIntervalMatch_5[currentIndex].VMAXIMO;
                            if(tmpMain == null) {
                                return null;
                            }                            
                            if((tmpMin == null && tmpMax != null && tmpMain <= tmpMax) || 
                                    (tmpMin != null && tmpMax == null && tmpMain >= tmpMin) || 
                                    (tmpMin != null && tmpMax != null && tmpMain >= tmpMin && tmpMain <= tmpMax)) {
                        return array_tIntervalMatch_5[currentIndex].PARAMETRIZACION;
                    } else if (lowerBound > upperBound) {
                        return null;
                    } else {
                                if(tmpMin != null && tmpMain < tmpMin) {
                                    upperBound = currentIndex - 1;
                                } else if(tmpMin != null && tmpMain > tmpMin) {
                                    lowerBound = currentIndex + 1;
                                } else {
                                    upperBound = currentIndex - 1;
                                }
                    }
                }
            }
        }
        
        Util_tIntervalMatch_5 util_tIntervalMatch_5 = new Util_tIntervalMatch_5();


 



/**
 * [tIntervalMatch_5 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
out5Struct out5_tmp = new out5Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tIntervalMatch_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tIntervalMatch_4", false);
		start_Hash.put("tIntervalMatch_4", System.currentTimeMillis());
		
	
	currentComponent="tIntervalMatch_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out4");
					}
				
		int tos_count_tIntervalMatch_4 = 0;
		
 

        int nb_line_tIntervalMatch_4 = 0; 
        final java.util.List<row11Struct> list_tIntervalMatch_4 = new java.util.ArrayList(((java.util.Map<row11Struct, row11Struct>) globalMap.get("tHash_row11")).keySet());
        java.util.Collections.sort((java.util.List<row11Struct>) list_tIntervalMatch_4, new java.util.Comparator<row11Struct>(){

            public int compare(row11Struct o1, row11Struct o2) {
                    Double o1_min = o1.VMINIMO;
                    Double o1_max = o1.VMAXIMO;
                    Double o2_min = o2.VMINIMO;
                    Double o2_max = o2.VMAXIMO;
                
                        if(o1_min == null && o2_min != null) {
                            return -1;
                        } else if(o1_min != null && o2_min == null) {
                            return 1;
                        } else if(o1_min != null && o2_min != null && o1_min != o2_min) {
                            if(o1_min < o2_min) {
                                return -1;
                            } else {
                                return 1;
                            }
                        } else {
                            if(o1_max == null && o2_max != null) {
                                return -1;
                            } else if(o1_max != null && o2_max == null) {
                                return 1;
                            } else if(o1_max != null && o2_max != null && o1_max != o2_max) {
                                if(o1_max < o2_max) {
                                    return -1;
                                } else {
                                    return 1;
                                }
                            } else {
                                return 0;
                            }
                        }         	
            }
	
        });

        final row11Struct[] array_tIntervalMatch_4 = (row11Struct[])list_tIntervalMatch_4.toArray(new row11Struct[list_tIntervalMatch_4.size()]);

        class Util_tIntervalMatch_4 {
        
            public String getLookup(out4Struct row_Main) {

                int lowerBound = 0;
                int upperBound = array_tIntervalMatch_4.length - 1;               
                while(true) {
                    int currentIndex = (lowerBound + upperBound)/2;
                        Double tmpMain = row_Main.PORC_TRIM_4;
                        Double tmpMin = array_tIntervalMatch_4[currentIndex].VMINIMO;
                        Double tmpMax = array_tIntervalMatch_4[currentIndex].VMAXIMO;
                            if(tmpMain == null) {
                                return null;
                            }                            
                            if((tmpMin == null && tmpMax != null && tmpMain <= tmpMax) || 
                                    (tmpMin != null && tmpMax == null && tmpMain >= tmpMin) || 
                                    (tmpMin != null && tmpMax != null && tmpMain >= tmpMin && tmpMain <= tmpMax)) {
                        return array_tIntervalMatch_4[currentIndex].PARAMETRIZACION;
                    } else if (lowerBound > upperBound) {
                        return null;
                    } else {
                                if(tmpMin != null && tmpMain < tmpMin) {
                                    upperBound = currentIndex - 1;
                                } else if(tmpMin != null && tmpMain > tmpMin) {
                                    lowerBound = currentIndex + 1;
                                } else {
                                    upperBound = currentIndex - 1;
                                }
                    }
                }
            }
        }
        
        Util_tIntervalMatch_4 util_tIntervalMatch_4 = new Util_tIntervalMatch_4();


 



/**
 * [tIntervalMatch_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out4Struct out4_tmp = new out4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tIntervalMatch_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tIntervalMatch_3", false);
		start_Hash.put("tIntervalMatch_3", System.currentTimeMillis());
		
	
	currentComponent="tIntervalMatch_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out3");
					}
				
		int tos_count_tIntervalMatch_3 = 0;
		
 

        int nb_line_tIntervalMatch_3 = 0; 
        final java.util.List<row9Struct> list_tIntervalMatch_3 = new java.util.ArrayList(((java.util.Map<row9Struct, row9Struct>) globalMap.get("tHash_row9")).keySet());
        java.util.Collections.sort((java.util.List<row9Struct>) list_tIntervalMatch_3, new java.util.Comparator<row9Struct>(){

            public int compare(row9Struct o1, row9Struct o2) {
                    Double o1_min = o1.VMINIMO;
                    Double o1_max = o1.VMAXIMO;
                    Double o2_min = o2.VMINIMO;
                    Double o2_max = o2.VMAXIMO;
                
                        if(o1_min == null && o2_min != null) {
                            return -1;
                        } else if(o1_min != null && o2_min == null) {
                            return 1;
                        } else if(o1_min != null && o2_min != null && o1_min != o2_min) {
                            if(o1_min < o2_min) {
                                return -1;
                            } else {
                                return 1;
                            }
                        } else {
                            if(o1_max == null && o2_max != null) {
                                return -1;
                            } else if(o1_max != null && o2_max == null) {
                                return 1;
                            } else if(o1_max != null && o2_max != null && o1_max != o2_max) {
                                if(o1_max < o2_max) {
                                    return -1;
                                } else {
                                    return 1;
                                }
                            } else {
                                return 0;
                            }
                        }         	
            }
	
        });

        final row9Struct[] array_tIntervalMatch_3 = (row9Struct[])list_tIntervalMatch_3.toArray(new row9Struct[list_tIntervalMatch_3.size()]);

        class Util_tIntervalMatch_3 {
        
            public String getLookup(out3Struct row_Main) {

                int lowerBound = 0;
                int upperBound = array_tIntervalMatch_3.length - 1;               
                while(true) {
                    int currentIndex = (lowerBound + upperBound)/2;
                        Double tmpMain = row_Main.PORC_TRIM_3;
                        Double tmpMin = array_tIntervalMatch_3[currentIndex].VMINIMO;
                        Double tmpMax = array_tIntervalMatch_3[currentIndex].VMAXIMO;
                            if(tmpMain == null) {
                                return null;
                            }                            
                            if((tmpMin == null && tmpMax != null && tmpMain <= tmpMax) || 
                                    (tmpMin != null && tmpMax == null && tmpMain >= tmpMin) || 
                                    (tmpMin != null && tmpMax != null && tmpMain >= tmpMin && tmpMain <= tmpMax)) {
                        return array_tIntervalMatch_3[currentIndex].PARAMETRIZACION;
                    } else if (lowerBound > upperBound) {
                        return null;
                    } else {
                                if(tmpMin != null && tmpMain < tmpMin) {
                                    upperBound = currentIndex - 1;
                                } else if(tmpMin != null && tmpMain > tmpMin) {
                                    lowerBound = currentIndex + 1;
                                } else {
                                    upperBound = currentIndex - 1;
                                }
                    }
                }
            }
        }
        
        Util_tIntervalMatch_3 util_tIntervalMatch_3 = new Util_tIntervalMatch_3();


 



/**
 * [tIntervalMatch_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tIntervalMatch_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tIntervalMatch_2", false);
		start_Hash.put("tIntervalMatch_2", System.currentTimeMillis());
		
	
	currentComponent="tIntervalMatch_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tIntervalMatch_2 = 0;
		
 

        int nb_line_tIntervalMatch_2 = 0; 
        final java.util.List<row5Struct> list_tIntervalMatch_2 = new java.util.ArrayList(((java.util.Map<row5Struct, row5Struct>) globalMap.get("tHash_row5")).keySet());
        java.util.Collections.sort((java.util.List<row5Struct>) list_tIntervalMatch_2, new java.util.Comparator<row5Struct>(){

            public int compare(row5Struct o1, row5Struct o2) {
                    Double o1_min = o1.VMINIMO;
                    Double o1_max = o1.VMAXIMO;
                    Double o2_min = o2.VMINIMO;
                    Double o2_max = o2.VMAXIMO;
                
                        if(o1_min == null && o2_min != null) {
                            return -1;
                        } else if(o1_min != null && o2_min == null) {
                            return 1;
                        } else if(o1_min != null && o2_min != null && o1_min != o2_min) {
                            if(o1_min < o2_min) {
                                return -1;
                            } else {
                                return 1;
                            }
                        } else {
                            if(o1_max == null && o2_max != null) {
                                return -1;
                            } else if(o1_max != null && o2_max == null) {
                                return 1;
                            } else if(o1_max != null && o2_max != null && o1_max != o2_max) {
                                if(o1_max < o2_max) {
                                    return -1;
                                } else {
                                    return 1;
                                }
                            } else {
                                return 0;
                            }
                        }         	
            }
	
        });

        final row5Struct[] array_tIntervalMatch_2 = (row5Struct[])list_tIntervalMatch_2.toArray(new row5Struct[list_tIntervalMatch_2.size()]);

        class Util_tIntervalMatch_2 {
        
            public String getLookup(out2Struct row_Main) {

                int lowerBound = 0;
                int upperBound = array_tIntervalMatch_2.length - 1;               
                while(true) {
                    int currentIndex = (lowerBound + upperBound)/2;
                        Double tmpMain = row_Main.PORC_TRIM_2;
                        Double tmpMin = array_tIntervalMatch_2[currentIndex].VMINIMO;
                        Double tmpMax = array_tIntervalMatch_2[currentIndex].VMAXIMO;
                            if(tmpMain == null) {
                                return null;
                            }                            
                            if((tmpMin == null && tmpMax != null && tmpMain <= tmpMax) || 
                                    (tmpMin != null && tmpMax == null && tmpMain >= tmpMin) || 
                                    (tmpMin != null && tmpMax != null && tmpMain >= tmpMin && tmpMain <= tmpMax)) {
                        return array_tIntervalMatch_2[currentIndex].PARAMETRIZACION;
                    } else if (lowerBound > upperBound) {
                        return null;
                    } else {
                                if(tmpMin != null && tmpMain < tmpMin) {
                                    upperBound = currentIndex - 1;
                                } else if(tmpMin != null && tmpMain > tmpMin) {
                                    lowerBound = currentIndex + 1;
                                } else {
                                    upperBound = currentIndex - 1;
                                }
                    }
                }
            }
        }
        
        Util_tIntervalMatch_2 util_tIntervalMatch_2 = new Util_tIntervalMatch_2();


 



/**
 * [tIntervalMatch_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tIntervalMatch_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tIntervalMatch_1", false);
		start_Hash.put("tIntervalMatch_1", System.currentTimeMillis());
		
	
	currentComponent="tIntervalMatch_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tIntervalMatch_1 = 0;
		
 

        int nb_line_tIntervalMatch_1 = 0; 
        final java.util.List<row4Struct> list_tIntervalMatch_1 = new java.util.ArrayList(((java.util.Map<row4Struct, row4Struct>) globalMap.get("tHash_row4")).keySet());
        java.util.Collections.sort((java.util.List<row4Struct>) list_tIntervalMatch_1, new java.util.Comparator<row4Struct>(){

            public int compare(row4Struct o1, row4Struct o2) {
                    Double o1_min = o1.VMINIMO;
                    Double o1_max = o1.VMAXIMO;
                    Double o2_min = o2.VMINIMO;
                    Double o2_max = o2.VMAXIMO;
                
                        if(o1_min == null && o2_min != null) {
                            return -1;
                        } else if(o1_min != null && o2_min == null) {
                            return 1;
                        } else if(o1_min != null && o2_min != null && o1_min != o2_min) {
                            if(o1_min < o2_min) {
                                return -1;
                            } else {
                                return 1;
                            }
                        } else {
                            if(o1_max == null && o2_max != null) {
                                return -1;
                            } else if(o1_max != null && o2_max == null) {
                                return 1;
                            } else if(o1_max != null && o2_max != null && o1_max != o2_max) {
                                if(o1_max < o2_max) {
                                    return -1;
                                } else {
                                    return 1;
                                }
                            } else {
                                return 0;
                            }
                        }         	
            }
	
        });

        final row4Struct[] array_tIntervalMatch_1 = (row4Struct[])list_tIntervalMatch_1.toArray(new row4Struct[list_tIntervalMatch_1.size()]);

        class Util_tIntervalMatch_1 {
        
            public String getLookup(out1Struct row_Main) {

                int lowerBound = 0;
                int upperBound = array_tIntervalMatch_1.length - 1;               
                while(true) {
                    int currentIndex = (lowerBound + upperBound)/2;
                        Double tmpMain = row_Main.PORC_TRIM_1;
                        Double tmpMin = array_tIntervalMatch_1[currentIndex].VMINIMO;
                        Double tmpMax = array_tIntervalMatch_1[currentIndex].VMAXIMO;
                            if(tmpMain == null) {
                                return null;
                            }                            
                            if((tmpMin == null && tmpMax != null && tmpMain <= tmpMax) || 
                                    (tmpMin != null && tmpMax == null && tmpMain >= tmpMin) || 
                                    (tmpMin != null && tmpMax != null && tmpMain >= tmpMin && tmpMain <= tmpMax)) {
                        return array_tIntervalMatch_1[currentIndex].PARAMETRIZACION;
                    } else if (lowerBound > upperBound) {
                        return null;
                    } else {
                                if(tmpMin != null && tmpMain < tmpMin) {
                                    upperBound = currentIndex - 1;
                                } else if(tmpMin != null && tmpMain > tmpMin) {
                                    lowerBound = currentIndex + 1;
                                } else {
                                    upperBound = currentIndex - 1;
                                }
                    }
                }
            }
        }
        
        Util_tIntervalMatch_1 util_tIntervalMatch_1 = new Util_tIntervalMatch_1();


 



/**
 * [tIntervalMatch_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				conn_tOracleInput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_2 = false;
				boolean isConnectionWrapped_tOracleInput_2 = !(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_2 = null;
                if (isConnectionWrapped_tOracleInput_2) {
					unwrappedOraConn_tOracleInput_2 = conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_2 != null) {
                        isTimeZoneNull_tOracleInput_2 = (unwrappedOraConn_tOracleInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_2 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_2) {
					java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_2.next()) {
						sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_2 && unwrappedOraConn_tOracleInput_2 != null) {
                        unwrappedOraConn_tOracleInput_2.setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement();

		    String dbquery_tOracleInput_2 = "SELECT \nDISTINCT \n  (AA.ID || GU.ID || AIF.VIGENCIA || AFO.ID) AS ID\n  ,AA.ID AS ACTIVIDAD_ID\n  ,GU.ID AS ESM_ID\n "
+" ,AIF.VIGENCIA \n  ,GD.REGIONAL AS REGIONAL \n  ,GFU.SIGLA   AS FUERZA \n  ,GU.NOMBRE   AS ESM \n  ,ASP.NOMBRE  AS SUBPR"
+"OGRAMA \n  ,AA.NOMBRE   AS ACTIVIDAD \n  ,DECODE (ADA.ESTADO, 'Inactiva', 2, 1) AS ESTREGISTRO_ID\n  ,AFO.NOMBRE AS FORM"
+"ATO\n  ,CASE\n    WHEN (SUM(AIF.CANTT1)+SUM(AIF.CANTT2)+SUM(AIF.CANTT3)+SUM(AIF.CANTT4)) IS NULL THEN NULL\n    WHEN (SU"
+"M(AIF.CANTT1)+SUM(AIF.CANTT2)+SUM(AIF.CANTT3)+SUM(AIF.CANTT4)) = 0 THEN NULL\n  ELSE \n    ROUND((((SUM(AIF.EJECUTADAT1)"
+"+SUM(AIF.EJECUTADAT2)+SUM(AIF.EJECUTADAT3)+SUM(AIF.EJECUTADAT4))*100)\n    /(SUM(AIF.CANTT1)+SUM(AIF.CANTT2)+SUM(AIF.CAN"
+"TT3)+SUM(AIF.CANTT4))),1)\n  END AS PORC_ANUAL \nFROM AMB_INDICADORFORMATOS AIF\nINNER JOIN AMB_DACTIVIDADES ADA ON ADA."
+"ID = AIF.DACTIVIDADES_ID AND ADA.ESTREGISTRO_ID = 1\nINNER JOIN AMB_FORMATOS AFO ON AFO.ID = ADA.FORMATOS_ID AND AFO.EST"
+"REGISTRO_ID = 1\nINNER JOIN AMB_ACTIVIDADES AA ON AA.ID = ADA.ACTIVIDADES_ID AND AA.ESTREGISTRO_ID = 1\nINNER JOIN AMB_S"
+"UBPROGRAMAS ASP ON AA.SUBPROGRAMAS_ID  = ASP.ID AND ASP.ESTREGISTRO_ID = 1\nINNER JOIN AMB_SUBPROGRAMAFORMATOS ASF ON AS"
+"F.FORMATOS_ID = AFO.ID AND ASF.SUBPROGRAMAS_ID = ASP.ID AND ASF.ESTREGISTRO_ID  = 1\nINNER JOIN GEN_UORG GU ON GU.ID = A"
+"DA.UORG_ID AND GU.ESTREGISTRO_ID = 1\nINNER JOIN GEN_FUERZAS GFU ON GFU.ID = GU.FUERZA_ID AND GFU.ESTREGISTRO_ID = 1\nIN"
+"NER JOIN GEN_DIVIPOLA GD ON GD.ID = GU.DIVIPOLA_ID AND GD.ESTREGISTRO_ID = 1\n"+context.INNER_HDAC+"\nWHERE \n  "+context.CONDITION+" \n  AIF.ESTREGISTRO_ID = 1\n  AND AIF.VIGENCIA = "+context.Anio+"\nGROUP BY AIF.VIGENCIA, GD.REGIONAL, GFU.SIGLA, GU.NOMBRE, ASP.NOMBRE, DECODE (ADA.ESTADO, 'Inactiva', 2, 1), AFO.NOMB"
+"RE, AA.NOMBRE,\nAA.ID, GU.ID, (AA.ID || GU.ID || AIF.VIGENCIA || AFO.ID)";
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row1.ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(1) != null) {
						row1.ID = rs_tOracleInput_2.getBigDecimal(1);
					} else {
				
						row1.ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row1.ACTIVIDAD_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(2) != null) {
						row1.ACTIVIDAD_ID = rs_tOracleInput_2.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 3) {
								row1.ESM_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(3) != null) {
						row1.ESM_ID = rs_tOracleInput_2.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 4) {
								row1.VIGENCIA = 0;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(4) != null) {
						row1.VIGENCIA = rs_tOracleInput_2.getInt(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 5) {
								row1.REGIONAL = null;
							} else {
	                         		
        	row1.REGIONAL = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 6) {
								row1.FUERZA = null;
							} else {
	                         		
        	row1.FUERZA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 7) {
								row1.ESM = null;
							} else {
	                         		
        	row1.ESM = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 8) {
								row1.SUBPROGRAMA = null;
							} else {
	                         		
        	row1.SUBPROGRAMA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 9) {
								row1.ACTIVIDAD = null;
							} else {
	                         		
        	row1.ACTIVIDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 10) {
								row1.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(10) != null) {
						row1.ESTREGISTRO_ID = rs_tOracleInput_2.getBigDecimal(10);
					} else {
				
						row1.ESTREGISTRO_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 11) {
								row1.FORMATO = null;
							} else {
	                         		
        	row1.FORMATO = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 12) {
								row1.PORC_ANUAL = null;
							} else {
	                         		
				row1.PORC_ANUAL = routines.system.JDBCUtil.getDoubleObject(rs_tOracleInput_2, 12);
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
						row2Struct row2 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row2HashKey.ACTIVIDADES_ID = row1.ACTIVIDAD_ID ;
                        		    		
                        		    		    row2HashKey.UORG_ID = row1.ESM_ID ;
                        		    		
	                        		    	Object exprKeyValue_row2__VIGENCIA = row1.VIGENCIA ;
	                        		    	if(exprKeyValue_row2__VIGENCIA == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			row2HashKey.VIGENCIA = (int)(Integer) exprKeyValue_row2__VIGENCIA;
                        		    		}
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_1 || !tHash_Lookup_row2.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLooprow2 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow2 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) || forceLooprow2) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row2'
									
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								
								if(!forceLooprow2) { // G 46
								
							
								 
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow2 = false;
									 	
							
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'out1'
out1_tmp.ID = row1.ID ;
out1_tmp.VIGENCIA = row1.VIGENCIA ;
out1_tmp.REGIONAL = row1.REGIONAL ;
out1_tmp.FUERZA = row1.FUERZA ;
out1_tmp.ESM = row1.ESM ;
out1_tmp.SUBPROGRAMA = row1.SUBPROGRAMA ;
out1_tmp.ACTIVIDAD = row1.ACTIVIDAD ;
out1_tmp.PORC_ANUAL_ACTIVIDAD = row2.PORC_ANUAL ;
out1_tmp.FORMATO = row1.FORMATO ;
out1_tmp.PORC_TRIM_1 = row2.PORC_TRIM_1 ;
out1_tmp.PORC_TRIM_2 = row2.PORC_TRIM_2 ;
out1_tmp.PORC_TRIM_3 = row2.PORC_TRIM_3 ;
out1_tmp.PORC_TRIM_4 = row2.PORC_TRIM_4 ;
out1_tmp.PORC_ANUAL = row1.PORC_ANUAL ;
out1_tmp.ESTREGISTRO_ID = row1.ESTREGISTRO_ID ;
out1 = out1_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tIntervalMatch_1 main ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					
///////////////////////
                    row8.ID = out1.ID; 
                    row8.VIGENCIA = out1.VIGENCIA; 
                    row8.REGIONAL = out1.REGIONAL; 
                    row8.FUERZA = out1.FUERZA; 
                    row8.ESM = out1.ESM; 
                    row8.SUBPROGRAMA = out1.SUBPROGRAMA; 
                    row8.ACTIVIDAD = out1.ACTIVIDAD; 
                    row8.PORC_ANUAL_ACTIVIDAD = out1.PORC_ANUAL_ACTIVIDAD; 
                    row8.FORMATO = out1.FORMATO; 
                    row8.PORC_TRIM_1 = out1.PORC_TRIM_1; 
                    row8.PORC_TRIM_2 = out1.PORC_TRIM_2; 
                    row8.PORC_TRIM_3 = out1.PORC_TRIM_3; 
                    row8.PORC_TRIM_4 = out1.PORC_TRIM_4; 
                    row8.PORC_ANUAL = out1.PORC_ANUAL; 
                    row8.ESTREGISTRO_ID = out1.ESTREGISTRO_ID; 
//***
					row8.LOOKUP = util_tIntervalMatch_1.getLookup(out1);
					nb_line_tIntervalMatch_1++;
//***

///////////////////////    			
 


	tos_count_tIntervalMatch_1++;

/**
 * [tIntervalMatch_1 main ] stop
 */
	
	/**
	 * [tIntervalMatch_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_1";
	
	

 



/**
 * [tIntervalMatch_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out2 = null;


// # Output table : 'out2'
out2_tmp.ID = row8.ID ;
out2_tmp.VIGENCIA = row8.VIGENCIA ;
out2_tmp.REGIONAL = row8.REGIONAL ;
out2_tmp.FUERZA = row8.FUERZA ;
out2_tmp.ESM = row8.ESM ;
out2_tmp.SUBPROGRAMA = row8.SUBPROGRAMA ;
out2_tmp.ACTIVIDAD = row8.ACTIVIDAD ;
out2_tmp.PORC_ANUAL_ACTIVIDAD = row8.PORC_ANUAL_ACTIVIDAD ;
out2_tmp.FORMATO = row8.FORMATO ;
out2_tmp.PORC_TRIM_1 = row8.PORC_TRIM_1 ;
out2_tmp.NOM_PORC_TRIM_1 = row8.LOOKUP ;
out2_tmp.PORC_TRIM_2 = row8.PORC_TRIM_2 ;
out2_tmp.NOM_PORC_TRIM_2 = null;
out2_tmp.PORC_TRIM_3 = row8.PORC_TRIM_3 ;
out2_tmp.NOM_PORC_TRIM_3 = null;
out2_tmp.PORC_TRIM_4 = row8.PORC_TRIM_4 ;
out2_tmp.NOM_PORC_TRIM_4 = null;
out2_tmp.PORC_ANUAL = row8.PORC_ANUAL ;
out2_tmp.NOM_PORC_ANUAL = null;
out2_tmp.ESTREGISTRO_ID = row8.ESTREGISTRO_ID ;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tIntervalMatch_2 main ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out2"
						
						);
					}
					
///////////////////////
                    row10.ID = out2.ID; 
                    row10.VIGENCIA = out2.VIGENCIA; 
                    row10.REGIONAL = out2.REGIONAL; 
                    row10.FUERZA = out2.FUERZA; 
                    row10.ESM = out2.ESM; 
                    row10.SUBPROGRAMA = out2.SUBPROGRAMA; 
                    row10.ACTIVIDAD = out2.ACTIVIDAD; 
                    row10.PORC_ANUAL_ACTIVIDAD = out2.PORC_ANUAL_ACTIVIDAD; 
                    row10.FORMATO = out2.FORMATO; 
                    row10.PORC_TRIM_1 = out2.PORC_TRIM_1; 
                    row10.NOM_PORC_TRIM_1 = out2.NOM_PORC_TRIM_1; 
                    row10.PORC_TRIM_2 = out2.PORC_TRIM_2; 
                    row10.NOM_PORC_TRIM_2 = out2.NOM_PORC_TRIM_2; 
                    row10.PORC_TRIM_3 = out2.PORC_TRIM_3; 
                    row10.NOM_PORC_TRIM_3 = out2.NOM_PORC_TRIM_3; 
                    row10.PORC_TRIM_4 = out2.PORC_TRIM_4; 
                    row10.NOM_PORC_TRIM_4 = out2.NOM_PORC_TRIM_4; 
                    row10.PORC_ANUAL = out2.PORC_ANUAL; 
                    row10.NOM_PORC_ANUAL = out2.NOM_PORC_ANUAL; 
                    row10.ESTREGISTRO_ID = out2.ESTREGISTRO_ID; 
//***
					row10.LOOKUP = util_tIntervalMatch_2.getLookup(out2);
					nb_line_tIntervalMatch_2++;
//***

///////////////////////    			
 


	tos_count_tIntervalMatch_2++;

/**
 * [tIntervalMatch_2 main ] stop
 */
	
	/**
	 * [tIntervalMatch_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_2";
	
	

 



/**
 * [tIntervalMatch_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

out3 = null;


// # Output table : 'out3'
out3_tmp.ID = row10.ID ;
out3_tmp.VIGENCIA = row10.VIGENCIA ;
out3_tmp.REGIONAL = row10.REGIONAL ;
out3_tmp.FUERZA = row10.FUERZA ;
out3_tmp.ESM = row10.ESM ;
out3_tmp.SUBPROGRAMA = row10.SUBPROGRAMA ;
out3_tmp.ACTIVIDAD = row10.ACTIVIDAD ;
out3_tmp.PORC_ANUAL_ACTIVIDAD = row10.PORC_ANUAL_ACTIVIDAD ;
out3_tmp.FORMATO = row10.FORMATO ;
out3_tmp.PORC_TRIM_1 = row10.PORC_TRIM_1 ;
out3_tmp.NOM_PORC_TRIM_1 = row10.NOM_PORC_TRIM_1 ;
out3_tmp.PORC_TRIM_2 = row10.PORC_TRIM_2 ;
out3_tmp.NOM_PORC_TRIM_2 =  row10.LOOKUP ;
out3_tmp.PORC_TRIM_3 = row10.PORC_TRIM_3 ;
out3_tmp.NOM_PORC_TRIM_3 = row10.NOM_PORC_TRIM_3 ;
out3_tmp.PORC_TRIM_4 = row10.PORC_TRIM_4 ;
out3_tmp.NOM_PORC_TRIM_4 = row10.NOM_PORC_TRIM_4 ;
out3_tmp.PORC_ANUAL = row10.PORC_ANUAL ;
out3_tmp.NOM_PORC_ANUAL = row10.NOM_PORC_ANUAL ;
out3_tmp.ESTREGISTRO_ID = row10.ESTREGISTRO_ID ;
out3 = out3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tIntervalMatch_3 main ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out3"
						
						);
					}
					
///////////////////////
                    row12.ID = out3.ID; 
                    row12.VIGENCIA = out3.VIGENCIA; 
                    row12.REGIONAL = out3.REGIONAL; 
                    row12.FUERZA = out3.FUERZA; 
                    row12.ESM = out3.ESM; 
                    row12.SUBPROGRAMA = out3.SUBPROGRAMA; 
                    row12.ACTIVIDAD = out3.ACTIVIDAD; 
                    row12.PORC_ANUAL_ACTIVIDAD = out3.PORC_ANUAL_ACTIVIDAD; 
                    row12.FORMATO = out3.FORMATO; 
                    row12.PORC_TRIM_1 = out3.PORC_TRIM_1; 
                    row12.NOM_PORC_TRIM_1 = out3.NOM_PORC_TRIM_1; 
                    row12.PORC_TRIM_2 = out3.PORC_TRIM_2; 
                    row12.NOM_PORC_TRIM_2 = out3.NOM_PORC_TRIM_2; 
                    row12.PORC_TRIM_3 = out3.PORC_TRIM_3; 
                    row12.NOM_PORC_TRIM_3 = out3.NOM_PORC_TRIM_3; 
                    row12.PORC_TRIM_4 = out3.PORC_TRIM_4; 
                    row12.NOM_PORC_TRIM_4 = out3.NOM_PORC_TRIM_4; 
                    row12.PORC_ANUAL = out3.PORC_ANUAL; 
                    row12.NOM_PORC_ANUAL = out3.NOM_PORC_ANUAL; 
                    row12.ESTREGISTRO_ID = out3.ESTREGISTRO_ID; 
//***
					row12.LOOKUP = util_tIntervalMatch_3.getLookup(out3);
					nb_line_tIntervalMatch_3++;
//***

///////////////////////    			
 


	tos_count_tIntervalMatch_3++;

/**
 * [tIntervalMatch_3 main ] stop
 */
	
	/**
	 * [tIntervalMatch_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_3";
	
	

 



/**
 * [tIntervalMatch_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

out4 = null;


// # Output table : 'out4'
out4_tmp.ID = row12.ID ;
out4_tmp.VIGENCIA = row12.VIGENCIA ;
out4_tmp.REGIONAL = row12.REGIONAL ;
out4_tmp.FUERZA = row12.FUERZA ;
out4_tmp.ESM = row12.ESM ;
out4_tmp.SUBPROGRAMA = row12.SUBPROGRAMA ;
out4_tmp.ACTIVIDAD = row12.ACTIVIDAD ;
out4_tmp.PORC_ANUAL_ACTIVIDAD = row12.PORC_ANUAL_ACTIVIDAD ;
out4_tmp.FORMATO = row12.FORMATO ;
out4_tmp.PORC_TRIM_1 = row12.PORC_TRIM_1 ;
out4_tmp.NOM_PORC_TRIM_1 = row12.NOM_PORC_TRIM_1 ;
out4_tmp.PORC_TRIM_2 = row12.PORC_TRIM_2 ;
out4_tmp.NOM_PORC_TRIM_2 = row12.NOM_PORC_TRIM_2 ;
out4_tmp.PORC_TRIM_3 = row12.PORC_TRIM_3 ;
out4_tmp.NOM_PORC_TRIM_3 = row12.LOOKUP ;
out4_tmp.PORC_TRIM_4 = row12.PORC_TRIM_4 ;
out4_tmp.NOM_PORC_TRIM_4 = row12.NOM_PORC_TRIM_4 ;
out4_tmp.PORC_ANUAL = row12.PORC_ANUAL ;
out4_tmp.NOM_PORC_ANUAL = row12.NOM_PORC_ANUAL ;
out4_tmp.ESTREGISTRO_ID = row12.ESTREGISTRO_ID ;
out4 = out4_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "out4"
if(out4 != null) { 



	
	/**
	 * [tIntervalMatch_4 main ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out4"
						
						);
					}
					
///////////////////////
                    row14.ID = out4.ID; 
                    row14.VIGENCIA = out4.VIGENCIA; 
                    row14.REGIONAL = out4.REGIONAL; 
                    row14.FUERZA = out4.FUERZA; 
                    row14.ESM = out4.ESM; 
                    row14.SUBPROGRAMA = out4.SUBPROGRAMA; 
                    row14.ACTIVIDAD = out4.ACTIVIDAD; 
                    row14.PORC_ANUAL_ACTIVIDAD = out4.PORC_ANUAL_ACTIVIDAD; 
                    row14.FORMATO = out4.FORMATO; 
                    row14.PORC_TRIM_1 = out4.PORC_TRIM_1; 
                    row14.NOM_PORC_TRIM_1 = out4.NOM_PORC_TRIM_1; 
                    row14.PORC_TRIM_2 = out4.PORC_TRIM_2; 
                    row14.NOM_PORC_TRIM_2 = out4.NOM_PORC_TRIM_2; 
                    row14.PORC_TRIM_3 = out4.PORC_TRIM_3; 
                    row14.NOM_PORC_TRIM_3 = out4.NOM_PORC_TRIM_3; 
                    row14.PORC_TRIM_4 = out4.PORC_TRIM_4; 
                    row14.NOM_PORC_TRIM_4 = out4.NOM_PORC_TRIM_4; 
                    row14.PORC_ANUAL = out4.PORC_ANUAL; 
                    row14.NOM_PORC_ANUAL = out4.NOM_PORC_ANUAL; 
                    row14.ESTREGISTRO_ID = out4.ESTREGISTRO_ID; 
//***
					row14.LOOKUP = util_tIntervalMatch_4.getLookup(out4);
					nb_line_tIntervalMatch_4++;
//***

///////////////////////    			
 


	tos_count_tIntervalMatch_4++;

/**
 * [tIntervalMatch_4 main ] stop
 */
	
	/**
	 * [tIntervalMatch_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_4";
	
	

 



/**
 * [tIntervalMatch_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

out5 = null;


// # Output table : 'out5'
out5_tmp.ID = row14.ID ;
out5_tmp.VIGENCIA = row14.VIGENCIA ;
out5_tmp.REGIONAL = row14.REGIONAL ;
out5_tmp.FUERZA = row14.FUERZA ;
out5_tmp.ESM = row14.ESM ;
out5_tmp.SUBPROGRAMA = row14.SUBPROGRAMA ;
out5_tmp.ACTIVIDAD = row14.ACTIVIDAD ;
out5_tmp.PORC_ANUAL_ACTIVIDAD = row14.PORC_ANUAL_ACTIVIDAD ;
out5_tmp.FORMATO = row14.FORMATO ;
out5_tmp.PORC_TRIM_1 = row14.PORC_TRIM_1 ;
out5_tmp.NOM_PORC_TRIM_1 = row14.NOM_PORC_TRIM_1 ;
out5_tmp.PORC_TRIM_2 = row14.PORC_TRIM_2 ;
out5_tmp.NOM_PORC_TRIM_2 = row14.NOM_PORC_TRIM_2 ;
out5_tmp.PORC_TRIM_3 = row14.PORC_TRIM_3 ;
out5_tmp.NOM_PORC_TRIM_3 = row14.NOM_PORC_TRIM_3 ;
out5_tmp.PORC_TRIM_4 = row14.PORC_TRIM_4 ;
out5_tmp.NOM_PORC_TRIM_4 = row14.LOOKUP ;
out5_tmp.PORC_ANUAL = row14.PORC_ANUAL ;
out5_tmp.NOM_PORC_ANUAL = row14.NOM_PORC_ANUAL ;
out5_tmp.ESTREGISTRO_ID = row14.ESTREGISTRO_ID ;
out5 = out5_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "out5"
if(out5 != null) { 



	
	/**
	 * [tIntervalMatch_5 main ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out5"
						
						);
					}
					
///////////////////////
                    row6.ID = out5.ID; 
                    row6.VIGENCIA = out5.VIGENCIA; 
                    row6.REGIONAL = out5.REGIONAL; 
                    row6.FUERZA = out5.FUERZA; 
                    row6.ESM = out5.ESM; 
                    row6.SUBPROGRAMA = out5.SUBPROGRAMA; 
                    row6.ACTIVIDAD = out5.ACTIVIDAD; 
                    row6.PORC_ANUAL_ACTIVIDAD = out5.PORC_ANUAL_ACTIVIDAD; 
                    row6.FORMATO = out5.FORMATO; 
                    row6.PORC_TRIM_1 = out5.PORC_TRIM_1; 
                    row6.NOM_PORC_TRIM_1 = out5.NOM_PORC_TRIM_1; 
                    row6.PORC_TRIM_2 = out5.PORC_TRIM_2; 
                    row6.NOM_PORC_TRIM_2 = out5.NOM_PORC_TRIM_2; 
                    row6.PORC_TRIM_3 = out5.PORC_TRIM_3; 
                    row6.NOM_PORC_TRIM_3 = out5.NOM_PORC_TRIM_3; 
                    row6.PORC_TRIM_4 = out5.PORC_TRIM_4; 
                    row6.NOM_PORC_TRIM_4 = out5.NOM_PORC_TRIM_4; 
                    row6.PORC_ANUAL = out5.PORC_ANUAL; 
                    row6.NOM_PORC_ANUAL = out5.NOM_PORC_ANUAL; 
                    row6.ESTREGISTRO_ID = out5.ESTREGISTRO_ID; 
//***
					row6.LOOKUP = util_tIntervalMatch_5.getLookup(out5);
					nb_line_tIntervalMatch_5++;
//***

///////////////////////    			
 


	tos_count_tIntervalMatch_5++;

/**
 * [tIntervalMatch_5 main ] stop
 */
	
	/**
	 * [tIntervalMatch_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_5";
	
	

 



/**
 * [tIntervalMatch_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_6 = false;
		boolean mainRowRejected_tMap_6 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

out6 = null;


// # Output table : 'out6'
out6_tmp.ID = row6.ID ;
out6_tmp.VIGENCIA = row6.VIGENCIA ;
out6_tmp.REGIONAL = row6.REGIONAL ;
out6_tmp.FUERZA = row6.FUERZA ;
out6_tmp.ESM = row6.ESM ;
out6_tmp.SUBPROGRAMA = row6.SUBPROGRAMA ;
out6_tmp.ACTIVIDAD = row6.ACTIVIDAD ;
out6_tmp.PORC_ANUAL_ACTIVIDAD = row6.PORC_ANUAL_ACTIVIDAD ;
out6_tmp.FORMATO = row6.FORMATO ;
out6_tmp.PORC_TRIM_1 = row6.PORC_TRIM_1 ;
out6_tmp.NOM_PORC_TRIM_1 = row6.NOM_PORC_TRIM_1 ;
out6_tmp.PORC_TRIM_2 = row6.PORC_TRIM_2 ;
out6_tmp.NOM_PORC_TRIM_2 = row6.NOM_PORC_TRIM_2 ;
out6_tmp.PORC_TRIM_3 = row6.PORC_TRIM_3 ;
out6_tmp.NOM_PORC_TRIM_3 = row6.NOM_PORC_TRIM_3 ;
out6_tmp.PORC_TRIM_4 = row6.PORC_TRIM_4 ;
out6_tmp.NOM_PORC_TRIM_4 = row6.NOM_PORC_TRIM_4 ;
out6_tmp.PORC_ANUAL = row6.PORC_ANUAL ;
out6_tmp.NOM_PORC_ANUAL = row6.LOOKUP ;
out6_tmp.ESTREGISTRO_ID = row6.ESTREGISTRO_ID ;
out6 = out6_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "out6"
if(out6 != null) { 



	
	/**
	 * [tIntervalMatch_6 main ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out6"
						
						);
					}
					
///////////////////////
                    row16.ID = out6.ID; 
                    row16.VIGENCIA = out6.VIGENCIA; 
                    row16.REGIONAL = out6.REGIONAL; 
                    row16.FUERZA = out6.FUERZA; 
                    row16.ESM = out6.ESM; 
                    row16.SUBPROGRAMA = out6.SUBPROGRAMA; 
                    row16.ACTIVIDAD = out6.ACTIVIDAD; 
                    row16.PORC_ANUAL_ACTIVIDAD = out6.PORC_ANUAL_ACTIVIDAD; 
                    row16.FORMATO = out6.FORMATO; 
                    row16.PORC_TRIM_1 = out6.PORC_TRIM_1; 
                    row16.NOM_PORC_TRIM_1 = out6.NOM_PORC_TRIM_1; 
                    row16.PORC_TRIM_2 = out6.PORC_TRIM_2; 
                    row16.NOM_PORC_TRIM_2 = out6.NOM_PORC_TRIM_2; 
                    row16.PORC_TRIM_3 = out6.PORC_TRIM_3; 
                    row16.NOM_PORC_TRIM_3 = out6.NOM_PORC_TRIM_3; 
                    row16.PORC_TRIM_4 = out6.PORC_TRIM_4; 
                    row16.NOM_PORC_TRIM_4 = out6.NOM_PORC_TRIM_4; 
                    row16.PORC_ANUAL = out6.PORC_ANUAL; 
                    row16.NOM_PORC_ANUAL = out6.NOM_PORC_ANUAL; 
                    row16.ESTREGISTRO_ID = out6.ESTREGISTRO_ID; 
//***
					row16.LOOKUP = util_tIntervalMatch_6.getLookup(out6);
					nb_line_tIntervalMatch_6++;
//***

///////////////////////    			
 


	tos_count_tIntervalMatch_6++;

/**
 * [tIntervalMatch_6 main ] stop
 */
	
	/**
	 * [tIntervalMatch_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_6";
	
	

 



/**
 * [tIntervalMatch_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_7 = false;
		boolean mainRowRejected_tMap_7 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

copyOfout6 = null;


// # Output table : 'copyOfout6'
copyOfout6_tmp.ID = row16.ID ;
copyOfout6_tmp.VIGENCIA = row16.VIGENCIA ;
copyOfout6_tmp.REGIONAL = row16.REGIONAL ;
copyOfout6_tmp.FUERZA = row16.FUERZA ;
copyOfout6_tmp.ESM = row16.ESM ;
copyOfout6_tmp.SUBPROGRAMA = row16.SUBPROGRAMA ;
copyOfout6_tmp.ACTIVIDAD = row16.ACTIVIDAD ;
copyOfout6_tmp.PORC_ANUAL_ACTIVIDAD = row16.PORC_ANUAL_ACTIVIDAD ;
copyOfout6_tmp.CAT_PORC_ANUAL_ACT = row16.LOOKUP ;
copyOfout6_tmp.FORMATO = row16.FORMATO ;
copyOfout6_tmp.PORC_TRIM_1 = row16.PORC_TRIM_1 ;
copyOfout6_tmp.CAT_PORC_TRIM_1 = row16.NOM_PORC_TRIM_1 ;
copyOfout6_tmp.PORC_TRIM_2 = row16.PORC_TRIM_2 ;
copyOfout6_tmp.CAT_PORC_TRIM_2 = row16.NOM_PORC_TRIM_2 ;
copyOfout6_tmp.PORC_TRIM_3 = row16.PORC_TRIM_3 ;
copyOfout6_tmp.CAT_PORC_TRIM_3 = row16.NOM_PORC_TRIM_3 ;
copyOfout6_tmp.PORC_TRIM_4 = row16.PORC_TRIM_4 ;
copyOfout6_tmp.CAT_PORC_TRIM_4 = row16.NOM_PORC_TRIM_4 ;
copyOfout6_tmp.PORC_ANUAL = row16.PORC_ANUAL ;
copyOfout6_tmp.CAT_PORC_ANUAL = row16.NOM_PORC_ANUAL ;
copyOfout6_tmp.ESTREGISTRO_ID = row16.ESTREGISTRO_ID ;
copyOfout6 = copyOfout6_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "copyOfout6"
if(copyOfout6 != null) { 



	
	/**
	 * [tSortRow_1_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfout6"
						
						);
					}
					



	ComparablecopyOfout6Struct arrayRowtSortRow_1_SortOut = new ComparablecopyOfout6Struct();

	arrayRowtSortRow_1_SortOut.ID = copyOfout6.ID;
	arrayRowtSortRow_1_SortOut.VIGENCIA = copyOfout6.VIGENCIA;
	arrayRowtSortRow_1_SortOut.REGIONAL = copyOfout6.REGIONAL;
	arrayRowtSortRow_1_SortOut.FUERZA = copyOfout6.FUERZA;
	arrayRowtSortRow_1_SortOut.ESM = copyOfout6.ESM;
	arrayRowtSortRow_1_SortOut.SUBPROGRAMA = copyOfout6.SUBPROGRAMA;
	arrayRowtSortRow_1_SortOut.ACTIVIDAD = copyOfout6.ACTIVIDAD;
	arrayRowtSortRow_1_SortOut.PORC_ANUAL_ACTIVIDAD = copyOfout6.PORC_ANUAL_ACTIVIDAD;
	arrayRowtSortRow_1_SortOut.CAT_PORC_ANUAL_ACT = copyOfout6.CAT_PORC_ANUAL_ACT;
	arrayRowtSortRow_1_SortOut.FORMATO = copyOfout6.FORMATO;
	arrayRowtSortRow_1_SortOut.PORC_TRIM_1 = copyOfout6.PORC_TRIM_1;
	arrayRowtSortRow_1_SortOut.CAT_PORC_TRIM_1 = copyOfout6.CAT_PORC_TRIM_1;
	arrayRowtSortRow_1_SortOut.PORC_TRIM_2 = copyOfout6.PORC_TRIM_2;
	arrayRowtSortRow_1_SortOut.CAT_PORC_TRIM_2 = copyOfout6.CAT_PORC_TRIM_2;
	arrayRowtSortRow_1_SortOut.PORC_TRIM_3 = copyOfout6.PORC_TRIM_3;
	arrayRowtSortRow_1_SortOut.CAT_PORC_TRIM_3 = copyOfout6.CAT_PORC_TRIM_3;
	arrayRowtSortRow_1_SortOut.PORC_TRIM_4 = copyOfout6.PORC_TRIM_4;
	arrayRowtSortRow_1_SortOut.CAT_PORC_TRIM_4 = copyOfout6.CAT_PORC_TRIM_4;
	arrayRowtSortRow_1_SortOut.PORC_ANUAL = copyOfout6.PORC_ANUAL;
	arrayRowtSortRow_1_SortOut.CAT_PORC_ANUAL = copyOfout6.CAT_PORC_ANUAL;
	arrayRowtSortRow_1_SortOut.ESTREGISTRO_ID = copyOfout6.ESTREGISTRO_ID;	
	list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

 


	tos_count_tSortRow_1_SortOut++;

/**
 * [tSortRow_1_SortOut main ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	

 



/**
 * [tSortRow_1_SortOut process_data_begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	

 



/**
 * [tSortRow_1_SortOut process_data_end ] stop
 */

} // End of branch "copyOfout6"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tIntervalMatch_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_6";
	
	

 



/**
 * [tIntervalMatch_6 process_data_end ] stop
 */

} // End of branch "out6"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tIntervalMatch_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_5";
	
	

 



/**
 * [tIntervalMatch_5 process_data_end ] stop
 */

} // End of branch "out5"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tIntervalMatch_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_4";
	
	

 



/**
 * [tIntervalMatch_4 process_data_end ] stop
 */

} // End of branch "out4"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tIntervalMatch_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_3";
	
	

 



/**
 * [tIntervalMatch_3 process_data_end ] stop
 */

} // End of branch "out3"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tIntervalMatch_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_2";
	
	

 



/**
 * [tIntervalMatch_2 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tIntervalMatch_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_1";
	
	

 



/**
 * [tIntervalMatch_1 process_data_end ] stop
 */

} // End of branch "out1"



	
		} // close loop of lookup 'row2' // G_TM_M_043
	
	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());




/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tIntervalMatch_1 end ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_1";
	
	

globalMap.put("tIntervalMatch_1_NB_LINE",nb_line_tIntervalMatch_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tIntervalMatch_1", true);
end_Hash.put("tIntervalMatch_1", System.currentTimeMillis());




/**
 * [tIntervalMatch_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tIntervalMatch_2 end ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_2";
	
	

globalMap.put("tIntervalMatch_2_NB_LINE",nb_line_tIntervalMatch_2);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tIntervalMatch_2", true);
end_Hash.put("tIntervalMatch_2", System.currentTimeMillis());




/**
 * [tIntervalMatch_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tIntervalMatch_3 end ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_3";
	
	

globalMap.put("tIntervalMatch_3_NB_LINE",nb_line_tIntervalMatch_3);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out3");
			  	}
			  	
 

ok_Hash.put("tIntervalMatch_3", true);
end_Hash.put("tIntervalMatch_3", System.currentTimeMillis());




/**
 * [tIntervalMatch_3 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tIntervalMatch_4 end ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_4";
	
	

globalMap.put("tIntervalMatch_4_NB_LINE",nb_line_tIntervalMatch_4);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out4");
			  	}
			  	
 

ok_Hash.put("tIntervalMatch_4", true);
end_Hash.put("tIntervalMatch_4", System.currentTimeMillis());




/**
 * [tIntervalMatch_4 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tIntervalMatch_5 end ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_5";
	
	

globalMap.put("tIntervalMatch_5_NB_LINE",nb_line_tIntervalMatch_5);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out5");
			  	}
			  	
 

ok_Hash.put("tIntervalMatch_5", true);
end_Hash.put("tIntervalMatch_5", System.currentTimeMillis());




/**
 * [tIntervalMatch_5 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tIntervalMatch_6 end ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_6";
	
	

globalMap.put("tIntervalMatch_6_NB_LINE",nb_line_tIntervalMatch_6);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out6");
			  	}
			  	
 

ok_Hash.put("tIntervalMatch_6", true);
end_Hash.put("tIntervalMatch_6", System.currentTimeMillis());




/**
 * [tIntervalMatch_6 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	

copyOfout6Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut.toArray(new ComparablecopyOfout6Struct[0]);

java.util.Arrays.sort(array_tSortRow_1_SortOut);

globalMap.put("tSortRow_1",array_tSortRow_1_SortOut);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout6");
			  	}
			  	
 

ok_Hash.put("tSortRow_1_SortOut", true);
end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_1_SortOut end ] stop
 */


	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






        int updateKeyCount_tOracleOutput_1 = 1;
        if(updateKeyCount_tOracleOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_1 == 21 && true) {
                    System.err.println("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
        dbschema_tOracleOutput_1 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("BAMB_TSEMAFORIZADO");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("BAMB_TSEMAFORIZADO");
        }
                java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement("SELECT COUNT(1) FROM " + tableName_tOracleOutput_1 + " WHERE ID = ?");
                resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);
                String insert_tOracleOutput_1 = "INSERT INTO " + tableName_tOracleOutput_1 + " (ID,VIGENCIA,REGIONAL,FUERZA,ESM,SUBPROGRAMA,ACTIVIDAD,PORC_ANUAL_ACTIVIDAD,CAT_PORC_ANUAL_ACT,FORMATO,PORC_TRIM_1,CAT_PORC_TRIM_1,PORC_TRIM_2,CAT_PORC_TRIM_2,PORC_TRIM_3,CAT_PORC_TRIM_3,PORC_TRIM_4,CAT_PORC_TRIM_4,PORC_ANUAL,CAT_PORC_ANUAL,ESTREGISTRO_ID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    
                java.sql.PreparedStatement pstmtInsert_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(insert_tOracleOutput_1);
                resourceMap.put("pstmtInsert_tOracleOutput_1", pstmtInsert_tOracleOutput_1);
                String update_tOracleOutput_1 = "UPDATE " + tableName_tOracleOutput_1 + " SET VIGENCIA = ?,REGIONAL = ?,FUERZA = ?,ESM = ?,SUBPROGRAMA = ?,ACTIVIDAD = ?,PORC_ANUAL_ACTIVIDAD = ?,CAT_PORC_ANUAL_ACT = ?,FORMATO = ?,PORC_TRIM_1 = ?,CAT_PORC_TRIM_1 = ?,PORC_TRIM_2 = ?,CAT_PORC_TRIM_2 = ?,PORC_TRIM_3 = ?,CAT_PORC_TRIM_3 = ?,PORC_TRIM_4 = ?,CAT_PORC_TRIM_4 = ?,PORC_ANUAL = ?,CAT_PORC_ANUAL = ?,ESTREGISTRO_ID = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmtUpdate_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(update_tOracleOutput_1);
                resourceMap.put("pstmtUpdate_tOracleOutput_1", pstmtUpdate_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortIn", false);
		start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	
		int tos_count_tSortRow_1_SortIn = 0;
		


copyOfout6Struct[] array_tSortRow_1_SortIn = (copyOfout6Struct[]) globalMap.remove("tSortRow_1");

int nb_line_tSortRow_1_SortIn = 0;

copyOfout6Struct current_tSortRow_1_SortIn = null;

for(int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++){
	current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
	row15.ID = current_tSortRow_1_SortIn.ID;
	row15.VIGENCIA = current_tSortRow_1_SortIn.VIGENCIA;
	row15.REGIONAL = current_tSortRow_1_SortIn.REGIONAL;
	row15.FUERZA = current_tSortRow_1_SortIn.FUERZA;
	row15.ESM = current_tSortRow_1_SortIn.ESM;
	row15.SUBPROGRAMA = current_tSortRow_1_SortIn.SUBPROGRAMA;
	row15.ACTIVIDAD = current_tSortRow_1_SortIn.ACTIVIDAD;
	row15.PORC_ANUAL_ACTIVIDAD = current_tSortRow_1_SortIn.PORC_ANUAL_ACTIVIDAD;
	row15.CAT_PORC_ANUAL_ACT = current_tSortRow_1_SortIn.CAT_PORC_ANUAL_ACT;
	row15.FORMATO = current_tSortRow_1_SortIn.FORMATO;
	row15.PORC_TRIM_1 = current_tSortRow_1_SortIn.PORC_TRIM_1;
	row15.CAT_PORC_TRIM_1 = current_tSortRow_1_SortIn.CAT_PORC_TRIM_1;
	row15.PORC_TRIM_2 = current_tSortRow_1_SortIn.PORC_TRIM_2;
	row15.CAT_PORC_TRIM_2 = current_tSortRow_1_SortIn.CAT_PORC_TRIM_2;
	row15.PORC_TRIM_3 = current_tSortRow_1_SortIn.PORC_TRIM_3;
	row15.CAT_PORC_TRIM_3 = current_tSortRow_1_SortIn.CAT_PORC_TRIM_3;
	row15.PORC_TRIM_4 = current_tSortRow_1_SortIn.PORC_TRIM_4;
	row15.CAT_PORC_TRIM_4 = current_tSortRow_1_SortIn.CAT_PORC_TRIM_4;
	row15.PORC_ANUAL = current_tSortRow_1_SortIn.PORC_ANUAL;
	row15.CAT_PORC_ANUAL = current_tSortRow_1_SortIn.CAT_PORC_ANUAL;
	row15.ESTREGISTRO_ID = current_tSortRow_1_SortIn.ESTREGISTRO_ID;
	// increase number of line sorted
	nb_line_tSortRow_1_SortIn++;

 



/**
 * [tSortRow_1_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	

 


	tos_count_tSortRow_1_SortIn++;

/**
 * [tSortRow_1_SortIn main ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	

 



/**
 * [tSortRow_1_SortIn process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					



        whetherReject_tOracleOutput_1 = false;
                    pstmt_tOracleOutput_1.setBigDecimal(1, row15.ID);

            int checkCount_tOracleOutput_1 = -1;
            try (java.sql.ResultSet rs_tOracleOutput_1 = pstmt_tOracleOutput_1.executeQuery()) {
                while(rs_tOracleOutput_1.next()) {
                    checkCount_tOracleOutput_1 = rs_tOracleOutput_1.getInt(1);
                }
            }
            if(checkCount_tOracleOutput_1 > 0) {
                        pstmtUpdate_tOracleOutput_1.setInt(1, row15.VIGENCIA);

                        if(row15.REGIONAL == null) {
pstmtUpdate_tOracleOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(2, row15.REGIONAL);
}

                        if(row15.FUERZA == null) {
pstmtUpdate_tOracleOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(3, row15.FUERZA);
}

                        if(row15.ESM == null) {
pstmtUpdate_tOracleOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(4, row15.ESM);
}

                        if(row15.SUBPROGRAMA == null) {
pstmtUpdate_tOracleOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(5, row15.SUBPROGRAMA);
}

                        if(row15.ACTIVIDAD == null) {
pstmtUpdate_tOracleOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(6, row15.ACTIVIDAD);
}

                        if(row15.PORC_ANUAL_ACTIVIDAD == null) {
pstmtUpdate_tOracleOutput_1.setNull(7, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tOracleOutput_1.setDouble(7, row15.PORC_ANUAL_ACTIVIDAD);
}

                        if(row15.CAT_PORC_ANUAL_ACT == null) {
pstmtUpdate_tOracleOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(8, row15.CAT_PORC_ANUAL_ACT);
}

                        if(row15.FORMATO == null) {
pstmtUpdate_tOracleOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(9, row15.FORMATO);
}

                        if(row15.PORC_TRIM_1 == null) {
pstmtUpdate_tOracleOutput_1.setNull(10, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tOracleOutput_1.setDouble(10, row15.PORC_TRIM_1);
}

                        if(row15.CAT_PORC_TRIM_1 == null) {
pstmtUpdate_tOracleOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(11, row15.CAT_PORC_TRIM_1);
}

                        if(row15.PORC_TRIM_2 == null) {
pstmtUpdate_tOracleOutput_1.setNull(12, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tOracleOutput_1.setDouble(12, row15.PORC_TRIM_2);
}

                        if(row15.CAT_PORC_TRIM_2 == null) {
pstmtUpdate_tOracleOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(13, row15.CAT_PORC_TRIM_2);
}

                        if(row15.PORC_TRIM_3 == null) {
pstmtUpdate_tOracleOutput_1.setNull(14, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tOracleOutput_1.setDouble(14, row15.PORC_TRIM_3);
}

                        if(row15.CAT_PORC_TRIM_3 == null) {
pstmtUpdate_tOracleOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(15, row15.CAT_PORC_TRIM_3);
}

                        if(row15.PORC_TRIM_4 == null) {
pstmtUpdate_tOracleOutput_1.setNull(16, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tOracleOutput_1.setDouble(16, row15.PORC_TRIM_4);
}

                        if(row15.CAT_PORC_TRIM_4 == null) {
pstmtUpdate_tOracleOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(17, row15.CAT_PORC_TRIM_4);
}

                        if(row15.PORC_ANUAL == null) {
pstmtUpdate_tOracleOutput_1.setNull(18, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tOracleOutput_1.setDouble(18, row15.PORC_ANUAL);
}

                        if(row15.CAT_PORC_ANUAL == null) {
pstmtUpdate_tOracleOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(19, row15.CAT_PORC_ANUAL);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(20, row15.ESTREGISTRO_ID);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(21 + count_tOracleOutput_1, row15.ID);

                try {
                    int processedCount_tOracleOutput_1 = pstmtUpdate_tOracleOutput_1.executeUpdate();
                    updatedCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    rowsToCommitCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    nb_line_tOracleOutput_1++;
                } catch(java.lang.Exception e_tOracleOutput_1) {
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
                    whetherReject_tOracleOutput_1 = true;
                        nb_line_tOracleOutput_1++;
                            System.err.print(e_tOracleOutput_1.getMessage());
                }
            } else {
                        pstmtInsert_tOracleOutput_1.setBigDecimal(1, row15.ID);

                        pstmtInsert_tOracleOutput_1.setInt(2, row15.VIGENCIA);

                        if(row15.REGIONAL == null) {
pstmtInsert_tOracleOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(3, row15.REGIONAL);
}

                        if(row15.FUERZA == null) {
pstmtInsert_tOracleOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(4, row15.FUERZA);
}

                        if(row15.ESM == null) {
pstmtInsert_tOracleOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(5, row15.ESM);
}

                        if(row15.SUBPROGRAMA == null) {
pstmtInsert_tOracleOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(6, row15.SUBPROGRAMA);
}

                        if(row15.ACTIVIDAD == null) {
pstmtInsert_tOracleOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(7, row15.ACTIVIDAD);
}

                        if(row15.PORC_ANUAL_ACTIVIDAD == null) {
pstmtInsert_tOracleOutput_1.setNull(8, java.sql.Types.DOUBLE);
} else {pstmtInsert_tOracleOutput_1.setDouble(8, row15.PORC_ANUAL_ACTIVIDAD);
}

                        if(row15.CAT_PORC_ANUAL_ACT == null) {
pstmtInsert_tOracleOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(9, row15.CAT_PORC_ANUAL_ACT);
}

                        if(row15.FORMATO == null) {
pstmtInsert_tOracleOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(10, row15.FORMATO);
}

                        if(row15.PORC_TRIM_1 == null) {
pstmtInsert_tOracleOutput_1.setNull(11, java.sql.Types.DOUBLE);
} else {pstmtInsert_tOracleOutput_1.setDouble(11, row15.PORC_TRIM_1);
}

                        if(row15.CAT_PORC_TRIM_1 == null) {
pstmtInsert_tOracleOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(12, row15.CAT_PORC_TRIM_1);
}

                        if(row15.PORC_TRIM_2 == null) {
pstmtInsert_tOracleOutput_1.setNull(13, java.sql.Types.DOUBLE);
} else {pstmtInsert_tOracleOutput_1.setDouble(13, row15.PORC_TRIM_2);
}

                        if(row15.CAT_PORC_TRIM_2 == null) {
pstmtInsert_tOracleOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(14, row15.CAT_PORC_TRIM_2);
}

                        if(row15.PORC_TRIM_3 == null) {
pstmtInsert_tOracleOutput_1.setNull(15, java.sql.Types.DOUBLE);
} else {pstmtInsert_tOracleOutput_1.setDouble(15, row15.PORC_TRIM_3);
}

                        if(row15.CAT_PORC_TRIM_3 == null) {
pstmtInsert_tOracleOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(16, row15.CAT_PORC_TRIM_3);
}

                        if(row15.PORC_TRIM_4 == null) {
pstmtInsert_tOracleOutput_1.setNull(17, java.sql.Types.DOUBLE);
} else {pstmtInsert_tOracleOutput_1.setDouble(17, row15.PORC_TRIM_4);
}

                        if(row15.CAT_PORC_TRIM_4 == null) {
pstmtInsert_tOracleOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(18, row15.CAT_PORC_TRIM_4);
}

                        if(row15.PORC_ANUAL == null) {
pstmtInsert_tOracleOutput_1.setNull(19, java.sql.Types.DOUBLE);
} else {pstmtInsert_tOracleOutput_1.setDouble(19, row15.PORC_ANUAL);
}

                        if(row15.CAT_PORC_ANUAL == null) {
pstmtInsert_tOracleOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(20, row15.CAT_PORC_ANUAL);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(21, row15.ESTREGISTRO_ID);

                try {
                    int processedCount_tOracleOutput_1 = pstmtInsert_tOracleOutput_1.executeUpdate();
                    insertedCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    rowsToCommitCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    nb_line_tOracleOutput_1++;
                } catch(java.lang.Exception e_tOracleOutput_1) {
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
                    whetherReject_tOracleOutput_1 = true;
                        nb_line_tOracleOutput_1++;
                            System.err.print(e_tOracleOutput_1.getMessage());
                }
            }
            if(!whetherReject_tOracleOutput_1) {
            }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	

 



/**
 * [tSortRow_1_SortIn process_data_end ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	


}

globalMap.put("tSortRow_1_SortIn_NB_LINE",nb_line_tSortRow_1_SortIn);

 

ok_Hash.put("tSortRow_1_SortIn", true);
end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_1_SortIn end ] stop
 */

	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(pstmtUpdate_tOracleOutput_1 != null){
            pstmtUpdate_tOracleOutput_1.close();
            resourceMap.remove("pstmtUpdate_tOracleOutput_1");
        }
        if(pstmtInsert_tOracleOutput_1 != null){
            pstmtInsert_tOracleOutput_1.close();
            resourceMap.remove("pstmtInsert_tOracleOutput_1");
        }
        if(pstmt_tOracleOutput_1 != null) {
            pstmt_tOracleOutput_1.close();
            resourceMap.remove("pstmt_tOracleOutput_1");
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tOracleInput_9Process(globalMap);



/**
 * [tOracleOutput_1 end ] stop
 */
















































				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tSortRow_1_SortIn"
							globalMap.remove("tSortRow_1");
						      	
					      			//free memory for "tIntervalMatch_6"
									globalMap.remove("tHash_row17");
				      			      	
					      			//free memory for "tIntervalMatch_5"
									globalMap.remove("tHash_row13");
				      			      	
					      			//free memory for "tIntervalMatch_4"
									globalMap.remove("tHash_row11");
				      			      	
					      			//free memory for "tIntervalMatch_3"
									globalMap.remove("tHash_row9");
				      			      	
					      			//free memory for "tIntervalMatch_2"
									globalMap.remove("tHash_row5");
				      			      	
					      			//free memory for "tIntervalMatch_1"
									globalMap.remove("tHash_row4");
				      			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tIntervalMatch_1 finally ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_1";
	
	

 



/**
 * [tIntervalMatch_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tIntervalMatch_2 finally ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_2";
	
	

 



/**
 * [tIntervalMatch_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tIntervalMatch_3 finally ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_3";
	
	

 



/**
 * [tIntervalMatch_3 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tIntervalMatch_4 finally ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_4";
	
	

 



/**
 * [tIntervalMatch_4 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tIntervalMatch_5 finally ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_5";
	
	

 



/**
 * [tIntervalMatch_5 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tIntervalMatch_6 finally ] start
	 */

	

	
	
	currentComponent="tIntervalMatch_6";
	
	

 



/**
 * [tIntervalMatch_6 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	

 



/**
 * [tSortRow_1_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	

 



/**
 * [tSortRow_1_SortIn finally ] stop
 */

	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tOracleOutput_1 = null;
                if ((pstmtUpdateToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tOracleOutput_1")) != null) {
                    pstmtUpdateToClose_tOracleOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tOracleOutput_1 = null;
                if ((pstmtInsertToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tOracleOutput_1")) != null) {
                    pstmtInsertToClose_tOracleOutput_1.close();
                }
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */
















































				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String RANGO;

				public String getRANGO () {
					return this.RANGO;
				}

				public Boolean RANGOIsNullable(){
				    return true;
				}
				public Boolean RANGOIsKey(){
				    return false;
				}
				public Integer RANGOLength(){
				    return 83;
				}
				public Integer RANGOPrecision(){
				    return 0;
				}
				public String RANGODefault(){
				
					return null;
				
				}
				public String RANGOComment(){
				
				    return "";
				
				}
				public String RANGOPattern(){
				
					return "";
				
				}
				public String RANGOOriginalDbColumnName(){
				
					return "RANGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row18Struct other = (row18Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row18Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.RANGO = this.RANGO;
	            
	}

	public void copyKeysDataTo(row18Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.RANGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.RANGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.RANGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.RANGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",RANGO="+RANGO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row18Struct row18 = new row18Struct();




	
	/**
	 * [tOracleOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_2", false);
		start_Hash.put("tOracleOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tOracleOutput_2 = 0;
		






        int updateKeyCount_tOracleOutput_2 = 1;
        if(updateKeyCount_tOracleOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_2 == 3 && true) {
                    System.err.println("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_2 = 0;
    int nb_line_update_tOracleOutput_2 = 0;
    int nb_line_inserted_tOracleOutput_2 = 0;
    int nb_line_deleted_tOracleOutput_2 = 0;
    int nb_line_rejected_tOracleOutput_2 = 0;

    int tmp_batchUpdateCount_tOracleOutput_2 = 0;

    int deletedCount_tOracleOutput_2=0;
    int updatedCount_tOracleOutput_2=0;
    int insertedCount_tOracleOutput_2=0;
    int rowsToCommitCount_tOracleOutput_2=0;
    int rejectedCount_tOracleOutput_2=0;

    boolean whetherReject_tOracleOutput_2 = false;

    java.sql.Connection conn_tOracleOutput_2 = null;

    //optional table
    String dbschema_tOracleOutput_2 = null;
    String tableName_tOracleOutput_2 = null;
        dbschema_tOracleOutput_2 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_2=0;

        if(dbschema_tOracleOutput_2 == null || dbschema_tOracleOutput_2.trim().length() == 0) {
            tableName_tOracleOutput_2 = ("BAMB_PARAMETRIZACION");
        } else {
            tableName_tOracleOutput_2 = dbschema_tOracleOutput_2 + "." + ("BAMB_PARAMETRIZACION");
        }
                java.sql.PreparedStatement pstmt_tOracleOutput_2 = conn_tOracleOutput_2.prepareStatement("SELECT COUNT(1) FROM " + tableName_tOracleOutput_2 + " WHERE ID = ?");
                resourceMap.put("pstmt_tOracleOutput_2", pstmt_tOracleOutput_2);
                String insert_tOracleOutput_2 = "INSERT INTO " + tableName_tOracleOutput_2 + " (ID,NOMBRE,RANGO) VALUES (?,?,?)";    
                java.sql.PreparedStatement pstmtInsert_tOracleOutput_2 = conn_tOracleOutput_2.prepareStatement(insert_tOracleOutput_2);
                resourceMap.put("pstmtInsert_tOracleOutput_2", pstmtInsert_tOracleOutput_2);
                String update_tOracleOutput_2 = "UPDATE " + tableName_tOracleOutput_2 + " SET NOMBRE = ?,RANGO = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmtUpdate_tOracleOutput_2 = conn_tOracleOutput_2.prepareStatement(update_tOracleOutput_2);
                resourceMap.put("pstmtUpdate_tOracleOutput_2", pstmtUpdate_tOracleOutput_2);





 



/**
 * [tOracleOutput_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_9", false);
		start_Hash.put("tOracleInput_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_9";
	
	
		int tos_count_tOracleInput_9 = 0;
		
	


	
		    int nb_line_tOracleInput_9 = 0;
		    java.sql.Connection conn_tOracleInput_9 = null;
				conn_tOracleInput_9 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_9 = false;
				boolean isConnectionWrapped_tOracleInput_9 = !(conn_tOracleInput_9 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_9.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_9 = null;
                if (isConnectionWrapped_tOracleInput_9) {
					unwrappedOraConn_tOracleInput_9 = conn_tOracleInput_9.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_9 != null) {
                        isTimeZoneNull_tOracleInput_9 = (unwrappedOraConn_tOracleInput_9.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_9 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_9).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_9) {
					java.sql.Statement stmtGetTZ_tOracleInput_9 = conn_tOracleInput_9.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_9 = stmtGetTZ_tOracleInput_9.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_9 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_9.next()) {
						sessionTimezone_tOracleInput_9 = rsGetTZ_tOracleInput_9.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_9 && unwrappedOraConn_tOracleInput_9 != null) {
                        unwrappedOraConn_tOracleInput_9.setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_9).setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_9 = conn_tOracleInput_9.createStatement();

		    String dbquery_tOracleInput_9 = "select APA.ID \n       ,APA.NOMBRE AS NOMBRE\n      ,(ROUND(APA.VMINIMO,1)||' - '||ROUND(APA.VMAXIMO,1)) AS RANGO\nfrom"
+" amb_parametrizacion APA \nWHERE APA.TPARAMETRIZACION = '2'\n  AND APA.ESTADO = 'Activo'\n  AND APA.ESTREGISTRO_ID = 1\n"
+"ORDER BY ID";
		    

		    globalMap.put("tOracleInput_9_QUERY",dbquery_tOracleInput_9);

		    java.sql.ResultSet rs_tOracleInput_9 = null;

		    try {
		    	rs_tOracleInput_9 = stmt_tOracleInput_9.executeQuery(dbquery_tOracleInput_9);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_9 = rs_tOracleInput_9.getMetaData();
		    	int colQtyInRs_tOracleInput_9 = rsmd_tOracleInput_9.getColumnCount();

		    String tmpContent_tOracleInput_9 = null;
		    
		    
		    while (rs_tOracleInput_9.next()) {
		        nb_line_tOracleInput_9++;
		        
							if(colQtyInRs_tOracleInput_9 < 1) {
								row18.ID = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(1) != null) {
						row18.ID = rs_tOracleInput_9.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 2) {
								row18.NOMBRE = null;
							} else {
	                         		
        	row18.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_9, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_9 < 3) {
								row18.RANGO = null;
							} else {
	                         		
        	row18.RANGO = routines.system.JDBCUtil.getString(rs_tOracleInput_9, 3, false);
		                    }
					




 



/**
 * [tOracleInput_9 begin ] stop
 */
	
	/**
	 * [tOracleInput_9 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 


	tos_count_tOracleInput_9++;

/**
 * [tOracleInput_9 main ] stop
 */
	
	/**
	 * [tOracleInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					



        whetherReject_tOracleOutput_2 = false;
                    pstmt_tOracleOutput_2.setBigDecimal(1, row18.ID);

            int checkCount_tOracleOutput_2 = -1;
            try (java.sql.ResultSet rs_tOracleOutput_2 = pstmt_tOracleOutput_2.executeQuery()) {
                while(rs_tOracleOutput_2.next()) {
                    checkCount_tOracleOutput_2 = rs_tOracleOutput_2.getInt(1);
                }
            }
            if(checkCount_tOracleOutput_2 > 0) {
                        if(row18.NOMBRE == null) {
pstmtUpdate_tOracleOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_2.setString(1, row18.NOMBRE);
}

                        if(row18.RANGO == null) {
pstmtUpdate_tOracleOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_2.setString(2, row18.RANGO);
}

                        pstmtUpdate_tOracleOutput_2.setBigDecimal(3 + count_tOracleOutput_2, row18.ID);

                try {
                    int processedCount_tOracleOutput_2 = pstmtUpdate_tOracleOutput_2.executeUpdate();
                    updatedCount_tOracleOutput_2 += processedCount_tOracleOutput_2;
                    rowsToCommitCount_tOracleOutput_2 += processedCount_tOracleOutput_2;
                    nb_line_tOracleOutput_2++;
                } catch(java.lang.Exception e_tOracleOutput_2) {
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
                    whetherReject_tOracleOutput_2 = true;
                        nb_line_tOracleOutput_2++;
                            System.err.print(e_tOracleOutput_2.getMessage());
                }
            } else {
                        pstmtInsert_tOracleOutput_2.setBigDecimal(1, row18.ID);

                        if(row18.NOMBRE == null) {
pstmtInsert_tOracleOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_2.setString(2, row18.NOMBRE);
}

                        if(row18.RANGO == null) {
pstmtInsert_tOracleOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_2.setString(3, row18.RANGO);
}

                try {
                    int processedCount_tOracleOutput_2 = pstmtInsert_tOracleOutput_2.executeUpdate();
                    insertedCount_tOracleOutput_2 += processedCount_tOracleOutput_2;
                    rowsToCommitCount_tOracleOutput_2 += processedCount_tOracleOutput_2;
                    nb_line_tOracleOutput_2++;
                } catch(java.lang.Exception e_tOracleOutput_2) {
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
                    whetherReject_tOracleOutput_2 = true;
                        nb_line_tOracleOutput_2++;
                            System.err.print(e_tOracleOutput_2.getMessage());
                }
            }

 


	tos_count_tOracleOutput_2++;

/**
 * [tOracleOutput_2 main ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_9 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

}
}finally{
	if (rs_tOracleInput_9 != null) {
		rs_tOracleInput_9.close();
	}
	if (stmt_tOracleInput_9 != null) {
		stmt_tOracleInput_9.close();
	}
}

globalMap.put("tOracleInput_9_NB_LINE",nb_line_tOracleInput_9);
 

ok_Hash.put("tOracleInput_9", true);
end_Hash.put("tOracleInput_9", System.currentTimeMillis());




/**
 * [tOracleInput_9 end ] stop
 */

	
	/**
	 * [tOracleOutput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
	



	
        if(pstmtUpdate_tOracleOutput_2 != null){
            pstmtUpdate_tOracleOutput_2.close();
            resourceMap.remove("pstmtUpdate_tOracleOutput_2");
        }
        if(pstmtInsert_tOracleOutput_2 != null){
            pstmtInsert_tOracleOutput_2.close();
            resourceMap.remove("pstmtInsert_tOracleOutput_2");
        }
        if(pstmt_tOracleOutput_2 != null) {
            pstmt_tOracleOutput_2.close();
            resourceMap.remove("pstmt_tOracleOutput_2");
        }
    resourceMap.put("statementClosed_tOracleOutput_2", true);

	
	nb_line_deleted_tOracleOutput_2=nb_line_deleted_tOracleOutput_2+ deletedCount_tOracleOutput_2;
	nb_line_update_tOracleOutput_2=nb_line_update_tOracleOutput_2 + updatedCount_tOracleOutput_2;
	nb_line_inserted_tOracleOutput_2=nb_line_inserted_tOracleOutput_2 + insertedCount_tOracleOutput_2;
	nb_line_rejected_tOracleOutput_2=nb_line_rejected_tOracleOutput_2 + rejectedCount_tOracleOutput_2;
	
        globalMap.put("tOracleOutput_2_NB_LINE",nb_line_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_UPDATED",nb_line_update_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_2);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_2", true);
end_Hash.put("tOracleOutput_2", System.currentTimeMillis());




/**
 * [tOracleOutput_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 finally ] stop
 */

	
	/**
	 * [tOracleOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_2") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tOracleOutput_2 = null;
                if ((pstmtUpdateToClose_tOracleOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tOracleOutput_2")) != null) {
                    pstmtUpdateToClose_tOracleOutput_2.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tOracleOutput_2 = null;
                if ((pstmtInsertToClose_tOracleOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tOracleOutput_2")) != null) {
                    pstmtInsertToClose_tOracleOutput_2.close();
                }
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_2 = null;
                if ((pstmtToClose_tOracleOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_2")) != null) {
                    pstmtToClose_tOracleOutput_2.close();
                }
    }
 



/**
 * [tOracleOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ACTIVIDADES_ID;

				public BigDecimal getACTIVIDADES_ID () {
					return this.ACTIVIDADES_ID;
				}

				public Boolean ACTIVIDADES_IDIsNullable(){
				    return false;
				}
				public Boolean ACTIVIDADES_IDIsKey(){
				    return false;
				}
				public Integer ACTIVIDADES_IDLength(){
				    return null;
				}
				public Integer ACTIVIDADES_IDPrecision(){
				    return null;
				}
				public String ACTIVIDADES_IDDefault(){
				
					return "";
				
				}
				public String ACTIVIDADES_IDComment(){
				
				    return "";
				
				}
				public String ACTIVIDADES_IDPattern(){
				
					return "";
				
				}
				public String ACTIVIDADES_IDOriginalDbColumnName(){
				
					return "ACTIVIDADES_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public int VIGENCIA;

				public int getVIGENCIA () {
					return this.VIGENCIA;
				}

				public Boolean VIGENCIAIsNullable(){
				    return false;
				}
				public Boolean VIGENCIAIsKey(){
				    return false;
				}
				public Integer VIGENCIALength(){
				    return null;
				}
				public Integer VIGENCIAPrecision(){
				    return null;
				}
				public String VIGENCIADefault(){
				
					return "";
				
				}
				public String VIGENCIAComment(){
				
				    return "";
				
				}
				public String VIGENCIAPattern(){
				
					return "";
				
				}
				public String VIGENCIAOriginalDbColumnName(){
				
					return "VIGENCIA";
				
				}

				
			    public Double PORC_TRIM_1;

				public Double getPORC_TRIM_1 () {
					return this.PORC_TRIM_1;
				}

				public Boolean PORC_TRIM_1IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_1IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_1Length(){
				    return null;
				}
				public Integer PORC_TRIM_1Precision(){
				    return null;
				}
				public String PORC_TRIM_1Default(){
				
					return "";
				
				}
				public String PORC_TRIM_1Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_1Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_1OriginalDbColumnName(){
				
					return "PORC_TRIM_1";
				
				}

				
			    public Double PORC_TRIM_2;

				public Double getPORC_TRIM_2 () {
					return this.PORC_TRIM_2;
				}

				public Boolean PORC_TRIM_2IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_2IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_2Length(){
				    return null;
				}
				public Integer PORC_TRIM_2Precision(){
				    return null;
				}
				public String PORC_TRIM_2Default(){
				
					return "";
				
				}
				public String PORC_TRIM_2Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_2Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_2OriginalDbColumnName(){
				
					return "PORC_TRIM_2";
				
				}

				
			    public Double PORC_TRIM_3;

				public Double getPORC_TRIM_3 () {
					return this.PORC_TRIM_3;
				}

				public Boolean PORC_TRIM_3IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_3IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_3Length(){
				    return null;
				}
				public Integer PORC_TRIM_3Precision(){
				    return null;
				}
				public String PORC_TRIM_3Default(){
				
					return "";
				
				}
				public String PORC_TRIM_3Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_3Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_3OriginalDbColumnName(){
				
					return "PORC_TRIM_3";
				
				}

				
			    public Double PORC_TRIM_4;

				public Double getPORC_TRIM_4 () {
					return this.PORC_TRIM_4;
				}

				public Boolean PORC_TRIM_4IsNullable(){
				    return true;
				}
				public Boolean PORC_TRIM_4IsKey(){
				    return false;
				}
				public Integer PORC_TRIM_4Length(){
				    return null;
				}
				public Integer PORC_TRIM_4Precision(){
				    return null;
				}
				public String PORC_TRIM_4Default(){
				
					return "";
				
				}
				public String PORC_TRIM_4Comment(){
				
				    return "";
				
				}
				public String PORC_TRIM_4Pattern(){
				
					return "";
				
				}
				public String PORC_TRIM_4OriginalDbColumnName(){
				
					return "PORC_TRIM_4";
				
				}

				
			    public Double PORC_ANUAL;

				public Double getPORC_ANUAL () {
					return this.PORC_ANUAL;
				}

				public Boolean PORC_ANUALIsNullable(){
				    return true;
				}
				public Boolean PORC_ANUALIsKey(){
				    return false;
				}
				public Integer PORC_ANUALLength(){
				    return null;
				}
				public Integer PORC_ANUALPrecision(){
				    return null;
				}
				public String PORC_ANUALDefault(){
				
					return "";
				
				}
				public String PORC_ANUALComment(){
				
				    return "";
				
				}
				public String PORC_ANUALPattern(){
				
					return "";
				
				}
				public String PORC_ANUALOriginalDbColumnName(){
				
					return "PORC_ANUAL";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ACTIVIDADES_ID == null) ? 0 : this.ACTIVIDADES_ID.hashCode());
					
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
							result = prime * result + (int) this.VIGENCIA;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.ACTIVIDADES_ID == null) {
							if (other.ACTIVIDADES_ID != null)
								return false;
						
						} else if (!this.ACTIVIDADES_ID.equals(other.ACTIVIDADES_ID))
						
							return false;
					
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					
						if (this.VIGENCIA != other.VIGENCIA)
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.ACTIVIDADES_ID = this.ACTIVIDADES_ID;
	            other.UORG_ID = this.UORG_ID;
	            other.VIGENCIA = this.VIGENCIA;
	            other.PORC_TRIM_1 = this.PORC_TRIM_1;
	            other.PORC_TRIM_2 = this.PORC_TRIM_2;
	            other.PORC_TRIM_3 = this.PORC_TRIM_3;
	            other.PORC_TRIM_4 = this.PORC_TRIM_4;
	            other.PORC_ANUAL = this.PORC_ANUAL;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.ACTIVIDADES_ID = this.ACTIVIDADES_ID;
	            	other.UORG_ID = this.UORG_ID;
	            	other.VIGENCIA = this.VIGENCIA;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ACTIVIDADES_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
						this.ACTIVIDADES_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
			        this.VIGENCIA = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ACTIVIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ACTIVIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// int
				
		            	dos.writeInt(this.VIGENCIA);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_1 = null;
           				} else {
           			    	this.PORC_TRIM_1 = objectIn.readDouble();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_2 = null;
           				} else {
           			    	this.PORC_TRIM_2 = objectIn.readDouble();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_3 = null;
           				} else {
           			    	this.PORC_TRIM_3 = objectIn.readDouble();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.PORC_TRIM_4 = null;
           				} else {
           			    	this.PORC_TRIM_4 = objectIn.readDouble();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.PORC_ANUAL = null;
           				} else {
           			    	this.PORC_ANUAL = objectIn.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.PORC_TRIM_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_1);
		            	}
					
						if(this.PORC_TRIM_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_2);
		            	}
					
						if(this.PORC_TRIM_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_3);
		            	}
					
						if(this.PORC_TRIM_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_TRIM_4);
		            	}
					
						if(this.PORC_ANUAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PORC_ANUAL);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						if(this.PORC_TRIM_1 == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.PORC_TRIM_1);
		            	}
					
						if(this.PORC_TRIM_2 == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.PORC_TRIM_2);
		            	}
					
						if(this.PORC_TRIM_3 == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.PORC_TRIM_3);
		            	}
					
						if(this.PORC_TRIM_4 == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.PORC_TRIM_4);
		            	}
					
						if(this.PORC_ANUAL == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.PORC_ANUAL);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ACTIVIDADES_ID="+String.valueOf(ACTIVIDADES_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",VIGENCIA="+String.valueOf(VIGENCIA));
		sb.append(",PORC_TRIM_1="+String.valueOf(PORC_TRIM_1));
		sb.append(",PORC_TRIM_2="+String.valueOf(PORC_TRIM_2));
		sb.append(",PORC_TRIM_3="+String.valueOf(PORC_TRIM_3));
		sb.append(",PORC_TRIM_4="+String.valueOf(PORC_TRIM_4));
		sb.append(",PORC_ANUAL="+String.valueOf(PORC_ANUAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ACTIVIDADES_ID, other.ACTIVIDADES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.VIGENCIA, other.VIGENCIA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tOracleInput_1 - inputs:(after_tOracleInput_2) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
                if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_1 != null) {
                        isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
                        unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement();

		    String dbquery_tOracleInput_1 = "SELECT\n  ADA.ACTIVIDADES_ID  ,\n  ADA.UORG_ID  ,\n  AIF.VIGENCIA ,\n  CASE\n    WHEN SUM(AIF.CANTT1) IS NULL\n    THEN"
+" NULL\n    WHEN SUM(AIF.CANTT1) = 0\n    THEN NULL\n    ELSE ROUND(((SUM(AIF.EJECUTADAT1)*100)/SUM(AIF.CANTT1)),1)\n  EN"
+"D AS PORC_TRIM_1 ,\n    CASE\n    WHEN SUM(AIF.CANTT2) IS NULL\n    THEN NULL\n    WHEN SUM(AIF.CANTT2) = 0\n    THEN NU"
+"LL\n    ELSE ROUND(((SUM(AIF.EJECUTADAT2)*100)/SUM(AIF.CANTT2)),1)\n  END AS PORC_TRIM_2 ,\n  CASE\n    WHEN SUM(AIF.CAN"
+"TT3) IS NULL\n    THEN NULL\n    WHEN SUM(AIF.CANTT3) = 0\n    THEN NULL\n    ELSE ROUND(((SUM(AIF.EJECUTADAT3)*100)/SUM"
+"(AIF.CANTT3)),1)\n  END AS PORC_TRIM_3 ,\n  CASE\n     WHEN SUM(AIF.CANTT4) IS NULL\n     THEN NULL\n     WHEN SUM(AIF.C"
+"ANTT4) = 0\n     THEN NULL\n     ELSE ROUND(((SUM(AIF.EJECUTADAT4)*100)/SUM(AIF.CANTT4)),1)\n END AS PORC_TRIM_4 ,   \n "
+"CASE\n     WHEN (SUM(AIF.CANTT1)+SUM(AIF.CANTT2)+SUM(AIF.CANTT3)+SUM(AIF.CANTT4)) IS NULL\n     THEN NULL\n     WHEN (SU"
+"M(AIF.CANTT1)+SUM(AIF.CANTT2)+SUM(AIF.CANTT3)+SUM(AIF.CANTT4)) = 0\n     THEN NULL\n     ELSE ROUND((((SUM(AIF.EJECUTADA"
+"T1)+SUM(AIF.EJECUTADAT2)+SUM(AIF.EJECUTADAT3)+SUM(AIF.EJECUTADAT4))*100)\n          /(SUM(AIF.CANTT1)+SUM(AIF.CANTT2)+SU"
+"M(AIF.CANTT3)+SUM(AIF.CANTT4))),1)\n END AS PORC_ANUAL\n FROM AMB_INDICADORFORMATOS AIF\n INNER JOIN AMB_DACTIVIDADES AD"
+"A ON ADA.ID = AIF.DACTIVIDADES_ID AND ADA.ESTREGISTRO_ID   = 1 \n INNER JOIN AMB_ACTIVIDADES AA ON AA.ID  = ADA.ACTIVIDA"
+"DES_ID AND AA.ESTREGISTRO_ID = 1 \n"+context.INNER_HDAC+"\nWHERE \n  "+context.CONDITION+"  \n  AIF.ESTREGISTRO_ID = 1 \n  AND AIF.VIGENCIA = "+context.Anio+"\nGROUP BY ADA.ACTIVIDADES_ID, ADA.UORG_ID, AIF.VIGENCIA";
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row2.ACTIVIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row2.ACTIVIDADES_ID = rs_tOracleInput_1.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row2.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(2) != null) {
						row2.UORG_ID = rs_tOracleInput_1.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 3) {
								row2.VIGENCIA = 0;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(3) != null) {
						row2.VIGENCIA = rs_tOracleInput_1.getInt(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 4) {
								row2.PORC_TRIM_1 = null;
							} else {
	                         		
				row2.PORC_TRIM_1 = routines.system.JDBCUtil.getDoubleObject(rs_tOracleInput_1, 4);
		                    }
							if(colQtyInRs_tOracleInput_1 < 5) {
								row2.PORC_TRIM_2 = null;
							} else {
	                         		
				row2.PORC_TRIM_2 = routines.system.JDBCUtil.getDoubleObject(rs_tOracleInput_1, 5);
		                    }
							if(colQtyInRs_tOracleInput_1 < 6) {
								row2.PORC_TRIM_3 = null;
							} else {
	                         		
				row2.PORC_TRIM_3 = routines.system.JDBCUtil.getDoubleObject(rs_tOracleInput_1, 6);
		                    }
							if(colQtyInRs_tOracleInput_1 < 7) {
								row2.PORC_TRIM_4 = null;
							} else {
	                         		
				row2.PORC_TRIM_4 = routines.system.JDBCUtil.getDoubleObject(rs_tOracleInput_1, 7);
		                    }
							if(colQtyInRs_tOracleInput_1 < 8) {
								row2.PORC_ANUAL = null;
							} else {
	                         		
				row2.PORC_ANUAL = routines.system.JDBCUtil.getDoubleObject(rs_tOracleInput_1, 8);
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.ACTIVIDADES_ID = row2.ACTIVIDADES_ID;
				
				row2_HashRow.UORG_ID = row2.UORG_ID;
				
				row2_HashRow.VIGENCIA = row2.VIGENCIA;
				
				row2_HashRow.PORC_TRIM_1 = row2.PORC_TRIM_1;
				
				row2_HashRow.PORC_TRIM_2 = row2.PORC_TRIM_2;
				
				row2_HashRow.PORC_TRIM_3 = row2.PORC_TRIM_3;
				
				row2_HashRow.PORC_TRIM_4 = row2.PORC_TRIM_4;
				
				row2_HashRow.PORC_ANUAL = row2.PORC_ANUAL;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];

	
			    public double VMAXIMO;

				public double getVMAXIMO () {
					return this.VMAXIMO;
				}

				public Boolean VMAXIMOIsNullable(){
				    return false;
				}
				public Boolean VMAXIMOIsKey(){
				    return false;
				}
				public Integer VMAXIMOLength(){
				    return 0;
				}
				public Integer VMAXIMOPrecision(){
				    return null;
				}
				public String VMAXIMODefault(){
				
					return "";
				
				}
				public String VMAXIMOComment(){
				
				    return "";
				
				}
				public String VMAXIMOPattern(){
				
					return "";
				
				}
				public String VMAXIMOOriginalDbColumnName(){
				
					return "VMAXIMO";
				
				}

				
			    public double VMINIMO;

				public double getVMINIMO () {
					return this.VMINIMO;
				}

				public Boolean VMINIMOIsNullable(){
				    return false;
				}
				public Boolean VMINIMOIsKey(){
				    return false;
				}
				public Integer VMINIMOLength(){
				    return 0;
				}
				public Integer VMINIMOPrecision(){
				    return null;
				}
				public String VMINIMODefault(){
				
					return "";
				
				}
				public String VMINIMOComment(){
				
				    return "";
				
				}
				public String VMINIMOPattern(){
				
					return "";
				
				}
				public String VMINIMOOriginalDbColumnName(){
				
					return "VMINIMO";
				
				}

				
			    public String PARAMETRIZACION;

				public String getPARAMETRIZACION () {
					return this.PARAMETRIZACION;
				}

				public Boolean PARAMETRIZACIONIsNullable(){
				    return true;
				}
				public Boolean PARAMETRIZACIONIsKey(){
				    return false;
				}
				public Integer PARAMETRIZACIONLength(){
				    return 2000;
				}
				public Integer PARAMETRIZACIONPrecision(){
				    return 0;
				}
				public String PARAMETRIZACIONDefault(){
				
					return null;
				
				}
				public String PARAMETRIZACIONComment(){
				
				    return "";
				
				}
				public String PARAMETRIZACIONPattern(){
				
					return "";
				
				}
				public String PARAMETRIZACIONOriginalDbColumnName(){
				
					return "PARAMETRIZACION";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
			        this.VMAXIMO = dis.readDouble();
					
			        this.VMINIMO = dis.readDouble();
					
					this.PARAMETRIZACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
			        this.VMAXIMO = dis.readDouble();
					
			        this.VMINIMO = dis.readDouble();
					
					this.PARAMETRIZACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// double
				
		            	dos.writeDouble(this.VMAXIMO);
					
					// double
				
		            	dos.writeDouble(this.VMINIMO);
					
					// String
				
						writeString(this.PARAMETRIZACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// double
				
		            	dos.writeDouble(this.VMAXIMO);
					
					// double
				
		            	dos.writeDouble(this.VMINIMO);
					
					// String
				
						writeString(this.PARAMETRIZACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VMAXIMO="+String.valueOf(VMAXIMO));
		sb.append(",VMINIMO="+String.valueOf(VMINIMO));
		sb.append(",PARAMETRIZACION="+PARAMETRIZACION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHash_row4", false);
		start_Hash.put("tHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tHash_row4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tHash_row4 = 0;
		

				java.util.Map<row4Struct, row4Struct> tHash_row4 = new java.util.LinkedHashMap<row4Struct, row4Struct>();
	            globalMap.put("tHash_row4", tHash_row4);
			
            

 



/**
 * [tHash_row4 begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				conn_tOracleInput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_3 = false;
				boolean isConnectionWrapped_tOracleInput_3 = !(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_3 = null;
                if (isConnectionWrapped_tOracleInput_3) {
					unwrappedOraConn_tOracleInput_3 = conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_3 != null) {
                        isTimeZoneNull_tOracleInput_3 = (unwrappedOraConn_tOracleInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_3 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_3) {
					java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_3.next()) {
						sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_3 && unwrappedOraConn_tOracleInput_3 != null) {
                        unwrappedOraConn_tOracleInput_3.setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement();

		    String dbquery_tOracleInput_3 = "SELECT \n APA.VMAXIMO ,\nAPA.VMINIMO ,\nAPA.NOMBRE  as PARAMETRIZACION\n  FROM AMB_PARAMETRIZACION APA\n  WHERE APA.EST"
+"REGISTRO_ID = 1\n  AND APA.TPARAMETRIZACION = '2'";
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row4.VMAXIMO = 0;
							} else {
	                         		
				row4.VMAXIMO = routines.system.JDBCUtil.getDouble(rs_tOracleInput_3, 1);
		                    }
							if(colQtyInRs_tOracleInput_3 < 2) {
								row4.VMINIMO = 0;
							} else {
	                         		
				row4.VMINIMO = routines.system.JDBCUtil.getDouble(rs_tOracleInput_3, 2);
		                    }
							if(colQtyInRs_tOracleInput_3 < 3) {
								row4.PARAMETRIZACION = null;
							} else {
	                         		
        	row4.PARAMETRIZACION = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 3, false);
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tHash_row4 main ] start
	 */

	

	
	
	currentComponent="tHash_row4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

row4Struct row4_HashRow = new row4Struct();

					row4_HashRow.VMAXIMO = row4.VMAXIMO;
					row4_HashRow.VMINIMO = row4.VMINIMO;
					row4_HashRow.PARAMETRIZACION = row4.PARAMETRIZACION;
tHash_row4.put(row4_HashRow, row4_HashRow);


 


	tos_count_tHash_row4++;

/**
 * [tHash_row4 main ] stop
 */
	
	/**
	 * [tHash_row4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHash_row4";
	
	

 



/**
 * [tHash_row4 process_data_begin ] stop
 */
	
	/**
	 * [tHash_row4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHash_row4";
	
	

 



/**
 * [tHash_row4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tHash_row4 end ] start
	 */

	

	
	
	currentComponent="tHash_row4";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tHash_row4", true);
end_Hash.put("tHash_row4", System.currentTimeMillis());




/**
 * [tHash_row4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tHash_row4";
	
	

 



/**
 * [tHash_row4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];

	
			    public double VMAXIMO;

				public double getVMAXIMO () {
					return this.VMAXIMO;
				}

				public Boolean VMAXIMOIsNullable(){
				    return false;
				}
				public Boolean VMAXIMOIsKey(){
				    return false;
				}
				public Integer VMAXIMOLength(){
				    return 0;
				}
				public Integer VMAXIMOPrecision(){
				    return null;
				}
				public String VMAXIMODefault(){
				
					return "";
				
				}
				public String VMAXIMOComment(){
				
				    return "";
				
				}
				public String VMAXIMOPattern(){
				
					return "";
				
				}
				public String VMAXIMOOriginalDbColumnName(){
				
					return "VMAXIMO";
				
				}

				
			    public double VMINIMO;

				public double getVMINIMO () {
					return this.VMINIMO;
				}

				public Boolean VMINIMOIsNullable(){
				    return false;
				}
				public Boolean VMINIMOIsKey(){
				    return false;
				}
				public Integer VMINIMOLength(){
				    return 0;
				}
				public Integer VMINIMOPrecision(){
				    return null;
				}
				public String VMINIMODefault(){
				
					return "";
				
				}
				public String VMINIMOComment(){
				
				    return "";
				
				}
				public String VMINIMOPattern(){
				
					return "";
				
				}
				public String VMINIMOOriginalDbColumnName(){
				
					return "VMINIMO";
				
				}

				
			    public String PARAMETRIZACION;

				public String getPARAMETRIZACION () {
					return this.PARAMETRIZACION;
				}

				public Boolean PARAMETRIZACIONIsNullable(){
				    return true;
				}
				public Boolean PARAMETRIZACIONIsKey(){
				    return false;
				}
				public Integer PARAMETRIZACIONLength(){
				    return 2000;
				}
				public Integer PARAMETRIZACIONPrecision(){
				    return 0;
				}
				public String PARAMETRIZACIONDefault(){
				
					return null;
				
				}
				public String PARAMETRIZACIONComment(){
				
				    return "";
				
				}
				public String PARAMETRIZACIONPattern(){
				
					return "";
				
				}
				public String PARAMETRIZACIONOriginalDbColumnName(){
				
					return "PARAMETRIZACION";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
			        this.VMAXIMO = dis.readDouble();
					
			        this.VMINIMO = dis.readDouble();
					
					this.PARAMETRIZACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
			        this.VMAXIMO = dis.readDouble();
					
			        this.VMINIMO = dis.readDouble();
					
					this.PARAMETRIZACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// double
				
		            	dos.writeDouble(this.VMAXIMO);
					
					// double
				
		            	dos.writeDouble(this.VMINIMO);
					
					// String
				
						writeString(this.PARAMETRIZACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// double
				
		            	dos.writeDouble(this.VMAXIMO);
					
					// double
				
		            	dos.writeDouble(this.VMINIMO);
					
					// String
				
						writeString(this.PARAMETRIZACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VMAXIMO="+String.valueOf(VMAXIMO));
		sb.append(",VMINIMO="+String.valueOf(VMINIMO));
		sb.append(",PARAMETRIZACION="+PARAMETRIZACION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tHash_row5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHash_row5", false);
		start_Hash.put("tHash_row5", System.currentTimeMillis());
		
	
	currentComponent="tHash_row5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tHash_row5 = 0;
		

				java.util.Map<row5Struct, row5Struct> tHash_row5 = new java.util.LinkedHashMap<row5Struct, row5Struct>();
	            globalMap.put("tHash_row5", tHash_row5);
			
            

 



/**
 * [tHash_row5 begin ] stop
 */



	
	/**
	 * [tOracleInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_5", false);
		start_Hash.put("tOracleInput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_5";
	
	
		int tos_count_tOracleInput_5 = 0;
		
	


	
		    int nb_line_tOracleInput_5 = 0;
		    java.sql.Connection conn_tOracleInput_5 = null;
				conn_tOracleInput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_5 = false;
				boolean isConnectionWrapped_tOracleInput_5 = !(conn_tOracleInput_5 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_5 = null;
                if (isConnectionWrapped_tOracleInput_5) {
					unwrappedOraConn_tOracleInput_5 = conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_5 != null) {
                        isTimeZoneNull_tOracleInput_5 = (unwrappedOraConn_tOracleInput_5.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_5 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_5).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_5) {
					java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_5 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_5.next()) {
						sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_5 && unwrappedOraConn_tOracleInput_5 != null) {
                        unwrappedOraConn_tOracleInput_5.setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_5).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5.createStatement();

		    String dbquery_tOracleInput_5 = "SELECT \n APA.VMAXIMO ,\nAPA.VMINIMO ,\n APA.NOMBRE  as PARAMETRIZACION\n  FROM AMB_PARAMETRIZACION APA\n  WHERE APA.ES"
+"TREGISTRO_ID = 1\n  AND APA.TPARAMETRIZACION = '2'";
		    

		    globalMap.put("tOracleInput_5_QUERY",dbquery_tOracleInput_5);

		    java.sql.ResultSet rs_tOracleInput_5 = null;

		    try {
		    	rs_tOracleInput_5 = stmt_tOracleInput_5.executeQuery(dbquery_tOracleInput_5);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5.getMetaData();
		    	int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5.getColumnCount();

		    String tmpContent_tOracleInput_5 = null;
		    
		    
		    while (rs_tOracleInput_5.next()) {
		        nb_line_tOracleInput_5++;
		        
							if(colQtyInRs_tOracleInput_5 < 1) {
								row5.VMAXIMO = 0;
							} else {
	                         		
				row5.VMAXIMO = routines.system.JDBCUtil.getDouble(rs_tOracleInput_5, 1);
		                    }
							if(colQtyInRs_tOracleInput_5 < 2) {
								row5.VMINIMO = 0;
							} else {
	                         		
				row5.VMINIMO = routines.system.JDBCUtil.getDouble(rs_tOracleInput_5, 2);
		                    }
							if(colQtyInRs_tOracleInput_5 < 3) {
								row5.PARAMETRIZACION = null;
							} else {
	                         		
        	row5.PARAMETRIZACION = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 3, false);
		                    }
					




 



/**
 * [tOracleInput_5 begin ] stop
 */
	
	/**
	 * [tOracleInput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 


	tos_count_tOracleInput_5++;

/**
 * [tOracleInput_5 main ] stop
 */
	
	/**
	 * [tOracleInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tHash_row5 main ] start
	 */

	

	
	
	currentComponent="tHash_row5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

row5Struct row5_HashRow = new row5Struct();

					row5_HashRow.VMAXIMO = row5.VMAXIMO;
					row5_HashRow.VMINIMO = row5.VMINIMO;
					row5_HashRow.PARAMETRIZACION = row5.PARAMETRIZACION;
tHash_row5.put(row5_HashRow, row5_HashRow);


 


	tos_count_tHash_row5++;

/**
 * [tHash_row5 main ] stop
 */
	
	/**
	 * [tHash_row5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHash_row5";
	
	

 



/**
 * [tHash_row5 process_data_begin ] stop
 */
	
	/**
	 * [tHash_row5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHash_row5";
	
	

 



/**
 * [tHash_row5 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

}
}finally{
	if (rs_tOracleInput_5 != null) {
		rs_tOracleInput_5.close();
	}
	if (stmt_tOracleInput_5 != null) {
		stmt_tOracleInput_5.close();
	}
}

globalMap.put("tOracleInput_5_NB_LINE",nb_line_tOracleInput_5);
 

ok_Hash.put("tOracleInput_5", true);
end_Hash.put("tOracleInput_5", System.currentTimeMillis());




/**
 * [tOracleInput_5 end ] stop
 */

	
	/**
	 * [tHash_row5 end ] start
	 */

	

	
	
	currentComponent="tHash_row5";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tHash_row5", true);
end_Hash.put("tHash_row5", System.currentTimeMillis());




/**
 * [tHash_row5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 finally ] stop
 */

	
	/**
	 * [tHash_row5 finally ] start
	 */

	

	
	
	currentComponent="tHash_row5";
	
	

 



/**
 * [tHash_row5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];

	
			    public double VMAXIMO;

				public double getVMAXIMO () {
					return this.VMAXIMO;
				}

				public Boolean VMAXIMOIsNullable(){
				    return false;
				}
				public Boolean VMAXIMOIsKey(){
				    return false;
				}
				public Integer VMAXIMOLength(){
				    return 0;
				}
				public Integer VMAXIMOPrecision(){
				    return null;
				}
				public String VMAXIMODefault(){
				
					return "";
				
				}
				public String VMAXIMOComment(){
				
				    return "";
				
				}
				public String VMAXIMOPattern(){
				
					return "";
				
				}
				public String VMAXIMOOriginalDbColumnName(){
				
					return "VMAXIMO";
				
				}

				
			    public double VMINIMO;

				public double getVMINIMO () {
					return this.VMINIMO;
				}

				public Boolean VMINIMOIsNullable(){
				    return false;
				}
				public Boolean VMINIMOIsKey(){
				    return false;
				}
				public Integer VMINIMOLength(){
				    return 0;
				}
				public Integer VMINIMOPrecision(){
				    return null;
				}
				public String VMINIMODefault(){
				
					return "";
				
				}
				public String VMINIMOComment(){
				
				    return "";
				
				}
				public String VMINIMOPattern(){
				
					return "";
				
				}
				public String VMINIMOOriginalDbColumnName(){
				
					return "VMINIMO";
				
				}

				
			    public String PARAMETRIZACION;

				public String getPARAMETRIZACION () {
					return this.PARAMETRIZACION;
				}

				public Boolean PARAMETRIZACIONIsNullable(){
				    return true;
				}
				public Boolean PARAMETRIZACIONIsKey(){
				    return false;
				}
				public Integer PARAMETRIZACIONLength(){
				    return 2000;
				}
				public Integer PARAMETRIZACIONPrecision(){
				    return 0;
				}
				public String PARAMETRIZACIONDefault(){
				
					return null;
				
				}
				public String PARAMETRIZACIONComment(){
				
				    return "";
				
				}
				public String PARAMETRIZACIONPattern(){
				
					return "";
				
				}
				public String PARAMETRIZACIONOriginalDbColumnName(){
				
					return "PARAMETRIZACION";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
			        this.VMAXIMO = dis.readDouble();
					
			        this.VMINIMO = dis.readDouble();
					
					this.PARAMETRIZACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
			        this.VMAXIMO = dis.readDouble();
					
			        this.VMINIMO = dis.readDouble();
					
					this.PARAMETRIZACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// double
				
		            	dos.writeDouble(this.VMAXIMO);
					
					// double
				
		            	dos.writeDouble(this.VMINIMO);
					
					// String
				
						writeString(this.PARAMETRIZACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// double
				
		            	dos.writeDouble(this.VMAXIMO);
					
					// double
				
		            	dos.writeDouble(this.VMINIMO);
					
					// String
				
						writeString(this.PARAMETRIZACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VMAXIMO="+String.valueOf(VMAXIMO));
		sb.append(",VMINIMO="+String.valueOf(VMINIMO));
		sb.append(",PARAMETRIZACION="+PARAMETRIZACION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tHash_row9 begin ] start
	 */

	

	
		
		ok_Hash.put("tHash_row9", false);
		start_Hash.put("tHash_row9", System.currentTimeMillis());
		
	
	currentComponent="tHash_row9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tHash_row9 = 0;
		

				java.util.Map<row9Struct, row9Struct> tHash_row9 = new java.util.LinkedHashMap<row9Struct, row9Struct>();
	            globalMap.put("tHash_row9", tHash_row9);
			
            

 



/**
 * [tHash_row9 begin ] stop
 */



	
	/**
	 * [tOracleInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_6", false);
		start_Hash.put("tOracleInput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_6";
	
	
		int tos_count_tOracleInput_6 = 0;
		
	


	
		    int nb_line_tOracleInput_6 = 0;
		    java.sql.Connection conn_tOracleInput_6 = null;
				conn_tOracleInput_6 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_6 = false;
				boolean isConnectionWrapped_tOracleInput_6 = !(conn_tOracleInput_6 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_6.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_6 = null;
                if (isConnectionWrapped_tOracleInput_6) {
					unwrappedOraConn_tOracleInput_6 = conn_tOracleInput_6.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_6 != null) {
                        isTimeZoneNull_tOracleInput_6 = (unwrappedOraConn_tOracleInput_6.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_6 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_6).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_6) {
					java.sql.Statement stmtGetTZ_tOracleInput_6 = conn_tOracleInput_6.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_6 = stmtGetTZ_tOracleInput_6.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_6 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_6.next()) {
						sessionTimezone_tOracleInput_6 = rsGetTZ_tOracleInput_6.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_6 && unwrappedOraConn_tOracleInput_6 != null) {
                        unwrappedOraConn_tOracleInput_6.setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_6).setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_6 = conn_tOracleInput_6.createStatement();

		    String dbquery_tOracleInput_6 = "SELECT \n APA.VMAXIMO ,\nAPA.VMINIMO ,\n APA.NOMBRE  as PARAMETRIZACION\n  FROM AMB_PARAMETRIZACION APA\n  WHERE APA.ES"
+"TREGISTRO_ID = 1\n  AND APA.TPARAMETRIZACION = '2'";
		    

		    globalMap.put("tOracleInput_6_QUERY",dbquery_tOracleInput_6);

		    java.sql.ResultSet rs_tOracleInput_6 = null;

		    try {
		    	rs_tOracleInput_6 = stmt_tOracleInput_6.executeQuery(dbquery_tOracleInput_6);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_6 = rs_tOracleInput_6.getMetaData();
		    	int colQtyInRs_tOracleInput_6 = rsmd_tOracleInput_6.getColumnCount();

		    String tmpContent_tOracleInput_6 = null;
		    
		    
		    while (rs_tOracleInput_6.next()) {
		        nb_line_tOracleInput_6++;
		        
							if(colQtyInRs_tOracleInput_6 < 1) {
								row9.VMAXIMO = 0;
							} else {
	                         		
				row9.VMAXIMO = routines.system.JDBCUtil.getDouble(rs_tOracleInput_6, 1);
		                    }
							if(colQtyInRs_tOracleInput_6 < 2) {
								row9.VMINIMO = 0;
							} else {
	                         		
				row9.VMINIMO = routines.system.JDBCUtil.getDouble(rs_tOracleInput_6, 2);
		                    }
							if(colQtyInRs_tOracleInput_6 < 3) {
								row9.PARAMETRIZACION = null;
							} else {
	                         		
        	row9.PARAMETRIZACION = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 3, false);
		                    }
					




 



/**
 * [tOracleInput_6 begin ] stop
 */
	
	/**
	 * [tOracleInput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 


	tos_count_tOracleInput_6++;

/**
 * [tOracleInput_6 main ] stop
 */
	
	/**
	 * [tOracleInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tHash_row9 main ] start
	 */

	

	
	
	currentComponent="tHash_row9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

row9Struct row9_HashRow = new row9Struct();

					row9_HashRow.VMAXIMO = row9.VMAXIMO;
					row9_HashRow.VMINIMO = row9.VMINIMO;
					row9_HashRow.PARAMETRIZACION = row9.PARAMETRIZACION;
tHash_row9.put(row9_HashRow, row9_HashRow);


 


	tos_count_tHash_row9++;

/**
 * [tHash_row9 main ] stop
 */
	
	/**
	 * [tHash_row9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHash_row9";
	
	

 



/**
 * [tHash_row9 process_data_begin ] stop
 */
	
	/**
	 * [tHash_row9 process_data_end ] start
	 */

	

	
	
	currentComponent="tHash_row9";
	
	

 



/**
 * [tHash_row9 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

}
}finally{
	if (rs_tOracleInput_6 != null) {
		rs_tOracleInput_6.close();
	}
	if (stmt_tOracleInput_6 != null) {
		stmt_tOracleInput_6.close();
	}
}

globalMap.put("tOracleInput_6_NB_LINE",nb_line_tOracleInput_6);
 

ok_Hash.put("tOracleInput_6", true);
end_Hash.put("tOracleInput_6", System.currentTimeMillis());




/**
 * [tOracleInput_6 end ] stop
 */

	
	/**
	 * [tHash_row9 end ] start
	 */

	

	
	
	currentComponent="tHash_row9";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tHash_row9", true);
end_Hash.put("tHash_row9", System.currentTimeMillis());




/**
 * [tHash_row9 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 finally ] stop
 */

	
	/**
	 * [tHash_row9 finally ] start
	 */

	

	
	
	currentComponent="tHash_row9";
	
	

 



/**
 * [tHash_row9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];

	
			    public double VMAXIMO;

				public double getVMAXIMO () {
					return this.VMAXIMO;
				}

				public Boolean VMAXIMOIsNullable(){
				    return false;
				}
				public Boolean VMAXIMOIsKey(){
				    return false;
				}
				public Integer VMAXIMOLength(){
				    return 0;
				}
				public Integer VMAXIMOPrecision(){
				    return null;
				}
				public String VMAXIMODefault(){
				
					return "";
				
				}
				public String VMAXIMOComment(){
				
				    return "";
				
				}
				public String VMAXIMOPattern(){
				
					return "";
				
				}
				public String VMAXIMOOriginalDbColumnName(){
				
					return "VMAXIMO";
				
				}

				
			    public double VMINIMO;

				public double getVMINIMO () {
					return this.VMINIMO;
				}

				public Boolean VMINIMOIsNullable(){
				    return false;
				}
				public Boolean VMINIMOIsKey(){
				    return false;
				}
				public Integer VMINIMOLength(){
				    return 0;
				}
				public Integer VMINIMOPrecision(){
				    return null;
				}
				public String VMINIMODefault(){
				
					return "";
				
				}
				public String VMINIMOComment(){
				
				    return "";
				
				}
				public String VMINIMOPattern(){
				
					return "";
				
				}
				public String VMINIMOOriginalDbColumnName(){
				
					return "VMINIMO";
				
				}

				
			    public String PARAMETRIZACION;

				public String getPARAMETRIZACION () {
					return this.PARAMETRIZACION;
				}

				public Boolean PARAMETRIZACIONIsNullable(){
				    return true;
				}
				public Boolean PARAMETRIZACIONIsKey(){
				    return false;
				}
				public Integer PARAMETRIZACIONLength(){
				    return 2000;
				}
				public Integer PARAMETRIZACIONPrecision(){
				    return 0;
				}
				public String PARAMETRIZACIONDefault(){
				
					return null;
				
				}
				public String PARAMETRIZACIONComment(){
				
				    return "";
				
				}
				public String PARAMETRIZACIONPattern(){
				
					return "";
				
				}
				public String PARAMETRIZACIONOriginalDbColumnName(){
				
					return "PARAMETRIZACION";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
			        this.VMAXIMO = dis.readDouble();
					
			        this.VMINIMO = dis.readDouble();
					
					this.PARAMETRIZACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
			        this.VMAXIMO = dis.readDouble();
					
			        this.VMINIMO = dis.readDouble();
					
					this.PARAMETRIZACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// double
				
		            	dos.writeDouble(this.VMAXIMO);
					
					// double
				
		            	dos.writeDouble(this.VMINIMO);
					
					// String
				
						writeString(this.PARAMETRIZACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// double
				
		            	dos.writeDouble(this.VMAXIMO);
					
					// double
				
		            	dos.writeDouble(this.VMINIMO);
					
					// String
				
						writeString(this.PARAMETRIZACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VMAXIMO="+String.valueOf(VMAXIMO));
		sb.append(",VMINIMO="+String.valueOf(VMINIMO));
		sb.append(",PARAMETRIZACION="+PARAMETRIZACION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();




	
	/**
	 * [tHash_row11 begin ] start
	 */

	

	
		
		ok_Hash.put("tHash_row11", false);
		start_Hash.put("tHash_row11", System.currentTimeMillis());
		
	
	currentComponent="tHash_row11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tHash_row11 = 0;
		

				java.util.Map<row11Struct, row11Struct> tHash_row11 = new java.util.LinkedHashMap<row11Struct, row11Struct>();
	            globalMap.put("tHash_row11", tHash_row11);
			
            

 



/**
 * [tHash_row11 begin ] stop
 */



	
	/**
	 * [tOracleInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_7", false);
		start_Hash.put("tOracleInput_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_7";
	
	
		int tos_count_tOracleInput_7 = 0;
		
	


	
		    int nb_line_tOracleInput_7 = 0;
		    java.sql.Connection conn_tOracleInput_7 = null;
				conn_tOracleInput_7 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_7 = false;
				boolean isConnectionWrapped_tOracleInput_7 = !(conn_tOracleInput_7 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_7.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_7 = null;
                if (isConnectionWrapped_tOracleInput_7) {
					unwrappedOraConn_tOracleInput_7 = conn_tOracleInput_7.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_7 != null) {
                        isTimeZoneNull_tOracleInput_7 = (unwrappedOraConn_tOracleInput_7.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_7 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_7).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_7) {
					java.sql.Statement stmtGetTZ_tOracleInput_7 = conn_tOracleInput_7.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_7 = stmtGetTZ_tOracleInput_7.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_7 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_7.next()) {
						sessionTimezone_tOracleInput_7 = rsGetTZ_tOracleInput_7.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_7 && unwrappedOraConn_tOracleInput_7 != null) {
                        unwrappedOraConn_tOracleInput_7.setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_7).setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_7 = conn_tOracleInput_7.createStatement();

		    String dbquery_tOracleInput_7 = "SELECT \n APA.VMAXIMO ,\nAPA.VMINIMO ,\n APA.NOMBRE  as PARAMETRIZACION\n  FROM AMB_PARAMETRIZACION APA\n  WHERE APA.ES"
+"TREGISTRO_ID = 1\n  AND APA.TPARAMETRIZACION = '2'";
		    

		    globalMap.put("tOracleInput_7_QUERY",dbquery_tOracleInput_7);

		    java.sql.ResultSet rs_tOracleInput_7 = null;

		    try {
		    	rs_tOracleInput_7 = stmt_tOracleInput_7.executeQuery(dbquery_tOracleInput_7);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_7 = rs_tOracleInput_7.getMetaData();
		    	int colQtyInRs_tOracleInput_7 = rsmd_tOracleInput_7.getColumnCount();

		    String tmpContent_tOracleInput_7 = null;
		    
		    
		    while (rs_tOracleInput_7.next()) {
		        nb_line_tOracleInput_7++;
		        
							if(colQtyInRs_tOracleInput_7 < 1) {
								row11.VMAXIMO = 0;
							} else {
	                         		
				row11.VMAXIMO = routines.system.JDBCUtil.getDouble(rs_tOracleInput_7, 1);
		                    }
							if(colQtyInRs_tOracleInput_7 < 2) {
								row11.VMINIMO = 0;
							} else {
	                         		
				row11.VMINIMO = routines.system.JDBCUtil.getDouble(rs_tOracleInput_7, 2);
		                    }
							if(colQtyInRs_tOracleInput_7 < 3) {
								row11.PARAMETRIZACION = null;
							} else {
	                         		
        	row11.PARAMETRIZACION = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 3, false);
		                    }
					




 



/**
 * [tOracleInput_7 begin ] stop
 */
	
	/**
	 * [tOracleInput_7 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 


	tos_count_tOracleInput_7++;

/**
 * [tOracleInput_7 main ] stop
 */
	
	/**
	 * [tOracleInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tHash_row11 main ] start
	 */

	

	
	
	currentComponent="tHash_row11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					

row11Struct row11_HashRow = new row11Struct();

					row11_HashRow.VMAXIMO = row11.VMAXIMO;
					row11_HashRow.VMINIMO = row11.VMINIMO;
					row11_HashRow.PARAMETRIZACION = row11.PARAMETRIZACION;
tHash_row11.put(row11_HashRow, row11_HashRow);


 


	tos_count_tHash_row11++;

/**
 * [tHash_row11 main ] stop
 */
	
	/**
	 * [tHash_row11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHash_row11";
	
	

 



/**
 * [tHash_row11 process_data_begin ] stop
 */
	
	/**
	 * [tHash_row11 process_data_end ] start
	 */

	

	
	
	currentComponent="tHash_row11";
	
	

 



/**
 * [tHash_row11 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_7 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

}
}finally{
	if (rs_tOracleInput_7 != null) {
		rs_tOracleInput_7.close();
	}
	if (stmt_tOracleInput_7 != null) {
		stmt_tOracleInput_7.close();
	}
}

globalMap.put("tOracleInput_7_NB_LINE",nb_line_tOracleInput_7);
 

ok_Hash.put("tOracleInput_7", true);
end_Hash.put("tOracleInput_7", System.currentTimeMillis());




/**
 * [tOracleInput_7 end ] stop
 */

	
	/**
	 * [tHash_row11 end ] start
	 */

	

	
	
	currentComponent="tHash_row11";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tHash_row11", true);
end_Hash.put("tHash_row11", System.currentTimeMillis());




/**
 * [tHash_row11 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 finally ] stop
 */

	
	/**
	 * [tHash_row11 finally ] start
	 */

	

	
	
	currentComponent="tHash_row11";
	
	

 



/**
 * [tHash_row11 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];

	
			    public double VMAXIMO;

				public double getVMAXIMO () {
					return this.VMAXIMO;
				}

				public Boolean VMAXIMOIsNullable(){
				    return false;
				}
				public Boolean VMAXIMOIsKey(){
				    return false;
				}
				public Integer VMAXIMOLength(){
				    return 0;
				}
				public Integer VMAXIMOPrecision(){
				    return null;
				}
				public String VMAXIMODefault(){
				
					return "";
				
				}
				public String VMAXIMOComment(){
				
				    return "";
				
				}
				public String VMAXIMOPattern(){
				
					return "";
				
				}
				public String VMAXIMOOriginalDbColumnName(){
				
					return "VMAXIMO";
				
				}

				
			    public double VMINIMO;

				public double getVMINIMO () {
					return this.VMINIMO;
				}

				public Boolean VMINIMOIsNullable(){
				    return false;
				}
				public Boolean VMINIMOIsKey(){
				    return false;
				}
				public Integer VMINIMOLength(){
				    return 0;
				}
				public Integer VMINIMOPrecision(){
				    return null;
				}
				public String VMINIMODefault(){
				
					return "";
				
				}
				public String VMINIMOComment(){
				
				    return "";
				
				}
				public String VMINIMOPattern(){
				
					return "";
				
				}
				public String VMINIMOOriginalDbColumnName(){
				
					return "VMINIMO";
				
				}

				
			    public String PARAMETRIZACION;

				public String getPARAMETRIZACION () {
					return this.PARAMETRIZACION;
				}

				public Boolean PARAMETRIZACIONIsNullable(){
				    return false;
				}
				public Boolean PARAMETRIZACIONIsKey(){
				    return false;
				}
				public Integer PARAMETRIZACIONLength(){
				    return 2000;
				}
				public Integer PARAMETRIZACIONPrecision(){
				    return 0;
				}
				public String PARAMETRIZACIONDefault(){
				
					return null;
				
				}
				public String PARAMETRIZACIONComment(){
				
				    return "";
				
				}
				public String PARAMETRIZACIONPattern(){
				
					return "";
				
				}
				public String PARAMETRIZACIONOriginalDbColumnName(){
				
					return "PARAMETRIZACION";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
			        this.VMAXIMO = dis.readDouble();
					
			        this.VMINIMO = dis.readDouble();
					
					this.PARAMETRIZACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
			        this.VMAXIMO = dis.readDouble();
					
			        this.VMINIMO = dis.readDouble();
					
					this.PARAMETRIZACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// double
				
		            	dos.writeDouble(this.VMAXIMO);
					
					// double
				
		            	dos.writeDouble(this.VMINIMO);
					
					// String
				
						writeString(this.PARAMETRIZACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// double
				
		            	dos.writeDouble(this.VMAXIMO);
					
					// double
				
		            	dos.writeDouble(this.VMINIMO);
					
					// String
				
						writeString(this.PARAMETRIZACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VMAXIMO="+String.valueOf(VMAXIMO));
		sb.append(",VMINIMO="+String.valueOf(VMINIMO));
		sb.append(",PARAMETRIZACION="+PARAMETRIZACION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();




	
	/**
	 * [tHash_row13 begin ] start
	 */

	

	
		
		ok_Hash.put("tHash_row13", false);
		start_Hash.put("tHash_row13", System.currentTimeMillis());
		
	
	currentComponent="tHash_row13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tHash_row13 = 0;
		

				java.util.Map<row13Struct, row13Struct> tHash_row13 = new java.util.LinkedHashMap<row13Struct, row13Struct>();
	            globalMap.put("tHash_row13", tHash_row13);
			
            

 



/**
 * [tHash_row13 begin ] stop
 */



	
	/**
	 * [tOracleInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_8", false);
		start_Hash.put("tOracleInput_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_8";
	
	
		int tos_count_tOracleInput_8 = 0;
		
	


	
		    int nb_line_tOracleInput_8 = 0;
		    java.sql.Connection conn_tOracleInput_8 = null;
				conn_tOracleInput_8 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_8 = false;
				boolean isConnectionWrapped_tOracleInput_8 = !(conn_tOracleInput_8 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_8.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_8 = null;
                if (isConnectionWrapped_tOracleInput_8) {
					unwrappedOraConn_tOracleInput_8 = conn_tOracleInput_8.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_8 != null) {
                        isTimeZoneNull_tOracleInput_8 = (unwrappedOraConn_tOracleInput_8.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_8 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_8).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_8) {
					java.sql.Statement stmtGetTZ_tOracleInput_8 = conn_tOracleInput_8.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_8 = stmtGetTZ_tOracleInput_8.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_8 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_8.next()) {
						sessionTimezone_tOracleInput_8 = rsGetTZ_tOracleInput_8.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_8 && unwrappedOraConn_tOracleInput_8 != null) {
                        unwrappedOraConn_tOracleInput_8.setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_8).setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_8 = conn_tOracleInput_8.createStatement();

		    String dbquery_tOracleInput_8 = "SELECT\n	APA.VMAXIMO ,\n	APA.VMINIMO , \n   APA.NOMBRE as PARAMETRIZACION\n  FROM AMB_PARAMETRIZACION APA\n  WHERE APA."
+"ESTREGISTRO_ID = 1\n  AND APA.TPARAMETRIZACION = '2'";
		    

		    globalMap.put("tOracleInput_8_QUERY",dbquery_tOracleInput_8);

		    java.sql.ResultSet rs_tOracleInput_8 = null;

		    try {
		    	rs_tOracleInput_8 = stmt_tOracleInput_8.executeQuery(dbquery_tOracleInput_8);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_8 = rs_tOracleInput_8.getMetaData();
		    	int colQtyInRs_tOracleInput_8 = rsmd_tOracleInput_8.getColumnCount();

		    String tmpContent_tOracleInput_8 = null;
		    
		    
		    while (rs_tOracleInput_8.next()) {
		        nb_line_tOracleInput_8++;
		        
							if(colQtyInRs_tOracleInput_8 < 1) {
								row13.VMAXIMO = 0;
							} else {
	                         		
				row13.VMAXIMO = routines.system.JDBCUtil.getDouble(rs_tOracleInput_8, 1);
		                    }
							if(colQtyInRs_tOracleInput_8 < 2) {
								row13.VMINIMO = 0;
							} else {
	                         		
				row13.VMINIMO = routines.system.JDBCUtil.getDouble(rs_tOracleInput_8, 2);
		                    }
							if(colQtyInRs_tOracleInput_8 < 3) {
								row13.PARAMETRIZACION = null;
							} else {
	                         		
        	row13.PARAMETRIZACION = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 3, false);
		                    }
					




 



/**
 * [tOracleInput_8 begin ] stop
 */
	
	/**
	 * [tOracleInput_8 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 


	tos_count_tOracleInput_8++;

/**
 * [tOracleInput_8 main ] stop
 */
	
	/**
	 * [tOracleInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tHash_row13 main ] start
	 */

	

	
	
	currentComponent="tHash_row13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					

row13Struct row13_HashRow = new row13Struct();

					row13_HashRow.VMAXIMO = row13.VMAXIMO;
					row13_HashRow.VMINIMO = row13.VMINIMO;
					row13_HashRow.PARAMETRIZACION = row13.PARAMETRIZACION;
tHash_row13.put(row13_HashRow, row13_HashRow);


 


	tos_count_tHash_row13++;

/**
 * [tHash_row13 main ] stop
 */
	
	/**
	 * [tHash_row13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHash_row13";
	
	

 



/**
 * [tHash_row13 process_data_begin ] stop
 */
	
	/**
	 * [tHash_row13 process_data_end ] start
	 */

	

	
	
	currentComponent="tHash_row13";
	
	

 



/**
 * [tHash_row13 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_8 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

}
}finally{
	if (rs_tOracleInput_8 != null) {
		rs_tOracleInput_8.close();
	}
	if (stmt_tOracleInput_8 != null) {
		stmt_tOracleInput_8.close();
	}
}

globalMap.put("tOracleInput_8_NB_LINE",nb_line_tOracleInput_8);
 

ok_Hash.put("tOracleInput_8", true);
end_Hash.put("tOracleInput_8", System.currentTimeMillis());




/**
 * [tOracleInput_8 end ] stop
 */

	
	/**
	 * [tHash_row13 end ] start
	 */

	

	
	
	currentComponent="tHash_row13";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tHash_row13", true);
end_Hash.put("tHash_row13", System.currentTimeMillis());




/**
 * [tHash_row13 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 finally ] stop
 */

	
	/**
	 * [tHash_row13 finally ] start
	 */

	

	
	
	currentComponent="tHash_row13";
	
	

 



/**
 * [tHash_row13 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];

	
			    public double VMAXIMO;

				public double getVMAXIMO () {
					return this.VMAXIMO;
				}

				public Boolean VMAXIMOIsNullable(){
				    return false;
				}
				public Boolean VMAXIMOIsKey(){
				    return false;
				}
				public Integer VMAXIMOLength(){
				    return 0;
				}
				public Integer VMAXIMOPrecision(){
				    return null;
				}
				public String VMAXIMODefault(){
				
					return "";
				
				}
				public String VMAXIMOComment(){
				
				    return "";
				
				}
				public String VMAXIMOPattern(){
				
					return "";
				
				}
				public String VMAXIMOOriginalDbColumnName(){
				
					return "VMAXIMO";
				
				}

				
			    public double VMINIMO;

				public double getVMINIMO () {
					return this.VMINIMO;
				}

				public Boolean VMINIMOIsNullable(){
				    return false;
				}
				public Boolean VMINIMOIsKey(){
				    return false;
				}
				public Integer VMINIMOLength(){
				    return 0;
				}
				public Integer VMINIMOPrecision(){
				    return null;
				}
				public String VMINIMODefault(){
				
					return "";
				
				}
				public String VMINIMOComment(){
				
				    return "";
				
				}
				public String VMINIMOPattern(){
				
					return "";
				
				}
				public String VMINIMOOriginalDbColumnName(){
				
					return "VMINIMO";
				
				}

				
			    public String PARAMETRIZACION;

				public String getPARAMETRIZACION () {
					return this.PARAMETRIZACION;
				}

				public Boolean PARAMETRIZACIONIsNullable(){
				    return false;
				}
				public Boolean PARAMETRIZACIONIsKey(){
				    return false;
				}
				public Integer PARAMETRIZACIONLength(){
				    return 2000;
				}
				public Integer PARAMETRIZACIONPrecision(){
				    return 0;
				}
				public String PARAMETRIZACIONDefault(){
				
					return null;
				
				}
				public String PARAMETRIZACIONComment(){
				
				    return "";
				
				}
				public String PARAMETRIZACIONPattern(){
				
					return "";
				
				}
				public String PARAMETRIZACIONOriginalDbColumnName(){
				
					return "PARAMETRIZACION";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
			        this.VMAXIMO = dis.readDouble();
					
			        this.VMINIMO = dis.readDouble();
					
					this.PARAMETRIZACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
			        this.VMAXIMO = dis.readDouble();
					
			        this.VMINIMO = dis.readDouble();
					
					this.PARAMETRIZACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// double
				
		            	dos.writeDouble(this.VMAXIMO);
					
					// double
				
		            	dos.writeDouble(this.VMINIMO);
					
					// String
				
						writeString(this.PARAMETRIZACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// double
				
		            	dos.writeDouble(this.VMAXIMO);
					
					// double
				
		            	dos.writeDouble(this.VMINIMO);
					
					// String
				
						writeString(this.PARAMETRIZACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VMAXIMO="+String.valueOf(VMAXIMO));
		sb.append(",VMINIMO="+String.valueOf(VMINIMO));
		sb.append(",PARAMETRIZACION="+PARAMETRIZACION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row17Struct row17 = new row17Struct();




	
	/**
	 * [tHash_row17 begin ] start
	 */

	

	
		
		ok_Hash.put("tHash_row17", false);
		start_Hash.put("tHash_row17", System.currentTimeMillis());
		
	
	currentComponent="tHash_row17";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tHash_row17 = 0;
		

				java.util.Map<row17Struct, row17Struct> tHash_row17 = new java.util.LinkedHashMap<row17Struct, row17Struct>();
	            globalMap.put("tHash_row17", tHash_row17);
			
            

 



/**
 * [tHash_row17 begin ] stop
 */



	
	/**
	 * [tOracleInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_4", false);
		start_Hash.put("tOracleInput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_4";
	
	
		int tos_count_tOracleInput_4 = 0;
		
	


	
		    int nb_line_tOracleInput_4 = 0;
		    java.sql.Connection conn_tOracleInput_4 = null;
				conn_tOracleInput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_4 = false;
				boolean isConnectionWrapped_tOracleInput_4 = !(conn_tOracleInput_4 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_4 = null;
                if (isConnectionWrapped_tOracleInput_4) {
					unwrappedOraConn_tOracleInput_4 = conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_4 != null) {
                        isTimeZoneNull_tOracleInput_4 = (unwrappedOraConn_tOracleInput_4.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_4 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_4).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_4) {
					java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_4.next()) {
						sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_4 && unwrappedOraConn_tOracleInput_4 != null) {
                        unwrappedOraConn_tOracleInput_4.setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement();

		    String dbquery_tOracleInput_4 = "SELECT\n	APA.VMAXIMO ,\n	APA.VMINIMO , \n   APA.NOMBRE as PARAMETRIZACION\n  FROM AMB_PARAMETRIZACION APA\n  WHERE APA."
+"ESTREGISTRO_ID = 1\n  AND APA.TPARAMETRIZACION = '2'";
		    

		    globalMap.put("tOracleInput_4_QUERY",dbquery_tOracleInput_4);

		    java.sql.ResultSet rs_tOracleInput_4 = null;

		    try {
		    	rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
		    	int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

		    String tmpContent_tOracleInput_4 = null;
		    
		    
		    while (rs_tOracleInput_4.next()) {
		        nb_line_tOracleInput_4++;
		        
							if(colQtyInRs_tOracleInput_4 < 1) {
								row17.VMAXIMO = 0;
							} else {
	                         		
				row17.VMAXIMO = routines.system.JDBCUtil.getDouble(rs_tOracleInput_4, 1);
		                    }
							if(colQtyInRs_tOracleInput_4 < 2) {
								row17.VMINIMO = 0;
							} else {
	                         		
				row17.VMINIMO = routines.system.JDBCUtil.getDouble(rs_tOracleInput_4, 2);
		                    }
							if(colQtyInRs_tOracleInput_4 < 3) {
								row17.PARAMETRIZACION = null;
							} else {
	                         		
        	row17.PARAMETRIZACION = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 3, false);
		                    }
					




 



/**
 * [tOracleInput_4 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 


	tos_count_tOracleInput_4++;

/**
 * [tOracleInput_4 main ] stop
 */
	
	/**
	 * [tOracleInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tHash_row17 main ] start
	 */

	

	
	
	currentComponent="tHash_row17";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

row17Struct row17_HashRow = new row17Struct();

					row17_HashRow.VMAXIMO = row17.VMAXIMO;
					row17_HashRow.VMINIMO = row17.VMINIMO;
					row17_HashRow.PARAMETRIZACION = row17.PARAMETRIZACION;
tHash_row17.put(row17_HashRow, row17_HashRow);


 


	tos_count_tHash_row17++;

/**
 * [tHash_row17 main ] stop
 */
	
	/**
	 * [tHash_row17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHash_row17";
	
	

 



/**
 * [tHash_row17 process_data_begin ] stop
 */
	
	/**
	 * [tHash_row17 process_data_end ] start
	 */

	

	
	
	currentComponent="tHash_row17";
	
	

 



/**
 * [tHash_row17 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

}
}finally{
	if (rs_tOracleInput_4 != null) {
		rs_tOracleInput_4.close();
	}
	if (stmt_tOracleInput_4 != null) {
		stmt_tOracleInput_4.close();
	}
}

globalMap.put("tOracleInput_4_NB_LINE",nb_line_tOracleInput_4);
 

ok_Hash.put("tOracleInput_4", true);
end_Hash.put("tOracleInput_4", System.currentTimeMillis());




/**
 * [tOracleInput_4 end ] stop
 */

	
	/**
	 * [tHash_row17 end ] start
	 */

	

	
	
	currentComponent="tHash_row17";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tHash_row17", true);
end_Hash.put("tHash_row17", System.currentTimeMillis());




/**
 * [tHash_row17 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 finally ] stop
 */

	
	/**
	 * [tHash_row17 finally ] start
	 */

	

	
	
	currentComponent="tHash_row17";
	
	

 



/**
 * [tHash_row17 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


context.FECHA_TERMINACION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_FINAL = TalendDate.getDate("HH:mm:ss");
context.ESTADO_EXEC = "Success";

System.out.println("  - End: " + TalendDate.getDate("DD/MM/YYYY") + " "  + TalendDate.getDate("HH:mm:ss") );
System.out.println("+ Job " + context.ESTADO_EXEC);
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tFixedFlowInput_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tOracleClose_2Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tOracleClose_1Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class row41Struct implements routines.system.IPersistableRow<row41Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];

	
			    public String FECHA_EJECUCION;

				public String getFECHA_EJECUCION () {
					return this.FECHA_EJECUCION;
				}

				public Boolean FECHA_EJECUCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_EJECUCIONIsKey(){
				    return false;
				}
				public Integer FECHA_EJECUCIONLength(){
				    return null;
				}
				public Integer FECHA_EJECUCIONPrecision(){
				    return null;
				}
				public String FECHA_EJECUCIONDefault(){
				
					return null;
				
				}
				public String FECHA_EJECUCIONComment(){
				
				    return "";
				
				}
				public String FECHA_EJECUCIONPattern(){
				
					return "";
				
				}
				public String FECHA_EJECUCIONOriginalDbColumnName(){
				
					return "FECHA_EJECUCION";
				
				}

				
			    public String HORA_INICIO;

				public String getHORA_INICIO () {
					return this.HORA_INICIO;
				}

				public Boolean HORA_INICIOIsNullable(){
				    return true;
				}
				public Boolean HORA_INICIOIsKey(){
				    return false;
				}
				public Integer HORA_INICIOLength(){
				    return null;
				}
				public Integer HORA_INICIOPrecision(){
				    return null;
				}
				public String HORA_INICIODefault(){
				
					return null;
				
				}
				public String HORA_INICIOComment(){
				
				    return "";
				
				}
				public String HORA_INICIOPattern(){
				
					return "";
				
				}
				public String HORA_INICIOOriginalDbColumnName(){
				
					return "HORA_INICIO";
				
				}

				
			    public String HORA_FINAL;

				public String getHORA_FINAL () {
					return this.HORA_FINAL;
				}

				public Boolean HORA_FINALIsNullable(){
				    return true;
				}
				public Boolean HORA_FINALIsKey(){
				    return false;
				}
				public Integer HORA_FINALLength(){
				    return null;
				}
				public Integer HORA_FINALPrecision(){
				    return null;
				}
				public String HORA_FINALDefault(){
				
					return null;
				
				}
				public String HORA_FINALComment(){
				
				    return "";
				
				}
				public String HORA_FINALPattern(){
				
					return "";
				
				}
				public String HORA_FINALOriginalDbColumnName(){
				
					return "HORA_FINAL";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String JOBS;

				public String getJOBS () {
					return this.JOBS;
				}

				public Boolean JOBSIsNullable(){
				    return true;
				}
				public Boolean JOBSIsKey(){
				    return false;
				}
				public Integer JOBSLength(){
				    return null;
				}
				public Integer JOBSPrecision(){
				    return null;
				}
				public String JOBSDefault(){
				
					return null;
				
				}
				public String JOBSComment(){
				
				    return "";
				
				}
				public String JOBSPattern(){
				
					return "";
				
				}
				public String JOBSOriginalDbColumnName(){
				
					return "JOBS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FECHA_EJECUCION="+FECHA_EJECUCION);
		sb.append(",HORA_INICIO="+HORA_INICIO);
		sb.append(",HORA_FINAL="+HORA_FINAL);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",JOBS="+JOBS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row41Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row41Struct row41 = new row41Struct();




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row41");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.LOGS_EXECUTION)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("FECHA_EJECUCION");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("HORA_INICIO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("HORA_FINAL");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ESTADO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("JOBS");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";
	
	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row41.FECHA_EJECUCION = context.FECHA_EJECUCION;
    	            	        	            	
    	            		row41.HORA_INICIO = context.HORA_INICIO;
    	            	        	            	
    	            		row41.HORA_FINAL = context.HORA_FINAL;
    	            	        	            	
    	            		row41.ESTADO = context.ESTADO_EXEC;
    	            	        	            	
    	            		row41.JOBS = "Tablero semaforizado";
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row41"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row41.FECHA_EJECUCION != null) {
                        sb_tFileOutputDelimited_1.append(
                            row41.FECHA_EJECUCION
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row41.HORA_INICIO != null) {
                        sb_tFileOutputDelimited_1.append(
                            row41.HORA_INICIO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row41.HORA_FINAL != null) {
                        sb_tFileOutputDelimited_1.append(
                            row41.HORA_FINAL
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row41.ESTADO != null) {
                        sb_tFileOutputDelimited_1.append(
                            row41.ESTADO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row41.JOBS != null) {
                        sb_tFileOutputDelimited_1.append(
                            row41.JOBS
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row41");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_2", false);
		start_Hash.put("tOracleClose_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_2";
	
	
		int tos_count_tOracleClose_2 = 0;
		

 



/**
 * [tOracleClose_2 begin ] stop
 */
	
	/**
	 * [tOracleClose_2 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

	java.sql.Connection conn_tOracleClose_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
	
	if(conn_tOracleClose_2 != null && !conn_tOracleClose_2.isClosed())
	{
		
			conn_tOracleClose_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_2++;

/**
 * [tOracleClose_2 main ] stop
 */
	
	/**
	 * [tOracleClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_2 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 

ok_Hash.put("tOracleClose_2", true);
end_Hash.put("tOracleClose_2", System.currentTimeMillis());




/**
 * [tOracleClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_2_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_2"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());




/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_TableroSemaforizado = new byte[0];
    static byte[] commonByteArray_REP_INICIO_TableroSemaforizado = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_TableroSemaforizado.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_TableroSemaforizado.length == 0) {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_TableroSemaforizado = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_TableroSemaforizado, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_TableroSemaforizado) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
row3Struct row7 = row3;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tRunJob_1 = 0;
		
class DealChildJobLibrary_tRunJob_1 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new java.io.ObjectInputStream(new java.io.FileInputStream(crcMapPath)) {
				@Override
				public Class<?> resolveClass(java.io.ObjectStreamClass desc) throws java.io.IOException, ClassNotFoundException {
					if(!"java.util.HashMap".equals(desc.getName())) {
						throw new java.io.InvalidClassException("Unauthorized deserialization attempt : " + desc.getName());
					}
					return super.resolveClass(desc);
				}
			};
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

	class JVMArgumentHelper_tRunJob_1 {
		
		
		
		private void addClasspath(java.util.List<String> target_argument_list, String job_origin_classpath) {
			
			String extra_classpath = null;
			String path_separator = System.getProperty("path.separator");
			if (path_separator != null && path_separator.length() > 1) {
				throw new RuntimeException("path separator should be single character");
			}
			
			if(extra_classpath!=null && !extra_classpath.isEmpty()) {
				if(extra_classpath.endsWith(path_separator)) {
					target_argument_list.add(extra_classpath+job_origin_classpath);
				} else if(extra_classpath.contains(path_separator)) {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				} else if(extra_classpath.endsWith(":")) {
					target_argument_list.add(extra_classpath.replace(":", path_separator)+job_origin_classpath);
				} else if(extra_classpath.endsWith(";")) {
					target_argument_list.add(extra_classpath.replace(";", path_separator)+job_origin_classpath);
				} else if(extra_classpath.contains(":")) {
					target_argument_list.add(concatStr(extra_classpath.replace(":", path_separator), path_separator, job_origin_classpath));
				} else if(extra_classpath.contains(";")) {
					target_argument_list.add(concatStr(extra_classpath.replace(";", path_separator), path_separator, job_origin_classpath));
				} else {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				}
				return;
			}
			
			target_argument_list.add(job_origin_classpath);
		}
		
		private String concatStr(String s1, String s2, String s3) {
			java.lang.StringBuilder strB = new java.lang.StringBuilder();
			strB.append(s1).append(s2).append(s3);
			return strB.toString();
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			addArgumentsTo(target_argument_list, argument_from_child, false);
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child, boolean isCP) {
			if(isCP) {
				addClasspath(target_argument_list, argument_from_child);
				return;
			}
		
			
			
			
			target_argument_list.add(argument_from_child);
			
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_1 jvm_argument_helper_tRunJob_1 = new JVMArgumentHelper_tRunJob_1();
	
	String audit_jar_path_tRunJob_1 = System.getProperty("classpath.extended");
	

 



/**
 * [tRunJob_1 begin ] stop
 */



	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.LOGS_ERROR)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("moment");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("pid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("root_pid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("father_pid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("project");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("job");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("context");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("priority");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("type");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("origin");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("message");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("code");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row3.type = lcm.getType();
		row3.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row3.priority = lcm.getPriority();
		row3.message = lcm.getMessage();
		row3.code = lcm.getCode();
		
		row3.moment = java.util.Calendar.getInstance().getTime();
	
    	row3.pid = pid;
		row3.root_pid = rootPid;
		row3.father_pid = fatherPid;
	
    	row3.project = projectName;
    	row3.job = jobName;
    	row3.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row3.moment != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(row3.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.root_pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.father_pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.project != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.project
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.job != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.job
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.context != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.context
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.priority != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.priority
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.type != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.type
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.origin != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.origin
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.message != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.message
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row3.code != null) {
                        sb_tFileOutputDelimited_2.append(
                            row3.code
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 
     row7 = row3;


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */

	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
			
			String osName_tRunJob_1 = System.getProperty("os.name");
			if (osName_tRunJob_1 != null && osName_tRunJob_1.toLowerCase(java.util.Locale.US).startsWith("win")){
				
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
              					String classpath_tRunJob_1_5 = ".;../lib/routines.jar;../lib/log4j-slf4j-impl-2.17.1.jar;../lib/log4j-api-2.17.1.jar;../lib/log4j-core-2.17.1.jar;../lib/activation-1.1.jar;../lib/jakarta.mail-1.6.7.jar;../lib/xpathutil-1.0.0.jar;../lib/slf4j-api-1.7.34.jar;../lib/crypto-utils-7.1.16.jar;../lib/jboss-marshalling-2.0.12.Final.jar;../lib/dom4j-2.1.3.jar;../lib/jaxen-1.1.6.jar;mail_1_3.jar;";
              					
              					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
	        					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5), true);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "rep_inicio.mail_1_3.Mail");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
		      					String classpath_tRunJob_1_5 = ".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/log4j-slf4j-impl-2.17.1.jar:$ROOT_PATH/../lib/log4j-api-2.17.1.jar:$ROOT_PATH/../lib/log4j-core-2.17.1.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/jakarta.mail-1.6.7.jar:$ROOT_PATH/../lib/xpathutil-1.0.0.jar:$ROOT_PATH/../lib/slf4j-api-1.7.34.jar:$ROOT_PATH/../lib/crypto-utils-7.1.16.jar:$ROOT_PATH/../lib/jboss-marshalling-2.0.12.Final.jar:$ROOT_PATH/../lib/dom4j-2.1.3.jar:$ROOT_PATH/../lib/jaxen-1.1.6.jar:$ROOT_PATH/mail_1_3.jar:";
		      					
		      					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5).replace("$ROOT_PATH",System.getProperty("user.dir")), true);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "rep_inicio.mail_1_3.Mail");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "$@");
		      				
			}

			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = row7.moment;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param moment=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param moment=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param moment=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("moment", obj_tRunJob_1);
	
		obj_tRunJob_1 = row7.project;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param project=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param project=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param project=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("project", obj_tRunJob_1);
	
		obj_tRunJob_1 = row7.job;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param job=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param job=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param job=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("job", obj_tRunJob_1);
	
		obj_tRunJob_1 = row7.context;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param context=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param context=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param context=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("context", obj_tRunJob_1);
	
		obj_tRunJob_1 = row7.origin;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param origin=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param origin=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param origin=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("origin", obj_tRunJob_1);
	
		obj_tRunJob_1 = row7.message;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param message=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param message=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param message=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("message", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_destino", obj_tRunJob_1);
	
	
				class ConsoleHelper_tRunJob_1 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_1 consoleHelper_tRunJob_1 = new ConsoleHelper_tRunJob_1();

		Runtime runtime_tRunJob_1 = Runtime.getRuntime();
		Process ps_tRunJob_1 = null;
		
		//0 indicates normal termination
        int result_tRunJob_1;
        StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
        try {
            ps_tRunJob_1 = runtime_tRunJob_1.exec((String[])paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

            Thread normal_tRunJob_1 = consoleHelper_tRunJob_1.getNormalThread(ps_tRunJob_1);
            normal_tRunJob_1.start();

            Thread error_tRunJob_1 = consoleHelper_tRunJob_1.getErrorThread(ps_tRunJob_1, errorMsg_tRunJob_1);
            error_tRunJob_1.start();

            result_tRunJob_1 = ps_tRunJob_1.waitFor();
            normal_tRunJob_1.join();
            error_tRunJob_1.join();
        } catch (ThreadDeath tde) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",tde.getMessage());
            ps_tRunJob_1.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_1_CHILD_RETURN_CODE",result_tRunJob_1);
		if(result_tRunJob_1 != 0){
   			globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_1.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_1 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_1.toString());
			
  		}

		

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tJava_2Process(globalMap);



/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */

	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */

	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
	
 



/**
 * [tRunJob_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


context.ESTADO_EXEC = "Fail";
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final TableroSemaforizado TableroSemaforizadoClass = new TableroSemaforizado();

        int exitCode = TableroSemaforizadoClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = TableroSemaforizado.class.getClassLoader().getResourceAsStream("rep_inicio/tablerosemaforizado_1_0/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = TableroSemaforizado.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("db_origen_AdditionalParams", "id_String");
                        if(context.getStringValue("db_origen_AdditionalParams") == null) {
                            context.db_origen_AdditionalParams = null;
                        } else {
                            context.db_origen_AdditionalParams=(String) context.getProperty("db_origen_AdditionalParams");
                        }
                        context.setContextType("db_origen_Login", "id_String");
                        if(context.getStringValue("db_origen_Login") == null) {
                            context.db_origen_Login = null;
                        } else {
                            context.db_origen_Login=(String) context.getProperty("db_origen_Login");
                        }
                        context.setContextType("db_origen_Password", "id_Password");
                        if(context.getStringValue("db_origen_Password") == null) {
                            context.db_origen_Password = null;
                        } else {
                            String pwd_db_origen_Password_value = context.getProperty("db_origen_Password");
                            context.db_origen_Password = null;
                            if(pwd_db_origen_Password_value!=null) {
                                if(context_param.containsKey("db_origen_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_origen_Password = pwd_db_origen_Password_value;
                                } else if (!pwd_db_origen_Password_value.isEmpty()) {
                                    try {
                                        context.db_origen_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_origen_Password_value);
                                        context.put("db_origen_Password",context.db_origen_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_origen_Port", "id_String");
                        if(context.getStringValue("db_origen_Port") == null) {
                            context.db_origen_Port = null;
                        } else {
                            context.db_origen_Port=(String) context.getProperty("db_origen_Port");
                        }
                        context.setContextType("db_origen_Schema", "id_String");
                        if(context.getStringValue("db_origen_Schema") == null) {
                            context.db_origen_Schema = null;
                        } else {
                            context.db_origen_Schema=(String) context.getProperty("db_origen_Schema");
                        }
                        context.setContextType("db_origen_Server", "id_String");
                        if(context.getStringValue("db_origen_Server") == null) {
                            context.db_origen_Server = null;
                        } else {
                            context.db_origen_Server=(String) context.getProperty("db_origen_Server");
                        }
                        context.setContextType("db_origen_ServiceName", "id_String");
                        if(context.getStringValue("db_origen_ServiceName") == null) {
                            context.db_origen_ServiceName = null;
                        } else {
                            context.db_origen_ServiceName=(String) context.getProperty("db_origen_ServiceName");
                        }
                        context.setContextType("db_destino_AdditionalParams", "id_String");
                        if(context.getStringValue("db_destino_AdditionalParams") == null) {
                            context.db_destino_AdditionalParams = null;
                        } else {
                            context.db_destino_AdditionalParams=(String) context.getProperty("db_destino_AdditionalParams");
                        }
                        context.setContextType("db_destino_Login", "id_String");
                        if(context.getStringValue("db_destino_Login") == null) {
                            context.db_destino_Login = null;
                        } else {
                            context.db_destino_Login=(String) context.getProperty("db_destino_Login");
                        }
                        context.setContextType("db_destino_Password", "id_Password");
                        if(context.getStringValue("db_destino_Password") == null) {
                            context.db_destino_Password = null;
                        } else {
                            String pwd_db_destino_Password_value = context.getProperty("db_destino_Password");
                            context.db_destino_Password = null;
                            if(pwd_db_destino_Password_value!=null) {
                                if(context_param.containsKey("db_destino_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_destino_Password = pwd_db_destino_Password_value;
                                } else if (!pwd_db_destino_Password_value.isEmpty()) {
                                    try {
                                        context.db_destino_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_destino_Password_value);
                                        context.put("db_destino_Password",context.db_destino_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_destino_Port", "id_String");
                        if(context.getStringValue("db_destino_Port") == null) {
                            context.db_destino_Port = null;
                        } else {
                            context.db_destino_Port=(String) context.getProperty("db_destino_Port");
                        }
                        context.setContextType("db_destino_Schema", "id_String");
                        if(context.getStringValue("db_destino_Schema") == null) {
                            context.db_destino_Schema = null;
                        } else {
                            context.db_destino_Schema=(String) context.getProperty("db_destino_Schema");
                        }
                        context.setContextType("db_destino_Server", "id_String");
                        if(context.getStringValue("db_destino_Server") == null) {
                            context.db_destino_Server = null;
                        } else {
                            context.db_destino_Server=(String) context.getProperty("db_destino_Server");
                        }
                        context.setContextType("db_destino_ServiceName", "id_String");
                        if(context.getStringValue("db_destino_ServiceName") == null) {
                            context.db_destino_ServiceName = null;
                        } else {
                            context.db_destino_ServiceName=(String) context.getProperty("db_destino_ServiceName");
                        }
                        context.setContextType("ACTUALIZACION_TOTAL", "id_Boolean");
                        if(context.getStringValue("ACTUALIZACION_TOTAL") == null) {
                            context.ACTUALIZACION_TOTAL = null;
                        } else {
                            try{
                                context.ACTUALIZACION_TOTAL=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("ACTUALIZACION_TOTAL"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ACTUALIZACION_TOTAL", e.getMessage()));
                                context.ACTUALIZACION_TOTAL=null;
                            }
                        }
                        context.setContextType("BODEGA", "id_String");
                        if(context.getStringValue("BODEGA") == null) {
                            context.BODEGA = null;
                        } else {
                            context.BODEGA=(String) context.getProperty("BODEGA");
                        }
                        context.setContextType("ERROR", "id_String");
                        if(context.getStringValue("ERROR") == null) {
                            context.ERROR = null;
                        } else {
                            context.ERROR=(String) context.getProperty("ERROR");
                        }
                        context.setContextType("ESTADO", "id_String");
                        if(context.getStringValue("ESTADO") == null) {
                            context.ESTADO = null;
                        } else {
                            context.ESTADO=(String) context.getProperty("ESTADO");
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("FANTERIOR", "id_String");
                        if(context.getStringValue("FANTERIOR") == null) {
                            context.FANTERIOR = null;
                        } else {
                            context.FANTERIOR=(String) context.getProperty("FANTERIOR");
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("FECHA_TERMINACION", "id_String");
                        if(context.getStringValue("FECHA_TERMINACION") == null) {
                            context.FECHA_TERMINACION = null;
                        } else {
                            context.FECHA_TERMINACION=(String) context.getProperty("FECHA_TERMINACION");
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("ID_SOLICITUD", "id_Integer");
                        if(context.getStringValue("ID_SOLICITUD") == null) {
                            context.ID_SOLICITUD = null;
                        } else {
                            try{
                                context.ID_SOLICITUD=routines.system.ParserUtils.parseTo_Integer (context.getProperty("ID_SOLICITUD"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ID_SOLICITUD", e.getMessage()));
                                context.ID_SOLICITUD=null;
                            }
                        }
                        context.setContextType("LAST_DAYS", "id_Integer");
                        if(context.getStringValue("LAST_DAYS") == null) {
                            context.LAST_DAYS = null;
                        } else {
                            try{
                                context.LAST_DAYS=routines.system.ParserUtils.parseTo_Integer (context.getProperty("LAST_DAYS"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "LAST_DAYS", e.getMessage()));
                                context.LAST_DAYS=null;
                            }
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                        context.setContextType("Anio", "id_String");
                        if(context.getStringValue("Anio") == null) {
                            context.Anio = null;
                        } else {
                            context.Anio=(String) context.getProperty("Anio");
                        }
                        context.setContextType("CONDITION", "id_String");
                        if(context.getStringValue("CONDITION") == null) {
                            context.CONDITION = null;
                        } else {
                            context.CONDITION=(String) context.getProperty("CONDITION");
                        }
                        context.setContextType("INNER_HDAC", "id_String");
                        if(context.getStringValue("INNER_HDAC") == null) {
                            context.INNER_HDAC = null;
                        } else {
                            context.INNER_HDAC=(String) context.getProperty("INNER_HDAC");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("db_origen_AdditionalParams")) {
                context.db_origen_AdditionalParams = (String) parentContextMap.get("db_origen_AdditionalParams");
            }if (parentContextMap.containsKey("db_origen_Login")) {
                context.db_origen_Login = (String) parentContextMap.get("db_origen_Login");
            }if (parentContextMap.containsKey("db_origen_Password")) {
                context.db_origen_Password = (java.lang.String) parentContextMap.get("db_origen_Password");
            }if (parentContextMap.containsKey("db_origen_Port")) {
                context.db_origen_Port = (String) parentContextMap.get("db_origen_Port");
            }if (parentContextMap.containsKey("db_origen_Schema")) {
                context.db_origen_Schema = (String) parentContextMap.get("db_origen_Schema");
            }if (parentContextMap.containsKey("db_origen_Server")) {
                context.db_origen_Server = (String) parentContextMap.get("db_origen_Server");
            }if (parentContextMap.containsKey("db_origen_ServiceName")) {
                context.db_origen_ServiceName = (String) parentContextMap.get("db_origen_ServiceName");
            }if (parentContextMap.containsKey("db_destino_AdditionalParams")) {
                context.db_destino_AdditionalParams = (String) parentContextMap.get("db_destino_AdditionalParams");
            }if (parentContextMap.containsKey("db_destino_Login")) {
                context.db_destino_Login = (String) parentContextMap.get("db_destino_Login");
            }if (parentContextMap.containsKey("db_destino_Password")) {
                context.db_destino_Password = (java.lang.String) parentContextMap.get("db_destino_Password");
            }if (parentContextMap.containsKey("db_destino_Port")) {
                context.db_destino_Port = (String) parentContextMap.get("db_destino_Port");
            }if (parentContextMap.containsKey("db_destino_Schema")) {
                context.db_destino_Schema = (String) parentContextMap.get("db_destino_Schema");
            }if (parentContextMap.containsKey("db_destino_Server")) {
                context.db_destino_Server = (String) parentContextMap.get("db_destino_Server");
            }if (parentContextMap.containsKey("db_destino_ServiceName")) {
                context.db_destino_ServiceName = (String) parentContextMap.get("db_destino_ServiceName");
            }if (parentContextMap.containsKey("ACTUALIZACION_TOTAL")) {
                context.ACTUALIZACION_TOTAL = (Boolean) parentContextMap.get("ACTUALIZACION_TOTAL");
            }if (parentContextMap.containsKey("BODEGA")) {
                context.BODEGA = (String) parentContextMap.get("BODEGA");
            }if (parentContextMap.containsKey("ERROR")) {
                context.ERROR = (String) parentContextMap.get("ERROR");
            }if (parentContextMap.containsKey("ESTADO")) {
                context.ESTADO = (String) parentContextMap.get("ESTADO");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("FANTERIOR")) {
                context.FANTERIOR = (String) parentContextMap.get("FANTERIOR");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("FECHA_TERMINACION")) {
                context.FECHA_TERMINACION = (String) parentContextMap.get("FECHA_TERMINACION");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("ID_SOLICITUD")) {
                context.ID_SOLICITUD = (Integer) parentContextMap.get("ID_SOLICITUD");
            }if (parentContextMap.containsKey("LAST_DAYS")) {
                context.LAST_DAYS = (Integer) parentContextMap.get("LAST_DAYS");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }if (parentContextMap.containsKey("Anio")) {
                context.Anio = (String) parentContextMap.get("Anio");
            }if (parentContextMap.containsKey("CONDITION")) {
                context.CONDITION = (String) parentContextMap.get("CONDITION");
            }if (parentContextMap.containsKey("INNER_HDAC")) {
                context.INNER_HDAC = (String) parentContextMap.get("INNER_HDAC");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("db_origen_Password");
			parametersToEncrypt.add("db_destino_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs


this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : TableroSemaforizado");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tOracleConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));
            connections.put("conn_tOracleConnection_2", globalMap.get("conn_tOracleConnection_2"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1050237 characters generated by Talend Open Studio for ESB 
 *     on the October 28, 2024, 11:47:18â¯AM COT
 ************************************************************************************************/