// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package rep_inicio.agendamiento_7_3;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.Utils;
import routines.getEdad;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_4
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Agendamiento Purpose: AGE<br>
 * Description:  <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status 
 */
public class Agendamiento implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(CONDICION_AGECITAS != null){
				
					this.setProperty("CONDICION_AGECITAS", CONDICION_AGECITAS.toString());
				
			}
			
			if(AGE_FECHA != null){
				
					this.setProperty("AGE_FECHA", AGE_FECHA.toString());
				
			}
			
			if(db_origen_AdditionalParams != null){
				
					this.setProperty("db_origen_AdditionalParams", db_origen_AdditionalParams.toString());
				
			}
			
			if(db_origen_Login != null){
				
					this.setProperty("db_origen_Login", db_origen_Login.toString());
				
			}
			
			if(db_origen_Password != null){
				
					this.setProperty("db_origen_Password", db_origen_Password.toString());
				
			}
			
			if(db_origen_Port != null){
				
					this.setProperty("db_origen_Port", db_origen_Port.toString());
				
			}
			
			if(db_origen_Schema != null){
				
					this.setProperty("db_origen_Schema", db_origen_Schema.toString());
				
			}
			
			if(db_origen_Server != null){
				
					this.setProperty("db_origen_Server", db_origen_Server.toString());
				
			}
			
			if(db_origen_ServiceName != null){
				
					this.setProperty("db_origen_ServiceName", db_origen_ServiceName.toString());
				
			}
			
			if(db_destino_AdditionalParams != null){
				
					this.setProperty("db_destino_AdditionalParams", db_destino_AdditionalParams.toString());
				
			}
			
			if(db_destino_Login != null){
				
					this.setProperty("db_destino_Login", db_destino_Login.toString());
				
			}
			
			if(db_destino_Password != null){
				
					this.setProperty("db_destino_Password", db_destino_Password.toString());
				
			}
			
			if(db_destino_Port != null){
				
					this.setProperty("db_destino_Port", db_destino_Port.toString());
				
			}
			
			if(db_destino_Schema != null){
				
					this.setProperty("db_destino_Schema", db_destino_Schema.toString());
				
			}
			
			if(db_destino_Server != null){
				
					this.setProperty("db_destino_Server", db_destino_Server.toString());
				
			}
			
			if(db_destino_ServiceName != null){
				
					this.setProperty("db_destino_ServiceName", db_destino_ServiceName.toString());
				
			}
			
			if(ACTUALIZACION_TOTAL != null){
				
					this.setProperty("ACTUALIZACION_TOTAL", ACTUALIZACION_TOTAL.toString());
				
			}
			
			if(BODEGA != null){
				
					this.setProperty("BODEGA", BODEGA.toString());
				
			}
			
			if(ERROR != null){
				
					this.setProperty("ERROR", ERROR.toString());
				
			}
			
			if(ESTADO != null){
				
					this.setProperty("ESTADO", ESTADO.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(FANTERIOR != null){
				
					this.setProperty("FANTERIOR", FANTERIOR.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(ID_SOLICITUD != null){
				
					this.setProperty("ID_SOLICITUD", ID_SOLICITUD.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
			if(mail_Message != null){
				
					this.setProperty("mail_Message", mail_Message.toString());
				
			}
			
			if(mail_Password != null){
				
					this.setProperty("mail_Password", mail_Password.toString());
				
			}
			
			if(mail_Sendername != null){
				
					this.setProperty("mail_Sendername", mail_Sendername.toString());
				
			}
			
			if(mail_SMTP_Host != null){
				
					this.setProperty("mail_SMTP_Host", mail_SMTP_Host.toString());
				
			}
			
			if(mail_SMTP_Port != null){
				
					this.setProperty("mail_SMTP_Port", mail_SMTP_Port.toString());
				
			}
			
			if(mail_Subject != null){
				
					this.setProperty("mail_Subject", mail_Subject.toString());
				
			}
			
			if(mail_To != null){
				
					this.setProperty("mail_To", mail_To.toString());
				
			}
			
			if(mail_User != null){
				
					this.setProperty("mail_User", mail_User.toString());
				
			}
			
			if(CONDICION_AGESCITAS != null){
				
					this.setProperty("CONDICION_AGESCITAS", CONDICION_AGESCITAS.toString());
				
			}
			
			if(CONDICION_AGE != null){
				
					this.setProperty("CONDICION_AGE", CONDICION_AGE.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String CONDICION_AGECITAS;
public String getCONDICION_AGECITAS(){
	return this.CONDICION_AGECITAS;
}
public String AGE_FECHA;
public String getAGE_FECHA(){
	return this.AGE_FECHA;
}
public String db_origen_AdditionalParams;
public String getDb_origen_AdditionalParams(){
	return this.db_origen_AdditionalParams;
}
public String db_origen_Login;
public String getDb_origen_Login(){
	return this.db_origen_Login;
}
public java.lang.String db_origen_Password;
public java.lang.String getDb_origen_Password(){
	return this.db_origen_Password;
}
public String db_origen_Port;
public String getDb_origen_Port(){
	return this.db_origen_Port;
}
public String db_origen_Schema;
public String getDb_origen_Schema(){
	return this.db_origen_Schema;
}
public String db_origen_Server;
public String getDb_origen_Server(){
	return this.db_origen_Server;
}
public String db_origen_ServiceName;
public String getDb_origen_ServiceName(){
	return this.db_origen_ServiceName;
}
public String db_destino_AdditionalParams;
public String getDb_destino_AdditionalParams(){
	return this.db_destino_AdditionalParams;
}
public String db_destino_Login;
public String getDb_destino_Login(){
	return this.db_destino_Login;
}
public java.lang.String db_destino_Password;
public java.lang.String getDb_destino_Password(){
	return this.db_destino_Password;
}
public String db_destino_Port;
public String getDb_destino_Port(){
	return this.db_destino_Port;
}
public String db_destino_Schema;
public String getDb_destino_Schema(){
	return this.db_destino_Schema;
}
public String db_destino_Server;
public String getDb_destino_Server(){
	return this.db_destino_Server;
}
public String db_destino_ServiceName;
public String getDb_destino_ServiceName(){
	return this.db_destino_ServiceName;
}
public Boolean ACTUALIZACION_TOTAL;
public Boolean getACTUALIZACION_TOTAL(){
	return this.ACTUALIZACION_TOTAL;
}
public String BODEGA;
public String getBODEGA(){
	return this.BODEGA;
}
public String ERROR;
public String getERROR(){
	return this.ERROR;
}
public String ESTADO;
public String getESTADO(){
	return this.ESTADO;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public String FANTERIOR;
public String getFANTERIOR(){
	return this.FANTERIOR;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public Integer ID_SOLICITUD;
public Integer getID_SOLICITUD(){
	return this.ID_SOLICITUD;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
public String mail_Message;
public String getMail_Message(){
	return this.mail_Message;
}
public java.lang.String mail_Password;
public java.lang.String getMail_Password(){
	return this.mail_Password;
}
public String mail_Sendername;
public String getMail_Sendername(){
	return this.mail_Sendername;
}
public String mail_SMTP_Host;
public String getMail_SMTP_Host(){
	return this.mail_SMTP_Host;
}
public String mail_SMTP_Port;
public String getMail_SMTP_Port(){
	return this.mail_SMTP_Port;
}
public String mail_Subject;
public String getMail_Subject(){
	return this.mail_Subject;
}
public String mail_To;
public String getMail_To(){
	return this.mail_To;
}
public String mail_User;
public String getMail_User(){
	return this.mail_User;
}
public String CONDICION_AGESCITAS;
public String getCONDICION_AGESCITAS(){
	return this.CONDICION_AGESCITAS;
}
public String CONDICION_AGE;
public String getCONDICION_AGE(){
	return this.CONDICION_AGE;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "7.3";
	private final String jobName = "Agendamiento";
	private final String projectName = "REP_INICIO";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Agendamiento.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Agendamiento.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");

// context.ACTUALIZACION_TOTAL = true;
context.FANTERIOR = TalendDate.formatDate("dd/MM/YYYY",TalendDate.addDate(TalendDate.getCurrentDate(),-1,"DD"));
//context.FANTERIOR = "01/07/2023";


if(context.ACTUALIZACION_TOTAL == false){
	System.out.println("  Actualización diaria");
	
	context.CONDICION_AGE = " AND (TO_DATE(TO_CHAR(cita.FMODIFICACION, 'DD-MM-YYYY'), 'DD-MM-YYYY') >= TO_DATE('" + context.FANTERIOR + "','DD-MM-YYYY') OR TO_DATE(TO_CHAR(scita.FMODIFICACION, 'DD-MM-YYYY'), 'DD-MM-YYYY') >= TO_DATE('" + context.FANTERIOR + "','DD-MM-YYYY'))";
	context.CONDICION_AGECITAS  = " AND cita.FMODIFICACION >= TO_DATE('" + context.FANTERIOR + "','DD-MM-YYYY')";	
	context.CONDICION_AGESCITAS = " AND scita.FMODIFICACION >= TO_DATE('" + context.FANTERIOR + "','DD-MM-YYYY')";
	
} else {
	System.out.println("  Actualización total");	
}

 System.out.println(context.CONDICION_AGE);
 System.out.println(context.CONDICION_AGECITAS);
 System.out.println(context.CONDICION_AGESCITAS);





 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk18", 0, "ok");
				}
				tOracleInput_9Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class TINDICADORES_OUTStruct implements routines.system.IPersistableRow<TINDICADORES_OUTStruct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 20;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 250;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String CIRCULAR;

				public String getCIRCULAR () {
					return this.CIRCULAR;
				}

				public Boolean CIRCULARIsNullable(){
				    return true;
				}
				public Boolean CIRCULARIsKey(){
				    return false;
				}
				public Integer CIRCULARLength(){
				    return 20;
				}
				public Integer CIRCULARPrecision(){
				    return 0;
				}
				public String CIRCULARDefault(){
				
					return null;
				
				}
				public String CIRCULARComment(){
				
				    return "";
				
				}
				public String CIRCULARPattern(){
				
					return "";
				
				}
				public String CIRCULAROriginalDbColumnName(){
				
					return "CIRCULAR";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return null;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public BigDecimal META;

				public BigDecimal getMETA () {
					return this.META;
				}

				public Boolean METAIsNullable(){
				    return true;
				}
				public Boolean METAIsKey(){
				    return false;
				}
				public Integer METALength(){
				    return 0;
				}
				public Integer METAPrecision(){
				    return null;
				}
				public String METADefault(){
				
					return null;
				
				}
				public String METAComment(){
				
				    return "";
				
				}
				public String METAPattern(){
				
					return "";
				
				}
				public String METAOriginalDbColumnName(){
				
					return "META";
				
				}

				
			    public String UNIDAD;

				public String getUNIDAD () {
					return this.UNIDAD;
				}

				public Boolean UNIDADIsNullable(){
				    return true;
				}
				public Boolean UNIDADIsKey(){
				    return false;
				}
				public Integer UNIDADLength(){
				    return 20;
				}
				public Integer UNIDADPrecision(){
				    return 0;
				}
				public String UNIDADDefault(){
				
					return null;
				
				}
				public String UNIDADComment(){
				
				    return "";
				
				}
				public String UNIDADPattern(){
				
					return "";
				
				}
				public String UNIDADOriginalDbColumnName(){
				
					return "UNIDAD";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final TINDICADORES_OUTStruct other = (TINDICADORES_OUTStruct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(TINDICADORES_OUTStruct other) {

		other.ID = this.ID;
	            other.CODIGO = this.CODIGO;
	            other.NOMBRE = this.NOMBRE;
	            other.CIRCULAR = this.CIRCULAR;
	            other.ESPECIALIDADES_ID = this.ESPECIALIDADES_ID;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            other.META = this.META;
	            other.UNIDAD = this.UNIDAD;
	            
	}

	public void copyKeysDataTo(TINDICADORES_OUTStruct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.CODIGO = readString(dis);
					
					this.NOMBRE = readString(dis);
					
					this.CIRCULAR = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.META = (BigDecimal) dis.readObject();
					
					this.UNIDAD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.CODIGO = readString(dis);
					
					this.NOMBRE = readString(dis);
					
					this.CIRCULAR = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.META = (BigDecimal) dis.readObject();
					
					this.UNIDAD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.CIRCULAR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.META);
					
					// String
				
						writeString(this.UNIDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.CIRCULAR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.META);
					
					// String
				
						writeString(this.UNIDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CIRCULAR="+CIRCULAR);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",META="+String.valueOf(META));
		sb.append(",UNIDAD="+UNIDAD);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(TINDICADORES_OUTStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class TINDICADORES_ACTUALIZAR_OUTStruct implements routines.system.IPersistableRow<TINDICADORES_ACTUALIZAR_OUTStruct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 20;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 250;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String CIRCULAR;

				public String getCIRCULAR () {
					return this.CIRCULAR;
				}

				public Boolean CIRCULARIsNullable(){
				    return true;
				}
				public Boolean CIRCULARIsKey(){
				    return false;
				}
				public Integer CIRCULARLength(){
				    return 20;
				}
				public Integer CIRCULARPrecision(){
				    return 0;
				}
				public String CIRCULARDefault(){
				
					return null;
				
				}
				public String CIRCULARComment(){
				
				    return "";
				
				}
				public String CIRCULARPattern(){
				
					return "";
				
				}
				public String CIRCULAROriginalDbColumnName(){
				
					return "CIRCULAR";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return null;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public BigDecimal META;

				public BigDecimal getMETA () {
					return this.META;
				}

				public Boolean METAIsNullable(){
				    return true;
				}
				public Boolean METAIsKey(){
				    return false;
				}
				public Integer METALength(){
				    return 0;
				}
				public Integer METAPrecision(){
				    return null;
				}
				public String METADefault(){
				
					return null;
				
				}
				public String METAComment(){
				
				    return "";
				
				}
				public String METAPattern(){
				
					return "";
				
				}
				public String METAOriginalDbColumnName(){
				
					return "META";
				
				}

				
			    public String UNIDAD;

				public String getUNIDAD () {
					return this.UNIDAD;
				}

				public Boolean UNIDADIsNullable(){
				    return true;
				}
				public Boolean UNIDADIsKey(){
				    return false;
				}
				public Integer UNIDADLength(){
				    return 20;
				}
				public Integer UNIDADPrecision(){
				    return 0;
				}
				public String UNIDADDefault(){
				
					return null;
				
				}
				public String UNIDADComment(){
				
				    return "";
				
				}
				public String UNIDADPattern(){
				
					return "";
				
				}
				public String UNIDADOriginalDbColumnName(){
				
					return "UNIDAD";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final TINDICADORES_ACTUALIZAR_OUTStruct other = (TINDICADORES_ACTUALIZAR_OUTStruct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(TINDICADORES_ACTUALIZAR_OUTStruct other) {

		other.ID = this.ID;
	            other.CODIGO = this.CODIGO;
	            other.NOMBRE = this.NOMBRE;
	            other.CIRCULAR = this.CIRCULAR;
	            other.ESPECIALIDADES_ID = this.ESPECIALIDADES_ID;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            other.META = this.META;
	            other.UNIDAD = this.UNIDAD;
	            
	}

	public void copyKeysDataTo(TINDICADORES_ACTUALIZAR_OUTStruct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.CODIGO = readString(dis);
					
					this.NOMBRE = readString(dis);
					
					this.CIRCULAR = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.META = (BigDecimal) dis.readObject();
					
					this.UNIDAD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.CODIGO = readString(dis);
					
					this.NOMBRE = readString(dis);
					
					this.CIRCULAR = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.META = (BigDecimal) dis.readObject();
					
					this.UNIDAD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.CIRCULAR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.META);
					
					// String
				
						writeString(this.UNIDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.CIRCULAR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.META);
					
					// String
				
						writeString(this.UNIDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CIRCULAR="+CIRCULAR);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",META="+String.valueOf(META));
		sb.append(",UNIDAD="+UNIDAD);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(TINDICADORES_ACTUALIZAR_OUTStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ins_tincadorStruct implements routines.system.IPersistableRow<ins_tincadorStruct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 20;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 250;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String CIRCULAR;

				public String getCIRCULAR () {
					return this.CIRCULAR;
				}

				public Boolean CIRCULARIsNullable(){
				    return true;
				}
				public Boolean CIRCULARIsKey(){
				    return false;
				}
				public Integer CIRCULARLength(){
				    return 20;
				}
				public Integer CIRCULARPrecision(){
				    return 0;
				}
				public String CIRCULARDefault(){
				
					return null;
				
				}
				public String CIRCULARComment(){
				
				    return "";
				
				}
				public String CIRCULARPattern(){
				
					return "";
				
				}
				public String CIRCULAROriginalDbColumnName(){
				
					return "CIRCULAR";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return null;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public BigDecimal META;

				public BigDecimal getMETA () {
					return this.META;
				}

				public Boolean METAIsNullable(){
				    return true;
				}
				public Boolean METAIsKey(){
				    return false;
				}
				public Integer METALength(){
				    return 0;
				}
				public Integer METAPrecision(){
				    return null;
				}
				public String METADefault(){
				
					return null;
				
				}
				public String METAComment(){
				
				    return "";
				
				}
				public String METAPattern(){
				
					return "";
				
				}
				public String METAOriginalDbColumnName(){
				
					return "META";
				
				}

				
			    public String UNIDAD;

				public String getUNIDAD () {
					return this.UNIDAD;
				}

				public Boolean UNIDADIsNullable(){
				    return true;
				}
				public Boolean UNIDADIsKey(){
				    return false;
				}
				public Integer UNIDADLength(){
				    return 20;
				}
				public Integer UNIDADPrecision(){
				    return 0;
				}
				public String UNIDADDefault(){
				
					return null;
				
				}
				public String UNIDADComment(){
				
				    return "";
				
				}
				public String UNIDADPattern(){
				
					return "";
				
				}
				public String UNIDADOriginalDbColumnName(){
				
					return "UNIDAD";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.CODIGO = readString(dis);
					
					this.NOMBRE = readString(dis);
					
					this.CIRCULAR = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.META = (BigDecimal) dis.readObject();
					
					this.UNIDAD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.CODIGO = readString(dis);
					
					this.NOMBRE = readString(dis);
					
					this.CIRCULAR = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.META = (BigDecimal) dis.readObject();
					
					this.UNIDAD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.CIRCULAR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.META);
					
					// String
				
						writeString(this.UNIDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.CIRCULAR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.META);
					
					// String
				
						writeString(this.UNIDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CIRCULAR="+CIRCULAR);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",META="+String.valueOf(META));
		sb.append(",UNIDAD="+UNIDAD);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ins_tincadorStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal INDICADOR;

				public BigDecimal getINDICADOR () {
					return this.INDICADOR;
				}

				public Boolean INDICADORIsNullable(){
				    return true;
				}
				public Boolean INDICADORIsKey(){
				    return false;
				}
				public Integer INDICADORLength(){
				    return 0;
				}
				public Integer INDICADORPrecision(){
				    return null;
				}
				public String INDICADORDefault(){
				
					return "";
				
				}
				public String INDICADORComment(){
				
				    return "";
				
				}
				public String INDICADORPattern(){
				
					return "";
				
				}
				public String INDICADOROriginalDbColumnName(){
				
					return "INDICADOR";
				
				}

				
			    public String NOMBRE_INDICADOR1;

				public String getNOMBRE_INDICADOR1 () {
					return this.NOMBRE_INDICADOR1;
				}

				public Boolean NOMBRE_INDICADOR1IsNullable(){
				    return true;
				}
				public Boolean NOMBRE_INDICADOR1IsKey(){
				    return false;
				}
				public Integer NOMBRE_INDICADOR1Length(){
				    return 21;
				}
				public Integer NOMBRE_INDICADOR1Precision(){
				    return 0;
				}
				public String NOMBRE_INDICADOR1Default(){
				
					return null;
				
				}
				public String NOMBRE_INDICADOR1Comment(){
				
				    return "";
				
				}
				public String NOMBRE_INDICADOR1Pattern(){
				
					return "";
				
				}
				public String NOMBRE_INDICADOR1OriginalDbColumnName(){
				
					return "NOMBRE_INDICADOR1";
				
				}

				
			    public String CIRCULAR;

				public String getCIRCULAR () {
					return this.CIRCULAR;
				}

				public Boolean CIRCULARIsNullable(){
				    return true;
				}
				public Boolean CIRCULARIsKey(){
				    return false;
				}
				public Integer CIRCULARLength(){
				    return 3;
				}
				public Integer CIRCULARPrecision(){
				    return 0;
				}
				public String CIRCULARDefault(){
				
					return null;
				
				}
				public String CIRCULARComment(){
				
				    return "";
				
				}
				public String CIRCULARPattern(){
				
					return "";
				
				}
				public String CIRCULAROriginalDbColumnName(){
				
					return "CIRCULAR";
				
				}

				
			    public BigDecimal ESPECIALIDAD_ID;

				public BigDecimal getESPECIALIDAD_ID () {
					return this.ESPECIALIDAD_ID;
				}

				public Boolean ESPECIALIDAD_IDIsNullable(){
				    return false;
				}
				public Boolean ESPECIALIDAD_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDAD_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDAD_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDAD_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDAD_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDAD_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDAD_IDOriginalDbColumnName(){
				
					return "ESPECIALIDAD_ID";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
					this.NOMBRE_INDICADOR1 = readString(dis);
					
					this.CIRCULAR = readString(dis);
					
						this.ESPECIALIDAD_ID = (BigDecimal) dis.readObject();
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
					this.NOMBRE_INDICADOR1 = readString(dis);
					
					this.CIRCULAR = readString(dis);
					
						this.ESPECIALIDAD_ID = (BigDecimal) dis.readObject();
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR);
					
					// String
				
						writeString(this.NOMBRE_INDICADOR1,dos);
					
					// String
				
						writeString(this.CIRCULAR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDAD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR);
					
					// String
				
						writeString(this.NOMBRE_INDICADOR1,dos);
					
					// String
				
						writeString(this.CIRCULAR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDAD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",INDICADOR="+String.valueOf(INDICADOR));
		sb.append(",NOMBRE_INDICADOR1="+NOMBRE_INDICADOR1);
		sb.append(",CIRCULAR="+CIRCULAR);
		sb.append(",ESPECIALIDAD_ID="+String.valueOf(ESPECIALIDAD_ID));
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_9Struct implements routines.system.IPersistableRow<after_tOracleInput_9Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal INDICADOR;

				public BigDecimal getINDICADOR () {
					return this.INDICADOR;
				}

				public Boolean INDICADORIsNullable(){
				    return true;
				}
				public Boolean INDICADORIsKey(){
				    return false;
				}
				public Integer INDICADORLength(){
				    return 0;
				}
				public Integer INDICADORPrecision(){
				    return null;
				}
				public String INDICADORDefault(){
				
					return "";
				
				}
				public String INDICADORComment(){
				
				    return "";
				
				}
				public String INDICADORPattern(){
				
					return "";
				
				}
				public String INDICADOROriginalDbColumnName(){
				
					return "INDICADOR";
				
				}

				
			    public String NOMBRE_INDICADOR1;

				public String getNOMBRE_INDICADOR1 () {
					return this.NOMBRE_INDICADOR1;
				}

				public Boolean NOMBRE_INDICADOR1IsNullable(){
				    return true;
				}
				public Boolean NOMBRE_INDICADOR1IsKey(){
				    return false;
				}
				public Integer NOMBRE_INDICADOR1Length(){
				    return 21;
				}
				public Integer NOMBRE_INDICADOR1Precision(){
				    return 0;
				}
				public String NOMBRE_INDICADOR1Default(){
				
					return null;
				
				}
				public String NOMBRE_INDICADOR1Comment(){
				
				    return "";
				
				}
				public String NOMBRE_INDICADOR1Pattern(){
				
					return "";
				
				}
				public String NOMBRE_INDICADOR1OriginalDbColumnName(){
				
					return "NOMBRE_INDICADOR1";
				
				}

				
			    public String CIRCULAR;

				public String getCIRCULAR () {
					return this.CIRCULAR;
				}

				public Boolean CIRCULARIsNullable(){
				    return true;
				}
				public Boolean CIRCULARIsKey(){
				    return false;
				}
				public Integer CIRCULARLength(){
				    return 3;
				}
				public Integer CIRCULARPrecision(){
				    return 0;
				}
				public String CIRCULARDefault(){
				
					return null;
				
				}
				public String CIRCULARComment(){
				
				    return "";
				
				}
				public String CIRCULARPattern(){
				
					return "";
				
				}
				public String CIRCULAROriginalDbColumnName(){
				
					return "CIRCULAR";
				
				}

				
			    public BigDecimal ESPECIALIDAD_ID;

				public BigDecimal getESPECIALIDAD_ID () {
					return this.ESPECIALIDAD_ID;
				}

				public Boolean ESPECIALIDAD_IDIsNullable(){
				    return false;
				}
				public Boolean ESPECIALIDAD_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDAD_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDAD_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDAD_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDAD_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDAD_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDAD_IDOriginalDbColumnName(){
				
					return "ESPECIALIDAD_ID";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
					this.NOMBRE_INDICADOR1 = readString(dis);
					
					this.CIRCULAR = readString(dis);
					
						this.ESPECIALIDAD_ID = (BigDecimal) dis.readObject();
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.INDICADOR = (BigDecimal) dis.readObject();
					
					this.NOMBRE_INDICADOR1 = readString(dis);
					
					this.CIRCULAR = readString(dis);
					
						this.ESPECIALIDAD_ID = (BigDecimal) dis.readObject();
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INDICADOR);
					
					// String
				
						writeString(this.NOMBRE_INDICADOR1,dos);
					
					// String
				
						writeString(this.CIRCULAR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDAD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INDICADOR);
					
					// String
				
						writeString(this.NOMBRE_INDICADOR1,dos);
					
					// String
				
						writeString(this.CIRCULAR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDAD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",INDICADOR="+String.valueOf(INDICADOR));
		sb.append(",NOMBRE_INDICADOR1="+NOMBRE_INDICADOR1);
		sb.append(",CIRCULAR="+CIRCULAR);
		sb.append(",ESPECIALIDAD_ID="+String.valueOf(ESPECIALIDAD_ID));
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_27Process(globalMap);
		tOracleInput_11Process(globalMap);

		row10Struct row10 = new row10Struct();
ins_tincadorStruct ins_tincador = new ins_tincadorStruct();
TINDICADORES_OUTStruct TINDICADORES_OUT = new TINDICADORES_OUTStruct();
TINDICADORES_ACTUALIZAR_OUTStruct TINDICADORES_ACTUALIZAR_OUT = new TINDICADORES_ACTUALIZAR_OUTStruct();






	
	/**
	 * [tOracleOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_5", false);
		start_Hash.put("tOracleOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"TINDICADORES_OUT");
					}
				
		int tos_count_tOracleOutput_5 = 0;
		






        int updateKeyCount_tOracleOutput_5 = 1;
        if(updateKeyCount_tOracleOutput_5 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_5 == 8 && true) {
                    System.err.println("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_5 = 0;
    int nb_line_update_tOracleOutput_5 = 0;
    int nb_line_inserted_tOracleOutput_5 = 0;
    int nb_line_deleted_tOracleOutput_5 = 0;
    int nb_line_rejected_tOracleOutput_5 = 0;

    int tmp_batchUpdateCount_tOracleOutput_5 = 0;

    int deletedCount_tOracleOutput_5=0;
    int updatedCount_tOracleOutput_5=0;
    int insertedCount_tOracleOutput_5=0;
    int rowsToCommitCount_tOracleOutput_5=0;
    int rejectedCount_tOracleOutput_5=0;

    boolean whetherReject_tOracleOutput_5 = false;

    java.sql.Connection conn_tOracleOutput_5 = null;

    //optional table
    String dbschema_tOracleOutput_5 = null;
    String tableName_tOracleOutput_5 = null;
        dbschema_tOracleOutput_5 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_5=0;

        if(dbschema_tOracleOutput_5 == null || dbschema_tOracleOutput_5.trim().length() == 0) {
            tableName_tOracleOutput_5 = ("BAGE_TINDICADORES");
        } else {
            tableName_tOracleOutput_5 = dbschema_tOracleOutput_5 + "." + ("BAGE_TINDICADORES");
        }
                java.sql.PreparedStatement pstmt_tOracleOutput_5 = conn_tOracleOutput_5.prepareStatement("SELECT COUNT(1) FROM " + tableName_tOracleOutput_5 + " WHERE ID = ?");
                resourceMap.put("pstmt_tOracleOutput_5", pstmt_tOracleOutput_5);
                String insert_tOracleOutput_5 = "INSERT INTO " + tableName_tOracleOutput_5 + " (ID,CODIGO,NOMBRE,CIRCULAR,ESPECIALIDADES_ID,ESTREGISTRO_ID,META,UNIDAD) VALUES (?,?,?,?,?,?,?,?)";    
                java.sql.PreparedStatement pstmtInsert_tOracleOutput_5 = conn_tOracleOutput_5.prepareStatement(insert_tOracleOutput_5);
                resourceMap.put("pstmtInsert_tOracleOutput_5", pstmtInsert_tOracleOutput_5);
                String update_tOracleOutput_5 = "UPDATE " + tableName_tOracleOutput_5 + " SET CODIGO = ?,NOMBRE = ?,CIRCULAR = ?,ESPECIALIDADES_ID = ?,ESTREGISTRO_ID = ?,META = ?,UNIDAD = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmtUpdate_tOracleOutput_5 = conn_tOracleOutput_5.prepareStatement(update_tOracleOutput_5);
                resourceMap.put("pstmtUpdate_tOracleOutput_5", pstmtUpdate_tOracleOutput_5);





 



/**
 * [tOracleOutput_5 begin ] stop
 */




	
	/**
	 * [tOracleOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_2", false);
		start_Hash.put("tOracleOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"TINDICADORES_ACTUALIZAR_OUT");
					}
				
		int tos_count_tOracleOutput_2 = 0;
		






        int updateKeyCount_tOracleOutput_2 = 1;
        if(updateKeyCount_tOracleOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_2 == 8 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_2 = 0;
    int nb_line_update_tOracleOutput_2 = 0;
    int nb_line_inserted_tOracleOutput_2 = 0;
    int nb_line_deleted_tOracleOutput_2 = 0;
    int nb_line_rejected_tOracleOutput_2 = 0;

    int tmp_batchUpdateCount_tOracleOutput_2 = 0;

    int deletedCount_tOracleOutput_2=0;
    int updatedCount_tOracleOutput_2=0;
    int insertedCount_tOracleOutput_2=0;
    int rowsToCommitCount_tOracleOutput_2=0;
    int rejectedCount_tOracleOutput_2=0;

    boolean whetherReject_tOracleOutput_2 = false;

    java.sql.Connection conn_tOracleOutput_2 = null;

    //optional table
    String dbschema_tOracleOutput_2 = null;
    String tableName_tOracleOutput_2 = null;
        dbschema_tOracleOutput_2 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_2=0;

        if(dbschema_tOracleOutput_2 == null || dbschema_tOracleOutput_2.trim().length() == 0) {
            tableName_tOracleOutput_2 = ("BAGE_TINDICADORES");
        } else {
            tableName_tOracleOutput_2 = dbschema_tOracleOutput_2 + "." + ("BAGE_TINDICADORES");
        }
                String update_tOracleOutput_2 = "UPDATE " + tableName_tOracleOutput_2 + " SET CODIGO = ?,NOMBRE = ?,CIRCULAR = ?,ESPECIALIDADES_ID = ?,ESTREGISTRO_ID = ?,META = ?,UNIDAD = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_2 = conn_tOracleOutput_2.prepareStatement(update_tOracleOutput_2);
                resourceMap.put("pstmt_tOracleOutput_2", pstmt_tOracleOutput_2);





 



/**
 * [tOracleOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ins_tincador");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) 
					globalMap.get( "tHash_Lookup_row19" ))
					;					
					
	

row19Struct row19HashKey = new row19Struct();
row19Struct row19Default = new row19Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
TINDICADORES_OUTStruct TINDICADORES_OUT_tmp = new TINDICADORES_OUTStruct();
TINDICADORES_ACTUALIZAR_OUTStruct TINDICADORES_ACTUALIZAR_OUT_tmp = new TINDICADORES_ACTUALIZAR_OUTStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) 
					globalMap.get( "tHash_Lookup_row18" ))
					;					
					
	

row18Struct row18HashKey = new row18Struct();
row18Struct row18Default = new row18Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
ins_tincadorStruct ins_tincador_tmp = new ins_tincadorStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tOracleInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_9", false);
		start_Hash.put("tOracleInput_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_9";
	
	
		int tos_count_tOracleInput_9 = 0;
		
	


	
		    int nb_line_tOracleInput_9 = 0;
		    java.sql.Connection conn_tOracleInput_9 = null;
				conn_tOracleInput_9 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_9 = false;
				boolean isConnectionWrapped_tOracleInput_9 = !(conn_tOracleInput_9 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_9.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_9 = null;
                if (isConnectionWrapped_tOracleInput_9) {
					unwrappedOraConn_tOracleInput_9 = conn_tOracleInput_9.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_9 != null) {
                        isTimeZoneNull_tOracleInput_9 = (unwrappedOraConn_tOracleInput_9.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_9 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_9).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_9) {
					java.sql.Statement stmtGetTZ_tOracleInput_9 = conn_tOracleInput_9.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_9 = stmtGetTZ_tOracleInput_9.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_9 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_9.next()) {
						sessionTimezone_tOracleInput_9 = rsGetTZ_tOracleInput_9.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_9 && unwrappedOraConn_tOracleInput_9 != null) {
                        unwrappedOraConn_tOracleInput_9.setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_9).setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_9 = conn_tOracleInput_9.createStatement();

		    String dbquery_tOracleInput_9 = "select \nTO_NUMBER(TO_CHAR(IND.INDICADOR) || TO_CHAR(ESP.ID)) AS ID,\nIND.*,\nESP.ID AS ESPECIALIDAD_ID,\nESP.ESTREGIST"
+"RO_ID\nfrom ( \nSELECT    1 AS INDICADOR\n        , 'INDICADOR OPORTUNIDAD' AS NOMBRE_INDICADOR1\n        , '030' AS CIR"
+"CULAR        \nFROM DUAL \nUNION ALL\nSELECT    2 AS INDICADOR\n        , 'TIEMPO ESPERA' AS NOMBRE_INDICADOR2\n        "
+", '056' AS CIRCULAR\nFROM DUAL ) IND\nCROSS JOIN\n(\nselect DISTINCT\nges.*\nfrom gen_especialidades GES\nINNER JOIN AGE"
+"_SCITAS scita ON scita.especialidades_id = GES.id\nINNER JOIN AGE_CITAS cita ON scita.ID = cita.SCITAS_ID\nwhere\nGES.ES"
+"TREGISTRO_ID = 1) ESP";
		    

		    globalMap.put("tOracleInput_9_QUERY",dbquery_tOracleInput_9);

		    java.sql.ResultSet rs_tOracleInput_9 = null;

		    try {
		    	rs_tOracleInput_9 = stmt_tOracleInput_9.executeQuery(dbquery_tOracleInput_9);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_9 = rs_tOracleInput_9.getMetaData();
		    	int colQtyInRs_tOracleInput_9 = rsmd_tOracleInput_9.getColumnCount();

		    String tmpContent_tOracleInput_9 = null;
		    
		    
		    while (rs_tOracleInput_9.next()) {
		        nb_line_tOracleInput_9++;
		        
							if(colQtyInRs_tOracleInput_9 < 1) {
								row10.ID = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(1) != null) {
						row10.ID = rs_tOracleInput_9.getBigDecimal(1);
					} else {
				
						row10.ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 2) {
								row10.INDICADOR = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(2) != null) {
						row10.INDICADOR = rs_tOracleInput_9.getBigDecimal(2);
					} else {
				
						row10.INDICADOR = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 3) {
								row10.NOMBRE_INDICADOR1 = null;
							} else {
	                         		
        	row10.NOMBRE_INDICADOR1 = routines.system.JDBCUtil.getString(rs_tOracleInput_9, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_9 < 4) {
								row10.CIRCULAR = null;
							} else {
	                         		
        	row10.CIRCULAR = routines.system.JDBCUtil.getString(rs_tOracleInput_9, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_9 < 5) {
								row10.ESPECIALIDAD_ID = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(5) != null) {
						row10.ESPECIALIDAD_ID = rs_tOracleInput_9.getBigDecimal(5);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 6) {
								row10.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(6) != null) {
						row10.ESTREGISTRO_ID = rs_tOracleInput_9.getBigDecimal(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_9 begin ] stop
 */
	
	/**
	 * [tOracleInput_9 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 


	tos_count_tOracleInput_9++;

/**
 * [tOracleInput_9 main ] stop
 */
	
	/**
	 * [tOracleInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
						row18Struct row18 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row18" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow18 = false;
       		  	    	
       		  	    	
 							row18Struct row18ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row18HashKey.CIRCULAR = row10.CIRCULAR ;
                        		    		
                        		    		    row18HashKey.ESPECIALIDADES_ID = row10.ESPECIALIDAD_ID ;
                        		    		

								
		                        	row18HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row18.lookup( row18HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row18 != null && tHash_Lookup_row18.getCount(row18HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row18' and it contains more one result from keys :  row18.CIRCULAR = '" + row18HashKey.CIRCULAR + "', row18.ESPECIALIDADES_ID = '" + row18HashKey.ESPECIALIDADES_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row18Struct fromLookup_row18 = null;
							row18 = row18Default;
										 
							
								 
							
							
								if (tHash_Lookup_row18 !=null && tHash_Lookup_row18.hasNext()) { // G 099
								
							
								
								fromLookup_row18 = tHash_Lookup_row18.next();

							
							
								} // G 099
							
							

							if(fromLookup_row18 != null) {
								row18 = fromLookup_row18;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

ins_tincador = null;


// # Output table : 'ins_tincador'
ins_tincador_tmp.ID = row10.ID;
ins_tincador_tmp.CODIGO = row18.CODIGO ;
ins_tincador_tmp.NOMBRE = row10.NOMBRE_INDICADOR1 ;
ins_tincador_tmp.CIRCULAR = row10.CIRCULAR;
ins_tincador_tmp.ESPECIALIDADES_ID = row10.ESPECIALIDAD_ID ;
ins_tincador_tmp.ESTREGISTRO_ID = row10.ESTREGISTRO_ID ;
ins_tincador_tmp.META = row18.META ;
ins_tincador_tmp.UNIDAD = row18.UNIDAD ;
ins_tincador = ins_tincador_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "ins_tincador"
if(ins_tincador != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ins_tincador"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
						row19Struct row19 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row19" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow19 = false;
       		  	    	
       		  	    	
 							row19Struct row19ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row19HashKey.ID = ins_tincador.ID ;
                        		    		

								
		                        	row19HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row19.lookup( row19HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row19.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row19 != null && tHash_Lookup_row19.getCount(row19HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row19' and it contains more one result from keys :  row19.ID = '" + row19HashKey.ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row19Struct fromLookup_row19 = null;
							row19 = row19Default;
										 
							
								 
							
							
								if (tHash_Lookup_row19 !=null && tHash_Lookup_row19.hasNext()) { // G 099
								
							
								
								fromLookup_row19 = tHash_Lookup_row19.next();

							
							
								} // G 099
							
							

							if(fromLookup_row19 != null) {
								row19 = fromLookup_row19;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

TINDICADORES_ACTUALIZAR_OUT = null;
TINDICADORES_OUT = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'TINDICADORES_ACTUALIZAR_OUT'
// # Filter conditions 
if( 

((ins_tincador.META != null &&  row19.META != null) ?
ins_tincador.META.equals(row19.META)!=true:false) ||
(row19.META == null && ins_tincador.META != null)

 ) {
TINDICADORES_ACTUALIZAR_OUT_tmp.ID = ins_tincador.ID;
TINDICADORES_ACTUALIZAR_OUT_tmp.CODIGO = ins_tincador.CODIGO;
TINDICADORES_ACTUALIZAR_OUT_tmp.NOMBRE = ins_tincador.NOMBRE;
TINDICADORES_ACTUALIZAR_OUT_tmp.CIRCULAR = ins_tincador.CIRCULAR;
TINDICADORES_ACTUALIZAR_OUT_tmp.ESPECIALIDADES_ID = ins_tincador.ESPECIALIDADES_ID;
TINDICADORES_ACTUALIZAR_OUT_tmp.ESTREGISTRO_ID = ins_tincador.ESTREGISTRO_ID;
TINDICADORES_ACTUALIZAR_OUT_tmp.META = ins_tincador.META;
TINDICADORES_ACTUALIZAR_OUT_tmp.UNIDAD = ins_tincador.UNIDAD;
TINDICADORES_ACTUALIZAR_OUT = TINDICADORES_ACTUALIZAR_OUT_tmp;
} // closing filter/reject
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'TINDICADORES_OUT'
// # Filter conditions 
if( rejectedInnerJoin_tMap_1 ) {
TINDICADORES_OUT_tmp.ID = ins_tincador.ID;
TINDICADORES_OUT_tmp.CODIGO = ins_tincador.CODIGO;
TINDICADORES_OUT_tmp.NOMBRE = ins_tincador.NOMBRE;
TINDICADORES_OUT_tmp.CIRCULAR = ins_tincador.CIRCULAR;
TINDICADORES_OUT_tmp.ESPECIALIDADES_ID = ins_tincador.ESPECIALIDADES_ID;
TINDICADORES_OUT_tmp.ESTREGISTRO_ID = ins_tincador.ESTREGISTRO_ID;
TINDICADORES_OUT_tmp.META = ins_tincador.META;
TINDICADORES_OUT_tmp.UNIDAD = ins_tincador.UNIDAD;
TINDICADORES_OUT = TINDICADORES_OUT_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "TINDICADORES_OUT"
if(TINDICADORES_OUT != null) { 



	
	/**
	 * [tOracleOutput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"TINDICADORES_OUT"
						
						);
					}
					



        whetherReject_tOracleOutput_5 = false;
                    pstmt_tOracleOutput_5.setBigDecimal(1, TINDICADORES_OUT.ID);

            int checkCount_tOracleOutput_5 = -1;
            try (java.sql.ResultSet rs_tOracleOutput_5 = pstmt_tOracleOutput_5.executeQuery()) {
                while(rs_tOracleOutput_5.next()) {
                    checkCount_tOracleOutput_5 = rs_tOracleOutput_5.getInt(1);
                }
            }
            if(checkCount_tOracleOutput_5 > 0) {
                        if(TINDICADORES_OUT.CODIGO == null) {
pstmtUpdate_tOracleOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_5.setString(1, TINDICADORES_OUT.CODIGO);
}

                        if(TINDICADORES_OUT.NOMBRE == null) {
pstmtUpdate_tOracleOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_5.setString(2, TINDICADORES_OUT.NOMBRE);
}

                        if(TINDICADORES_OUT.CIRCULAR == null) {
pstmtUpdate_tOracleOutput_5.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_5.setString(3, TINDICADORES_OUT.CIRCULAR);
}

                        pstmtUpdate_tOracleOutput_5.setBigDecimal(4, TINDICADORES_OUT.ESPECIALIDADES_ID);

                        pstmtUpdate_tOracleOutput_5.setBigDecimal(5, TINDICADORES_OUT.ESTREGISTRO_ID);

                        pstmtUpdate_tOracleOutput_5.setBigDecimal(6, TINDICADORES_OUT.META);

                        if(TINDICADORES_OUT.UNIDAD == null) {
pstmtUpdate_tOracleOutput_5.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_5.setString(7, TINDICADORES_OUT.UNIDAD);
}

                        pstmtUpdate_tOracleOutput_5.setBigDecimal(8 + count_tOracleOutput_5, TINDICADORES_OUT.ID);

                try {
                    int processedCount_tOracleOutput_5 = pstmtUpdate_tOracleOutput_5.executeUpdate();
                    updatedCount_tOracleOutput_5 += processedCount_tOracleOutput_5;
                    rowsToCommitCount_tOracleOutput_5 += processedCount_tOracleOutput_5;
                    nb_line_tOracleOutput_5++;
                } catch(java.lang.Exception e_tOracleOutput_5) {
globalMap.put("tOracleOutput_5_ERROR_MESSAGE",e_tOracleOutput_5.getMessage());
                    whetherReject_tOracleOutput_5 = true;
                        nb_line_tOracleOutput_5++;
                            System.err.print(e_tOracleOutput_5.getMessage());
                }
            } else {
                        pstmtInsert_tOracleOutput_5.setBigDecimal(1, TINDICADORES_OUT.ID);

                        if(TINDICADORES_OUT.CODIGO == null) {
pstmtInsert_tOracleOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_5.setString(2, TINDICADORES_OUT.CODIGO);
}

                        if(TINDICADORES_OUT.NOMBRE == null) {
pstmtInsert_tOracleOutput_5.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_5.setString(3, TINDICADORES_OUT.NOMBRE);
}

                        if(TINDICADORES_OUT.CIRCULAR == null) {
pstmtInsert_tOracleOutput_5.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_5.setString(4, TINDICADORES_OUT.CIRCULAR);
}

                        pstmtInsert_tOracleOutput_5.setBigDecimal(5, TINDICADORES_OUT.ESPECIALIDADES_ID);

                        pstmtInsert_tOracleOutput_5.setBigDecimal(6, TINDICADORES_OUT.ESTREGISTRO_ID);

                        pstmtInsert_tOracleOutput_5.setBigDecimal(7, TINDICADORES_OUT.META);

                        if(TINDICADORES_OUT.UNIDAD == null) {
pstmtInsert_tOracleOutput_5.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_5.setString(8, TINDICADORES_OUT.UNIDAD);
}

                try {
                    int processedCount_tOracleOutput_5 = pstmtInsert_tOracleOutput_5.executeUpdate();
                    insertedCount_tOracleOutput_5 += processedCount_tOracleOutput_5;
                    rowsToCommitCount_tOracleOutput_5 += processedCount_tOracleOutput_5;
                    nb_line_tOracleOutput_5++;
                } catch(java.lang.Exception e_tOracleOutput_5) {
globalMap.put("tOracleOutput_5_ERROR_MESSAGE",e_tOracleOutput_5.getMessage());
                    whetherReject_tOracleOutput_5 = true;
                        nb_line_tOracleOutput_5++;
                            System.err.print(e_tOracleOutput_5.getMessage());
                }
            }

 


	tos_count_tOracleOutput_5++;

/**
 * [tOracleOutput_5 main ] stop
 */
	
	/**
	 * [tOracleOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	

 



/**
 * [tOracleOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	

 



/**
 * [tOracleOutput_5 process_data_end ] stop
 */

} // End of branch "TINDICADORES_OUT"




// Start of branch "TINDICADORES_ACTUALIZAR_OUT"
if(TINDICADORES_ACTUALIZAR_OUT != null) { 



	
	/**
	 * [tOracleOutput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"TINDICADORES_ACTUALIZAR_OUT"
						
						);
					}
					



        whetherReject_tOracleOutput_2 = false;
                    if(TINDICADORES_ACTUALIZAR_OUT.CODIGO == null) {
pstmt_tOracleOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(1, TINDICADORES_ACTUALIZAR_OUT.CODIGO);
}

                    if(TINDICADORES_ACTUALIZAR_OUT.NOMBRE == null) {
pstmt_tOracleOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(2, TINDICADORES_ACTUALIZAR_OUT.NOMBRE);
}

                    if(TINDICADORES_ACTUALIZAR_OUT.CIRCULAR == null) {
pstmt_tOracleOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(3, TINDICADORES_ACTUALIZAR_OUT.CIRCULAR);
}

                    pstmt_tOracleOutput_2.setBigDecimal(4, TINDICADORES_ACTUALIZAR_OUT.ESPECIALIDADES_ID);

                    pstmt_tOracleOutput_2.setBigDecimal(5, TINDICADORES_ACTUALIZAR_OUT.ESTREGISTRO_ID);

                    pstmt_tOracleOutput_2.setBigDecimal(6, TINDICADORES_ACTUALIZAR_OUT.META);

                    if(TINDICADORES_ACTUALIZAR_OUT.UNIDAD == null) {
pstmt_tOracleOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(7, TINDICADORES_ACTUALIZAR_OUT.UNIDAD);
}


                    pstmt_tOracleOutput_2.setBigDecimal(8 + count_tOracleOutput_2, TINDICADORES_ACTUALIZAR_OUT.ID);

                try {
                    nb_line_tOracleOutput_2++;
                    int processedCount_tOracleOutput_2 = pstmt_tOracleOutput_2.executeUpdate();
                    updatedCount_tOracleOutput_2 += processedCount_tOracleOutput_2;
                    rowsToCommitCount_tOracleOutput_2 += processedCount_tOracleOutput_2;
                } catch(java.lang.Exception e_tOracleOutput_2) {
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
                    whetherReject_tOracleOutput_2 = true;
                            System.err.print(e_tOracleOutput_2.getMessage());
                }

 


	tos_count_tOracleOutput_2++;

/**
 * [tOracleOutput_2 main ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_end ] stop
 */

} // End of branch "TINDICADORES_ACTUALIZAR_OUT"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "ins_tincador"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_9 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

}
}finally{
	if (rs_tOracleInput_9 != null) {
		rs_tOracleInput_9.close();
	}
	if (stmt_tOracleInput_9 != null) {
		stmt_tOracleInput_9.close();
	}
}

globalMap.put("tOracleInput_9_NB_LINE",nb_line_tOracleInput_9);
 

ok_Hash.put("tOracleInput_9", true);
end_Hash.put("tOracleInput_9", System.currentTimeMillis());




/**
 * [tOracleInput_9 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row18 != null) {
						tHash_Lookup_row18.endGet();
					}
					globalMap.remove( "tHash_Lookup_row18" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row19 != null) {
						tHash_Lookup_row19.endGet();
					}
					globalMap.remove( "tHash_Lookup_row19" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ins_tincador");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tOracleOutput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	
	



	
        if(pstmtUpdate_tOracleOutput_5 != null){
            pstmtUpdate_tOracleOutput_5.close();
            resourceMap.remove("pstmtUpdate_tOracleOutput_5");
        }
        if(pstmtInsert_tOracleOutput_5 != null){
            pstmtInsert_tOracleOutput_5.close();
            resourceMap.remove("pstmtInsert_tOracleOutput_5");
        }
        if(pstmt_tOracleOutput_5 != null) {
            pstmt_tOracleOutput_5.close();
            resourceMap.remove("pstmt_tOracleOutput_5");
        }
    resourceMap.put("statementClosed_tOracleOutput_5", true);

	
	nb_line_deleted_tOracleOutput_5=nb_line_deleted_tOracleOutput_5+ deletedCount_tOracleOutput_5;
	nb_line_update_tOracleOutput_5=nb_line_update_tOracleOutput_5 + updatedCount_tOracleOutput_5;
	nb_line_inserted_tOracleOutput_5=nb_line_inserted_tOracleOutput_5 + insertedCount_tOracleOutput_5;
	nb_line_rejected_tOracleOutput_5=nb_line_rejected_tOracleOutput_5 + rejectedCount_tOracleOutput_5;
	
        globalMap.put("tOracleOutput_5_NB_LINE",nb_line_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_UPDATED",nb_line_update_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_5);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"TINDICADORES_OUT");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_5", true);
end_Hash.put("tOracleOutput_5", System.currentTimeMillis());




/**
 * [tOracleOutput_5 end ] stop
 */




	
	/**
	 * [tOracleOutput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
	



	
        if(pstmt_tOracleOutput_2 != null) {
			
				pstmt_tOracleOutput_2.close();
				resourceMap.remove("pstmt_tOracleOutput_2");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_2", true);

	
	nb_line_deleted_tOracleOutput_2=nb_line_deleted_tOracleOutput_2+ deletedCount_tOracleOutput_2;
	nb_line_update_tOracleOutput_2=nb_line_update_tOracleOutput_2 + updatedCount_tOracleOutput_2;
	nb_line_inserted_tOracleOutput_2=nb_line_inserted_tOracleOutput_2 + insertedCount_tOracleOutput_2;
	nb_line_rejected_tOracleOutput_2=nb_line_rejected_tOracleOutput_2 + rejectedCount_tOracleOutput_2;
	
        globalMap.put("tOracleOutput_2_NB_LINE",nb_line_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_UPDATED",nb_line_update_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_2);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"TINDICADORES_ACTUALIZAR_OUT");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_2", true);
end_Hash.put("tOracleOutput_2", System.currentTimeMillis());




/**
 * [tOracleOutput_2 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_9:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tOracleInput_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row19"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row18"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tOracleOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_5") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tOracleOutput_5 = null;
                if ((pstmtUpdateToClose_tOracleOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tOracleOutput_5")) != null) {
                    pstmtUpdateToClose_tOracleOutput_5.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tOracleOutput_5 = null;
                if ((pstmtInsertToClose_tOracleOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tOracleOutput_5")) != null) {
                    pstmtInsertToClose_tOracleOutput_5.close();
                }
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_5 = null;
                if ((pstmtToClose_tOracleOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_5")) != null) {
                    pstmtToClose_tOracleOutput_5.close();
                }
    }
 



/**
 * [tOracleOutput_5 finally ] stop
 */




	
	/**
	 * [tOracleOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_2 = null;
                if ((pstmtToClose_tOracleOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_2")) != null) {
                    pstmtToClose_tOracleOutput_2.close();
                }
    }
 



/**
 * [tOracleOutput_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal IDENTIFICADOR;

				public BigDecimal getIDENTIFICADOR () {
					return this.IDENTIFICADOR;
				}

				public Boolean IDENTIFICADORIsNullable(){
				    return true;
				}
				public Boolean IDENTIFICADORIsKey(){
				    return false;
				}
				public Integer IDENTIFICADORLength(){
				    return 0;
				}
				public Integer IDENTIFICADORPrecision(){
				    return 0;
				}
				public String IDENTIFICADORDefault(){
				
					return "";
				
				}
				public String IDENTIFICADORComment(){
				
				    return "";
				
				}
				public String IDENTIFICADORPattern(){
				
					return "";
				
				}
				public String IDENTIFICADOROriginalDbColumnName(){
				
					return "IDENTIFICADOR";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.IDENTIFICADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.IDENTIFICADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDENTIFICADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IDENTIFICADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",IDENTIFICADOR="+String.valueOf(IDENTIFICADOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_Agendamiento_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_7", false);
		start_Hash.put("tOracleInput_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_7";
	
	
		int tos_count_tOracleInput_7 = 0;
		
	


	
		    int nb_line_tOracleInput_7 = 0;
		    java.sql.Connection conn_tOracleInput_7 = null;
				conn_tOracleInput_7 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_7 = false;
				boolean isConnectionWrapped_tOracleInput_7 = !(conn_tOracleInput_7 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_7.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_7 = null;
                if (isConnectionWrapped_tOracleInput_7) {
					unwrappedOraConn_tOracleInput_7 = conn_tOracleInput_7.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_7 != null) {
                        isTimeZoneNull_tOracleInput_7 = (unwrappedOraConn_tOracleInput_7.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_7 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_7).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_7) {
					java.sql.Statement stmtGetTZ_tOracleInput_7 = conn_tOracleInput_7.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_7 = stmtGetTZ_tOracleInput_7.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_7 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_7.next()) {
						sessionTimezone_tOracleInput_7 = rsGetTZ_tOracleInput_7.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_7 && unwrappedOraConn_tOracleInput_7 != null) {
                        unwrappedOraConn_tOracleInput_7.setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_7).setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_7 = conn_tOracleInput_7.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_7.setFetchSize(1000);


		    String dbquery_tOracleInput_7 = "SELECT \n	ID,\n	TO_NUMBER(TO_CHAR(FECHA,'DDMMYYYY')) AS IDENTIFICADOR\nFROM BGEN_TIEMPOS";
		    

		    globalMap.put("tOracleInput_7_QUERY",dbquery_tOracleInput_7);

		    java.sql.ResultSet rs_tOracleInput_7 = null;

		    try {
		    	rs_tOracleInput_7 = stmt_tOracleInput_7.executeQuery(dbquery_tOracleInput_7);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_7 = rs_tOracleInput_7.getMetaData();
		    	int colQtyInRs_tOracleInput_7 = rsmd_tOracleInput_7.getColumnCount();

		    String tmpContent_tOracleInput_7 = null;
		    
		    
		    while (rs_tOracleInput_7.next()) {
		        nb_line_tOracleInput_7++;
		        
							if(colQtyInRs_tOracleInput_7 < 1) {
								row2.ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(1) != null) {
						row2.ID = rs_tOracleInput_7.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 2) {
								row2.IDENTIFICADOR = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(2) != null) {
						row2.IDENTIFICADOR = rs_tOracleInput_7.getBigDecimal(2);
					} else {
				
						row2.IDENTIFICADOR = null;
					}
		                    }
					




 



/**
 * [tOracleInput_7 begin ] stop
 */
	
	/**
	 * [tOracleInput_7 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 


	tos_count_tOracleInput_7++;

/**
 * [tOracleInput_7 main ] stop
 */
	
	/**
	 * [tOracleInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					



    
		row2Struct oneRow_tHashOutput_1 = new row2Struct();
				
					oneRow_tHashOutput_1.ID = row2.ID;
					oneRow_tHashOutput_1.IDENTIFICADOR = row2.IDENTIFICADOR;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_7 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

}
}finally{
	if (rs_tOracleInput_7 != null) {
		rs_tOracleInput_7.close();
	}
	if (stmt_tOracleInput_7 != null) {
		stmt_tOracleInput_7.close();
	}
}

globalMap.put("tOracleInput_7_NB_LINE",nb_line_tOracleInput_7);
 

ok_Hash.put("tOracleInput_7", true);
end_Hash.put("tOracleInput_7", System.currentTimeMillis());




/**
 * [tOracleInput_7 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tOracleInput_17Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];

	
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 31;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_USUARIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_USUARIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row22Struct row22 = new row22Struct();




	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row22Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_Agendamiento_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row22Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_17", false);
		start_Hash.put("tOracleInput_17", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_17";
	
	
		int tos_count_tOracleInput_17 = 0;
		
	


	
		    int nb_line_tOracleInput_17 = 0;
		    java.sql.Connection conn_tOracleInput_17 = null;
				conn_tOracleInput_17 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_17 = false;
				boolean isConnectionWrapped_tOracleInput_17 = !(conn_tOracleInput_17 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_17.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_17 = null;
                if (isConnectionWrapped_tOracleInput_17) {
					unwrappedOraConn_tOracleInput_17 = conn_tOracleInput_17.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_17 != null) {
                        isTimeZoneNull_tOracleInput_17 = (unwrappedOraConn_tOracleInput_17.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_17 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_17).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_17) {
					java.sql.Statement stmtGetTZ_tOracleInput_17 = conn_tOracleInput_17.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_17 = stmtGetTZ_tOracleInput_17.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_17 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_17.next()) {
						sessionTimezone_tOracleInput_17 = rsGetTZ_tOracleInput_17.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_17 && unwrappedOraConn_tOracleInput_17 != null) {
                        unwrappedOraConn_tOracleInput_17.setSessionTimeZone(sessionTimezone_tOracleInput_17);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_17).setSessionTimeZone(sessionTimezone_tOracleInput_17);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_17 = conn_tOracleInput_17.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_17.setFetchSize(10000);


		    String dbquery_tOracleInput_17 = "SELECT \n  GP.PERSONAS_ID,\n  CASE \n  	WHEN PLANAFI.CODIGO = '2' THEN 'No cotizante'\n  	WHEN PLANAFI.CODIGO IN ('1','"
+"3','4','5','6','7','8','9','10') AND ATC.SIGLA='ACT' THEN 'Cotizante Activo' \n  	WHEN PLANAFI.CODIGO IN ('1','3','4','5"
+"','6','7','8','9','10') AND ATC.SIGLA IN ('RET','PEN') THEN 'Cotizante Pensionado / Retirado' \n  	WHEN PLANAFI.CODIGO I"
+"N ('11','12','13','14','15','16','17','18') THEN 'Beneficiario' \n  	WHEN PLANAFI.CODIGO IN ('1','3','4','5','6','7','8'"
+",'9','10') AND ATC.SIGLA IN ('PAR','NOC') THEN 'Otro cotizante' \n  END  AS TIPO_USUARIO    \nFROM (\n    SELECT DISTINC"
+"T \n        scita.PERSONAS_ID \n    FROM AGE_SCITAS scita\n    WHERE scita.ESTREGISTRO_ID = 1  " + context.CONDICION_AGESCITAS +" \n    UNION\n    SELECT DISTINCT \n        scita.PERSONAS_ID \n    FROM AGE_CITAS cita \n    INNER JOIN AGE_SCITAS sci"
+"ta ON scita.ID = cita.SCITAS_ID  \n    WHERE cita.ESTREGISTRO_ID = 1  " + context.CONDICION_AGECITAS +" \n) GP\nINNER JOIN GEN_AFILIADOS AFI ON AFI.PERSONAS_ID = GP.PERSONAS_ID\nINNER JOIN AFI_PLANAFILIACIONES PLANAFI ON P"
+"LANAFI.ID = AFI.PLANAFILIACIONES_ID AND PLANAFI.ESTREGISTRO_ID=1\nINNER JOIN GEN_AFILIADOS_ENTAPORTANTE AENT ON  ( AENT."
+"AFILIADOS_ID= AFI.padre_id OR (AENT.AFILIADOS_ID = AFI.ID AND AFI.PADRE_ID IS NULL) ) AND AENT.PRINCIPAL = 1 AND AENT.ES"
+"TREGISTRO_ID = 1\nINNER JOIN AFI_TVINCULACIONES AT ON AT.ID= AENT.TVINCULACIONES_ID\nINNER JOIN AFI_TCOTIZACION ATC ON A"
+"TC.ID=AT.TCOTIZACION_ID\nWHERE AFI.ESTREGISTRO_ID=1";
		    

		    globalMap.put("tOracleInput_17_QUERY",dbquery_tOracleInput_17);

		    java.sql.ResultSet rs_tOracleInput_17 = null;

		    try {
		    	rs_tOracleInput_17 = stmt_tOracleInput_17.executeQuery(dbquery_tOracleInput_17);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_17 = rs_tOracleInput_17.getMetaData();
		    	int colQtyInRs_tOracleInput_17 = rsmd_tOracleInput_17.getColumnCount();

		    String tmpContent_tOracleInput_17 = null;
		    
		    
		    while (rs_tOracleInput_17.next()) {
		        nb_line_tOracleInput_17++;
		        
							if(colQtyInRs_tOracleInput_17 < 1) {
								row22.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(1) != null) {
						row22.PERSONAS_ID = rs_tOracleInput_17.getBigDecimal(1);
					} else {
				
						row22.PERSONAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_17 < 2) {
								row22.TIPO_USUARIO = null;
							} else {
	                         		
        	row22.TIPO_USUARIO = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 2, false);
		                    }
					




 



/**
 * [tOracleInput_17 begin ] stop
 */
	
	/**
	 * [tOracleInput_17 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 


	tos_count_tOracleInput_17++;

/**
 * [tOracleInput_17 main ] stop
 */
	
	/**
	 * [tOracleInput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row22"
						
						);
					}
					



    
		row22Struct oneRow_tHashOutput_2 = new row22Struct();
				
					oneRow_tHashOutput_2.PERSONAS_ID = row22.PERSONAS_ID;
					oneRow_tHashOutput_2.TIPO_USUARIO = row22.TIPO_USUARIO;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_17 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

}
}finally{
	if (rs_tOracleInput_17 != null) {
		rs_tOracleInput_17.close();
	}
	if (stmt_tOracleInput_17 != null) {
		stmt_tOracleInput_17.close();
	}
}

globalMap.put("tOracleInput_17_NB_LINE",nb_line_tOracleInput_17);
 

ok_Hash.put("tOracleInput_17", true);
end_Hash.put("tOracleInput_17", System.currentTimeMillis());




/**
 * [tOracleInput_17 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_17:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tOracleInput_8Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_17 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_17_SUBPROCESS_STATE", 1);
	}
	


public static class AGE_SCITASStruct implements routines.system.IPersistableRow<AGE_SCITASStruct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return true;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return 0;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String NOMBRE_UORG;

				public String getNOMBRE_UORG () {
					return this.NOMBRE_UORG;
				}

				public Boolean NOMBRE_UORGIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_UORGIsKey(){
				    return false;
				}
				public Integer NOMBRE_UORGLength(){
				    return null;
				}
				public Integer NOMBRE_UORGPrecision(){
				    return null;
				}
				public String NOMBRE_UORGDefault(){
				
					return null;
				
				}
				public String NOMBRE_UORGComment(){
				
				    return "";
				
				}
				public String NOMBRE_UORGPattern(){
				
					return "";
				
				}
				public String NOMBRE_UORGOriginalDbColumnName(){
				
					return "NOMBRE_UORG";
				
				}

				
			    public String CODIGO_UORG;

				public String getCODIGO_UORG () {
					return this.CODIGO_UORG;
				}

				public Boolean CODIGO_UORGIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UORGIsKey(){
				    return false;
				}
				public Integer CODIGO_UORGLength(){
				    return null;
				}
				public Integer CODIGO_UORGPrecision(){
				    return null;
				}
				public String CODIGO_UORGDefault(){
				
					return null;
				
				}
				public String CODIGO_UORGComment(){
				
				    return "";
				
				}
				public String CODIGO_UORGPattern(){
				
					return "";
				
				}
				public String CODIGO_UORGOriginalDbColumnName(){
				
					return "CODIGO_UORG";
				
				}

				
			    public String SIGLA_UORG;

				public String getSIGLA_UORG () {
					return this.SIGLA_UORG;
				}

				public Boolean SIGLA_UORGIsNullable(){
				    return true;
				}
				public Boolean SIGLA_UORGIsKey(){
				    return false;
				}
				public Integer SIGLA_UORGLength(){
				    return null;
				}
				public Integer SIGLA_UORGPrecision(){
				    return null;
				}
				public String SIGLA_UORGDefault(){
				
					return null;
				
				}
				public String SIGLA_UORGComment(){
				
				    return "";
				
				}
				public String SIGLA_UORGPattern(){
				
					return "";
				
				}
				public String SIGLA_UORGOriginalDbColumnName(){
				
					return "SIGLA_UORG";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return null;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return null;
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String FUERZA_NOMBRE;

				public String getFUERZA_NOMBRE () {
					return this.FUERZA_NOMBRE;
				}

				public Boolean FUERZA_NOMBREIsNullable(){
				    return true;
				}
				public Boolean FUERZA_NOMBREIsKey(){
				    return false;
				}
				public Integer FUERZA_NOMBRELength(){
				    return null;
				}
				public Integer FUERZA_NOMBREPrecision(){
				    return null;
				}
				public String FUERZA_NOMBREDefault(){
				
					return null;
				
				}
				public String FUERZA_NOMBREComment(){
				
				    return "";
				
				}
				public String FUERZA_NOMBREPattern(){
				
					return "";
				
				}
				public String FUERZA_NOMBREOriginalDbColumnName(){
				
					return "FUERZA_NOMBRE";
				
				}

				
			    public java.util.Date FECHA_SOLICITUD;

				public java.util.Date getFECHA_SOLICITUD () {
					return this.FECHA_SOLICITUD;
				}

				public Boolean FECHA_SOLICITUDIsNullable(){
				    return true;
				}
				public Boolean FECHA_SOLICITUDIsKey(){
				    return false;
				}
				public Integer FECHA_SOLICITUDLength(){
				    return null;
				}
				public Integer FECHA_SOLICITUDPrecision(){
				    return null;
				}
				public String FECHA_SOLICITUDDefault(){
				
					return null;
				
				}
				public String FECHA_SOLICITUDComment(){
				
				    return "";
				
				}
				public String FECHA_SOLICITUDPattern(){
				
					return "";
				
				}
				public String FECHA_SOLICITUDOriginalDbColumnName(){
				
					return "FECHA_SOLICITUD";
				
				}

				
			    public BigDecimal ESPECIALIDAD_ID;

				public BigDecimal getESPECIALIDAD_ID () {
					return this.ESPECIALIDAD_ID;
				}

				public Boolean ESPECIALIDAD_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDAD_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDAD_IDLength(){
				    return null;
				}
				public Integer ESPECIALIDAD_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDAD_IDDefault(){
				
					return null;
				
				}
				public String ESPECIALIDAD_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDAD_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDAD_IDOriginalDbColumnName(){
				
					return "ESPECIALIDAD_ID";
				
				}

				
			    public String NOMBRE_ESPECIALIDAD;

				public String getNOMBRE_ESPECIALIDAD () {
					return this.NOMBRE_ESPECIALIDAD;
				}

				public Boolean NOMBRE_ESPECIALIDADIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer NOMBRE_ESPECIALIDADLength(){
				    return null;
				}
				public Integer NOMBRE_ESPECIALIDADPrecision(){
				    return null;
				}
				public String NOMBRE_ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String NOMBRE_ESPECIALIDADComment(){
				
				    return "";
				
				}
				public String NOMBRE_ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String NOMBRE_ESPECIALIDADOriginalDbColumnName(){
				
					return "NOMBRE_ESPECIALIDAD";
				
				}

				
			    public String SIGLA_ESPECIALIDAD;

				public String getSIGLA_ESPECIALIDAD () {
					return this.SIGLA_ESPECIALIDAD;
				}

				public Boolean SIGLA_ESPECIALIDADIsNullable(){
				    return true;
				}
				public Boolean SIGLA_ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer SIGLA_ESPECIALIDADLength(){
				    return null;
				}
				public Integer SIGLA_ESPECIALIDADPrecision(){
				    return null;
				}
				public String SIGLA_ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String SIGLA_ESPECIALIDADComment(){
				
				    return "";
				
				}
				public String SIGLA_ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String SIGLA_ESPECIALIDADOriginalDbColumnName(){
				
					return "SIGLA_ESPECIALIDAD";
				
				}

				
			    public String ESTADO_SOLICITUD;

				public String getESTADO_SOLICITUD () {
					return this.ESTADO_SOLICITUD;
				}

				public Boolean ESTADO_SOLICITUDIsNullable(){
				    return true;
				}
				public Boolean ESTADO_SOLICITUDIsKey(){
				    return false;
				}
				public Integer ESTADO_SOLICITUDLength(){
				    return null;
				}
				public Integer ESTADO_SOLICITUDPrecision(){
				    return null;
				}
				public String ESTADO_SOLICITUDDefault(){
				
					return null;
				
				}
				public String ESTADO_SOLICITUDComment(){
				
				    return "";
				
				}
				public String ESTADO_SOLICITUDPattern(){
				
					return "";
				
				}
				public String ESTADO_SOLICITUDOriginalDbColumnName(){
				
					return "ESTADO_SOLICITUD";
				
				}

				
			    public String ESTADO_AUTORIZACION;

				public String getESTADO_AUTORIZACION () {
					return this.ESTADO_AUTORIZACION;
				}

				public Boolean ESTADO_AUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean ESTADO_AUTORIZACIONIsKey(){
				    return false;
				}
				public Integer ESTADO_AUTORIZACIONLength(){
				    return null;
				}
				public Integer ESTADO_AUTORIZACIONPrecision(){
				    return null;
				}
				public String ESTADO_AUTORIZACIONDefault(){
				
					return null;
				
				}
				public String ESTADO_AUTORIZACIONComment(){
				
				    return "";
				
				}
				public String ESTADO_AUTORIZACIONPattern(){
				
					return "";
				
				}
				public String ESTADO_AUTORIZACIONOriginalDbColumnName(){
				
					return "ESTADO_AUTORIZACION";
				
				}

				
			    public String PRIORITARIA;

				public String getPRIORITARIA () {
					return this.PRIORITARIA;
				}

				public Boolean PRIORITARIAIsNullable(){
				    return true;
				}
				public Boolean PRIORITARIAIsKey(){
				    return false;
				}
				public Integer PRIORITARIALength(){
				    return null;
				}
				public Integer PRIORITARIAPrecision(){
				    return null;
				}
				public String PRIORITARIADefault(){
				
					return null;
				
				}
				public String PRIORITARIAComment(){
				
				    return "";
				
				}
				public String PRIORITARIAPattern(){
				
					return "";
				
				}
				public String PRIORITARIAOriginalDbColumnName(){
				
					return "PRIORITARIA";
				
				}

				
			    public String AUTORIZACION;

				public String getAUTORIZACION () {
					return this.AUTORIZACION;
				}

				public Boolean AUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean AUTORIZACIONIsKey(){
				    return false;
				}
				public Integer AUTORIZACIONLength(){
				    return null;
				}
				public Integer AUTORIZACIONPrecision(){
				    return null;
				}
				public String AUTORIZACIONDefault(){
				
					return null;
				
				}
				public String AUTORIZACIONComment(){
				
				    return "";
				
				}
				public String AUTORIZACIONPattern(){
				
					return "";
				
				}
				public String AUTORIZACIONOriginalDbColumnName(){
				
					return "AUTORIZACION";
				
				}

				
			    public java.util.Date FECHA_VENCIMIENTO;

				public java.util.Date getFECHA_VENCIMIENTO () {
					return this.FECHA_VENCIMIENTO;
				}

				public Boolean FECHA_VENCIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_VENCIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_VENCIMIENTOLength(){
				    return null;
				}
				public Integer FECHA_VENCIMIENTOPrecision(){
				    return null;
				}
				public String FECHA_VENCIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_VENCIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_VENCIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_VENCIMIENTOOriginalDbColumnName(){
				
					return "FECHA_VENCIMIENTO";
				
				}

				
			    public String USUARIO;

				public String getUSUARIO () {
					return this.USUARIO;
				}

				public Boolean USUARIOIsNullable(){
				    return true;
				}
				public Boolean USUARIOIsKey(){
				    return false;
				}
				public Integer USUARIOLength(){
				    return null;
				}
				public Integer USUARIOPrecision(){
				    return null;
				}
				public String USUARIODefault(){
				
					return null;
				
				}
				public String USUARIOComment(){
				
				    return "";
				
				}
				public String USUARIOPattern(){
				
					return "";
				
				}
				public String USUARIOOriginalDbColumnName(){
				
					return "USUARIO";
				
				}

				
			    public String TIPO_SCITA;

				public String getTIPO_SCITA () {
					return this.TIPO_SCITA;
				}

				public Boolean TIPO_SCITAIsNullable(){
				    return true;
				}
				public Boolean TIPO_SCITAIsKey(){
				    return false;
				}
				public Integer TIPO_SCITALength(){
				    return null;
				}
				public Integer TIPO_SCITAPrecision(){
				    return null;
				}
				public String TIPO_SCITADefault(){
				
					return null;
				
				}
				public String TIPO_SCITAComment(){
				
				    return "";
				
				}
				public String TIPO_SCITAPattern(){
				
					return "";
				
				}
				public String TIPO_SCITAOriginalDbColumnName(){
				
					return "TIPO_SCITA";
				
				}

				
			    public String TIPO_ASIGNACION;

				public String getTIPO_ASIGNACION () {
					return this.TIPO_ASIGNACION;
				}

				public Boolean TIPO_ASIGNACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_ASIGNACIONIsKey(){
				    return false;
				}
				public Integer TIPO_ASIGNACIONLength(){
				    return null;
				}
				public Integer TIPO_ASIGNACIONPrecision(){
				    return null;
				}
				public String TIPO_ASIGNACIONDefault(){
				
					return null;
				
				}
				public String TIPO_ASIGNACIONComment(){
				
				    return "";
				
				}
				public String TIPO_ASIGNACIONPattern(){
				
					return "";
				
				}
				public String TIPO_ASIGNACIONOriginalDbColumnName(){
				
					return "TIPO_ASIGNACION";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return null;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return null;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public String CIUDAD_ESM;

				public String getCIUDAD_ESM () {
					return this.CIUDAD_ESM;
				}

				public Boolean CIUDAD_ESMIsNullable(){
				    return true;
				}
				public Boolean CIUDAD_ESMIsKey(){
				    return false;
				}
				public Integer CIUDAD_ESMLength(){
				    return null;
				}
				public Integer CIUDAD_ESMPrecision(){
				    return null;
				}
				public String CIUDAD_ESMDefault(){
				
					return null;
				
				}
				public String CIUDAD_ESMComment(){
				
				    return "";
				
				}
				public String CIUDAD_ESMPattern(){
				
					return "";
				
				}
				public String CIUDAD_ESMOriginalDbColumnName(){
				
					return "CIUDAD_ESM";
				
				}

				
			    public String MUNICIPIO_ESM;

				public String getMUNICIPIO_ESM () {
					return this.MUNICIPIO_ESM;
				}

				public Boolean MUNICIPIO_ESMIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIO_ESMIsKey(){
				    return false;
				}
				public Integer MUNICIPIO_ESMLength(){
				    return null;
				}
				public Integer MUNICIPIO_ESMPrecision(){
				    return null;
				}
				public String MUNICIPIO_ESMDefault(){
				
					return null;
				
				}
				public String MUNICIPIO_ESMComment(){
				
				    return "";
				
				}
				public String MUNICIPIO_ESMPattern(){
				
					return "";
				
				}
				public String MUNICIPIO_ESMOriginalDbColumnName(){
				
					return "MUNICIPIO_ESM";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return null;
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 4000;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public BigDecimal AUTORIZACION_ID;

				public BigDecimal getAUTORIZACION_ID () {
					return this.AUTORIZACION_ID;
				}

				public Boolean AUTORIZACION_IDIsNullable(){
				    return true;
				}
				public Boolean AUTORIZACION_IDIsKey(){
				    return false;
				}
				public Integer AUTORIZACION_IDLength(){
				    return 0;
				}
				public Integer AUTORIZACION_IDPrecision(){
				    return null;
				}
				public String AUTORIZACION_IDDefault(){
				
					return "";
				
				}
				public String AUTORIZACION_IDComment(){
				
				    return "";
				
				}
				public String AUTORIZACION_IDPattern(){
				
					return "";
				
				}
				public String AUTORIZACION_IDOriginalDbColumnName(){
				
					return "AUTORIZACION_ID";
				
				}

				
			    public BigDecimal TSCITAS_ID;

				public BigDecimal getTSCITAS_ID () {
					return this.TSCITAS_ID;
				}

				public Boolean TSCITAS_IDIsNullable(){
				    return true;
				}
				public Boolean TSCITAS_IDIsKey(){
				    return false;
				}
				public Integer TSCITAS_IDLength(){
				    return 0;
				}
				public Integer TSCITAS_IDPrecision(){
				    return null;
				}
				public String TSCITAS_IDDefault(){
				
					return "";
				
				}
				public String TSCITAS_IDComment(){
				
				    return "";
				
				}
				public String TSCITAS_IDPattern(){
				
					return "";
				
				}
				public String TSCITAS_IDOriginalDbColumnName(){
				
					return "TSCITAS_ID";
				
				}

				
			    public BigDecimal TASIGNACIONES_ID;

				public BigDecimal getTASIGNACIONES_ID () {
					return this.TASIGNACIONES_ID;
				}

				public Boolean TASIGNACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean TASIGNACIONES_IDIsKey(){
				    return false;
				}
				public Integer TASIGNACIONES_IDLength(){
				    return 0;
				}
				public Integer TASIGNACIONES_IDPrecision(){
				    return null;
				}
				public String TASIGNACIONES_IDDefault(){
				
					return "";
				
				}
				public String TASIGNACIONES_IDComment(){
				
				    return "";
				
				}
				public String TASIGNACIONES_IDPattern(){
				
					return "";
				
				}
				public String TASIGNACIONES_IDOriginalDbColumnName(){
				
					return "TASIGNACIONES_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final AGE_SCITASStruct other = (AGE_SCITASStruct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(AGE_SCITASStruct other) {

		other.ID = this.ID;
	            other.TIEMPOS_ID = this.TIEMPOS_ID;
	            other.UORG_ID = this.UORG_ID;
	            other.NOMBRE_UORG = this.NOMBRE_UORG;
	            other.CODIGO_UORG = this.CODIGO_UORG;
	            other.SIGLA_UORG = this.SIGLA_UORG;
	            other.FUERZA_ID = this.FUERZA_ID;
	            other.FUERZA_NOMBRE = this.FUERZA_NOMBRE;
	            other.FECHA_SOLICITUD = this.FECHA_SOLICITUD;
	            other.ESPECIALIDAD_ID = this.ESPECIALIDAD_ID;
	            other.NOMBRE_ESPECIALIDAD = this.NOMBRE_ESPECIALIDAD;
	            other.SIGLA_ESPECIALIDAD = this.SIGLA_ESPECIALIDAD;
	            other.ESTADO_SOLICITUD = this.ESTADO_SOLICITUD;
	            other.ESTADO_AUTORIZACION = this.ESTADO_AUTORIZACION;
	            other.PRIORITARIA = this.PRIORITARIA;
	            other.AUTORIZACION = this.AUTORIZACION;
	            other.FECHA_VENCIMIENTO = this.FECHA_VENCIMIENTO;
	            other.USUARIO = this.USUARIO;
	            other.TIPO_SCITA = this.TIPO_SCITA;
	            other.TIPO_ASIGNACION = this.TIPO_ASIGNACION;
	            other.TIPO_USUARIO = this.TIPO_USUARIO;
	            other.CIUDAD_ESM = this.CIUDAD_ESM;
	            other.MUNICIPIO_ESM = this.MUNICIPIO_ESM;
	            other.PERSONAS_ID = this.PERSONAS_ID;
	            other.OBSERVACIONES = this.OBSERVACIONES;
	            other.AUTORIZACION_ID = this.AUTORIZACION_ID;
	            other.TSCITAS_ID = this.TSCITAS_ID;
	            other.TASIGNACIONES_ID = this.TASIGNACIONES_ID;
	            
	}

	public void copyKeysDataTo(AGE_SCITASStruct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE_UORG = readString(dis);
					
					this.CODIGO_UORG = readString(dis);
					
					this.SIGLA_UORG = readString(dis);
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.FUERZA_NOMBRE = readString(dis);
					
					this.FECHA_SOLICITUD = readDate(dis);
					
						this.ESPECIALIDAD_ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE_ESPECIALIDAD = readString(dis);
					
					this.SIGLA_ESPECIALIDAD = readString(dis);
					
					this.ESTADO_SOLICITUD = readString(dis);
					
					this.ESTADO_AUTORIZACION = readString(dis);
					
					this.PRIORITARIA = readString(dis);
					
					this.AUTORIZACION = readString(dis);
					
					this.FECHA_VENCIMIENTO = readDate(dis);
					
					this.USUARIO = readString(dis);
					
					this.TIPO_SCITA = readString(dis);
					
					this.TIPO_ASIGNACION = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
					this.CIUDAD_ESM = readString(dis);
					
					this.MUNICIPIO_ESM = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONES = readString(dis);
					
						this.AUTORIZACION_ID = (BigDecimal) dis.readObject();
					
						this.TSCITAS_ID = (BigDecimal) dis.readObject();
					
						this.TASIGNACIONES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE_UORG = readString(dis);
					
					this.CODIGO_UORG = readString(dis);
					
					this.SIGLA_UORG = readString(dis);
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
					this.FUERZA_NOMBRE = readString(dis);
					
					this.FECHA_SOLICITUD = readDate(dis);
					
						this.ESPECIALIDAD_ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE_ESPECIALIDAD = readString(dis);
					
					this.SIGLA_ESPECIALIDAD = readString(dis);
					
					this.ESTADO_SOLICITUD = readString(dis);
					
					this.ESTADO_AUTORIZACION = readString(dis);
					
					this.PRIORITARIA = readString(dis);
					
					this.AUTORIZACION = readString(dis);
					
					this.FECHA_VENCIMIENTO = readDate(dis);
					
					this.USUARIO = readString(dis);
					
					this.TIPO_SCITA = readString(dis);
					
					this.TIPO_ASIGNACION = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
					this.CIUDAD_ESM = readString(dis);
					
					this.MUNICIPIO_ESM = readString(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONES = readString(dis);
					
						this.AUTORIZACION_ID = (BigDecimal) dis.readObject();
					
						this.TSCITAS_ID = (BigDecimal) dis.readObject();
					
						this.TASIGNACIONES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NOMBRE_UORG,dos);
					
					// String
				
						writeString(this.CODIGO_UORG,dos);
					
					// String
				
						writeString(this.SIGLA_UORG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.FUERZA_NOMBRE,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_SOLICITUD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDAD_ID);
					
					// String
				
						writeString(this.NOMBRE_ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.SIGLA_ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.ESTADO_SOLICITUD,dos);
					
					// String
				
						writeString(this.ESTADO_AUTORIZACION,dos);
					
					// String
				
						writeString(this.PRIORITARIA,dos);
					
					// String
				
						writeString(this.AUTORIZACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_VENCIMIENTO,dos);
					
					// String
				
						writeString(this.USUARIO,dos);
					
					// String
				
						writeString(this.TIPO_SCITA,dos);
					
					// String
				
						writeString(this.TIPO_ASIGNACION,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.CIUDAD_ESM,dos);
					
					// String
				
						writeString(this.MUNICIPIO_ESM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AUTORIZACION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TSCITAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TASIGNACIONES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NOMBRE_UORG,dos);
					
					// String
				
						writeString(this.CODIGO_UORG,dos);
					
					// String
				
						writeString(this.SIGLA_UORG,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FUERZA_ID);
					
					// String
				
						writeString(this.FUERZA_NOMBRE,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_SOLICITUD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDAD_ID);
					
					// String
				
						writeString(this.NOMBRE_ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.SIGLA_ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.ESTADO_SOLICITUD,dos);
					
					// String
				
						writeString(this.ESTADO_AUTORIZACION,dos);
					
					// String
				
						writeString(this.PRIORITARIA,dos);
					
					// String
				
						writeString(this.AUTORIZACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_VENCIMIENTO,dos);
					
					// String
				
						writeString(this.USUARIO,dos);
					
					// String
				
						writeString(this.TIPO_SCITA,dos);
					
					// String
				
						writeString(this.TIPO_ASIGNACION,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.CIUDAD_ESM,dos);
					
					// String
				
						writeString(this.MUNICIPIO_ESM,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUTORIZACION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TSCITAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TASIGNACIONES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",NOMBRE_UORG="+NOMBRE_UORG);
		sb.append(",CODIGO_UORG="+CODIGO_UORG);
		sb.append(",SIGLA_UORG="+SIGLA_UORG);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",FUERZA_NOMBRE="+FUERZA_NOMBRE);
		sb.append(",FECHA_SOLICITUD="+String.valueOf(FECHA_SOLICITUD));
		sb.append(",ESPECIALIDAD_ID="+String.valueOf(ESPECIALIDAD_ID));
		sb.append(",NOMBRE_ESPECIALIDAD="+NOMBRE_ESPECIALIDAD);
		sb.append(",SIGLA_ESPECIALIDAD="+SIGLA_ESPECIALIDAD);
		sb.append(",ESTADO_SOLICITUD="+ESTADO_SOLICITUD);
		sb.append(",ESTADO_AUTORIZACION="+ESTADO_AUTORIZACION);
		sb.append(",PRIORITARIA="+PRIORITARIA);
		sb.append(",AUTORIZACION="+AUTORIZACION);
		sb.append(",FECHA_VENCIMIENTO="+String.valueOf(FECHA_VENCIMIENTO));
		sb.append(",USUARIO="+USUARIO);
		sb.append(",TIPO_SCITA="+TIPO_SCITA);
		sb.append(",TIPO_ASIGNACION="+TIPO_ASIGNACION);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",CIUDAD_ESM="+CIUDAD_ESM);
		sb.append(",MUNICIPIO_ESM="+MUNICIPIO_ESM);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",AUTORIZACION_ID="+String.valueOf(AUTORIZACION_ID));
		sb.append(",TSCITAS_ID="+String.valueOf(TSCITAS_ID));
		sb.append(",TASIGNACIONES_ID="+String.valueOf(TASIGNACIONES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(AGE_SCITASStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];

	
			    public BigDecimal SCITAS_ID;

				public BigDecimal getSCITAS_ID () {
					return this.SCITAS_ID;
				}

				public Boolean SCITAS_IDIsNullable(){
				    return false;
				}
				public Boolean SCITAS_IDIsKey(){
				    return false;
				}
				public Integer SCITAS_IDLength(){
				    return 0;
				}
				public Integer SCITAS_IDPrecision(){
				    return null;
				}
				public String SCITAS_IDDefault(){
				
					return "";
				
				}
				public String SCITAS_IDComment(){
				
				    return "";
				
				}
				public String SCITAS_IDPattern(){
				
					return "";
				
				}
				public String SCITAS_IDOriginalDbColumnName(){
				
					return "SCITAS_ID";
				
				}

				
			    public BigDecimal TIEMPO_SCITA;

				public BigDecimal getTIEMPO_SCITA () {
					return this.TIEMPO_SCITA;
				}

				public Boolean TIEMPO_SCITAIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_SCITAIsKey(){
				    return false;
				}
				public Integer TIEMPO_SCITALength(){
				    return 0;
				}
				public Integer TIEMPO_SCITAPrecision(){
				    return 0;
				}
				public String TIEMPO_SCITADefault(){
				
					return "";
				
				}
				public String TIEMPO_SCITAComment(){
				
				    return "";
				
				}
				public String TIEMPO_SCITAPattern(){
				
					return "";
				
				}
				public String TIEMPO_SCITAOriginalDbColumnName(){
				
					return "TIEMPO_SCITA";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public java.util.Date FECHA_SOLICITUD;

				public java.util.Date getFECHA_SOLICITUD () {
					return this.FECHA_SOLICITUD;
				}

				public Boolean FECHA_SOLICITUDIsNullable(){
				    return false;
				}
				public Boolean FECHA_SOLICITUDIsKey(){
				    return false;
				}
				public Integer FECHA_SOLICITUDLength(){
				    return 0;
				}
				public Integer FECHA_SOLICITUDPrecision(){
				    return 0;
				}
				public String FECHA_SOLICITUDDefault(){
				
					return null;
				
				}
				public String FECHA_SOLICITUDComment(){
				
				    return "";
				
				}
				public String FECHA_SOLICITUDPattern(){
				
					return "";
				
				}
				public String FECHA_SOLICITUDOriginalDbColumnName(){
				
					return "FECHA_SOLICITUD";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public String ESTADO_SOLICITUD;

				public String getESTADO_SOLICITUD () {
					return this.ESTADO_SOLICITUD;
				}

				public Boolean ESTADO_SOLICITUDIsNullable(){
				    return false;
				}
				public Boolean ESTADO_SOLICITUDIsKey(){
				    return false;
				}
				public Integer ESTADO_SOLICITUDLength(){
				    return 10;
				}
				public Integer ESTADO_SOLICITUDPrecision(){
				    return 0;
				}
				public String ESTADO_SOLICITUDDefault(){
				
					return null;
				
				}
				public String ESTADO_SOLICITUDComment(){
				
				    return "";
				
				}
				public String ESTADO_SOLICITUDPattern(){
				
					return "";
				
				}
				public String ESTADO_SOLICITUDOriginalDbColumnName(){
				
					return "ESTADO_SOLICITUD";
				
				}

				
			    public String ESTADO_AUTORIZACION;

				public String getESTADO_AUTORIZACION () {
					return this.ESTADO_AUTORIZACION;
				}

				public Boolean ESTADO_AUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean ESTADO_AUTORIZACIONIsKey(){
				    return false;
				}
				public Integer ESTADO_AUTORIZACIONLength(){
				    return 20;
				}
				public Integer ESTADO_AUTORIZACIONPrecision(){
				    return 0;
				}
				public String ESTADO_AUTORIZACIONDefault(){
				
					return null;
				
				}
				public String ESTADO_AUTORIZACIONComment(){
				
				    return "";
				
				}
				public String ESTADO_AUTORIZACIONPattern(){
				
					return "";
				
				}
				public String ESTADO_AUTORIZACIONOriginalDbColumnName(){
				
					return "ESTADO_AUTORIZACION";
				
				}

				
			    public String PRIORITARIA;

				public String getPRIORITARIA () {
					return this.PRIORITARIA;
				}

				public Boolean PRIORITARIAIsNullable(){
				    return false;
				}
				public Boolean PRIORITARIAIsKey(){
				    return false;
				}
				public Integer PRIORITARIALength(){
				    return 2;
				}
				public Integer PRIORITARIAPrecision(){
				    return 0;
				}
				public String PRIORITARIADefault(){
				
					return null;
				
				}
				public String PRIORITARIAComment(){
				
				    return "";
				
				}
				public String PRIORITARIAPattern(){
				
					return "";
				
				}
				public String PRIORITARIAOriginalDbColumnName(){
				
					return "PRIORITARIA";
				
				}

				
			    public String AUTORIZACION;

				public String getAUTORIZACION () {
					return this.AUTORIZACION;
				}

				public Boolean AUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean AUTORIZACIONIsKey(){
				    return false;
				}
				public Integer AUTORIZACIONLength(){
				    return 250;
				}
				public Integer AUTORIZACIONPrecision(){
				    return 0;
				}
				public String AUTORIZACIONDefault(){
				
					return null;
				
				}
				public String AUTORIZACIONComment(){
				
				    return "";
				
				}
				public String AUTORIZACIONPattern(){
				
					return "";
				
				}
				public String AUTORIZACIONOriginalDbColumnName(){
				
					return "AUTORIZACION";
				
				}

				
			    public java.util.Date FVENCIMIENTO;

				public java.util.Date getFVENCIMIENTO () {
					return this.FVENCIMIENTO;
				}

				public Boolean FVENCIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FVENCIMIENTOIsKey(){
				    return false;
				}
				public Integer FVENCIMIENTOLength(){
				    return 0;
				}
				public Integer FVENCIMIENTOPrecision(){
				    return 0;
				}
				public String FVENCIMIENTODefault(){
				
					return null;
				
				}
				public String FVENCIMIENTOComment(){
				
				    return "";
				
				}
				public String FVENCIMIENTOPattern(){
				
					return "";
				
				}
				public String FVENCIMIENTOOriginalDbColumnName(){
				
					return "FVENCIMIENTO";
				
				}

				
			    public String USUARIO;

				public String getUSUARIO () {
					return this.USUARIO;
				}

				public Boolean USUARIOIsNullable(){
				    return false;
				}
				public Boolean USUARIOIsKey(){
				    return false;
				}
				public Integer USUARIOLength(){
				    return 500;
				}
				public Integer USUARIOPrecision(){
				    return 0;
				}
				public String USUARIODefault(){
				
					return "";
				
				}
				public String USUARIOComment(){
				
				    return "";
				
				}
				public String USUARIOPattern(){
				
					return "";
				
				}
				public String USUARIOOriginalDbColumnName(){
				
					return "USUARIO";
				
				}

				
			    public BigDecimal TSCITAS_ID;

				public BigDecimal getTSCITAS_ID () {
					return this.TSCITAS_ID;
				}

				public Boolean TSCITAS_IDIsNullable(){
				    return true;
				}
				public Boolean TSCITAS_IDIsKey(){
				    return false;
				}
				public Integer TSCITAS_IDLength(){
				    return 0;
				}
				public Integer TSCITAS_IDPrecision(){
				    return null;
				}
				public String TSCITAS_IDDefault(){
				
					return "";
				
				}
				public String TSCITAS_IDComment(){
				
				    return "";
				
				}
				public String TSCITAS_IDPattern(){
				
					return "";
				
				}
				public String TSCITAS_IDOriginalDbColumnName(){
				
					return "TSCITAS_ID";
				
				}

				
			    public BigDecimal TASIGNACIONES_ID;

				public BigDecimal getTASIGNACIONES_ID () {
					return this.TASIGNACIONES_ID;
				}

				public Boolean TASIGNACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean TASIGNACIONES_IDIsKey(){
				    return false;
				}
				public Integer TASIGNACIONES_IDLength(){
				    return 0;
				}
				public Integer TASIGNACIONES_IDPrecision(){
				    return null;
				}
				public String TASIGNACIONES_IDDefault(){
				
					return "";
				
				}
				public String TASIGNACIONES_IDComment(){
				
				    return "";
				
				}
				public String TASIGNACIONES_IDPattern(){
				
					return "";
				
				}
				public String TASIGNACIONES_IDOriginalDbColumnName(){
				
					return "TASIGNACIONES_ID";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 4000;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return "";
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public BigDecimal AUTORIZACION_ID;

				public BigDecimal getAUTORIZACION_ID () {
					return this.AUTORIZACION_ID;
				}

				public Boolean AUTORIZACION_IDIsNullable(){
				    return true;
				}
				public Boolean AUTORIZACION_IDIsKey(){
				    return false;
				}
				public Integer AUTORIZACION_IDLength(){
				    return 0;
				}
				public Integer AUTORIZACION_IDPrecision(){
				    return null;
				}
				public String AUTORIZACION_IDDefault(){
				
					return "";
				
				}
				public String AUTORIZACION_IDComment(){
				
				    return "";
				
				}
				public String AUTORIZACION_IDPattern(){
				
					return "";
				
				}
				public String AUTORIZACION_IDOriginalDbColumnName(){
				
					return "AUTORIZACION_ID";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.SCITAS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPO_SCITA = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_SOLICITUD = readDate(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO_SOLICITUD = readString(dis);
					
					this.ESTADO_AUTORIZACION = readString(dis);
					
					this.PRIORITARIA = readString(dis);
					
					this.AUTORIZACION = readString(dis);
					
					this.FVENCIMIENTO = readDate(dis);
					
					this.USUARIO = readString(dis);
					
						this.TSCITAS_ID = (BigDecimal) dis.readObject();
					
						this.TASIGNACIONES_ID = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONES = readString(dis);
					
						this.AUTORIZACION_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.SCITAS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPO_SCITA = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_SOLICITUD = readDate(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO_SOLICITUD = readString(dis);
					
					this.ESTADO_AUTORIZACION = readString(dis);
					
					this.PRIORITARIA = readString(dis);
					
					this.AUTORIZACION = readString(dis);
					
					this.FVENCIMIENTO = readDate(dis);
					
					this.USUARIO = readString(dis);
					
						this.TSCITAS_ID = (BigDecimal) dis.readObject();
					
						this.TASIGNACIONES_ID = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONES = readString(dis);
					
						this.AUTORIZACION_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.SCITAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPO_SCITA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_SOLICITUD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESTADO_SOLICITUD,dos);
					
					// String
				
						writeString(this.ESTADO_AUTORIZACION,dos);
					
					// String
				
						writeString(this.PRIORITARIA,dos);
					
					// String
				
						writeString(this.AUTORIZACION,dos);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO,dos);
					
					// String
				
						writeString(this.USUARIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TSCITAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TASIGNACIONES_ID);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AUTORIZACION_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SCITAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPO_SCITA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_SOLICITUD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESTADO_SOLICITUD,dos);
					
					// String
				
						writeString(this.ESTADO_AUTORIZACION,dos);
					
					// String
				
						writeString(this.PRIORITARIA,dos);
					
					// String
				
						writeString(this.AUTORIZACION,dos);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO,dos);
					
					// String
				
						writeString(this.USUARIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TSCITAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TASIGNACIONES_ID);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUTORIZACION_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SCITAS_ID="+String.valueOf(SCITAS_ID));
		sb.append(",TIEMPO_SCITA="+String.valueOf(TIEMPO_SCITA));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",FECHA_SOLICITUD="+String.valueOf(FECHA_SOLICITUD));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",ESTADO_SOLICITUD="+ESTADO_SOLICITUD);
		sb.append(",ESTADO_AUTORIZACION="+ESTADO_AUTORIZACION);
		sb.append(",PRIORITARIA="+PRIORITARIA);
		sb.append(",AUTORIZACION="+AUTORIZACION);
		sb.append(",FVENCIMIENTO="+String.valueOf(FVENCIMIENTO));
		sb.append(",USUARIO="+USUARIO);
		sb.append(",TSCITAS_ID="+String.valueOf(TSCITAS_ID));
		sb.append(",TASIGNACIONES_ID="+String.valueOf(TASIGNACIONES_ID));
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",AUTORIZACION_ID="+String.valueOf(AUTORIZACION_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_8Struct implements routines.system.IPersistableRow<after_tOracleInput_8Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];

	
			    public BigDecimal SCITAS_ID;

				public BigDecimal getSCITAS_ID () {
					return this.SCITAS_ID;
				}

				public Boolean SCITAS_IDIsNullable(){
				    return false;
				}
				public Boolean SCITAS_IDIsKey(){
				    return false;
				}
				public Integer SCITAS_IDLength(){
				    return 0;
				}
				public Integer SCITAS_IDPrecision(){
				    return null;
				}
				public String SCITAS_IDDefault(){
				
					return "";
				
				}
				public String SCITAS_IDComment(){
				
				    return "";
				
				}
				public String SCITAS_IDPattern(){
				
					return "";
				
				}
				public String SCITAS_IDOriginalDbColumnName(){
				
					return "SCITAS_ID";
				
				}

				
			    public BigDecimal TIEMPO_SCITA;

				public BigDecimal getTIEMPO_SCITA () {
					return this.TIEMPO_SCITA;
				}

				public Boolean TIEMPO_SCITAIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_SCITAIsKey(){
				    return false;
				}
				public Integer TIEMPO_SCITALength(){
				    return 0;
				}
				public Integer TIEMPO_SCITAPrecision(){
				    return 0;
				}
				public String TIEMPO_SCITADefault(){
				
					return "";
				
				}
				public String TIEMPO_SCITAComment(){
				
				    return "";
				
				}
				public String TIEMPO_SCITAPattern(){
				
					return "";
				
				}
				public String TIEMPO_SCITAOriginalDbColumnName(){
				
					return "TIEMPO_SCITA";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public java.util.Date FECHA_SOLICITUD;

				public java.util.Date getFECHA_SOLICITUD () {
					return this.FECHA_SOLICITUD;
				}

				public Boolean FECHA_SOLICITUDIsNullable(){
				    return false;
				}
				public Boolean FECHA_SOLICITUDIsKey(){
				    return false;
				}
				public Integer FECHA_SOLICITUDLength(){
				    return 0;
				}
				public Integer FECHA_SOLICITUDPrecision(){
				    return 0;
				}
				public String FECHA_SOLICITUDDefault(){
				
					return null;
				
				}
				public String FECHA_SOLICITUDComment(){
				
				    return "";
				
				}
				public String FECHA_SOLICITUDPattern(){
				
					return "";
				
				}
				public String FECHA_SOLICITUDOriginalDbColumnName(){
				
					return "FECHA_SOLICITUD";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public String ESTADO_SOLICITUD;

				public String getESTADO_SOLICITUD () {
					return this.ESTADO_SOLICITUD;
				}

				public Boolean ESTADO_SOLICITUDIsNullable(){
				    return false;
				}
				public Boolean ESTADO_SOLICITUDIsKey(){
				    return false;
				}
				public Integer ESTADO_SOLICITUDLength(){
				    return 10;
				}
				public Integer ESTADO_SOLICITUDPrecision(){
				    return 0;
				}
				public String ESTADO_SOLICITUDDefault(){
				
					return null;
				
				}
				public String ESTADO_SOLICITUDComment(){
				
				    return "";
				
				}
				public String ESTADO_SOLICITUDPattern(){
				
					return "";
				
				}
				public String ESTADO_SOLICITUDOriginalDbColumnName(){
				
					return "ESTADO_SOLICITUD";
				
				}

				
			    public String ESTADO_AUTORIZACION;

				public String getESTADO_AUTORIZACION () {
					return this.ESTADO_AUTORIZACION;
				}

				public Boolean ESTADO_AUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean ESTADO_AUTORIZACIONIsKey(){
				    return false;
				}
				public Integer ESTADO_AUTORIZACIONLength(){
				    return 20;
				}
				public Integer ESTADO_AUTORIZACIONPrecision(){
				    return 0;
				}
				public String ESTADO_AUTORIZACIONDefault(){
				
					return null;
				
				}
				public String ESTADO_AUTORIZACIONComment(){
				
				    return "";
				
				}
				public String ESTADO_AUTORIZACIONPattern(){
				
					return "";
				
				}
				public String ESTADO_AUTORIZACIONOriginalDbColumnName(){
				
					return "ESTADO_AUTORIZACION";
				
				}

				
			    public String PRIORITARIA;

				public String getPRIORITARIA () {
					return this.PRIORITARIA;
				}

				public Boolean PRIORITARIAIsNullable(){
				    return false;
				}
				public Boolean PRIORITARIAIsKey(){
				    return false;
				}
				public Integer PRIORITARIALength(){
				    return 2;
				}
				public Integer PRIORITARIAPrecision(){
				    return 0;
				}
				public String PRIORITARIADefault(){
				
					return null;
				
				}
				public String PRIORITARIAComment(){
				
				    return "";
				
				}
				public String PRIORITARIAPattern(){
				
					return "";
				
				}
				public String PRIORITARIAOriginalDbColumnName(){
				
					return "PRIORITARIA";
				
				}

				
			    public String AUTORIZACION;

				public String getAUTORIZACION () {
					return this.AUTORIZACION;
				}

				public Boolean AUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean AUTORIZACIONIsKey(){
				    return false;
				}
				public Integer AUTORIZACIONLength(){
				    return 250;
				}
				public Integer AUTORIZACIONPrecision(){
				    return 0;
				}
				public String AUTORIZACIONDefault(){
				
					return null;
				
				}
				public String AUTORIZACIONComment(){
				
				    return "";
				
				}
				public String AUTORIZACIONPattern(){
				
					return "";
				
				}
				public String AUTORIZACIONOriginalDbColumnName(){
				
					return "AUTORIZACION";
				
				}

				
			    public java.util.Date FVENCIMIENTO;

				public java.util.Date getFVENCIMIENTO () {
					return this.FVENCIMIENTO;
				}

				public Boolean FVENCIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FVENCIMIENTOIsKey(){
				    return false;
				}
				public Integer FVENCIMIENTOLength(){
				    return 0;
				}
				public Integer FVENCIMIENTOPrecision(){
				    return 0;
				}
				public String FVENCIMIENTODefault(){
				
					return null;
				
				}
				public String FVENCIMIENTOComment(){
				
				    return "";
				
				}
				public String FVENCIMIENTOPattern(){
				
					return "";
				
				}
				public String FVENCIMIENTOOriginalDbColumnName(){
				
					return "FVENCIMIENTO";
				
				}

				
			    public String USUARIO;

				public String getUSUARIO () {
					return this.USUARIO;
				}

				public Boolean USUARIOIsNullable(){
				    return false;
				}
				public Boolean USUARIOIsKey(){
				    return false;
				}
				public Integer USUARIOLength(){
				    return 500;
				}
				public Integer USUARIOPrecision(){
				    return 0;
				}
				public String USUARIODefault(){
				
					return "";
				
				}
				public String USUARIOComment(){
				
				    return "";
				
				}
				public String USUARIOPattern(){
				
					return "";
				
				}
				public String USUARIOOriginalDbColumnName(){
				
					return "USUARIO";
				
				}

				
			    public BigDecimal TSCITAS_ID;

				public BigDecimal getTSCITAS_ID () {
					return this.TSCITAS_ID;
				}

				public Boolean TSCITAS_IDIsNullable(){
				    return true;
				}
				public Boolean TSCITAS_IDIsKey(){
				    return false;
				}
				public Integer TSCITAS_IDLength(){
				    return 0;
				}
				public Integer TSCITAS_IDPrecision(){
				    return null;
				}
				public String TSCITAS_IDDefault(){
				
					return "";
				
				}
				public String TSCITAS_IDComment(){
				
				    return "";
				
				}
				public String TSCITAS_IDPattern(){
				
					return "";
				
				}
				public String TSCITAS_IDOriginalDbColumnName(){
				
					return "TSCITAS_ID";
				
				}

				
			    public BigDecimal TASIGNACIONES_ID;

				public BigDecimal getTASIGNACIONES_ID () {
					return this.TASIGNACIONES_ID;
				}

				public Boolean TASIGNACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean TASIGNACIONES_IDIsKey(){
				    return false;
				}
				public Integer TASIGNACIONES_IDLength(){
				    return 0;
				}
				public Integer TASIGNACIONES_IDPrecision(){
				    return null;
				}
				public String TASIGNACIONES_IDDefault(){
				
					return "";
				
				}
				public String TASIGNACIONES_IDComment(){
				
				    return "";
				
				}
				public String TASIGNACIONES_IDPattern(){
				
					return "";
				
				}
				public String TASIGNACIONES_IDOriginalDbColumnName(){
				
					return "TASIGNACIONES_ID";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 4000;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return "";
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public BigDecimal AUTORIZACION_ID;

				public BigDecimal getAUTORIZACION_ID () {
					return this.AUTORIZACION_ID;
				}

				public Boolean AUTORIZACION_IDIsNullable(){
				    return true;
				}
				public Boolean AUTORIZACION_IDIsKey(){
				    return false;
				}
				public Integer AUTORIZACION_IDLength(){
				    return 0;
				}
				public Integer AUTORIZACION_IDPrecision(){
				    return null;
				}
				public String AUTORIZACION_IDDefault(){
				
					return "";
				
				}
				public String AUTORIZACION_IDComment(){
				
				    return "";
				
				}
				public String AUTORIZACION_IDPattern(){
				
					return "";
				
				}
				public String AUTORIZACION_IDOriginalDbColumnName(){
				
					return "AUTORIZACION_ID";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.SCITAS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPO_SCITA = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_SOLICITUD = readDate(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO_SOLICITUD = readString(dis);
					
					this.ESTADO_AUTORIZACION = readString(dis);
					
					this.PRIORITARIA = readString(dis);
					
					this.AUTORIZACION = readString(dis);
					
					this.FVENCIMIENTO = readDate(dis);
					
					this.USUARIO = readString(dis);
					
						this.TSCITAS_ID = (BigDecimal) dis.readObject();
					
						this.TASIGNACIONES_ID = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONES = readString(dis);
					
						this.AUTORIZACION_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.SCITAS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPO_SCITA = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_SOLICITUD = readDate(dis);
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO_SOLICITUD = readString(dis);
					
					this.ESTADO_AUTORIZACION = readString(dis);
					
					this.PRIORITARIA = readString(dis);
					
					this.AUTORIZACION = readString(dis);
					
					this.FVENCIMIENTO = readDate(dis);
					
					this.USUARIO = readString(dis);
					
						this.TSCITAS_ID = (BigDecimal) dis.readObject();
					
						this.TASIGNACIONES_ID = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONES = readString(dis);
					
						this.AUTORIZACION_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.SCITAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPO_SCITA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_SOLICITUD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESTADO_SOLICITUD,dos);
					
					// String
				
						writeString(this.ESTADO_AUTORIZACION,dos);
					
					// String
				
						writeString(this.PRIORITARIA,dos);
					
					// String
				
						writeString(this.AUTORIZACION,dos);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO,dos);
					
					// String
				
						writeString(this.USUARIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TSCITAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TASIGNACIONES_ID);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AUTORIZACION_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SCITAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPO_SCITA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_SOLICITUD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// String
				
						writeString(this.ESTADO_SOLICITUD,dos);
					
					// String
				
						writeString(this.ESTADO_AUTORIZACION,dos);
					
					// String
				
						writeString(this.PRIORITARIA,dos);
					
					// String
				
						writeString(this.AUTORIZACION,dos);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO,dos);
					
					// String
				
						writeString(this.USUARIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TSCITAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TASIGNACIONES_ID);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUTORIZACION_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SCITAS_ID="+String.valueOf(SCITAS_ID));
		sb.append(",TIEMPO_SCITA="+String.valueOf(TIEMPO_SCITA));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",FECHA_SOLICITUD="+String.valueOf(FECHA_SOLICITUD));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",ESTADO_SOLICITUD="+ESTADO_SOLICITUD);
		sb.append(",ESTADO_AUTORIZACION="+ESTADO_AUTORIZACION);
		sb.append(",PRIORITARIA="+PRIORITARIA);
		sb.append(",AUTORIZACION="+AUTORIZACION);
		sb.append(",FVENCIMIENTO="+String.valueOf(FVENCIMIENTO));
		sb.append(",USUARIO="+USUARIO);
		sb.append(",TSCITAS_ID="+String.valueOf(TSCITAS_ID));
		sb.append(",TASIGNACIONES_ID="+String.valueOf(TASIGNACIONES_ID));
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",AUTORIZACION_ID="+String.valueOf(AUTORIZACION_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_5Process(globalMap);
		tHashInput_4Process(globalMap);
		tOracleInput_16Process(globalMap);
		tOracleInput_21Process(globalMap);
		tOracleInput_14Process(globalMap);
		tOracleInput_15Process(globalMap);

		row23Struct row23 = new row23Struct();
AGE_SCITASStruct AGE_SCITAS = new AGE_SCITASStruct();





	
	/**
	 * [tOracleOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_3", false);
		start_Hash.put("tOracleOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"AGE_SCITAS");
					}
				
		int tos_count_tOracleOutput_3 = 0;
		






        int updateKeyCount_tOracleOutput_3 = 1;
        if(updateKeyCount_tOracleOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_3 == 28 && true) {
                    System.err.println("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_3 = 0;
    int nb_line_update_tOracleOutput_3 = 0;
    int nb_line_inserted_tOracleOutput_3 = 0;
    int nb_line_deleted_tOracleOutput_3 = 0;
    int nb_line_rejected_tOracleOutput_3 = 0;

    int tmp_batchUpdateCount_tOracleOutput_3 = 0;

    int deletedCount_tOracleOutput_3=0;
    int updatedCount_tOracleOutput_3=0;
    int insertedCount_tOracleOutput_3=0;
    int rowsToCommitCount_tOracleOutput_3=0;
    int rejectedCount_tOracleOutput_3=0;

    boolean whetherReject_tOracleOutput_3 = false;

    java.sql.Connection conn_tOracleOutput_3 = null;

    //optional table
    String dbschema_tOracleOutput_3 = null;
    String tableName_tOracleOutput_3 = null;
                    String driverClass_tOracleOutput_3 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_3);
                String url_tOracleOutput_3 = null;
                    url_tOracleOutput_3 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_3 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_3 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_3 = decryptedPassword_tOracleOutput_3;
                dbschema_tOracleOutput_3 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_3 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_3.put("user",dbUser_tOracleOutput_3);
                    atnParamsPrope_tOracleOutput_3.put("password",dbPwd_tOracleOutput_3);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_3.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_3 = java.sql.DriverManager.getConnection(url_tOracleOutput_3, atnParamsPrope_tOracleOutput_3);
        resourceMap.put("conn_tOracleOutput_3", conn_tOracleOutput_3);
            conn_tOracleOutput_3.setAutoCommit(false);
            int commitEvery_tOracleOutput_3 = 1000;
            int commitCounter_tOracleOutput_3 = 0;
        int count_tOracleOutput_3=0;

        if(dbschema_tOracleOutput_3 == null || dbschema_tOracleOutput_3.trim().length() == 0) {
            tableName_tOracleOutput_3 = ("BAGE_SCITAS");
        } else {
            tableName_tOracleOutput_3 = dbschema_tOracleOutput_3 + "." + ("BAGE_SCITAS");
        }
                java.sql.PreparedStatement pstmt_tOracleOutput_3 = conn_tOracleOutput_3.prepareStatement("SELECT COUNT(1) FROM " + tableName_tOracleOutput_3 + " WHERE ID = ?");
                resourceMap.put("pstmt_tOracleOutput_3", pstmt_tOracleOutput_3);
                String insert_tOracleOutput_3 = "INSERT INTO " + tableName_tOracleOutput_3 + " (ID,TIEMPOS_ID,UORG_ID,NOMBRE_UORG,CODIGO_UORG,SIGLA_UORG,FUERZA_ID,FUERZA_NOMBRE,FECHA_SOLICITUD,ESPECIALIDAD_ID,NOMBRE_ESPECIALIDAD,SIGLA_ESPECIALIDAD,ESTADO_SOLICITUD,ESTADO_AUTORIZACION,PRIORITARIA,AUTORIZACION,FECHA_VENCIMIENTO,USUARIO,TIPO_SCITA,TIPO_ASIGNACION,TIPO_USUARIO,CIUDAD_ESM,MUNICIPIO_ESM,PERSONAS_ID,OBSERVACIONES,AUTORIZACION_ID,TSCITAS_ID,TASIGNACIONES_ID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    
                java.sql.PreparedStatement pstmtInsert_tOracleOutput_3 = conn_tOracleOutput_3.prepareStatement(insert_tOracleOutput_3);
                resourceMap.put("pstmtInsert_tOracleOutput_3", pstmtInsert_tOracleOutput_3);
                String update_tOracleOutput_3 = "UPDATE " + tableName_tOracleOutput_3 + " SET TIEMPOS_ID = ?,UORG_ID = ?,NOMBRE_UORG = ?,CODIGO_UORG = ?,SIGLA_UORG = ?,FUERZA_ID = ?,FUERZA_NOMBRE = ?,FECHA_SOLICITUD = ?,ESPECIALIDAD_ID = ?,NOMBRE_ESPECIALIDAD = ?,SIGLA_ESPECIALIDAD = ?,ESTADO_SOLICITUD = ?,ESTADO_AUTORIZACION = ?,PRIORITARIA = ?,AUTORIZACION = ?,FECHA_VENCIMIENTO = ?,USUARIO = ?,TIPO_SCITA = ?,TIPO_ASIGNACION = ?,TIPO_USUARIO = ?,CIUDAD_ESM = ?,MUNICIPIO_ESM = ?,PERSONAS_ID = ?,OBSERVACIONES = ?,AUTORIZACION_ID = ?,TSCITAS_ID = ?,TASIGNACIONES_ID = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmtUpdate_tOracleOutput_3 = conn_tOracleOutput_3.prepareStatement(update_tOracleOutput_3);
                resourceMap.put("pstmtUpdate_tOracleOutput_3", pstmtUpdate_tOracleOutput_3);





 



/**
 * [tOracleOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct> tHash_Lookup_row24 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct>) 
					globalMap.get( "tHash_Lookup_row24" ))
					;					
					
	

row24Struct row24HashKey = new row24Struct();
row24Struct row24Default = new row24Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) 
					globalMap.get( "tHash_Lookup_row25" ))
					;					
					
	

row25Struct row25HashKey = new row25Struct();
row25Struct row25Default = new row25Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct> tHash_Lookup_row26 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct>) 
					globalMap.get( "tHash_Lookup_row26" ))
					;					
					
	

row26Struct row26HashKey = new row26Struct();
row26Struct row26Default = new row26Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) 
					globalMap.get( "tHash_Lookup_row28" ))
					;					
					
	

row28Struct row28HashKey = new row28Struct();
row28Struct row28Default = new row28Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct> tHash_Lookup_row30 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct>) 
					globalMap.get( "tHash_Lookup_row30" ))
					;					
					
	

row30Struct row30HashKey = new row30Struct();
row30Struct row30Default = new row30Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct> tHash_Lookup_row31 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct>) 
					globalMap.get( "tHash_Lookup_row31" ))
					;					
					
	

row31Struct row31HashKey = new row31Struct();
row31Struct row31Default = new row31Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
AGE_SCITASStruct AGE_SCITAS_tmp = new AGE_SCITASStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tOracleInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_8", false);
		start_Hash.put("tOracleInput_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_8";
	
	
		int tos_count_tOracleInput_8 = 0;
		
	


	
		    int nb_line_tOracleInput_8 = 0;
		    java.sql.Connection conn_tOracleInput_8 = null;
				conn_tOracleInput_8 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_8 = false;
				boolean isConnectionWrapped_tOracleInput_8 = !(conn_tOracleInput_8 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_8.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_8 = null;
                if (isConnectionWrapped_tOracleInput_8) {
					unwrappedOraConn_tOracleInput_8 = conn_tOracleInput_8.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_8 != null) {
                        isTimeZoneNull_tOracleInput_8 = (unwrappedOraConn_tOracleInput_8.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_8 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_8).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_8) {
					java.sql.Statement stmtGetTZ_tOracleInput_8 = conn_tOracleInput_8.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_8 = stmtGetTZ_tOracleInput_8.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_8 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_8.next()) {
						sessionTimezone_tOracleInput_8 = rsGetTZ_tOracleInput_8.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_8 && unwrappedOraConn_tOracleInput_8 != null) {
                        unwrappedOraConn_tOracleInput_8.setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_8).setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_8 = conn_tOracleInput_8.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_8.setFetchSize(1000);


		    String dbquery_tOracleInput_8 = "\nSELECT\n    scita.ID AS SCITAS_ID,\n    TO_NUMBER(TO_CHAR(scita.FECHA,'DDMMYYYY')) AS TIEMPO_SCITA,\n    scita.UORG_I"
+"D,\n    scita.FECHA AS FECHA_SOLICITUD,\n    scita.PERSONAS_ID AS PERSONAS_ID,\n    scita.ESPECIALIDADES_ID,\n    scita."
+"ESTADO AS ESTADO_SOLICITUD,\n    DECODE(scita.AUTORIZACION_ID, NULL, 'Autorizado', ERA.NOMBRE) AS ESTADO_AUTORIZACION,\n"
+"    scita.PRIORITARIA AS PRIORITARIA,    \n    AU.CONSECUTIVO AS AUTORIZACION,    \n    AU.VENCIMIENTO AS FVENCIMIENTO,"
+"\n    US.USUARIO AS USUARIO, \n    scita.TSCITAS_ID,    \n    scita.TASIGNACIONES_ID,\n    replace(replace(scita.OBSERVAC"
+"IONES,chr(10),''),chr(13),'') AS OBSERVACIONES,\n    AUTORIZACION_ID\nFROM AGE_SCITAS scita\nINNER JOIN GEN_USUARIOS US "
+"ON US.ID = scita.USUARIOS_ID\nLEFT JOIN RCA_AUTORIZACION AU ON scita.AUTORIZACION_ID = AU.ID\nLEFT JOIN RCA_ESTAUTORIZAC"
+"IONES ERA ON AU.ESTAUTORIZACIONES_ID = ERA.ID\nWHERE scita.ESTREGISTRO_ID = 1\nAND scita.ESTADO <> 'Vencida'\n" + context.CONDICION_AGESCITAS
;
		    

		    globalMap.put("tOracleInput_8_QUERY",dbquery_tOracleInput_8);

		    java.sql.ResultSet rs_tOracleInput_8 = null;

		    try {
		    	rs_tOracleInput_8 = stmt_tOracleInput_8.executeQuery(dbquery_tOracleInput_8);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_8 = rs_tOracleInput_8.getMetaData();
		    	int colQtyInRs_tOracleInput_8 = rsmd_tOracleInput_8.getColumnCount();

		    String tmpContent_tOracleInput_8 = null;
		    
		    
		    while (rs_tOracleInput_8.next()) {
		        nb_line_tOracleInput_8++;
		        
							if(colQtyInRs_tOracleInput_8 < 1) {
								row23.SCITAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(1) != null) {
						row23.SCITAS_ID = rs_tOracleInput_8.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 2) {
								row23.TIEMPO_SCITA = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(2) != null) {
						row23.TIEMPO_SCITA = rs_tOracleInput_8.getBigDecimal(2);
					} else {
				
						row23.TIEMPO_SCITA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 3) {
								row23.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(3) != null) {
						row23.UORG_ID = rs_tOracleInput_8.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 4) {
								row23.FECHA_SOLICITUD = null;
							} else {
										
			row23.FECHA_SOLICITUD = routines.system.JDBCUtil.getDate(rs_tOracleInput_8, 4);
		                    }
							if(colQtyInRs_tOracleInput_8 < 5) {
								row23.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(5) != null) {
						row23.PERSONAS_ID = rs_tOracleInput_8.getBigDecimal(5);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 6) {
								row23.ESPECIALIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(6) != null) {
						row23.ESPECIALIDADES_ID = rs_tOracleInput_8.getBigDecimal(6);
					} else {
				
						row23.ESPECIALIDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 7) {
								row23.ESTADO_SOLICITUD = null;
							} else {
	                         		
        	row23.ESTADO_SOLICITUD = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 8) {
								row23.ESTADO_AUTORIZACION = null;
							} else {
	                         		
        	row23.ESTADO_AUTORIZACION = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 9) {
								row23.PRIORITARIA = null;
							} else {
	                         		
        	row23.PRIORITARIA = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 10) {
								row23.AUTORIZACION = null;
							} else {
	                         		
        	row23.AUTORIZACION = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 11) {
								row23.FVENCIMIENTO = null;
							} else {
										
			row23.FVENCIMIENTO = routines.system.JDBCUtil.getDate(rs_tOracleInput_8, 11);
		                    }
							if(colQtyInRs_tOracleInput_8 < 12) {
								row23.USUARIO = null;
							} else {
	                         		
        	row23.USUARIO = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 13) {
								row23.TSCITAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(13) != null) {
						row23.TSCITAS_ID = rs_tOracleInput_8.getBigDecimal(13);
					} else {
				
						row23.TSCITAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 14) {
								row23.TASIGNACIONES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(14) != null) {
						row23.TASIGNACIONES_ID = rs_tOracleInput_8.getBigDecimal(14);
					} else {
				
						row23.TASIGNACIONES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 15) {
								row23.OBSERVACIONES = null;
							} else {
	                         		
        	row23.OBSERVACIONES = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 15, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 16) {
								row23.AUTORIZACION_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(16) != null) {
						row23.AUTORIZACION_ID = rs_tOracleInput_8.getBigDecimal(16);
					} else {
				
						row23.AUTORIZACION_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_8 begin ] stop
 */
	
	/**
	 * [tOracleInput_8 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 


	tos_count_tOracleInput_8++;

/**
 * [tOracleInput_8 main ] stop
 */
	
	/**
	 * [tOracleInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row23"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
						row24Struct row24 = null;
					
						row25Struct row25 = null;
					
						row26Struct row26 = null;
					
						row28Struct row28 = null;
					
						row30Struct row30 = null;
					
						row31Struct row31 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_7 = false;
		boolean mainRowRejected_tMap_7 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row24" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow24 = false;
       		  	    	
       		  	    	
 							row24Struct row24ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		    row24HashKey.IDENFITICADOR = row23.TIEMPO_SCITA ;
                        		    		

								
		                        	row24HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row24.lookup( row24HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row24Struct fromLookup_row24 = null;
							row24 = row24Default;
										 
							
								 
							
							
								if (tHash_Lookup_row24 !=null && tHash_Lookup_row24.hasNext()) { // G 099
								
							
								
								fromLookup_row24 = tHash_Lookup_row24.next();

							
							
								} // G 099
							
							

							if(fromLookup_row24 != null) {
								row24 = fromLookup_row24;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row25" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow25 = false;
       		  	    	
       		  	    	
 							row25Struct row25ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		    row25HashKey.PERSONAS_ID = row23.PERSONAS_ID ;
                        		    		

								
		                        	row25HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row25.lookup( row25HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row25Struct fromLookup_row25 = null;
							row25 = row25Default;
										 
							
								 
							
							
								if (tHash_Lookup_row25 !=null && tHash_Lookup_row25.hasNext()) { // G 099
								
							
								
								fromLookup_row25 = tHash_Lookup_row25.next();

							
							
								} // G 099
							
							

							if(fromLookup_row25 != null) {
								row25 = fromLookup_row25;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row26" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow26 = false;
       		  	    	
       		  	    	
 							row26Struct row26ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		    row26HashKey.UORG_ID = row23.UORG_ID ;
                        		    		

								
		                        	row26HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row26.lookup( row26HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row26Struct fromLookup_row26 = null;
							row26 = row26Default;
										 
							
								 
							
							
								if (tHash_Lookup_row26 !=null && tHash_Lookup_row26.hasNext()) { // G 099
								
							
								
								fromLookup_row26 = tHash_Lookup_row26.next();

							
							
								} // G 099
							
							

							if(fromLookup_row26 != null) {
								row26 = fromLookup_row26;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row28" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow28 = false;
       		  	    	
       		  	    	
 							row28Struct row28ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		    row28HashKey.ID = row23.ESPECIALIDADES_ID ;
                        		    		

								
		                        	row28HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row28.lookup( row28HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row28Struct fromLookup_row28 = null;
							row28 = row28Default;
										 
							
								 
							
							
								if (tHash_Lookup_row28 !=null && tHash_Lookup_row28.hasNext()) { // G 099
								
							
								
								fromLookup_row28 = tHash_Lookup_row28.next();

							
							
								} // G 099
							
							

							if(fromLookup_row28 != null) {
								row28 = fromLookup_row28;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row30" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow30 = false;
       		  	    	
       		  	    	
 							row30Struct row30ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		    row30HashKey.ID = row23.TSCITAS_ID ;
                        		    		

								
		                        	row30HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row30.lookup( row30HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row30Struct fromLookup_row30 = null;
							row30 = row30Default;
										 
							
								 
							
							
								if (tHash_Lookup_row30 !=null && tHash_Lookup_row30.hasNext()) { // G 099
								
							
								
								fromLookup_row30 = tHash_Lookup_row30.next();

							
							
								} // G 099
							
							

							if(fromLookup_row30 != null) {
								row30 = fromLookup_row30;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row31" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow31 = false;
       		  	    	
       		  	    	
 							row31Struct row31ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		    row31HashKey.ID = row23.TASIGNACIONES_ID ;
                        		    		

								
		                        	row31HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row31.lookup( row31HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row31Struct fromLookup_row31 = null;
							row31 = row31Default;
										 
							
								 
							
							
								if (tHash_Lookup_row31 !=null && tHash_Lookup_row31.hasNext()) { // G 099
								
							
								
								fromLookup_row31 = tHash_Lookup_row31.next();

							
							
								} // G 099
							
							

							if(fromLookup_row31 != null) {
								row31 = fromLookup_row31;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

AGE_SCITAS = null;


// # Output table : 'AGE_SCITAS'
AGE_SCITAS_tmp.ID = row23.SCITAS_ID ;
AGE_SCITAS_tmp.TIEMPOS_ID = row24.ID ;
AGE_SCITAS_tmp.UORG_ID = row23.UORG_ID ;
AGE_SCITAS_tmp.NOMBRE_UORG = row26.NOMBRE_UORG ;
AGE_SCITAS_tmp.CODIGO_UORG = row26.CODIGO_UORG ;
AGE_SCITAS_tmp.SIGLA_UORG = row26.SIGLA_UORG ;
AGE_SCITAS_tmp.FUERZA_ID = row26.FUERZA_ID ;
AGE_SCITAS_tmp.FUERZA_NOMBRE = row26.NOMBRE_FUERZA ;
AGE_SCITAS_tmp.FECHA_SOLICITUD = row23.FECHA_SOLICITUD ;
AGE_SCITAS_tmp.ESPECIALIDAD_ID = row23.ESPECIALIDADES_ID ;
AGE_SCITAS_tmp.NOMBRE_ESPECIALIDAD = row28.NOMBRE ;
AGE_SCITAS_tmp.SIGLA_ESPECIALIDAD = row28.SIGLA ;
AGE_SCITAS_tmp.ESTADO_SOLICITUD = row23.ESTADO_SOLICITUD ;
AGE_SCITAS_tmp.ESTADO_AUTORIZACION = row23.ESTADO_AUTORIZACION ;
AGE_SCITAS_tmp.PRIORITARIA = row23.PRIORITARIA ;
AGE_SCITAS_tmp.AUTORIZACION = row23.AUTORIZACION ;
AGE_SCITAS_tmp.FECHA_VENCIMIENTO = row23.FVENCIMIENTO ;
AGE_SCITAS_tmp.USUARIO = row23.USUARIO ;
AGE_SCITAS_tmp.TIPO_SCITA = row30.NOMBRE ;
AGE_SCITAS_tmp.TIPO_ASIGNACION = row31.NOMBRE ;
AGE_SCITAS_tmp.TIPO_USUARIO = row25.TIPO_USUARIO ;
AGE_SCITAS_tmp.CIUDAD_ESM = row26.CIUDAD_ESM ;
AGE_SCITAS_tmp.MUNICIPIO_ESM = row26.MUNICIPIO_ESM ;
AGE_SCITAS_tmp.PERSONAS_ID = row23.PERSONAS_ID ;
AGE_SCITAS_tmp.OBSERVACIONES = row23.OBSERVACIONES ;
AGE_SCITAS_tmp.AUTORIZACION_ID = row23.AUTORIZACION_ID ;
AGE_SCITAS_tmp.TSCITAS_ID = row23.TSCITAS_ID ;
AGE_SCITAS_tmp.TASIGNACIONES_ID = row23.TASIGNACIONES_ID ;
AGE_SCITAS = AGE_SCITAS_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "AGE_SCITAS"
if(AGE_SCITAS != null) { 



	
	/**
	 * [tOracleOutput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"AGE_SCITAS"
						
						);
					}
					



        whetherReject_tOracleOutput_3 = false;
                    pstmt_tOracleOutput_3.setBigDecimal(1, AGE_SCITAS.ID);

            int checkCount_tOracleOutput_3 = -1;
            try (java.sql.ResultSet rs_tOracleOutput_3 = pstmt_tOracleOutput_3.executeQuery()) {
                while(rs_tOracleOutput_3.next()) {
                    checkCount_tOracleOutput_3 = rs_tOracleOutput_3.getInt(1);
                }
            }
            if(checkCount_tOracleOutput_3 > 0) {
                        pstmtUpdate_tOracleOutput_3.setBigDecimal(1, AGE_SCITAS.TIEMPOS_ID);

                        pstmtUpdate_tOracleOutput_3.setBigDecimal(2, AGE_SCITAS.UORG_ID);

                        if(AGE_SCITAS.NOMBRE_UORG == null) {
pstmtUpdate_tOracleOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_3.setString(3, AGE_SCITAS.NOMBRE_UORG);
}

                        if(AGE_SCITAS.CODIGO_UORG == null) {
pstmtUpdate_tOracleOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_3.setString(4, AGE_SCITAS.CODIGO_UORG);
}

                        if(AGE_SCITAS.SIGLA_UORG == null) {
pstmtUpdate_tOracleOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_3.setString(5, AGE_SCITAS.SIGLA_UORG);
}

                        pstmtUpdate_tOracleOutput_3.setBigDecimal(6, AGE_SCITAS.FUERZA_ID);

                        if(AGE_SCITAS.FUERZA_NOMBRE == null) {
pstmtUpdate_tOracleOutput_3.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_3.setString(7, AGE_SCITAS.FUERZA_NOMBRE);
}

                        if(AGE_SCITAS.FECHA_SOLICITUD != null) {
pstmtUpdate_tOracleOutput_3.setObject(8, new java.sql.Timestamp(AGE_SCITAS.FECHA_SOLICITUD.getTime()),java.sql.Types.DATE);
} else {
pstmtUpdate_tOracleOutput_3.setNull(8, java.sql.Types.DATE);
}

                        pstmtUpdate_tOracleOutput_3.setBigDecimal(9, AGE_SCITAS.ESPECIALIDAD_ID);

                        if(AGE_SCITAS.NOMBRE_ESPECIALIDAD == null) {
pstmtUpdate_tOracleOutput_3.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_3.setString(10, AGE_SCITAS.NOMBRE_ESPECIALIDAD);
}

                        if(AGE_SCITAS.SIGLA_ESPECIALIDAD == null) {
pstmtUpdate_tOracleOutput_3.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_3.setString(11, AGE_SCITAS.SIGLA_ESPECIALIDAD);
}

                        if(AGE_SCITAS.ESTADO_SOLICITUD == null) {
pstmtUpdate_tOracleOutput_3.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_3.setString(12, AGE_SCITAS.ESTADO_SOLICITUD);
}

                        if(AGE_SCITAS.ESTADO_AUTORIZACION == null) {
pstmtUpdate_tOracleOutput_3.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_3.setString(13, AGE_SCITAS.ESTADO_AUTORIZACION);
}

                        if(AGE_SCITAS.PRIORITARIA == null) {
pstmtUpdate_tOracleOutput_3.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_3.setString(14, AGE_SCITAS.PRIORITARIA);
}

                        if(AGE_SCITAS.AUTORIZACION == null) {
pstmtUpdate_tOracleOutput_3.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_3.setString(15, AGE_SCITAS.AUTORIZACION);
}

                        if(AGE_SCITAS.FECHA_VENCIMIENTO != null) {
pstmtUpdate_tOracleOutput_3.setObject(16, new java.sql.Timestamp(AGE_SCITAS.FECHA_VENCIMIENTO.getTime()),java.sql.Types.DATE);
} else {
pstmtUpdate_tOracleOutput_3.setNull(16, java.sql.Types.DATE);
}

                        if(AGE_SCITAS.USUARIO == null) {
pstmtUpdate_tOracleOutput_3.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_3.setString(17, AGE_SCITAS.USUARIO);
}

                        if(AGE_SCITAS.TIPO_SCITA == null) {
pstmtUpdate_tOracleOutput_3.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_3.setString(18, AGE_SCITAS.TIPO_SCITA);
}

                        if(AGE_SCITAS.TIPO_ASIGNACION == null) {
pstmtUpdate_tOracleOutput_3.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_3.setString(19, AGE_SCITAS.TIPO_ASIGNACION);
}

                        if(AGE_SCITAS.TIPO_USUARIO == null) {
pstmtUpdate_tOracleOutput_3.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_3.setString(20, AGE_SCITAS.TIPO_USUARIO);
}

                        if(AGE_SCITAS.CIUDAD_ESM == null) {
pstmtUpdate_tOracleOutput_3.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_3.setString(21, AGE_SCITAS.CIUDAD_ESM);
}

                        if(AGE_SCITAS.MUNICIPIO_ESM == null) {
pstmtUpdate_tOracleOutput_3.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_3.setString(22, AGE_SCITAS.MUNICIPIO_ESM);
}

                        pstmtUpdate_tOracleOutput_3.setBigDecimal(23, AGE_SCITAS.PERSONAS_ID);

                        if(AGE_SCITAS.OBSERVACIONES == null) {
pstmtUpdate_tOracleOutput_3.setNull(24, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_3.setString(24, AGE_SCITAS.OBSERVACIONES);
}

                        pstmtUpdate_tOracleOutput_3.setBigDecimal(25, AGE_SCITAS.AUTORIZACION_ID);

                        pstmtUpdate_tOracleOutput_3.setBigDecimal(26, AGE_SCITAS.TSCITAS_ID);

                        pstmtUpdate_tOracleOutput_3.setBigDecimal(27, AGE_SCITAS.TASIGNACIONES_ID);

                        pstmtUpdate_tOracleOutput_3.setBigDecimal(28 + count_tOracleOutput_3, AGE_SCITAS.ID);

                try {
                    int processedCount_tOracleOutput_3 = pstmtUpdate_tOracleOutput_3.executeUpdate();
                    updatedCount_tOracleOutput_3 += processedCount_tOracleOutput_3;
                    rowsToCommitCount_tOracleOutput_3 += processedCount_tOracleOutput_3;
                    nb_line_tOracleOutput_3++;
                } catch(java.lang.Exception e_tOracleOutput_3) {
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
                    whetherReject_tOracleOutput_3 = true;
                        nb_line_tOracleOutput_3++;
                            System.err.print(e_tOracleOutput_3.getMessage());
                }
            } else {
                        pstmtInsert_tOracleOutput_3.setBigDecimal(1, AGE_SCITAS.ID);

                        pstmtInsert_tOracleOutput_3.setBigDecimal(2, AGE_SCITAS.TIEMPOS_ID);

                        pstmtInsert_tOracleOutput_3.setBigDecimal(3, AGE_SCITAS.UORG_ID);

                        if(AGE_SCITAS.NOMBRE_UORG == null) {
pstmtInsert_tOracleOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_3.setString(4, AGE_SCITAS.NOMBRE_UORG);
}

                        if(AGE_SCITAS.CODIGO_UORG == null) {
pstmtInsert_tOracleOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_3.setString(5, AGE_SCITAS.CODIGO_UORG);
}

                        if(AGE_SCITAS.SIGLA_UORG == null) {
pstmtInsert_tOracleOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_3.setString(6, AGE_SCITAS.SIGLA_UORG);
}

                        pstmtInsert_tOracleOutput_3.setBigDecimal(7, AGE_SCITAS.FUERZA_ID);

                        if(AGE_SCITAS.FUERZA_NOMBRE == null) {
pstmtInsert_tOracleOutput_3.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_3.setString(8, AGE_SCITAS.FUERZA_NOMBRE);
}

                        if(AGE_SCITAS.FECHA_SOLICITUD != null) {
pstmtInsert_tOracleOutput_3.setObject(9, new java.sql.Timestamp(AGE_SCITAS.FECHA_SOLICITUD.getTime()),java.sql.Types.DATE);
} else {
pstmtInsert_tOracleOutput_3.setNull(9, java.sql.Types.DATE);
}

                        pstmtInsert_tOracleOutput_3.setBigDecimal(10, AGE_SCITAS.ESPECIALIDAD_ID);

                        if(AGE_SCITAS.NOMBRE_ESPECIALIDAD == null) {
pstmtInsert_tOracleOutput_3.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_3.setString(11, AGE_SCITAS.NOMBRE_ESPECIALIDAD);
}

                        if(AGE_SCITAS.SIGLA_ESPECIALIDAD == null) {
pstmtInsert_tOracleOutput_3.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_3.setString(12, AGE_SCITAS.SIGLA_ESPECIALIDAD);
}

                        if(AGE_SCITAS.ESTADO_SOLICITUD == null) {
pstmtInsert_tOracleOutput_3.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_3.setString(13, AGE_SCITAS.ESTADO_SOLICITUD);
}

                        if(AGE_SCITAS.ESTADO_AUTORIZACION == null) {
pstmtInsert_tOracleOutput_3.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_3.setString(14, AGE_SCITAS.ESTADO_AUTORIZACION);
}

                        if(AGE_SCITAS.PRIORITARIA == null) {
pstmtInsert_tOracleOutput_3.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_3.setString(15, AGE_SCITAS.PRIORITARIA);
}

                        if(AGE_SCITAS.AUTORIZACION == null) {
pstmtInsert_tOracleOutput_3.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_3.setString(16, AGE_SCITAS.AUTORIZACION);
}

                        if(AGE_SCITAS.FECHA_VENCIMIENTO != null) {
pstmtInsert_tOracleOutput_3.setObject(17, new java.sql.Timestamp(AGE_SCITAS.FECHA_VENCIMIENTO.getTime()),java.sql.Types.DATE);
} else {
pstmtInsert_tOracleOutput_3.setNull(17, java.sql.Types.DATE);
}

                        if(AGE_SCITAS.USUARIO == null) {
pstmtInsert_tOracleOutput_3.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_3.setString(18, AGE_SCITAS.USUARIO);
}

                        if(AGE_SCITAS.TIPO_SCITA == null) {
pstmtInsert_tOracleOutput_3.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_3.setString(19, AGE_SCITAS.TIPO_SCITA);
}

                        if(AGE_SCITAS.TIPO_ASIGNACION == null) {
pstmtInsert_tOracleOutput_3.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_3.setString(20, AGE_SCITAS.TIPO_ASIGNACION);
}

                        if(AGE_SCITAS.TIPO_USUARIO == null) {
pstmtInsert_tOracleOutput_3.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_3.setString(21, AGE_SCITAS.TIPO_USUARIO);
}

                        if(AGE_SCITAS.CIUDAD_ESM == null) {
pstmtInsert_tOracleOutput_3.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_3.setString(22, AGE_SCITAS.CIUDAD_ESM);
}

                        if(AGE_SCITAS.MUNICIPIO_ESM == null) {
pstmtInsert_tOracleOutput_3.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_3.setString(23, AGE_SCITAS.MUNICIPIO_ESM);
}

                        pstmtInsert_tOracleOutput_3.setBigDecimal(24, AGE_SCITAS.PERSONAS_ID);

                        if(AGE_SCITAS.OBSERVACIONES == null) {
pstmtInsert_tOracleOutput_3.setNull(25, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_3.setString(25, AGE_SCITAS.OBSERVACIONES);
}

                        pstmtInsert_tOracleOutput_3.setBigDecimal(26, AGE_SCITAS.AUTORIZACION_ID);

                        pstmtInsert_tOracleOutput_3.setBigDecimal(27, AGE_SCITAS.TSCITAS_ID);

                        pstmtInsert_tOracleOutput_3.setBigDecimal(28, AGE_SCITAS.TASIGNACIONES_ID);

                try {
                    int processedCount_tOracleOutput_3 = pstmtInsert_tOracleOutput_3.executeUpdate();
                    insertedCount_tOracleOutput_3 += processedCount_tOracleOutput_3;
                    rowsToCommitCount_tOracleOutput_3 += processedCount_tOracleOutput_3;
                    nb_line_tOracleOutput_3++;
                } catch(java.lang.Exception e_tOracleOutput_3) {
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
                    whetherReject_tOracleOutput_3 = true;
                        nb_line_tOracleOutput_3++;
                            System.err.print(e_tOracleOutput_3.getMessage());
                }
            }
                commitCounter_tOracleOutput_3++;
                if(commitEvery_tOracleOutput_3 <= commitCounter_tOracleOutput_3) {
                    if(rowsToCommitCount_tOracleOutput_3 != 0){
                    	
                    }
                    conn_tOracleOutput_3.commit();
                    if(rowsToCommitCount_tOracleOutput_3 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_3 = 0;
                    }
                    commitCounter_tOracleOutput_3=0;
                }

 


	tos_count_tOracleOutput_3++;

/**
 * [tOracleOutput_3 main ] stop
 */
	
	/**
	 * [tOracleOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	

 



/**
 * [tOracleOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	

 



/**
 * [tOracleOutput_3 process_data_end ] stop
 */

} // End of branch "AGE_SCITAS"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_8 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

}
}finally{
	if (rs_tOracleInput_8 != null) {
		rs_tOracleInput_8.close();
	}
	if (stmt_tOracleInput_8 != null) {
		stmt_tOracleInput_8.close();
	}
}

globalMap.put("tOracleInput_8_NB_LINE",nb_line_tOracleInput_8);
 

ok_Hash.put("tOracleInput_8", true);
end_Hash.put("tOracleInput_8", System.currentTimeMillis());




/**
 * [tOracleInput_8 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row24 != null) {
						tHash_Lookup_row24.endGet();
					}
					globalMap.remove( "tHash_Lookup_row24" );

					
					
				
					if(tHash_Lookup_row25 != null) {
						tHash_Lookup_row25.endGet();
					}
					globalMap.remove( "tHash_Lookup_row25" );

					
					
				
					if(tHash_Lookup_row26 != null) {
						tHash_Lookup_row26.endGet();
					}
					globalMap.remove( "tHash_Lookup_row26" );

					
					
				
					if(tHash_Lookup_row28 != null) {
						tHash_Lookup_row28.endGet();
					}
					globalMap.remove( "tHash_Lookup_row28" );

					
					
				
					if(tHash_Lookup_row30 != null) {
						tHash_Lookup_row30.endGet();
					}
					globalMap.remove( "tHash_Lookup_row30" );

					
					
				
					if(tHash_Lookup_row31 != null) {
						tHash_Lookup_row31.endGet();
					}
					globalMap.remove( "tHash_Lookup_row31" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tOracleOutput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	
	



	
        if(pstmtUpdate_tOracleOutput_3 != null){
            pstmtUpdate_tOracleOutput_3.close();
            resourceMap.remove("pstmtUpdate_tOracleOutput_3");
        }
        if(pstmtInsert_tOracleOutput_3 != null){
            pstmtInsert_tOracleOutput_3.close();
            resourceMap.remove("pstmtInsert_tOracleOutput_3");
        }
        if(pstmt_tOracleOutput_3 != null) {
            pstmt_tOracleOutput_3.close();
            resourceMap.remove("pstmt_tOracleOutput_3");
        }
    resourceMap.put("statementClosed_tOracleOutput_3", true);
		if(commitCounter_tOracleOutput_3 > 0 && rowsToCommitCount_tOracleOutput_3 != 0) {
			
		}
		conn_tOracleOutput_3.commit();
		if(commitCounter_tOracleOutput_3 > 0 && rowsToCommitCount_tOracleOutput_3 != 0) {
			
			rowsToCommitCount_tOracleOutput_3 = 0;
		}
		commitCounter_tOracleOutput_3 = 0;
		
		
		conn_tOracleOutput_3 .close();
		
		resourceMap.put("finish_tOracleOutput_3", true);
   	

	
	nb_line_deleted_tOracleOutput_3=nb_line_deleted_tOracleOutput_3+ deletedCount_tOracleOutput_3;
	nb_line_update_tOracleOutput_3=nb_line_update_tOracleOutput_3 + updatedCount_tOracleOutput_3;
	nb_line_inserted_tOracleOutput_3=nb_line_inserted_tOracleOutput_3 + insertedCount_tOracleOutput_3;
	nb_line_rejected_tOracleOutput_3=nb_line_rejected_tOracleOutput_3 + rejectedCount_tOracleOutput_3;
	
        globalMap.put("tOracleOutput_3_NB_LINE",nb_line_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_UPDATED",nb_line_update_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_3);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"AGE_SCITAS");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_3", true);
end_Hash.put("tOracleOutput_3", System.currentTimeMillis());




/**
 * [tOracleOutput_3 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tOracleInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_row24"); 
				     			
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_row25"); 
				     			
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_row26"); 
				     			
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_row28"); 
				     			
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_row30"); 
				     			
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_row31"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tOracleOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_3") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tOracleOutput_3 = null;
                if ((pstmtUpdateToClose_tOracleOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tOracleOutput_3")) != null) {
                    pstmtUpdateToClose_tOracleOutput_3.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tOracleOutput_3 = null;
                if ((pstmtInsertToClose_tOracleOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tOracleOutput_3")) != null) {
                    pstmtInsertToClose_tOracleOutput_3.close();
                }
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_3 = null;
                if ((pstmtToClose_tOracleOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_3")) != null) {
                    pstmtToClose_tOracleOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_3") == null){
            java.sql.Connection ctn_tOracleOutput_3 = null;
            if((ctn_tOracleOutput_3 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_3")) != null){
                try {
                    ctn_tOracleOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_3) {
                    String errorMessage_tOracleOutput_3 = "failed to close the connection in tOracleOutput_3 :" + sqlEx_tOracleOutput_3.getMessage();
                    System.err.println(errorMessage_tOracleOutput_3);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class ins_citaStruct implements routines.system.IPersistableRow<ins_citaStruct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "PK - Llave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal TIEMPO_CITA;

				public BigDecimal getTIEMPO_CITA () {
					return this.TIEMPO_CITA;
				}

				public Boolean TIEMPO_CITAIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_CITAIsKey(){
				    return false;
				}
				public Integer TIEMPO_CITALength(){
				    return 0;
				}
				public Integer TIEMPO_CITAPrecision(){
				    return null;
				}
				public String TIEMPO_CITADefault(){
				
					return null;
				
				}
				public String TIEMPO_CITAComment(){
				
				    return "ID tiempos de la cita";
				
				}
				public String TIEMPO_CITAPattern(){
				
					return "";
				
				}
				public String TIEMPO_CITAOriginalDbColumnName(){
				
					return "TIEMPO_CITA";
				
				}

				
			    public BigDecimal SOLICITUDES_ID;

				public BigDecimal getSOLICITUDES_ID () {
					return this.SOLICITUDES_ID;
				}

				public Boolean SOLICITUDES_IDIsNullable(){
				    return true;
				}
				public Boolean SOLICITUDES_IDIsKey(){
				    return false;
				}
				public Integer SOLICITUDES_IDLength(){
				    return 0;
				}
				public Integer SOLICITUDES_IDPrecision(){
				    return null;
				}
				public String SOLICITUDES_IDDefault(){
				
					return null;
				
				}
				public String SOLICITUDES_IDComment(){
				
				    return "ID de la solicitud relacionada a la cita";
				
				}
				public String SOLICITUDES_IDPattern(){
				
					return "";
				
				}
				public String SOLICITUDES_IDOriginalDbColumnName(){
				
					return "SOLICITUDES_ID";
				
				}

				
			    public BigDecimal PROFESIONALES_ID;

				public BigDecimal getPROFESIONALES_ID () {
					return this.PROFESIONALES_ID;
				}

				public Boolean PROFESIONALES_IDIsNullable(){
				    return true;
				}
				public Boolean PROFESIONALES_IDIsKey(){
				    return false;
				}
				public Integer PROFESIONALES_IDLength(){
				    return 0;
				}
				public Integer PROFESIONALES_IDPrecision(){
				    return null;
				}
				public String PROFESIONALES_IDDefault(){
				
					return null;
				
				}
				public String PROFESIONALES_IDComment(){
				
				    return "ID del profesional";
				
				}
				public String PROFESIONALES_IDPattern(){
				
					return "";
				
				}
				public String PROFESIONALES_IDOriginalDbColumnName(){
				
					return "PROFESIONALES_ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return null;
				
				}
				public String PERSONAS_IDComment(){
				
				    return "ID del afiliado";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public java.util.Date FECHA_CREACION;

				public java.util.Date getFECHA_CREACION () {
					return this.FECHA_CREACION;
				}

				public Boolean FECHA_CREACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_CREACIONIsKey(){
				    return false;
				}
				public Integer FECHA_CREACIONLength(){
				    return 11;
				}
				public Integer FECHA_CREACIONPrecision(){
				    return 6;
				}
				public String FECHA_CREACIONDefault(){
				
					return null;
				
				}
				public String FECHA_CREACIONComment(){
				
				    return "";
				
				}
				public String FECHA_CREACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_CREACIONOriginalDbColumnName(){
				
					return "FECHA_CREACION";
				
				}

				
			    public java.util.Date FCREACION_SCITA;

				public java.util.Date getFCREACION_SCITA () {
					return this.FCREACION_SCITA;
				}

				public Boolean FCREACION_SCITAIsNullable(){
				    return false;
				}
				public Boolean FCREACION_SCITAIsKey(){
				    return false;
				}
				public Integer FCREACION_SCITALength(){
				    return 0;
				}
				public Integer FCREACION_SCITAPrecision(){
				    return 0;
				}
				public String FCREACION_SCITADefault(){
				
					return null;
				
				}
				public String FCREACION_SCITAComment(){
				
				    return "";
				
				}
				public String FCREACION_SCITAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FCREACION_SCITAOriginalDbColumnName(){
				
					return "FCREACION_SCITA";
				
				}

				
			    public String ESTADO_CITA;

				public String getESTADO_CITA () {
					return this.ESTADO_CITA;
				}

				public Boolean ESTADO_CITAIsNullable(){
				    return true;
				}
				public Boolean ESTADO_CITAIsKey(){
				    return false;
				}
				public Integer ESTADO_CITALength(){
				    return 100;
				}
				public Integer ESTADO_CITAPrecision(){
				    return 0;
				}
				public String ESTADO_CITADefault(){
				
					return null;
				
				}
				public String ESTADO_CITAComment(){
				
				    return "Estado de la cita";
				
				}
				public String ESTADO_CITAPattern(){
				
					return "";
				
				}
				public String ESTADO_CITAOriginalDbColumnName(){
				
					return "ESTADO_CITA";
				
				}

				
			    public String TIPO_CITA;

				public String getTIPO_CITA () {
					return this.TIPO_CITA;
				}

				public Boolean TIPO_CITAIsNullable(){
				    return true;
				}
				public Boolean TIPO_CITAIsKey(){
				    return false;
				}
				public Integer TIPO_CITALength(){
				    return 1024;
				}
				public Integer TIPO_CITAPrecision(){
				    return 0;
				}
				public String TIPO_CITADefault(){
				
					return null;
				
				}
				public String TIPO_CITAComment(){
				
				    return "";
				
				}
				public String TIPO_CITAPattern(){
				
					return "";
				
				}
				public String TIPO_CITAOriginalDbColumnName(){
				
					return "TIPO_CITA";
				
				}

				
			    public String MOTIVO_CONSULTA;

				public String getMOTIVO_CONSULTA () {
					return this.MOTIVO_CONSULTA;
				}

				public Boolean MOTIVO_CONSULTAIsNullable(){
				    return true;
				}
				public Boolean MOTIVO_CONSULTAIsKey(){
				    return false;
				}
				public Integer MOTIVO_CONSULTALength(){
				    return 4000;
				}
				public Integer MOTIVO_CONSULTAPrecision(){
				    return 0;
				}
				public String MOTIVO_CONSULTADefault(){
				
					return null;
				
				}
				public String MOTIVO_CONSULTAComment(){
				
				    return "";
				
				}
				public String MOTIVO_CONSULTAPattern(){
				
					return "";
				
				}
				public String MOTIVO_CONSULTAOriginalDbColumnName(){
				
					return "MOTIVO_CONSULTA";
				
				}

				
			    public String DIAGNOSTICO;

				public String getDIAGNOSTICO () {
					return this.DIAGNOSTICO;
				}

				public Boolean DIAGNOSTICOIsNullable(){
				    return true;
				}
				public Boolean DIAGNOSTICOIsKey(){
				    return false;
				}
				public Integer DIAGNOSTICOLength(){
				    return 500;
				}
				public Integer DIAGNOSTICOPrecision(){
				    return 0;
				}
				public String DIAGNOSTICODefault(){
				
					return null;
				
				}
				public String DIAGNOSTICOComment(){
				
				    return "";
				
				}
				public String DIAGNOSTICOPattern(){
				
					return "";
				
				}
				public String DIAGNOSTICOOriginalDbColumnName(){
				
					return "DIAGNOSTICO";
				
				}

				
			    public String TIPO_CAUSAL;

				public String getTIPO_CAUSAL () {
					return this.TIPO_CAUSAL;
				}

				public Boolean TIPO_CAUSALIsNullable(){
				    return true;
				}
				public Boolean TIPO_CAUSALIsKey(){
				    return false;
				}
				public Integer TIPO_CAUSALLength(){
				    return 4000;
				}
				public Integer TIPO_CAUSALPrecision(){
				    return 0;
				}
				public String TIPO_CAUSALDefault(){
				
					return null;
				
				}
				public String TIPO_CAUSALComment(){
				
				    return "";
				
				}
				public String TIPO_CAUSALPattern(){
				
					return "";
				
				}
				public String TIPO_CAUSALOriginalDbColumnName(){
				
					return "TIPO_CAUSAL";
				
				}

				
			    public String JUSTIFICACION;

				public String getJUSTIFICACION () {
					return this.JUSTIFICACION;
				}

				public Boolean JUSTIFICACIONIsNullable(){
				    return true;
				}
				public Boolean JUSTIFICACIONIsKey(){
				    return false;
				}
				public Integer JUSTIFICACIONLength(){
				    return 4000;
				}
				public Integer JUSTIFICACIONPrecision(){
				    return 0;
				}
				public String JUSTIFICACIONDefault(){
				
					return null;
				
				}
				public String JUSTIFICACIONComment(){
				
				    return "";
				
				}
				public String JUSTIFICACIONPattern(){
				
					return "";
				
				}
				public String JUSTIFICACIONOriginalDbColumnName(){
				
					return "JUSTIFICACION";
				
				}

				
			    public String USUARIO_CITA;

				public String getUSUARIO_CITA () {
					return this.USUARIO_CITA;
				}

				public Boolean USUARIO_CITAIsNullable(){
				    return true;
				}
				public Boolean USUARIO_CITAIsKey(){
				    return false;
				}
				public Integer USUARIO_CITALength(){
				    return 50;
				}
				public Integer USUARIO_CITAPrecision(){
				    return 0;
				}
				public String USUARIO_CITADefault(){
				
					return null;
				
				}
				public String USUARIO_CITAComment(){
				
				    return "";
				
				}
				public String USUARIO_CITAPattern(){
				
					return "";
				
				}
				public String USUARIO_CITAOriginalDbColumnName(){
				
					return "USUARIO_CITA";
				
				}

				
			    public String ESM_ATENCION;

				public String getESM_ATENCION () {
					return this.ESM_ATENCION;
				}

				public Boolean ESM_ATENCIONIsNullable(){
				    return true;
				}
				public Boolean ESM_ATENCIONIsKey(){
				    return false;
				}
				public Integer ESM_ATENCIONLength(){
				    return 2000;
				}
				public Integer ESM_ATENCIONPrecision(){
				    return 0;
				}
				public String ESM_ATENCIONDefault(){
				
					return null;
				
				}
				public String ESM_ATENCIONComment(){
				
				    return "";
				
				}
				public String ESM_ATENCIONPattern(){
				
					return "";
				
				}
				public String ESM_ATENCIONOriginalDbColumnName(){
				
					return "ESM_ATENCION";
				
				}

				
			    public String FUERZA_ESM;

				public String getFUERZA_ESM () {
					return this.FUERZA_ESM;
				}

				public Boolean FUERZA_ESMIsNullable(){
				    return true;
				}
				public Boolean FUERZA_ESMIsKey(){
				    return false;
				}
				public Integer FUERZA_ESMLength(){
				    return 50;
				}
				public Integer FUERZA_ESMPrecision(){
				    return 0;
				}
				public String FUERZA_ESMDefault(){
				
					return null;
				
				}
				public String FUERZA_ESMComment(){
				
				    return "";
				
				}
				public String FUERZA_ESMPattern(){
				
					return "";
				
				}
				public String FUERZA_ESMOriginalDbColumnName(){
				
					return "FUERZA_ESM";
				
				}

				
			    public String CIUDAD_ESM;

				public String getCIUDAD_ESM () {
					return this.CIUDAD_ESM;
				}

				public Boolean CIUDAD_ESMIsNullable(){
				    return true;
				}
				public Boolean CIUDAD_ESMIsKey(){
				    return false;
				}
				public Integer CIUDAD_ESMLength(){
				    return 100;
				}
				public Integer CIUDAD_ESMPrecision(){
				    return 0;
				}
				public String CIUDAD_ESMDefault(){
				
					return null;
				
				}
				public String CIUDAD_ESMComment(){
				
				    return "";
				
				}
				public String CIUDAD_ESMPattern(){
				
					return "";
				
				}
				public String CIUDAD_ESMOriginalDbColumnName(){
				
					return "CIUDAD_ESM";
				
				}

				
			    public BigDecimal TIEMPO_ESPERA;

				public BigDecimal getTIEMPO_ESPERA () {
					return this.TIEMPO_ESPERA;
				}

				public Boolean TIEMPO_ESPERAIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_ESPERAIsKey(){
				    return false;
				}
				public Integer TIEMPO_ESPERALength(){
				    return 0;
				}
				public Integer TIEMPO_ESPERAPrecision(){
				    return null;
				}
				public String TIEMPO_ESPERADefault(){
				
					return null;
				
				}
				public String TIEMPO_ESPERAComment(){
				
				    return "Tiempo ";
				
				}
				public String TIEMPO_ESPERAPattern(){
				
					return "";
				
				}
				public String TIEMPO_ESPERAOriginalDbColumnName(){
				
					return "TIEMPO_ESPERA";
				
				}

				
			    public BigDecimal TIEMPO_ATENCION;

				public BigDecimal getTIEMPO_ATENCION () {
					return this.TIEMPO_ATENCION;
				}

				public Boolean TIEMPO_ATENCIONIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_ATENCIONIsKey(){
				    return false;
				}
				public Integer TIEMPO_ATENCIONLength(){
				    return 0;
				}
				public Integer TIEMPO_ATENCIONPrecision(){
				    return null;
				}
				public String TIEMPO_ATENCIONDefault(){
				
					return null;
				
				}
				public String TIEMPO_ATENCIONComment(){
				
				    return "Tiempo que dura la atenci\u00F3n";
				
				}
				public String TIEMPO_ATENCIONPattern(){
				
					return "";
				
				}
				public String TIEMPO_ATENCIONOriginalDbColumnName(){
				
					return "TIEMPO_ATENCION";
				
				}

				
			    public BigDecimal TIEMPO_MUERTO;

				public BigDecimal getTIEMPO_MUERTO () {
					return this.TIEMPO_MUERTO;
				}

				public Boolean TIEMPO_MUERTOIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_MUERTOIsKey(){
				    return false;
				}
				public Integer TIEMPO_MUERTOLength(){
				    return 0;
				}
				public Integer TIEMPO_MUERTOPrecision(){
				    return null;
				}
				public String TIEMPO_MUERTODefault(){
				
					return null;
				
				}
				public String TIEMPO_MUERTOComment(){
				
				    return "";
				
				}
				public String TIEMPO_MUERTOPattern(){
				
					return "";
				
				}
				public String TIEMPO_MUERTOOriginalDbColumnName(){
				
					return "TIEMPO_MUERTO";
				
				}

				
			    public String HORA_FATENCION;

				public String getHORA_FATENCION () {
					return this.HORA_FATENCION;
				}

				public Boolean HORA_FATENCIONIsNullable(){
				    return true;
				}
				public Boolean HORA_FATENCIONIsKey(){
				    return false;
				}
				public Integer HORA_FATENCIONLength(){
				    return 20;
				}
				public Integer HORA_FATENCIONPrecision(){
				    return 0;
				}
				public String HORA_FATENCIONDefault(){
				
					return null;
				
				}
				public String HORA_FATENCIONComment(){
				
				    return "Tiempo en que inicia la atenci\u00F3n";
				
				}
				public String HORA_FATENCIONPattern(){
				
					return "";
				
				}
				public String HORA_FATENCIONOriginalDbColumnName(){
				
					return "HORA_FATENCION";
				
				}

				
			    public BigDecimal TIEMPO_ASIGNACION;

				public BigDecimal getTIEMPO_ASIGNACION () {
					return this.TIEMPO_ASIGNACION;
				}

				public Boolean TIEMPO_ASIGNACIONIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_ASIGNACIONIsKey(){
				    return false;
				}
				public Integer TIEMPO_ASIGNACIONLength(){
				    return 0;
				}
				public Integer TIEMPO_ASIGNACIONPrecision(){
				    return null;
				}
				public String TIEMPO_ASIGNACIONDefault(){
				
					return null;
				
				}
				public String TIEMPO_ASIGNACIONComment(){
				
				    return "Tiempo en que finaliza la atenci\u00F3n";
				
				}
				public String TIEMPO_ASIGNACIONPattern(){
				
					return "";
				
				}
				public String TIEMPO_ASIGNACIONOriginalDbColumnName(){
				
					return "TIEMPO_ASIGNACION";
				
				}

				
			    public String HORA_ICITA;

				public String getHORA_ICITA () {
					return this.HORA_ICITA;
				}

				public Boolean HORA_ICITAIsNullable(){
				    return true;
				}
				public Boolean HORA_ICITAIsKey(){
				    return false;
				}
				public Integer HORA_ICITALength(){
				    return 50;
				}
				public Integer HORA_ICITAPrecision(){
				    return 0;
				}
				public String HORA_ICITADefault(){
				
					return null;
				
				}
				public String HORA_ICITAComment(){
				
				    return "Hora programada para el inicio de la cita";
				
				}
				public String HORA_ICITAPattern(){
				
					return "";
				
				}
				public String HORA_ICITAOriginalDbColumnName(){
				
					return "HORA_ICITA";
				
				}

				
			    public String HORA_IATENCION;

				public String getHORA_IATENCION () {
					return this.HORA_IATENCION;
				}

				public Boolean HORA_IATENCIONIsNullable(){
				    return true;
				}
				public Boolean HORA_IATENCIONIsKey(){
				    return false;
				}
				public Integer HORA_IATENCIONLength(){
				    return 50;
				}
				public Integer HORA_IATENCIONPrecision(){
				    return 0;
				}
				public String HORA_IATENCIONDefault(){
				
					return null;
				
				}
				public String HORA_IATENCIONComment(){
				
				    return "";
				
				}
				public String HORA_IATENCIONPattern(){
				
					return "";
				
				}
				public String HORA_IATENCIONOriginalDbColumnName(){
				
					return "HORA_IATENCION";
				
				}

				
			    public String HORA_FCITA;

				public String getHORA_FCITA () {
					return this.HORA_FCITA;
				}

				public Boolean HORA_FCITAIsNullable(){
				    return true;
				}
				public Boolean HORA_FCITAIsKey(){
				    return false;
				}
				public Integer HORA_FCITALength(){
				    return 50;
				}
				public Integer HORA_FCITAPrecision(){
				    return 0;
				}
				public String HORA_FCITADefault(){
				
					return null;
				
				}
				public String HORA_FCITAComment(){
				
				    return "Hora programada para la finalizaci\u00F3n de la cita";
				
				}
				public String HORA_FCITAPattern(){
				
					return "";
				
				}
				public String HORA_FCITAOriginalDbColumnName(){
				
					return "HORA_FCITA";
				
				}

				
			    public String HORA_LLEGADA;

				public String getHORA_LLEGADA () {
					return this.HORA_LLEGADA;
				}

				public Boolean HORA_LLEGADAIsNullable(){
				    return true;
				}
				public Boolean HORA_LLEGADAIsKey(){
				    return false;
				}
				public Integer HORA_LLEGADALength(){
				    return 50;
				}
				public Integer HORA_LLEGADAPrecision(){
				    return 0;
				}
				public String HORA_LLEGADADefault(){
				
					return null;
				
				}
				public String HORA_LLEGADAComment(){
				
				    return "Hora en que se registra la llegada del paciente";
				
				}
				public String HORA_LLEGADAPattern(){
				
					return "";
				
				}
				public String HORA_LLEGADAOriginalDbColumnName(){
				
					return "HORA_LLEGADA";
				
				}

				
			    public String CONSULTORIO;

				public String getCONSULTORIO () {
					return this.CONSULTORIO;
				}

				public Boolean CONSULTORIOIsNullable(){
				    return true;
				}
				public Boolean CONSULTORIOIsKey(){
				    return false;
				}
				public Integer CONSULTORIOLength(){
				    return 50;
				}
				public Integer CONSULTORIOPrecision(){
				    return 0;
				}
				public String CONSULTORIODefault(){
				
					return null;
				
				}
				public String CONSULTORIOComment(){
				
				    return "";
				
				}
				public String CONSULTORIOPattern(){
				
					return "";
				
				}
				public String CONSULTORIOOriginalDbColumnName(){
				
					return "CONSULTORIO";
				
				}

				
			    public String CIE10;

				public String getCIE10 () {
					return this.CIE10;
				}

				public Boolean CIE10IsNullable(){
				    return true;
				}
				public Boolean CIE10IsKey(){
				    return false;
				}
				public Integer CIE10Length(){
				    return 10;
				}
				public Integer CIE10Precision(){
				    return 0;
				}
				public String CIE10Default(){
				
					return null;
				
				}
				public String CIE10Comment(){
				
				    return "";
				
				}
				public String CIE10Pattern(){
				
					return "";
				
				}
				public String CIE10OriginalDbColumnName(){
				
					return "CIE10";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal ESM_ATENCION_ID;

				public BigDecimal getESM_ATENCION_ID () {
					return this.ESM_ATENCION_ID;
				}

				public Boolean ESM_ATENCION_IDIsNullable(){
				    return true;
				}
				public Boolean ESM_ATENCION_IDIsKey(){
				    return false;
				}
				public Integer ESM_ATENCION_IDLength(){
				    return 0;
				}
				public Integer ESM_ATENCION_IDPrecision(){
				    return null;
				}
				public String ESM_ATENCION_IDDefault(){
				
					return null;
				
				}
				public String ESM_ATENCION_IDComment(){
				
				    return "";
				
				}
				public String ESM_ATENCION_IDPattern(){
				
					return "";
				
				}
				public String ESM_ATENCION_IDOriginalDbColumnName(){
				
					return "ESM_ATENCION_ID";
				
				}

				
			    public java.util.Date FECHA_LLEGADA;

				public java.util.Date getFECHA_LLEGADA () {
					return this.FECHA_LLEGADA;
				}

				public Boolean FECHA_LLEGADAIsNullable(){
				    return true;
				}
				public Boolean FECHA_LLEGADAIsKey(){
				    return false;
				}
				public Integer FECHA_LLEGADALength(){
				    return 11;
				}
				public Integer FECHA_LLEGADAPrecision(){
				    return 6;
				}
				public String FECHA_LLEGADADefault(){
				
					return null;
				
				}
				public String FECHA_LLEGADAComment(){
				
				    return "";
				
				}
				public String FECHA_LLEGADAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_LLEGADAOriginalDbColumnName(){
				
					return "FECHA_LLEGADA";
				
				}

				
			    public java.util.Date FECHAI_CITA;

				public java.util.Date getFECHAI_CITA () {
					return this.FECHAI_CITA;
				}

				public Boolean FECHAI_CITAIsNullable(){
				    return true;
				}
				public Boolean FECHAI_CITAIsKey(){
				    return false;
				}
				public Integer FECHAI_CITALength(){
				    return 11;
				}
				public Integer FECHAI_CITAPrecision(){
				    return 6;
				}
				public String FECHAI_CITADefault(){
				
					return null;
				
				}
				public String FECHAI_CITAComment(){
				
				    return "";
				
				}
				public String FECHAI_CITAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAI_CITAOriginalDbColumnName(){
				
					return "FECHAI_CITA";
				
				}

				
			    public java.util.Date FECHAF_CITA;

				public java.util.Date getFECHAF_CITA () {
					return this.FECHAF_CITA;
				}

				public Boolean FECHAF_CITAIsNullable(){
				    return true;
				}
				public Boolean FECHAF_CITAIsKey(){
				    return false;
				}
				public Integer FECHAF_CITALength(){
				    return 11;
				}
				public Integer FECHAF_CITAPrecision(){
				    return 6;
				}
				public String FECHAF_CITADefault(){
				
					return null;
				
				}
				public String FECHAF_CITAComment(){
				
				    return "";
				
				}
				public String FECHAF_CITAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAF_CITAOriginalDbColumnName(){
				
					return "FECHAF_CITA";
				
				}

				
			    public String ESM_ATESIGLA;

				public String getESM_ATESIGLA () {
					return this.ESM_ATESIGLA;
				}

				public Boolean ESM_ATESIGLAIsNullable(){
				    return true;
				}
				public Boolean ESM_ATESIGLAIsKey(){
				    return false;
				}
				public Integer ESM_ATESIGLALength(){
				    return 20;
				}
				public Integer ESM_ATESIGLAPrecision(){
				    return 0;
				}
				public String ESM_ATESIGLADefault(){
				
					return null;
				
				}
				public String ESM_ATESIGLAComment(){
				
				    return "";
				
				}
				public String ESM_ATESIGLAPattern(){
				
					return "";
				
				}
				public String ESM_ATESIGLAOriginalDbColumnName(){
				
					return "ESM_ATESIGLA";
				
				}

				
			    public String MUNICIPIO_ESM;

				public String getMUNICIPIO_ESM () {
					return this.MUNICIPIO_ESM;
				}

				public Boolean MUNICIPIO_ESMIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIO_ESMIsKey(){
				    return false;
				}
				public Integer MUNICIPIO_ESMLength(){
				    return 100;
				}
				public Integer MUNICIPIO_ESMPrecision(){
				    return 0;
				}
				public String MUNICIPIO_ESMDefault(){
				
					return null;
				
				}
				public String MUNICIPIO_ESMComment(){
				
				    return "Municipio del ESM de atencion";
				
				}
				public String MUNICIPIO_ESMPattern(){
				
					return "";
				
				}
				public String MUNICIPIO_ESMOriginalDbColumnName(){
				
					return "MUNICIPIO_ESM";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 1;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return 0;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "1";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public java.util.Date FDISPONIBLE;

				public java.util.Date getFDISPONIBLE () {
					return this.FDISPONIBLE;
				}

				public Boolean FDISPONIBLEIsNullable(){
				    return true;
				}
				public Boolean FDISPONIBLEIsKey(){
				    return false;
				}
				public Integer FDISPONIBLELength(){
				    return 7;
				}
				public Integer FDISPONIBLEPrecision(){
				    return 0;
				}
				public String FDISPONIBLEDefault(){
				
					return null;
				
				}
				public String FDISPONIBLEComment(){
				
				    return "Fecha de la primer cita disponible";
				
				}
				public String FDISPONIBLEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FDISPONIBLEOriginalDbColumnName(){
				
					return "FDISPONIBLE";
				
				}

				
			    public BigDecimal TIEMPO_SCITA;

				public BigDecimal getTIEMPO_SCITA () {
					return this.TIEMPO_SCITA;
				}

				public Boolean TIEMPO_SCITAIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_SCITAIsKey(){
				    return false;
				}
				public Integer TIEMPO_SCITALength(){
				    return 0;
				}
				public Integer TIEMPO_SCITAPrecision(){
				    return null;
				}
				public String TIEMPO_SCITADefault(){
				
					return null;
				
				}
				public String TIEMPO_SCITAComment(){
				
				    return "";
				
				}
				public String TIEMPO_SCITAPattern(){
				
					return "";
				
				}
				public String TIEMPO_SCITAOriginalDbColumnName(){
				
					return "TIEMPO_SCITA";
				
				}

				
			    public String TIPO_SCITA;

				public String getTIPO_SCITA () {
					return this.TIPO_SCITA;
				}

				public Boolean TIPO_SCITAIsNullable(){
				    return true;
				}
				public Boolean TIPO_SCITAIsKey(){
				    return false;
				}
				public Integer TIPO_SCITALength(){
				    return 1024;
				}
				public Integer TIPO_SCITAPrecision(){
				    return 0;
				}
				public String TIPO_SCITADefault(){
				
					return null;
				
				}
				public String TIPO_SCITAComment(){
				
				    return "";
				
				}
				public String TIPO_SCITAPattern(){
				
					return "";
				
				}
				public String TIPO_SCITAOriginalDbColumnName(){
				
					return "TIPO_SCITA";
				
				}

				
			    public String TIPO_ASIGNACION;

				public String getTIPO_ASIGNACION () {
					return this.TIPO_ASIGNACION;
				}

				public Boolean TIPO_ASIGNACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_ASIGNACIONIsKey(){
				    return false;
				}
				public Integer TIPO_ASIGNACIONLength(){
				    return 1024;
				}
				public Integer TIPO_ASIGNACIONPrecision(){
				    return 0;
				}
				public String TIPO_ASIGNACIONDefault(){
				
					return null;
				
				}
				public String TIPO_ASIGNACIONComment(){
				
				    return "";
				
				}
				public String TIPO_ASIGNACIONPattern(){
				
					return "";
				
				}
				public String TIPO_ASIGNACIONOriginalDbColumnName(){
				
					return "TIPO_ASIGNACION";
				
				}

				
			    public String USUARIO_SCITA;

				public String getUSUARIO_SCITA () {
					return this.USUARIO_SCITA;
				}

				public Boolean USUARIO_SCITAIsNullable(){
				    return true;
				}
				public Boolean USUARIO_SCITAIsKey(){
				    return false;
				}
				public Integer USUARIO_SCITALength(){
				    return 50;
				}
				public Integer USUARIO_SCITAPrecision(){
				    return 0;
				}
				public String USUARIO_SCITADefault(){
				
					return null;
				
				}
				public String USUARIO_SCITAComment(){
				
				    return "";
				
				}
				public String USUARIO_SCITAPattern(){
				
					return "";
				
				}
				public String USUARIO_SCITAOriginalDbColumnName(){
				
					return "USUARIO_SCITA";
				
				}

				
			    public String ESTADO_SCITA;

				public String getESTADO_SCITA () {
					return this.ESTADO_SCITA;
				}

				public Boolean ESTADO_SCITAIsNullable(){
				    return true;
				}
				public Boolean ESTADO_SCITAIsKey(){
				    return false;
				}
				public Integer ESTADO_SCITALength(){
				    return 10;
				}
				public Integer ESTADO_SCITAPrecision(){
				    return 0;
				}
				public String ESTADO_SCITADefault(){
				
					return null;
				
				}
				public String ESTADO_SCITAComment(){
				
				    return "";
				
				}
				public String ESTADO_SCITAPattern(){
				
					return "";
				
				}
				public String ESTADO_SCITAOriginalDbColumnName(){
				
					return "ESTADO_SCITA";
				
				}

				
			    public String PRIORITARIA;

				public String getPRIORITARIA () {
					return this.PRIORITARIA;
				}

				public Boolean PRIORITARIAIsNullable(){
				    return true;
				}
				public Boolean PRIORITARIAIsKey(){
				    return false;
				}
				public Integer PRIORITARIALength(){
				    return 2;
				}
				public Integer PRIORITARIAPrecision(){
				    return 0;
				}
				public String PRIORITARIADefault(){
				
					return null;
				
				}
				public String PRIORITARIAComment(){
				
				    return "";
				
				}
				public String PRIORITARIAPattern(){
				
					return "";
				
				}
				public String PRIORITARIAOriginalDbColumnName(){
				
					return "PRIORITARIA";
				
				}

				
			    public BigDecimal ADMISIONES_ID;

				public BigDecimal getADMISIONES_ID () {
					return this.ADMISIONES_ID;
				}

				public Boolean ADMISIONES_IDIsNullable(){
				    return true;
				}
				public Boolean ADMISIONES_IDIsKey(){
				    return false;
				}
				public Integer ADMISIONES_IDLength(){
				    return null;
				}
				public Integer ADMISIONES_IDPrecision(){
				    return null;
				}
				public String ADMISIONES_IDDefault(){
				
					return null;
				
				}
				public String ADMISIONES_IDComment(){
				
				    return "";
				
				}
				public String ADMISIONES_IDPattern(){
				
					return "";
				
				}
				public String ADMISIONES_IDOriginalDbColumnName(){
				
					return "ADMISIONES_ID";
				
				}

				
			    public BigDecimal TCITA;

				public BigDecimal getTCITA () {
					return this.TCITA;
				}

				public Boolean TCITAIsNullable(){
				    return true;
				}
				public Boolean TCITAIsKey(){
				    return false;
				}
				public Integer TCITALength(){
				    return null;
				}
				public Integer TCITAPrecision(){
				    return null;
				}
				public String TCITADefault(){
				
					return null;
				
				}
				public String TCITAComment(){
				
				    return "";
				
				}
				public String TCITAPattern(){
				
					return "";
				
				}
				public String TCITAOriginalDbColumnName(){
				
					return "TCITA";
				
				}

				
			    public java.util.Date FECHA_CANCELACION;

				public java.util.Date getFECHA_CANCELACION () {
					return this.FECHA_CANCELACION;
				}

				public Boolean FECHA_CANCELACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_CANCELACIONIsKey(){
				    return false;
				}
				public Integer FECHA_CANCELACIONLength(){
				    return null;
				}
				public Integer FECHA_CANCELACIONPrecision(){
				    return null;
				}
				public String FECHA_CANCELACIONDefault(){
				
					return null;
				
				}
				public String FECHA_CANCELACIONComment(){
				
				    return "";
				
				}
				public String FECHA_CANCELACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_CANCELACIONOriginalDbColumnName(){
				
					return "FECHA_CANCELACION";
				
				}

				
			    public String OBSERVACIONES_CITA;

				public String getOBSERVACIONES_CITA () {
					return this.OBSERVACIONES_CITA;
				}

				public Boolean OBSERVACIONES_CITAIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONES_CITAIsKey(){
				    return false;
				}
				public Integer OBSERVACIONES_CITALength(){
				    return 4000;
				}
				public Integer OBSERVACIONES_CITAPrecision(){
				    return 0;
				}
				public String OBSERVACIONES_CITADefault(){
				
					return null;
				
				}
				public String OBSERVACIONES_CITAComment(){
				
				    return "";
				
				}
				public String OBSERVACIONES_CITAPattern(){
				
					return "";
				
				}
				public String OBSERVACIONES_CITAOriginalDbColumnName(){
				
					return "OBSERVACIONES_CITA";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 31;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return true;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return null;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ins_citaStruct other = (ins_citaStruct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ins_citaStruct other) {

		other.ID = this.ID;
	            other.TIEMPO_CITA = this.TIEMPO_CITA;
	            other.SOLICITUDES_ID = this.SOLICITUDES_ID;
	            other.PROFESIONALES_ID = this.PROFESIONALES_ID;
	            other.PERSONAS_ID = this.PERSONAS_ID;
	            other.FECHA_CREACION = this.FECHA_CREACION;
	            other.FCREACION_SCITA = this.FCREACION_SCITA;
	            other.ESTADO_CITA = this.ESTADO_CITA;
	            other.TIPO_CITA = this.TIPO_CITA;
	            other.MOTIVO_CONSULTA = this.MOTIVO_CONSULTA;
	            other.DIAGNOSTICO = this.DIAGNOSTICO;
	            other.TIPO_CAUSAL = this.TIPO_CAUSAL;
	            other.JUSTIFICACION = this.JUSTIFICACION;
	            other.USUARIO_CITA = this.USUARIO_CITA;
	            other.ESM_ATENCION = this.ESM_ATENCION;
	            other.FUERZA_ESM = this.FUERZA_ESM;
	            other.CIUDAD_ESM = this.CIUDAD_ESM;
	            other.TIEMPO_ESPERA = this.TIEMPO_ESPERA;
	            other.TIEMPO_ATENCION = this.TIEMPO_ATENCION;
	            other.TIEMPO_MUERTO = this.TIEMPO_MUERTO;
	            other.HORA_FATENCION = this.HORA_FATENCION;
	            other.TIEMPO_ASIGNACION = this.TIEMPO_ASIGNACION;
	            other.HORA_ICITA = this.HORA_ICITA;
	            other.HORA_IATENCION = this.HORA_IATENCION;
	            other.HORA_FCITA = this.HORA_FCITA;
	            other.HORA_LLEGADA = this.HORA_LLEGADA;
	            other.CONSULTORIO = this.CONSULTORIO;
	            other.CIE10 = this.CIE10;
	            other.ESPECIALIDADES_ID = this.ESPECIALIDADES_ID;
	            other.ESM_ATENCION_ID = this.ESM_ATENCION_ID;
	            other.FECHA_LLEGADA = this.FECHA_LLEGADA;
	            other.FECHAI_CITA = this.FECHAI_CITA;
	            other.FECHAF_CITA = this.FECHAF_CITA;
	            other.ESM_ATESIGLA = this.ESM_ATESIGLA;
	            other.MUNICIPIO_ESM = this.MUNICIPIO_ESM;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            other.FDISPONIBLE = this.FDISPONIBLE;
	            other.TIEMPO_SCITA = this.TIEMPO_SCITA;
	            other.TIPO_SCITA = this.TIPO_SCITA;
	            other.TIPO_ASIGNACION = this.TIPO_ASIGNACION;
	            other.USUARIO_SCITA = this.USUARIO_SCITA;
	            other.ESTADO_SCITA = this.ESTADO_SCITA;
	            other.PRIORITARIA = this.PRIORITARIA;
	            other.ADMISIONES_ID = this.ADMISIONES_ID;
	            other.TCITA = this.TCITA;
	            other.FECHA_CANCELACION = this.FECHA_CANCELACION;
	            other.OBSERVACIONES_CITA = this.OBSERVACIONES_CITA;
	            other.TIPO_USUARIO = this.TIPO_USUARIO;
	            other.CUPS_ID = this.CUPS_ID;
	            
	}

	public void copyKeysDataTo(ins_citaStruct other) {

		other.ID = this.ID;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.TIEMPO_CITA = (BigDecimal) dis.readObject();
					
						this.SOLICITUDES_ID = (BigDecimal) dis.readObject();
					
						this.PROFESIONALES_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_CREACION = readDate(dis);
					
					this.FCREACION_SCITA = readDate(dis);
					
					this.ESTADO_CITA = readString(dis);
					
					this.TIPO_CITA = readString(dis);
					
					this.MOTIVO_CONSULTA = readString(dis);
					
					this.DIAGNOSTICO = readString(dis);
					
					this.TIPO_CAUSAL = readString(dis);
					
					this.JUSTIFICACION = readString(dis);
					
					this.USUARIO_CITA = readString(dis);
					
					this.ESM_ATENCION = readString(dis);
					
					this.FUERZA_ESM = readString(dis);
					
					this.CIUDAD_ESM = readString(dis);
					
						this.TIEMPO_ESPERA = (BigDecimal) dis.readObject();
					
						this.TIEMPO_ATENCION = (BigDecimal) dis.readObject();
					
						this.TIEMPO_MUERTO = (BigDecimal) dis.readObject();
					
					this.HORA_FATENCION = readString(dis);
					
						this.TIEMPO_ASIGNACION = (BigDecimal) dis.readObject();
					
					this.HORA_ICITA = readString(dis);
					
					this.HORA_IATENCION = readString(dis);
					
					this.HORA_FCITA = readString(dis);
					
					this.HORA_LLEGADA = readString(dis);
					
					this.CONSULTORIO = readString(dis);
					
					this.CIE10 = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.ESM_ATENCION_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_LLEGADA = readDate(dis);
					
					this.FECHAI_CITA = readDate(dis);
					
					this.FECHAF_CITA = readDate(dis);
					
					this.ESM_ATESIGLA = readString(dis);
					
					this.MUNICIPIO_ESM = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.FDISPONIBLE = readDate(dis);
					
						this.TIEMPO_SCITA = (BigDecimal) dis.readObject();
					
					this.TIPO_SCITA = readString(dis);
					
					this.TIPO_ASIGNACION = readString(dis);
					
					this.USUARIO_SCITA = readString(dis);
					
					this.ESTADO_SCITA = readString(dis);
					
					this.PRIORITARIA = readString(dis);
					
						this.ADMISIONES_ID = (BigDecimal) dis.readObject();
					
						this.TCITA = (BigDecimal) dis.readObject();
					
					this.FECHA_CANCELACION = readDate(dis);
					
					this.OBSERVACIONES_CITA = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.TIEMPO_CITA = (BigDecimal) dis.readObject();
					
						this.SOLICITUDES_ID = (BigDecimal) dis.readObject();
					
						this.PROFESIONALES_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_CREACION = readDate(dis);
					
					this.FCREACION_SCITA = readDate(dis);
					
					this.ESTADO_CITA = readString(dis);
					
					this.TIPO_CITA = readString(dis);
					
					this.MOTIVO_CONSULTA = readString(dis);
					
					this.DIAGNOSTICO = readString(dis);
					
					this.TIPO_CAUSAL = readString(dis);
					
					this.JUSTIFICACION = readString(dis);
					
					this.USUARIO_CITA = readString(dis);
					
					this.ESM_ATENCION = readString(dis);
					
					this.FUERZA_ESM = readString(dis);
					
					this.CIUDAD_ESM = readString(dis);
					
						this.TIEMPO_ESPERA = (BigDecimal) dis.readObject();
					
						this.TIEMPO_ATENCION = (BigDecimal) dis.readObject();
					
						this.TIEMPO_MUERTO = (BigDecimal) dis.readObject();
					
					this.HORA_FATENCION = readString(dis);
					
						this.TIEMPO_ASIGNACION = (BigDecimal) dis.readObject();
					
					this.HORA_ICITA = readString(dis);
					
					this.HORA_IATENCION = readString(dis);
					
					this.HORA_FCITA = readString(dis);
					
					this.HORA_LLEGADA = readString(dis);
					
					this.CONSULTORIO = readString(dis);
					
					this.CIE10 = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.ESM_ATENCION_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_LLEGADA = readDate(dis);
					
					this.FECHAI_CITA = readDate(dis);
					
					this.FECHAF_CITA = readDate(dis);
					
					this.ESM_ATESIGLA = readString(dis);
					
					this.MUNICIPIO_ESM = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.FDISPONIBLE = readDate(dis);
					
						this.TIEMPO_SCITA = (BigDecimal) dis.readObject();
					
					this.TIPO_SCITA = readString(dis);
					
					this.TIPO_ASIGNACION = readString(dis);
					
					this.USUARIO_SCITA = readString(dis);
					
					this.ESTADO_SCITA = readString(dis);
					
					this.PRIORITARIA = readString(dis);
					
						this.ADMISIONES_ID = (BigDecimal) dis.readObject();
					
						this.TCITA = (BigDecimal) dis.readObject();
					
					this.FECHA_CANCELACION = readDate(dis);
					
					this.OBSERVACIONES_CITA = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPO_CITA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SOLICITUDES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFESIONALES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_CREACION,dos);
					
					// java.util.Date
				
						writeDate(this.FCREACION_SCITA,dos);
					
					// String
				
						writeString(this.ESTADO_CITA,dos);
					
					// String
				
						writeString(this.TIPO_CITA,dos);
					
					// String
				
						writeString(this.MOTIVO_CONSULTA,dos);
					
					// String
				
						writeString(this.DIAGNOSTICO,dos);
					
					// String
				
						writeString(this.TIPO_CAUSAL,dos);
					
					// String
				
						writeString(this.JUSTIFICACION,dos);
					
					// String
				
						writeString(this.USUARIO_CITA,dos);
					
					// String
				
						writeString(this.ESM_ATENCION,dos);
					
					// String
				
						writeString(this.FUERZA_ESM,dos);
					
					// String
				
						writeString(this.CIUDAD_ESM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPO_ESPERA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPO_ATENCION);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPO_MUERTO);
					
					// String
				
						writeString(this.HORA_FATENCION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPO_ASIGNACION);
					
					// String
				
						writeString(this.HORA_ICITA,dos);
					
					// String
				
						writeString(this.HORA_IATENCION,dos);
					
					// String
				
						writeString(this.HORA_FCITA,dos);
					
					// String
				
						writeString(this.HORA_LLEGADA,dos);
					
					// String
				
						writeString(this.CONSULTORIO,dos);
					
					// String
				
						writeString(this.CIE10,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESM_ATENCION_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_LLEGADA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAI_CITA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAF_CITA,dos);
					
					// String
				
						writeString(this.ESM_ATESIGLA,dos);
					
					// String
				
						writeString(this.MUNICIPIO_ESM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// java.util.Date
				
						writeDate(this.FDISPONIBLE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPO_SCITA);
					
					// String
				
						writeString(this.TIPO_SCITA,dos);
					
					// String
				
						writeString(this.TIPO_ASIGNACION,dos);
					
					// String
				
						writeString(this.USUARIO_SCITA,dos);
					
					// String
				
						writeString(this.ESTADO_SCITA,dos);
					
					// String
				
						writeString(this.PRIORITARIA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADMISIONES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TCITA);
					
					// java.util.Date
				
						writeDate(this.FECHA_CANCELACION,dos);
					
					// String
				
						writeString(this.OBSERVACIONES_CITA,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPO_CITA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SOLICITUDES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFESIONALES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_CREACION,dos);
					
					// java.util.Date
				
						writeDate(this.FCREACION_SCITA,dos);
					
					// String
				
						writeString(this.ESTADO_CITA,dos);
					
					// String
				
						writeString(this.TIPO_CITA,dos);
					
					// String
				
						writeString(this.MOTIVO_CONSULTA,dos);
					
					// String
				
						writeString(this.DIAGNOSTICO,dos);
					
					// String
				
						writeString(this.TIPO_CAUSAL,dos);
					
					// String
				
						writeString(this.JUSTIFICACION,dos);
					
					// String
				
						writeString(this.USUARIO_CITA,dos);
					
					// String
				
						writeString(this.ESM_ATENCION,dos);
					
					// String
				
						writeString(this.FUERZA_ESM,dos);
					
					// String
				
						writeString(this.CIUDAD_ESM,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPO_ESPERA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPO_ATENCION);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPO_MUERTO);
					
					// String
				
						writeString(this.HORA_FATENCION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPO_ASIGNACION);
					
					// String
				
						writeString(this.HORA_ICITA,dos);
					
					// String
				
						writeString(this.HORA_IATENCION,dos);
					
					// String
				
						writeString(this.HORA_FCITA,dos);
					
					// String
				
						writeString(this.HORA_LLEGADA,dos);
					
					// String
				
						writeString(this.CONSULTORIO,dos);
					
					// String
				
						writeString(this.CIE10,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESM_ATENCION_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_LLEGADA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAI_CITA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAF_CITA,dos);
					
					// String
				
						writeString(this.ESM_ATESIGLA,dos);
					
					// String
				
						writeString(this.MUNICIPIO_ESM,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// java.util.Date
				
						writeDate(this.FDISPONIBLE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPO_SCITA);
					
					// String
				
						writeString(this.TIPO_SCITA,dos);
					
					// String
				
						writeString(this.TIPO_ASIGNACION,dos);
					
					// String
				
						writeString(this.USUARIO_SCITA,dos);
					
					// String
				
						writeString(this.ESTADO_SCITA,dos);
					
					// String
				
						writeString(this.PRIORITARIA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ADMISIONES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TCITA);
					
					// java.util.Date
				
						writeDate(this.FECHA_CANCELACION,dos);
					
					// String
				
						writeString(this.OBSERVACIONES_CITA,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",TIEMPO_CITA="+String.valueOf(TIEMPO_CITA));
		sb.append(",SOLICITUDES_ID="+String.valueOf(SOLICITUDES_ID));
		sb.append(",PROFESIONALES_ID="+String.valueOf(PROFESIONALES_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",FECHA_CREACION="+String.valueOf(FECHA_CREACION));
		sb.append(",FCREACION_SCITA="+String.valueOf(FCREACION_SCITA));
		sb.append(",ESTADO_CITA="+ESTADO_CITA);
		sb.append(",TIPO_CITA="+TIPO_CITA);
		sb.append(",MOTIVO_CONSULTA="+MOTIVO_CONSULTA);
		sb.append(",DIAGNOSTICO="+DIAGNOSTICO);
		sb.append(",TIPO_CAUSAL="+TIPO_CAUSAL);
		sb.append(",JUSTIFICACION="+JUSTIFICACION);
		sb.append(",USUARIO_CITA="+USUARIO_CITA);
		sb.append(",ESM_ATENCION="+ESM_ATENCION);
		sb.append(",FUERZA_ESM="+FUERZA_ESM);
		sb.append(",CIUDAD_ESM="+CIUDAD_ESM);
		sb.append(",TIEMPO_ESPERA="+String.valueOf(TIEMPO_ESPERA));
		sb.append(",TIEMPO_ATENCION="+String.valueOf(TIEMPO_ATENCION));
		sb.append(",TIEMPO_MUERTO="+String.valueOf(TIEMPO_MUERTO));
		sb.append(",HORA_FATENCION="+HORA_FATENCION);
		sb.append(",TIEMPO_ASIGNACION="+String.valueOf(TIEMPO_ASIGNACION));
		sb.append(",HORA_ICITA="+HORA_ICITA);
		sb.append(",HORA_IATENCION="+HORA_IATENCION);
		sb.append(",HORA_FCITA="+HORA_FCITA);
		sb.append(",HORA_LLEGADA="+HORA_LLEGADA);
		sb.append(",CONSULTORIO="+CONSULTORIO);
		sb.append(",CIE10="+CIE10);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",ESM_ATENCION_ID="+String.valueOf(ESM_ATENCION_ID));
		sb.append(",FECHA_LLEGADA="+String.valueOf(FECHA_LLEGADA));
		sb.append(",FECHAI_CITA="+String.valueOf(FECHAI_CITA));
		sb.append(",FECHAF_CITA="+String.valueOf(FECHAF_CITA));
		sb.append(",ESM_ATESIGLA="+ESM_ATESIGLA);
		sb.append(",MUNICIPIO_ESM="+MUNICIPIO_ESM);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",FDISPONIBLE="+String.valueOf(FDISPONIBLE));
		sb.append(",TIEMPO_SCITA="+String.valueOf(TIEMPO_SCITA));
		sb.append(",TIPO_SCITA="+TIPO_SCITA);
		sb.append(",TIPO_ASIGNACION="+TIPO_ASIGNACION);
		sb.append(",USUARIO_SCITA="+USUARIO_SCITA);
		sb.append(",ESTADO_SCITA="+ESTADO_SCITA);
		sb.append(",PRIORITARIA="+PRIORITARIA);
		sb.append(",ADMISIONES_ID="+String.valueOf(ADMISIONES_ID));
		sb.append(",TCITA="+String.valueOf(TCITA));
		sb.append(",FECHA_CANCELACION="+String.valueOf(FECHA_CANCELACION));
		sb.append(",OBSERVACIONES_CITA="+OBSERVACIONES_CITA);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ins_citaStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out_3Struct implements routines.system.IPersistableRow<out_3Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];

	
			    public BigDecimal SCITAS_ID;

				public BigDecimal getSCITAS_ID () {
					return this.SCITAS_ID;
				}

				public Boolean SCITAS_IDIsNullable(){
				    return false;
				}
				public Boolean SCITAS_IDIsKey(){
				    return false;
				}
				public Integer SCITAS_IDLength(){
				    return 0;
				}
				public Integer SCITAS_IDPrecision(){
				    return null;
				}
				public String SCITAS_IDDefault(){
				
					return "";
				
				}
				public String SCITAS_IDComment(){
				
				    return "";
				
				}
				public String SCITAS_IDPattern(){
				
					return "";
				
				}
				public String SCITAS_IDOriginalDbColumnName(){
				
					return "SCITAS_ID";
				
				}

				
			    public BigDecimal TIEMPO_SCITA;

				public BigDecimal getTIEMPO_SCITA () {
					return this.TIEMPO_SCITA;
				}

				public Boolean TIEMPO_SCITAIsNullable(){
				    return false;
				}
				public Boolean TIEMPO_SCITAIsKey(){
				    return false;
				}
				public Integer TIEMPO_SCITALength(){
				    return 0;
				}
				public Integer TIEMPO_SCITAPrecision(){
				    return null;
				}
				public String TIEMPO_SCITADefault(){
				
					return "";
				
				}
				public String TIEMPO_SCITAComment(){
				
				    return "";
				
				}
				public String TIEMPO_SCITAPattern(){
				
					return "";
				
				}
				public String TIEMPO_SCITAOriginalDbColumnName(){
				
					return "TIEMPO_SCITA";
				
				}

				
			    public BigDecimal TSCITAS_ID;

				public BigDecimal getTSCITAS_ID () {
					return this.TSCITAS_ID;
				}

				public Boolean TSCITAS_IDIsNullable(){
				    return true;
				}
				public Boolean TSCITAS_IDIsKey(){
				    return false;
				}
				public Integer TSCITAS_IDLength(){
				    return 0;
				}
				public Integer TSCITAS_IDPrecision(){
				    return null;
				}
				public String TSCITAS_IDDefault(){
				
					return "";
				
				}
				public String TSCITAS_IDComment(){
				
				    return "";
				
				}
				public String TSCITAS_IDPattern(){
				
					return "";
				
				}
				public String TSCITAS_IDOriginalDbColumnName(){
				
					return "TSCITAS_ID";
				
				}

				
			    public String PRIORITARIA;

				public String getPRIORITARIA () {
					return this.PRIORITARIA;
				}

				public Boolean PRIORITARIAIsNullable(){
				    return false;
				}
				public Boolean PRIORITARIAIsKey(){
				    return false;
				}
				public Integer PRIORITARIALength(){
				    return 2;
				}
				public Integer PRIORITARIAPrecision(){
				    return 0;
				}
				public String PRIORITARIADefault(){
				
					return null;
				
				}
				public String PRIORITARIAComment(){
				
				    return "";
				
				}
				public String PRIORITARIAPattern(){
				
					return "";
				
				}
				public String PRIORITARIAOriginalDbColumnName(){
				
					return "PRIORITARIA";
				
				}

				
			    public String ESTADO_SCITA;

				public String getESTADO_SCITA () {
					return this.ESTADO_SCITA;
				}

				public Boolean ESTADO_SCITAIsNullable(){
				    return false;
				}
				public Boolean ESTADO_SCITAIsKey(){
				    return false;
				}
				public Integer ESTADO_SCITALength(){
				    return 10;
				}
				public Integer ESTADO_SCITAPrecision(){
				    return 0;
				}
				public String ESTADO_SCITADefault(){
				
					return null;
				
				}
				public String ESTADO_SCITAComment(){
				
				    return "";
				
				}
				public String ESTADO_SCITAPattern(){
				
					return "";
				
				}
				public String ESTADO_SCITAOriginalDbColumnName(){
				
					return "ESTADO_SCITA";
				
				}

				
			    public String USUARIO_SCITA;

				public String getUSUARIO_SCITA () {
					return this.USUARIO_SCITA;
				}

				public Boolean USUARIO_SCITAIsNullable(){
				    return false;
				}
				public Boolean USUARIO_SCITAIsKey(){
				    return false;
				}
				public Integer USUARIO_SCITALength(){
				    return 500;
				}
				public Integer USUARIO_SCITAPrecision(){
				    return 0;
				}
				public String USUARIO_SCITADefault(){
				
					return null;
				
				}
				public String USUARIO_SCITAComment(){
				
				    return "";
				
				}
				public String USUARIO_SCITAPattern(){
				
					return "";
				
				}
				public String USUARIO_SCITAOriginalDbColumnName(){
				
					return "USUARIO_SCITA";
				
				}

				
			    public BigDecimal TASIGNACIONES_ID;

				public BigDecimal getTASIGNACIONES_ID () {
					return this.TASIGNACIONES_ID;
				}

				public Boolean TASIGNACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean TASIGNACIONES_IDIsKey(){
				    return false;
				}
				public Integer TASIGNACIONES_IDLength(){
				    return 0;
				}
				public Integer TASIGNACIONES_IDPrecision(){
				    return null;
				}
				public String TASIGNACIONES_IDDefault(){
				
					return "";
				
				}
				public String TASIGNACIONES_IDComment(){
				
				    return "";
				
				}
				public String TASIGNACIONES_IDPattern(){
				
					return "";
				
				}
				public String TASIGNACIONES_IDOriginalDbColumnName(){
				
					return "TASIGNACIONES_ID";
				
				}

				
			    public BigDecimal CITAS_ID;

				public BigDecimal getCITAS_ID () {
					return this.CITAS_ID;
				}

				public Boolean CITAS_IDIsNullable(){
				    return false;
				}
				public Boolean CITAS_IDIsKey(){
				    return false;
				}
				public Integer CITAS_IDLength(){
				    return 0;
				}
				public Integer CITAS_IDPrecision(){
				    return null;
				}
				public String CITAS_IDDefault(){
				
					return "";
				
				}
				public String CITAS_IDComment(){
				
				    return "";
				
				}
				public String CITAS_IDPattern(){
				
					return "";
				
				}
				public String CITAS_IDOriginalDbColumnName(){
				
					return "CITAS_ID";
				
				}

				
			    public BigDecimal PROFESIONALES_ID;

				public BigDecimal getPROFESIONALES_ID () {
					return this.PROFESIONALES_ID;
				}

				public Boolean PROFESIONALES_IDIsNullable(){
				    return true;
				}
				public Boolean PROFESIONALES_IDIsKey(){
				    return false;
				}
				public Integer PROFESIONALES_IDLength(){
				    return 0;
				}
				public Integer PROFESIONALES_IDPrecision(){
				    return null;
				}
				public String PROFESIONALES_IDDefault(){
				
					return "";
				
				}
				public String PROFESIONALES_IDComment(){
				
				    return "";
				
				}
				public String PROFESIONALES_IDPattern(){
				
					return "";
				
				}
				public String PROFESIONALES_IDOriginalDbColumnName(){
				
					return "PROFESIONALES_ID";
				
				}

				
			    public BigDecimal PACIENTES_ID;

				public BigDecimal getPACIENTES_ID () {
					return this.PACIENTES_ID;
				}

				public Boolean PACIENTES_IDIsNullable(){
				    return false;
				}
				public Boolean PACIENTES_IDIsKey(){
				    return false;
				}
				public Integer PACIENTES_IDLength(){
				    return 0;
				}
				public Integer PACIENTES_IDPrecision(){
				    return null;
				}
				public String PACIENTES_IDDefault(){
				
					return "";
				
				}
				public String PACIENTES_IDComment(){
				
				    return "";
				
				}
				public String PACIENTES_IDPattern(){
				
					return "";
				
				}
				public String PACIENTES_IDOriginalDbColumnName(){
				
					return "PACIENTES_ID";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public java.util.Date FECHA_SCITA;

				public java.util.Date getFECHA_SCITA () {
					return this.FECHA_SCITA;
				}

				public Boolean FECHA_SCITAIsNullable(){
				    return false;
				}
				public Boolean FECHA_SCITAIsKey(){
				    return false;
				}
				public Integer FECHA_SCITALength(){
				    return 0;
				}
				public Integer FECHA_SCITAPrecision(){
				    return 0;
				}
				public String FECHA_SCITADefault(){
				
					return null;
				
				}
				public String FECHA_SCITAComment(){
				
				    return "";
				
				}
				public String FECHA_SCITAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_SCITAOriginalDbColumnName(){
				
					return "FECHA_SCITA";
				
				}

				
			    public String USUARIO_CITA;

				public String getUSUARIO_CITA () {
					return this.USUARIO_CITA;
				}

				public Boolean USUARIO_CITAIsNullable(){
				    return false;
				}
				public Boolean USUARIO_CITAIsKey(){
				    return false;
				}
				public Integer USUARIO_CITALength(){
				    return 500;
				}
				public Integer USUARIO_CITAPrecision(){
				    return 0;
				}
				public String USUARIO_CITADefault(){
				
					return null;
				
				}
				public String USUARIO_CITAComment(){
				
				    return "";
				
				}
				public String USUARIO_CITAPattern(){
				
					return "";
				
				}
				public String USUARIO_CITAOriginalDbColumnName(){
				
					return "USUARIO_CITA";
				
				}

				
			    public BigDecimal ESTADO_ID;

				public BigDecimal getESTADO_ID () {
					return this.ESTADO_ID;
				}

				public Boolean ESTADO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTADO_IDIsKey(){
				    return false;
				}
				public Integer ESTADO_IDLength(){
				    return 0;
				}
				public Integer ESTADO_IDPrecision(){
				    return null;
				}
				public String ESTADO_IDDefault(){
				
					return "";
				
				}
				public String ESTADO_IDComment(){
				
				    return "";
				
				}
				public String ESTADO_IDPattern(){
				
					return "";
				
				}
				public String ESTADO_IDOriginalDbColumnName(){
				
					return "ESTADO_ID";
				
				}

				
			    public BigDecimal TCITAS_ID;

				public BigDecimal getTCITAS_ID () {
					return this.TCITAS_ID;
				}

				public Boolean TCITAS_IDIsNullable(){
				    return true;
				}
				public Boolean TCITAS_IDIsKey(){
				    return false;
				}
				public Integer TCITAS_IDLength(){
				    return 0;
				}
				public Integer TCITAS_IDPrecision(){
				    return null;
				}
				public String TCITAS_IDDefault(){
				
					return "";
				
				}
				public String TCITAS_IDComment(){
				
				    return "";
				
				}
				public String TCITAS_IDPattern(){
				
					return "";
				
				}
				public String TCITAS_IDOriginalDbColumnName(){
				
					return "TCITAS_ID";
				
				}

				
			    public String CONSULTORIO;

				public String getCONSULTORIO () {
					return this.CONSULTORIO;
				}

				public Boolean CONSULTORIOIsNullable(){
				    return true;
				}
				public Boolean CONSULTORIOIsKey(){
				    return false;
				}
				public Integer CONSULTORIOLength(){
				    return 50;
				}
				public Integer CONSULTORIOPrecision(){
				    return 0;
				}
				public String CONSULTORIODefault(){
				
					return null;
				
				}
				public String CONSULTORIOComment(){
				
				    return "";
				
				}
				public String CONSULTORIOPattern(){
				
					return "";
				
				}
				public String CONSULTORIOOriginalDbColumnName(){
				
					return "CONSULTORIO";
				
				}

				
			    public String MOTIVOCONSULTA;

				public String getMOTIVOCONSULTA () {
					return this.MOTIVOCONSULTA;
				}

				public Boolean MOTIVOCONSULTAIsNullable(){
				    return true;
				}
				public Boolean MOTIVOCONSULTAIsKey(){
				    return false;
				}
				public Integer MOTIVOCONSULTALength(){
				    return 4000;
				}
				public Integer MOTIVOCONSULTAPrecision(){
				    return 0;
				}
				public String MOTIVOCONSULTADefault(){
				
					return null;
				
				}
				public String MOTIVOCONSULTAComment(){
				
				    return "";
				
				}
				public String MOTIVOCONSULTAPattern(){
				
					return "";
				
				}
				public String MOTIVOCONSULTAOriginalDbColumnName(){
				
					return "MOTIVOCONSULTA";
				
				}

				
			    public BigDecimal TCAUSALES_ID;

				public BigDecimal getTCAUSALES_ID () {
					return this.TCAUSALES_ID;
				}

				public Boolean TCAUSALES_IDIsNullable(){
				    return true;
				}
				public Boolean TCAUSALES_IDIsKey(){
				    return false;
				}
				public Integer TCAUSALES_IDLength(){
				    return 0;
				}
				public Integer TCAUSALES_IDPrecision(){
				    return null;
				}
				public String TCAUSALES_IDDefault(){
				
					return "";
				
				}
				public String TCAUSALES_IDComment(){
				
				    return "";
				
				}
				public String TCAUSALES_IDPattern(){
				
					return "";
				
				}
				public String TCAUSALES_IDOriginalDbColumnName(){
				
					return "TCAUSALES_ID";
				
				}

				
			    public String JUSTIFICACION;

				public String getJUSTIFICACION () {
					return this.JUSTIFICACION;
				}

				public Boolean JUSTIFICACIONIsNullable(){
				    return true;
				}
				public Boolean JUSTIFICACIONIsKey(){
				    return false;
				}
				public Integer JUSTIFICACIONLength(){
				    return 4000;
				}
				public Integer JUSTIFICACIONPrecision(){
				    return 0;
				}
				public String JUSTIFICACIONDefault(){
				
					return null;
				
				}
				public String JUSTIFICACIONComment(){
				
				    return "";
				
				}
				public String JUSTIFICACIONPattern(){
				
					return "";
				
				}
				public String JUSTIFICACIONOriginalDbColumnName(){
				
					return "JUSTIFICACION";
				
				}

				
			    public java.util.Date FECHA_CREACION;

				public java.util.Date getFECHA_CREACION () {
					return this.FECHA_CREACION;
				}

				public Boolean FECHA_CREACIONIsNullable(){
				    return false;
				}
				public Boolean FECHA_CREACIONIsKey(){
				    return false;
				}
				public Integer FECHA_CREACIONLength(){
				    return 0;
				}
				public Integer FECHA_CREACIONPrecision(){
				    return 0;
				}
				public String FECHA_CREACIONDefault(){
				
					return null;
				
				}
				public String FECHA_CREACIONComment(){
				
				    return "";
				
				}
				public String FECHA_CREACIONPattern(){
				
					return "";
				
				}
				public String FECHA_CREACIONOriginalDbColumnName(){
				
					return "FECHA_CREACION";
				
				}

				
			    public java.util.Date FDISPONIBLE;

				public java.util.Date getFDISPONIBLE () {
					return this.FDISPONIBLE;
				}

				public Boolean FDISPONIBLEIsNullable(){
				    return true;
				}
				public Boolean FDISPONIBLEIsKey(){
				    return false;
				}
				public Integer FDISPONIBLELength(){
				    return 0;
				}
				public Integer FDISPONIBLEPrecision(){
				    return 0;
				}
				public String FDISPONIBLEDefault(){
				
					return null;
				
				}
				public String FDISPONIBLEComment(){
				
				    return "";
				
				}
				public String FDISPONIBLEPattern(){
				
					return "";
				
				}
				public String FDISPONIBLEOriginalDbColumnName(){
				
					return "FDISPONIBLE";
				
				}

				
			    public java.util.Date FECHAI_CITA;

				public java.util.Date getFECHAI_CITA () {
					return this.FECHAI_CITA;
				}

				public Boolean FECHAI_CITAIsNullable(){
				    return true;
				}
				public Boolean FECHAI_CITAIsKey(){
				    return false;
				}
				public Integer FECHAI_CITALength(){
				    return 0;
				}
				public Integer FECHAI_CITAPrecision(){
				    return 0;
				}
				public String FECHAI_CITADefault(){
				
					return null;
				
				}
				public String FECHAI_CITAComment(){
				
				    return "";
				
				}
				public String FECHAI_CITAPattern(){
				
					return "";
				
				}
				public String FECHAI_CITAOriginalDbColumnName(){
				
					return "FECHAI_CITA";
				
				}

				
			    public java.util.Date FECHAF_CITA;

				public java.util.Date getFECHAF_CITA () {
					return this.FECHAF_CITA;
				}

				public Boolean FECHAF_CITAIsNullable(){
				    return true;
				}
				public Boolean FECHAF_CITAIsKey(){
				    return false;
				}
				public Integer FECHAF_CITALength(){
				    return 0;
				}
				public Integer FECHAF_CITAPrecision(){
				    return 0;
				}
				public String FECHAF_CITADefault(){
				
					return null;
				
				}
				public String FECHAF_CITAComment(){
				
				    return "";
				
				}
				public String FECHAF_CITAPattern(){
				
					return "";
				
				}
				public String FECHAF_CITAOriginalDbColumnName(){
				
					return "FECHAF_CITA";
				
				}

				
			    public java.util.Date FECHA_LLEGADA;

				public java.util.Date getFECHA_LLEGADA () {
					return this.FECHA_LLEGADA;
				}

				public Boolean FECHA_LLEGADAIsNullable(){
				    return true;
				}
				public Boolean FECHA_LLEGADAIsKey(){
				    return false;
				}
				public Integer FECHA_LLEGADALength(){
				    return 0;
				}
				public Integer FECHA_LLEGADAPrecision(){
				    return 0;
				}
				public String FECHA_LLEGADADefault(){
				
					return null;
				
				}
				public String FECHA_LLEGADAComment(){
				
				    return "";
				
				}
				public String FECHA_LLEGADAPattern(){
				
					return "";
				
				}
				public String FECHA_LLEGADAOriginalDbColumnName(){
				
					return "FECHA_LLEGADA";
				
				}

				
			    public java.util.Date FECHAI_ATENCION;

				public java.util.Date getFECHAI_ATENCION () {
					return this.FECHAI_ATENCION;
				}

				public Boolean FECHAI_ATENCIONIsNullable(){
				    return true;
				}
				public Boolean FECHAI_ATENCIONIsKey(){
				    return false;
				}
				public Integer FECHAI_ATENCIONLength(){
				    return 0;
				}
				public Integer FECHAI_ATENCIONPrecision(){
				    return 0;
				}
				public String FECHAI_ATENCIONDefault(){
				
					return null;
				
				}
				public String FECHAI_ATENCIONComment(){
				
				    return "";
				
				}
				public String FECHAI_ATENCIONPattern(){
				
					return "";
				
				}
				public String FECHAI_ATENCIONOriginalDbColumnName(){
				
					return "FECHAI_ATENCION";
				
				}

				
			    public java.util.Date FECHAF_ATENCION;

				public java.util.Date getFECHAF_ATENCION () {
					return this.FECHAF_ATENCION;
				}

				public Boolean FECHAF_ATENCIONIsNullable(){
				    return true;
				}
				public Boolean FECHAF_ATENCIONIsKey(){
				    return false;
				}
				public Integer FECHAF_ATENCIONLength(){
				    return 0;
				}
				public Integer FECHAF_ATENCIONPrecision(){
				    return 0;
				}
				public String FECHAF_ATENCIONDefault(){
				
					return null;
				
				}
				public String FECHAF_ATENCIONComment(){
				
				    return "";
				
				}
				public String FECHAF_ATENCIONPattern(){
				
					return "";
				
				}
				public String FECHAF_ATENCIONOriginalDbColumnName(){
				
					return "FECHAF_ATENCION";
				
				}

				
			    public BigDecimal ESM_ATENCION_ID;

				public BigDecimal getESM_ATENCION_ID () {
					return this.ESM_ATENCION_ID;
				}

				public Boolean ESM_ATENCION_IDIsNullable(){
				    return false;
				}
				public Boolean ESM_ATENCION_IDIsKey(){
				    return false;
				}
				public Integer ESM_ATENCION_IDLength(){
				    return 0;
				}
				public Integer ESM_ATENCION_IDPrecision(){
				    return null;
				}
				public String ESM_ATENCION_IDDefault(){
				
					return "";
				
				}
				public String ESM_ATENCION_IDComment(){
				
				    return "";
				
				}
				public String ESM_ATENCION_IDPattern(){
				
					return "";
				
				}
				public String ESM_ATENCION_IDOriginalDbColumnName(){
				
					return "ESM_ATENCION_ID";
				
				}

				
			    public String CIE10;

				public String getCIE10 () {
					return this.CIE10;
				}

				public Boolean CIE10IsNullable(){
				    return true;
				}
				public Boolean CIE10IsKey(){
				    return false;
				}
				public Integer CIE10Length(){
				    return 10;
				}
				public Integer CIE10Precision(){
				    return 0;
				}
				public String CIE10Default(){
				
					return null;
				
				}
				public String CIE10Comment(){
				
				    return "";
				
				}
				public String CIE10Pattern(){
				
					return "";
				
				}
				public String CIE10OriginalDbColumnName(){
				
					return "CIE10";
				
				}

				
			    public String DIAGNOSTICO;

				public String getDIAGNOSTICO () {
					return this.DIAGNOSTICO;
				}

				public Boolean DIAGNOSTICOIsNullable(){
				    return true;
				}
				public Boolean DIAGNOSTICOIsKey(){
				    return false;
				}
				public Integer DIAGNOSTICOLength(){
				    return 500;
				}
				public Integer DIAGNOSTICOPrecision(){
				    return 0;
				}
				public String DIAGNOSTICODefault(){
				
					return null;
				
				}
				public String DIAGNOSTICOComment(){
				
				    return "";
				
				}
				public String DIAGNOSTICOPattern(){
				
					return "";
				
				}
				public String DIAGNOSTICOOriginalDbColumnName(){
				
					return "DIAGNOSTICO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public BigDecimal ADMISIONES_ID;

				public BigDecimal getADMISIONES_ID () {
					return this.ADMISIONES_ID;
				}

				public Boolean ADMISIONES_IDIsNullable(){
				    return true;
				}
				public Boolean ADMISIONES_IDIsKey(){
				    return false;
				}
				public Integer ADMISIONES_IDLength(){
				    return null;
				}
				public Integer ADMISIONES_IDPrecision(){
				    return null;
				}
				public String ADMISIONES_IDDefault(){
				
					return null;
				
				}
				public String ADMISIONES_IDComment(){
				
				    return "";
				
				}
				public String ADMISIONES_IDPattern(){
				
					return "";
				
				}
				public String ADMISIONES_IDOriginalDbColumnName(){
				
					return "ADMISIONES_ID";
				
				}

				
			    public BigDecimal TCITA_CHECK;

				public BigDecimal getTCITA_CHECK () {
					return this.TCITA_CHECK;
				}

				public Boolean TCITA_CHECKIsNullable(){
				    return true;
				}
				public Boolean TCITA_CHECKIsKey(){
				    return false;
				}
				public Integer TCITA_CHECKLength(){
				    return null;
				}
				public Integer TCITA_CHECKPrecision(){
				    return null;
				}
				public String TCITA_CHECKDefault(){
				
					return null;
				
				}
				public String TCITA_CHECKComment(){
				
				    return "";
				
				}
				public String TCITA_CHECKPattern(){
				
					return "";
				
				}
				public String TCITA_CHECKOriginalDbColumnName(){
				
					return "TCITA_CHECK";
				
				}

				
			    public java.util.Date FECHA_CANCELACION;

				public java.util.Date getFECHA_CANCELACION () {
					return this.FECHA_CANCELACION;
				}

				public Boolean FECHA_CANCELACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_CANCELACIONIsKey(){
				    return false;
				}
				public Integer FECHA_CANCELACIONLength(){
				    return null;
				}
				public Integer FECHA_CANCELACIONPrecision(){
				    return null;
				}
				public String FECHA_CANCELACIONDefault(){
				
					return null;
				
				}
				public String FECHA_CANCELACIONComment(){
				
				    return "";
				
				}
				public String FECHA_CANCELACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_CANCELACIONOriginalDbColumnName(){
				
					return "FECHA_CANCELACION";
				
				}

				
			    public BigDecimal TIEMPOC_ID;

				public BigDecimal getTIEMPOC_ID () {
					return this.TIEMPOC_ID;
				}

				public Boolean TIEMPOC_IDIsNullable(){
				    return true;
				}
				public Boolean TIEMPOC_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOC_IDLength(){
				    return null;
				}
				public Integer TIEMPOC_IDPrecision(){
				    return null;
				}
				public String TIEMPOC_IDDefault(){
				
					return null;
				
				}
				public String TIEMPOC_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOC_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOC_IDOriginalDbColumnName(){
				
					return "TIEMPOC_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return true;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return null;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return null;
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public String OBSERVACIONES_CITA;

				public String getOBSERVACIONES_CITA () {
					return this.OBSERVACIONES_CITA;
				}

				public Boolean OBSERVACIONES_CITAIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONES_CITAIsKey(){
				    return false;
				}
				public Integer OBSERVACIONES_CITALength(){
				    return 4000;
				}
				public Integer OBSERVACIONES_CITAPrecision(){
				    return 0;
				}
				public String OBSERVACIONES_CITADefault(){
				
					return null;
				
				}
				public String OBSERVACIONES_CITAComment(){
				
				    return "";
				
				}
				public String OBSERVACIONES_CITAPattern(){
				
					return "";
				
				}
				public String OBSERVACIONES_CITAOriginalDbColumnName(){
				
					return "OBSERVACIONES_CITA";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 31;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return true;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return null;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public String TIPO_CITA;

				public String getTIPO_CITA () {
					return this.TIPO_CITA;
				}

				public Boolean TIPO_CITAIsNullable(){
				    return true;
				}
				public Boolean TIPO_CITAIsKey(){
				    return false;
				}
				public Integer TIPO_CITALength(){
				    return null;
				}
				public Integer TIPO_CITAPrecision(){
				    return null;
				}
				public String TIPO_CITADefault(){
				
					return null;
				
				}
				public String TIPO_CITAComment(){
				
				    return "";
				
				}
				public String TIPO_CITAPattern(){
				
					return "";
				
				}
				public String TIPO_CITAOriginalDbColumnName(){
				
					return "TIPO_CITA";
				
				}

				
			    public String ESTADO_CITA;

				public String getESTADO_CITA () {
					return this.ESTADO_CITA;
				}

				public Boolean ESTADO_CITAIsNullable(){
				    return true;
				}
				public Boolean ESTADO_CITAIsKey(){
				    return false;
				}
				public Integer ESTADO_CITALength(){
				    return null;
				}
				public Integer ESTADO_CITAPrecision(){
				    return null;
				}
				public String ESTADO_CITADefault(){
				
					return null;
				
				}
				public String ESTADO_CITAComment(){
				
				    return "";
				
				}
				public String ESTADO_CITAPattern(){
				
					return "";
				
				}
				public String ESTADO_CITAOriginalDbColumnName(){
				
					return "ESTADO_CITA";
				
				}

				
			    public String TIPO_CAUSAL;

				public String getTIPO_CAUSAL () {
					return this.TIPO_CAUSAL;
				}

				public Boolean TIPO_CAUSALIsNullable(){
				    return true;
				}
				public Boolean TIPO_CAUSALIsKey(){
				    return false;
				}
				public Integer TIPO_CAUSALLength(){
				    return null;
				}
				public Integer TIPO_CAUSALPrecision(){
				    return null;
				}
				public String TIPO_CAUSALDefault(){
				
					return null;
				
				}
				public String TIPO_CAUSALComment(){
				
				    return "";
				
				}
				public String TIPO_CAUSALPattern(){
				
					return "";
				
				}
				public String TIPO_CAUSALOriginalDbColumnName(){
				
					return "TIPO_CAUSAL";
				
				}

				
			    public String ESM_ATENCION_NOMBRE;

				public String getESM_ATENCION_NOMBRE () {
					return this.ESM_ATENCION_NOMBRE;
				}

				public Boolean ESM_ATENCION_NOMBREIsNullable(){
				    return true;
				}
				public Boolean ESM_ATENCION_NOMBREIsKey(){
				    return false;
				}
				public Integer ESM_ATENCION_NOMBRELength(){
				    return null;
				}
				public Integer ESM_ATENCION_NOMBREPrecision(){
				    return null;
				}
				public String ESM_ATENCION_NOMBREDefault(){
				
					return null;
				
				}
				public String ESM_ATENCION_NOMBREComment(){
				
				    return "";
				
				}
				public String ESM_ATENCION_NOMBREPattern(){
				
					return "";
				
				}
				public String ESM_ATENCION_NOMBREOriginalDbColumnName(){
				
					return "ESM_ATENCION_NOMBRE";
				
				}

				
			    public String ESM_ATENCION_SIGLA;

				public String getESM_ATENCION_SIGLA () {
					return this.ESM_ATENCION_SIGLA;
				}

				public Boolean ESM_ATENCION_SIGLAIsNullable(){
				    return true;
				}
				public Boolean ESM_ATENCION_SIGLAIsKey(){
				    return false;
				}
				public Integer ESM_ATENCION_SIGLALength(){
				    return null;
				}
				public Integer ESM_ATENCION_SIGLAPrecision(){
				    return null;
				}
				public String ESM_ATENCION_SIGLADefault(){
				
					return null;
				
				}
				public String ESM_ATENCION_SIGLAComment(){
				
				    return "";
				
				}
				public String ESM_ATENCION_SIGLAPattern(){
				
					return "";
				
				}
				public String ESM_ATENCION_SIGLAOriginalDbColumnName(){
				
					return "ESM_ATENCION_SIGLA";
				
				}

				
			    public BigDecimal ESM_ATENCION_FUERZA_ID;

				public BigDecimal getESM_ATENCION_FUERZA_ID () {
					return this.ESM_ATENCION_FUERZA_ID;
				}

				public Boolean ESM_ATENCION_FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean ESM_ATENCION_FUERZA_IDIsKey(){
				    return false;
				}
				public Integer ESM_ATENCION_FUERZA_IDLength(){
				    return null;
				}
				public Integer ESM_ATENCION_FUERZA_IDPrecision(){
				    return null;
				}
				public String ESM_ATENCION_FUERZA_IDDefault(){
				
					return null;
				
				}
				public String ESM_ATENCION_FUERZA_IDComment(){
				
				    return "";
				
				}
				public String ESM_ATENCION_FUERZA_IDPattern(){
				
					return "";
				
				}
				public String ESM_ATENCION_FUERZA_IDOriginalDbColumnName(){
				
					return "ESM_ATENCION_FUERZA_ID";
				
				}

				
			    public BigDecimal ESM_DIVIPOLA_ID;

				public BigDecimal getESM_DIVIPOLA_ID () {
					return this.ESM_DIVIPOLA_ID;
				}

				public Boolean ESM_DIVIPOLA_IDIsNullable(){
				    return true;
				}
				public Boolean ESM_DIVIPOLA_IDIsKey(){
				    return false;
				}
				public Integer ESM_DIVIPOLA_IDLength(){
				    return null;
				}
				public Integer ESM_DIVIPOLA_IDPrecision(){
				    return null;
				}
				public String ESM_DIVIPOLA_IDDefault(){
				
					return null;
				
				}
				public String ESM_DIVIPOLA_IDComment(){
				
				    return "";
				
				}
				public String ESM_DIVIPOLA_IDPattern(){
				
					return "";
				
				}
				public String ESM_DIVIPOLA_IDOriginalDbColumnName(){
				
					return "ESM_DIVIPOLA_ID";
				
				}

				
			    public String TIPO_ASIGNACION;

				public String getTIPO_ASIGNACION () {
					return this.TIPO_ASIGNACION;
				}

				public Boolean TIPO_ASIGNACIONIsNullable(){
				    return false;
				}
				public Boolean TIPO_ASIGNACIONIsKey(){
				    return false;
				}
				public Integer TIPO_ASIGNACIONLength(){
				    return 1024;
				}
				public Integer TIPO_ASIGNACIONPrecision(){
				    return 0;
				}
				public String TIPO_ASIGNACIONDefault(){
				
					return null;
				
				}
				public String TIPO_ASIGNACIONComment(){
				
				    return "";
				
				}
				public String TIPO_ASIGNACIONPattern(){
				
					return "";
				
				}
				public String TIPO_ASIGNACIONOriginalDbColumnName(){
				
					return "TIPO_ASIGNACION";
				
				}

				
			    public String TIPO_SCITA;

				public String getTIPO_SCITA () {
					return this.TIPO_SCITA;
				}

				public Boolean TIPO_SCITAIsNullable(){
				    return true;
				}
				public Boolean TIPO_SCITAIsKey(){
				    return false;
				}
				public Integer TIPO_SCITALength(){
				    return 1024;
				}
				public Integer TIPO_SCITAPrecision(){
				    return 0;
				}
				public String TIPO_SCITADefault(){
				
					return null;
				
				}
				public String TIPO_SCITAComment(){
				
				    return "";
				
				}
				public String TIPO_SCITAPattern(){
				
					return "";
				
				}
				public String TIPO_SCITAOriginalDbColumnName(){
				
					return "TIPO_SCITA";
				
				}

				
			    public String FUERZA_NOMBRE;

				public String getFUERZA_NOMBRE () {
					return this.FUERZA_NOMBRE;
				}

				public Boolean FUERZA_NOMBREIsNullable(){
				    return true;
				}
				public Boolean FUERZA_NOMBREIsKey(){
				    return false;
				}
				public Integer FUERZA_NOMBRELength(){
				    return null;
				}
				public Integer FUERZA_NOMBREPrecision(){
				    return null;
				}
				public String FUERZA_NOMBREDefault(){
				
					return null;
				
				}
				public String FUERZA_NOMBREComment(){
				
				    return "";
				
				}
				public String FUERZA_NOMBREPattern(){
				
					return "";
				
				}
				public String FUERZA_NOMBREOriginalDbColumnName(){
				
					return "FUERZA_NOMBRE";
				
				}

				
			    public String FUERZA_SIGLA;

				public String getFUERZA_SIGLA () {
					return this.FUERZA_SIGLA;
				}

				public Boolean FUERZA_SIGLAIsNullable(){
				    return true;
				}
				public Boolean FUERZA_SIGLAIsKey(){
				    return false;
				}
				public Integer FUERZA_SIGLALength(){
				    return null;
				}
				public Integer FUERZA_SIGLAPrecision(){
				    return null;
				}
				public String FUERZA_SIGLADefault(){
				
					return null;
				
				}
				public String FUERZA_SIGLAComment(){
				
				    return "";
				
				}
				public String FUERZA_SIGLAPattern(){
				
					return "";
				
				}
				public String FUERZA_SIGLAOriginalDbColumnName(){
				
					return "FUERZA_SIGLA";
				
				}

				
			    public String ESPECIALIDAD;

				public String getESPECIALIDAD () {
					return this.ESPECIALIDAD;
				}

				public Boolean ESPECIALIDADIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADLength(){
				    return null;
				}
				public Integer ESPECIALIDADPrecision(){
				    return null;
				}
				public String ESPECIALIDADDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADOriginalDbColumnName(){
				
					return "ESPECIALIDAD";
				
				}

				
			    public String MCPIO;

				public String getMCPIO () {
					return this.MCPIO;
				}

				public Boolean MCPIOIsNullable(){
				    return true;
				}
				public Boolean MCPIOIsKey(){
				    return false;
				}
				public Integer MCPIOLength(){
				    return null;
				}
				public Integer MCPIOPrecision(){
				    return null;
				}
				public String MCPIODefault(){
				
					return null;
				
				}
				public String MCPIOComment(){
				
				    return "";
				
				}
				public String MCPIOPattern(){
				
					return "";
				
				}
				public String MCPIOOriginalDbColumnName(){
				
					return "MCPIO";
				
				}

				
			    public String CCPP;

				public String getCCPP () {
					return this.CCPP;
				}

				public Boolean CCPPIsNullable(){
				    return true;
				}
				public Boolean CCPPIsKey(){
				    return false;
				}
				public Integer CCPPLength(){
				    return null;
				}
				public Integer CCPPPrecision(){
				    return null;
				}
				public String CCPPDefault(){
				
					return null;
				
				}
				public String CCPPComment(){
				
				    return "";
				
				}
				public String CCPPPattern(){
				
					return "";
				
				}
				public String CCPPOriginalDbColumnName(){
				
					return "CCPP";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.SCITAS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPO_SCITA = (BigDecimal) dis.readObject();
					
						this.TSCITAS_ID = (BigDecimal) dis.readObject();
					
					this.PRIORITARIA = readString(dis);
					
					this.ESTADO_SCITA = readString(dis);
					
					this.USUARIO_SCITA = readString(dis);
					
						this.TASIGNACIONES_ID = (BigDecimal) dis.readObject();
					
						this.CITAS_ID = (BigDecimal) dis.readObject();
					
						this.PROFESIONALES_ID = (BigDecimal) dis.readObject();
					
						this.PACIENTES_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_SCITA = readDate(dis);
					
					this.USUARIO_CITA = readString(dis);
					
						this.ESTADO_ID = (BigDecimal) dis.readObject();
					
						this.TCITAS_ID = (BigDecimal) dis.readObject();
					
					this.CONSULTORIO = readString(dis);
					
					this.MOTIVOCONSULTA = readString(dis);
					
						this.TCAUSALES_ID = (BigDecimal) dis.readObject();
					
					this.JUSTIFICACION = readString(dis);
					
					this.FECHA_CREACION = readDate(dis);
					
					this.FDISPONIBLE = readDate(dis);
					
					this.FECHAI_CITA = readDate(dis);
					
					this.FECHAF_CITA = readDate(dis);
					
					this.FECHA_LLEGADA = readDate(dis);
					
					this.FECHAI_ATENCION = readDate(dis);
					
					this.FECHAF_ATENCION = readDate(dis);
					
						this.ESM_ATENCION_ID = (BigDecimal) dis.readObject();
					
					this.CIE10 = readString(dis);
					
					this.DIAGNOSTICO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.ADMISIONES_ID = (BigDecimal) dis.readObject();
					
						this.TCITA_CHECK = (BigDecimal) dis.readObject();
					
					this.FECHA_CANCELACION = readDate(dis);
					
						this.TIEMPOC_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONES_CITA = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_CITA = readString(dis);
					
					this.ESTADO_CITA = readString(dis);
					
					this.TIPO_CAUSAL = readString(dis);
					
					this.ESM_ATENCION_NOMBRE = readString(dis);
					
					this.ESM_ATENCION_SIGLA = readString(dis);
					
						this.ESM_ATENCION_FUERZA_ID = (BigDecimal) dis.readObject();
					
						this.ESM_DIVIPOLA_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_ASIGNACION = readString(dis);
					
					this.TIPO_SCITA = readString(dis);
					
					this.FUERZA_NOMBRE = readString(dis);
					
					this.FUERZA_SIGLA = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.MCPIO = readString(dis);
					
					this.CCPP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.SCITAS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPO_SCITA = (BigDecimal) dis.readObject();
					
						this.TSCITAS_ID = (BigDecimal) dis.readObject();
					
					this.PRIORITARIA = readString(dis);
					
					this.ESTADO_SCITA = readString(dis);
					
					this.USUARIO_SCITA = readString(dis);
					
						this.TASIGNACIONES_ID = (BigDecimal) dis.readObject();
					
						this.CITAS_ID = (BigDecimal) dis.readObject();
					
						this.PROFESIONALES_ID = (BigDecimal) dis.readObject();
					
						this.PACIENTES_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_SCITA = readDate(dis);
					
					this.USUARIO_CITA = readString(dis);
					
						this.ESTADO_ID = (BigDecimal) dis.readObject();
					
						this.TCITAS_ID = (BigDecimal) dis.readObject();
					
					this.CONSULTORIO = readString(dis);
					
					this.MOTIVOCONSULTA = readString(dis);
					
						this.TCAUSALES_ID = (BigDecimal) dis.readObject();
					
					this.JUSTIFICACION = readString(dis);
					
					this.FECHA_CREACION = readDate(dis);
					
					this.FDISPONIBLE = readDate(dis);
					
					this.FECHAI_CITA = readDate(dis);
					
					this.FECHAF_CITA = readDate(dis);
					
					this.FECHA_LLEGADA = readDate(dis);
					
					this.FECHAI_ATENCION = readDate(dis);
					
					this.FECHAF_ATENCION = readDate(dis);
					
						this.ESM_ATENCION_ID = (BigDecimal) dis.readObject();
					
					this.CIE10 = readString(dis);
					
					this.DIAGNOSTICO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.ADMISIONES_ID = (BigDecimal) dis.readObject();
					
						this.TCITA_CHECK = (BigDecimal) dis.readObject();
					
					this.FECHA_CANCELACION = readDate(dis);
					
						this.TIEMPOC_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONES_CITA = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_CITA = readString(dis);
					
					this.ESTADO_CITA = readString(dis);
					
					this.TIPO_CAUSAL = readString(dis);
					
					this.ESM_ATENCION_NOMBRE = readString(dis);
					
					this.ESM_ATENCION_SIGLA = readString(dis);
					
						this.ESM_ATENCION_FUERZA_ID = (BigDecimal) dis.readObject();
					
						this.ESM_DIVIPOLA_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_ASIGNACION = readString(dis);
					
					this.TIPO_SCITA = readString(dis);
					
					this.FUERZA_NOMBRE = readString(dis);
					
					this.FUERZA_SIGLA = readString(dis);
					
					this.ESPECIALIDAD = readString(dis);
					
					this.MCPIO = readString(dis);
					
					this.CCPP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.SCITAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPO_SCITA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TSCITAS_ID);
					
					// String
				
						writeString(this.PRIORITARIA,dos);
					
					// String
				
						writeString(this.ESTADO_SCITA,dos);
					
					// String
				
						writeString(this.USUARIO_SCITA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TASIGNACIONES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CITAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFESIONALES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PACIENTES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_SCITA,dos);
					
					// String
				
						writeString(this.USUARIO_CITA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTADO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TCITAS_ID);
					
					// String
				
						writeString(this.CONSULTORIO,dos);
					
					// String
				
						writeString(this.MOTIVOCONSULTA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TCAUSALES_ID);
					
					// String
				
						writeString(this.JUSTIFICACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_CREACION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPONIBLE,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAI_CITA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAF_CITA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_LLEGADA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAI_ATENCION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAF_ATENCION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESM_ATENCION_ID);
					
					// String
				
						writeString(this.CIE10,dos);
					
					// String
				
						writeString(this.DIAGNOSTICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADMISIONES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TCITA_CHECK);
					
					// java.util.Date
				
						writeDate(this.FECHA_CANCELACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOC_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// String
				
						writeString(this.OBSERVACIONES_CITA,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
					// String
				
						writeString(this.TIPO_CITA,dos);
					
					// String
				
						writeString(this.ESTADO_CITA,dos);
					
					// String
				
						writeString(this.TIPO_CAUSAL,dos);
					
					// String
				
						writeString(this.ESM_ATENCION_NOMBRE,dos);
					
					// String
				
						writeString(this.ESM_ATENCION_SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESM_ATENCION_FUERZA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESM_DIVIPOLA_ID);
					
					// String
				
						writeString(this.TIPO_ASIGNACION,dos);
					
					// String
				
						writeString(this.TIPO_SCITA,dos);
					
					// String
				
						writeString(this.FUERZA_NOMBRE,dos);
					
					// String
				
						writeString(this.FUERZA_SIGLA,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.MCPIO,dos);
					
					// String
				
						writeString(this.CCPP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SCITAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPO_SCITA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TSCITAS_ID);
					
					// String
				
						writeString(this.PRIORITARIA,dos);
					
					// String
				
						writeString(this.ESTADO_SCITA,dos);
					
					// String
				
						writeString(this.USUARIO_SCITA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TASIGNACIONES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CITAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFESIONALES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PACIENTES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_SCITA,dos);
					
					// String
				
						writeString(this.USUARIO_CITA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTADO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TCITAS_ID);
					
					// String
				
						writeString(this.CONSULTORIO,dos);
					
					// String
				
						writeString(this.MOTIVOCONSULTA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TCAUSALES_ID);
					
					// String
				
						writeString(this.JUSTIFICACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_CREACION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPONIBLE,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAI_CITA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAF_CITA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_LLEGADA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAI_ATENCION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAF_ATENCION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESM_ATENCION_ID);
					
					// String
				
						writeString(this.CIE10,dos);
					
					// String
				
						writeString(this.DIAGNOSTICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ADMISIONES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TCITA_CHECK);
					
					// java.util.Date
				
						writeDate(this.FECHA_CANCELACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOC_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// String
				
						writeString(this.OBSERVACIONES_CITA,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
					// String
				
						writeString(this.TIPO_CITA,dos);
					
					// String
				
						writeString(this.ESTADO_CITA,dos);
					
					// String
				
						writeString(this.TIPO_CAUSAL,dos);
					
					// String
				
						writeString(this.ESM_ATENCION_NOMBRE,dos);
					
					// String
				
						writeString(this.ESM_ATENCION_SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESM_ATENCION_FUERZA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESM_DIVIPOLA_ID);
					
					// String
				
						writeString(this.TIPO_ASIGNACION,dos);
					
					// String
				
						writeString(this.TIPO_SCITA,dos);
					
					// String
				
						writeString(this.FUERZA_NOMBRE,dos);
					
					// String
				
						writeString(this.FUERZA_SIGLA,dos);
					
					// String
				
						writeString(this.ESPECIALIDAD,dos);
					
					// String
				
						writeString(this.MCPIO,dos);
					
					// String
				
						writeString(this.CCPP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SCITAS_ID="+String.valueOf(SCITAS_ID));
		sb.append(",TIEMPO_SCITA="+String.valueOf(TIEMPO_SCITA));
		sb.append(",TSCITAS_ID="+String.valueOf(TSCITAS_ID));
		sb.append(",PRIORITARIA="+PRIORITARIA);
		sb.append(",ESTADO_SCITA="+ESTADO_SCITA);
		sb.append(",USUARIO_SCITA="+USUARIO_SCITA);
		sb.append(",TASIGNACIONES_ID="+String.valueOf(TASIGNACIONES_ID));
		sb.append(",CITAS_ID="+String.valueOf(CITAS_ID));
		sb.append(",PROFESIONALES_ID="+String.valueOf(PROFESIONALES_ID));
		sb.append(",PACIENTES_ID="+String.valueOf(PACIENTES_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",FECHA_SCITA="+String.valueOf(FECHA_SCITA));
		sb.append(",USUARIO_CITA="+USUARIO_CITA);
		sb.append(",ESTADO_ID="+String.valueOf(ESTADO_ID));
		sb.append(",TCITAS_ID="+String.valueOf(TCITAS_ID));
		sb.append(",CONSULTORIO="+CONSULTORIO);
		sb.append(",MOTIVOCONSULTA="+MOTIVOCONSULTA);
		sb.append(",TCAUSALES_ID="+String.valueOf(TCAUSALES_ID));
		sb.append(",JUSTIFICACION="+JUSTIFICACION);
		sb.append(",FECHA_CREACION="+String.valueOf(FECHA_CREACION));
		sb.append(",FDISPONIBLE="+String.valueOf(FDISPONIBLE));
		sb.append(",FECHAI_CITA="+String.valueOf(FECHAI_CITA));
		sb.append(",FECHAF_CITA="+String.valueOf(FECHAF_CITA));
		sb.append(",FECHA_LLEGADA="+String.valueOf(FECHA_LLEGADA));
		sb.append(",FECHAI_ATENCION="+String.valueOf(FECHAI_ATENCION));
		sb.append(",FECHAF_ATENCION="+String.valueOf(FECHAF_ATENCION));
		sb.append(",ESM_ATENCION_ID="+String.valueOf(ESM_ATENCION_ID));
		sb.append(",CIE10="+CIE10);
		sb.append(",DIAGNOSTICO="+DIAGNOSTICO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",ADMISIONES_ID="+String.valueOf(ADMISIONES_ID));
		sb.append(",TCITA_CHECK="+String.valueOf(TCITA_CHECK));
		sb.append(",FECHA_CANCELACION="+String.valueOf(FECHA_CANCELACION));
		sb.append(",TIEMPOC_ID="+String.valueOf(TIEMPOC_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",OBSERVACIONES_CITA="+OBSERVACIONES_CITA);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",TIPO_CITA="+TIPO_CITA);
		sb.append(",ESTADO_CITA="+ESTADO_CITA);
		sb.append(",TIPO_CAUSAL="+TIPO_CAUSAL);
		sb.append(",ESM_ATENCION_NOMBRE="+ESM_ATENCION_NOMBRE);
		sb.append(",ESM_ATENCION_SIGLA="+ESM_ATENCION_SIGLA);
		sb.append(",ESM_ATENCION_FUERZA_ID="+String.valueOf(ESM_ATENCION_FUERZA_ID));
		sb.append(",ESM_DIVIPOLA_ID="+String.valueOf(ESM_DIVIPOLA_ID));
		sb.append(",TIPO_ASIGNACION="+TIPO_ASIGNACION);
		sb.append(",TIPO_SCITA="+TIPO_SCITA);
		sb.append(",FUERZA_NOMBRE="+FUERZA_NOMBRE);
		sb.append(",FUERZA_SIGLA="+FUERZA_SIGLA);
		sb.append(",ESPECIALIDAD="+ESPECIALIDAD);
		sb.append(",MCPIO="+MCPIO);
		sb.append(",CCPP="+CCPP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out_3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out_2Struct implements routines.system.IPersistableRow<out_2Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];

	
			    public BigDecimal SCITAS_ID;

				public BigDecimal getSCITAS_ID () {
					return this.SCITAS_ID;
				}

				public Boolean SCITAS_IDIsNullable(){
				    return false;
				}
				public Boolean SCITAS_IDIsKey(){
				    return false;
				}
				public Integer SCITAS_IDLength(){
				    return 0;
				}
				public Integer SCITAS_IDPrecision(){
				    return null;
				}
				public String SCITAS_IDDefault(){
				
					return "";
				
				}
				public String SCITAS_IDComment(){
				
				    return "";
				
				}
				public String SCITAS_IDPattern(){
				
					return "";
				
				}
				public String SCITAS_IDOriginalDbColumnName(){
				
					return "SCITAS_ID";
				
				}

				
			    public BigDecimal TIEMPO_SCITA;

				public BigDecimal getTIEMPO_SCITA () {
					return this.TIEMPO_SCITA;
				}

				public Boolean TIEMPO_SCITAIsNullable(){
				    return false;
				}
				public Boolean TIEMPO_SCITAIsKey(){
				    return false;
				}
				public Integer TIEMPO_SCITALength(){
				    return 0;
				}
				public Integer TIEMPO_SCITAPrecision(){
				    return null;
				}
				public String TIEMPO_SCITADefault(){
				
					return "";
				
				}
				public String TIEMPO_SCITAComment(){
				
				    return "";
				
				}
				public String TIEMPO_SCITAPattern(){
				
					return "";
				
				}
				public String TIEMPO_SCITAOriginalDbColumnName(){
				
					return "TIEMPO_SCITA";
				
				}

				
			    public BigDecimal TSCITAS_ID;

				public BigDecimal getTSCITAS_ID () {
					return this.TSCITAS_ID;
				}

				public Boolean TSCITAS_IDIsNullable(){
				    return true;
				}
				public Boolean TSCITAS_IDIsKey(){
				    return false;
				}
				public Integer TSCITAS_IDLength(){
				    return 0;
				}
				public Integer TSCITAS_IDPrecision(){
				    return null;
				}
				public String TSCITAS_IDDefault(){
				
					return "";
				
				}
				public String TSCITAS_IDComment(){
				
				    return "";
				
				}
				public String TSCITAS_IDPattern(){
				
					return "";
				
				}
				public String TSCITAS_IDOriginalDbColumnName(){
				
					return "TSCITAS_ID";
				
				}

				
			    public String PRIORITARIA;

				public String getPRIORITARIA () {
					return this.PRIORITARIA;
				}

				public Boolean PRIORITARIAIsNullable(){
				    return false;
				}
				public Boolean PRIORITARIAIsKey(){
				    return false;
				}
				public Integer PRIORITARIALength(){
				    return 2;
				}
				public Integer PRIORITARIAPrecision(){
				    return 0;
				}
				public String PRIORITARIADefault(){
				
					return null;
				
				}
				public String PRIORITARIAComment(){
				
				    return "";
				
				}
				public String PRIORITARIAPattern(){
				
					return "";
				
				}
				public String PRIORITARIAOriginalDbColumnName(){
				
					return "PRIORITARIA";
				
				}

				
			    public String ESTADO_SCITA;

				public String getESTADO_SCITA () {
					return this.ESTADO_SCITA;
				}

				public Boolean ESTADO_SCITAIsNullable(){
				    return false;
				}
				public Boolean ESTADO_SCITAIsKey(){
				    return false;
				}
				public Integer ESTADO_SCITALength(){
				    return 10;
				}
				public Integer ESTADO_SCITAPrecision(){
				    return 0;
				}
				public String ESTADO_SCITADefault(){
				
					return null;
				
				}
				public String ESTADO_SCITAComment(){
				
				    return "";
				
				}
				public String ESTADO_SCITAPattern(){
				
					return "";
				
				}
				public String ESTADO_SCITAOriginalDbColumnName(){
				
					return "ESTADO_SCITA";
				
				}

				
			    public String USUARIO_SCITA;

				public String getUSUARIO_SCITA () {
					return this.USUARIO_SCITA;
				}

				public Boolean USUARIO_SCITAIsNullable(){
				    return false;
				}
				public Boolean USUARIO_SCITAIsKey(){
				    return false;
				}
				public Integer USUARIO_SCITALength(){
				    return 500;
				}
				public Integer USUARIO_SCITAPrecision(){
				    return 0;
				}
				public String USUARIO_SCITADefault(){
				
					return null;
				
				}
				public String USUARIO_SCITAComment(){
				
				    return "";
				
				}
				public String USUARIO_SCITAPattern(){
				
					return "";
				
				}
				public String USUARIO_SCITAOriginalDbColumnName(){
				
					return "USUARIO_SCITA";
				
				}

				
			    public BigDecimal TASIGNACIONES_ID;

				public BigDecimal getTASIGNACIONES_ID () {
					return this.TASIGNACIONES_ID;
				}

				public Boolean TASIGNACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean TASIGNACIONES_IDIsKey(){
				    return false;
				}
				public Integer TASIGNACIONES_IDLength(){
				    return 0;
				}
				public Integer TASIGNACIONES_IDPrecision(){
				    return null;
				}
				public String TASIGNACIONES_IDDefault(){
				
					return "";
				
				}
				public String TASIGNACIONES_IDComment(){
				
				    return "";
				
				}
				public String TASIGNACIONES_IDPattern(){
				
					return "";
				
				}
				public String TASIGNACIONES_IDOriginalDbColumnName(){
				
					return "TASIGNACIONES_ID";
				
				}

				
			    public BigDecimal CITAS_ID;

				public BigDecimal getCITAS_ID () {
					return this.CITAS_ID;
				}

				public Boolean CITAS_IDIsNullable(){
				    return false;
				}
				public Boolean CITAS_IDIsKey(){
				    return false;
				}
				public Integer CITAS_IDLength(){
				    return 0;
				}
				public Integer CITAS_IDPrecision(){
				    return null;
				}
				public String CITAS_IDDefault(){
				
					return "";
				
				}
				public String CITAS_IDComment(){
				
				    return "";
				
				}
				public String CITAS_IDPattern(){
				
					return "";
				
				}
				public String CITAS_IDOriginalDbColumnName(){
				
					return "CITAS_ID";
				
				}

				
			    public BigDecimal PROFESIONALES_ID;

				public BigDecimal getPROFESIONALES_ID () {
					return this.PROFESIONALES_ID;
				}

				public Boolean PROFESIONALES_IDIsNullable(){
				    return true;
				}
				public Boolean PROFESIONALES_IDIsKey(){
				    return false;
				}
				public Integer PROFESIONALES_IDLength(){
				    return 0;
				}
				public Integer PROFESIONALES_IDPrecision(){
				    return null;
				}
				public String PROFESIONALES_IDDefault(){
				
					return "";
				
				}
				public String PROFESIONALES_IDComment(){
				
				    return "";
				
				}
				public String PROFESIONALES_IDPattern(){
				
					return "";
				
				}
				public String PROFESIONALES_IDOriginalDbColumnName(){
				
					return "PROFESIONALES_ID";
				
				}

				
			    public BigDecimal PACIENTES_ID;

				public BigDecimal getPACIENTES_ID () {
					return this.PACIENTES_ID;
				}

				public Boolean PACIENTES_IDIsNullable(){
				    return false;
				}
				public Boolean PACIENTES_IDIsKey(){
				    return false;
				}
				public Integer PACIENTES_IDLength(){
				    return 0;
				}
				public Integer PACIENTES_IDPrecision(){
				    return null;
				}
				public String PACIENTES_IDDefault(){
				
					return "";
				
				}
				public String PACIENTES_IDComment(){
				
				    return "";
				
				}
				public String PACIENTES_IDPattern(){
				
					return "";
				
				}
				public String PACIENTES_IDOriginalDbColumnName(){
				
					return "PACIENTES_ID";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public java.util.Date FECHA_SCITA;

				public java.util.Date getFECHA_SCITA () {
					return this.FECHA_SCITA;
				}

				public Boolean FECHA_SCITAIsNullable(){
				    return false;
				}
				public Boolean FECHA_SCITAIsKey(){
				    return false;
				}
				public Integer FECHA_SCITALength(){
				    return 0;
				}
				public Integer FECHA_SCITAPrecision(){
				    return 0;
				}
				public String FECHA_SCITADefault(){
				
					return null;
				
				}
				public String FECHA_SCITAComment(){
				
				    return "";
				
				}
				public String FECHA_SCITAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_SCITAOriginalDbColumnName(){
				
					return "FECHA_SCITA";
				
				}

				
			    public String USUARIO_CITA;

				public String getUSUARIO_CITA () {
					return this.USUARIO_CITA;
				}

				public Boolean USUARIO_CITAIsNullable(){
				    return false;
				}
				public Boolean USUARIO_CITAIsKey(){
				    return false;
				}
				public Integer USUARIO_CITALength(){
				    return 500;
				}
				public Integer USUARIO_CITAPrecision(){
				    return 0;
				}
				public String USUARIO_CITADefault(){
				
					return null;
				
				}
				public String USUARIO_CITAComment(){
				
				    return "";
				
				}
				public String USUARIO_CITAPattern(){
				
					return "";
				
				}
				public String USUARIO_CITAOriginalDbColumnName(){
				
					return "USUARIO_CITA";
				
				}

				
			    public BigDecimal ESTADO_ID;

				public BigDecimal getESTADO_ID () {
					return this.ESTADO_ID;
				}

				public Boolean ESTADO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTADO_IDIsKey(){
				    return false;
				}
				public Integer ESTADO_IDLength(){
				    return 0;
				}
				public Integer ESTADO_IDPrecision(){
				    return null;
				}
				public String ESTADO_IDDefault(){
				
					return "";
				
				}
				public String ESTADO_IDComment(){
				
				    return "";
				
				}
				public String ESTADO_IDPattern(){
				
					return "";
				
				}
				public String ESTADO_IDOriginalDbColumnName(){
				
					return "ESTADO_ID";
				
				}

				
			    public BigDecimal TCITAS_ID;

				public BigDecimal getTCITAS_ID () {
					return this.TCITAS_ID;
				}

				public Boolean TCITAS_IDIsNullable(){
				    return true;
				}
				public Boolean TCITAS_IDIsKey(){
				    return false;
				}
				public Integer TCITAS_IDLength(){
				    return 0;
				}
				public Integer TCITAS_IDPrecision(){
				    return null;
				}
				public String TCITAS_IDDefault(){
				
					return "";
				
				}
				public String TCITAS_IDComment(){
				
				    return "";
				
				}
				public String TCITAS_IDPattern(){
				
					return "";
				
				}
				public String TCITAS_IDOriginalDbColumnName(){
				
					return "TCITAS_ID";
				
				}

				
			    public String CONSULTORIO;

				public String getCONSULTORIO () {
					return this.CONSULTORIO;
				}

				public Boolean CONSULTORIOIsNullable(){
				    return true;
				}
				public Boolean CONSULTORIOIsKey(){
				    return false;
				}
				public Integer CONSULTORIOLength(){
				    return 50;
				}
				public Integer CONSULTORIOPrecision(){
				    return 0;
				}
				public String CONSULTORIODefault(){
				
					return null;
				
				}
				public String CONSULTORIOComment(){
				
				    return "";
				
				}
				public String CONSULTORIOPattern(){
				
					return "";
				
				}
				public String CONSULTORIOOriginalDbColumnName(){
				
					return "CONSULTORIO";
				
				}

				
			    public String MOTIVOCONSULTA;

				public String getMOTIVOCONSULTA () {
					return this.MOTIVOCONSULTA;
				}

				public Boolean MOTIVOCONSULTAIsNullable(){
				    return true;
				}
				public Boolean MOTIVOCONSULTAIsKey(){
				    return false;
				}
				public Integer MOTIVOCONSULTALength(){
				    return 4000;
				}
				public Integer MOTIVOCONSULTAPrecision(){
				    return 0;
				}
				public String MOTIVOCONSULTADefault(){
				
					return null;
				
				}
				public String MOTIVOCONSULTAComment(){
				
				    return "";
				
				}
				public String MOTIVOCONSULTAPattern(){
				
					return "";
				
				}
				public String MOTIVOCONSULTAOriginalDbColumnName(){
				
					return "MOTIVOCONSULTA";
				
				}

				
			    public BigDecimal TCAUSALES_ID;

				public BigDecimal getTCAUSALES_ID () {
					return this.TCAUSALES_ID;
				}

				public Boolean TCAUSALES_IDIsNullable(){
				    return true;
				}
				public Boolean TCAUSALES_IDIsKey(){
				    return false;
				}
				public Integer TCAUSALES_IDLength(){
				    return 0;
				}
				public Integer TCAUSALES_IDPrecision(){
				    return null;
				}
				public String TCAUSALES_IDDefault(){
				
					return "";
				
				}
				public String TCAUSALES_IDComment(){
				
				    return "";
				
				}
				public String TCAUSALES_IDPattern(){
				
					return "";
				
				}
				public String TCAUSALES_IDOriginalDbColumnName(){
				
					return "TCAUSALES_ID";
				
				}

				
			    public String JUSTIFICACION;

				public String getJUSTIFICACION () {
					return this.JUSTIFICACION;
				}

				public Boolean JUSTIFICACIONIsNullable(){
				    return true;
				}
				public Boolean JUSTIFICACIONIsKey(){
				    return false;
				}
				public Integer JUSTIFICACIONLength(){
				    return 4000;
				}
				public Integer JUSTIFICACIONPrecision(){
				    return 0;
				}
				public String JUSTIFICACIONDefault(){
				
					return null;
				
				}
				public String JUSTIFICACIONComment(){
				
				    return "";
				
				}
				public String JUSTIFICACIONPattern(){
				
					return "";
				
				}
				public String JUSTIFICACIONOriginalDbColumnName(){
				
					return "JUSTIFICACION";
				
				}

				
			    public java.util.Date FECHA_CREACION;

				public java.util.Date getFECHA_CREACION () {
					return this.FECHA_CREACION;
				}

				public Boolean FECHA_CREACIONIsNullable(){
				    return false;
				}
				public Boolean FECHA_CREACIONIsKey(){
				    return false;
				}
				public Integer FECHA_CREACIONLength(){
				    return 0;
				}
				public Integer FECHA_CREACIONPrecision(){
				    return 0;
				}
				public String FECHA_CREACIONDefault(){
				
					return null;
				
				}
				public String FECHA_CREACIONComment(){
				
				    return "";
				
				}
				public String FECHA_CREACIONPattern(){
				
					return "";
				
				}
				public String FECHA_CREACIONOriginalDbColumnName(){
				
					return "FECHA_CREACION";
				
				}

				
			    public java.util.Date FDISPONIBLE;

				public java.util.Date getFDISPONIBLE () {
					return this.FDISPONIBLE;
				}

				public Boolean FDISPONIBLEIsNullable(){
				    return true;
				}
				public Boolean FDISPONIBLEIsKey(){
				    return false;
				}
				public Integer FDISPONIBLELength(){
				    return 0;
				}
				public Integer FDISPONIBLEPrecision(){
				    return 0;
				}
				public String FDISPONIBLEDefault(){
				
					return null;
				
				}
				public String FDISPONIBLEComment(){
				
				    return "";
				
				}
				public String FDISPONIBLEPattern(){
				
					return "";
				
				}
				public String FDISPONIBLEOriginalDbColumnName(){
				
					return "FDISPONIBLE";
				
				}

				
			    public java.util.Date FECHAI_CITA;

				public java.util.Date getFECHAI_CITA () {
					return this.FECHAI_CITA;
				}

				public Boolean FECHAI_CITAIsNullable(){
				    return true;
				}
				public Boolean FECHAI_CITAIsKey(){
				    return false;
				}
				public Integer FECHAI_CITALength(){
				    return 0;
				}
				public Integer FECHAI_CITAPrecision(){
				    return 0;
				}
				public String FECHAI_CITADefault(){
				
					return null;
				
				}
				public String FECHAI_CITAComment(){
				
				    return "";
				
				}
				public String FECHAI_CITAPattern(){
				
					return "";
				
				}
				public String FECHAI_CITAOriginalDbColumnName(){
				
					return "FECHAI_CITA";
				
				}

				
			    public java.util.Date FECHAF_CITA;

				public java.util.Date getFECHAF_CITA () {
					return this.FECHAF_CITA;
				}

				public Boolean FECHAF_CITAIsNullable(){
				    return true;
				}
				public Boolean FECHAF_CITAIsKey(){
				    return false;
				}
				public Integer FECHAF_CITALength(){
				    return 0;
				}
				public Integer FECHAF_CITAPrecision(){
				    return 0;
				}
				public String FECHAF_CITADefault(){
				
					return null;
				
				}
				public String FECHAF_CITAComment(){
				
				    return "";
				
				}
				public String FECHAF_CITAPattern(){
				
					return "";
				
				}
				public String FECHAF_CITAOriginalDbColumnName(){
				
					return "FECHAF_CITA";
				
				}

				
			    public java.util.Date FECHA_LLEGADA;

				public java.util.Date getFECHA_LLEGADA () {
					return this.FECHA_LLEGADA;
				}

				public Boolean FECHA_LLEGADAIsNullable(){
				    return true;
				}
				public Boolean FECHA_LLEGADAIsKey(){
				    return false;
				}
				public Integer FECHA_LLEGADALength(){
				    return 0;
				}
				public Integer FECHA_LLEGADAPrecision(){
				    return 0;
				}
				public String FECHA_LLEGADADefault(){
				
					return null;
				
				}
				public String FECHA_LLEGADAComment(){
				
				    return "";
				
				}
				public String FECHA_LLEGADAPattern(){
				
					return "";
				
				}
				public String FECHA_LLEGADAOriginalDbColumnName(){
				
					return "FECHA_LLEGADA";
				
				}

				
			    public java.util.Date FECHAI_ATENCION;

				public java.util.Date getFECHAI_ATENCION () {
					return this.FECHAI_ATENCION;
				}

				public Boolean FECHAI_ATENCIONIsNullable(){
				    return true;
				}
				public Boolean FECHAI_ATENCIONIsKey(){
				    return false;
				}
				public Integer FECHAI_ATENCIONLength(){
				    return 0;
				}
				public Integer FECHAI_ATENCIONPrecision(){
				    return 0;
				}
				public String FECHAI_ATENCIONDefault(){
				
					return null;
				
				}
				public String FECHAI_ATENCIONComment(){
				
				    return "";
				
				}
				public String FECHAI_ATENCIONPattern(){
				
					return "";
				
				}
				public String FECHAI_ATENCIONOriginalDbColumnName(){
				
					return "FECHAI_ATENCION";
				
				}

				
			    public java.util.Date FECHAF_ATENCION;

				public java.util.Date getFECHAF_ATENCION () {
					return this.FECHAF_ATENCION;
				}

				public Boolean FECHAF_ATENCIONIsNullable(){
				    return true;
				}
				public Boolean FECHAF_ATENCIONIsKey(){
				    return false;
				}
				public Integer FECHAF_ATENCIONLength(){
				    return 0;
				}
				public Integer FECHAF_ATENCIONPrecision(){
				    return 0;
				}
				public String FECHAF_ATENCIONDefault(){
				
					return null;
				
				}
				public String FECHAF_ATENCIONComment(){
				
				    return "";
				
				}
				public String FECHAF_ATENCIONPattern(){
				
					return "";
				
				}
				public String FECHAF_ATENCIONOriginalDbColumnName(){
				
					return "FECHAF_ATENCION";
				
				}

				
			    public BigDecimal ESM_ATENCION_ID;

				public BigDecimal getESM_ATENCION_ID () {
					return this.ESM_ATENCION_ID;
				}

				public Boolean ESM_ATENCION_IDIsNullable(){
				    return false;
				}
				public Boolean ESM_ATENCION_IDIsKey(){
				    return false;
				}
				public Integer ESM_ATENCION_IDLength(){
				    return 0;
				}
				public Integer ESM_ATENCION_IDPrecision(){
				    return null;
				}
				public String ESM_ATENCION_IDDefault(){
				
					return "";
				
				}
				public String ESM_ATENCION_IDComment(){
				
				    return "";
				
				}
				public String ESM_ATENCION_IDPattern(){
				
					return "";
				
				}
				public String ESM_ATENCION_IDOriginalDbColumnName(){
				
					return "ESM_ATENCION_ID";
				
				}

				
			    public String CIE10;

				public String getCIE10 () {
					return this.CIE10;
				}

				public Boolean CIE10IsNullable(){
				    return true;
				}
				public Boolean CIE10IsKey(){
				    return false;
				}
				public Integer CIE10Length(){
				    return 10;
				}
				public Integer CIE10Precision(){
				    return 0;
				}
				public String CIE10Default(){
				
					return null;
				
				}
				public String CIE10Comment(){
				
				    return "";
				
				}
				public String CIE10Pattern(){
				
					return "";
				
				}
				public String CIE10OriginalDbColumnName(){
				
					return "CIE10";
				
				}

				
			    public String DIAGNOSTICO;

				public String getDIAGNOSTICO () {
					return this.DIAGNOSTICO;
				}

				public Boolean DIAGNOSTICOIsNullable(){
				    return true;
				}
				public Boolean DIAGNOSTICOIsKey(){
				    return false;
				}
				public Integer DIAGNOSTICOLength(){
				    return 500;
				}
				public Integer DIAGNOSTICOPrecision(){
				    return 0;
				}
				public String DIAGNOSTICODefault(){
				
					return null;
				
				}
				public String DIAGNOSTICOComment(){
				
				    return "";
				
				}
				public String DIAGNOSTICOPattern(){
				
					return "";
				
				}
				public String DIAGNOSTICOOriginalDbColumnName(){
				
					return "DIAGNOSTICO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public BigDecimal ADMISIONES_ID;

				public BigDecimal getADMISIONES_ID () {
					return this.ADMISIONES_ID;
				}

				public Boolean ADMISIONES_IDIsNullable(){
				    return true;
				}
				public Boolean ADMISIONES_IDIsKey(){
				    return false;
				}
				public Integer ADMISIONES_IDLength(){
				    return null;
				}
				public Integer ADMISIONES_IDPrecision(){
				    return null;
				}
				public String ADMISIONES_IDDefault(){
				
					return null;
				
				}
				public String ADMISIONES_IDComment(){
				
				    return "";
				
				}
				public String ADMISIONES_IDPattern(){
				
					return "";
				
				}
				public String ADMISIONES_IDOriginalDbColumnName(){
				
					return "ADMISIONES_ID";
				
				}

				
			    public BigDecimal TCITA_CHECK;

				public BigDecimal getTCITA_CHECK () {
					return this.TCITA_CHECK;
				}

				public Boolean TCITA_CHECKIsNullable(){
				    return true;
				}
				public Boolean TCITA_CHECKIsKey(){
				    return false;
				}
				public Integer TCITA_CHECKLength(){
				    return null;
				}
				public Integer TCITA_CHECKPrecision(){
				    return null;
				}
				public String TCITA_CHECKDefault(){
				
					return null;
				
				}
				public String TCITA_CHECKComment(){
				
				    return "";
				
				}
				public String TCITA_CHECKPattern(){
				
					return "";
				
				}
				public String TCITA_CHECKOriginalDbColumnName(){
				
					return "TCITA_CHECK";
				
				}

				
			    public java.util.Date FECHA_CANCELACION;

				public java.util.Date getFECHA_CANCELACION () {
					return this.FECHA_CANCELACION;
				}

				public Boolean FECHA_CANCELACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_CANCELACIONIsKey(){
				    return false;
				}
				public Integer FECHA_CANCELACIONLength(){
				    return null;
				}
				public Integer FECHA_CANCELACIONPrecision(){
				    return null;
				}
				public String FECHA_CANCELACIONDefault(){
				
					return null;
				
				}
				public String FECHA_CANCELACIONComment(){
				
				    return "";
				
				}
				public String FECHA_CANCELACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_CANCELACIONOriginalDbColumnName(){
				
					return "FECHA_CANCELACION";
				
				}

				
			    public BigDecimal TIEMPOC_ID;

				public BigDecimal getTIEMPOC_ID () {
					return this.TIEMPOC_ID;
				}

				public Boolean TIEMPOC_IDIsNullable(){
				    return true;
				}
				public Boolean TIEMPOC_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOC_IDLength(){
				    return null;
				}
				public Integer TIEMPOC_IDPrecision(){
				    return null;
				}
				public String TIEMPOC_IDDefault(){
				
					return null;
				
				}
				public String TIEMPOC_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOC_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOC_IDOriginalDbColumnName(){
				
					return "TIEMPOC_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return true;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return null;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return null;
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public String OBSERVACIONES_CITA;

				public String getOBSERVACIONES_CITA () {
					return this.OBSERVACIONES_CITA;
				}

				public Boolean OBSERVACIONES_CITAIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONES_CITAIsKey(){
				    return false;
				}
				public Integer OBSERVACIONES_CITALength(){
				    return 4000;
				}
				public Integer OBSERVACIONES_CITAPrecision(){
				    return 0;
				}
				public String OBSERVACIONES_CITADefault(){
				
					return null;
				
				}
				public String OBSERVACIONES_CITAComment(){
				
				    return "";
				
				}
				public String OBSERVACIONES_CITAPattern(){
				
					return "";
				
				}
				public String OBSERVACIONES_CITAOriginalDbColumnName(){
				
					return "OBSERVACIONES_CITA";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 31;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return true;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return null;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public String TIPO_CITA;

				public String getTIPO_CITA () {
					return this.TIPO_CITA;
				}

				public Boolean TIPO_CITAIsNullable(){
				    return true;
				}
				public Boolean TIPO_CITAIsKey(){
				    return false;
				}
				public Integer TIPO_CITALength(){
				    return null;
				}
				public Integer TIPO_CITAPrecision(){
				    return null;
				}
				public String TIPO_CITADefault(){
				
					return null;
				
				}
				public String TIPO_CITAComment(){
				
				    return "";
				
				}
				public String TIPO_CITAPattern(){
				
					return "";
				
				}
				public String TIPO_CITAOriginalDbColumnName(){
				
					return "TIPO_CITA";
				
				}

				
			    public String ESTADO_CITA;

				public String getESTADO_CITA () {
					return this.ESTADO_CITA;
				}

				public Boolean ESTADO_CITAIsNullable(){
				    return true;
				}
				public Boolean ESTADO_CITAIsKey(){
				    return false;
				}
				public Integer ESTADO_CITALength(){
				    return null;
				}
				public Integer ESTADO_CITAPrecision(){
				    return null;
				}
				public String ESTADO_CITADefault(){
				
					return null;
				
				}
				public String ESTADO_CITAComment(){
				
				    return "";
				
				}
				public String ESTADO_CITAPattern(){
				
					return "";
				
				}
				public String ESTADO_CITAOriginalDbColumnName(){
				
					return "ESTADO_CITA";
				
				}

				
			    public String TIPO_CAUSAL;

				public String getTIPO_CAUSAL () {
					return this.TIPO_CAUSAL;
				}

				public Boolean TIPO_CAUSALIsNullable(){
				    return true;
				}
				public Boolean TIPO_CAUSALIsKey(){
				    return false;
				}
				public Integer TIPO_CAUSALLength(){
				    return null;
				}
				public Integer TIPO_CAUSALPrecision(){
				    return null;
				}
				public String TIPO_CAUSALDefault(){
				
					return null;
				
				}
				public String TIPO_CAUSALComment(){
				
				    return "";
				
				}
				public String TIPO_CAUSALPattern(){
				
					return "";
				
				}
				public String TIPO_CAUSALOriginalDbColumnName(){
				
					return "TIPO_CAUSAL";
				
				}

				
			    public String ESM_ATENCION_NOMBRE;

				public String getESM_ATENCION_NOMBRE () {
					return this.ESM_ATENCION_NOMBRE;
				}

				public Boolean ESM_ATENCION_NOMBREIsNullable(){
				    return true;
				}
				public Boolean ESM_ATENCION_NOMBREIsKey(){
				    return false;
				}
				public Integer ESM_ATENCION_NOMBRELength(){
				    return null;
				}
				public Integer ESM_ATENCION_NOMBREPrecision(){
				    return null;
				}
				public String ESM_ATENCION_NOMBREDefault(){
				
					return null;
				
				}
				public String ESM_ATENCION_NOMBREComment(){
				
				    return "";
				
				}
				public String ESM_ATENCION_NOMBREPattern(){
				
					return "";
				
				}
				public String ESM_ATENCION_NOMBREOriginalDbColumnName(){
				
					return "ESM_ATENCION_NOMBRE";
				
				}

				
			    public String ESM_ATENCION_SIGLA;

				public String getESM_ATENCION_SIGLA () {
					return this.ESM_ATENCION_SIGLA;
				}

				public Boolean ESM_ATENCION_SIGLAIsNullable(){
				    return true;
				}
				public Boolean ESM_ATENCION_SIGLAIsKey(){
				    return false;
				}
				public Integer ESM_ATENCION_SIGLALength(){
				    return null;
				}
				public Integer ESM_ATENCION_SIGLAPrecision(){
				    return null;
				}
				public String ESM_ATENCION_SIGLADefault(){
				
					return null;
				
				}
				public String ESM_ATENCION_SIGLAComment(){
				
				    return "";
				
				}
				public String ESM_ATENCION_SIGLAPattern(){
				
					return "";
				
				}
				public String ESM_ATENCION_SIGLAOriginalDbColumnName(){
				
					return "ESM_ATENCION_SIGLA";
				
				}

				
			    public BigDecimal ESM_ATENCION_FUERZA_ID;

				public BigDecimal getESM_ATENCION_FUERZA_ID () {
					return this.ESM_ATENCION_FUERZA_ID;
				}

				public Boolean ESM_ATENCION_FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean ESM_ATENCION_FUERZA_IDIsKey(){
				    return false;
				}
				public Integer ESM_ATENCION_FUERZA_IDLength(){
				    return null;
				}
				public Integer ESM_ATENCION_FUERZA_IDPrecision(){
				    return null;
				}
				public String ESM_ATENCION_FUERZA_IDDefault(){
				
					return null;
				
				}
				public String ESM_ATENCION_FUERZA_IDComment(){
				
				    return "";
				
				}
				public String ESM_ATENCION_FUERZA_IDPattern(){
				
					return "";
				
				}
				public String ESM_ATENCION_FUERZA_IDOriginalDbColumnName(){
				
					return "ESM_ATENCION_FUERZA_ID";
				
				}

				
			    public BigDecimal ESM_ATENCION_DIVIPOLA_ID;

				public BigDecimal getESM_ATENCION_DIVIPOLA_ID () {
					return this.ESM_ATENCION_DIVIPOLA_ID;
				}

				public Boolean ESM_ATENCION_DIVIPOLA_IDIsNullable(){
				    return true;
				}
				public Boolean ESM_ATENCION_DIVIPOLA_IDIsKey(){
				    return false;
				}
				public Integer ESM_ATENCION_DIVIPOLA_IDLength(){
				    return null;
				}
				public Integer ESM_ATENCION_DIVIPOLA_IDPrecision(){
				    return null;
				}
				public String ESM_ATENCION_DIVIPOLA_IDDefault(){
				
					return null;
				
				}
				public String ESM_ATENCION_DIVIPOLA_IDComment(){
				
				    return "";
				
				}
				public String ESM_ATENCION_DIVIPOLA_IDPattern(){
				
					return "";
				
				}
				public String ESM_ATENCION_DIVIPOLA_IDOriginalDbColumnName(){
				
					return "ESM_ATENCION_DIVIPOLA_ID";
				
				}

				
			    public String TIPO_ASIGNACION;

				public String getTIPO_ASIGNACION () {
					return this.TIPO_ASIGNACION;
				}

				public Boolean TIPO_ASIGNACIONIsNullable(){
				    return false;
				}
				public Boolean TIPO_ASIGNACIONIsKey(){
				    return false;
				}
				public Integer TIPO_ASIGNACIONLength(){
				    return 1024;
				}
				public Integer TIPO_ASIGNACIONPrecision(){
				    return 0;
				}
				public String TIPO_ASIGNACIONDefault(){
				
					return null;
				
				}
				public String TIPO_ASIGNACIONComment(){
				
				    return "";
				
				}
				public String TIPO_ASIGNACIONPattern(){
				
					return "";
				
				}
				public String TIPO_ASIGNACIONOriginalDbColumnName(){
				
					return "TIPO_ASIGNACION";
				
				}

				
			    public String TIPO_SCITA;

				public String getTIPO_SCITA () {
					return this.TIPO_SCITA;
				}

				public Boolean TIPO_SCITAIsNullable(){
				    return true;
				}
				public Boolean TIPO_SCITAIsKey(){
				    return false;
				}
				public Integer TIPO_SCITALength(){
				    return 1024;
				}
				public Integer TIPO_SCITAPrecision(){
				    return 0;
				}
				public String TIPO_SCITADefault(){
				
					return null;
				
				}
				public String TIPO_SCITAComment(){
				
				    return "";
				
				}
				public String TIPO_SCITAPattern(){
				
					return "";
				
				}
				public String TIPO_SCITAOriginalDbColumnName(){
				
					return "TIPO_SCITA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.SCITAS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPO_SCITA = (BigDecimal) dis.readObject();
					
						this.TSCITAS_ID = (BigDecimal) dis.readObject();
					
					this.PRIORITARIA = readString(dis);
					
					this.ESTADO_SCITA = readString(dis);
					
					this.USUARIO_SCITA = readString(dis);
					
						this.TASIGNACIONES_ID = (BigDecimal) dis.readObject();
					
						this.CITAS_ID = (BigDecimal) dis.readObject();
					
						this.PROFESIONALES_ID = (BigDecimal) dis.readObject();
					
						this.PACIENTES_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_SCITA = readDate(dis);
					
					this.USUARIO_CITA = readString(dis);
					
						this.ESTADO_ID = (BigDecimal) dis.readObject();
					
						this.TCITAS_ID = (BigDecimal) dis.readObject();
					
					this.CONSULTORIO = readString(dis);
					
					this.MOTIVOCONSULTA = readString(dis);
					
						this.TCAUSALES_ID = (BigDecimal) dis.readObject();
					
					this.JUSTIFICACION = readString(dis);
					
					this.FECHA_CREACION = readDate(dis);
					
					this.FDISPONIBLE = readDate(dis);
					
					this.FECHAI_CITA = readDate(dis);
					
					this.FECHAF_CITA = readDate(dis);
					
					this.FECHA_LLEGADA = readDate(dis);
					
					this.FECHAI_ATENCION = readDate(dis);
					
					this.FECHAF_ATENCION = readDate(dis);
					
						this.ESM_ATENCION_ID = (BigDecimal) dis.readObject();
					
					this.CIE10 = readString(dis);
					
					this.DIAGNOSTICO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.ADMISIONES_ID = (BigDecimal) dis.readObject();
					
						this.TCITA_CHECK = (BigDecimal) dis.readObject();
					
					this.FECHA_CANCELACION = readDate(dis);
					
						this.TIEMPOC_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONES_CITA = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_CITA = readString(dis);
					
					this.ESTADO_CITA = readString(dis);
					
					this.TIPO_CAUSAL = readString(dis);
					
					this.ESM_ATENCION_NOMBRE = readString(dis);
					
					this.ESM_ATENCION_SIGLA = readString(dis);
					
						this.ESM_ATENCION_FUERZA_ID = (BigDecimal) dis.readObject();
					
						this.ESM_ATENCION_DIVIPOLA_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_ASIGNACION = readString(dis);
					
					this.TIPO_SCITA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.SCITAS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPO_SCITA = (BigDecimal) dis.readObject();
					
						this.TSCITAS_ID = (BigDecimal) dis.readObject();
					
					this.PRIORITARIA = readString(dis);
					
					this.ESTADO_SCITA = readString(dis);
					
					this.USUARIO_SCITA = readString(dis);
					
						this.TASIGNACIONES_ID = (BigDecimal) dis.readObject();
					
						this.CITAS_ID = (BigDecimal) dis.readObject();
					
						this.PROFESIONALES_ID = (BigDecimal) dis.readObject();
					
						this.PACIENTES_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_SCITA = readDate(dis);
					
					this.USUARIO_CITA = readString(dis);
					
						this.ESTADO_ID = (BigDecimal) dis.readObject();
					
						this.TCITAS_ID = (BigDecimal) dis.readObject();
					
					this.CONSULTORIO = readString(dis);
					
					this.MOTIVOCONSULTA = readString(dis);
					
						this.TCAUSALES_ID = (BigDecimal) dis.readObject();
					
					this.JUSTIFICACION = readString(dis);
					
					this.FECHA_CREACION = readDate(dis);
					
					this.FDISPONIBLE = readDate(dis);
					
					this.FECHAI_CITA = readDate(dis);
					
					this.FECHAF_CITA = readDate(dis);
					
					this.FECHA_LLEGADA = readDate(dis);
					
					this.FECHAI_ATENCION = readDate(dis);
					
					this.FECHAF_ATENCION = readDate(dis);
					
						this.ESM_ATENCION_ID = (BigDecimal) dis.readObject();
					
					this.CIE10 = readString(dis);
					
					this.DIAGNOSTICO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.ADMISIONES_ID = (BigDecimal) dis.readObject();
					
						this.TCITA_CHECK = (BigDecimal) dis.readObject();
					
					this.FECHA_CANCELACION = readDate(dis);
					
						this.TIEMPOC_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONES_CITA = readString(dis);
					
					this.TIPO_USUARIO = readString(dis);
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_CITA = readString(dis);
					
					this.ESTADO_CITA = readString(dis);
					
					this.TIPO_CAUSAL = readString(dis);
					
					this.ESM_ATENCION_NOMBRE = readString(dis);
					
					this.ESM_ATENCION_SIGLA = readString(dis);
					
						this.ESM_ATENCION_FUERZA_ID = (BigDecimal) dis.readObject();
					
						this.ESM_ATENCION_DIVIPOLA_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_ASIGNACION = readString(dis);
					
					this.TIPO_SCITA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.SCITAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPO_SCITA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TSCITAS_ID);
					
					// String
				
						writeString(this.PRIORITARIA,dos);
					
					// String
				
						writeString(this.ESTADO_SCITA,dos);
					
					// String
				
						writeString(this.USUARIO_SCITA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TASIGNACIONES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CITAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFESIONALES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PACIENTES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_SCITA,dos);
					
					// String
				
						writeString(this.USUARIO_CITA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTADO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TCITAS_ID);
					
					// String
				
						writeString(this.CONSULTORIO,dos);
					
					// String
				
						writeString(this.MOTIVOCONSULTA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TCAUSALES_ID);
					
					// String
				
						writeString(this.JUSTIFICACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_CREACION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPONIBLE,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAI_CITA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAF_CITA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_LLEGADA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAI_ATENCION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAF_ATENCION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESM_ATENCION_ID);
					
					// String
				
						writeString(this.CIE10,dos);
					
					// String
				
						writeString(this.DIAGNOSTICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADMISIONES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TCITA_CHECK);
					
					// java.util.Date
				
						writeDate(this.FECHA_CANCELACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOC_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// String
				
						writeString(this.OBSERVACIONES_CITA,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
					// String
				
						writeString(this.TIPO_CITA,dos);
					
					// String
				
						writeString(this.ESTADO_CITA,dos);
					
					// String
				
						writeString(this.TIPO_CAUSAL,dos);
					
					// String
				
						writeString(this.ESM_ATENCION_NOMBRE,dos);
					
					// String
				
						writeString(this.ESM_ATENCION_SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESM_ATENCION_FUERZA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESM_ATENCION_DIVIPOLA_ID);
					
					// String
				
						writeString(this.TIPO_ASIGNACION,dos);
					
					// String
				
						writeString(this.TIPO_SCITA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SCITAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPO_SCITA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TSCITAS_ID);
					
					// String
				
						writeString(this.PRIORITARIA,dos);
					
					// String
				
						writeString(this.ESTADO_SCITA,dos);
					
					// String
				
						writeString(this.USUARIO_SCITA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TASIGNACIONES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CITAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFESIONALES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PACIENTES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_SCITA,dos);
					
					// String
				
						writeString(this.USUARIO_CITA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTADO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TCITAS_ID);
					
					// String
				
						writeString(this.CONSULTORIO,dos);
					
					// String
				
						writeString(this.MOTIVOCONSULTA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TCAUSALES_ID);
					
					// String
				
						writeString(this.JUSTIFICACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_CREACION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPONIBLE,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAI_CITA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAF_CITA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_LLEGADA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAI_ATENCION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAF_ATENCION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESM_ATENCION_ID);
					
					// String
				
						writeString(this.CIE10,dos);
					
					// String
				
						writeString(this.DIAGNOSTICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ADMISIONES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TCITA_CHECK);
					
					// java.util.Date
				
						writeDate(this.FECHA_CANCELACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOC_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// String
				
						writeString(this.OBSERVACIONES_CITA,dos);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
					// String
				
						writeString(this.TIPO_CITA,dos);
					
					// String
				
						writeString(this.ESTADO_CITA,dos);
					
					// String
				
						writeString(this.TIPO_CAUSAL,dos);
					
					// String
				
						writeString(this.ESM_ATENCION_NOMBRE,dos);
					
					// String
				
						writeString(this.ESM_ATENCION_SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESM_ATENCION_FUERZA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESM_ATENCION_DIVIPOLA_ID);
					
					// String
				
						writeString(this.TIPO_ASIGNACION,dos);
					
					// String
				
						writeString(this.TIPO_SCITA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SCITAS_ID="+String.valueOf(SCITAS_ID));
		sb.append(",TIEMPO_SCITA="+String.valueOf(TIEMPO_SCITA));
		sb.append(",TSCITAS_ID="+String.valueOf(TSCITAS_ID));
		sb.append(",PRIORITARIA="+PRIORITARIA);
		sb.append(",ESTADO_SCITA="+ESTADO_SCITA);
		sb.append(",USUARIO_SCITA="+USUARIO_SCITA);
		sb.append(",TASIGNACIONES_ID="+String.valueOf(TASIGNACIONES_ID));
		sb.append(",CITAS_ID="+String.valueOf(CITAS_ID));
		sb.append(",PROFESIONALES_ID="+String.valueOf(PROFESIONALES_ID));
		sb.append(",PACIENTES_ID="+String.valueOf(PACIENTES_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",FECHA_SCITA="+String.valueOf(FECHA_SCITA));
		sb.append(",USUARIO_CITA="+USUARIO_CITA);
		sb.append(",ESTADO_ID="+String.valueOf(ESTADO_ID));
		sb.append(",TCITAS_ID="+String.valueOf(TCITAS_ID));
		sb.append(",CONSULTORIO="+CONSULTORIO);
		sb.append(",MOTIVOCONSULTA="+MOTIVOCONSULTA);
		sb.append(",TCAUSALES_ID="+String.valueOf(TCAUSALES_ID));
		sb.append(",JUSTIFICACION="+JUSTIFICACION);
		sb.append(",FECHA_CREACION="+String.valueOf(FECHA_CREACION));
		sb.append(",FDISPONIBLE="+String.valueOf(FDISPONIBLE));
		sb.append(",FECHAI_CITA="+String.valueOf(FECHAI_CITA));
		sb.append(",FECHAF_CITA="+String.valueOf(FECHAF_CITA));
		sb.append(",FECHA_LLEGADA="+String.valueOf(FECHA_LLEGADA));
		sb.append(",FECHAI_ATENCION="+String.valueOf(FECHAI_ATENCION));
		sb.append(",FECHAF_ATENCION="+String.valueOf(FECHAF_ATENCION));
		sb.append(",ESM_ATENCION_ID="+String.valueOf(ESM_ATENCION_ID));
		sb.append(",CIE10="+CIE10);
		sb.append(",DIAGNOSTICO="+DIAGNOSTICO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",ADMISIONES_ID="+String.valueOf(ADMISIONES_ID));
		sb.append(",TCITA_CHECK="+String.valueOf(TCITA_CHECK));
		sb.append(",FECHA_CANCELACION="+String.valueOf(FECHA_CANCELACION));
		sb.append(",TIEMPOC_ID="+String.valueOf(TIEMPOC_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",OBSERVACIONES_CITA="+OBSERVACIONES_CITA);
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",TIPO_CITA="+TIPO_CITA);
		sb.append(",ESTADO_CITA="+ESTADO_CITA);
		sb.append(",TIPO_CAUSAL="+TIPO_CAUSAL);
		sb.append(",ESM_ATENCION_NOMBRE="+ESM_ATENCION_NOMBRE);
		sb.append(",ESM_ATENCION_SIGLA="+ESM_ATENCION_SIGLA);
		sb.append(",ESM_ATENCION_FUERZA_ID="+String.valueOf(ESM_ATENCION_FUERZA_ID));
		sb.append(",ESM_ATENCION_DIVIPOLA_ID="+String.valueOf(ESM_ATENCION_DIVIPOLA_ID));
		sb.append(",TIPO_ASIGNACION="+TIPO_ASIGNACION);
		sb.append(",TIPO_SCITA="+TIPO_SCITA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out_1Struct implements routines.system.IPersistableRow<out_1Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];

	
			    public BigDecimal SCITAS_ID;

				public BigDecimal getSCITAS_ID () {
					return this.SCITAS_ID;
				}

				public Boolean SCITAS_IDIsNullable(){
				    return false;
				}
				public Boolean SCITAS_IDIsKey(){
				    return false;
				}
				public Integer SCITAS_IDLength(){
				    return 0;
				}
				public Integer SCITAS_IDPrecision(){
				    return null;
				}
				public String SCITAS_IDDefault(){
				
					return "";
				
				}
				public String SCITAS_IDComment(){
				
				    return "";
				
				}
				public String SCITAS_IDPattern(){
				
					return "";
				
				}
				public String SCITAS_IDOriginalDbColumnName(){
				
					return "SCITAS_ID";
				
				}

				
			    public BigDecimal TIEMPO_SCITA;

				public BigDecimal getTIEMPO_SCITA () {
					return this.TIEMPO_SCITA;
				}

				public Boolean TIEMPO_SCITAIsNullable(){
				    return false;
				}
				public Boolean TIEMPO_SCITAIsKey(){
				    return false;
				}
				public Integer TIEMPO_SCITALength(){
				    return 0;
				}
				public Integer TIEMPO_SCITAPrecision(){
				    return null;
				}
				public String TIEMPO_SCITADefault(){
				
					return "";
				
				}
				public String TIEMPO_SCITAComment(){
				
				    return "";
				
				}
				public String TIEMPO_SCITAPattern(){
				
					return "";
				
				}
				public String TIEMPO_SCITAOriginalDbColumnName(){
				
					return "TIEMPO_SCITA";
				
				}

				
			    public BigDecimal TSCITAS_ID;

				public BigDecimal getTSCITAS_ID () {
					return this.TSCITAS_ID;
				}

				public Boolean TSCITAS_IDIsNullable(){
				    return true;
				}
				public Boolean TSCITAS_IDIsKey(){
				    return false;
				}
				public Integer TSCITAS_IDLength(){
				    return 0;
				}
				public Integer TSCITAS_IDPrecision(){
				    return null;
				}
				public String TSCITAS_IDDefault(){
				
					return "";
				
				}
				public String TSCITAS_IDComment(){
				
				    return "";
				
				}
				public String TSCITAS_IDPattern(){
				
					return "";
				
				}
				public String TSCITAS_IDOriginalDbColumnName(){
				
					return "TSCITAS_ID";
				
				}

				
			    public String PRIORITARIA;

				public String getPRIORITARIA () {
					return this.PRIORITARIA;
				}

				public Boolean PRIORITARIAIsNullable(){
				    return false;
				}
				public Boolean PRIORITARIAIsKey(){
				    return false;
				}
				public Integer PRIORITARIALength(){
				    return 2;
				}
				public Integer PRIORITARIAPrecision(){
				    return 0;
				}
				public String PRIORITARIADefault(){
				
					return null;
				
				}
				public String PRIORITARIAComment(){
				
				    return "";
				
				}
				public String PRIORITARIAPattern(){
				
					return "";
				
				}
				public String PRIORITARIAOriginalDbColumnName(){
				
					return "PRIORITARIA";
				
				}

				
			    public String ESTADO_SCITA;

				public String getESTADO_SCITA () {
					return this.ESTADO_SCITA;
				}

				public Boolean ESTADO_SCITAIsNullable(){
				    return false;
				}
				public Boolean ESTADO_SCITAIsKey(){
				    return false;
				}
				public Integer ESTADO_SCITALength(){
				    return 10;
				}
				public Integer ESTADO_SCITAPrecision(){
				    return 0;
				}
				public String ESTADO_SCITADefault(){
				
					return null;
				
				}
				public String ESTADO_SCITAComment(){
				
				    return "";
				
				}
				public String ESTADO_SCITAPattern(){
				
					return "";
				
				}
				public String ESTADO_SCITAOriginalDbColumnName(){
				
					return "ESTADO_SCITA";
				
				}

				
			    public String USUARIO_SCITA;

				public String getUSUARIO_SCITA () {
					return this.USUARIO_SCITA;
				}

				public Boolean USUARIO_SCITAIsNullable(){
				    return false;
				}
				public Boolean USUARIO_SCITAIsKey(){
				    return false;
				}
				public Integer USUARIO_SCITALength(){
				    return 500;
				}
				public Integer USUARIO_SCITAPrecision(){
				    return 0;
				}
				public String USUARIO_SCITADefault(){
				
					return null;
				
				}
				public String USUARIO_SCITAComment(){
				
				    return "";
				
				}
				public String USUARIO_SCITAPattern(){
				
					return "";
				
				}
				public String USUARIO_SCITAOriginalDbColumnName(){
				
					return "USUARIO_SCITA";
				
				}

				
			    public BigDecimal TASIGNACIONES_ID;

				public BigDecimal getTASIGNACIONES_ID () {
					return this.TASIGNACIONES_ID;
				}

				public Boolean TASIGNACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean TASIGNACIONES_IDIsKey(){
				    return false;
				}
				public Integer TASIGNACIONES_IDLength(){
				    return 0;
				}
				public Integer TASIGNACIONES_IDPrecision(){
				    return null;
				}
				public String TASIGNACIONES_IDDefault(){
				
					return "";
				
				}
				public String TASIGNACIONES_IDComment(){
				
				    return "";
				
				}
				public String TASIGNACIONES_IDPattern(){
				
					return "";
				
				}
				public String TASIGNACIONES_IDOriginalDbColumnName(){
				
					return "TASIGNACIONES_ID";
				
				}

				
			    public BigDecimal CITAS_ID;

				public BigDecimal getCITAS_ID () {
					return this.CITAS_ID;
				}

				public Boolean CITAS_IDIsNullable(){
				    return false;
				}
				public Boolean CITAS_IDIsKey(){
				    return false;
				}
				public Integer CITAS_IDLength(){
				    return 0;
				}
				public Integer CITAS_IDPrecision(){
				    return null;
				}
				public String CITAS_IDDefault(){
				
					return "";
				
				}
				public String CITAS_IDComment(){
				
				    return "";
				
				}
				public String CITAS_IDPattern(){
				
					return "";
				
				}
				public String CITAS_IDOriginalDbColumnName(){
				
					return "CITAS_ID";
				
				}

				
			    public BigDecimal PROFESIONALES_ID;

				public BigDecimal getPROFESIONALES_ID () {
					return this.PROFESIONALES_ID;
				}

				public Boolean PROFESIONALES_IDIsNullable(){
				    return true;
				}
				public Boolean PROFESIONALES_IDIsKey(){
				    return false;
				}
				public Integer PROFESIONALES_IDLength(){
				    return 0;
				}
				public Integer PROFESIONALES_IDPrecision(){
				    return null;
				}
				public String PROFESIONALES_IDDefault(){
				
					return "";
				
				}
				public String PROFESIONALES_IDComment(){
				
				    return "";
				
				}
				public String PROFESIONALES_IDPattern(){
				
					return "";
				
				}
				public String PROFESIONALES_IDOriginalDbColumnName(){
				
					return "PROFESIONALES_ID";
				
				}

				
			    public BigDecimal PACIENTES_ID;

				public BigDecimal getPACIENTES_ID () {
					return this.PACIENTES_ID;
				}

				public Boolean PACIENTES_IDIsNullable(){
				    return false;
				}
				public Boolean PACIENTES_IDIsKey(){
				    return false;
				}
				public Integer PACIENTES_IDLength(){
				    return 0;
				}
				public Integer PACIENTES_IDPrecision(){
				    return null;
				}
				public String PACIENTES_IDDefault(){
				
					return "";
				
				}
				public String PACIENTES_IDComment(){
				
				    return "";
				
				}
				public String PACIENTES_IDPattern(){
				
					return "";
				
				}
				public String PACIENTES_IDOriginalDbColumnName(){
				
					return "PACIENTES_ID";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public java.util.Date FECHA_SCITA;

				public java.util.Date getFECHA_SCITA () {
					return this.FECHA_SCITA;
				}

				public Boolean FECHA_SCITAIsNullable(){
				    return false;
				}
				public Boolean FECHA_SCITAIsKey(){
				    return false;
				}
				public Integer FECHA_SCITALength(){
				    return 0;
				}
				public Integer FECHA_SCITAPrecision(){
				    return 0;
				}
				public String FECHA_SCITADefault(){
				
					return null;
				
				}
				public String FECHA_SCITAComment(){
				
				    return "";
				
				}
				public String FECHA_SCITAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_SCITAOriginalDbColumnName(){
				
					return "FECHA_SCITA";
				
				}

				
			    public String USUARIO_CITA;

				public String getUSUARIO_CITA () {
					return this.USUARIO_CITA;
				}

				public Boolean USUARIO_CITAIsNullable(){
				    return false;
				}
				public Boolean USUARIO_CITAIsKey(){
				    return false;
				}
				public Integer USUARIO_CITALength(){
				    return 500;
				}
				public Integer USUARIO_CITAPrecision(){
				    return 0;
				}
				public String USUARIO_CITADefault(){
				
					return null;
				
				}
				public String USUARIO_CITAComment(){
				
				    return "";
				
				}
				public String USUARIO_CITAPattern(){
				
					return "";
				
				}
				public String USUARIO_CITAOriginalDbColumnName(){
				
					return "USUARIO_CITA";
				
				}

				
			    public BigDecimal ESTADO_ID;

				public BigDecimal getESTADO_ID () {
					return this.ESTADO_ID;
				}

				public Boolean ESTADO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTADO_IDIsKey(){
				    return false;
				}
				public Integer ESTADO_IDLength(){
				    return 0;
				}
				public Integer ESTADO_IDPrecision(){
				    return null;
				}
				public String ESTADO_IDDefault(){
				
					return "";
				
				}
				public String ESTADO_IDComment(){
				
				    return "";
				
				}
				public String ESTADO_IDPattern(){
				
					return "";
				
				}
				public String ESTADO_IDOriginalDbColumnName(){
				
					return "ESTADO_ID";
				
				}

				
			    public BigDecimal TCITAS_ID;

				public BigDecimal getTCITAS_ID () {
					return this.TCITAS_ID;
				}

				public Boolean TCITAS_IDIsNullable(){
				    return true;
				}
				public Boolean TCITAS_IDIsKey(){
				    return false;
				}
				public Integer TCITAS_IDLength(){
				    return 0;
				}
				public Integer TCITAS_IDPrecision(){
				    return null;
				}
				public String TCITAS_IDDefault(){
				
					return "";
				
				}
				public String TCITAS_IDComment(){
				
				    return "";
				
				}
				public String TCITAS_IDPattern(){
				
					return "";
				
				}
				public String TCITAS_IDOriginalDbColumnName(){
				
					return "TCITAS_ID";
				
				}

				
			    public String CONSULTORIO;

				public String getCONSULTORIO () {
					return this.CONSULTORIO;
				}

				public Boolean CONSULTORIOIsNullable(){
				    return true;
				}
				public Boolean CONSULTORIOIsKey(){
				    return false;
				}
				public Integer CONSULTORIOLength(){
				    return 50;
				}
				public Integer CONSULTORIOPrecision(){
				    return 0;
				}
				public String CONSULTORIODefault(){
				
					return null;
				
				}
				public String CONSULTORIOComment(){
				
				    return "";
				
				}
				public String CONSULTORIOPattern(){
				
					return "";
				
				}
				public String CONSULTORIOOriginalDbColumnName(){
				
					return "CONSULTORIO";
				
				}

				
			    public String MOTIVOCONSULTA;

				public String getMOTIVOCONSULTA () {
					return this.MOTIVOCONSULTA;
				}

				public Boolean MOTIVOCONSULTAIsNullable(){
				    return true;
				}
				public Boolean MOTIVOCONSULTAIsKey(){
				    return false;
				}
				public Integer MOTIVOCONSULTALength(){
				    return 4000;
				}
				public Integer MOTIVOCONSULTAPrecision(){
				    return 0;
				}
				public String MOTIVOCONSULTADefault(){
				
					return null;
				
				}
				public String MOTIVOCONSULTAComment(){
				
				    return "";
				
				}
				public String MOTIVOCONSULTAPattern(){
				
					return "";
				
				}
				public String MOTIVOCONSULTAOriginalDbColumnName(){
				
					return "MOTIVOCONSULTA";
				
				}

				
			    public BigDecimal TCAUSALES_ID;

				public BigDecimal getTCAUSALES_ID () {
					return this.TCAUSALES_ID;
				}

				public Boolean TCAUSALES_IDIsNullable(){
				    return true;
				}
				public Boolean TCAUSALES_IDIsKey(){
				    return false;
				}
				public Integer TCAUSALES_IDLength(){
				    return 0;
				}
				public Integer TCAUSALES_IDPrecision(){
				    return null;
				}
				public String TCAUSALES_IDDefault(){
				
					return "";
				
				}
				public String TCAUSALES_IDComment(){
				
				    return "";
				
				}
				public String TCAUSALES_IDPattern(){
				
					return "";
				
				}
				public String TCAUSALES_IDOriginalDbColumnName(){
				
					return "TCAUSALES_ID";
				
				}

				
			    public String JUSTIFICACION;

				public String getJUSTIFICACION () {
					return this.JUSTIFICACION;
				}

				public Boolean JUSTIFICACIONIsNullable(){
				    return true;
				}
				public Boolean JUSTIFICACIONIsKey(){
				    return false;
				}
				public Integer JUSTIFICACIONLength(){
				    return 4000;
				}
				public Integer JUSTIFICACIONPrecision(){
				    return 0;
				}
				public String JUSTIFICACIONDefault(){
				
					return null;
				
				}
				public String JUSTIFICACIONComment(){
				
				    return "";
				
				}
				public String JUSTIFICACIONPattern(){
				
					return "";
				
				}
				public String JUSTIFICACIONOriginalDbColumnName(){
				
					return "JUSTIFICACION";
				
				}

				
			    public java.util.Date FECHA_CREACION;

				public java.util.Date getFECHA_CREACION () {
					return this.FECHA_CREACION;
				}

				public Boolean FECHA_CREACIONIsNullable(){
				    return false;
				}
				public Boolean FECHA_CREACIONIsKey(){
				    return false;
				}
				public Integer FECHA_CREACIONLength(){
				    return 0;
				}
				public Integer FECHA_CREACIONPrecision(){
				    return 0;
				}
				public String FECHA_CREACIONDefault(){
				
					return null;
				
				}
				public String FECHA_CREACIONComment(){
				
				    return "";
				
				}
				public String FECHA_CREACIONPattern(){
				
					return "";
				
				}
				public String FECHA_CREACIONOriginalDbColumnName(){
				
					return "FECHA_CREACION";
				
				}

				
			    public java.util.Date FDISPONIBLE;

				public java.util.Date getFDISPONIBLE () {
					return this.FDISPONIBLE;
				}

				public Boolean FDISPONIBLEIsNullable(){
				    return true;
				}
				public Boolean FDISPONIBLEIsKey(){
				    return false;
				}
				public Integer FDISPONIBLELength(){
				    return 0;
				}
				public Integer FDISPONIBLEPrecision(){
				    return 0;
				}
				public String FDISPONIBLEDefault(){
				
					return null;
				
				}
				public String FDISPONIBLEComment(){
				
				    return "";
				
				}
				public String FDISPONIBLEPattern(){
				
					return "";
				
				}
				public String FDISPONIBLEOriginalDbColumnName(){
				
					return "FDISPONIBLE";
				
				}

				
			    public java.util.Date FECHAI_CITA;

				public java.util.Date getFECHAI_CITA () {
					return this.FECHAI_CITA;
				}

				public Boolean FECHAI_CITAIsNullable(){
				    return true;
				}
				public Boolean FECHAI_CITAIsKey(){
				    return false;
				}
				public Integer FECHAI_CITALength(){
				    return 0;
				}
				public Integer FECHAI_CITAPrecision(){
				    return 0;
				}
				public String FECHAI_CITADefault(){
				
					return null;
				
				}
				public String FECHAI_CITAComment(){
				
				    return "";
				
				}
				public String FECHAI_CITAPattern(){
				
					return "";
				
				}
				public String FECHAI_CITAOriginalDbColumnName(){
				
					return "FECHAI_CITA";
				
				}

				
			    public java.util.Date FECHAF_CITA;

				public java.util.Date getFECHAF_CITA () {
					return this.FECHAF_CITA;
				}

				public Boolean FECHAF_CITAIsNullable(){
				    return true;
				}
				public Boolean FECHAF_CITAIsKey(){
				    return false;
				}
				public Integer FECHAF_CITALength(){
				    return 0;
				}
				public Integer FECHAF_CITAPrecision(){
				    return 0;
				}
				public String FECHAF_CITADefault(){
				
					return null;
				
				}
				public String FECHAF_CITAComment(){
				
				    return "";
				
				}
				public String FECHAF_CITAPattern(){
				
					return "";
				
				}
				public String FECHAF_CITAOriginalDbColumnName(){
				
					return "FECHAF_CITA";
				
				}

				
			    public java.util.Date FECHA_LLEGADA;

				public java.util.Date getFECHA_LLEGADA () {
					return this.FECHA_LLEGADA;
				}

				public Boolean FECHA_LLEGADAIsNullable(){
				    return true;
				}
				public Boolean FECHA_LLEGADAIsKey(){
				    return false;
				}
				public Integer FECHA_LLEGADALength(){
				    return 0;
				}
				public Integer FECHA_LLEGADAPrecision(){
				    return 0;
				}
				public String FECHA_LLEGADADefault(){
				
					return null;
				
				}
				public String FECHA_LLEGADAComment(){
				
				    return "";
				
				}
				public String FECHA_LLEGADAPattern(){
				
					return "";
				
				}
				public String FECHA_LLEGADAOriginalDbColumnName(){
				
					return "FECHA_LLEGADA";
				
				}

				
			    public java.util.Date FECHAI_ATENCION;

				public java.util.Date getFECHAI_ATENCION () {
					return this.FECHAI_ATENCION;
				}

				public Boolean FECHAI_ATENCIONIsNullable(){
				    return true;
				}
				public Boolean FECHAI_ATENCIONIsKey(){
				    return false;
				}
				public Integer FECHAI_ATENCIONLength(){
				    return 0;
				}
				public Integer FECHAI_ATENCIONPrecision(){
				    return 0;
				}
				public String FECHAI_ATENCIONDefault(){
				
					return null;
				
				}
				public String FECHAI_ATENCIONComment(){
				
				    return "";
				
				}
				public String FECHAI_ATENCIONPattern(){
				
					return "";
				
				}
				public String FECHAI_ATENCIONOriginalDbColumnName(){
				
					return "FECHAI_ATENCION";
				
				}

				
			    public java.util.Date FECHAF_ATENCION;

				public java.util.Date getFECHAF_ATENCION () {
					return this.FECHAF_ATENCION;
				}

				public Boolean FECHAF_ATENCIONIsNullable(){
				    return true;
				}
				public Boolean FECHAF_ATENCIONIsKey(){
				    return false;
				}
				public Integer FECHAF_ATENCIONLength(){
				    return 0;
				}
				public Integer FECHAF_ATENCIONPrecision(){
				    return 0;
				}
				public String FECHAF_ATENCIONDefault(){
				
					return null;
				
				}
				public String FECHAF_ATENCIONComment(){
				
				    return "";
				
				}
				public String FECHAF_ATENCIONPattern(){
				
					return "";
				
				}
				public String FECHAF_ATENCIONOriginalDbColumnName(){
				
					return "FECHAF_ATENCION";
				
				}

				
			    public BigDecimal ESM_ATENCION_ID;

				public BigDecimal getESM_ATENCION_ID () {
					return this.ESM_ATENCION_ID;
				}

				public Boolean ESM_ATENCION_IDIsNullable(){
				    return false;
				}
				public Boolean ESM_ATENCION_IDIsKey(){
				    return false;
				}
				public Integer ESM_ATENCION_IDLength(){
				    return 0;
				}
				public Integer ESM_ATENCION_IDPrecision(){
				    return null;
				}
				public String ESM_ATENCION_IDDefault(){
				
					return "";
				
				}
				public String ESM_ATENCION_IDComment(){
				
				    return "";
				
				}
				public String ESM_ATENCION_IDPattern(){
				
					return "";
				
				}
				public String ESM_ATENCION_IDOriginalDbColumnName(){
				
					return "ESM_ATENCION_ID";
				
				}

				
			    public String CIE10;

				public String getCIE10 () {
					return this.CIE10;
				}

				public Boolean CIE10IsNullable(){
				    return true;
				}
				public Boolean CIE10IsKey(){
				    return false;
				}
				public Integer CIE10Length(){
				    return 10;
				}
				public Integer CIE10Precision(){
				    return 0;
				}
				public String CIE10Default(){
				
					return null;
				
				}
				public String CIE10Comment(){
				
				    return "";
				
				}
				public String CIE10Pattern(){
				
					return "";
				
				}
				public String CIE10OriginalDbColumnName(){
				
					return "CIE10";
				
				}

				
			    public String DIAGNOSTICO;

				public String getDIAGNOSTICO () {
					return this.DIAGNOSTICO;
				}

				public Boolean DIAGNOSTICOIsNullable(){
				    return true;
				}
				public Boolean DIAGNOSTICOIsKey(){
				    return false;
				}
				public Integer DIAGNOSTICOLength(){
				    return 500;
				}
				public Integer DIAGNOSTICOPrecision(){
				    return 0;
				}
				public String DIAGNOSTICODefault(){
				
					return null;
				
				}
				public String DIAGNOSTICOComment(){
				
				    return "";
				
				}
				public String DIAGNOSTICOPattern(){
				
					return "";
				
				}
				public String DIAGNOSTICOOriginalDbColumnName(){
				
					return "DIAGNOSTICO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public BigDecimal ADMISIONES_ID;

				public BigDecimal getADMISIONES_ID () {
					return this.ADMISIONES_ID;
				}

				public Boolean ADMISIONES_IDIsNullable(){
				    return true;
				}
				public Boolean ADMISIONES_IDIsKey(){
				    return false;
				}
				public Integer ADMISIONES_IDLength(){
				    return null;
				}
				public Integer ADMISIONES_IDPrecision(){
				    return null;
				}
				public String ADMISIONES_IDDefault(){
				
					return null;
				
				}
				public String ADMISIONES_IDComment(){
				
				    return "";
				
				}
				public String ADMISIONES_IDPattern(){
				
					return "";
				
				}
				public String ADMISIONES_IDOriginalDbColumnName(){
				
					return "ADMISIONES_ID";
				
				}

				
			    public BigDecimal TCITA_CHECK;

				public BigDecimal getTCITA_CHECK () {
					return this.TCITA_CHECK;
				}

				public Boolean TCITA_CHECKIsNullable(){
				    return true;
				}
				public Boolean TCITA_CHECKIsKey(){
				    return false;
				}
				public Integer TCITA_CHECKLength(){
				    return null;
				}
				public Integer TCITA_CHECKPrecision(){
				    return null;
				}
				public String TCITA_CHECKDefault(){
				
					return null;
				
				}
				public String TCITA_CHECKComment(){
				
				    return "";
				
				}
				public String TCITA_CHECKPattern(){
				
					return "";
				
				}
				public String TCITA_CHECKOriginalDbColumnName(){
				
					return "TCITA_CHECK";
				
				}

				
			    public java.util.Date FECHA_CANCELACION;

				public java.util.Date getFECHA_CANCELACION () {
					return this.FECHA_CANCELACION;
				}

				public Boolean FECHA_CANCELACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_CANCELACIONIsKey(){
				    return false;
				}
				public Integer FECHA_CANCELACIONLength(){
				    return null;
				}
				public Integer FECHA_CANCELACIONPrecision(){
				    return null;
				}
				public String FECHA_CANCELACIONDefault(){
				
					return null;
				
				}
				public String FECHA_CANCELACIONComment(){
				
				    return "";
				
				}
				public String FECHA_CANCELACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_CANCELACIONOriginalDbColumnName(){
				
					return "FECHA_CANCELACION";
				
				}

				
			    public String OBSERVACIONES_CITA;

				public String getOBSERVACIONES_CITA () {
					return this.OBSERVACIONES_CITA;
				}

				public Boolean OBSERVACIONES_CITAIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONES_CITAIsKey(){
				    return false;
				}
				public Integer OBSERVACIONES_CITALength(){
				    return 4000;
				}
				public Integer OBSERVACIONES_CITAPrecision(){
				    return 0;
				}
				public String OBSERVACIONES_CITADefault(){
				
					return null;
				
				}
				public String OBSERVACIONES_CITAComment(){
				
				    return "";
				
				}
				public String OBSERVACIONES_CITAPattern(){
				
					return "";
				
				}
				public String OBSERVACIONES_CITAOriginalDbColumnName(){
				
					return "OBSERVACIONES_CITA";
				
				}

				
			    public BigDecimal TIEMPOC_ID;

				public BigDecimal getTIEMPOC_ID () {
					return this.TIEMPOC_ID;
				}

				public Boolean TIEMPOC_IDIsNullable(){
				    return true;
				}
				public Boolean TIEMPOC_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOC_IDLength(){
				    return null;
				}
				public Integer TIEMPOC_IDPrecision(){
				    return null;
				}
				public String TIEMPOC_IDDefault(){
				
					return null;
				
				}
				public String TIEMPOC_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOC_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOC_IDOriginalDbColumnName(){
				
					return "TIEMPOC_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return true;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return null;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return null;
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 31;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return true;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return null;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.SCITAS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPO_SCITA = (BigDecimal) dis.readObject();
					
						this.TSCITAS_ID = (BigDecimal) dis.readObject();
					
					this.PRIORITARIA = readString(dis);
					
					this.ESTADO_SCITA = readString(dis);
					
					this.USUARIO_SCITA = readString(dis);
					
						this.TASIGNACIONES_ID = (BigDecimal) dis.readObject();
					
						this.CITAS_ID = (BigDecimal) dis.readObject();
					
						this.PROFESIONALES_ID = (BigDecimal) dis.readObject();
					
						this.PACIENTES_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_SCITA = readDate(dis);
					
					this.USUARIO_CITA = readString(dis);
					
						this.ESTADO_ID = (BigDecimal) dis.readObject();
					
						this.TCITAS_ID = (BigDecimal) dis.readObject();
					
					this.CONSULTORIO = readString(dis);
					
					this.MOTIVOCONSULTA = readString(dis);
					
						this.TCAUSALES_ID = (BigDecimal) dis.readObject();
					
					this.JUSTIFICACION = readString(dis);
					
					this.FECHA_CREACION = readDate(dis);
					
					this.FDISPONIBLE = readDate(dis);
					
					this.FECHAI_CITA = readDate(dis);
					
					this.FECHAF_CITA = readDate(dis);
					
					this.FECHA_LLEGADA = readDate(dis);
					
					this.FECHAI_ATENCION = readDate(dis);
					
					this.FECHAF_ATENCION = readDate(dis);
					
						this.ESM_ATENCION_ID = (BigDecimal) dis.readObject();
					
					this.CIE10 = readString(dis);
					
					this.DIAGNOSTICO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.ADMISIONES_ID = (BigDecimal) dis.readObject();
					
						this.TCITA_CHECK = (BigDecimal) dis.readObject();
					
					this.FECHA_CANCELACION = readDate(dis);
					
					this.OBSERVACIONES_CITA = readString(dis);
					
						this.TIEMPOC_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_USUARIO = readString(dis);
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.SCITAS_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPO_SCITA = (BigDecimal) dis.readObject();
					
						this.TSCITAS_ID = (BigDecimal) dis.readObject();
					
					this.PRIORITARIA = readString(dis);
					
					this.ESTADO_SCITA = readString(dis);
					
					this.USUARIO_SCITA = readString(dis);
					
						this.TASIGNACIONES_ID = (BigDecimal) dis.readObject();
					
						this.CITAS_ID = (BigDecimal) dis.readObject();
					
						this.PROFESIONALES_ID = (BigDecimal) dis.readObject();
					
						this.PACIENTES_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
					this.FECHA_SCITA = readDate(dis);
					
					this.USUARIO_CITA = readString(dis);
					
						this.ESTADO_ID = (BigDecimal) dis.readObject();
					
						this.TCITAS_ID = (BigDecimal) dis.readObject();
					
					this.CONSULTORIO = readString(dis);
					
					this.MOTIVOCONSULTA = readString(dis);
					
						this.TCAUSALES_ID = (BigDecimal) dis.readObject();
					
					this.JUSTIFICACION = readString(dis);
					
					this.FECHA_CREACION = readDate(dis);
					
					this.FDISPONIBLE = readDate(dis);
					
					this.FECHAI_CITA = readDate(dis);
					
					this.FECHAF_CITA = readDate(dis);
					
					this.FECHA_LLEGADA = readDate(dis);
					
					this.FECHAI_ATENCION = readDate(dis);
					
					this.FECHAF_ATENCION = readDate(dis);
					
						this.ESM_ATENCION_ID = (BigDecimal) dis.readObject();
					
					this.CIE10 = readString(dis);
					
					this.DIAGNOSTICO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.ADMISIONES_ID = (BigDecimal) dis.readObject();
					
						this.TCITA_CHECK = (BigDecimal) dis.readObject();
					
					this.FECHA_CANCELACION = readDate(dis);
					
					this.OBSERVACIONES_CITA = readString(dis);
					
						this.TIEMPOC_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_USUARIO = readString(dis);
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.SCITAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPO_SCITA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TSCITAS_ID);
					
					// String
				
						writeString(this.PRIORITARIA,dos);
					
					// String
				
						writeString(this.ESTADO_SCITA,dos);
					
					// String
				
						writeString(this.USUARIO_SCITA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TASIGNACIONES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CITAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFESIONALES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PACIENTES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_SCITA,dos);
					
					// String
				
						writeString(this.USUARIO_CITA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTADO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TCITAS_ID);
					
					// String
				
						writeString(this.CONSULTORIO,dos);
					
					// String
				
						writeString(this.MOTIVOCONSULTA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TCAUSALES_ID);
					
					// String
				
						writeString(this.JUSTIFICACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_CREACION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPONIBLE,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAI_CITA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAF_CITA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_LLEGADA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAI_ATENCION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAF_ATENCION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESM_ATENCION_ID);
					
					// String
				
						writeString(this.CIE10,dos);
					
					// String
				
						writeString(this.DIAGNOSTICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADMISIONES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TCITA_CHECK);
					
					// java.util.Date
				
						writeDate(this.FECHA_CANCELACION,dos);
					
					// String
				
						writeString(this.OBSERVACIONES_CITA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOC_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SCITAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPO_SCITA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TSCITAS_ID);
					
					// String
				
						writeString(this.PRIORITARIA,dos);
					
					// String
				
						writeString(this.ESTADO_SCITA,dos);
					
					// String
				
						writeString(this.USUARIO_SCITA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TASIGNACIONES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CITAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFESIONALES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PACIENTES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA_SCITA,dos);
					
					// String
				
						writeString(this.USUARIO_CITA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTADO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TCITAS_ID);
					
					// String
				
						writeString(this.CONSULTORIO,dos);
					
					// String
				
						writeString(this.MOTIVOCONSULTA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TCAUSALES_ID);
					
					// String
				
						writeString(this.JUSTIFICACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_CREACION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPONIBLE,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAI_CITA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAF_CITA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_LLEGADA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAI_ATENCION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAF_ATENCION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESM_ATENCION_ID);
					
					// String
				
						writeString(this.CIE10,dos);
					
					// String
				
						writeString(this.DIAGNOSTICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ADMISIONES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TCITA_CHECK);
					
					// java.util.Date
				
						writeDate(this.FECHA_CANCELACION,dos);
					
					// String
				
						writeString(this.OBSERVACIONES_CITA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOC_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SCITAS_ID="+String.valueOf(SCITAS_ID));
		sb.append(",TIEMPO_SCITA="+String.valueOf(TIEMPO_SCITA));
		sb.append(",TSCITAS_ID="+String.valueOf(TSCITAS_ID));
		sb.append(",PRIORITARIA="+PRIORITARIA);
		sb.append(",ESTADO_SCITA="+ESTADO_SCITA);
		sb.append(",USUARIO_SCITA="+USUARIO_SCITA);
		sb.append(",TASIGNACIONES_ID="+String.valueOf(TASIGNACIONES_ID));
		sb.append(",CITAS_ID="+String.valueOf(CITAS_ID));
		sb.append(",PROFESIONALES_ID="+String.valueOf(PROFESIONALES_ID));
		sb.append(",PACIENTES_ID="+String.valueOf(PACIENTES_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",FECHA_SCITA="+String.valueOf(FECHA_SCITA));
		sb.append(",USUARIO_CITA="+USUARIO_CITA);
		sb.append(",ESTADO_ID="+String.valueOf(ESTADO_ID));
		sb.append(",TCITAS_ID="+String.valueOf(TCITAS_ID));
		sb.append(",CONSULTORIO="+CONSULTORIO);
		sb.append(",MOTIVOCONSULTA="+MOTIVOCONSULTA);
		sb.append(",TCAUSALES_ID="+String.valueOf(TCAUSALES_ID));
		sb.append(",JUSTIFICACION="+JUSTIFICACION);
		sb.append(",FECHA_CREACION="+String.valueOf(FECHA_CREACION));
		sb.append(",FDISPONIBLE="+String.valueOf(FDISPONIBLE));
		sb.append(",FECHAI_CITA="+String.valueOf(FECHAI_CITA));
		sb.append(",FECHAF_CITA="+String.valueOf(FECHAF_CITA));
		sb.append(",FECHA_LLEGADA="+String.valueOf(FECHA_LLEGADA));
		sb.append(",FECHAI_ATENCION="+String.valueOf(FECHAI_ATENCION));
		sb.append(",FECHAF_ATENCION="+String.valueOf(FECHAF_ATENCION));
		sb.append(",ESM_ATENCION_ID="+String.valueOf(ESM_ATENCION_ID));
		sb.append(",CIE10="+CIE10);
		sb.append(",DIAGNOSTICO="+DIAGNOSTICO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",ADMISIONES_ID="+String.valueOf(ADMISIONES_ID));
		sb.append(",TCITA_CHECK="+String.valueOf(TCITA_CHECK));
		sb.append(",FECHA_CANCELACION="+String.valueOf(FECHA_CANCELACION));
		sb.append(",OBSERVACIONES_CITA="+OBSERVACIONES_CITA);
		sb.append(",TIEMPOC_ID="+String.valueOf(TIEMPOC_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];

	
			    public BigDecimal SCITAS_ID;

				public BigDecimal getSCITAS_ID () {
					return this.SCITAS_ID;
				}

				public Boolean SCITAS_IDIsNullable(){
				    return false;
				}
				public Boolean SCITAS_IDIsKey(){
				    return false;
				}
				public Integer SCITAS_IDLength(){
				    return 0;
				}
				public Integer SCITAS_IDPrecision(){
				    return null;
				}
				public String SCITAS_IDDefault(){
				
					return "";
				
				}
				public String SCITAS_IDComment(){
				
				    return "";
				
				}
				public String SCITAS_IDPattern(){
				
					return "";
				
				}
				public String SCITAS_IDOriginalDbColumnName(){
				
					return "SCITAS_ID";
				
				}

				
			    public BigDecimal TSCITAS_ID;

				public BigDecimal getTSCITAS_ID () {
					return this.TSCITAS_ID;
				}

				public Boolean TSCITAS_IDIsNullable(){
				    return true;
				}
				public Boolean TSCITAS_IDIsKey(){
				    return false;
				}
				public Integer TSCITAS_IDLength(){
				    return 0;
				}
				public Integer TSCITAS_IDPrecision(){
				    return null;
				}
				public String TSCITAS_IDDefault(){
				
					return "";
				
				}
				public String TSCITAS_IDComment(){
				
				    return "";
				
				}
				public String TSCITAS_IDPattern(){
				
					return "";
				
				}
				public String TSCITAS_IDOriginalDbColumnName(){
				
					return "TSCITAS_ID";
				
				}

				
			    public String PRIORITARIA;

				public String getPRIORITARIA () {
					return this.PRIORITARIA;
				}

				public Boolean PRIORITARIAIsNullable(){
				    return false;
				}
				public Boolean PRIORITARIAIsKey(){
				    return false;
				}
				public Integer PRIORITARIALength(){
				    return 2;
				}
				public Integer PRIORITARIAPrecision(){
				    return 0;
				}
				public String PRIORITARIADefault(){
				
					return null;
				
				}
				public String PRIORITARIAComment(){
				
				    return "";
				
				}
				public String PRIORITARIAPattern(){
				
					return "";
				
				}
				public String PRIORITARIAOriginalDbColumnName(){
				
					return "PRIORITARIA";
				
				}

				
			    public String ESTADO_SCITA;

				public String getESTADO_SCITA () {
					return this.ESTADO_SCITA;
				}

				public Boolean ESTADO_SCITAIsNullable(){
				    return false;
				}
				public Boolean ESTADO_SCITAIsKey(){
				    return false;
				}
				public Integer ESTADO_SCITALength(){
				    return 10;
				}
				public Integer ESTADO_SCITAPrecision(){
				    return 0;
				}
				public String ESTADO_SCITADefault(){
				
					return null;
				
				}
				public String ESTADO_SCITAComment(){
				
				    return "";
				
				}
				public String ESTADO_SCITAPattern(){
				
					return "";
				
				}
				public String ESTADO_SCITAOriginalDbColumnName(){
				
					return "ESTADO_SCITA";
				
				}

				
			    public String USUARIO_SCITA;

				public String getUSUARIO_SCITA () {
					return this.USUARIO_SCITA;
				}

				public Boolean USUARIO_SCITAIsNullable(){
				    return true;
				}
				public Boolean USUARIO_SCITAIsKey(){
				    return false;
				}
				public Integer USUARIO_SCITALength(){
				    return 500;
				}
				public Integer USUARIO_SCITAPrecision(){
				    return 0;
				}
				public String USUARIO_SCITADefault(){
				
					return null;
				
				}
				public String USUARIO_SCITAComment(){
				
				    return "";
				
				}
				public String USUARIO_SCITAPattern(){
				
					return "";
				
				}
				public String USUARIO_SCITAOriginalDbColumnName(){
				
					return "USUARIO_SCITA";
				
				}

				
			    public BigDecimal TASIGNACIONES_ID;

				public BigDecimal getTASIGNACIONES_ID () {
					return this.TASIGNACIONES_ID;
				}

				public Boolean TASIGNACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean TASIGNACIONES_IDIsKey(){
				    return false;
				}
				public Integer TASIGNACIONES_IDLength(){
				    return 0;
				}
				public Integer TASIGNACIONES_IDPrecision(){
				    return null;
				}
				public String TASIGNACIONES_IDDefault(){
				
					return "";
				
				}
				public String TASIGNACIONES_IDComment(){
				
				    return "";
				
				}
				public String TASIGNACIONES_IDPattern(){
				
					return "";
				
				}
				public String TASIGNACIONES_IDOriginalDbColumnName(){
				
					return "TASIGNACIONES_ID";
				
				}

				
			    public BigDecimal CITAS_ID;

				public BigDecimal getCITAS_ID () {
					return this.CITAS_ID;
				}

				public Boolean CITAS_IDIsNullable(){
				    return false;
				}
				public Boolean CITAS_IDIsKey(){
				    return false;
				}
				public Integer CITAS_IDLength(){
				    return 0;
				}
				public Integer CITAS_IDPrecision(){
				    return null;
				}
				public String CITAS_IDDefault(){
				
					return "";
				
				}
				public String CITAS_IDComment(){
				
				    return "";
				
				}
				public String CITAS_IDPattern(){
				
					return "";
				
				}
				public String CITAS_IDOriginalDbColumnName(){
				
					return "CITAS_ID";
				
				}

				
			    public BigDecimal PROFESIONALES_ID;

				public BigDecimal getPROFESIONALES_ID () {
					return this.PROFESIONALES_ID;
				}

				public Boolean PROFESIONALES_IDIsNullable(){
				    return true;
				}
				public Boolean PROFESIONALES_IDIsKey(){
				    return false;
				}
				public Integer PROFESIONALES_IDLength(){
				    return 0;
				}
				public Integer PROFESIONALES_IDPrecision(){
				    return null;
				}
				public String PROFESIONALES_IDDefault(){
				
					return "";
				
				}
				public String PROFESIONALES_IDComment(){
				
				    return "";
				
				}
				public String PROFESIONALES_IDPattern(){
				
					return "";
				
				}
				public String PROFESIONALES_IDOriginalDbColumnName(){
				
					return "PROFESIONALES_ID";
				
				}

				
			    public BigDecimal PACIENTES_ID;

				public BigDecimal getPACIENTES_ID () {
					return this.PACIENTES_ID;
				}

				public Boolean PACIENTES_IDIsNullable(){
				    return false;
				}
				public Boolean PACIENTES_IDIsKey(){
				    return false;
				}
				public Integer PACIENTES_IDLength(){
				    return 0;
				}
				public Integer PACIENTES_IDPrecision(){
				    return null;
				}
				public String PACIENTES_IDDefault(){
				
					return "";
				
				}
				public String PACIENTES_IDComment(){
				
				    return "";
				
				}
				public String PACIENTES_IDPattern(){
				
					return "";
				
				}
				public String PACIENTES_IDOriginalDbColumnName(){
				
					return "PACIENTES_ID";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal TIEMPO_SCITA;

				public BigDecimal getTIEMPO_SCITA () {
					return this.TIEMPO_SCITA;
				}

				public Boolean TIEMPO_SCITAIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_SCITAIsKey(){
				    return false;
				}
				public Integer TIEMPO_SCITALength(){
				    return 0;
				}
				public Integer TIEMPO_SCITAPrecision(){
				    return 0;
				}
				public String TIEMPO_SCITADefault(){
				
					return "";
				
				}
				public String TIEMPO_SCITAComment(){
				
				    return "";
				
				}
				public String TIEMPO_SCITAPattern(){
				
					return "";
				
				}
				public String TIEMPO_SCITAOriginalDbColumnName(){
				
					return "TIEMPO_SCITA";
				
				}

				
			    public java.util.Date FECHA_SCITA;

				public java.util.Date getFECHA_SCITA () {
					return this.FECHA_SCITA;
				}

				public Boolean FECHA_SCITAIsNullable(){
				    return false;
				}
				public Boolean FECHA_SCITAIsKey(){
				    return false;
				}
				public Integer FECHA_SCITALength(){
				    return 0;
				}
				public Integer FECHA_SCITAPrecision(){
				    return 0;
				}
				public String FECHA_SCITADefault(){
				
					return null;
				
				}
				public String FECHA_SCITAComment(){
				
				    return "";
				
				}
				public String FECHA_SCITAPattern(){
				
					return "";
				
				}
				public String FECHA_SCITAOriginalDbColumnName(){
				
					return "FECHA_SCITA";
				
				}

				
			    public String USUARIO_CITA;

				public String getUSUARIO_CITA () {
					return this.USUARIO_CITA;
				}

				public Boolean USUARIO_CITAIsNullable(){
				    return false;
				}
				public Boolean USUARIO_CITAIsKey(){
				    return false;
				}
				public Integer USUARIO_CITALength(){
				    return 500;
				}
				public Integer USUARIO_CITAPrecision(){
				    return 0;
				}
				public String USUARIO_CITADefault(){
				
					return null;
				
				}
				public String USUARIO_CITAComment(){
				
				    return "";
				
				}
				public String USUARIO_CITAPattern(){
				
					return "";
				
				}
				public String USUARIO_CITAOriginalDbColumnName(){
				
					return "USUARIO_CITA";
				
				}

				
			    public BigDecimal ESTADO_ID;

				public BigDecimal getESTADO_ID () {
					return this.ESTADO_ID;
				}

				public Boolean ESTADO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTADO_IDIsKey(){
				    return false;
				}
				public Integer ESTADO_IDLength(){
				    return 0;
				}
				public Integer ESTADO_IDPrecision(){
				    return null;
				}
				public String ESTADO_IDDefault(){
				
					return "";
				
				}
				public String ESTADO_IDComment(){
				
				    return "";
				
				}
				public String ESTADO_IDPattern(){
				
					return "";
				
				}
				public String ESTADO_IDOriginalDbColumnName(){
				
					return "ESTADO_ID";
				
				}

				
			    public BigDecimal TCITAS_ID;

				public BigDecimal getTCITAS_ID () {
					return this.TCITAS_ID;
				}

				public Boolean TCITAS_IDIsNullable(){
				    return true;
				}
				public Boolean TCITAS_IDIsKey(){
				    return false;
				}
				public Integer TCITAS_IDLength(){
				    return 0;
				}
				public Integer TCITAS_IDPrecision(){
				    return null;
				}
				public String TCITAS_IDDefault(){
				
					return "";
				
				}
				public String TCITAS_IDComment(){
				
				    return "";
				
				}
				public String TCITAS_IDPattern(){
				
					return "";
				
				}
				public String TCITAS_IDOriginalDbColumnName(){
				
					return "TCITAS_ID";
				
				}

				
			    public String CONSULTORIO;

				public String getCONSULTORIO () {
					return this.CONSULTORIO;
				}

				public Boolean CONSULTORIOIsNullable(){
				    return true;
				}
				public Boolean CONSULTORIOIsKey(){
				    return false;
				}
				public Integer CONSULTORIOLength(){
				    return 50;
				}
				public Integer CONSULTORIOPrecision(){
				    return 0;
				}
				public String CONSULTORIODefault(){
				
					return null;
				
				}
				public String CONSULTORIOComment(){
				
				    return "";
				
				}
				public String CONSULTORIOPattern(){
				
					return "";
				
				}
				public String CONSULTORIOOriginalDbColumnName(){
				
					return "CONSULTORIO";
				
				}

				
			    public String MOTIVOCONSULTA;

				public String getMOTIVOCONSULTA () {
					return this.MOTIVOCONSULTA;
				}

				public Boolean MOTIVOCONSULTAIsNullable(){
				    return true;
				}
				public Boolean MOTIVOCONSULTAIsKey(){
				    return false;
				}
				public Integer MOTIVOCONSULTALength(){
				    return 4000;
				}
				public Integer MOTIVOCONSULTAPrecision(){
				    return 0;
				}
				public String MOTIVOCONSULTADefault(){
				
					return null;
				
				}
				public String MOTIVOCONSULTAComment(){
				
				    return "";
				
				}
				public String MOTIVOCONSULTAPattern(){
				
					return "";
				
				}
				public String MOTIVOCONSULTAOriginalDbColumnName(){
				
					return "MOTIVOCONSULTA";
				
				}

				
			    public BigDecimal TCAUSALES_ID;

				public BigDecimal getTCAUSALES_ID () {
					return this.TCAUSALES_ID;
				}

				public Boolean TCAUSALES_IDIsNullable(){
				    return true;
				}
				public Boolean TCAUSALES_IDIsKey(){
				    return false;
				}
				public Integer TCAUSALES_IDLength(){
				    return 0;
				}
				public Integer TCAUSALES_IDPrecision(){
				    return null;
				}
				public String TCAUSALES_IDDefault(){
				
					return "";
				
				}
				public String TCAUSALES_IDComment(){
				
				    return "";
				
				}
				public String TCAUSALES_IDPattern(){
				
					return "";
				
				}
				public String TCAUSALES_IDOriginalDbColumnName(){
				
					return "TCAUSALES_ID";
				
				}

				
			    public String JUSTIFICACION;

				public String getJUSTIFICACION () {
					return this.JUSTIFICACION;
				}

				public Boolean JUSTIFICACIONIsNullable(){
				    return true;
				}
				public Boolean JUSTIFICACIONIsKey(){
				    return false;
				}
				public Integer JUSTIFICACIONLength(){
				    return 4000;
				}
				public Integer JUSTIFICACIONPrecision(){
				    return 0;
				}
				public String JUSTIFICACIONDefault(){
				
					return null;
				
				}
				public String JUSTIFICACIONComment(){
				
				    return "";
				
				}
				public String JUSTIFICACIONPattern(){
				
					return "";
				
				}
				public String JUSTIFICACIONOriginalDbColumnName(){
				
					return "JUSTIFICACION";
				
				}

				
			    public java.util.Date FECHA_CREACION;

				public java.util.Date getFECHA_CREACION () {
					return this.FECHA_CREACION;
				}

				public Boolean FECHA_CREACIONIsNullable(){
				    return false;
				}
				public Boolean FECHA_CREACIONIsKey(){
				    return false;
				}
				public Integer FECHA_CREACIONLength(){
				    return 0;
				}
				public Integer FECHA_CREACIONPrecision(){
				    return 0;
				}
				public String FECHA_CREACIONDefault(){
				
					return null;
				
				}
				public String FECHA_CREACIONComment(){
				
				    return "";
				
				}
				public String FECHA_CREACIONPattern(){
				
					return "";
				
				}
				public String FECHA_CREACIONOriginalDbColumnName(){
				
					return "FECHA_CREACION";
				
				}

				
			    public java.util.Date FDISPONIBLE;

				public java.util.Date getFDISPONIBLE () {
					return this.FDISPONIBLE;
				}

				public Boolean FDISPONIBLEIsNullable(){
				    return true;
				}
				public Boolean FDISPONIBLEIsKey(){
				    return false;
				}
				public Integer FDISPONIBLELength(){
				    return 0;
				}
				public Integer FDISPONIBLEPrecision(){
				    return 0;
				}
				public String FDISPONIBLEDefault(){
				
					return null;
				
				}
				public String FDISPONIBLEComment(){
				
				    return "";
				
				}
				public String FDISPONIBLEPattern(){
				
					return "";
				
				}
				public String FDISPONIBLEOriginalDbColumnName(){
				
					return "FDISPONIBLE";
				
				}

				
			    public BigDecimal TIEMPO_CITA;

				public BigDecimal getTIEMPO_CITA () {
					return this.TIEMPO_CITA;
				}

				public Boolean TIEMPO_CITAIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_CITAIsKey(){
				    return false;
				}
				public Integer TIEMPO_CITALength(){
				    return 0;
				}
				public Integer TIEMPO_CITAPrecision(){
				    return 0;
				}
				public String TIEMPO_CITADefault(){
				
					return "";
				
				}
				public String TIEMPO_CITAComment(){
				
				    return "";
				
				}
				public String TIEMPO_CITAPattern(){
				
					return "";
				
				}
				public String TIEMPO_CITAOriginalDbColumnName(){
				
					return "TIEMPO_CITA";
				
				}

				
			    public java.util.Date FECHAI_CITA;

				public java.util.Date getFECHAI_CITA () {
					return this.FECHAI_CITA;
				}

				public Boolean FECHAI_CITAIsNullable(){
				    return true;
				}
				public Boolean FECHAI_CITAIsKey(){
				    return false;
				}
				public Integer FECHAI_CITALength(){
				    return 0;
				}
				public Integer FECHAI_CITAPrecision(){
				    return 0;
				}
				public String FECHAI_CITADefault(){
				
					return null;
				
				}
				public String FECHAI_CITAComment(){
				
				    return "";
				
				}
				public String FECHAI_CITAPattern(){
				
					return "";
				
				}
				public String FECHAI_CITAOriginalDbColumnName(){
				
					return "FECHAI_CITA";
				
				}

				
			    public java.util.Date FECHAF_CITA;

				public java.util.Date getFECHAF_CITA () {
					return this.FECHAF_CITA;
				}

				public Boolean FECHAF_CITAIsNullable(){
				    return true;
				}
				public Boolean FECHAF_CITAIsKey(){
				    return false;
				}
				public Integer FECHAF_CITALength(){
				    return 0;
				}
				public Integer FECHAF_CITAPrecision(){
				    return 0;
				}
				public String FECHAF_CITADefault(){
				
					return null;
				
				}
				public String FECHAF_CITAComment(){
				
				    return "";
				
				}
				public String FECHAF_CITAPattern(){
				
					return "";
				
				}
				public String FECHAF_CITAOriginalDbColumnName(){
				
					return "FECHAF_CITA";
				
				}

				
			    public java.util.Date FECHA_LLEGADA;

				public java.util.Date getFECHA_LLEGADA () {
					return this.FECHA_LLEGADA;
				}

				public Boolean FECHA_LLEGADAIsNullable(){
				    return true;
				}
				public Boolean FECHA_LLEGADAIsKey(){
				    return false;
				}
				public Integer FECHA_LLEGADALength(){
				    return 0;
				}
				public Integer FECHA_LLEGADAPrecision(){
				    return 0;
				}
				public String FECHA_LLEGADADefault(){
				
					return null;
				
				}
				public String FECHA_LLEGADAComment(){
				
				    return "";
				
				}
				public String FECHA_LLEGADAPattern(){
				
					return "";
				
				}
				public String FECHA_LLEGADAOriginalDbColumnName(){
				
					return "FECHA_LLEGADA";
				
				}

				
			    public java.util.Date FECHAI_ATENCION;

				public java.util.Date getFECHAI_ATENCION () {
					return this.FECHAI_ATENCION;
				}

				public Boolean FECHAI_ATENCIONIsNullable(){
				    return true;
				}
				public Boolean FECHAI_ATENCIONIsKey(){
				    return false;
				}
				public Integer FECHAI_ATENCIONLength(){
				    return 0;
				}
				public Integer FECHAI_ATENCIONPrecision(){
				    return 0;
				}
				public String FECHAI_ATENCIONDefault(){
				
					return null;
				
				}
				public String FECHAI_ATENCIONComment(){
				
				    return "";
				
				}
				public String FECHAI_ATENCIONPattern(){
				
					return "";
				
				}
				public String FECHAI_ATENCIONOriginalDbColumnName(){
				
					return "FECHAI_ATENCION";
				
				}

				
			    public java.util.Date FECHAF_ATENCION;

				public java.util.Date getFECHAF_ATENCION () {
					return this.FECHAF_ATENCION;
				}

				public Boolean FECHAF_ATENCIONIsNullable(){
				    return true;
				}
				public Boolean FECHAF_ATENCIONIsKey(){
				    return false;
				}
				public Integer FECHAF_ATENCIONLength(){
				    return 0;
				}
				public Integer FECHAF_ATENCIONPrecision(){
				    return 0;
				}
				public String FECHAF_ATENCIONDefault(){
				
					return null;
				
				}
				public String FECHAF_ATENCIONComment(){
				
				    return "";
				
				}
				public String FECHAF_ATENCIONPattern(){
				
					return "";
				
				}
				public String FECHAF_ATENCIONOriginalDbColumnName(){
				
					return "FECHAF_ATENCION";
				
				}

				
			    public BigDecimal ESM_ATENCION_ID;

				public BigDecimal getESM_ATENCION_ID () {
					return this.ESM_ATENCION_ID;
				}

				public Boolean ESM_ATENCION_IDIsNullable(){
				    return false;
				}
				public Boolean ESM_ATENCION_IDIsKey(){
				    return false;
				}
				public Integer ESM_ATENCION_IDLength(){
				    return 0;
				}
				public Integer ESM_ATENCION_IDPrecision(){
				    return null;
				}
				public String ESM_ATENCION_IDDefault(){
				
					return "";
				
				}
				public String ESM_ATENCION_IDComment(){
				
				    return "";
				
				}
				public String ESM_ATENCION_IDPattern(){
				
					return "";
				
				}
				public String ESM_ATENCION_IDOriginalDbColumnName(){
				
					return "ESM_ATENCION_ID";
				
				}

				
			    public String CIE10;

				public String getCIE10 () {
					return this.CIE10;
				}

				public Boolean CIE10IsNullable(){
				    return true;
				}
				public Boolean CIE10IsKey(){
				    return false;
				}
				public Integer CIE10Length(){
				    return 10;
				}
				public Integer CIE10Precision(){
				    return 0;
				}
				public String CIE10Default(){
				
					return null;
				
				}
				public String CIE10Comment(){
				
				    return "";
				
				}
				public String CIE10Pattern(){
				
					return "";
				
				}
				public String CIE10OriginalDbColumnName(){
				
					return "CIE10";
				
				}

				
			    public String DIAGNOSTICO;

				public String getDIAGNOSTICO () {
					return this.DIAGNOSTICO;
				}

				public Boolean DIAGNOSTICOIsNullable(){
				    return true;
				}
				public Boolean DIAGNOSTICOIsKey(){
				    return false;
				}
				public Integer DIAGNOSTICOLength(){
				    return 500;
				}
				public Integer DIAGNOSTICOPrecision(){
				    return 0;
				}
				public String DIAGNOSTICODefault(){
				
					return null;
				
				}
				public String DIAGNOSTICOComment(){
				
				    return "";
				
				}
				public String DIAGNOSTICOPattern(){
				
					return "";
				
				}
				public String DIAGNOSTICOOriginalDbColumnName(){
				
					return "DIAGNOSTICO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public BigDecimal ADMISIONES_ID;

				public BigDecimal getADMISIONES_ID () {
					return this.ADMISIONES_ID;
				}

				public Boolean ADMISIONES_IDIsNullable(){
				    return true;
				}
				public Boolean ADMISIONES_IDIsKey(){
				    return false;
				}
				public Integer ADMISIONES_IDLength(){
				    return 0;
				}
				public Integer ADMISIONES_IDPrecision(){
				    return null;
				}
				public String ADMISIONES_IDDefault(){
				
					return "";
				
				}
				public String ADMISIONES_IDComment(){
				
				    return "";
				
				}
				public String ADMISIONES_IDPattern(){
				
					return "";
				
				}
				public String ADMISIONES_IDOriginalDbColumnName(){
				
					return "ADMISIONES_ID";
				
				}

				
			    public BigDecimal TCITA_CHECK;

				public BigDecimal getTCITA_CHECK () {
					return this.TCITA_CHECK;
				}

				public Boolean TCITA_CHECKIsNullable(){
				    return true;
				}
				public Boolean TCITA_CHECKIsKey(){
				    return false;
				}
				public Integer TCITA_CHECKLength(){
				    return 0;
				}
				public Integer TCITA_CHECKPrecision(){
				    return 0;
				}
				public String TCITA_CHECKDefault(){
				
					return "";
				
				}
				public String TCITA_CHECKComment(){
				
				    return "";
				
				}
				public String TCITA_CHECKPattern(){
				
					return "";
				
				}
				public String TCITA_CHECKOriginalDbColumnName(){
				
					return "TCITA_CHECK";
				
				}

				
			    public java.util.Date FECHA_CANCELACION;

				public java.util.Date getFECHA_CANCELACION () {
					return this.FECHA_CANCELACION;
				}

				public Boolean FECHA_CANCELACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_CANCELACIONIsKey(){
				    return false;
				}
				public Integer FECHA_CANCELACIONLength(){
				    return 0;
				}
				public Integer FECHA_CANCELACIONPrecision(){
				    return 0;
				}
				public String FECHA_CANCELACIONDefault(){
				
					return null;
				
				}
				public String FECHA_CANCELACIONComment(){
				
				    return "";
				
				}
				public String FECHA_CANCELACIONPattern(){
				
					return "";
				
				}
				public String FECHA_CANCELACIONOriginalDbColumnName(){
				
					return "FECHA_CANCELACION";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 4000;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return true;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.SCITAS_ID = (BigDecimal) dis.readObject();
					
						this.TSCITAS_ID = (BigDecimal) dis.readObject();
					
					this.PRIORITARIA = readString(dis);
					
					this.ESTADO_SCITA = readString(dis);
					
					this.USUARIO_SCITA = readString(dis);
					
						this.TASIGNACIONES_ID = (BigDecimal) dis.readObject();
					
						this.CITAS_ID = (BigDecimal) dis.readObject();
					
						this.PROFESIONALES_ID = (BigDecimal) dis.readObject();
					
						this.PACIENTES_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPO_SCITA = (BigDecimal) dis.readObject();
					
					this.FECHA_SCITA = readDate(dis);
					
					this.USUARIO_CITA = readString(dis);
					
						this.ESTADO_ID = (BigDecimal) dis.readObject();
					
						this.TCITAS_ID = (BigDecimal) dis.readObject();
					
					this.CONSULTORIO = readString(dis);
					
					this.MOTIVOCONSULTA = readString(dis);
					
						this.TCAUSALES_ID = (BigDecimal) dis.readObject();
					
					this.JUSTIFICACION = readString(dis);
					
					this.FECHA_CREACION = readDate(dis);
					
					this.FDISPONIBLE = readDate(dis);
					
						this.TIEMPO_CITA = (BigDecimal) dis.readObject();
					
					this.FECHAI_CITA = readDate(dis);
					
					this.FECHAF_CITA = readDate(dis);
					
					this.FECHA_LLEGADA = readDate(dis);
					
					this.FECHAI_ATENCION = readDate(dis);
					
					this.FECHAF_ATENCION = readDate(dis);
					
						this.ESM_ATENCION_ID = (BigDecimal) dis.readObject();
					
					this.CIE10 = readString(dis);
					
					this.DIAGNOSTICO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.ADMISIONES_ID = (BigDecimal) dis.readObject();
					
						this.TCITA_CHECK = (BigDecimal) dis.readObject();
					
					this.FECHA_CANCELACION = readDate(dis);
					
					this.OBSERVACIONES = readString(dis);
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.SCITAS_ID = (BigDecimal) dis.readObject();
					
						this.TSCITAS_ID = (BigDecimal) dis.readObject();
					
					this.PRIORITARIA = readString(dis);
					
					this.ESTADO_SCITA = readString(dis);
					
					this.USUARIO_SCITA = readString(dis);
					
						this.TASIGNACIONES_ID = (BigDecimal) dis.readObject();
					
						this.CITAS_ID = (BigDecimal) dis.readObject();
					
						this.PROFESIONALES_ID = (BigDecimal) dis.readObject();
					
						this.PACIENTES_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPO_SCITA = (BigDecimal) dis.readObject();
					
					this.FECHA_SCITA = readDate(dis);
					
					this.USUARIO_CITA = readString(dis);
					
						this.ESTADO_ID = (BigDecimal) dis.readObject();
					
						this.TCITAS_ID = (BigDecimal) dis.readObject();
					
					this.CONSULTORIO = readString(dis);
					
					this.MOTIVOCONSULTA = readString(dis);
					
						this.TCAUSALES_ID = (BigDecimal) dis.readObject();
					
					this.JUSTIFICACION = readString(dis);
					
					this.FECHA_CREACION = readDate(dis);
					
					this.FDISPONIBLE = readDate(dis);
					
						this.TIEMPO_CITA = (BigDecimal) dis.readObject();
					
					this.FECHAI_CITA = readDate(dis);
					
					this.FECHAF_CITA = readDate(dis);
					
					this.FECHA_LLEGADA = readDate(dis);
					
					this.FECHAI_ATENCION = readDate(dis);
					
					this.FECHAF_ATENCION = readDate(dis);
					
						this.ESM_ATENCION_ID = (BigDecimal) dis.readObject();
					
					this.CIE10 = readString(dis);
					
					this.DIAGNOSTICO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.ADMISIONES_ID = (BigDecimal) dis.readObject();
					
						this.TCITA_CHECK = (BigDecimal) dis.readObject();
					
					this.FECHA_CANCELACION = readDate(dis);
					
					this.OBSERVACIONES = readString(dis);
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.SCITAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TSCITAS_ID);
					
					// String
				
						writeString(this.PRIORITARIA,dos);
					
					// String
				
						writeString(this.ESTADO_SCITA,dos);
					
					// String
				
						writeString(this.USUARIO_SCITA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TASIGNACIONES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CITAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFESIONALES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PACIENTES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPO_SCITA);
					
					// java.util.Date
				
						writeDate(this.FECHA_SCITA,dos);
					
					// String
				
						writeString(this.USUARIO_CITA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTADO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TCITAS_ID);
					
					// String
				
						writeString(this.CONSULTORIO,dos);
					
					// String
				
						writeString(this.MOTIVOCONSULTA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TCAUSALES_ID);
					
					// String
				
						writeString(this.JUSTIFICACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_CREACION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPONIBLE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPO_CITA);
					
					// java.util.Date
				
						writeDate(this.FECHAI_CITA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAF_CITA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_LLEGADA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAI_ATENCION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAF_ATENCION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESM_ATENCION_ID);
					
					// String
				
						writeString(this.CIE10,dos);
					
					// String
				
						writeString(this.DIAGNOSTICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADMISIONES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TCITA_CHECK);
					
					// java.util.Date
				
						writeDate(this.FECHA_CANCELACION,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SCITAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TSCITAS_ID);
					
					// String
				
						writeString(this.PRIORITARIA,dos);
					
					// String
				
						writeString(this.ESTADO_SCITA,dos);
					
					// String
				
						writeString(this.USUARIO_SCITA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TASIGNACIONES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CITAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFESIONALES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PACIENTES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPO_SCITA);
					
					// java.util.Date
				
						writeDate(this.FECHA_SCITA,dos);
					
					// String
				
						writeString(this.USUARIO_CITA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTADO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TCITAS_ID);
					
					// String
				
						writeString(this.CONSULTORIO,dos);
					
					// String
				
						writeString(this.MOTIVOCONSULTA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TCAUSALES_ID);
					
					// String
				
						writeString(this.JUSTIFICACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_CREACION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPONIBLE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPO_CITA);
					
					// java.util.Date
				
						writeDate(this.FECHAI_CITA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAF_CITA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_LLEGADA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAI_ATENCION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAF_ATENCION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESM_ATENCION_ID);
					
					// String
				
						writeString(this.CIE10,dos);
					
					// String
				
						writeString(this.DIAGNOSTICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ADMISIONES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TCITA_CHECK);
					
					// java.util.Date
				
						writeDate(this.FECHA_CANCELACION,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SCITAS_ID="+String.valueOf(SCITAS_ID));
		sb.append(",TSCITAS_ID="+String.valueOf(TSCITAS_ID));
		sb.append(",PRIORITARIA="+PRIORITARIA);
		sb.append(",ESTADO_SCITA="+ESTADO_SCITA);
		sb.append(",USUARIO_SCITA="+USUARIO_SCITA);
		sb.append(",TASIGNACIONES_ID="+String.valueOf(TASIGNACIONES_ID));
		sb.append(",CITAS_ID="+String.valueOf(CITAS_ID));
		sb.append(",PROFESIONALES_ID="+String.valueOf(PROFESIONALES_ID));
		sb.append(",PACIENTES_ID="+String.valueOf(PACIENTES_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",TIEMPO_SCITA="+String.valueOf(TIEMPO_SCITA));
		sb.append(",FECHA_SCITA="+String.valueOf(FECHA_SCITA));
		sb.append(",USUARIO_CITA="+USUARIO_CITA);
		sb.append(",ESTADO_ID="+String.valueOf(ESTADO_ID));
		sb.append(",TCITAS_ID="+String.valueOf(TCITAS_ID));
		sb.append(",CONSULTORIO="+CONSULTORIO);
		sb.append(",MOTIVOCONSULTA="+MOTIVOCONSULTA);
		sb.append(",TCAUSALES_ID="+String.valueOf(TCAUSALES_ID));
		sb.append(",JUSTIFICACION="+JUSTIFICACION);
		sb.append(",FECHA_CREACION="+String.valueOf(FECHA_CREACION));
		sb.append(",FDISPONIBLE="+String.valueOf(FDISPONIBLE));
		sb.append(",TIEMPO_CITA="+String.valueOf(TIEMPO_CITA));
		sb.append(",FECHAI_CITA="+String.valueOf(FECHAI_CITA));
		sb.append(",FECHAF_CITA="+String.valueOf(FECHAF_CITA));
		sb.append(",FECHA_LLEGADA="+String.valueOf(FECHA_LLEGADA));
		sb.append(",FECHAI_ATENCION="+String.valueOf(FECHAI_ATENCION));
		sb.append(",FECHAF_ATENCION="+String.valueOf(FECHAF_ATENCION));
		sb.append(",ESM_ATENCION_ID="+String.valueOf(ESM_ATENCION_ID));
		sb.append(",CIE10="+CIE10);
		sb.append(",DIAGNOSTICO="+DIAGNOSTICO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",ADMISIONES_ID="+String.valueOf(ADMISIONES_ID));
		sb.append(",TCITA_CHECK="+String.valueOf(TCITA_CHECK));
		sb.append(",FECHA_CANCELACION="+String.valueOf(FECHA_CANCELACION));
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_1Struct implements routines.system.IPersistableRow<after_tOracleInput_1Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];

	
			    public BigDecimal SCITAS_ID;

				public BigDecimal getSCITAS_ID () {
					return this.SCITAS_ID;
				}

				public Boolean SCITAS_IDIsNullable(){
				    return false;
				}
				public Boolean SCITAS_IDIsKey(){
				    return false;
				}
				public Integer SCITAS_IDLength(){
				    return 0;
				}
				public Integer SCITAS_IDPrecision(){
				    return null;
				}
				public String SCITAS_IDDefault(){
				
					return "";
				
				}
				public String SCITAS_IDComment(){
				
				    return "";
				
				}
				public String SCITAS_IDPattern(){
				
					return "";
				
				}
				public String SCITAS_IDOriginalDbColumnName(){
				
					return "SCITAS_ID";
				
				}

				
			    public BigDecimal TSCITAS_ID;

				public BigDecimal getTSCITAS_ID () {
					return this.TSCITAS_ID;
				}

				public Boolean TSCITAS_IDIsNullable(){
				    return true;
				}
				public Boolean TSCITAS_IDIsKey(){
				    return false;
				}
				public Integer TSCITAS_IDLength(){
				    return 0;
				}
				public Integer TSCITAS_IDPrecision(){
				    return null;
				}
				public String TSCITAS_IDDefault(){
				
					return "";
				
				}
				public String TSCITAS_IDComment(){
				
				    return "";
				
				}
				public String TSCITAS_IDPattern(){
				
					return "";
				
				}
				public String TSCITAS_IDOriginalDbColumnName(){
				
					return "TSCITAS_ID";
				
				}

				
			    public String PRIORITARIA;

				public String getPRIORITARIA () {
					return this.PRIORITARIA;
				}

				public Boolean PRIORITARIAIsNullable(){
				    return false;
				}
				public Boolean PRIORITARIAIsKey(){
				    return false;
				}
				public Integer PRIORITARIALength(){
				    return 2;
				}
				public Integer PRIORITARIAPrecision(){
				    return 0;
				}
				public String PRIORITARIADefault(){
				
					return null;
				
				}
				public String PRIORITARIAComment(){
				
				    return "";
				
				}
				public String PRIORITARIAPattern(){
				
					return "";
				
				}
				public String PRIORITARIAOriginalDbColumnName(){
				
					return "PRIORITARIA";
				
				}

				
			    public String ESTADO_SCITA;

				public String getESTADO_SCITA () {
					return this.ESTADO_SCITA;
				}

				public Boolean ESTADO_SCITAIsNullable(){
				    return false;
				}
				public Boolean ESTADO_SCITAIsKey(){
				    return false;
				}
				public Integer ESTADO_SCITALength(){
				    return 10;
				}
				public Integer ESTADO_SCITAPrecision(){
				    return 0;
				}
				public String ESTADO_SCITADefault(){
				
					return null;
				
				}
				public String ESTADO_SCITAComment(){
				
				    return "";
				
				}
				public String ESTADO_SCITAPattern(){
				
					return "";
				
				}
				public String ESTADO_SCITAOriginalDbColumnName(){
				
					return "ESTADO_SCITA";
				
				}

				
			    public String USUARIO_SCITA;

				public String getUSUARIO_SCITA () {
					return this.USUARIO_SCITA;
				}

				public Boolean USUARIO_SCITAIsNullable(){
				    return true;
				}
				public Boolean USUARIO_SCITAIsKey(){
				    return false;
				}
				public Integer USUARIO_SCITALength(){
				    return 500;
				}
				public Integer USUARIO_SCITAPrecision(){
				    return 0;
				}
				public String USUARIO_SCITADefault(){
				
					return null;
				
				}
				public String USUARIO_SCITAComment(){
				
				    return "";
				
				}
				public String USUARIO_SCITAPattern(){
				
					return "";
				
				}
				public String USUARIO_SCITAOriginalDbColumnName(){
				
					return "USUARIO_SCITA";
				
				}

				
			    public BigDecimal TASIGNACIONES_ID;

				public BigDecimal getTASIGNACIONES_ID () {
					return this.TASIGNACIONES_ID;
				}

				public Boolean TASIGNACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean TASIGNACIONES_IDIsKey(){
				    return false;
				}
				public Integer TASIGNACIONES_IDLength(){
				    return 0;
				}
				public Integer TASIGNACIONES_IDPrecision(){
				    return null;
				}
				public String TASIGNACIONES_IDDefault(){
				
					return "";
				
				}
				public String TASIGNACIONES_IDComment(){
				
				    return "";
				
				}
				public String TASIGNACIONES_IDPattern(){
				
					return "";
				
				}
				public String TASIGNACIONES_IDOriginalDbColumnName(){
				
					return "TASIGNACIONES_ID";
				
				}

				
			    public BigDecimal CITAS_ID;

				public BigDecimal getCITAS_ID () {
					return this.CITAS_ID;
				}

				public Boolean CITAS_IDIsNullable(){
				    return false;
				}
				public Boolean CITAS_IDIsKey(){
				    return false;
				}
				public Integer CITAS_IDLength(){
				    return 0;
				}
				public Integer CITAS_IDPrecision(){
				    return null;
				}
				public String CITAS_IDDefault(){
				
					return "";
				
				}
				public String CITAS_IDComment(){
				
				    return "";
				
				}
				public String CITAS_IDPattern(){
				
					return "";
				
				}
				public String CITAS_IDOriginalDbColumnName(){
				
					return "CITAS_ID";
				
				}

				
			    public BigDecimal PROFESIONALES_ID;

				public BigDecimal getPROFESIONALES_ID () {
					return this.PROFESIONALES_ID;
				}

				public Boolean PROFESIONALES_IDIsNullable(){
				    return true;
				}
				public Boolean PROFESIONALES_IDIsKey(){
				    return false;
				}
				public Integer PROFESIONALES_IDLength(){
				    return 0;
				}
				public Integer PROFESIONALES_IDPrecision(){
				    return null;
				}
				public String PROFESIONALES_IDDefault(){
				
					return "";
				
				}
				public String PROFESIONALES_IDComment(){
				
				    return "";
				
				}
				public String PROFESIONALES_IDPattern(){
				
					return "";
				
				}
				public String PROFESIONALES_IDOriginalDbColumnName(){
				
					return "PROFESIONALES_ID";
				
				}

				
			    public BigDecimal PACIENTES_ID;

				public BigDecimal getPACIENTES_ID () {
					return this.PACIENTES_ID;
				}

				public Boolean PACIENTES_IDIsNullable(){
				    return false;
				}
				public Boolean PACIENTES_IDIsKey(){
				    return false;
				}
				public Integer PACIENTES_IDLength(){
				    return 0;
				}
				public Integer PACIENTES_IDPrecision(){
				    return null;
				}
				public String PACIENTES_IDDefault(){
				
					return "";
				
				}
				public String PACIENTES_IDComment(){
				
				    return "";
				
				}
				public String PACIENTES_IDPattern(){
				
					return "";
				
				}
				public String PACIENTES_IDOriginalDbColumnName(){
				
					return "PACIENTES_ID";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal TIEMPO_SCITA;

				public BigDecimal getTIEMPO_SCITA () {
					return this.TIEMPO_SCITA;
				}

				public Boolean TIEMPO_SCITAIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_SCITAIsKey(){
				    return false;
				}
				public Integer TIEMPO_SCITALength(){
				    return 0;
				}
				public Integer TIEMPO_SCITAPrecision(){
				    return 0;
				}
				public String TIEMPO_SCITADefault(){
				
					return "";
				
				}
				public String TIEMPO_SCITAComment(){
				
				    return "";
				
				}
				public String TIEMPO_SCITAPattern(){
				
					return "";
				
				}
				public String TIEMPO_SCITAOriginalDbColumnName(){
				
					return "TIEMPO_SCITA";
				
				}

				
			    public java.util.Date FECHA_SCITA;

				public java.util.Date getFECHA_SCITA () {
					return this.FECHA_SCITA;
				}

				public Boolean FECHA_SCITAIsNullable(){
				    return false;
				}
				public Boolean FECHA_SCITAIsKey(){
				    return false;
				}
				public Integer FECHA_SCITALength(){
				    return 0;
				}
				public Integer FECHA_SCITAPrecision(){
				    return 0;
				}
				public String FECHA_SCITADefault(){
				
					return null;
				
				}
				public String FECHA_SCITAComment(){
				
				    return "";
				
				}
				public String FECHA_SCITAPattern(){
				
					return "";
				
				}
				public String FECHA_SCITAOriginalDbColumnName(){
				
					return "FECHA_SCITA";
				
				}

				
			    public String USUARIO_CITA;

				public String getUSUARIO_CITA () {
					return this.USUARIO_CITA;
				}

				public Boolean USUARIO_CITAIsNullable(){
				    return false;
				}
				public Boolean USUARIO_CITAIsKey(){
				    return false;
				}
				public Integer USUARIO_CITALength(){
				    return 500;
				}
				public Integer USUARIO_CITAPrecision(){
				    return 0;
				}
				public String USUARIO_CITADefault(){
				
					return null;
				
				}
				public String USUARIO_CITAComment(){
				
				    return "";
				
				}
				public String USUARIO_CITAPattern(){
				
					return "";
				
				}
				public String USUARIO_CITAOriginalDbColumnName(){
				
					return "USUARIO_CITA";
				
				}

				
			    public BigDecimal ESTADO_ID;

				public BigDecimal getESTADO_ID () {
					return this.ESTADO_ID;
				}

				public Boolean ESTADO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTADO_IDIsKey(){
				    return false;
				}
				public Integer ESTADO_IDLength(){
				    return 0;
				}
				public Integer ESTADO_IDPrecision(){
				    return null;
				}
				public String ESTADO_IDDefault(){
				
					return "";
				
				}
				public String ESTADO_IDComment(){
				
				    return "";
				
				}
				public String ESTADO_IDPattern(){
				
					return "";
				
				}
				public String ESTADO_IDOriginalDbColumnName(){
				
					return "ESTADO_ID";
				
				}

				
			    public BigDecimal TCITAS_ID;

				public BigDecimal getTCITAS_ID () {
					return this.TCITAS_ID;
				}

				public Boolean TCITAS_IDIsNullable(){
				    return true;
				}
				public Boolean TCITAS_IDIsKey(){
				    return false;
				}
				public Integer TCITAS_IDLength(){
				    return 0;
				}
				public Integer TCITAS_IDPrecision(){
				    return null;
				}
				public String TCITAS_IDDefault(){
				
					return "";
				
				}
				public String TCITAS_IDComment(){
				
				    return "";
				
				}
				public String TCITAS_IDPattern(){
				
					return "";
				
				}
				public String TCITAS_IDOriginalDbColumnName(){
				
					return "TCITAS_ID";
				
				}

				
			    public String CONSULTORIO;

				public String getCONSULTORIO () {
					return this.CONSULTORIO;
				}

				public Boolean CONSULTORIOIsNullable(){
				    return true;
				}
				public Boolean CONSULTORIOIsKey(){
				    return false;
				}
				public Integer CONSULTORIOLength(){
				    return 50;
				}
				public Integer CONSULTORIOPrecision(){
				    return 0;
				}
				public String CONSULTORIODefault(){
				
					return null;
				
				}
				public String CONSULTORIOComment(){
				
				    return "";
				
				}
				public String CONSULTORIOPattern(){
				
					return "";
				
				}
				public String CONSULTORIOOriginalDbColumnName(){
				
					return "CONSULTORIO";
				
				}

				
			    public String MOTIVOCONSULTA;

				public String getMOTIVOCONSULTA () {
					return this.MOTIVOCONSULTA;
				}

				public Boolean MOTIVOCONSULTAIsNullable(){
				    return true;
				}
				public Boolean MOTIVOCONSULTAIsKey(){
				    return false;
				}
				public Integer MOTIVOCONSULTALength(){
				    return 4000;
				}
				public Integer MOTIVOCONSULTAPrecision(){
				    return 0;
				}
				public String MOTIVOCONSULTADefault(){
				
					return null;
				
				}
				public String MOTIVOCONSULTAComment(){
				
				    return "";
				
				}
				public String MOTIVOCONSULTAPattern(){
				
					return "";
				
				}
				public String MOTIVOCONSULTAOriginalDbColumnName(){
				
					return "MOTIVOCONSULTA";
				
				}

				
			    public BigDecimal TCAUSALES_ID;

				public BigDecimal getTCAUSALES_ID () {
					return this.TCAUSALES_ID;
				}

				public Boolean TCAUSALES_IDIsNullable(){
				    return true;
				}
				public Boolean TCAUSALES_IDIsKey(){
				    return false;
				}
				public Integer TCAUSALES_IDLength(){
				    return 0;
				}
				public Integer TCAUSALES_IDPrecision(){
				    return null;
				}
				public String TCAUSALES_IDDefault(){
				
					return "";
				
				}
				public String TCAUSALES_IDComment(){
				
				    return "";
				
				}
				public String TCAUSALES_IDPattern(){
				
					return "";
				
				}
				public String TCAUSALES_IDOriginalDbColumnName(){
				
					return "TCAUSALES_ID";
				
				}

				
			    public String JUSTIFICACION;

				public String getJUSTIFICACION () {
					return this.JUSTIFICACION;
				}

				public Boolean JUSTIFICACIONIsNullable(){
				    return true;
				}
				public Boolean JUSTIFICACIONIsKey(){
				    return false;
				}
				public Integer JUSTIFICACIONLength(){
				    return 4000;
				}
				public Integer JUSTIFICACIONPrecision(){
				    return 0;
				}
				public String JUSTIFICACIONDefault(){
				
					return null;
				
				}
				public String JUSTIFICACIONComment(){
				
				    return "";
				
				}
				public String JUSTIFICACIONPattern(){
				
					return "";
				
				}
				public String JUSTIFICACIONOriginalDbColumnName(){
				
					return "JUSTIFICACION";
				
				}

				
			    public java.util.Date FECHA_CREACION;

				public java.util.Date getFECHA_CREACION () {
					return this.FECHA_CREACION;
				}

				public Boolean FECHA_CREACIONIsNullable(){
				    return false;
				}
				public Boolean FECHA_CREACIONIsKey(){
				    return false;
				}
				public Integer FECHA_CREACIONLength(){
				    return 0;
				}
				public Integer FECHA_CREACIONPrecision(){
				    return 0;
				}
				public String FECHA_CREACIONDefault(){
				
					return null;
				
				}
				public String FECHA_CREACIONComment(){
				
				    return "";
				
				}
				public String FECHA_CREACIONPattern(){
				
					return "";
				
				}
				public String FECHA_CREACIONOriginalDbColumnName(){
				
					return "FECHA_CREACION";
				
				}

				
			    public java.util.Date FDISPONIBLE;

				public java.util.Date getFDISPONIBLE () {
					return this.FDISPONIBLE;
				}

				public Boolean FDISPONIBLEIsNullable(){
				    return true;
				}
				public Boolean FDISPONIBLEIsKey(){
				    return false;
				}
				public Integer FDISPONIBLELength(){
				    return 0;
				}
				public Integer FDISPONIBLEPrecision(){
				    return 0;
				}
				public String FDISPONIBLEDefault(){
				
					return null;
				
				}
				public String FDISPONIBLEComment(){
				
				    return "";
				
				}
				public String FDISPONIBLEPattern(){
				
					return "";
				
				}
				public String FDISPONIBLEOriginalDbColumnName(){
				
					return "FDISPONIBLE";
				
				}

				
			    public BigDecimal TIEMPO_CITA;

				public BigDecimal getTIEMPO_CITA () {
					return this.TIEMPO_CITA;
				}

				public Boolean TIEMPO_CITAIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_CITAIsKey(){
				    return false;
				}
				public Integer TIEMPO_CITALength(){
				    return 0;
				}
				public Integer TIEMPO_CITAPrecision(){
				    return 0;
				}
				public String TIEMPO_CITADefault(){
				
					return "";
				
				}
				public String TIEMPO_CITAComment(){
				
				    return "";
				
				}
				public String TIEMPO_CITAPattern(){
				
					return "";
				
				}
				public String TIEMPO_CITAOriginalDbColumnName(){
				
					return "TIEMPO_CITA";
				
				}

				
			    public java.util.Date FECHAI_CITA;

				public java.util.Date getFECHAI_CITA () {
					return this.FECHAI_CITA;
				}

				public Boolean FECHAI_CITAIsNullable(){
				    return true;
				}
				public Boolean FECHAI_CITAIsKey(){
				    return false;
				}
				public Integer FECHAI_CITALength(){
				    return 0;
				}
				public Integer FECHAI_CITAPrecision(){
				    return 0;
				}
				public String FECHAI_CITADefault(){
				
					return null;
				
				}
				public String FECHAI_CITAComment(){
				
				    return "";
				
				}
				public String FECHAI_CITAPattern(){
				
					return "";
				
				}
				public String FECHAI_CITAOriginalDbColumnName(){
				
					return "FECHAI_CITA";
				
				}

				
			    public java.util.Date FECHAF_CITA;

				public java.util.Date getFECHAF_CITA () {
					return this.FECHAF_CITA;
				}

				public Boolean FECHAF_CITAIsNullable(){
				    return true;
				}
				public Boolean FECHAF_CITAIsKey(){
				    return false;
				}
				public Integer FECHAF_CITALength(){
				    return 0;
				}
				public Integer FECHAF_CITAPrecision(){
				    return 0;
				}
				public String FECHAF_CITADefault(){
				
					return null;
				
				}
				public String FECHAF_CITAComment(){
				
				    return "";
				
				}
				public String FECHAF_CITAPattern(){
				
					return "";
				
				}
				public String FECHAF_CITAOriginalDbColumnName(){
				
					return "FECHAF_CITA";
				
				}

				
			    public java.util.Date FECHA_LLEGADA;

				public java.util.Date getFECHA_LLEGADA () {
					return this.FECHA_LLEGADA;
				}

				public Boolean FECHA_LLEGADAIsNullable(){
				    return true;
				}
				public Boolean FECHA_LLEGADAIsKey(){
				    return false;
				}
				public Integer FECHA_LLEGADALength(){
				    return 0;
				}
				public Integer FECHA_LLEGADAPrecision(){
				    return 0;
				}
				public String FECHA_LLEGADADefault(){
				
					return null;
				
				}
				public String FECHA_LLEGADAComment(){
				
				    return "";
				
				}
				public String FECHA_LLEGADAPattern(){
				
					return "";
				
				}
				public String FECHA_LLEGADAOriginalDbColumnName(){
				
					return "FECHA_LLEGADA";
				
				}

				
			    public java.util.Date FECHAI_ATENCION;

				public java.util.Date getFECHAI_ATENCION () {
					return this.FECHAI_ATENCION;
				}

				public Boolean FECHAI_ATENCIONIsNullable(){
				    return true;
				}
				public Boolean FECHAI_ATENCIONIsKey(){
				    return false;
				}
				public Integer FECHAI_ATENCIONLength(){
				    return 0;
				}
				public Integer FECHAI_ATENCIONPrecision(){
				    return 0;
				}
				public String FECHAI_ATENCIONDefault(){
				
					return null;
				
				}
				public String FECHAI_ATENCIONComment(){
				
				    return "";
				
				}
				public String FECHAI_ATENCIONPattern(){
				
					return "";
				
				}
				public String FECHAI_ATENCIONOriginalDbColumnName(){
				
					return "FECHAI_ATENCION";
				
				}

				
			    public java.util.Date FECHAF_ATENCION;

				public java.util.Date getFECHAF_ATENCION () {
					return this.FECHAF_ATENCION;
				}

				public Boolean FECHAF_ATENCIONIsNullable(){
				    return true;
				}
				public Boolean FECHAF_ATENCIONIsKey(){
				    return false;
				}
				public Integer FECHAF_ATENCIONLength(){
				    return 0;
				}
				public Integer FECHAF_ATENCIONPrecision(){
				    return 0;
				}
				public String FECHAF_ATENCIONDefault(){
				
					return null;
				
				}
				public String FECHAF_ATENCIONComment(){
				
				    return "";
				
				}
				public String FECHAF_ATENCIONPattern(){
				
					return "";
				
				}
				public String FECHAF_ATENCIONOriginalDbColumnName(){
				
					return "FECHAF_ATENCION";
				
				}

				
			    public BigDecimal ESM_ATENCION_ID;

				public BigDecimal getESM_ATENCION_ID () {
					return this.ESM_ATENCION_ID;
				}

				public Boolean ESM_ATENCION_IDIsNullable(){
				    return false;
				}
				public Boolean ESM_ATENCION_IDIsKey(){
				    return false;
				}
				public Integer ESM_ATENCION_IDLength(){
				    return 0;
				}
				public Integer ESM_ATENCION_IDPrecision(){
				    return null;
				}
				public String ESM_ATENCION_IDDefault(){
				
					return "";
				
				}
				public String ESM_ATENCION_IDComment(){
				
				    return "";
				
				}
				public String ESM_ATENCION_IDPattern(){
				
					return "";
				
				}
				public String ESM_ATENCION_IDOriginalDbColumnName(){
				
					return "ESM_ATENCION_ID";
				
				}

				
			    public String CIE10;

				public String getCIE10 () {
					return this.CIE10;
				}

				public Boolean CIE10IsNullable(){
				    return true;
				}
				public Boolean CIE10IsKey(){
				    return false;
				}
				public Integer CIE10Length(){
				    return 10;
				}
				public Integer CIE10Precision(){
				    return 0;
				}
				public String CIE10Default(){
				
					return null;
				
				}
				public String CIE10Comment(){
				
				    return "";
				
				}
				public String CIE10Pattern(){
				
					return "";
				
				}
				public String CIE10OriginalDbColumnName(){
				
					return "CIE10";
				
				}

				
			    public String DIAGNOSTICO;

				public String getDIAGNOSTICO () {
					return this.DIAGNOSTICO;
				}

				public Boolean DIAGNOSTICOIsNullable(){
				    return true;
				}
				public Boolean DIAGNOSTICOIsKey(){
				    return false;
				}
				public Integer DIAGNOSTICOLength(){
				    return 500;
				}
				public Integer DIAGNOSTICOPrecision(){
				    return 0;
				}
				public String DIAGNOSTICODefault(){
				
					return null;
				
				}
				public String DIAGNOSTICOComment(){
				
				    return "";
				
				}
				public String DIAGNOSTICOPattern(){
				
					return "";
				
				}
				public String DIAGNOSTICOOriginalDbColumnName(){
				
					return "DIAGNOSTICO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public BigDecimal ADMISIONES_ID;

				public BigDecimal getADMISIONES_ID () {
					return this.ADMISIONES_ID;
				}

				public Boolean ADMISIONES_IDIsNullable(){
				    return true;
				}
				public Boolean ADMISIONES_IDIsKey(){
				    return false;
				}
				public Integer ADMISIONES_IDLength(){
				    return 0;
				}
				public Integer ADMISIONES_IDPrecision(){
				    return null;
				}
				public String ADMISIONES_IDDefault(){
				
					return "";
				
				}
				public String ADMISIONES_IDComment(){
				
				    return "";
				
				}
				public String ADMISIONES_IDPattern(){
				
					return "";
				
				}
				public String ADMISIONES_IDOriginalDbColumnName(){
				
					return "ADMISIONES_ID";
				
				}

				
			    public BigDecimal TCITA_CHECK;

				public BigDecimal getTCITA_CHECK () {
					return this.TCITA_CHECK;
				}

				public Boolean TCITA_CHECKIsNullable(){
				    return true;
				}
				public Boolean TCITA_CHECKIsKey(){
				    return false;
				}
				public Integer TCITA_CHECKLength(){
				    return 0;
				}
				public Integer TCITA_CHECKPrecision(){
				    return 0;
				}
				public String TCITA_CHECKDefault(){
				
					return "";
				
				}
				public String TCITA_CHECKComment(){
				
				    return "";
				
				}
				public String TCITA_CHECKPattern(){
				
					return "";
				
				}
				public String TCITA_CHECKOriginalDbColumnName(){
				
					return "TCITA_CHECK";
				
				}

				
			    public java.util.Date FECHA_CANCELACION;

				public java.util.Date getFECHA_CANCELACION () {
					return this.FECHA_CANCELACION;
				}

				public Boolean FECHA_CANCELACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_CANCELACIONIsKey(){
				    return false;
				}
				public Integer FECHA_CANCELACIONLength(){
				    return 0;
				}
				public Integer FECHA_CANCELACIONPrecision(){
				    return 0;
				}
				public String FECHA_CANCELACIONDefault(){
				
					return null;
				
				}
				public String FECHA_CANCELACIONComment(){
				
				    return "";
				
				}
				public String FECHA_CANCELACIONPattern(){
				
					return "";
				
				}
				public String FECHA_CANCELACIONOriginalDbColumnName(){
				
					return "FECHA_CANCELACION";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 4000;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return true;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.SCITAS_ID = (BigDecimal) dis.readObject();
					
						this.TSCITAS_ID = (BigDecimal) dis.readObject();
					
					this.PRIORITARIA = readString(dis);
					
					this.ESTADO_SCITA = readString(dis);
					
					this.USUARIO_SCITA = readString(dis);
					
						this.TASIGNACIONES_ID = (BigDecimal) dis.readObject();
					
						this.CITAS_ID = (BigDecimal) dis.readObject();
					
						this.PROFESIONALES_ID = (BigDecimal) dis.readObject();
					
						this.PACIENTES_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPO_SCITA = (BigDecimal) dis.readObject();
					
					this.FECHA_SCITA = readDate(dis);
					
					this.USUARIO_CITA = readString(dis);
					
						this.ESTADO_ID = (BigDecimal) dis.readObject();
					
						this.TCITAS_ID = (BigDecimal) dis.readObject();
					
					this.CONSULTORIO = readString(dis);
					
					this.MOTIVOCONSULTA = readString(dis);
					
						this.TCAUSALES_ID = (BigDecimal) dis.readObject();
					
					this.JUSTIFICACION = readString(dis);
					
					this.FECHA_CREACION = readDate(dis);
					
					this.FDISPONIBLE = readDate(dis);
					
						this.TIEMPO_CITA = (BigDecimal) dis.readObject();
					
					this.FECHAI_CITA = readDate(dis);
					
					this.FECHAF_CITA = readDate(dis);
					
					this.FECHA_LLEGADA = readDate(dis);
					
					this.FECHAI_ATENCION = readDate(dis);
					
					this.FECHAF_ATENCION = readDate(dis);
					
						this.ESM_ATENCION_ID = (BigDecimal) dis.readObject();
					
					this.CIE10 = readString(dis);
					
					this.DIAGNOSTICO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.ADMISIONES_ID = (BigDecimal) dis.readObject();
					
						this.TCITA_CHECK = (BigDecimal) dis.readObject();
					
					this.FECHA_CANCELACION = readDate(dis);
					
					this.OBSERVACIONES = readString(dis);
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.SCITAS_ID = (BigDecimal) dis.readObject();
					
						this.TSCITAS_ID = (BigDecimal) dis.readObject();
					
					this.PRIORITARIA = readString(dis);
					
					this.ESTADO_SCITA = readString(dis);
					
					this.USUARIO_SCITA = readString(dis);
					
						this.TASIGNACIONES_ID = (BigDecimal) dis.readObject();
					
						this.CITAS_ID = (BigDecimal) dis.readObject();
					
						this.PROFESIONALES_ID = (BigDecimal) dis.readObject();
					
						this.PACIENTES_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPO_SCITA = (BigDecimal) dis.readObject();
					
					this.FECHA_SCITA = readDate(dis);
					
					this.USUARIO_CITA = readString(dis);
					
						this.ESTADO_ID = (BigDecimal) dis.readObject();
					
						this.TCITAS_ID = (BigDecimal) dis.readObject();
					
					this.CONSULTORIO = readString(dis);
					
					this.MOTIVOCONSULTA = readString(dis);
					
						this.TCAUSALES_ID = (BigDecimal) dis.readObject();
					
					this.JUSTIFICACION = readString(dis);
					
					this.FECHA_CREACION = readDate(dis);
					
					this.FDISPONIBLE = readDate(dis);
					
						this.TIEMPO_CITA = (BigDecimal) dis.readObject();
					
					this.FECHAI_CITA = readDate(dis);
					
					this.FECHAF_CITA = readDate(dis);
					
					this.FECHA_LLEGADA = readDate(dis);
					
					this.FECHAI_ATENCION = readDate(dis);
					
					this.FECHAF_ATENCION = readDate(dis);
					
						this.ESM_ATENCION_ID = (BigDecimal) dis.readObject();
					
					this.CIE10 = readString(dis);
					
					this.DIAGNOSTICO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.ADMISIONES_ID = (BigDecimal) dis.readObject();
					
						this.TCITA_CHECK = (BigDecimal) dis.readObject();
					
					this.FECHA_CANCELACION = readDate(dis);
					
					this.OBSERVACIONES = readString(dis);
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.SCITAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TSCITAS_ID);
					
					// String
				
						writeString(this.PRIORITARIA,dos);
					
					// String
				
						writeString(this.ESTADO_SCITA,dos);
					
					// String
				
						writeString(this.USUARIO_SCITA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TASIGNACIONES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CITAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFESIONALES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PACIENTES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPO_SCITA);
					
					// java.util.Date
				
						writeDate(this.FECHA_SCITA,dos);
					
					// String
				
						writeString(this.USUARIO_CITA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTADO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TCITAS_ID);
					
					// String
				
						writeString(this.CONSULTORIO,dos);
					
					// String
				
						writeString(this.MOTIVOCONSULTA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TCAUSALES_ID);
					
					// String
				
						writeString(this.JUSTIFICACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_CREACION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPONIBLE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPO_CITA);
					
					// java.util.Date
				
						writeDate(this.FECHAI_CITA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAF_CITA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_LLEGADA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAI_ATENCION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAF_ATENCION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESM_ATENCION_ID);
					
					// String
				
						writeString(this.CIE10,dos);
					
					// String
				
						writeString(this.DIAGNOSTICO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ADMISIONES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TCITA_CHECK);
					
					// java.util.Date
				
						writeDate(this.FECHA_CANCELACION,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SCITAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TSCITAS_ID);
					
					// String
				
						writeString(this.PRIORITARIA,dos);
					
					// String
				
						writeString(this.ESTADO_SCITA,dos);
					
					// String
				
						writeString(this.USUARIO_SCITA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TASIGNACIONES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CITAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFESIONALES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PACIENTES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPO_SCITA);
					
					// java.util.Date
				
						writeDate(this.FECHA_SCITA,dos);
					
					// String
				
						writeString(this.USUARIO_CITA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTADO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TCITAS_ID);
					
					// String
				
						writeString(this.CONSULTORIO,dos);
					
					// String
				
						writeString(this.MOTIVOCONSULTA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TCAUSALES_ID);
					
					// String
				
						writeString(this.JUSTIFICACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_CREACION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPONIBLE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPO_CITA);
					
					// java.util.Date
				
						writeDate(this.FECHAI_CITA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAF_CITA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_LLEGADA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAI_ATENCION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAF_ATENCION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESM_ATENCION_ID);
					
					// String
				
						writeString(this.CIE10,dos);
					
					// String
				
						writeString(this.DIAGNOSTICO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ADMISIONES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TCITA_CHECK);
					
					// java.util.Date
				
						writeDate(this.FECHA_CANCELACION,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SCITAS_ID="+String.valueOf(SCITAS_ID));
		sb.append(",TSCITAS_ID="+String.valueOf(TSCITAS_ID));
		sb.append(",PRIORITARIA="+PRIORITARIA);
		sb.append(",ESTADO_SCITA="+ESTADO_SCITA);
		sb.append(",USUARIO_SCITA="+USUARIO_SCITA);
		sb.append(",TASIGNACIONES_ID="+String.valueOf(TASIGNACIONES_ID));
		sb.append(",CITAS_ID="+String.valueOf(CITAS_ID));
		sb.append(",PROFESIONALES_ID="+String.valueOf(PROFESIONALES_ID));
		sb.append(",PACIENTES_ID="+String.valueOf(PACIENTES_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",TIEMPO_SCITA="+String.valueOf(TIEMPO_SCITA));
		sb.append(",FECHA_SCITA="+String.valueOf(FECHA_SCITA));
		sb.append(",USUARIO_CITA="+USUARIO_CITA);
		sb.append(",ESTADO_ID="+String.valueOf(ESTADO_ID));
		sb.append(",TCITAS_ID="+String.valueOf(TCITAS_ID));
		sb.append(",CONSULTORIO="+CONSULTORIO);
		sb.append(",MOTIVOCONSULTA="+MOTIVOCONSULTA);
		sb.append(",TCAUSALES_ID="+String.valueOf(TCAUSALES_ID));
		sb.append(",JUSTIFICACION="+JUSTIFICACION);
		sb.append(",FECHA_CREACION="+String.valueOf(FECHA_CREACION));
		sb.append(",FDISPONIBLE="+String.valueOf(FDISPONIBLE));
		sb.append(",TIEMPO_CITA="+String.valueOf(TIEMPO_CITA));
		sb.append(",FECHAI_CITA="+String.valueOf(FECHAI_CITA));
		sb.append(",FECHAF_CITA="+String.valueOf(FECHAF_CITA));
		sb.append(",FECHA_LLEGADA="+String.valueOf(FECHA_LLEGADA));
		sb.append(",FECHAI_ATENCION="+String.valueOf(FECHAI_ATENCION));
		sb.append(",FECHAF_ATENCION="+String.valueOf(FECHAF_ATENCION));
		sb.append(",ESM_ATENCION_ID="+String.valueOf(ESM_ATENCION_ID));
		sb.append(",CIE10="+CIE10);
		sb.append(",DIAGNOSTICO="+DIAGNOSTICO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",ADMISIONES_ID="+String.valueOf(ADMISIONES_ID));
		sb.append(",TCITA_CHECK="+String.valueOf(TCITA_CHECK));
		sb.append(",FECHA_CANCELACION="+String.valueOf(FECHA_CANCELACION));
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_2Process(globalMap);
		tOracleInput_6Process(globalMap);
		tOracleInput_5Process(globalMap);
		tOracleInput_4Process(globalMap);
		tOracleInput_18Process(globalMap);
		tOracleInput_19Process(globalMap);
		tOracleInput_10Process(globalMap);
		tOracleInput_20Process(globalMap);
		tHashInput_1Process(globalMap);
		tOracleInput_3Process(globalMap);
		tOracleInput_2Process(globalMap);
		tHashInput_3Process(globalMap);

		row1Struct row1 = new row1Struct();
out_1Struct out_1 = new out_1Struct();
out_2Struct out_2 = new out_2Struct();
out_3Struct out_3 = new out_3Struct();
ins_citaStruct ins_cita = new ins_citaStruct();








	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ins_cita");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






        int updateKeyCount_tOracleOutput_1 = 1;
        if(updateKeyCount_tOracleOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_1 == 49 && true) {
                    System.err.println("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
                    String driverClass_tOracleOutput_1 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_1);
                String url_tOracleOutput_1 = null;
                    url_tOracleOutput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_1 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_1 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_1 = decryptedPassword_tOracleOutput_1;
                dbschema_tOracleOutput_1 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_1 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_1.put("user",dbUser_tOracleOutput_1);
                    atnParamsPrope_tOracleOutput_1.put("password",dbPwd_tOracleOutput_1);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_1.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_1 = java.sql.DriverManager.getConnection(url_tOracleOutput_1, atnParamsPrope_tOracleOutput_1);
        resourceMap.put("conn_tOracleOutput_1", conn_tOracleOutput_1);
            conn_tOracleOutput_1.setAutoCommit(false);
            int commitEvery_tOracleOutput_1 = 1000;
            int commitCounter_tOracleOutput_1 = 0;
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("BAGE_CITAS");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("BAGE_CITAS");
        }
                java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement("SELECT COUNT(1) FROM " + tableName_tOracleOutput_1 + " WHERE ID = ?");
                resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);
                String insert_tOracleOutput_1 = "INSERT INTO " + tableName_tOracleOutput_1 + " (ID,TIEMPO_CITA,SOLICITUDES_ID,PROFESIONALES_ID,PERSONAS_ID,FECHA_CREACION,FCREACION_SCITA,ESTADO_CITA,TIPO_CITA,MOTIVO_CONSULTA,DIAGNOSTICO,TIPO_CAUSAL,JUSTIFICACION,USUARIO_CITA,ESM_ATENCION,FUERZA_ESM,CIUDAD_ESM,TIEMPO_ESPERA,TIEMPO_ATENCION,TIEMPO_MUERTO,HORA_FATENCION,TIEMPO_ASIGNACION,HORA_ICITA,HORA_IATENCION,HORA_FCITA,HORA_LLEGADA,CONSULTORIO,CIE10,ESPECIALIDADES_ID,ESM_ATENCION_ID,FECHA_LLEGADA,FECHAI_CITA,FECHAF_CITA,ESM_ATESIGLA,MUNICIPIO_ESM,ESTREGISTRO_ID,FDISPONIBLE,TIEMPO_SCITA,TIPO_SCITA,TIPO_ASIGNACION,USUARIO_SCITA,ESTADO_SCITA,PRIORITARIA,ADMISIONES_ID,TCITA,FECHA_CANCELACION,OBSERVACIONES_CITA,TIPO_USUARIO,CUPS_ID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    
                java.sql.PreparedStatement pstmtInsert_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(insert_tOracleOutput_1);
                resourceMap.put("pstmtInsert_tOracleOutput_1", pstmtInsert_tOracleOutput_1);
                String update_tOracleOutput_1 = "UPDATE " + tableName_tOracleOutput_1 + " SET TIEMPO_CITA = ?,SOLICITUDES_ID = ?,PROFESIONALES_ID = ?,PERSONAS_ID = ?,FECHA_CREACION = ?,FCREACION_SCITA = ?,ESTADO_CITA = ?,TIPO_CITA = ?,MOTIVO_CONSULTA = ?,DIAGNOSTICO = ?,TIPO_CAUSAL = ?,JUSTIFICACION = ?,USUARIO_CITA = ?,ESM_ATENCION = ?,FUERZA_ESM = ?,CIUDAD_ESM = ?,TIEMPO_ESPERA = ?,TIEMPO_ATENCION = ?,TIEMPO_MUERTO = ?,HORA_FATENCION = ?,TIEMPO_ASIGNACION = ?,HORA_ICITA = ?,HORA_IATENCION = ?,HORA_FCITA = ?,HORA_LLEGADA = ?,CONSULTORIO = ?,CIE10 = ?,ESPECIALIDADES_ID = ?,ESM_ATENCION_ID = ?,FECHA_LLEGADA = ?,FECHAI_CITA = ?,FECHAF_CITA = ?,ESM_ATESIGLA = ?,MUNICIPIO_ESM = ?,ESTREGISTRO_ID = ?,FDISPONIBLE = ?,TIEMPO_SCITA = ?,TIPO_SCITA = ?,TIPO_ASIGNACION = ?,USUARIO_SCITA = ?,ESTADO_SCITA = ?,PRIORITARIA = ?,ADMISIONES_ID = ?,TCITA = ?,FECHA_CANCELACION = ?,OBSERVACIONES_CITA = ?,TIPO_USUARIO = ?,CUPS_ID = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmtUpdate_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(update_tOracleOutput_1);
                resourceMap.put("pstmtUpdate_tOracleOutput_1", pstmtUpdate_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out_3");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
	String hora_cita;
	String hora_fincita;
	String hora_llegada;
	String hora_iatencion;
	String hora_fatencion;
	BigDecimal t_asignacion;
	BigDecimal t_espera;
	BigDecimal t_atencion;
	BigDecimal t_muerto;
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
ins_citaStruct ins_cita_tmp = new ins_citaStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out_2");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
					globalMap.get( "tHash_Lookup_row7" ))
					;					
					
	

row7Struct row7HashKey = new row7Struct();
row7Struct row7Default = new row7Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
					globalMap.get( "tHash_Lookup_row8" ))
					;					
					
	

row8Struct row8HashKey = new row8Struct();
row8Struct row8Default = new row8Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
					globalMap.get( "tHash_Lookup_row9" ))
					;					
					
	

row9Struct row9HashKey = new row9Struct();
row9Struct row9Default = new row9Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
out_3Struct out_3_tmp = new out_3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out_1");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
					globalMap.get( "tHash_Lookup_row3" ))
					;					
					
	

row3Struct row3HashKey = new row3Struct();
row3Struct row3Default = new row3Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
					globalMap.get( "tHash_Lookup_row4" ))
					;					
					
	

row4Struct row4HashKey = new row4Struct();
row4Struct row4Default = new row4Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
					globalMap.get( "tHash_Lookup_row5" ))
					;					
					
	

row5Struct row5HashKey = new row5Struct();
row5Struct row5Default = new row5Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
					globalMap.get( "tHash_Lookup_row6" ))
					;					
					
	

row6Struct row6HashKey = new row6Struct();
row6Struct row6Default = new row6Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) 
					globalMap.get( "tHash_Lookup_row14" ))
					;					
					
	

row14Struct row14HashKey = new row14Struct();
row14Struct row14Default = new row14Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
					globalMap.get( "tHash_Lookup_row15" ))
					;					
					
	

row15Struct row15HashKey = new row15Struct();
row15Struct row15Default = new row15Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
out_2Struct out_2_tmp = new out_2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
					globalMap.get( "tHash_Lookup_row13" ))
					;					
					
	

row13Struct row13HashKey = new row13Struct();
row13Struct row13Default = new row13Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
					globalMap.get( "tHash_Lookup_row12" ))
					;					
					
	

row12Struct row12HashKey = new row12Struct();
row12Struct row12Default = new row12Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) 
					globalMap.get( "tHash_Lookup_row17" ))
					;					
					
	

row17Struct row17HashKey = new row17Struct();
row17Struct row17Default = new row17Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
out_1Struct out_1_tmp = new out_1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
                if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_1 != null) {
                        isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
                        unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_1.setFetchSize(1000);


		    String dbquery_tOracleInput_1 = "SELECT \n    scita.ID AS SCITAS_ID,\n  scita.TSCITAS_ID, /* AS TIPO_SCITA,*/\n  scita.PRIORITARIA AS PRIORITARIA,\n  sc"
+"ita.ESTADO AS ESTADO_SCITA,\n  /*scita.USUARIOS_ID, */\n  us_scita.USUARIO AS USUARIO_SCITA, \n  scita.TASIGNACIONES_ID,"
+" /* AS TIPO_ASIGNACION,*/\n  cita.ID AS CITAS_ID,\n  RRH.PERSONAS_ID AS PROFESIONALES_ID,\n  scita.PERSONAS_ID AS PACIEN"
+"TES_ID,\n  scita.ESPECIALIDADES_ID AS ESPECIALIDADES_ID,\n  TO_NUMBER(TO_CHAR(scita.FECHA,'DDMMYYYY')) AS TIEMPO_SCITA,"
+"\n  scita.FECHA AS FECHA_SCITA,\n  \n  /*cita.USUARIOS_ID,*/\n  us_cita.USUARIO AS USUARIO_CITA,\n  cita.ESTADO_ID, /*AS "
+"ESTADO_CITA,*/\n  cita.TCITAS_ID, /* AS TIPO_CITA,*/\n  infr.NOMBRE AS CONSULTORIO, \n  val.MOTIVOCONSULTA,\n  cita.TCAU"
+"SALES_ID,/* AS TIPO_CAUSAL,*/\n  cita.JUSTIFICACION,\n  cita.FECHA_CREACION,\n  cita.FDISPONIBLE,\n  TO_NUMBER(TO_CHAR(N"
+"VL(cita.FECHAI,cita.FECHA_EXTRA),'DDMMYYYY')) AS TIEMPO_CITA,\n  NVL(cita.FECHAI,cita.FECHA_EXTRA) AS FECHAI_CITA,\n  NV"
+"L(cita.FECHAF,cita.FECHA_EXTRA) AS FECHAF_CITA,\n  cita.FECHA_LLEGADA,\n  pro.FINICIAL AS FECHAI_ATENCION,\n  pro.FFINAL"
+" AS FECHAF_ATENCION,\n  cita.UORG_ID AS ESM_ATENCION_ID,\n  cie10.CODIGO AS CIE10,\n  cie10.DESCRIPCION AS DIAGNOSTICO,"
+"\n  cita.ESTREGISTRO_ID AS ESTREGISTRO_ID,\n  cita.ADMISIONES_ID,\n  NVL(TC.TCITA_CHECK,0) AS TCITA_CHECK,\n  cita.FECHA_"
+"CANCELACION,\n  cita.OBSERVACIONES,\n  CU.CUPS_ID    \nFROM AGE_CITAS cita\nINNER JOIN AGE_SCITAS scita ON scita.ID = ci"
+"ta.SCITAS_ID\nINNER JOIN GEN_USUARIOS us_cita ON us_cita.ID = cita.USUARIOS_ID\nLEFT JOIN GEN_USUARIOS us_scita ON us_sc"
+"ita.ID = scita.USUARIOS_ID\nLEFT JOIN AGE_TURNOS_CITAS turnc ON turnc.CITAS_ID = cita.ID AND turnc.ESTREGISTRO_ID = 1\nL"
+"EFT JOIN AGE_TURNOS turn ON turn.ID = turnc.TURNOS_ID\nLEFT JOIN GEN_INFRPISOS infr ON infr.ID = turn.INFRPISOS_ID\nLEFT"
+" JOIN AGE_AGENDA_TURNOS aturn ON aturn.TURNOS_ID = turnc.TURNOS_ID AND aturn.ESTREGISTRO_ID = 1\nLEFT JOIN AGE_AGENDA_US"
+"UARIOS asu ON asu.AGENDA_ID = aturn.AGENDA_ID AND asu.ESTREGISTRO_ID = 1\nLEFT JOIN POR_RRHHESM rrh ON rrh.ID = asu.RRHH"
+"ESM_ID\nLEFT JOIN ADM_SERVTRATANTES serv ON serv.ADMISIONES_ID = cita.ADMISIONES_ID AND serv.ESTREGISTRO_ID = 1\nLEFT JO"
+"IN ADM_ESPTRATANTES esp ON esp.SERVTRATANTES_ID = serv.ID AND esp.ESTREGISTRO_ID = 1\nLEFT JOIN HCL_PROCESOSASISTENCIALE"
+"S pro ON pro.ESPTRATANTES_ID = esp.ID  AND pro.ESTREGISTRO_ID = 1 \nAND  pro.TPROCESOSASISTENCIAL_ID IN ( SELECT tpro.ID"
+" FROM HCL_TPROCESOSASISTENCIAL tpro WHERE tpro.ESTREGISTRO_ID=1 AND tpro.SIGLA IN (  'VAL', 'ODOPV', 'ODOCT', 'ODOEV', '"
+"ODOSO' )) \nLEFT JOIN HCL_DIAGNOSTICOS diag ON diag.PROCESOSASISTENCIALES_ID = pro.ID AND diag.ESTREGISTRO_ID = 1\nLEFT "
+"JOIN GEN_CIE10 cie10 ON cie10.ID = diag.CIE10_ID\nLEFT JOIN HCL_VALORACIONES val ON val.PROCESOSASISTENCIALES_ID = pro.I"
+"D AND val.ESTREGISTRO_ID = 1\nLEFT JOIN (SELECT \n            1 AS TCITA_CHECK,\n            CUPS.AUTORIZACION_ID\n     "
+"     FROM RCA_CUPSOLICITADOS CUPS\n          INNER JOIN GEN_ESPCUPS GEC ON  GEC.CUPS_ID = CUPS.CUPS_ID\n          INNER "
+"JOIN GEN_CUPS GC ON GC.ID = GEC.CUPS_ID AND GC.TCUPS = 1) TC ON TC.AUTORIZACION_ID =  scita.AUTORIZACION_ID\nLEFT JOIN R"
+"CA_CUPSOLICITADOS CU ON CU.AUTORIZACION_ID = scita.AUTORIZACION_ID AND CU.ESTREGISTRO_ID = 1\nWHERE cita.ESTREGISTRO_ID "
+"= 1 AND scita.ESTREGISTRO_ID = 1  " + context.CONDICION_AGE;
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row1.SCITAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row1.SCITAS_ID = rs_tOracleInput_1.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row1.TSCITAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(2) != null) {
						row1.TSCITAS_ID = rs_tOracleInput_1.getBigDecimal(2);
					} else {
				
						row1.TSCITAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 3) {
								row1.PRIORITARIA = null;
							} else {
	                         		
        	row1.PRIORITARIA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 4) {
								row1.ESTADO_SCITA = null;
							} else {
	                         		
        	row1.ESTADO_SCITA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 5) {
								row1.USUARIO_SCITA = null;
							} else {
	                         		
        	row1.USUARIO_SCITA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 6) {
								row1.TASIGNACIONES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(6) != null) {
						row1.TASIGNACIONES_ID = rs_tOracleInput_1.getBigDecimal(6);
					} else {
				
						row1.TASIGNACIONES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 7) {
								row1.CITAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(7) != null) {
						row1.CITAS_ID = rs_tOracleInput_1.getBigDecimal(7);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 8) {
								row1.PROFESIONALES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(8) != null) {
						row1.PROFESIONALES_ID = rs_tOracleInput_1.getBigDecimal(8);
					} else {
				
						row1.PROFESIONALES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 9) {
								row1.PACIENTES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(9) != null) {
						row1.PACIENTES_ID = rs_tOracleInput_1.getBigDecimal(9);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 10) {
								row1.ESPECIALIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(10) != null) {
						row1.ESPECIALIDADES_ID = rs_tOracleInput_1.getBigDecimal(10);
					} else {
				
						row1.ESPECIALIDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 11) {
								row1.TIEMPO_SCITA = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(11) != null) {
						row1.TIEMPO_SCITA = rs_tOracleInput_1.getBigDecimal(11);
					} else {
				
						row1.TIEMPO_SCITA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 12) {
								row1.FECHA_SCITA = null;
							} else {
										
			row1.FECHA_SCITA = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 12);
		                    }
							if(colQtyInRs_tOracleInput_1 < 13) {
								row1.USUARIO_CITA = null;
							} else {
	                         		
        	row1.USUARIO_CITA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 13, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 14) {
								row1.ESTADO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(14) != null) {
						row1.ESTADO_ID = rs_tOracleInput_1.getBigDecimal(14);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 15) {
								row1.TCITAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(15) != null) {
						row1.TCITAS_ID = rs_tOracleInput_1.getBigDecimal(15);
					} else {
				
						row1.TCITAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 16) {
								row1.CONSULTORIO = null;
							} else {
	                         		
        	row1.CONSULTORIO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 16, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 17) {
								row1.MOTIVOCONSULTA = null;
							} else {
	                         		
        	row1.MOTIVOCONSULTA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 17, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 18) {
								row1.TCAUSALES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(18) != null) {
						row1.TCAUSALES_ID = rs_tOracleInput_1.getBigDecimal(18);
					} else {
				
						row1.TCAUSALES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 19) {
								row1.JUSTIFICACION = null;
							} else {
	                         		
        	row1.JUSTIFICACION = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 19, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 20) {
								row1.FECHA_CREACION = null;
							} else {
										
			row1.FECHA_CREACION = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 20);
		                    }
							if(colQtyInRs_tOracleInput_1 < 21) {
								row1.FDISPONIBLE = null;
							} else {
										
			row1.FDISPONIBLE = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 21);
		                    }
							if(colQtyInRs_tOracleInput_1 < 22) {
								row1.TIEMPO_CITA = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(22) != null) {
						row1.TIEMPO_CITA = rs_tOracleInput_1.getBigDecimal(22);
					} else {
				
						row1.TIEMPO_CITA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 23) {
								row1.FECHAI_CITA = null;
							} else {
										
			row1.FECHAI_CITA = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 23);
		                    }
							if(colQtyInRs_tOracleInput_1 < 24) {
								row1.FECHAF_CITA = null;
							} else {
										
			row1.FECHAF_CITA = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 24);
		                    }
							if(colQtyInRs_tOracleInput_1 < 25) {
								row1.FECHA_LLEGADA = null;
							} else {
										
			row1.FECHA_LLEGADA = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 25);
		                    }
							if(colQtyInRs_tOracleInput_1 < 26) {
								row1.FECHAI_ATENCION = null;
							} else {
										
			row1.FECHAI_ATENCION = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 26);
		                    }
							if(colQtyInRs_tOracleInput_1 < 27) {
								row1.FECHAF_ATENCION = null;
							} else {
										
			row1.FECHAF_ATENCION = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 27);
		                    }
							if(colQtyInRs_tOracleInput_1 < 28) {
								row1.ESM_ATENCION_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(28) != null) {
						row1.ESM_ATENCION_ID = rs_tOracleInput_1.getBigDecimal(28);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 29) {
								row1.CIE10 = null;
							} else {
	                         		
        	row1.CIE10 = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 29, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 30) {
								row1.DIAGNOSTICO = null;
							} else {
	                         		
        	row1.DIAGNOSTICO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 30, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 31) {
								row1.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(31) != null) {
						row1.ESTREGISTRO_ID = rs_tOracleInput_1.getBigDecimal(31);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 32) {
								row1.ADMISIONES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(32) != null) {
						row1.ADMISIONES_ID = rs_tOracleInput_1.getBigDecimal(32);
					} else {
				
						row1.ADMISIONES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 33) {
								row1.TCITA_CHECK = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(33) != null) {
						row1.TCITA_CHECK = rs_tOracleInput_1.getBigDecimal(33);
					} else {
				
						row1.TCITA_CHECK = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 34) {
								row1.FECHA_CANCELACION = null;
							} else {
										
			row1.FECHA_CANCELACION = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 34);
		                    }
							if(colQtyInRs_tOracleInput_1 < 35) {
								row1.OBSERVACIONES = null;
							} else {
	                         		
        	row1.OBSERVACIONES = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 35, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 36) {
								row1.CUPS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(36) != null) {
						row1.CUPS_ID = rs_tOracleInput_1.getBigDecimal(36);
					} else {
				
						row1.CUPS_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
						row13Struct row13 = null;
					
						row12Struct row12 = null;
					
						row17Struct row17 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row13" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow13 = false;
       		  	    	
       		  	    	
 							row13Struct row13ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    row13HashKey.IDENFITICADOR = row1.TIEMPO_CITA;
                        		    		

								
		                        	row13HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row13.lookup( row13HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row13 != null && tHash_Lookup_row13.getCount(row13HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row13' and it contains more one result from keys :  row13.IDENFITICADOR = '" + row13HashKey.IDENFITICADOR + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row13Struct fromLookup_row13 = null;
							row13 = row13Default;
										 
							
								 
							
							
								if (tHash_Lookup_row13 !=null && tHash_Lookup_row13.hasNext()) { // G 099
								
							
								
								fromLookup_row13 = tHash_Lookup_row13.next();

							
							
								} // G 099
							
							

							if(fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    row12HashKey.IDENFITICADOR = row1.TIEMPO_SCITA;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row12.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_5 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.IDENFITICADOR = '" + row12HashKey.IDENFITICADOR + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								 
							
							
								if (tHash_Lookup_row12 !=null && tHash_Lookup_row12.hasNext()) { // G 099
								
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							
							
								} // G 099
							
							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row17" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow17 = false;
       		  	    	
       		  	    	
 							row17Struct row17ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row17.lookup( row17HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row17 != null && tHash_Lookup_row17.getCount(row17HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row17' and it contains more one result from keys : ");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row17Struct fromLookup_row17 = null;
							row17 = row17Default;
										 
							
								 
							
							
								if (tHash_Lookup_row17 !=null && tHash_Lookup_row17.hasNext()) { // G 099
								
							
								
								fromLookup_row17 = tHash_Lookup_row17.next();

							
							
								} // G 099
							
							

							if(fromLookup_row17 != null) {
								row17 = fromLookup_row17;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

out_1 = null;

if(!rejectedInnerJoin_tMap_5 ) {

// # Output table : 'out_1'
out_1_tmp.SCITAS_ID = row1.SCITAS_ID ;
out_1_tmp.TIEMPO_SCITA = row1.TIEMPO_SCITA ;
out_1_tmp.TSCITAS_ID = row1.TSCITAS_ID ;
out_1_tmp.PRIORITARIA = row1.PRIORITARIA ;
out_1_tmp.ESTADO_SCITA = row1.ESTADO_SCITA ;
out_1_tmp.USUARIO_SCITA = row1.USUARIO_SCITA ;
out_1_tmp.TASIGNACIONES_ID = row1.TASIGNACIONES_ID ;
out_1_tmp.CITAS_ID = row1.CITAS_ID ;
out_1_tmp.PROFESIONALES_ID = row1.PROFESIONALES_ID ;
out_1_tmp.PACIENTES_ID = row1.PACIENTES_ID ;
out_1_tmp.ESPECIALIDADES_ID = row1.ESPECIALIDADES_ID ;
out_1_tmp.FECHA_SCITA = row1.FECHA_SCITA ;
out_1_tmp.USUARIO_CITA = row1.USUARIO_CITA ;
out_1_tmp.ESTADO_ID = row1.ESTADO_ID ;
out_1_tmp.TCITAS_ID = row1.TCITAS_ID ;
out_1_tmp.CONSULTORIO = row1.CONSULTORIO ;
out_1_tmp.MOTIVOCONSULTA = row1.MOTIVOCONSULTA ;
out_1_tmp.TCAUSALES_ID = row1.TCAUSALES_ID ;
out_1_tmp.JUSTIFICACION = row1.JUSTIFICACION ;
out_1_tmp.FECHA_CREACION = row1.FECHA_CREACION ;
out_1_tmp.FDISPONIBLE = row1.FDISPONIBLE ;
out_1_tmp.FECHAI_CITA = row1.FECHAI_CITA ;
out_1_tmp.FECHAF_CITA = row1.FECHAF_CITA ;
out_1_tmp.FECHA_LLEGADA = row1.FECHA_LLEGADA ;
out_1_tmp.FECHAI_ATENCION = row1.FECHAI_ATENCION ;
out_1_tmp.FECHAF_ATENCION = row1.FECHAF_ATENCION ;
out_1_tmp.ESM_ATENCION_ID = row1.ESM_ATENCION_ID ;
out_1_tmp.CIE10 = row1.CIE10 ;
out_1_tmp.DIAGNOSTICO = row1.DIAGNOSTICO ;
out_1_tmp.ESTREGISTRO_ID = row1.ESTREGISTRO_ID ;
out_1_tmp.ADMISIONES_ID = row1.ADMISIONES_ID ;
out_1_tmp.TCITA_CHECK = row1.TCITA_CHECK ;
out_1_tmp.FECHA_CANCELACION = row1.FECHA_CANCELACION ;
out_1_tmp.OBSERVACIONES_CITA = row1.OBSERVACIONES ;
out_1_tmp.TIEMPOC_ID = row13.ID ;
out_1_tmp.TIEMPOS_ID = row12.ID ;
out_1_tmp.TIPO_USUARIO = row17.TIPO_USUARIO ;
out_1_tmp.CUPS_ID = row1.CUPS_ID ;
out_1 = out_1_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "out_1"
if(out_1 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out_1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
						row3Struct row3 = null;
					
						row4Struct row4 = null;
					
						row5Struct row5 = null;
					
						row6Struct row6 = null;
					
						row14Struct row14 = null;
					
						row15Struct row15 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row3" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow3 = false;
       		  	    	
       		  	    	
 							row3Struct row3ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row3HashKey.ID = out_1.TCITAS_ID;
                        		    		

								
		                        	row3HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row3.lookup( row3HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row3 != null && tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.ID = '" + row3HashKey.ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row3Struct fromLookup_row3 = null;
							row3 = row3Default;
										 
							
								 
							
							
								if (tHash_Lookup_row3 !=null && tHash_Lookup_row3.hasNext()) { // G 099
								
							
								
								fromLookup_row3 = tHash_Lookup_row3.next();

							
							
								} // G 099
							
							

							if(fromLookup_row3 != null) {
								row3 = fromLookup_row3;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row4HashKey.ID = out_1.ESTADO_ID;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.ID = '" + row4HashKey.ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row5" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow5 = false;
       		  	    	
       		  	    	
 							row5Struct row5ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row5HashKey.ID = out_1.TCAUSALES_ID ;
                        		    		

								
		                        	row5HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row5.lookup( row5HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row5 != null && tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5' and it contains more one result from keys :  row5.ID = '" + row5HashKey.ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row5Struct fromLookup_row5 = null;
							row5 = row5Default;
										 
							
								 
							
							
								if (tHash_Lookup_row5 !=null && tHash_Lookup_row5.hasNext()) { // G 099
								
							
								
								fromLookup_row5 = tHash_Lookup_row5.next();

							
							
								} // G 099
							
							

							if(fromLookup_row5 != null) {
								row5 = fromLookup_row5;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row6" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow6 = false;
       		  	    	
       		  	    	
 							row6Struct row6ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row6HashKey.ID = out_1.ESM_ATENCION_ID;
                        		    		

								
		                        	row6HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row6.lookup( row6HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row6 != null && tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6' and it contains more one result from keys :  row6.ID = '" + row6HashKey.ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row6Struct fromLookup_row6 = null;
							row6 = row6Default;
										 
							
								 
							
							
								if (tHash_Lookup_row6 !=null && tHash_Lookup_row6.hasNext()) { // G 099
								
							
								
								fromLookup_row6 = tHash_Lookup_row6.next();

							
							
								} // G 099
							
							

							if(fromLookup_row6 != null) {
								row6 = fromLookup_row6;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row14" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow14 = false;
       		  	    	
       		  	    	
 							row14Struct row14ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row14HashKey.ID = out_1.TASIGNACIONES_ID ;
                        		    		

								
		                        	row14HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row14.lookup( row14HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row14 != null && tHash_Lookup_row14.getCount(row14HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row14' and it contains more one result from keys :  row14.ID = '" + row14HashKey.ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row14Struct fromLookup_row14 = null;
							row14 = row14Default;
										 
							
								 
							
							
								if (tHash_Lookup_row14 !=null && tHash_Lookup_row14.hasNext()) { // G 099
								
							
								
								fromLookup_row14 = tHash_Lookup_row14.next();

							
							
								} // G 099
							
							

							if(fromLookup_row14 != null) {
								row14 = fromLookup_row14;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row15" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow15 = false;
       		  	    	
       		  	    	
 							row15Struct row15ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row15HashKey.ID = out_1.TSCITAS_ID ;
                        		    		

								
		                        	row15HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row15.lookup( row15HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row15 != null && tHash_Lookup_row15.getCount(row15HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row15' and it contains more one result from keys :  row15.ID = '" + row15HashKey.ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row15Struct fromLookup_row15 = null;
							row15 = row15Default;
										 
							
								 
							
							
								if (tHash_Lookup_row15 !=null && tHash_Lookup_row15.hasNext()) { // G 099
								
							
								
								fromLookup_row15 = tHash_Lookup_row15.next();

							
							
								} // G 099
							
							

							if(fromLookup_row15 != null) {
								row15 = fromLookup_row15;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

out_2 = null;


// # Output table : 'out_2'
out_2_tmp.SCITAS_ID = out_1.SCITAS_ID ;
out_2_tmp.TIEMPO_SCITA = out_1.TIEMPO_SCITA ;
out_2_tmp.TSCITAS_ID = out_1.TSCITAS_ID ;
out_2_tmp.PRIORITARIA = out_1.PRIORITARIA ;
out_2_tmp.ESTADO_SCITA = out_1.ESTADO_SCITA ;
out_2_tmp.USUARIO_SCITA = out_1.USUARIO_SCITA ;
out_2_tmp.TASIGNACIONES_ID = out_1.TASIGNACIONES_ID ;
out_2_tmp.CITAS_ID = out_1.CITAS_ID ;
out_2_tmp.PROFESIONALES_ID = out_1.PROFESIONALES_ID ;
out_2_tmp.PACIENTES_ID = out_1.PACIENTES_ID ;
out_2_tmp.ESPECIALIDADES_ID = out_1.ESPECIALIDADES_ID ;
out_2_tmp.FECHA_SCITA = out_1.FECHA_SCITA ;
out_2_tmp.USUARIO_CITA = out_1.USUARIO_CITA ;
out_2_tmp.ESTADO_ID = out_1.ESTADO_ID ;
out_2_tmp.TCITAS_ID = out_1.TCITAS_ID ;
out_2_tmp.CONSULTORIO = out_1.CONSULTORIO ;
out_2_tmp.MOTIVOCONSULTA = out_1.MOTIVOCONSULTA ;
out_2_tmp.TCAUSALES_ID = out_1.TCAUSALES_ID ;
out_2_tmp.JUSTIFICACION = out_1.JUSTIFICACION ;
out_2_tmp.FECHA_CREACION = out_1.FECHA_CREACION ;
out_2_tmp.FDISPONIBLE = out_1.FDISPONIBLE ;
out_2_tmp.FECHAI_CITA = out_1.FECHAI_CITA ;
out_2_tmp.FECHAF_CITA = out_1.FECHAF_CITA ;
out_2_tmp.FECHA_LLEGADA = out_1.FECHA_LLEGADA ;
out_2_tmp.FECHAI_ATENCION = out_1.FECHAI_ATENCION ;
out_2_tmp.FECHAF_ATENCION = out_1.FECHAF_ATENCION ;
out_2_tmp.ESM_ATENCION_ID = out_1.ESM_ATENCION_ID ;
out_2_tmp.CIE10 = out_1.CIE10 ;
out_2_tmp.DIAGNOSTICO = out_1.DIAGNOSTICO ;
out_2_tmp.ESTREGISTRO_ID = out_1.ESTREGISTRO_ID ;
out_2_tmp.ADMISIONES_ID = out_1.ADMISIONES_ID ;
out_2_tmp.TCITA_CHECK = out_1.TCITA_CHECK ;
out_2_tmp.FECHA_CANCELACION = out_1.FECHA_CANCELACION ;
out_2_tmp.TIEMPOC_ID = out_1.TIEMPOC_ID;
out_2_tmp.TIEMPOS_ID = out_1.TIEMPOS_ID ;
out_2_tmp.OBSERVACIONES_CITA = out_1.OBSERVACIONES_CITA ;
out_2_tmp.TIPO_USUARIO = out_1.TIPO_USUARIO ;
out_2_tmp.CUPS_ID = out_1.CUPS_ID ;
out_2_tmp.TIPO_CITA = row3.NOMBRE ;
out_2_tmp.ESTADO_CITA = row4.NOMBRE ;
out_2_tmp.TIPO_CAUSAL = row5.DESCRIPCION ;
out_2_tmp.ESM_ATENCION_NOMBRE = row6.NOMBRE ;
out_2_tmp.ESM_ATENCION_SIGLA = row6.SIGLA ;
out_2_tmp.ESM_ATENCION_FUERZA_ID = row6.FUERZA_ID ;
out_2_tmp.ESM_ATENCION_DIVIPOLA_ID = row6.DIVIPOLA_ID ;
out_2_tmp.TIPO_ASIGNACION = row14.NOMBRE ;
out_2_tmp.TIPO_SCITA = row15.NOMBRE ;
out_2 = out_2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "out_2"
if(out_2 != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out_2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
						row7Struct row7 = null;
					
						row8Struct row8 = null;
					
						row9Struct row9 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_6 = false;
		boolean mainRowRejected_tMap_6 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row7" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow7 = false;
       		  	    	
       		  	    	
 							row7Struct row7ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row7HashKey.ID = out_2.ESM_ATENCION_FUERZA_ID ;
                        		    		

								
		                        	row7HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row7.lookup( row7HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row7 != null && tHash_Lookup_row7.getCount(row7HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7' and it contains more one result from keys :  row7.ID = '" + row7HashKey.ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row7Struct fromLookup_row7 = null;
							row7 = row7Default;
										 
							
								 
							
							
								if (tHash_Lookup_row7 !=null && tHash_Lookup_row7.hasNext()) { // G 099
								
							
								
								fromLookup_row7 = tHash_Lookup_row7.next();

							
							
								} // G 099
							
							

							if(fromLookup_row7 != null) {
								row7 = fromLookup_row7;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row8" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow8 = false;
       		  	    	
       		  	    	
 							row8Struct row8ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row8HashKey.ID = out_2.ESPECIALIDADES_ID;
                        		    		

								
		                        	row8HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row8.lookup( row8HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row8 != null && tHash_Lookup_row8.getCount(row8HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.ID = '" + row8HashKey.ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row8Struct fromLookup_row8 = null;
							row8 = row8Default;
										 
							
								 
							
							
								if (tHash_Lookup_row8 !=null && tHash_Lookup_row8.hasNext()) { // G 099
								
							
								
								fromLookup_row8 = tHash_Lookup_row8.next();

							
							
								} // G 099
							
							

							if(fromLookup_row8 != null) {
								row8 = fromLookup_row8;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row9HashKey.ID = out_2.ESM_ATENCION_DIVIPOLA_ID;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row9 != null && tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.ID = '" + row9HashKey.ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								 
							
							
								if (tHash_Lookup_row9 !=null && tHash_Lookup_row9.hasNext()) { // G 099
								
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							
							
								} // G 099
							
							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

out_3 = null;


// # Output table : 'out_3'
out_3_tmp.SCITAS_ID = out_2.SCITAS_ID ;
out_3_tmp.TIEMPO_SCITA = out_2.TIEMPO_SCITA ;
out_3_tmp.TSCITAS_ID = out_2.TSCITAS_ID ;
out_3_tmp.PRIORITARIA = out_2.PRIORITARIA ;
out_3_tmp.ESTADO_SCITA = out_2.ESTADO_SCITA ;
out_3_tmp.USUARIO_SCITA = out_2.USUARIO_SCITA ;
out_3_tmp.TASIGNACIONES_ID = out_2.TASIGNACIONES_ID ;
out_3_tmp.CITAS_ID = out_2.CITAS_ID ;
out_3_tmp.PROFESIONALES_ID = out_2.PROFESIONALES_ID ;
out_3_tmp.PACIENTES_ID = out_2.PACIENTES_ID ;
out_3_tmp.ESPECIALIDADES_ID = out_2.ESPECIALIDADES_ID ;
out_3_tmp.FECHA_SCITA = out_2.FECHA_SCITA ;
out_3_tmp.USUARIO_CITA = out_2.USUARIO_CITA ;
out_3_tmp.ESTADO_ID = out_2.ESTADO_ID ;
out_3_tmp.TCITAS_ID = out_2.TCITAS_ID ;
out_3_tmp.CONSULTORIO = out_2.CONSULTORIO ;
out_3_tmp.MOTIVOCONSULTA = out_2.MOTIVOCONSULTA ;
out_3_tmp.TCAUSALES_ID = out_2.TCAUSALES_ID ;
out_3_tmp.JUSTIFICACION = out_2.JUSTIFICACION ;
out_3_tmp.FECHA_CREACION = out_2.FECHA_CREACION ;
out_3_tmp.FDISPONIBLE = out_2.FDISPONIBLE ;
out_3_tmp.FECHAI_CITA = out_2.FECHAI_CITA ;
out_3_tmp.FECHAF_CITA = out_2.FECHAF_CITA ;
out_3_tmp.FECHA_LLEGADA = out_2.FECHA_LLEGADA ;
out_3_tmp.FECHAI_ATENCION = out_2.FECHAI_ATENCION ;
out_3_tmp.FECHAF_ATENCION = out_2.FECHAF_ATENCION ;
out_3_tmp.ESM_ATENCION_ID = out_2.ESM_ATENCION_ID ;
out_3_tmp.CIE10 = out_2.CIE10 ;
out_3_tmp.DIAGNOSTICO = out_2.DIAGNOSTICO ;
out_3_tmp.ESTREGISTRO_ID = out_2.ESTREGISTRO_ID ;
out_3_tmp.ADMISIONES_ID = out_2.ADMISIONES_ID ;
out_3_tmp.TCITA_CHECK = out_2.TCITA_CHECK ;
out_3_tmp.FECHA_CANCELACION = out_2.FECHA_CANCELACION ;
out_3_tmp.TIEMPOC_ID = out_2.TIEMPOC_ID;
out_3_tmp.TIEMPOS_ID = out_2.TIEMPOS_ID;
out_3_tmp.OBSERVACIONES_CITA = out_2.OBSERVACIONES_CITA ;
out_3_tmp.TIPO_USUARIO = out_2.TIPO_USUARIO ;
out_3_tmp.CUPS_ID = out_2.CUPS_ID ;
out_3_tmp.TIPO_CITA = out_2.TIPO_CITA ;
out_3_tmp.ESTADO_CITA = out_2.ESTADO_CITA ;
out_3_tmp.TIPO_CAUSAL = out_2.TIPO_CAUSAL ;
out_3_tmp.ESM_ATENCION_NOMBRE = out_2.ESM_ATENCION_NOMBRE ;
out_3_tmp.ESM_ATENCION_SIGLA = out_2.ESM_ATENCION_SIGLA ;
out_3_tmp.ESM_ATENCION_FUERZA_ID = out_2.ESM_ATENCION_FUERZA_ID ;
out_3_tmp.ESM_DIVIPOLA_ID = out_2.ESM_ATENCION_DIVIPOLA_ID ;
out_3_tmp.TIPO_ASIGNACION = out_2.TIPO_ASIGNACION ;
out_3_tmp.TIPO_SCITA = out_2.TIPO_SCITA;
out_3_tmp.FUERZA_NOMBRE = row7.NOMBRE ;
out_3_tmp.FUERZA_SIGLA = row7.SIGLA ;
out_3_tmp.ESPECIALIDAD = row8.NOMBRE ;
out_3_tmp.MCPIO = row9.MCPIO ;
out_3_tmp.CCPP = row9.CCPP;
out_3 = out_3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "out_3"
if(out_3 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out_3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;
Var.hora_cita = out_3.FECHAI_CITA == null ? null : TalendDate.formatDate("hh:mm aa",out_3.FECHAI_CITA ) ;
Var.hora_fincita = out_3.FECHAF_CITA == null ? null : TalendDate.formatDate("hh:mm aa",out_3.FECHAF_CITA ) ;
Var.hora_llegada = out_3.FECHA_LLEGADA == null ? null : TalendDate.formatDate("hh:mm aa",out_3.FECHA_LLEGADA ) ;
Var.hora_iatencion = out_3.FECHAI_ATENCION == null ? null : TalendDate.formatDate("hh:mm aa",out_3.FECHAI_ATENCION) ;
Var.hora_fatencion = out_3.FECHAF_ATENCION == null ? null : TalendDate.formatDate("hh:mm aa",out_3.FECHAF_ATENCION) ;
Var.t_asignacion = new BigDecimal(Utils.difmis(out_3.FECHA_SCITA,out_3.FECHAI_CITA)/3600000) ;
Var.t_espera = new BigDecimal(Utils.difmis(out_3.FECHA_LLEGADA,out_3.FECHAI_ATENCION)/60000) ;
Var.t_atencion = new BigDecimal(Utils.difmis(out_3.FECHAI_ATENCION,out_3.FECHAF_ATENCION)/60000) ;
Var.t_muerto = Utils.tmuerto_cita(out_3.FECHAI_CITA,out_3.FECHAF_CITA,out_3.FECHAI_ATENCION,out_3.FECHAF_ATENCION, out_3.ESTADO_CITA ) ;// ###############################
        // ###############################
        // # Output tables

ins_cita = null;


// # Output table : 'ins_cita'
ins_cita_tmp.ID = out_3.CITAS_ID ;
ins_cita_tmp.TIEMPO_CITA = out_3.TIEMPOC_ID ;
ins_cita_tmp.SOLICITUDES_ID = out_3.SCITAS_ID;
ins_cita_tmp.PROFESIONALES_ID = out_3.PROFESIONALES_ID ;
ins_cita_tmp.PERSONAS_ID = out_3.PACIENTES_ID;
ins_cita_tmp.FECHA_CREACION = out_3.FECHA_CREACION ;
ins_cita_tmp.FCREACION_SCITA = out_3.FECHA_SCITA ;
ins_cita_tmp.ESTADO_CITA = out_3.ESTADO_CITA ;
ins_cita_tmp.TIPO_CITA = out_3.TIPO_CITA ;
ins_cita_tmp.MOTIVO_CONSULTA = out_3.MOTIVOCONSULTA ;
ins_cita_tmp.DIAGNOSTICO = out_3.DIAGNOSTICO;
ins_cita_tmp.TIPO_CAUSAL = out_3.TIPO_CAUSAL ;
ins_cita_tmp.JUSTIFICACION = out_3.JUSTIFICACION ;
ins_cita_tmp.USUARIO_CITA = out_3.USUARIO_CITA ;
ins_cita_tmp.ESM_ATENCION = out_3.ESM_ATENCION_NOMBRE ;
ins_cita_tmp.FUERZA_ESM = out_3.FUERZA_NOMBRE ;
ins_cita_tmp.CIUDAD_ESM = out_3.CCPP ;
ins_cita_tmp.TIEMPO_ESPERA = Var.t_espera ;
ins_cita_tmp.TIEMPO_ATENCION = Var.t_atencion ;
ins_cita_tmp.TIEMPO_MUERTO = Var.t_muerto ;
ins_cita_tmp.HORA_FATENCION = Var.hora_fatencion ;
ins_cita_tmp.TIEMPO_ASIGNACION = Var.t_asignacion ;
ins_cita_tmp.HORA_ICITA = Var.hora_cita ;
ins_cita_tmp.HORA_IATENCION = Var.hora_iatencion ;
ins_cita_tmp.HORA_FCITA = Var.hora_fincita ;
ins_cita_tmp.HORA_LLEGADA = Var.hora_llegada ;
ins_cita_tmp.CONSULTORIO = out_3.CONSULTORIO;
ins_cita_tmp.CIE10 = out_3.CIE10;
ins_cita_tmp.ESPECIALIDADES_ID = out_3.ESPECIALIDADES_ID ;
ins_cita_tmp.ESM_ATENCION_ID = out_3.ESM_ATENCION_ID;
ins_cita_tmp.FECHA_LLEGADA = out_3.FECHA_LLEGADA ;
ins_cita_tmp.FECHAI_CITA = out_3.FECHAI_CITA ;
ins_cita_tmp.FECHAF_CITA = out_3.FECHAF_CITA ;
ins_cita_tmp.ESM_ATESIGLA = out_3.ESM_ATENCION_SIGLA ;
ins_cita_tmp.MUNICIPIO_ESM = out_3.MCPIO ;
ins_cita_tmp.ESTREGISTRO_ID = out_3.ESTREGISTRO_ID ;
ins_cita_tmp.FDISPONIBLE = out_3.FDISPONIBLE ;
ins_cita_tmp.TIEMPO_SCITA = out_3.TIEMPOS_ID ;
ins_cita_tmp.TIPO_SCITA = out_3.TIPO_SCITA;
ins_cita_tmp.TIPO_ASIGNACION = out_3.TIPO_ASIGNACION ;
ins_cita_tmp.USUARIO_SCITA = out_3.USUARIO_SCITA ;
ins_cita_tmp.ESTADO_SCITA = out_3.ESTADO_SCITA ;
ins_cita_tmp.PRIORITARIA = out_3.PRIORITARIA ;
ins_cita_tmp.ADMISIONES_ID = out_3.ADMISIONES_ID ;
ins_cita_tmp.TCITA = out_3.TCITA_CHECK ;
ins_cita_tmp.FECHA_CANCELACION = out_3.FECHA_CANCELACION ;
ins_cita_tmp.OBSERVACIONES_CITA = out_3.OBSERVACIONES_CITA ;
ins_cita_tmp.TIPO_USUARIO = out_3.TIPO_USUARIO ;
ins_cita_tmp.CUPS_ID = out_3.CUPS_ID ;
ins_cita = ins_cita_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "ins_cita"
if(ins_cita != null) { 



	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ins_cita"
						
						);
					}
					



        whetherReject_tOracleOutput_1 = false;
                    pstmt_tOracleOutput_1.setBigDecimal(1, ins_cita.ID);

            int checkCount_tOracleOutput_1 = -1;
            try (java.sql.ResultSet rs_tOracleOutput_1 = pstmt_tOracleOutput_1.executeQuery()) {
                while(rs_tOracleOutput_1.next()) {
                    checkCount_tOracleOutput_1 = rs_tOracleOutput_1.getInt(1);
                }
            }
            if(checkCount_tOracleOutput_1 > 0) {
                        pstmtUpdate_tOracleOutput_1.setBigDecimal(1, ins_cita.TIEMPO_CITA);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(2, ins_cita.SOLICITUDES_ID);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(3, ins_cita.PROFESIONALES_ID);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(4, ins_cita.PERSONAS_ID);

                        if(ins_cita.FECHA_CREACION != null) {
pstmtUpdate_tOracleOutput_1.setTimestamp(5, new java.sql.Timestamp(ins_cita.FECHA_CREACION.getTime()));
} else {
pstmtUpdate_tOracleOutput_1.setNull(5, java.sql.Types.DATE);
}

                        if(ins_cita.FCREACION_SCITA != null) {
pstmtUpdate_tOracleOutput_1.setObject(6, new java.sql.Timestamp(ins_cita.FCREACION_SCITA.getTime()),java.sql.Types.DATE);
} else {
pstmtUpdate_tOracleOutput_1.setNull(6, java.sql.Types.DATE);
}

                        if(ins_cita.ESTADO_CITA == null) {
pstmtUpdate_tOracleOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(7, ins_cita.ESTADO_CITA);
}

                        if(ins_cita.TIPO_CITA == null) {
pstmtUpdate_tOracleOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(8, ins_cita.TIPO_CITA);
}

                        if(ins_cita.MOTIVO_CONSULTA == null) {
pstmtUpdate_tOracleOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(9, ins_cita.MOTIVO_CONSULTA);
}

                        if(ins_cita.DIAGNOSTICO == null) {
pstmtUpdate_tOracleOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(10, ins_cita.DIAGNOSTICO);
}

                        if(ins_cita.TIPO_CAUSAL == null) {
pstmtUpdate_tOracleOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(11, ins_cita.TIPO_CAUSAL);
}

                        if(ins_cita.JUSTIFICACION == null) {
pstmtUpdate_tOracleOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(12, ins_cita.JUSTIFICACION);
}

                        if(ins_cita.USUARIO_CITA == null) {
pstmtUpdate_tOracleOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(13, ins_cita.USUARIO_CITA);
}

                        if(ins_cita.ESM_ATENCION == null) {
pstmtUpdate_tOracleOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(14, ins_cita.ESM_ATENCION);
}

                        if(ins_cita.FUERZA_ESM == null) {
pstmtUpdate_tOracleOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(15, ins_cita.FUERZA_ESM);
}

                        if(ins_cita.CIUDAD_ESM == null) {
pstmtUpdate_tOracleOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(16, ins_cita.CIUDAD_ESM);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(17, ins_cita.TIEMPO_ESPERA);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(18, ins_cita.TIEMPO_ATENCION);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(19, ins_cita.TIEMPO_MUERTO);

                        if(ins_cita.HORA_FATENCION == null) {
pstmtUpdate_tOracleOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(20, ins_cita.HORA_FATENCION);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(21, ins_cita.TIEMPO_ASIGNACION);

                        if(ins_cita.HORA_ICITA == null) {
pstmtUpdate_tOracleOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(22, ins_cita.HORA_ICITA);
}

                        if(ins_cita.HORA_IATENCION == null) {
pstmtUpdate_tOracleOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(23, ins_cita.HORA_IATENCION);
}

                        if(ins_cita.HORA_FCITA == null) {
pstmtUpdate_tOracleOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(24, ins_cita.HORA_FCITA);
}

                        if(ins_cita.HORA_LLEGADA == null) {
pstmtUpdate_tOracleOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(25, ins_cita.HORA_LLEGADA);
}

                        if(ins_cita.CONSULTORIO == null) {
pstmtUpdate_tOracleOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(26, ins_cita.CONSULTORIO);
}

                        if(ins_cita.CIE10 == null) {
pstmtUpdate_tOracleOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(27, ins_cita.CIE10);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(28, ins_cita.ESPECIALIDADES_ID);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(29, ins_cita.ESM_ATENCION_ID);

                        if(ins_cita.FECHA_LLEGADA != null) {
pstmtUpdate_tOracleOutput_1.setTimestamp(30, new java.sql.Timestamp(ins_cita.FECHA_LLEGADA.getTime()));
} else {
pstmtUpdate_tOracleOutput_1.setNull(30, java.sql.Types.DATE);
}

                        if(ins_cita.FECHAI_CITA != null) {
pstmtUpdate_tOracleOutput_1.setTimestamp(31, new java.sql.Timestamp(ins_cita.FECHAI_CITA.getTime()));
} else {
pstmtUpdate_tOracleOutput_1.setNull(31, java.sql.Types.DATE);
}

                        if(ins_cita.FECHAF_CITA != null) {
pstmtUpdate_tOracleOutput_1.setTimestamp(32, new java.sql.Timestamp(ins_cita.FECHAF_CITA.getTime()));
} else {
pstmtUpdate_tOracleOutput_1.setNull(32, java.sql.Types.DATE);
}

                        if(ins_cita.ESM_ATESIGLA == null) {
pstmtUpdate_tOracleOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(33, ins_cita.ESM_ATESIGLA);
}

                        if(ins_cita.MUNICIPIO_ESM == null) {
pstmtUpdate_tOracleOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(34, ins_cita.MUNICIPIO_ESM);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(35, ins_cita.ESTREGISTRO_ID);

                        if(ins_cita.FDISPONIBLE != null) {
pstmtUpdate_tOracleOutput_1.setObject(36, new java.sql.Timestamp(ins_cita.FDISPONIBLE.getTime()),java.sql.Types.DATE);
} else {
pstmtUpdate_tOracleOutput_1.setNull(36, java.sql.Types.DATE);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(37, ins_cita.TIEMPO_SCITA);

                        if(ins_cita.TIPO_SCITA == null) {
pstmtUpdate_tOracleOutput_1.setNull(38, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(38, ins_cita.TIPO_SCITA);
}

                        if(ins_cita.TIPO_ASIGNACION == null) {
pstmtUpdate_tOracleOutput_1.setNull(39, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(39, ins_cita.TIPO_ASIGNACION);
}

                        if(ins_cita.USUARIO_SCITA == null) {
pstmtUpdate_tOracleOutput_1.setNull(40, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(40, ins_cita.USUARIO_SCITA);
}

                        if(ins_cita.ESTADO_SCITA == null) {
pstmtUpdate_tOracleOutput_1.setNull(41, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(41, ins_cita.ESTADO_SCITA);
}

                        if(ins_cita.PRIORITARIA == null) {
pstmtUpdate_tOracleOutput_1.setNull(42, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(42, ins_cita.PRIORITARIA);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(43, ins_cita.ADMISIONES_ID);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(44, ins_cita.TCITA);

                        if(ins_cita.FECHA_CANCELACION != null) {
pstmtUpdate_tOracleOutput_1.setObject(45, new java.sql.Timestamp(ins_cita.FECHA_CANCELACION.getTime()),java.sql.Types.DATE);
} else {
pstmtUpdate_tOracleOutput_1.setNull(45, java.sql.Types.DATE);
}

                        if(ins_cita.OBSERVACIONES_CITA == null) {
pstmtUpdate_tOracleOutput_1.setNull(46, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(46, ins_cita.OBSERVACIONES_CITA);
}

                        if(ins_cita.TIPO_USUARIO == null) {
pstmtUpdate_tOracleOutput_1.setNull(47, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(47, ins_cita.TIPO_USUARIO);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(48, ins_cita.CUPS_ID);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(49 + count_tOracleOutput_1, ins_cita.ID);

                try {
                    int processedCount_tOracleOutput_1 = pstmtUpdate_tOracleOutput_1.executeUpdate();
                    updatedCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    rowsToCommitCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    nb_line_tOracleOutput_1++;
                } catch(java.lang.Exception e_tOracleOutput_1) {
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
                    whetherReject_tOracleOutput_1 = true;
                        nb_line_tOracleOutput_1++;
                            System.err.print(e_tOracleOutput_1.getMessage());
                }
            } else {
                        pstmtInsert_tOracleOutput_1.setBigDecimal(1, ins_cita.ID);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(2, ins_cita.TIEMPO_CITA);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(3, ins_cita.SOLICITUDES_ID);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(4, ins_cita.PROFESIONALES_ID);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(5, ins_cita.PERSONAS_ID);

                        if(ins_cita.FECHA_CREACION != null) {
pstmtInsert_tOracleOutput_1.setTimestamp(6, new java.sql.Timestamp(ins_cita.FECHA_CREACION.getTime()));
} else {
pstmtInsert_tOracleOutput_1.setNull(6, java.sql.Types.DATE);
}

                        if(ins_cita.FCREACION_SCITA != null) {
pstmtInsert_tOracleOutput_1.setObject(7, new java.sql.Timestamp(ins_cita.FCREACION_SCITA.getTime()),java.sql.Types.DATE);
} else {
pstmtInsert_tOracleOutput_1.setNull(7, java.sql.Types.DATE);
}

                        if(ins_cita.ESTADO_CITA == null) {
pstmtInsert_tOracleOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(8, ins_cita.ESTADO_CITA);
}

                        if(ins_cita.TIPO_CITA == null) {
pstmtInsert_tOracleOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(9, ins_cita.TIPO_CITA);
}

                        if(ins_cita.MOTIVO_CONSULTA == null) {
pstmtInsert_tOracleOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(10, ins_cita.MOTIVO_CONSULTA);
}

                        if(ins_cita.DIAGNOSTICO == null) {
pstmtInsert_tOracleOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(11, ins_cita.DIAGNOSTICO);
}

                        if(ins_cita.TIPO_CAUSAL == null) {
pstmtInsert_tOracleOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(12, ins_cita.TIPO_CAUSAL);
}

                        if(ins_cita.JUSTIFICACION == null) {
pstmtInsert_tOracleOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(13, ins_cita.JUSTIFICACION);
}

                        if(ins_cita.USUARIO_CITA == null) {
pstmtInsert_tOracleOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(14, ins_cita.USUARIO_CITA);
}

                        if(ins_cita.ESM_ATENCION == null) {
pstmtInsert_tOracleOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(15, ins_cita.ESM_ATENCION);
}

                        if(ins_cita.FUERZA_ESM == null) {
pstmtInsert_tOracleOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(16, ins_cita.FUERZA_ESM);
}

                        if(ins_cita.CIUDAD_ESM == null) {
pstmtInsert_tOracleOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(17, ins_cita.CIUDAD_ESM);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(18, ins_cita.TIEMPO_ESPERA);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(19, ins_cita.TIEMPO_ATENCION);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(20, ins_cita.TIEMPO_MUERTO);

                        if(ins_cita.HORA_FATENCION == null) {
pstmtInsert_tOracleOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(21, ins_cita.HORA_FATENCION);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(22, ins_cita.TIEMPO_ASIGNACION);

                        if(ins_cita.HORA_ICITA == null) {
pstmtInsert_tOracleOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(23, ins_cita.HORA_ICITA);
}

                        if(ins_cita.HORA_IATENCION == null) {
pstmtInsert_tOracleOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(24, ins_cita.HORA_IATENCION);
}

                        if(ins_cita.HORA_FCITA == null) {
pstmtInsert_tOracleOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(25, ins_cita.HORA_FCITA);
}

                        if(ins_cita.HORA_LLEGADA == null) {
pstmtInsert_tOracleOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(26, ins_cita.HORA_LLEGADA);
}

                        if(ins_cita.CONSULTORIO == null) {
pstmtInsert_tOracleOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(27, ins_cita.CONSULTORIO);
}

                        if(ins_cita.CIE10 == null) {
pstmtInsert_tOracleOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(28, ins_cita.CIE10);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(29, ins_cita.ESPECIALIDADES_ID);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(30, ins_cita.ESM_ATENCION_ID);

                        if(ins_cita.FECHA_LLEGADA != null) {
pstmtInsert_tOracleOutput_1.setTimestamp(31, new java.sql.Timestamp(ins_cita.FECHA_LLEGADA.getTime()));
} else {
pstmtInsert_tOracleOutput_1.setNull(31, java.sql.Types.DATE);
}

                        if(ins_cita.FECHAI_CITA != null) {
pstmtInsert_tOracleOutput_1.setTimestamp(32, new java.sql.Timestamp(ins_cita.FECHAI_CITA.getTime()));
} else {
pstmtInsert_tOracleOutput_1.setNull(32, java.sql.Types.DATE);
}

                        if(ins_cita.FECHAF_CITA != null) {
pstmtInsert_tOracleOutput_1.setTimestamp(33, new java.sql.Timestamp(ins_cita.FECHAF_CITA.getTime()));
} else {
pstmtInsert_tOracleOutput_1.setNull(33, java.sql.Types.DATE);
}

                        if(ins_cita.ESM_ATESIGLA == null) {
pstmtInsert_tOracleOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(34, ins_cita.ESM_ATESIGLA);
}

                        if(ins_cita.MUNICIPIO_ESM == null) {
pstmtInsert_tOracleOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(35, ins_cita.MUNICIPIO_ESM);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(36, ins_cita.ESTREGISTRO_ID);

                        if(ins_cita.FDISPONIBLE != null) {
pstmtInsert_tOracleOutput_1.setObject(37, new java.sql.Timestamp(ins_cita.FDISPONIBLE.getTime()),java.sql.Types.DATE);
} else {
pstmtInsert_tOracleOutput_1.setNull(37, java.sql.Types.DATE);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(38, ins_cita.TIEMPO_SCITA);

                        if(ins_cita.TIPO_SCITA == null) {
pstmtInsert_tOracleOutput_1.setNull(39, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(39, ins_cita.TIPO_SCITA);
}

                        if(ins_cita.TIPO_ASIGNACION == null) {
pstmtInsert_tOracleOutput_1.setNull(40, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(40, ins_cita.TIPO_ASIGNACION);
}

                        if(ins_cita.USUARIO_SCITA == null) {
pstmtInsert_tOracleOutput_1.setNull(41, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(41, ins_cita.USUARIO_SCITA);
}

                        if(ins_cita.ESTADO_SCITA == null) {
pstmtInsert_tOracleOutput_1.setNull(42, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(42, ins_cita.ESTADO_SCITA);
}

                        if(ins_cita.PRIORITARIA == null) {
pstmtInsert_tOracleOutput_1.setNull(43, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(43, ins_cita.PRIORITARIA);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(44, ins_cita.ADMISIONES_ID);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(45, ins_cita.TCITA);

                        if(ins_cita.FECHA_CANCELACION != null) {
pstmtInsert_tOracleOutput_1.setObject(46, new java.sql.Timestamp(ins_cita.FECHA_CANCELACION.getTime()),java.sql.Types.DATE);
} else {
pstmtInsert_tOracleOutput_1.setNull(46, java.sql.Types.DATE);
}

                        if(ins_cita.OBSERVACIONES_CITA == null) {
pstmtInsert_tOracleOutput_1.setNull(47, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(47, ins_cita.OBSERVACIONES_CITA);
}

                        if(ins_cita.TIPO_USUARIO == null) {
pstmtInsert_tOracleOutput_1.setNull(48, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(48, ins_cita.TIPO_USUARIO);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(49, ins_cita.CUPS_ID);

                try {
                    int processedCount_tOracleOutput_1 = pstmtInsert_tOracleOutput_1.executeUpdate();
                    insertedCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    rowsToCommitCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    nb_line_tOracleOutput_1++;
                } catch(java.lang.Exception e_tOracleOutput_1) {
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
                    whetherReject_tOracleOutput_1 = true;
                        nb_line_tOracleOutput_1++;
                            System.err.print(e_tOracleOutput_1.getMessage());
                }
            }
                commitCounter_tOracleOutput_1++;
                if(commitEvery_tOracleOutput_1 <= commitCounter_tOracleOutput_1) {
                    if(rowsToCommitCount_tOracleOutput_1 != 0){
                    	
                    }
                    conn_tOracleOutput_1.commit();
                    if(rowsToCommitCount_tOracleOutput_1 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_1 = 0;
                    }
                    commitCounter_tOracleOutput_1=0;
                }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */

} // End of branch "ins_cita"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "out_3"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_end ] stop
 */

} // End of branch "out_2"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "out_1"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row13 != null) {
						tHash_Lookup_row13.endGet();
					}
					globalMap.remove( "tHash_Lookup_row13" );

					
					
				
					if(tHash_Lookup_row12 != null) {
						tHash_Lookup_row12.endGet();
					}
					globalMap.remove( "tHash_Lookup_row12" );

					
					
				
					if(tHash_Lookup_row17 != null) {
						tHash_Lookup_row17.endGet();
					}
					globalMap.remove( "tHash_Lookup_row17" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row3 != null) {
						tHash_Lookup_row3.endGet();
					}
					globalMap.remove( "tHash_Lookup_row3" );

					
					
				
					if(tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove( "tHash_Lookup_row4" );

					
					
				
					if(tHash_Lookup_row5 != null) {
						tHash_Lookup_row5.endGet();
					}
					globalMap.remove( "tHash_Lookup_row5" );

					
					
				
					if(tHash_Lookup_row6 != null) {
						tHash_Lookup_row6.endGet();
					}
					globalMap.remove( "tHash_Lookup_row6" );

					
					
				
					if(tHash_Lookup_row14 != null) {
						tHash_Lookup_row14.endGet();
					}
					globalMap.remove( "tHash_Lookup_row14" );

					
					
				
					if(tHash_Lookup_row15 != null) {
						tHash_Lookup_row15.endGet();
					}
					globalMap.remove( "tHash_Lookup_row15" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out_1");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row7 != null) {
						tHash_Lookup_row7.endGet();
					}
					globalMap.remove( "tHash_Lookup_row7" );

					
					
				
					if(tHash_Lookup_row8 != null) {
						tHash_Lookup_row8.endGet();
					}
					globalMap.remove( "tHash_Lookup_row8" );

					
					
				
					if(tHash_Lookup_row9 != null) {
						tHash_Lookup_row9.endGet();
					}
					globalMap.remove( "tHash_Lookup_row9" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out_2");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out_3");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(pstmtUpdate_tOracleOutput_1 != null){
            pstmtUpdate_tOracleOutput_1.close();
            resourceMap.remove("pstmtUpdate_tOracleOutput_1");
        }
        if(pstmtInsert_tOracleOutput_1 != null){
            pstmtInsert_tOracleOutput_1.close();
            resourceMap.remove("pstmtInsert_tOracleOutput_1");
        }
        if(pstmt_tOracleOutput_1 != null) {
            pstmt_tOracleOutput_1.close();
            resourceMap.remove("pstmt_tOracleOutput_1");
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);
		if(commitCounter_tOracleOutput_1 > 0 && rowsToCommitCount_tOracleOutput_1 != 0) {
			
		}
		conn_tOracleOutput_1.commit();
		if(commitCounter_tOracleOutput_1 > 0 && rowsToCommitCount_tOracleOutput_1 != 0) {
			
			rowsToCommitCount_tOracleOutput_1 = 0;
		}
		commitCounter_tOracleOutput_1 = 0;
		
		
		conn_tOracleOutput_1 .close();
		
		resourceMap.put("finish_tOracleOutput_1", true);
   	

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ins_cita");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());




/**
 * [tOracleOutput_1 end ] stop
 */















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tJava_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row7"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row8"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row9"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row3"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row4"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row5"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row6"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row14"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row15"); 
				     			
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row13"); 
				     			
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row12"); 
				     			
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row17"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tOracleOutput_1 = null;
                if ((pstmtUpdateToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tOracleOutput_1")) != null) {
                    pstmtUpdateToClose_tOracleOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tOracleOutput_1 = null;
                if ((pstmtInsertToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tOracleOutput_1")) != null) {
                    pstmtInsertToClose_tOracleOutput_1.close();
                }
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_1") == null){
            java.sql.Connection ctn_tOracleOutput_1 = null;
            if((ctn_tOracleOutput_1 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_1")) != null){
                try {
                    ctn_tOracleOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_1) {
                    String errorMessage_tOracleOutput_1 = "failed to close the connection in tOracleOutput_1 :" + sqlEx_tOracleOutput_1.getMessage();
                    System.err.println(errorMessage_tOracleOutput_1);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";
	
	
		int tos_count_tJava_4 = 0;
		



 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());

   			if (TalendDate.getDate("DD").equals("01")) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tOracleInput_12Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tJava_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}
	


public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];

	
			    public String MES_ANT;

				public String getMES_ANT () {
					return this.MES_ANT;
				}

				public Boolean MES_ANTIsNullable(){
				    return true;
				}
				public Boolean MES_ANTIsKey(){
				    return false;
				}
				public Integer MES_ANTLength(){
				    return 10;
				}
				public Integer MES_ANTPrecision(){
				    return 0;
				}
				public String MES_ANTDefault(){
				
					return null;
				
				}
				public String MES_ANTComment(){
				
				    return "";
				
				}
				public String MES_ANTPattern(){
				
					return "";
				
				}
				public String MES_ANTOriginalDbColumnName(){
				
					return "MES_ANT";
				
				}

				
			    public String FECHA_ACTUAL;

				public String getFECHA_ACTUAL () {
					return this.FECHA_ACTUAL;
				}

				public Boolean FECHA_ACTUALIsNullable(){
				    return true;
				}
				public Boolean FECHA_ACTUALIsKey(){
				    return false;
				}
				public Integer FECHA_ACTUALLength(){
				    return 2;
				}
				public Integer FECHA_ACTUALPrecision(){
				    return 0;
				}
				public String FECHA_ACTUALDefault(){
				
					return null;
				
				}
				public String FECHA_ACTUALComment(){
				
				    return "";
				
				}
				public String FECHA_ACTUALPattern(){
				
					return "";
				
				}
				public String FECHA_ACTUALOriginalDbColumnName(){
				
					return "FECHA_ACTUAL";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
					this.MES_ANT = readString(dis);
					
					this.FECHA_ACTUAL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
					this.MES_ANT = readString(dis);
					
					this.FECHA_ACTUAL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.MES_ANT,dos);
					
					// String
				
						writeString(this.FECHA_ACTUAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.MES_ANT,dos);
					
					// String
				
						writeString(this.FECHA_ACTUAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MES_ANT="+MES_ANT);
		sb.append(",FECHA_ACTUAL="+FECHA_ACTUAL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row20Struct row20 = new row20Struct();




	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_12", false);
		start_Hash.put("tOracleInput_12", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_12";
	
	
		int tos_count_tOracleInput_12 = 0;
		
	


	
		    int nb_line_tOracleInput_12 = 0;
		    java.sql.Connection conn_tOracleInput_12 = null;
				conn_tOracleInput_12 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_12 = false;
				boolean isConnectionWrapped_tOracleInput_12 = !(conn_tOracleInput_12 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_12.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_12 = null;
                if (isConnectionWrapped_tOracleInput_12) {
					unwrappedOraConn_tOracleInput_12 = conn_tOracleInput_12.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_12 != null) {
                        isTimeZoneNull_tOracleInput_12 = (unwrappedOraConn_tOracleInput_12.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_12 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_12).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_12) {
					java.sql.Statement stmtGetTZ_tOracleInput_12 = conn_tOracleInput_12.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_12 = stmtGetTZ_tOracleInput_12.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_12 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_12.next()) {
						sessionTimezone_tOracleInput_12 = rsGetTZ_tOracleInput_12.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_12 && unwrappedOraConn_tOracleInput_12 != null) {
                        unwrappedOraConn_tOracleInput_12.setSessionTimeZone(sessionTimezone_tOracleInput_12);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_12).setSessionTimeZone(sessionTimezone_tOracleInput_12);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_12 = conn_tOracleInput_12.createStatement();

		    String dbquery_tOracleInput_12 = "SELECT to_char(TO_DATE(0||1||TO_CHAR(ADD_MONTHS(SYSDATE,-1),'MMYYYY')),'DD/MM/YYYY') AS MES_ANT, \nTO_CHAR(SYSDATE,'DD'"
+") as FECHA_ACTUAL \nFROM DUAL";
		    

		    globalMap.put("tOracleInput_12_QUERY",dbquery_tOracleInput_12);

		    java.sql.ResultSet rs_tOracleInput_12 = null;

		    try {
		    	rs_tOracleInput_12 = stmt_tOracleInput_12.executeQuery(dbquery_tOracleInput_12);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_12 = rs_tOracleInput_12.getMetaData();
		    	int colQtyInRs_tOracleInput_12 = rsmd_tOracleInput_12.getColumnCount();

		    String tmpContent_tOracleInput_12 = null;
		    
		    
		    while (rs_tOracleInput_12.next()) {
		        nb_line_tOracleInput_12++;
		        
							if(colQtyInRs_tOracleInput_12 < 1) {
								row20.MES_ANT = null;
							} else {
	                         		
        	row20.MES_ANT = routines.system.JDBCUtil.getString(rs_tOracleInput_12, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_12 < 2) {
								row20.FECHA_ACTUAL = null;
							} else {
	                         		
        	row20.FECHA_ACTUAL = routines.system.JDBCUtil.getString(rs_tOracleInput_12, 2, false);
		                    }
					




 



/**
 * [tOracleInput_12 begin ] stop
 */
	
	/**
	 * [tOracleInput_12 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 


	tos_count_tOracleInput_12++;

/**
 * [tOracleInput_12 main ] stop
 */
	
	/**
	 * [tOracleInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row20"
						
						);
					}
					

    context.AGE_FECHA = row20.MES_ANT;
    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_12 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

}
}finally{
	if (rs_tOracleInput_12 != null) {
		rs_tOracleInput_12.close();
	}
	if (stmt_tOracleInput_12 != null) {
		stmt_tOracleInput_12.close();
	}
}

globalMap.put("tOracleInput_12_NB_LINE",nb_line_tOracleInput_12);
 

ok_Hash.put("tOracleInput_12", true);
end_Hash.put("tOracleInput_12", System.currentTimeMillis());




/**
 * [tOracleInput_12 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk14", 0, "ok");
				}
				tOracleInput_13Process(globalMap);



/**
 * [tJavaRow_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_12 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];

	
			    public String PERIODO;

				public String getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return null;
				}
				public Integer PERIODOPrecision(){
				    return null;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return false;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return null;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
					this.PERIODO = readString(dis);
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
					this.PERIODO = readString(dis);
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.PERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERIODO="+PERIODO);
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row21Struct row21 = new row21Struct();




	
	/**
	 * [tOracleSP_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_1", false);
		start_Hash.put("tOracleSP_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tOracleSP_1 = 0;
		

	java.sql.Connection connection_tOracleSP_1 = null;
	connection_tOracleSP_1 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_2");
	

java.sql.CallableStatement statement_tOracleSP_1 = connection_tOracleSP_1.prepareCall("{call " + "REP.IndAgendamiento" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_1;
String tmpString_tOracleSP_1;

 



/**
 * [tOracleSP_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_13", false);
		start_Hash.put("tOracleInput_13", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_13";
	
	
		int tos_count_tOracleInput_13 = 0;
		
	


	
		    int nb_line_tOracleInput_13 = 0;
		    java.sql.Connection conn_tOracleInput_13 = null;
				conn_tOracleInput_13 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_13 = false;
				boolean isConnectionWrapped_tOracleInput_13 = !(conn_tOracleInput_13 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_13.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_13 = null;
                if (isConnectionWrapped_tOracleInput_13) {
					unwrappedOraConn_tOracleInput_13 = conn_tOracleInput_13.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_13 != null) {
                        isTimeZoneNull_tOracleInput_13 = (unwrappedOraConn_tOracleInput_13.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_13 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_13).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_13) {
					java.sql.Statement stmtGetTZ_tOracleInput_13 = conn_tOracleInput_13.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_13 = stmtGetTZ_tOracleInput_13.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_13 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_13.next()) {
						sessionTimezone_tOracleInput_13 = rsGetTZ_tOracleInput_13.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_13 && unwrappedOraConn_tOracleInput_13 != null) {
                        unwrappedOraConn_tOracleInput_13.setSessionTimeZone(sessionTimezone_tOracleInput_13);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_13).setSessionTimeZone(sessionTimezone_tOracleInput_13);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_13 = conn_tOracleInput_13.createStatement();

		    String dbquery_tOracleInput_13 = "select \nTO_CHAR(FECHA,'YYYYMM') AS PERIODO,\nID AS TIEMPOS_ID\nfrom  BGEN_TIEMPOS WHERE FECHA ='"+context.AGE_FECHA+"'";
		    

		    globalMap.put("tOracleInput_13_QUERY",dbquery_tOracleInput_13);

		    java.sql.ResultSet rs_tOracleInput_13 = null;

		    try {
		    	rs_tOracleInput_13 = stmt_tOracleInput_13.executeQuery(dbquery_tOracleInput_13);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_13 = rs_tOracleInput_13.getMetaData();
		    	int colQtyInRs_tOracleInput_13 = rsmd_tOracleInput_13.getColumnCount();

		    String tmpContent_tOracleInput_13 = null;
		    
		    
		    while (rs_tOracleInput_13.next()) {
		        nb_line_tOracleInput_13++;
		        
							if(colQtyInRs_tOracleInput_13 < 1) {
								row21.PERIODO = null;
							} else {
	                         		
        	row21.PERIODO = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 2) {
								row21.TIEMPOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(2) != null) {
						row21.TIEMPOS_ID = rs_tOracleInput_13.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_13 begin ] stop
 */
	
	/**
	 * [tOracleInput_13 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 


	tos_count_tOracleInput_13++;

/**
 * [tOracleInput_13 main ] stop
 */
	
	/**
	 * [tOracleInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_1 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row21"
						
						);
					}
					

			// code for the argument 1 (PERIODO) of type 'IN AUTOMAPPING'
    					if (row21.PERIODO == null) {
    						statement_tOracleSP_1.setNull(1, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tOracleSP_1.setString(1, row21.PERIODO);
    					}
    					
			// code for the argument 2 (TIEMPOS_ID) of type 'IN AUTOMAPPING'
                        statement_tOracleSP_1.setBigDecimal(2, row21.TIEMPOS_ID);
			// code for the argument 3 (sproc_) of type 'OUT AUTOMAPPING'
					statement_tOracleSP_1.registerOutParameter(3, java.sql.Types.VARCHAR);
		statement_tOracleSP_1.execute();
		

 


	tos_count_tOracleSP_1++;

/**
 * [tOracleSP_1 main ] stop
 */
	
	/**
	 * [tOracleSP_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_13 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

}
}finally{
	if (rs_tOracleInput_13 != null) {
		rs_tOracleInput_13.close();
	}
	if (stmt_tOracleInput_13 != null) {
		stmt_tOracleInput_13.close();
	}
}

globalMap.put("tOracleInput_13_NB_LINE",nb_line_tOracleInput_13);
 

ok_Hash.put("tOracleInput_13", true);
end_Hash.put("tOracleInput_13", System.currentTimeMillis());




/**
 * [tOracleInput_13 end ] stop
 */

	
	/**
	 * [tOracleSP_1 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	


	statement_tOracleSP_1.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tOracleSP_1", true);
end_Hash.put("tOracleSP_1", System.currentTimeMillis());




/**
 * [tOracleSP_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_13 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 finally ] stop
 */

	
	/**
	 * [tOracleSP_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableComparableLookupRow<row13Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal IDENFITICADOR;

				public BigDecimal getIDENFITICADOR () {
					return this.IDENFITICADOR;
				}

				public Boolean IDENFITICADORIsNullable(){
				    return true;
				}
				public Boolean IDENFITICADORIsKey(){
				    return false;
				}
				public Integer IDENFITICADORLength(){
				    return null;
				}
				public Integer IDENFITICADORPrecision(){
				    return null;
				}
				public String IDENFITICADORDefault(){
				
					return null;
				
				}
				public String IDENFITICADORComment(){
				
				    return "";
				
				}
				public String IDENFITICADORPattern(){
				
					return "";
				
				}
				public String IDENFITICADOROriginalDbColumnName(){
				
					return "IDENFITICADOR";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.IDENFITICADOR == null) ? 0 : this.IDENFITICADOR.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row13Struct other = (row13Struct) obj;
		
						if (this.IDENFITICADOR == null) {
							if (other.IDENFITICADOR != null)
								return false;
						
						} else if (!this.IDENFITICADOR.equals(other.IDENFITICADOR))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row13Struct other) {

		other.ID = this.ID;
	            other.IDENFITICADOR = this.IDENFITICADOR;
	            
	}

	public void copyKeysDataTo(row13Struct other) {

		other.IDENFITICADOR = this.IDENFITICADOR;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.IDENFITICADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.IDENFITICADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.IDENFITICADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IDENFITICADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",IDENFITICADOR="+String.valueOf(IDENFITICADOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.IDENFITICADOR, other.IDENFITICADOR);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();




	
	/**
	 * [tAdvancedHash_row13 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row13", false);
		start_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tAdvancedHash_row13 = 0;
		

			   		// connection name:row13
			   		// source node:tHashInput_2 - inputs:(after_tOracleInput_1) outputs:(row13,row13) | target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
			   		// linked node: tMap_5 - inputs:(row1,row13,row12,row17) outputs:(out_1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row13Struct>getLookup(matchingModeEnum_row13);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row13 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_Agendamiento_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row2Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row2Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row13.ID = next_tHashInput_2.ID;
	row13.IDENFITICADOR = next_tHashInput_2.IDENTIFICADOR;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					


			   
			   

					row13Struct row13_HashRow = new row13Struct();
		   	   	   
				
				row13_HashRow.ID = row13.ID;
				
				row13_HashRow.IDENFITICADOR = row13.IDENFITICADOR;
				
			tHash_Lookup_row13.put(row13_HashRow);
			
            




 


	tos_count_tAdvancedHash_row13++;

/**
 * [tAdvancedHash_row13 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Agendamiento_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

tHash_Lookup_row13.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row13", true);
end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());




/**
 * [tAdvancedHash_row13 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 1024;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tAdvancedHash_row3 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row3", false);
		start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tAdvancedHash_row3 = 0;
		

			   		// connection name:row3
			   		// source node:tOracleInput_6 - inputs:(after_tOracleInput_1) outputs:(row3,row3) | target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
			   		// linked node: tMap_3 - inputs:(out_1,row3,row4,row5,row6,row14,row15) outputs:(out_2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row3Struct>getLookup(matchingModeEnum_row3);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row3 begin ] stop
 */



	
	/**
	 * [tOracleInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_6", false);
		start_Hash.put("tOracleInput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_6";
	
	
		int tos_count_tOracleInput_6 = 0;
		
	


	
		    int nb_line_tOracleInput_6 = 0;
		    java.sql.Connection conn_tOracleInput_6 = null;
				conn_tOracleInput_6 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_6 = false;
				boolean isConnectionWrapped_tOracleInput_6 = !(conn_tOracleInput_6 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_6.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_6 = null;
                if (isConnectionWrapped_tOracleInput_6) {
					unwrappedOraConn_tOracleInput_6 = conn_tOracleInput_6.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_6 != null) {
                        isTimeZoneNull_tOracleInput_6 = (unwrappedOraConn_tOracleInput_6.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_6 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_6).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_6) {
					java.sql.Statement stmtGetTZ_tOracleInput_6 = conn_tOracleInput_6.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_6 = stmtGetTZ_tOracleInput_6.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_6 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_6.next()) {
						sessionTimezone_tOracleInput_6 = rsGetTZ_tOracleInput_6.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_6 && unwrappedOraConn_tOracleInput_6 != null) {
                        unwrappedOraConn_tOracleInput_6.setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_6).setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_6 = conn_tOracleInput_6.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_6.setFetchSize(1000);


		    String dbquery_tOracleInput_6 = "SELECT \n  SALUDSIS.AGE_TCITAS.\"ID\", \n  SALUDSIS.AGE_TCITAS.NOMBRE\nFROM SALUDSIS.AGE_TCITAS";
		    

		    globalMap.put("tOracleInput_6_QUERY",dbquery_tOracleInput_6);

		    java.sql.ResultSet rs_tOracleInput_6 = null;

		    try {
		    	rs_tOracleInput_6 = stmt_tOracleInput_6.executeQuery(dbquery_tOracleInput_6);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_6 = rs_tOracleInput_6.getMetaData();
		    	int colQtyInRs_tOracleInput_6 = rsmd_tOracleInput_6.getColumnCount();

		    String tmpContent_tOracleInput_6 = null;
		    
		    
		    while (rs_tOracleInput_6.next()) {
		        nb_line_tOracleInput_6++;
		        
							if(colQtyInRs_tOracleInput_6 < 1) {
								row3.ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(1) != null) {
						row3.ID = rs_tOracleInput_6.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 2) {
								row3.NOMBRE = null;
							} else {
	                         		
        	row3.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 2, false);
		                    }
					




 



/**
 * [tOracleInput_6 begin ] stop
 */
	
	/**
	 * [tOracleInput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 


	tos_count_tOracleInput_6++;

/**
 * [tOracleInput_6 main ] stop
 */
	
	/**
	 * [tOracleInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


			   
			   

					row3Struct row3_HashRow = new row3Struct();
		   	   	   
				
				row3_HashRow.ID = row3.ID;
				
				row3_HashRow.NOMBRE = row3.NOMBRE;
				
			tHash_Lookup_row3.put(row3_HashRow);
			
            




 


	tos_count_tAdvancedHash_row3++;

/**
 * [tAdvancedHash_row3 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";
	
	

 



/**
 * [tAdvancedHash_row3 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";
	
	

 



/**
 * [tAdvancedHash_row3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

}
}finally{
	if (rs_tOracleInput_6 != null) {
		rs_tOracleInput_6.close();
	}
	if (stmt_tOracleInput_6 != null) {
		stmt_tOracleInput_6.close();
	}
}

globalMap.put("tOracleInput_6_NB_LINE",nb_line_tOracleInput_6);
 

ok_Hash.put("tOracleInput_6", true);
end_Hash.put("tOracleInput_6", System.currentTimeMillis());




/**
 * [tOracleInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";
	
	

tHash_Lookup_row3.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row3", true);
end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());




/**
 * [tAdvancedHash_row3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";
	
	

 



/**
 * [tAdvancedHash_row3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 100;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tAdvancedHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row4", false);
		start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tAdvancedHash_row4 = 0;
		

			   		// connection name:row4
			   		// source node:tOracleInput_5 - inputs:(after_tOracleInput_1) outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
			   		// linked node: tMap_3 - inputs:(out_1,row3,row4,row5,row6,row14,row15) outputs:(out_2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row4Struct>getLookup(matchingModeEnum_row4);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row4 begin ] stop
 */



	
	/**
	 * [tOracleInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_5", false);
		start_Hash.put("tOracleInput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_5";
	
	
		int tos_count_tOracleInput_5 = 0;
		
	


	
		    int nb_line_tOracleInput_5 = 0;
		    java.sql.Connection conn_tOracleInput_5 = null;
				conn_tOracleInput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_5 = false;
				boolean isConnectionWrapped_tOracleInput_5 = !(conn_tOracleInput_5 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_5 = null;
                if (isConnectionWrapped_tOracleInput_5) {
					unwrappedOraConn_tOracleInput_5 = conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_5 != null) {
                        isTimeZoneNull_tOracleInput_5 = (unwrappedOraConn_tOracleInput_5.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_5 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_5).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_5) {
					java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_5 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_5.next()) {
						sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_5 && unwrappedOraConn_tOracleInput_5 != null) {
                        unwrappedOraConn_tOracleInput_5.setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_5).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_5.setFetchSize(1000);


		    String dbquery_tOracleInput_5 = "SELECT \n  SALUDSIS.AGE_TESTCITAS.\"ID\", \n  SALUDSIS.AGE_TESTCITAS.NOMBRE\nFROM SALUDSIS.AGE_TESTCITAS";
		    

		    globalMap.put("tOracleInput_5_QUERY",dbquery_tOracleInput_5);

		    java.sql.ResultSet rs_tOracleInput_5 = null;

		    try {
		    	rs_tOracleInput_5 = stmt_tOracleInput_5.executeQuery(dbquery_tOracleInput_5);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5.getMetaData();
		    	int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5.getColumnCount();

		    String tmpContent_tOracleInput_5 = null;
		    
		    
		    while (rs_tOracleInput_5.next()) {
		        nb_line_tOracleInput_5++;
		        
							if(colQtyInRs_tOracleInput_5 < 1) {
								row4.ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(1) != null) {
						row4.ID = rs_tOracleInput_5.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 2) {
								row4.NOMBRE = null;
							} else {
	                         		
        	row4.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 2, false);
		                    }
					




 



/**
 * [tOracleInput_5 begin ] stop
 */
	
	/**
	 * [tOracleInput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 


	tos_count_tOracleInput_5++;

/**
 * [tOracleInput_5 main ] stop
 */
	
	/**
	 * [tOracleInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					


			   
			   

					row4Struct row4_HashRow = new row4Struct();
		   	   	   
				
				row4_HashRow.ID = row4.ID;
				
				row4_HashRow.NOMBRE = row4.NOMBRE;
				
			tHash_Lookup_row4.put(row4_HashRow);
			
            




 


	tos_count_tAdvancedHash_row4++;

/**
 * [tAdvancedHash_row4 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";
	
	

 



/**
 * [tAdvancedHash_row4 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";
	
	

 



/**
 * [tAdvancedHash_row4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

}
}finally{
	if (rs_tOracleInput_5 != null) {
		rs_tOracleInput_5.close();
	}
	if (stmt_tOracleInput_5 != null) {
		stmt_tOracleInput_5.close();
	}
}

globalMap.put("tOracleInput_5_NB_LINE",nb_line_tOracleInput_5);
 

ok_Hash.put("tOracleInput_5", true);
end_Hash.put("tOracleInput_5", System.currentTimeMillis());




/**
 * [tOracleInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";
	
	

tHash_Lookup_row4.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row4", true);
end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());




/**
 * [tAdvancedHash_row4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";
	
	

 



/**
 * [tAdvancedHash_row4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 500;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return 4000;
				}
				public Integer DESCRIPCIONPrecision(){
				    return 0;
				}
				public String DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.DESCRIPCION = this.DESCRIPCION;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NOMBRE = readString(dis,ois);
					
						this.DESCRIPCION = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.NOMBRE = readString(dis,objectIn);
					
						this.DESCRIPCION = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NOMBRE, dos, oos);
					
						writeString(this.DESCRIPCION, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.NOMBRE, dos, objectOut);
					
						writeString(this.DESCRIPCION, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",DESCRIPCION="+DESCRIPCION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tAdvancedHash_row5 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row5", false);
		start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tAdvancedHash_row5 = 0;
		

			   		// connection name:row5
			   		// source node:tOracleInput_4 - inputs:(after_tOracleInput_1) outputs:(row5,row5) | target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
			   		// linked node: tMap_3 - inputs:(out_1,row3,row4,row5,row6,row14,row15) outputs:(out_2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row5Struct>getLookup(matchingModeEnum_row5);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row5 begin ] stop
 */



	
	/**
	 * [tOracleInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_4", false);
		start_Hash.put("tOracleInput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_4";
	
	
		int tos_count_tOracleInput_4 = 0;
		
	


	
		    int nb_line_tOracleInput_4 = 0;
		    java.sql.Connection conn_tOracleInput_4 = null;
				conn_tOracleInput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_4 = false;
				boolean isConnectionWrapped_tOracleInput_4 = !(conn_tOracleInput_4 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_4 = null;
                if (isConnectionWrapped_tOracleInput_4) {
					unwrappedOraConn_tOracleInput_4 = conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_4 != null) {
                        isTimeZoneNull_tOracleInput_4 = (unwrappedOraConn_tOracleInput_4.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_4 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_4).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_4) {
					java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_4.next()) {
						sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_4 && unwrappedOraConn_tOracleInput_4 != null) {
                        unwrappedOraConn_tOracleInput_4.setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_4.setFetchSize(1000);


		    String dbquery_tOracleInput_4 = "SELECT \n  SALUDSIS.AGE_TCAUSALES.\"ID\", \n  SALUDSIS.AGE_TCAUSALES.NOMBRE, \n  SALUDSIS.AGE_TCAUSALES.DESCRIPCION\nFROM S"
+"ALUDSIS.AGE_TCAUSALES ";
		    

		    globalMap.put("tOracleInput_4_QUERY",dbquery_tOracleInput_4);

		    java.sql.ResultSet rs_tOracleInput_4 = null;

		    try {
		    	rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
		    	int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

		    String tmpContent_tOracleInput_4 = null;
		    
		    
		    while (rs_tOracleInput_4.next()) {
		        nb_line_tOracleInput_4++;
		        
							if(colQtyInRs_tOracleInput_4 < 1) {
								row5.ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(1) != null) {
						row5.ID = rs_tOracleInput_4.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 2) {
								row5.NOMBRE = null;
							} else {
	                         		
        	row5.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 3) {
								row5.DESCRIPCION = null;
							} else {
	                         		
        	row5.DESCRIPCION = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 3, false);
		                    }
					




 



/**
 * [tOracleInput_4 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 


	tos_count_tOracleInput_4++;

/**
 * [tOracleInput_4 main ] stop
 */
	
	/**
	 * [tOracleInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					


			   
			   

					row5Struct row5_HashRow = new row5Struct();
		   	   	   
				
				row5_HashRow.ID = row5.ID;
				
				row5_HashRow.NOMBRE = row5.NOMBRE;
				
				row5_HashRow.DESCRIPCION = row5.DESCRIPCION;
				
			tHash_Lookup_row5.put(row5_HashRow);
			
            




 


	tos_count_tAdvancedHash_row5++;

/**
 * [tAdvancedHash_row5 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";
	
	

 



/**
 * [tAdvancedHash_row5 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";
	
	

 



/**
 * [tAdvancedHash_row5 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

}
}finally{
	if (rs_tOracleInput_4 != null) {
		rs_tOracleInput_4.close();
	}
	if (stmt_tOracleInput_4 != null) {
		stmt_tOracleInput_4.close();
	}
}

globalMap.put("tOracleInput_4_NB_LINE",nb_line_tOracleInput_4);
 

ok_Hash.put("tOracleInput_4", true);
end_Hash.put("tOracleInput_4", System.currentTimeMillis());




/**
 * [tOracleInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";
	
	

tHash_Lookup_row5.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row5", true);
end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());




/**
 * [tAdvancedHash_row5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";
	
	

 



/**
 * [tAdvancedHash_row5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 100;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 100;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public BigDecimal DIVIPOLA_ID;

				public BigDecimal getDIVIPOLA_ID () {
					return this.DIVIPOLA_ID;
				}

				public Boolean DIVIPOLA_IDIsNullable(){
				    return true;
				}
				public Boolean DIVIPOLA_IDIsKey(){
				    return false;
				}
				public Integer DIVIPOLA_IDLength(){
				    return 0;
				}
				public Integer DIVIPOLA_IDPrecision(){
				    return null;
				}
				public String DIVIPOLA_IDDefault(){
				
					return "";
				
				}
				public String DIVIPOLA_IDComment(){
				
				    return "";
				
				}
				public String DIVIPOLA_IDPattern(){
				
					return "";
				
				}
				public String DIVIPOLA_IDOriginalDbColumnName(){
				
					return "DIVIPOLA_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.ID = this.ID;
	            other.CODIGO = this.CODIGO;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            other.FUERZA_ID = this.FUERZA_ID;
	            other.DIVIPOLA_ID = this.DIVIPOLA_ID;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.CODIGO = readString(dis,ois);
					
						this.NOMBRE = readString(dis,ois);
					
						this.SIGLA = readString(dis,ois);
					
       			    	this.FUERZA_ID = (BigDecimal) ois.readObject();
					
       			    	this.DIVIPOLA_ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.CODIGO = readString(dis,objectIn);
					
						this.NOMBRE = readString(dis,objectIn);
					
						this.SIGLA = readString(dis,objectIn);
					
       			    	this.FUERZA_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.DIVIPOLA_ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.CODIGO, dos, oos);
					
						writeString(this.NOMBRE, dos, oos);
					
						writeString(this.SIGLA, dos, oos);
					
       			    	oos.writeObject(this.FUERZA_ID);
					
       			    	oos.writeObject(this.DIVIPOLA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.CODIGO, dos, objectOut);
					
						writeString(this.NOMBRE, dos, objectOut);
					
						writeString(this.SIGLA, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.FUERZA_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.DIVIPOLA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",DIVIPOLA_ID="+String.valueOf(DIVIPOLA_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tAdvancedHash_row6 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row6", false);
		start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tAdvancedHash_row6 = 0;
		

			   		// connection name:row6
			   		// source node:tOracleInput_18 - inputs:(after_tOracleInput_1) outputs:(row6,row6) | target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
			   		// linked node: tMap_3 - inputs:(out_1,row3,row4,row5,row6,row14,row15) outputs:(out_2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row6Struct>getLookup(matchingModeEnum_row6);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row6 begin ] stop
 */



	
	/**
	 * [tOracleInput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_18", false);
		start_Hash.put("tOracleInput_18", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_18";
	
	
		int tos_count_tOracleInput_18 = 0;
		
	


	
		    int nb_line_tOracleInput_18 = 0;
		    java.sql.Connection conn_tOracleInput_18 = null;
				conn_tOracleInput_18 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_18 = false;
				boolean isConnectionWrapped_tOracleInput_18 = !(conn_tOracleInput_18 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_18.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_18 = null;
                if (isConnectionWrapped_tOracleInput_18) {
					unwrappedOraConn_tOracleInput_18 = conn_tOracleInput_18.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_18 != null) {
                        isTimeZoneNull_tOracleInput_18 = (unwrappedOraConn_tOracleInput_18.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_18 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_18).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_18) {
					java.sql.Statement stmtGetTZ_tOracleInput_18 = conn_tOracleInput_18.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_18 = stmtGetTZ_tOracleInput_18.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_18 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_18.next()) {
						sessionTimezone_tOracleInput_18 = rsGetTZ_tOracleInput_18.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_18 && unwrappedOraConn_tOracleInput_18 != null) {
                        unwrappedOraConn_tOracleInput_18.setSessionTimeZone(sessionTimezone_tOracleInput_18);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_18).setSessionTimeZone(sessionTimezone_tOracleInput_18);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_18 = conn_tOracleInput_18.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_18.setFetchSize(1000);


		    String dbquery_tOracleInput_18 = "SELECT \n  SALUDSIS.GEN_UORG.\"ID\", \n  SALUDSIS.GEN_UORG.CODIGO, \n  SALUDSIS.GEN_UORG.NOMBRE, \n  SALUDSIS.GEN_UORG.SIGL"
+"A, \n  SALUDSIS.GEN_UORG.FUERZA_ID,\n  SALUDSIS.GEN_UORG.DIVIPOLA_ID\nFROM SALUDSIS.GEN_UORG\nWHERE SALUDSIS.GEN_UORG.ESTR"
+"EGISTRO_ID=1 ";
		    

		    globalMap.put("tOracleInput_18_QUERY",dbquery_tOracleInput_18);

		    java.sql.ResultSet rs_tOracleInput_18 = null;

		    try {
		    	rs_tOracleInput_18 = stmt_tOracleInput_18.executeQuery(dbquery_tOracleInput_18);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_18 = rs_tOracleInput_18.getMetaData();
		    	int colQtyInRs_tOracleInput_18 = rsmd_tOracleInput_18.getColumnCount();

		    String tmpContent_tOracleInput_18 = null;
		    
		    
		    while (rs_tOracleInput_18.next()) {
		        nb_line_tOracleInput_18++;
		        
							if(colQtyInRs_tOracleInput_18 < 1) {
								row6.ID = null;
							} else {
		                          
					if(rs_tOracleInput_18.getObject(1) != null) {
						row6.ID = rs_tOracleInput_18.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_18 < 2) {
								row6.CODIGO = null;
							} else {
	                         		
        	row6.CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 3) {
								row6.NOMBRE = null;
							} else {
	                         		
        	row6.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 4) {
								row6.SIGLA = null;
							} else {
	                         		
        	row6.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 5) {
								row6.FUERZA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_18.getObject(5) != null) {
						row6.FUERZA_ID = rs_tOracleInput_18.getBigDecimal(5);
					} else {
				
						row6.FUERZA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_18 < 6) {
								row6.DIVIPOLA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_18.getObject(6) != null) {
						row6.DIVIPOLA_ID = rs_tOracleInput_18.getBigDecimal(6);
					} else {
				
						row6.DIVIPOLA_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_18 begin ] stop
 */
	
	/**
	 * [tOracleInput_18 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 


	tos_count_tOracleInput_18++;

/**
 * [tOracleInput_18 main ] stop
 */
	
	/**
	 * [tOracleInput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					


			   
			   

					row6Struct row6_HashRow = new row6Struct();
		   	   	   
				
				row6_HashRow.ID = row6.ID;
				
				row6_HashRow.CODIGO = row6.CODIGO;
				
				row6_HashRow.NOMBRE = row6.NOMBRE;
				
				row6_HashRow.SIGLA = row6.SIGLA;
				
				row6_HashRow.FUERZA_ID = row6.FUERZA_ID;
				
				row6_HashRow.DIVIPOLA_ID = row6.DIVIPOLA_ID;
				
			tHash_Lookup_row6.put(row6_HashRow);
			
            




 


	tos_count_tAdvancedHash_row6++;

/**
 * [tAdvancedHash_row6 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_18 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

}
}finally{
	if (rs_tOracleInput_18 != null) {
		rs_tOracleInput_18.close();
	}
	if (stmt_tOracleInput_18 != null) {
		stmt_tOracleInput_18.close();
	}
}

globalMap.put("tOracleInput_18_NB_LINE",nb_line_tOracleInput_18);
 

ok_Hash.put("tOracleInput_18", true);
end_Hash.put("tOracleInput_18", System.currentTimeMillis());




/**
 * [tOracleInput_18 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

tHash_Lookup_row6.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row6", true);
end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());




/**
 * [tAdvancedHash_row6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_18 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_18_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 500;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 100;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NOMBRE = readString(dis,ois);
					
						this.SIGLA = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.NOMBRE = readString(dis,objectIn);
					
						this.SIGLA = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NOMBRE, dos, oos);
					
						writeString(this.SIGLA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.NOMBRE, dos, objectOut);
					
						writeString(this.SIGLA, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tAdvancedHash_row7 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row7", false);
		start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tAdvancedHash_row7 = 0;
		

			   		// connection name:row7
			   		// source node:tOracleInput_19 - inputs:(after_tOracleInput_1) outputs:(row7,row7) | target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
			   		// linked node: tMap_6 - inputs:(out_2,row7,row8,row9) outputs:(out_3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row7Struct>getLookup(matchingModeEnum_row7);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row7 begin ] stop
 */



	
	/**
	 * [tOracleInput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_19", false);
		start_Hash.put("tOracleInput_19", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_19";
	
	
		int tos_count_tOracleInput_19 = 0;
		
	


	
		    int nb_line_tOracleInput_19 = 0;
		    java.sql.Connection conn_tOracleInput_19 = null;
				conn_tOracleInput_19 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_19 = false;
				boolean isConnectionWrapped_tOracleInput_19 = !(conn_tOracleInput_19 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_19.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_19 = null;
                if (isConnectionWrapped_tOracleInput_19) {
					unwrappedOraConn_tOracleInput_19 = conn_tOracleInput_19.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_19 != null) {
                        isTimeZoneNull_tOracleInput_19 = (unwrappedOraConn_tOracleInput_19.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_19 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_19).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_19) {
					java.sql.Statement stmtGetTZ_tOracleInput_19 = conn_tOracleInput_19.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_19 = stmtGetTZ_tOracleInput_19.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_19 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_19.next()) {
						sessionTimezone_tOracleInput_19 = rsGetTZ_tOracleInput_19.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_19 && unwrappedOraConn_tOracleInput_19 != null) {
                        unwrappedOraConn_tOracleInput_19.setSessionTimeZone(sessionTimezone_tOracleInput_19);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_19).setSessionTimeZone(sessionTimezone_tOracleInput_19);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_19 = conn_tOracleInput_19.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_19.setFetchSize(1000);


		    String dbquery_tOracleInput_19 = "SELECT \n  SALUDSIS.GEN_FUERZAS.\"ID\", \n  SALUDSIS.GEN_FUERZAS.NOMBRE, \n  SALUDSIS.GEN_FUERZAS.SIGLA\nFROM SALUDSIS.GEN_"
+"FUERZAS";
		    

		    globalMap.put("tOracleInput_19_QUERY",dbquery_tOracleInput_19);

		    java.sql.ResultSet rs_tOracleInput_19 = null;

		    try {
		    	rs_tOracleInput_19 = stmt_tOracleInput_19.executeQuery(dbquery_tOracleInput_19);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_19 = rs_tOracleInput_19.getMetaData();
		    	int colQtyInRs_tOracleInput_19 = rsmd_tOracleInput_19.getColumnCount();

		    String tmpContent_tOracleInput_19 = null;
		    
		    
		    while (rs_tOracleInput_19.next()) {
		        nb_line_tOracleInput_19++;
		        
							if(colQtyInRs_tOracleInput_19 < 1) {
								row7.ID = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(1) != null) {
						row7.ID = rs_tOracleInput_19.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 2) {
								row7.NOMBRE = null;
							} else {
	                         		
        	row7.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 3) {
								row7.SIGLA = null;
							} else {
	                         		
        	row7.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 3, false);
		                    }
					




 



/**
 * [tOracleInput_19 begin ] stop
 */
	
	/**
	 * [tOracleInput_19 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 


	tos_count_tOracleInput_19++;

/**
 * [tOracleInput_19 main ] stop
 */
	
	/**
	 * [tOracleInput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					


			   
			   

					row7Struct row7_HashRow = new row7Struct();
		   	   	   
				
				row7_HashRow.ID = row7.ID;
				
				row7_HashRow.NOMBRE = row7.NOMBRE;
				
				row7_HashRow.SIGLA = row7.SIGLA;
				
			tHash_Lookup_row7.put(row7_HashRow);
			
            




 


	tos_count_tAdvancedHash_row7++;

/**
 * [tAdvancedHash_row7 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_19 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

}
}finally{
	if (rs_tOracleInput_19 != null) {
		rs_tOracleInput_19.close();
	}
	if (stmt_tOracleInput_19 != null) {
		stmt_tOracleInput_19.close();
	}
}

globalMap.put("tOracleInput_19_NB_LINE",nb_line_tOracleInput_19);
 

ok_Hash.put("tOracleInput_19", true);
end_Hash.put("tOracleInput_19", System.currentTimeMillis());




/**
 * [tOracleInput_19 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

tHash_Lookup_row7.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row7", true);
end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());




/**
 * [tAdvancedHash_row7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_19 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_19_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 500;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tAdvancedHash_row8 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row8", false);
		start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tAdvancedHash_row8 = 0;
		

			   		// connection name:row8
			   		// source node:tOracleInput_10 - inputs:(after_tOracleInput_1) outputs:(row8,row8) | target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
			   		// linked node: tMap_6 - inputs:(out_2,row7,row8,row9) outputs:(out_3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row8Struct>getLookup(matchingModeEnum_row8);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row8 begin ] stop
 */



	
	/**
	 * [tOracleInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_10", false);
		start_Hash.put("tOracleInput_10", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_10";
	
	
		int tos_count_tOracleInput_10 = 0;
		
	


	
		    int nb_line_tOracleInput_10 = 0;
		    java.sql.Connection conn_tOracleInput_10 = null;
				conn_tOracleInput_10 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_10 = false;
				boolean isConnectionWrapped_tOracleInput_10 = !(conn_tOracleInput_10 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_10.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_10 = null;
                if (isConnectionWrapped_tOracleInput_10) {
					unwrappedOraConn_tOracleInput_10 = conn_tOracleInput_10.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_10 != null) {
                        isTimeZoneNull_tOracleInput_10 = (unwrappedOraConn_tOracleInput_10.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_10 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_10).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_10) {
					java.sql.Statement stmtGetTZ_tOracleInput_10 = conn_tOracleInput_10.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_10 = stmtGetTZ_tOracleInput_10.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_10 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_10.next()) {
						sessionTimezone_tOracleInput_10 = rsGetTZ_tOracleInput_10.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_10 && unwrappedOraConn_tOracleInput_10 != null) {
                        unwrappedOraConn_tOracleInput_10.setSessionTimeZone(sessionTimezone_tOracleInput_10);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_10).setSessionTimeZone(sessionTimezone_tOracleInput_10);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_10 = conn_tOracleInput_10.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_10.setFetchSize(1000);


		    String dbquery_tOracleInput_10 = "SELECT \n  SALUDSIS.GEN_ESPECIALIDADES.\"ID\", \n  SALUDSIS.GEN_ESPECIALIDADES.NOMBRE\nFROM SALUDSIS.GEN_ESPECIALIDADES";
		    

		    globalMap.put("tOracleInput_10_QUERY",dbquery_tOracleInput_10);

		    java.sql.ResultSet rs_tOracleInput_10 = null;

		    try {
		    	rs_tOracleInput_10 = stmt_tOracleInput_10.executeQuery(dbquery_tOracleInput_10);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_10 = rs_tOracleInput_10.getMetaData();
		    	int colQtyInRs_tOracleInput_10 = rsmd_tOracleInput_10.getColumnCount();

		    String tmpContent_tOracleInput_10 = null;
		    
		    
		    while (rs_tOracleInput_10.next()) {
		        nb_line_tOracleInput_10++;
		        
							if(colQtyInRs_tOracleInput_10 < 1) {
								row8.ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(1) != null) {
						row8.ID = rs_tOracleInput_10.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 2) {
								row8.NOMBRE = null;
							} else {
	                         		
        	row8.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 2, false);
		                    }
					




 



/**
 * [tOracleInput_10 begin ] stop
 */
	
	/**
	 * [tOracleInput_10 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 


	tos_count_tOracleInput_10++;

/**
 * [tOracleInput_10 main ] stop
 */
	
	/**
	 * [tOracleInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					


			   
			   

					row8Struct row8_HashRow = new row8Struct();
		   	   	   
				
				row8_HashRow.ID = row8.ID;
				
				row8_HashRow.NOMBRE = row8.NOMBRE;
				
			tHash_Lookup_row8.put(row8_HashRow);
			
            




 


	tos_count_tAdvancedHash_row8++;

/**
 * [tAdvancedHash_row8 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_10 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

}
}finally{
	if (rs_tOracleInput_10 != null) {
		rs_tOracleInput_10.close();
	}
	if (stmt_tOracleInput_10 != null) {
		stmt_tOracleInput_10.close();
	}
}

globalMap.put("tOracleInput_10_NB_LINE",nb_line_tOracleInput_10);
 

ok_Hash.put("tOracleInput_10", true);
end_Hash.put("tOracleInput_10", System.currentTimeMillis());




/**
 * [tOracleInput_10 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

tHash_Lookup_row8.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row8", true);
end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());




/**
 * [tAdvancedHash_row8 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_10 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableComparableLookupRow<row9Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String MCPIO;

				public String getMCPIO () {
					return this.MCPIO;
				}

				public Boolean MCPIOIsNullable(){
				    return false;
				}
				public Boolean MCPIOIsKey(){
				    return false;
				}
				public Integer MCPIOLength(){
				    return 100;
				}
				public Integer MCPIOPrecision(){
				    return 0;
				}
				public String MCPIODefault(){
				
					return null;
				
				}
				public String MCPIOComment(){
				
				    return "";
				
				}
				public String MCPIOPattern(){
				
					return "";
				
				}
				public String MCPIOOriginalDbColumnName(){
				
					return "MCPIO";
				
				}

				
			    public String CCPP;

				public String getCCPP () {
					return this.CCPP;
				}

				public Boolean CCPPIsNullable(){
				    return false;
				}
				public Boolean CCPPIsKey(){
				    return false;
				}
				public Integer CCPPLength(){
				    return 100;
				}
				public Integer CCPPPrecision(){
				    return 0;
				}
				public String CCPPDefault(){
				
					return null;
				
				}
				public String CCPPComment(){
				
				    return "";
				
				}
				public String CCPPPattern(){
				
					return "";
				
				}
				public String CCPPOriginalDbColumnName(){
				
					return "CCPP";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.ID = this.ID;
	            other.MCPIO = this.MCPIO;
	            other.CCPP = this.CCPP;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.MCPIO = readString(dis,ois);
					
						this.CCPP = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.MCPIO = readString(dis,objectIn);
					
						this.CCPP = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.MCPIO, dos, oos);
					
						writeString(this.CCPP, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.MCPIO, dos, objectOut);
					
						writeString(this.CCPP, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",MCPIO="+MCPIO);
		sb.append(",CCPP="+CCPP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_20_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tAdvancedHash_row9 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row9", false);
		start_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tAdvancedHash_row9 = 0;
		

			   		// connection name:row9
			   		// source node:tOracleInput_20 - inputs:(after_tOracleInput_1) outputs:(row9,row9) | target node:tAdvancedHash_row9 - inputs:(row9) outputs:()
			   		// linked node: tMap_6 - inputs:(out_2,row7,row8,row9) outputs:(out_3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row9Struct>getLookup(matchingModeEnum_row9);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row9 begin ] stop
 */



	
	/**
	 * [tOracleInput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_20", false);
		start_Hash.put("tOracleInput_20", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_20";
	
	
		int tos_count_tOracleInput_20 = 0;
		
	


	
		    int nb_line_tOracleInput_20 = 0;
		    java.sql.Connection conn_tOracleInput_20 = null;
				conn_tOracleInput_20 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_20 = false;
				boolean isConnectionWrapped_tOracleInput_20 = !(conn_tOracleInput_20 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_20.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_20 = null;
                if (isConnectionWrapped_tOracleInput_20) {
					unwrappedOraConn_tOracleInput_20 = conn_tOracleInput_20.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_20 != null) {
                        isTimeZoneNull_tOracleInput_20 = (unwrappedOraConn_tOracleInput_20.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_20 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_20).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_20) {
					java.sql.Statement stmtGetTZ_tOracleInput_20 = conn_tOracleInput_20.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_20 = stmtGetTZ_tOracleInput_20.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_20 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_20.next()) {
						sessionTimezone_tOracleInput_20 = rsGetTZ_tOracleInput_20.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_20 && unwrappedOraConn_tOracleInput_20 != null) {
                        unwrappedOraConn_tOracleInput_20.setSessionTimeZone(sessionTimezone_tOracleInput_20);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_20).setSessionTimeZone(sessionTimezone_tOracleInput_20);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_20 = conn_tOracleInput_20.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_20.setFetchSize(1000);


		    String dbquery_tOracleInput_20 = "SELECT \n  SALUDSIS.GEN_DIVIPOLA.\"ID\", \n  SALUDSIS.GEN_DIVIPOLA.MCPIO, \n  SALUDSIS.GEN_DIVIPOLA.CCPP\n\nFROM SALUDSIS.G"
+"EN_DIVIPOLA\nWHERE SALUDSIS.GEN_DIVIPOLA.ESTREGISTRO_ID=1";
		    

		    globalMap.put("tOracleInput_20_QUERY",dbquery_tOracleInput_20);

		    java.sql.ResultSet rs_tOracleInput_20 = null;

		    try {
		    	rs_tOracleInput_20 = stmt_tOracleInput_20.executeQuery(dbquery_tOracleInput_20);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_20 = rs_tOracleInput_20.getMetaData();
		    	int colQtyInRs_tOracleInput_20 = rsmd_tOracleInput_20.getColumnCount();

		    String tmpContent_tOracleInput_20 = null;
		    
		    
		    while (rs_tOracleInput_20.next()) {
		        nb_line_tOracleInput_20++;
		        
							if(colQtyInRs_tOracleInput_20 < 1) {
								row9.ID = null;
							} else {
		                          
					if(rs_tOracleInput_20.getObject(1) != null) {
						row9.ID = rs_tOracleInput_20.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_20 < 2) {
								row9.MCPIO = null;
							} else {
	                         		
        	row9.MCPIO = routines.system.JDBCUtil.getString(rs_tOracleInput_20, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_20 < 3) {
								row9.CCPP = null;
							} else {
	                         		
        	row9.CCPP = routines.system.JDBCUtil.getString(rs_tOracleInput_20, 3, false);
		                    }
					




 



/**
 * [tOracleInput_20 begin ] stop
 */
	
	/**
	 * [tOracleInput_20 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

 


	tos_count_tOracleInput_20++;

/**
 * [tOracleInput_20 main ] stop
 */
	
	/**
	 * [tOracleInput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

 



/**
 * [tOracleInput_20 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					


			   
			   

					row9Struct row9_HashRow = new row9Struct();
		   	   	   
				
				row9_HashRow.ID = row9.ID;
				
				row9_HashRow.MCPIO = row9.MCPIO;
				
				row9_HashRow.CCPP = row9.CCPP;
				
			tHash_Lookup_row9.put(row9_HashRow);
			
            




 


	tos_count_tAdvancedHash_row9++;

/**
 * [tAdvancedHash_row9 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

 



/**
 * [tOracleInput_20 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_20 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

}
}finally{
	if (rs_tOracleInput_20 != null) {
		rs_tOracleInput_20.close();
	}
	if (stmt_tOracleInput_20 != null) {
		stmt_tOracleInput_20.close();
	}
}

globalMap.put("tOracleInput_20_NB_LINE",nb_line_tOracleInput_20);
 

ok_Hash.put("tOracleInput_20", true);
end_Hash.put("tOracleInput_20", System.currentTimeMillis());




/**
 * [tOracleInput_20 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

tHash_Lookup_row9.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row9", true);
end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());




/**
 * [tAdvancedHash_row9 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_20 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

 



/**
 * [tOracleInput_20 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_20_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableComparableLookupRow<row12Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal IDENFITICADOR;

				public BigDecimal getIDENFITICADOR () {
					return this.IDENFITICADOR;
				}

				public Boolean IDENFITICADORIsNullable(){
				    return true;
				}
				public Boolean IDENFITICADORIsKey(){
				    return false;
				}
				public Integer IDENFITICADORLength(){
				    return null;
				}
				public Integer IDENFITICADORPrecision(){
				    return null;
				}
				public String IDENFITICADORDefault(){
				
					return null;
				
				}
				public String IDENFITICADORComment(){
				
				    return "";
				
				}
				public String IDENFITICADORPattern(){
				
					return "";
				
				}
				public String IDENFITICADOROriginalDbColumnName(){
				
					return "IDENFITICADOR";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.IDENFITICADOR == null) ? 0 : this.IDENFITICADOR.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row12Struct other = (row12Struct) obj;
		
						if (this.IDENFITICADOR == null) {
							if (other.IDENFITICADOR != null)
								return false;
						
						} else if (!this.IDENFITICADOR.equals(other.IDENFITICADOR))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row12Struct other) {

		other.ID = this.ID;
	            other.IDENFITICADOR = this.IDENFITICADOR;
	            
	}

	public void copyKeysDataTo(row12Struct other) {

		other.IDENFITICADOR = this.IDENFITICADOR;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.IDENFITICADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.IDENFITICADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.IDENFITICADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IDENFITICADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",IDENFITICADOR="+String.valueOf(IDENFITICADOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.IDENFITICADOR, other.IDENFITICADOR);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();




	
	/**
	 * [tAdvancedHash_row12 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row12", false);
		start_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tAdvancedHash_row12 = 0;
		

			   		// connection name:row12
			   		// source node:tHashInput_1 - inputs:(after_tOracleInput_1) outputs:(row12,row12) | target node:tAdvancedHash_row12 - inputs:(row12) outputs:()
			   		// linked node: tMap_5 - inputs:(row1,row13,row12,row17) outputs:(out_1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row12 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row12Struct>getLookup(matchingModeEnum_row12);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row12", tHash_Lookup_row12);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row12 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_Agendamiento_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row2Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row2Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row12.ID = next_tHashInput_1.ID;
	row12.IDENFITICADOR = next_tHashInput_1.IDENTIFICADOR;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					


			   
			   

					row12Struct row12_HashRow = new row12Struct();
		   	   	   
				
				row12_HashRow.ID = row12.ID;
				
				row12_HashRow.IDENFITICADOR = row12.IDENFITICADOR;
				
			tHash_Lookup_row12.put(row12_HashRow);
			
            




 


	tos_count_tAdvancedHash_row12++;

/**
 * [tAdvancedHash_row12 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Agendamiento_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

tHash_Lookup_row12.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row12", true);
end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());




/**
 * [tAdvancedHash_row12 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row14Struct implements routines.system.IPersistableComparableLookupRow<row14Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 1024;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row14Struct other = (row14Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row14Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            
	}

	public void copyKeysDataTo(row14Struct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();




	
	/**
	 * [tAdvancedHash_row14 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row14", false);
		start_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tAdvancedHash_row14 = 0;
		

			   		// connection name:row14
			   		// source node:tOracleInput_3 - inputs:(after_tOracleInput_1) outputs:(row14,row14) | target node:tAdvancedHash_row14 - inputs:(row14) outputs:()
			   		// linked node: tMap_3 - inputs:(out_1,row3,row4,row5,row6,row14,row15) outputs:(out_2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row14Struct>getLookup(matchingModeEnum_row14);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row14 begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				conn_tOracleInput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_3 = false;
				boolean isConnectionWrapped_tOracleInput_3 = !(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_3 = null;
                if (isConnectionWrapped_tOracleInput_3) {
					unwrappedOraConn_tOracleInput_3 = conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_3 != null) {
                        isTimeZoneNull_tOracleInput_3 = (unwrappedOraConn_tOracleInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_3 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_3) {
					java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_3.next()) {
						sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_3 && unwrappedOraConn_tOracleInput_3 != null) {
                        unwrappedOraConn_tOracleInput_3.setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_3.setFetchSize(1000);


		    String dbquery_tOracleInput_3 = "SELECT \n  SALUDSIS.AGE_TASIGNACIONES.\"ID\", \n  SALUDSIS.AGE_TASIGNACIONES.NOMBRE\nFROM SALUDSIS.AGE_TASIGNACIONES ";
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row14.ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(1) != null) {
						row14.ID = rs_tOracleInput_3.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 2) {
								row14.NOMBRE = null;
							} else {
	                         		
        	row14.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 2, false);
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					


			   
			   

					row14Struct row14_HashRow = new row14Struct();
		   	   	   
				
				row14_HashRow.ID = row14.ID;
				
				row14_HashRow.NOMBRE = row14.NOMBRE;
				
			tHash_Lookup_row14.put(row14_HashRow);
			
            




 


	tos_count_tAdvancedHash_row14++;

/**
 * [tAdvancedHash_row14 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

 



/**
 * [tAdvancedHash_row14 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row14 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

 



/**
 * [tAdvancedHash_row14 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

tHash_Lookup_row14.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row14", true);
end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());




/**
 * [tAdvancedHash_row14 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

 



/**
 * [tAdvancedHash_row14 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableComparableLookupRow<row15Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 1024;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row15Struct other = (row15Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row15Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            
	}

	public void copyKeysDataTo(row15Struct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();




	
	/**
	 * [tAdvancedHash_row15 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row15", false);
		start_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row15";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tAdvancedHash_row15 = 0;
		

			   		// connection name:row15
			   		// source node:tOracleInput_2 - inputs:(after_tOracleInput_1) outputs:(row15,row15) | target node:tAdvancedHash_row15 - inputs:(row15) outputs:()
			   		// linked node: tMap_3 - inputs:(out_1,row3,row4,row5,row6,row14,row15) outputs:(out_2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row15Struct>getLookup(matchingModeEnum_row15);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row15 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				conn_tOracleInput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_2 = false;
				boolean isConnectionWrapped_tOracleInput_2 = !(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_2 = null;
                if (isConnectionWrapped_tOracleInput_2) {
					unwrappedOraConn_tOracleInput_2 = conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_2 != null) {
                        isTimeZoneNull_tOracleInput_2 = (unwrappedOraConn_tOracleInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_2 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_2) {
					java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_2.next()) {
						sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_2 && unwrappedOraConn_tOracleInput_2 != null) {
                        unwrappedOraConn_tOracleInput_2.setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_2.setFetchSize(1000);


		    String dbquery_tOracleInput_2 = "SELECT \n  SALUDSIS.AGE_TSCITAS.\"ID\", \n  SALUDSIS.AGE_TSCITAS.NOMBRE\nFROM SALUDSIS.AGE_TSCITAS";
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row15.ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(1) != null) {
						row15.ID = rs_tOracleInput_2.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row15.NOMBRE = null;
							} else {
	                         		
        	row15.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 2, false);
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					


			   
			   

					row15Struct row15_HashRow = new row15Struct();
		   	   	   
				
				row15_HashRow.ID = row15.ID;
				
				row15_HashRow.NOMBRE = row15.NOMBRE;
				
			tHash_Lookup_row15.put(row15_HashRow);
			
            




 


	tos_count_tAdvancedHash_row15++;

/**
 * [tAdvancedHash_row15 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());




/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

tHash_Lookup_row15.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row15", true);
end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());




/**
 * [tAdvancedHash_row15 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];

	
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return true;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 31;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_USUARIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.TIPO_USUARIO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row17Struct row17 = new row17Struct();




	
	/**
	 * [tAdvancedHash_row17 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row17", false);
		start_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row17";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tAdvancedHash_row17 = 0;
		

			   		// connection name:row17
			   		// source node:tHashInput_3 - inputs:(after_tOracleInput_1) outputs:(row17,row17) | target node:tAdvancedHash_row17 - inputs:(row17) outputs:()
			   		// linked node: tMap_5 - inputs:(row1,row13,row12,row17) outputs:(out_1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row17 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row17Struct>getLookup(matchingModeEnum_row17);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row17", tHash_Lookup_row17);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row17 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row22Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_Agendamiento_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row22Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row22Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row17.PERSONAS_ID = next_tHashInput_3.PERSONAS_ID;
	row17.TIPO_USUARIO = next_tHashInput_3.TIPO_USUARIO;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					


			   
			   

					row17Struct row17_HashRow = new row17Struct();
		   	   	   
				
				row17_HashRow.PERSONAS_ID = row17.PERSONAS_ID;
				
				row17_HashRow.TIPO_USUARIO = row17.TIPO_USUARIO;
				
			tHash_Lookup_row17.put(row17_HashRow);
			
            




 


	tos_count_tAdvancedHash_row17++;

/**
 * [tAdvancedHash_row17 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";
	
	

 



/**
 * [tAdvancedHash_row17 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row17 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";
	
	

 



/**
 * [tAdvancedHash_row17 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Agendamiento_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";
	
	

tHash_Lookup_row17.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row17", true);
end_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());




/**
 * [tAdvancedHash_row17 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";
	
	

 



/**
 * [tAdvancedHash_row17 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row18Struct implements routines.system.IPersistableComparableLookupRow<row18Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 20;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 250;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String CIRCULAR;

				public String getCIRCULAR () {
					return this.CIRCULAR;
				}

				public Boolean CIRCULARIsNullable(){
				    return true;
				}
				public Boolean CIRCULARIsKey(){
				    return false;
				}
				public Integer CIRCULARLength(){
				    return 20;
				}
				public Integer CIRCULARPrecision(){
				    return 0;
				}
				public String CIRCULARDefault(){
				
					return null;
				
				}
				public String CIRCULARComment(){
				
				    return "";
				
				}
				public String CIRCULARPattern(){
				
					return "";
				
				}
				public String CIRCULAROriginalDbColumnName(){
				
					return "CIRCULAR";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public BigDecimal META;

				public BigDecimal getMETA () {
					return this.META;
				}

				public Boolean METAIsNullable(){
				    return true;
				}
				public Boolean METAIsKey(){
				    return false;
				}
				public Integer METALength(){
				    return 0;
				}
				public Integer METAPrecision(){
				    return null;
				}
				public String METADefault(){
				
					return "";
				
				}
				public String METAComment(){
				
				    return "";
				
				}
				public String METAPattern(){
				
					return "";
				
				}
				public String METAOriginalDbColumnName(){
				
					return "META";
				
				}

				
			    public String UNIDAD;

				public String getUNIDAD () {
					return this.UNIDAD;
				}

				public Boolean UNIDADIsNullable(){
				    return true;
				}
				public Boolean UNIDADIsKey(){
				    return false;
				}
				public Integer UNIDADLength(){
				    return 20;
				}
				public Integer UNIDADPrecision(){
				    return 0;
				}
				public String UNIDADDefault(){
				
					return null;
				
				}
				public String UNIDADComment(){
				
				    return "";
				
				}
				public String UNIDADPattern(){
				
					return "";
				
				}
				public String UNIDADOriginalDbColumnName(){
				
					return "UNIDAD";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CIRCULAR == null) ? 0 : this.CIRCULAR.hashCode());
					
						result = prime * result + ((this.ESPECIALIDADES_ID == null) ? 0 : this.ESPECIALIDADES_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row18Struct other = (row18Struct) obj;
		
						if (this.CIRCULAR == null) {
							if (other.CIRCULAR != null)
								return false;
						
						} else if (!this.CIRCULAR.equals(other.CIRCULAR))
						
							return false;
					
						if (this.ESPECIALIDADES_ID == null) {
							if (other.ESPECIALIDADES_ID != null)
								return false;
						
						} else if (!this.ESPECIALIDADES_ID.equals(other.ESPECIALIDADES_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row18Struct other) {

		other.ID = this.ID;
	            other.CODIGO = this.CODIGO;
	            other.NOMBRE = this.NOMBRE;
	            other.CIRCULAR = this.CIRCULAR;
	            other.ESPECIALIDADES_ID = this.ESPECIALIDADES_ID;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            other.META = this.META;
	            other.UNIDAD = this.UNIDAD;
	            
	}

	public void copyKeysDataTo(row18Struct other) {

		other.CIRCULAR = this.CIRCULAR;
	            	other.ESPECIALIDADES_ID = this.ESPECIALIDADES_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
					this.CIRCULAR = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
					this.CIRCULAR = readString(dis);
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CIRCULAR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CIRCULAR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
						this.CODIGO = readString(dis,ois);
					
						this.NOMBRE = readString(dis,ois);
					
       			    	this.ESTREGISTRO_ID = (BigDecimal) ois.readObject();
					
       			    	this.META = (BigDecimal) ois.readObject();
					
						this.UNIDAD = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
						this.CODIGO = readString(dis,objectIn);
					
						this.NOMBRE = readString(dis,objectIn);
					
       			    	this.ESTREGISTRO_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.META = (BigDecimal) objectIn.readObject();
					
						this.UNIDAD = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
						writeString(this.CODIGO, dos, oos);
					
						writeString(this.NOMBRE, dos, oos);
					
       			    	oos.writeObject(this.ESTREGISTRO_ID);
					
       			    	oos.writeObject(this.META);
					
						writeString(this.UNIDAD, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						writeString(this.CODIGO, dos, objectOut);
					
						writeString(this.NOMBRE, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ESTREGISTRO_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.META);
					
						writeString(this.UNIDAD, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CIRCULAR="+CIRCULAR);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",META="+String.valueOf(META));
		sb.append(",UNIDAD="+UNIDAD);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CIRCULAR, other.CIRCULAR);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ESPECIALIDADES_ID, other.ESPECIALIDADES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_27Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_27_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row18Struct row18 = new row18Struct();




	
	/**
	 * [tAdvancedHash_row18 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row18", false);
		start_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row18";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tAdvancedHash_row18 = 0;
		

			   		// connection name:row18
			   		// source node:tOracleInput_27 - inputs:(after_tOracleInput_9) outputs:(row18,row18) | target node:tAdvancedHash_row18 - inputs:(row18) outputs:()
			   		// linked node: tMap_4 - inputs:(row10,row18) outputs:(ins_tincador)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row18 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row18Struct>getLookup(matchingModeEnum_row18);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row18", tHash_Lookup_row18);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row18 begin ] stop
 */



	
	/**
	 * [tOracleInput_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_27", false);
		start_Hash.put("tOracleInput_27", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_27";
	
	
		int tos_count_tOracleInput_27 = 0;
		
	


	
		    int nb_line_tOracleInput_27 = 0;
		    java.sql.Connection conn_tOracleInput_27 = null;
				conn_tOracleInput_27 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_27 = false;
				boolean isConnectionWrapped_tOracleInput_27 = !(conn_tOracleInput_27 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_27.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_27 = null;
                if (isConnectionWrapped_tOracleInput_27) {
					unwrappedOraConn_tOracleInput_27 = conn_tOracleInput_27.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_27 != null) {
                        isTimeZoneNull_tOracleInput_27 = (unwrappedOraConn_tOracleInput_27.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_27 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_27).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_27) {
					java.sql.Statement stmtGetTZ_tOracleInput_27 = conn_tOracleInput_27.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_27 = stmtGetTZ_tOracleInput_27.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_27 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_27.next()) {
						sessionTimezone_tOracleInput_27 = rsGetTZ_tOracleInput_27.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_27 && unwrappedOraConn_tOracleInput_27 != null) {
                        unwrappedOraConn_tOracleInput_27.setSessionTimeZone(sessionTimezone_tOracleInput_27);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_27).setSessionTimeZone(sessionTimezone_tOracleInput_27);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_27 = conn_tOracleInput_27.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_27.setFetchSize(1000);


		    String dbquery_tOracleInput_27 = "SELECT \n  SALUDSIS.AGE_TINDICADORES.\"ID\", \n  SALUDSIS.AGE_TINDICADORES.CODIGO, \n  SALUDSIS.AGE_TINDICADORES.NOMBRE, \n"
+"  SALUDSIS.AGE_TINDICADORES.CIRCULAR, \n  SALUDSIS.AGE_TINDICADORES.ESPECIALIDADES_ID, \n  SALUDSIS.AGE_TINDICADORES.ESTRE"
+"GISTRO_ID, \n  SALUDSIS.AGE_TINDICADORES.META, \n  SALUDSIS.AGE_TINDICADORES.UNIDAD\nFROM SALUDSIS.AGE_TINDICADORES";
		    

		    globalMap.put("tOracleInput_27_QUERY",dbquery_tOracleInput_27);

		    java.sql.ResultSet rs_tOracleInput_27 = null;

		    try {
		    	rs_tOracleInput_27 = stmt_tOracleInput_27.executeQuery(dbquery_tOracleInput_27);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_27 = rs_tOracleInput_27.getMetaData();
		    	int colQtyInRs_tOracleInput_27 = rsmd_tOracleInput_27.getColumnCount();

		    String tmpContent_tOracleInput_27 = null;
		    
		    
		    while (rs_tOracleInput_27.next()) {
		        nb_line_tOracleInput_27++;
		        
							if(colQtyInRs_tOracleInput_27 < 1) {
								row18.ID = null;
							} else {
		                          
					if(rs_tOracleInput_27.getObject(1) != null) {
						row18.ID = rs_tOracleInput_27.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_27 < 2) {
								row18.CODIGO = null;
							} else {
	                         		
        	row18.CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_27, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_27 < 3) {
								row18.NOMBRE = null;
							} else {
	                         		
        	row18.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_27, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_27 < 4) {
								row18.CIRCULAR = null;
							} else {
	                         		
        	row18.CIRCULAR = routines.system.JDBCUtil.getString(rs_tOracleInput_27, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_27 < 5) {
								row18.ESPECIALIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_27.getObject(5) != null) {
						row18.ESPECIALIDADES_ID = rs_tOracleInput_27.getBigDecimal(5);
					} else {
				
						row18.ESPECIALIDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_27 < 6) {
								row18.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_27.getObject(6) != null) {
						row18.ESTREGISTRO_ID = rs_tOracleInput_27.getBigDecimal(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_27 < 7) {
								row18.META = null;
							} else {
		                          
					if(rs_tOracleInput_27.getObject(7) != null) {
						row18.META = rs_tOracleInput_27.getBigDecimal(7);
					} else {
				
						row18.META = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_27 < 8) {
								row18.UNIDAD = null;
							} else {
	                         		
        	row18.UNIDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_27, 8, false);
		                    }
					




 



/**
 * [tOracleInput_27 begin ] stop
 */
	
	/**
	 * [tOracleInput_27 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_27";
	
	

 


	tos_count_tOracleInput_27++;

/**
 * [tOracleInput_27 main ] stop
 */
	
	/**
	 * [tOracleInput_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_27";
	
	

 



/**
 * [tOracleInput_27 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					


			   
			   

					row18Struct row18_HashRow = new row18Struct();
		   	   	   
				
				row18_HashRow.ID = row18.ID;
				
				row18_HashRow.CODIGO = row18.CODIGO;
				
				row18_HashRow.NOMBRE = row18.NOMBRE;
				
				row18_HashRow.CIRCULAR = row18.CIRCULAR;
				
				row18_HashRow.ESPECIALIDADES_ID = row18.ESPECIALIDADES_ID;
				
				row18_HashRow.ESTREGISTRO_ID = row18.ESTREGISTRO_ID;
				
				row18_HashRow.META = row18.META;
				
				row18_HashRow.UNIDAD = row18.UNIDAD;
				
			tHash_Lookup_row18.put(row18_HashRow);
			
            




 


	tos_count_tAdvancedHash_row18++;

/**
 * [tAdvancedHash_row18 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	

 



/**
 * [tAdvancedHash_row18 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row18 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	

 



/**
 * [tAdvancedHash_row18 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_27";
	
	

 



/**
 * [tOracleInput_27 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_27 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_27";
	
	

}
}finally{
	if (rs_tOracleInput_27 != null) {
		rs_tOracleInput_27.close();
	}
	if (stmt_tOracleInput_27 != null) {
		stmt_tOracleInput_27.close();
	}
}

globalMap.put("tOracleInput_27_NB_LINE",nb_line_tOracleInput_27);
 

ok_Hash.put("tOracleInput_27", true);
end_Hash.put("tOracleInput_27", System.currentTimeMillis());




/**
 * [tOracleInput_27 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	

tHash_Lookup_row18.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row18", true);
end_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());




/**
 * [tAdvancedHash_row18 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_27 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_27";
	
	

 



/**
 * [tOracleInput_27 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	

 



/**
 * [tAdvancedHash_row18 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_27_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableComparableLookupRow<row19Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 20;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 250;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String CIRCULAR;

				public String getCIRCULAR () {
					return this.CIRCULAR;
				}

				public Boolean CIRCULARIsNullable(){
				    return true;
				}
				public Boolean CIRCULARIsKey(){
				    return false;
				}
				public Integer CIRCULARLength(){
				    return 20;
				}
				public Integer CIRCULARPrecision(){
				    return 0;
				}
				public String CIRCULARDefault(){
				
					return null;
				
				}
				public String CIRCULARComment(){
				
				    return "";
				
				}
				public String CIRCULARPattern(){
				
					return "";
				
				}
				public String CIRCULAROriginalDbColumnName(){
				
					return "CIRCULAR";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal META;

				public BigDecimal getMETA () {
					return this.META;
				}

				public Boolean METAIsNullable(){
				    return true;
				}
				public Boolean METAIsKey(){
				    return false;
				}
				public Integer METALength(){
				    return 0;
				}
				public Integer METAPrecision(){
				    return null;
				}
				public String METADefault(){
				
					return "";
				
				}
				public String METAComment(){
				
				    return "";
				
				}
				public String METAPattern(){
				
					return "";
				
				}
				public String METAOriginalDbColumnName(){
				
					return "META";
				
				}

				
			    public String UNIDAD;

				public String getUNIDAD () {
					return this.UNIDAD;
				}

				public Boolean UNIDADIsNullable(){
				    return true;
				}
				public Boolean UNIDADIsKey(){
				    return false;
				}
				public Integer UNIDADLength(){
				    return 20;
				}
				public Integer UNIDADPrecision(){
				    return 0;
				}
				public String UNIDADDefault(){
				
					return null;
				
				}
				public String UNIDADComment(){
				
				    return "";
				
				}
				public String UNIDADPattern(){
				
					return "";
				
				}
				public String UNIDADOriginalDbColumnName(){
				
					return "UNIDAD";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row19Struct other = (row19Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row19Struct other) {

		other.ID = this.ID;
	            other.CODIGO = this.CODIGO;
	            other.NOMBRE = this.NOMBRE;
	            other.CIRCULAR = this.CIRCULAR;
	            other.ESPECIALIDADES_ID = this.ESPECIALIDADES_ID;
	            other.META = this.META;
	            other.UNIDAD = this.UNIDAD;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            
	}

	public void copyKeysDataTo(row19Struct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.CODIGO = readString(dis,ois);
					
						this.NOMBRE = readString(dis,ois);
					
						this.CIRCULAR = readString(dis,ois);
					
       			    	this.ESPECIALIDADES_ID = (BigDecimal) ois.readObject();
					
       			    	this.META = (BigDecimal) ois.readObject();
					
						this.UNIDAD = readString(dis,ois);
					
       			    	this.ESTREGISTRO_ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.CODIGO = readString(dis,objectIn);
					
						this.NOMBRE = readString(dis,objectIn);
					
						this.CIRCULAR = readString(dis,objectIn);
					
       			    	this.ESPECIALIDADES_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.META = (BigDecimal) objectIn.readObject();
					
						this.UNIDAD = readString(dis,objectIn);
					
       			    	this.ESTREGISTRO_ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.CODIGO, dos, oos);
					
						writeString(this.NOMBRE, dos, oos);
					
						writeString(this.CIRCULAR, dos, oos);
					
       			    	oos.writeObject(this.ESPECIALIDADES_ID);
					
       			    	oos.writeObject(this.META);
					
						writeString(this.UNIDAD, dos, oos);
					
       			    	oos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.CODIGO, dos, objectOut);
					
						writeString(this.NOMBRE, dos, objectOut);
					
						writeString(this.CIRCULAR, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ESPECIALIDADES_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.META);
					
						writeString(this.UNIDAD, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CIRCULAR="+CIRCULAR);
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",META="+String.valueOf(META));
		sb.append(",UNIDAD="+UNIDAD);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row19Struct row19 = new row19Struct();




	
	/**
	 * [tAdvancedHash_row19 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row19", false);
		start_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row19";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tAdvancedHash_row19 = 0;
		

			   		// connection name:row19
			   		// source node:tOracleInput_11 - inputs:(after_tOracleInput_9) outputs:(row19,row19) | target node:tAdvancedHash_row19 - inputs:(row19) outputs:()
			   		// linked node: tMap_1 - inputs:(ins_tincador,row19) outputs:(TINDICADORES_OUT,TINDICADORES_ACTUALIZAR_OUT)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row19 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row19Struct>getLookup(matchingModeEnum_row19);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row19", tHash_Lookup_row19);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row19 begin ] stop
 */



	
	/**
	 * [tOracleInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_11", false);
		start_Hash.put("tOracleInput_11", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_11";
	
	
		int tos_count_tOracleInput_11 = 0;
		
	


	
		    int nb_line_tOracleInput_11 = 0;
		    java.sql.Connection conn_tOracleInput_11 = null;
				conn_tOracleInput_11 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_11 = false;
				boolean isConnectionWrapped_tOracleInput_11 = !(conn_tOracleInput_11 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_11.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_11 = null;
                if (isConnectionWrapped_tOracleInput_11) {
					unwrappedOraConn_tOracleInput_11 = conn_tOracleInput_11.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_11 != null) {
                        isTimeZoneNull_tOracleInput_11 = (unwrappedOraConn_tOracleInput_11.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_11 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_11).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_11) {
					java.sql.Statement stmtGetTZ_tOracleInput_11 = conn_tOracleInput_11.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_11 = stmtGetTZ_tOracleInput_11.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_11 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_11.next()) {
						sessionTimezone_tOracleInput_11 = rsGetTZ_tOracleInput_11.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_11 && unwrappedOraConn_tOracleInput_11 != null) {
                        unwrappedOraConn_tOracleInput_11.setSessionTimeZone(sessionTimezone_tOracleInput_11);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_11).setSessionTimeZone(sessionTimezone_tOracleInput_11);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_11 = conn_tOracleInput_11.createStatement();

		    String dbquery_tOracleInput_11 = "select \n    ID, CODIGO, NOMBRE, CIRCULAR, ESPECIALIDADES_ID, META, UNIDAD, ESTREGISTRO_ID\nfrom bage_tindicadores";
		    

		    globalMap.put("tOracleInput_11_QUERY",dbquery_tOracleInput_11);

		    java.sql.ResultSet rs_tOracleInput_11 = null;

		    try {
		    	rs_tOracleInput_11 = stmt_tOracleInput_11.executeQuery(dbquery_tOracleInput_11);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_11 = rs_tOracleInput_11.getMetaData();
		    	int colQtyInRs_tOracleInput_11 = rsmd_tOracleInput_11.getColumnCount();

		    String tmpContent_tOracleInput_11 = null;
		    
		    
		    while (rs_tOracleInput_11.next()) {
		        nb_line_tOracleInput_11++;
		        
							if(colQtyInRs_tOracleInput_11 < 1) {
								row19.ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(1) != null) {
						row19.ID = rs_tOracleInput_11.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 2) {
								row19.CODIGO = null;
							} else {
	                         		
        	row19.CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 3) {
								row19.NOMBRE = null;
							} else {
	                         		
        	row19.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 4) {
								row19.CIRCULAR = null;
							} else {
	                         		
        	row19.CIRCULAR = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 5) {
								row19.ESPECIALIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(5) != null) {
						row19.ESPECIALIDADES_ID = rs_tOracleInput_11.getBigDecimal(5);
					} else {
				
						row19.ESPECIALIDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 6) {
								row19.META = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(6) != null) {
						row19.META = rs_tOracleInput_11.getBigDecimal(6);
					} else {
				
						row19.META = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 7) {
								row19.UNIDAD = null;
							} else {
	                         		
        	row19.UNIDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 8) {
								row19.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(8) != null) {
						row19.ESTREGISTRO_ID = rs_tOracleInput_11.getBigDecimal(8);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_11 begin ] stop
 */
	
	/**
	 * [tOracleInput_11 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 


	tos_count_tOracleInput_11++;

/**
 * [tOracleInput_11 main ] stop
 */
	
	/**
	 * [tOracleInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row19"
						
						);
					}
					


			   
			   

					row19Struct row19_HashRow = new row19Struct();
		   	   	   
				
				row19_HashRow.ID = row19.ID;
				
				row19_HashRow.CODIGO = row19.CODIGO;
				
				row19_HashRow.NOMBRE = row19.NOMBRE;
				
				row19_HashRow.CIRCULAR = row19.CIRCULAR;
				
				row19_HashRow.ESPECIALIDADES_ID = row19.ESPECIALIDADES_ID;
				
				row19_HashRow.META = row19.META;
				
				row19_HashRow.UNIDAD = row19.UNIDAD;
				
				row19_HashRow.ESTREGISTRO_ID = row19.ESTREGISTRO_ID;
				
			tHash_Lookup_row19.put(row19_HashRow);
			
            




 


	tos_count_tAdvancedHash_row19++;

/**
 * [tAdvancedHash_row19 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";
	
	

 



/**
 * [tAdvancedHash_row19 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row19 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";
	
	

 



/**
 * [tAdvancedHash_row19 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_11 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

}
}finally{
	if (rs_tOracleInput_11 != null) {
		rs_tOracleInput_11.close();
	}
	if (stmt_tOracleInput_11 != null) {
		stmt_tOracleInput_11.close();
	}
}

globalMap.put("tOracleInput_11_NB_LINE",nb_line_tOracleInput_11);
 

ok_Hash.put("tOracleInput_11", true);
end_Hash.put("tOracleInput_11", System.currentTimeMillis());




/**
 * [tOracleInput_11 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";
	
	

tHash_Lookup_row19.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row19", true);
end_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());




/**
 * [tAdvancedHash_row19 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_11 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";
	
	

 



/**
 * [tAdvancedHash_row19 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row24Struct implements routines.system.IPersistableComparableLookupRow<row24Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal IDENFITICADOR;

				public BigDecimal getIDENFITICADOR () {
					return this.IDENFITICADOR;
				}

				public Boolean IDENFITICADORIsNullable(){
				    return true;
				}
				public Boolean IDENFITICADORIsKey(){
				    return false;
				}
				public Integer IDENFITICADORLength(){
				    return null;
				}
				public Integer IDENFITICADORPrecision(){
				    return null;
				}
				public String IDENFITICADORDefault(){
				
					return null;
				
				}
				public String IDENFITICADORComment(){
				
				    return "";
				
				}
				public String IDENFITICADORPattern(){
				
					return "";
				
				}
				public String IDENFITICADOROriginalDbColumnName(){
				
					return "IDENFITICADOR";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.IDENFITICADOR == null) ? 0 : this.IDENFITICADOR.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row24Struct other = (row24Struct) obj;
		
						if (this.IDENFITICADOR == null) {
							if (other.IDENFITICADOR != null)
								return false;
						
						} else if (!this.IDENFITICADOR.equals(other.IDENFITICADOR))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row24Struct other) {

		other.ID = this.ID;
	            other.IDENFITICADOR = this.IDENFITICADOR;
	            
	}

	public void copyKeysDataTo(row24Struct other) {

		other.IDENFITICADOR = this.IDENFITICADOR;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.IDENFITICADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.IDENFITICADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.IDENFITICADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IDENFITICADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",IDENFITICADOR="+String.valueOf(IDENFITICADOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.IDENFITICADOR, other.IDENFITICADOR);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row24Struct row24 = new row24Struct();




	
	/**
	 * [tAdvancedHash_row24 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row24", false);
		start_Hash.put("tAdvancedHash_row24", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row24";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row24");
					}
				
		int tos_count_tAdvancedHash_row24 = 0;
		

			   		// connection name:row24
			   		// source node:tHashInput_5 - inputs:(after_tOracleInput_8) outputs:(row24,row24) | target node:tAdvancedHash_row24 - inputs:(row24) outputs:()
			   		// linked node: tMap_7 - inputs:(row23,row24,row25,row26,row28,row30,row31) outputs:(AGE_SCITAS)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row24 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct> tHash_Lookup_row24 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row24Struct>getLookup(matchingModeEnum_row24);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row24", tHash_Lookup_row24);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row24 begin ] stop
 */



	
	/**
	 * [tHashInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_5", false);
		start_Hash.put("tHashInput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_5";
	
	
		int tos_count_tHashInput_5 = 0;
		


int nb_line_tHashInput_5 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashInput_5 = mf_tHashInput_5.getAdvancedMemoryHashFile("tHashFile_Agendamiento_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_5==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row2Struct> iterator_tHashInput_5 = tHashFile_tHashInput_5.iterator();
while (iterator_tHashInput_5.hasNext()) {
    row2Struct next_tHashInput_5 = iterator_tHashInput_5.next();

	row24.ID = next_tHashInput_5.ID;
	row24.IDENFITICADOR = next_tHashInput_5.IDENTIFICADOR;

 



/**
 * [tHashInput_5 begin ] stop
 */
	
	/**
	 * [tHashInput_5 main ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 


	tos_count_tHashInput_5++;

/**
 * [tHashInput_5 main ] stop
 */
	
	/**
	 * [tHashInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row24 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row24";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row24"
						
						);
					}
					


			   
			   

					row24Struct row24_HashRow = new row24Struct();
		   	   	   
				
				row24_HashRow.ID = row24.ID;
				
				row24_HashRow.IDENFITICADOR = row24.IDENFITICADOR;
				
			tHash_Lookup_row24.put(row24_HashRow);
			
            




 


	tos_count_tAdvancedHash_row24++;

/**
 * [tAdvancedHash_row24 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row24";
	
	

 



/**
 * [tAdvancedHash_row24 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row24 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row24";
	
	

 



/**
 * [tAdvancedHash_row24 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_5 end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	
    

		
			nb_line_tHashInput_5++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Agendamiento_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_5_NB_LINE", nb_line_tHashInput_5);       

 

ok_Hash.put("tHashInput_5", true);
end_Hash.put("tHashInput_5", System.currentTimeMillis());




/**
 * [tHashInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row24 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row24";
	
	

tHash_Lookup_row24.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row24");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row24", true);
end_Hash.put("tAdvancedHash_row24", System.currentTimeMillis());




/**
 * [tAdvancedHash_row24 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row24 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row24";
	
	

 



/**
 * [tAdvancedHash_row24 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row25Struct implements routines.system.IPersistableComparableLookupRow<row25Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return true;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 31;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PERSONAS_ID == null) ? 0 : this.PERSONAS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row25Struct other = (row25Struct) obj;
		
						if (this.PERSONAS_ID == null) {
							if (other.PERSONAS_ID != null)
								return false;
						
						} else if (!this.PERSONAS_ID.equals(other.PERSONAS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row25Struct other) {

		other.PERSONAS_ID = this.PERSONAS_ID;
	            other.TIPO_USUARIO = this.TIPO_USUARIO;
	            
	}

	public void copyKeysDataTo(row25Struct other) {

		other.PERSONAS_ID = this.PERSONAS_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.TIPO_USUARIO = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.TIPO_USUARIO = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.TIPO_USUARIO, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.TIPO_USUARIO, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PERSONAS_ID, other.PERSONAS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row25Struct row25 = new row25Struct();




	
	/**
	 * [tAdvancedHash_row25 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row25", false);
		start_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row25";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tAdvancedHash_row25 = 0;
		

			   		// connection name:row25
			   		// source node:tHashInput_4 - inputs:(after_tOracleInput_8) outputs:(row25,row25) | target node:tAdvancedHash_row25 - inputs:(row25) outputs:()
			   		// linked node: tMap_7 - inputs:(row23,row24,row25,row26,row28,row30,row31) outputs:(AGE_SCITAS)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row25 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row25Struct>getLookup(matchingModeEnum_row25);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row25", tHash_Lookup_row25);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row25 begin ] stop
 */



	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";
	
	
		int tos_count_tHashInput_4 = 0;
		


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row22Struct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_Agendamiento_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row22Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    row22Struct next_tHashInput_4 = iterator_tHashInput_4.next();

	row25.PERSONAS_ID = next_tHashInput_4.PERSONAS_ID;
	row25.TIPO_USUARIO = next_tHashInput_4.TIPO_USUARIO;

 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */
	
	/**
	 * [tHashInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row25"
						
						);
					}
					


			   
			   

					row25Struct row25_HashRow = new row25Struct();
		   	   	   
				
				row25_HashRow.PERSONAS_ID = row25.PERSONAS_ID;
				
				row25_HashRow.TIPO_USUARIO = row25.TIPO_USUARIO;
				
			tHash_Lookup_row25.put(row25_HashRow);
			
            




 


	tos_count_tAdvancedHash_row25++;

/**
 * [tAdvancedHash_row25 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";
	
	

 



/**
 * [tAdvancedHash_row25 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row25 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";
	
	

 



/**
 * [tAdvancedHash_row25 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	
    

		
			nb_line_tHashInput_4++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Agendamiento_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";
	
	

tHash_Lookup_row25.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row25", true);
end_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());




/**
 * [tAdvancedHash_row25 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";
	
	

 



/**
 * [tAdvancedHash_row25 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row26Struct implements routines.system.IPersistableComparableLookupRow<row26Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String CODIGO_UORG;

				public String getCODIGO_UORG () {
					return this.CODIGO_UORG;
				}

				public Boolean CODIGO_UORGIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UORGIsKey(){
				    return false;
				}
				public Integer CODIGO_UORGLength(){
				    return 100;
				}
				public Integer CODIGO_UORGPrecision(){
				    return 0;
				}
				public String CODIGO_UORGDefault(){
				
					return null;
				
				}
				public String CODIGO_UORGComment(){
				
				    return "";
				
				}
				public String CODIGO_UORGPattern(){
				
					return "";
				
				}
				public String CODIGO_UORGOriginalDbColumnName(){
				
					return "CODIGO_UORG";
				
				}

				
			    public String NOMBRE_UORG;

				public String getNOMBRE_UORG () {
					return this.NOMBRE_UORG;
				}

				public Boolean NOMBRE_UORGIsNullable(){
				    return false;
				}
				public Boolean NOMBRE_UORGIsKey(){
				    return false;
				}
				public Integer NOMBRE_UORGLength(){
				    return 2000;
				}
				public Integer NOMBRE_UORGPrecision(){
				    return 0;
				}
				public String NOMBRE_UORGDefault(){
				
					return null;
				
				}
				public String NOMBRE_UORGComment(){
				
				    return "";
				
				}
				public String NOMBRE_UORGPattern(){
				
					return "";
				
				}
				public String NOMBRE_UORGOriginalDbColumnName(){
				
					return "NOMBRE_UORG";
				
				}

				
			    public String SIGLA_UORG;

				public String getSIGLA_UORG () {
					return this.SIGLA_UORG;
				}

				public Boolean SIGLA_UORGIsNullable(){
				    return false;
				}
				public Boolean SIGLA_UORGIsKey(){
				    return false;
				}
				public Integer SIGLA_UORGLength(){
				    return 100;
				}
				public Integer SIGLA_UORGPrecision(){
				    return 0;
				}
				public String SIGLA_UORGDefault(){
				
					return null;
				
				}
				public String SIGLA_UORGComment(){
				
				    return "";
				
				}
				public String SIGLA_UORGPattern(){
				
					return "";
				
				}
				public String SIGLA_UORGOriginalDbColumnName(){
				
					return "SIGLA_UORG";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				
			    public String NOMBRE_FUERZA;

				public String getNOMBRE_FUERZA () {
					return this.NOMBRE_FUERZA;
				}

				public Boolean NOMBRE_FUERZAIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_FUERZAIsKey(){
				    return false;
				}
				public Integer NOMBRE_FUERZALength(){
				    return 500;
				}
				public Integer NOMBRE_FUERZAPrecision(){
				    return 0;
				}
				public String NOMBRE_FUERZADefault(){
				
					return null;
				
				}
				public String NOMBRE_FUERZAComment(){
				
				    return "";
				
				}
				public String NOMBRE_FUERZAPattern(){
				
					return "";
				
				}
				public String NOMBRE_FUERZAOriginalDbColumnName(){
				
					return "NOMBRE_FUERZA";
				
				}

				
			    public String MUNICIPIO_ESM;

				public String getMUNICIPIO_ESM () {
					return this.MUNICIPIO_ESM;
				}

				public Boolean MUNICIPIO_ESMIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIO_ESMIsKey(){
				    return false;
				}
				public Integer MUNICIPIO_ESMLength(){
				    return 100;
				}
				public Integer MUNICIPIO_ESMPrecision(){
				    return 0;
				}
				public String MUNICIPIO_ESMDefault(){
				
					return null;
				
				}
				public String MUNICIPIO_ESMComment(){
				
				    return "";
				
				}
				public String MUNICIPIO_ESMPattern(){
				
					return "";
				
				}
				public String MUNICIPIO_ESMOriginalDbColumnName(){
				
					return "MUNICIPIO_ESM";
				
				}

				
			    public String CIUDAD_ESM;

				public String getCIUDAD_ESM () {
					return this.CIUDAD_ESM;
				}

				public Boolean CIUDAD_ESMIsNullable(){
				    return true;
				}
				public Boolean CIUDAD_ESMIsKey(){
				    return false;
				}
				public Integer CIUDAD_ESMLength(){
				    return 100;
				}
				public Integer CIUDAD_ESMPrecision(){
				    return 0;
				}
				public String CIUDAD_ESMDefault(){
				
					return null;
				
				}
				public String CIUDAD_ESMComment(){
				
				    return "";
				
				}
				public String CIUDAD_ESMPattern(){
				
					return "";
				
				}
				public String CIUDAD_ESMOriginalDbColumnName(){
				
					return "CIUDAD_ESM";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UORG_ID == null) ? 0 : this.UORG_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row26Struct other = (row26Struct) obj;
		
						if (this.UORG_ID == null) {
							if (other.UORG_ID != null)
								return false;
						
						} else if (!this.UORG_ID.equals(other.UORG_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row26Struct other) {

		other.UORG_ID = this.UORG_ID;
	            other.CODIGO_UORG = this.CODIGO_UORG;
	            other.NOMBRE_UORG = this.NOMBRE_UORG;
	            other.SIGLA_UORG = this.SIGLA_UORG;
	            other.FUERZA_ID = this.FUERZA_ID;
	            other.NOMBRE_FUERZA = this.NOMBRE_FUERZA;
	            other.MUNICIPIO_ESM = this.MUNICIPIO_ESM;
	            other.CIUDAD_ESM = this.CIUDAD_ESM;
	            
	}

	public void copyKeysDataTo(row26Struct other) {

		other.UORG_ID = this.UORG_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.UORG_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.CODIGO_UORG = readString(dis,ois);
					
						this.NOMBRE_UORG = readString(dis,ois);
					
						this.SIGLA_UORG = readString(dis,ois);
					
       			    	this.FUERZA_ID = (BigDecimal) ois.readObject();
					
						this.NOMBRE_FUERZA = readString(dis,ois);
					
						this.MUNICIPIO_ESM = readString(dis,ois);
					
						this.CIUDAD_ESM = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.CODIGO_UORG = readString(dis,objectIn);
					
						this.NOMBRE_UORG = readString(dis,objectIn);
					
						this.SIGLA_UORG = readString(dis,objectIn);
					
       			    	this.FUERZA_ID = (BigDecimal) objectIn.readObject();
					
						this.NOMBRE_FUERZA = readString(dis,objectIn);
					
						this.MUNICIPIO_ESM = readString(dis,objectIn);
					
						this.CIUDAD_ESM = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.CODIGO_UORG, dos, oos);
					
						writeString(this.NOMBRE_UORG, dos, oos);
					
						writeString(this.SIGLA_UORG, dos, oos);
					
       			    	oos.writeObject(this.FUERZA_ID);
					
						writeString(this.NOMBRE_FUERZA, dos, oos);
					
						writeString(this.MUNICIPIO_ESM, dos, oos);
					
						writeString(this.CIUDAD_ESM, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.CODIGO_UORG, dos, objectOut);
					
						writeString(this.NOMBRE_UORG, dos, objectOut);
					
						writeString(this.SIGLA_UORG, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.FUERZA_ID);
					
						writeString(this.NOMBRE_FUERZA, dos, objectOut);
					
						writeString(this.MUNICIPIO_ESM, dos, objectOut);
					
						writeString(this.CIUDAD_ESM, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CODIGO_UORG="+CODIGO_UORG);
		sb.append(",NOMBRE_UORG="+NOMBRE_UORG);
		sb.append(",SIGLA_UORG="+SIGLA_UORG);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
		sb.append(",NOMBRE_FUERZA="+NOMBRE_FUERZA);
		sb.append(",MUNICIPIO_ESM="+MUNICIPIO_ESM);
		sb.append(",CIUDAD_ESM="+CIUDAD_ESM);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UORG_ID, other.UORG_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row26Struct row26 = new row26Struct();




	
	/**
	 * [tAdvancedHash_row26 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row26", false);
		start_Hash.put("tAdvancedHash_row26", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row26";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row26");
					}
				
		int tos_count_tAdvancedHash_row26 = 0;
		

			   		// connection name:row26
			   		// source node:tOracleInput_16 - inputs:(after_tOracleInput_8) outputs:(row26,row26) | target node:tAdvancedHash_row26 - inputs:(row26) outputs:()
			   		// linked node: tMap_7 - inputs:(row23,row24,row25,row26,row28,row30,row31) outputs:(AGE_SCITAS)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row26 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct> tHash_Lookup_row26 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row26Struct>getLookup(matchingModeEnum_row26);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row26", tHash_Lookup_row26);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row26 begin ] stop
 */



	
	/**
	 * [tOracleInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_16", false);
		start_Hash.put("tOracleInput_16", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_16";
	
	
		int tos_count_tOracleInput_16 = 0;
		
	


	
		    int nb_line_tOracleInput_16 = 0;
		    java.sql.Connection conn_tOracleInput_16 = null;
				conn_tOracleInput_16 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_16 = false;
				boolean isConnectionWrapped_tOracleInput_16 = !(conn_tOracleInput_16 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_16.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_16 = null;
                if (isConnectionWrapped_tOracleInput_16) {
					unwrappedOraConn_tOracleInput_16 = conn_tOracleInput_16.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_16 != null) {
                        isTimeZoneNull_tOracleInput_16 = (unwrappedOraConn_tOracleInput_16.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_16 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_16).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_16) {
					java.sql.Statement stmtGetTZ_tOracleInput_16 = conn_tOracleInput_16.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_16 = stmtGetTZ_tOracleInput_16.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_16 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_16.next()) {
						sessionTimezone_tOracleInput_16 = rsGetTZ_tOracleInput_16.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_16 && unwrappedOraConn_tOracleInput_16 != null) {
                        unwrappedOraConn_tOracleInput_16.setSessionTimeZone(sessionTimezone_tOracleInput_16);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_16).setSessionTimeZone(sessionTimezone_tOracleInput_16);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_16 = conn_tOracleInput_16.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_16.setFetchSize(1000);


		    String dbquery_tOracleInput_16 = "\nSELECT \n  GU.ID AS UORG_ID, \n  GU.CODIGO AS CODIGO_UORG, \n  GU.NOMBRE AS NOMBRE_UORG, \n  GU.SIGLA AS SIGLA_UORG, "
+"\n  GU.FUERZA_ID,\n  GF.NOMBRE AS NOMBRE_FUERZA,  \n  GD.MCPIO AS MUNICIPIO_ESM,\n  GD.CCPP AS CIUDAD_ESM\nFROM GEN_UORG"
+" GU\nINNER JOIN GEN_TUORG TU ON GU.TUORG_ID  = TU.ID\nLEFT JOIN GEN_FUERZAS GF ON GU.FUERZA_ID = GF.ID AND GF.ESTREGISTR"
+"O_ID = 1\nLEFT JOIN GEN_DIVIPOLA GD ON GU.DIVIPOLA_ID = GD.ID AND GD.ESTREGISTRO_ID = 1\nWHERE GU.ESTREGISTRO_ID = 1\nAN"
+"D TU.NOMBRE IN ('DGSM', 'DISAN', 'ESM', 'SATELITE')\n";
		    

		    globalMap.put("tOracleInput_16_QUERY",dbquery_tOracleInput_16);

		    java.sql.ResultSet rs_tOracleInput_16 = null;

		    try {
		    	rs_tOracleInput_16 = stmt_tOracleInput_16.executeQuery(dbquery_tOracleInput_16);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_16 = rs_tOracleInput_16.getMetaData();
		    	int colQtyInRs_tOracleInput_16 = rsmd_tOracleInput_16.getColumnCount();

		    String tmpContent_tOracleInput_16 = null;
		    
		    
		    while (rs_tOracleInput_16.next()) {
		        nb_line_tOracleInput_16++;
		        
							if(colQtyInRs_tOracleInput_16 < 1) {
								row26.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_16.getObject(1) != null) {
						row26.UORG_ID = rs_tOracleInput_16.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_16 < 2) {
								row26.CODIGO_UORG = null;
							} else {
	                         		
        	row26.CODIGO_UORG = routines.system.JDBCUtil.getString(rs_tOracleInput_16, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_16 < 3) {
								row26.NOMBRE_UORG = null;
							} else {
	                         		
        	row26.NOMBRE_UORG = routines.system.JDBCUtil.getString(rs_tOracleInput_16, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_16 < 4) {
								row26.SIGLA_UORG = null;
							} else {
	                         		
        	row26.SIGLA_UORG = routines.system.JDBCUtil.getString(rs_tOracleInput_16, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_16 < 5) {
								row26.FUERZA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_16.getObject(5) != null) {
						row26.FUERZA_ID = rs_tOracleInput_16.getBigDecimal(5);
					} else {
				
						row26.FUERZA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_16 < 6) {
								row26.NOMBRE_FUERZA = null;
							} else {
	                         		
        	row26.NOMBRE_FUERZA = routines.system.JDBCUtil.getString(rs_tOracleInput_16, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_16 < 7) {
								row26.MUNICIPIO_ESM = null;
							} else {
	                         		
        	row26.MUNICIPIO_ESM = routines.system.JDBCUtil.getString(rs_tOracleInput_16, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_16 < 8) {
								row26.CIUDAD_ESM = null;
							} else {
	                         		
        	row26.CIUDAD_ESM = routines.system.JDBCUtil.getString(rs_tOracleInput_16, 8, false);
		                    }
					




 



/**
 * [tOracleInput_16 begin ] stop
 */
	
	/**
	 * [tOracleInput_16 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 


	tos_count_tOracleInput_16++;

/**
 * [tOracleInput_16 main ] stop
 */
	
	/**
	 * [tOracleInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row26 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row26";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row26"
						
						);
					}
					


			   
			   

					row26Struct row26_HashRow = new row26Struct();
		   	   	   
				
				row26_HashRow.UORG_ID = row26.UORG_ID;
				
				row26_HashRow.CODIGO_UORG = row26.CODIGO_UORG;
				
				row26_HashRow.NOMBRE_UORG = row26.NOMBRE_UORG;
				
				row26_HashRow.SIGLA_UORG = row26.SIGLA_UORG;
				
				row26_HashRow.FUERZA_ID = row26.FUERZA_ID;
				
				row26_HashRow.NOMBRE_FUERZA = row26.NOMBRE_FUERZA;
				
				row26_HashRow.MUNICIPIO_ESM = row26.MUNICIPIO_ESM;
				
				row26_HashRow.CIUDAD_ESM = row26.CIUDAD_ESM;
				
			tHash_Lookup_row26.put(row26_HashRow);
			
            




 


	tos_count_tAdvancedHash_row26++;

/**
 * [tAdvancedHash_row26 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row26";
	
	

 



/**
 * [tAdvancedHash_row26 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row26 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row26";
	
	

 



/**
 * [tAdvancedHash_row26 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_16 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

}
}finally{
	if (rs_tOracleInput_16 != null) {
		rs_tOracleInput_16.close();
	}
	if (stmt_tOracleInput_16 != null) {
		stmt_tOracleInput_16.close();
	}
}

globalMap.put("tOracleInput_16_NB_LINE",nb_line_tOracleInput_16);
 

ok_Hash.put("tOracleInput_16", true);
end_Hash.put("tOracleInput_16", System.currentTimeMillis());




/**
 * [tOracleInput_16 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row26 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row26";
	
	

tHash_Lookup_row26.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row26");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row26", true);
end_Hash.put("tAdvancedHash_row26", System.currentTimeMillis());




/**
 * [tAdvancedHash_row26 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_16 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row26 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row26";
	
	

 



/**
 * [tAdvancedHash_row26 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_16_SUBPROCESS_STATE", 1);
	}
	


public static class row28Struct implements routines.system.IPersistableComparableLookupRow<row28Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 500;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 20;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row28Struct other = (row28Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row28Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row28Struct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NOMBRE = readString(dis,ois);
					
						this.SIGLA = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.NOMBRE = readString(dis,objectIn);
					
						this.SIGLA = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NOMBRE, dos, oos);
					
						writeString(this.SIGLA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.NOMBRE, dos, objectOut);
					
						writeString(this.SIGLA, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_21_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row28Struct row28 = new row28Struct();




	
	/**
	 * [tAdvancedHash_row28 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row28", false);
		start_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row28";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tAdvancedHash_row28 = 0;
		

			   		// connection name:row28
			   		// source node:tOracleInput_21 - inputs:(after_tOracleInput_8) outputs:(row28,row28) | target node:tAdvancedHash_row28 - inputs:(row28) outputs:()
			   		// linked node: tMap_7 - inputs:(row23,row24,row25,row26,row28,row30,row31) outputs:(AGE_SCITAS)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row28 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row28Struct>getLookup(matchingModeEnum_row28);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row28", tHash_Lookup_row28);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row28 begin ] stop
 */



	
	/**
	 * [tOracleInput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_21", false);
		start_Hash.put("tOracleInput_21", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_21";
	
	
		int tos_count_tOracleInput_21 = 0;
		
	


	
		    int nb_line_tOracleInput_21 = 0;
		    java.sql.Connection conn_tOracleInput_21 = null;
				conn_tOracleInput_21 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_21 = false;
				boolean isConnectionWrapped_tOracleInput_21 = !(conn_tOracleInput_21 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_21.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_21 = null;
                if (isConnectionWrapped_tOracleInput_21) {
					unwrappedOraConn_tOracleInput_21 = conn_tOracleInput_21.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_21 != null) {
                        isTimeZoneNull_tOracleInput_21 = (unwrappedOraConn_tOracleInput_21.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_21 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_21).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_21) {
					java.sql.Statement stmtGetTZ_tOracleInput_21 = conn_tOracleInput_21.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_21 = stmtGetTZ_tOracleInput_21.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_21 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_21.next()) {
						sessionTimezone_tOracleInput_21 = rsGetTZ_tOracleInput_21.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_21 && unwrappedOraConn_tOracleInput_21 != null) {
                        unwrappedOraConn_tOracleInput_21.setSessionTimeZone(sessionTimezone_tOracleInput_21);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_21).setSessionTimeZone(sessionTimezone_tOracleInput_21);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_21 = conn_tOracleInput_21.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_21.setFetchSize(1000);


		    String dbquery_tOracleInput_21 = "\nSELECT \n  ID, \n  NOMBRE,\n  SIGLA\nFROM GEN_ESPECIALIDADES\n";
		    

		    globalMap.put("tOracleInput_21_QUERY",dbquery_tOracleInput_21);

		    java.sql.ResultSet rs_tOracleInput_21 = null;

		    try {
		    	rs_tOracleInput_21 = stmt_tOracleInput_21.executeQuery(dbquery_tOracleInput_21);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_21 = rs_tOracleInput_21.getMetaData();
		    	int colQtyInRs_tOracleInput_21 = rsmd_tOracleInput_21.getColumnCount();

		    String tmpContent_tOracleInput_21 = null;
		    
		    
		    while (rs_tOracleInput_21.next()) {
		        nb_line_tOracleInput_21++;
		        
							if(colQtyInRs_tOracleInput_21 < 1) {
								row28.ID = null;
							} else {
		                          
					if(rs_tOracleInput_21.getObject(1) != null) {
						row28.ID = rs_tOracleInput_21.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_21 < 2) {
								row28.NOMBRE = null;
							} else {
	                         		
        	row28.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_21, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_21 < 3) {
								row28.SIGLA = null;
							} else {
	                         		
        	row28.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_21, 3, false);
		                    }
					




 



/**
 * [tOracleInput_21 begin ] stop
 */
	
	/**
	 * [tOracleInput_21 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

 


	tos_count_tOracleInput_21++;

/**
 * [tOracleInput_21 main ] stop
 */
	
	/**
	 * [tOracleInput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

 



/**
 * [tOracleInput_21 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row28 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row28"
						
						);
					}
					


			   
			   

					row28Struct row28_HashRow = new row28Struct();
		   	   	   
				
				row28_HashRow.ID = row28.ID;
				
				row28_HashRow.NOMBRE = row28.NOMBRE;
				
				row28_HashRow.SIGLA = row28.SIGLA;
				
			tHash_Lookup_row28.put(row28_HashRow);
			
            




 


	tos_count_tAdvancedHash_row28++;

/**
 * [tAdvancedHash_row28 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";
	
	

 



/**
 * [tAdvancedHash_row28 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row28 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";
	
	

 



/**
 * [tAdvancedHash_row28 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

 



/**
 * [tOracleInput_21 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_21 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

}
}finally{
	if (rs_tOracleInput_21 != null) {
		rs_tOracleInput_21.close();
	}
	if (stmt_tOracleInput_21 != null) {
		stmt_tOracleInput_21.close();
	}
}

globalMap.put("tOracleInput_21_NB_LINE",nb_line_tOracleInput_21);
 

ok_Hash.put("tOracleInput_21", true);
end_Hash.put("tOracleInput_21", System.currentTimeMillis());




/**
 * [tOracleInput_21 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row28 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";
	
	

tHash_Lookup_row28.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row28", true);
end_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());




/**
 * [tAdvancedHash_row28 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_21 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

 



/**
 * [tOracleInput_21 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row28 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";
	
	

 



/**
 * [tAdvancedHash_row28 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_21_SUBPROCESS_STATE", 1);
	}
	


public static class row30Struct implements routines.system.IPersistableComparableLookupRow<row30Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 1024;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row30Struct other = (row30Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row30Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            
	}

	public void copyKeysDataTo(row30Struct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row30Struct row30 = new row30Struct();




	
	/**
	 * [tAdvancedHash_row30 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row30", false);
		start_Hash.put("tAdvancedHash_row30", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row30";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tAdvancedHash_row30 = 0;
		

			   		// connection name:row30
			   		// source node:tOracleInput_14 - inputs:(after_tOracleInput_8) outputs:(row30,row30) | target node:tAdvancedHash_row30 - inputs:(row30) outputs:()
			   		// linked node: tMap_7 - inputs:(row23,row24,row25,row26,row28,row30,row31) outputs:(AGE_SCITAS)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row30 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct> tHash_Lookup_row30 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row30Struct>getLookup(matchingModeEnum_row30);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row30", tHash_Lookup_row30);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row30 begin ] stop
 */



	
	/**
	 * [tOracleInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_14", false);
		start_Hash.put("tOracleInput_14", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_14";
	
	
		int tos_count_tOracleInput_14 = 0;
		
	


	
		    int nb_line_tOracleInput_14 = 0;
		    java.sql.Connection conn_tOracleInput_14 = null;
				conn_tOracleInput_14 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_14 = false;
				boolean isConnectionWrapped_tOracleInput_14 = !(conn_tOracleInput_14 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_14.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_14 = null;
                if (isConnectionWrapped_tOracleInput_14) {
					unwrappedOraConn_tOracleInput_14 = conn_tOracleInput_14.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_14 != null) {
                        isTimeZoneNull_tOracleInput_14 = (unwrappedOraConn_tOracleInput_14.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_14 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_14).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_14) {
					java.sql.Statement stmtGetTZ_tOracleInput_14 = conn_tOracleInput_14.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_14 = stmtGetTZ_tOracleInput_14.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_14 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_14.next()) {
						sessionTimezone_tOracleInput_14 = rsGetTZ_tOracleInput_14.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_14 && unwrappedOraConn_tOracleInput_14 != null) {
                        unwrappedOraConn_tOracleInput_14.setSessionTimeZone(sessionTimezone_tOracleInput_14);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_14).setSessionTimeZone(sessionTimezone_tOracleInput_14);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_14 = conn_tOracleInput_14.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_14.setFetchSize(1000);


		    String dbquery_tOracleInput_14 = "select ID, NOMBRE from AGE_TSCITAS";
		    

		    globalMap.put("tOracleInput_14_QUERY",dbquery_tOracleInput_14);

		    java.sql.ResultSet rs_tOracleInput_14 = null;

		    try {
		    	rs_tOracleInput_14 = stmt_tOracleInput_14.executeQuery(dbquery_tOracleInput_14);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_14 = rs_tOracleInput_14.getMetaData();
		    	int colQtyInRs_tOracleInput_14 = rsmd_tOracleInput_14.getColumnCount();

		    String tmpContent_tOracleInput_14 = null;
		    
		    
		    while (rs_tOracleInput_14.next()) {
		        nb_line_tOracleInput_14++;
		        
							if(colQtyInRs_tOracleInput_14 < 1) {
								row30.ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(1) != null) {
						row30.ID = rs_tOracleInput_14.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 2) {
								row30.NOMBRE = null;
							} else {
	                         		
        	row30.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 2, false);
		                    }
					




 



/**
 * [tOracleInput_14 begin ] stop
 */
	
	/**
	 * [tOracleInput_14 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 


	tos_count_tOracleInput_14++;

/**
 * [tOracleInput_14 main ] stop
 */
	
	/**
	 * [tOracleInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row30 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row30"
						
						);
					}
					


			   
			   

					row30Struct row30_HashRow = new row30Struct();
		   	   	   
				
				row30_HashRow.ID = row30.ID;
				
				row30_HashRow.NOMBRE = row30.NOMBRE;
				
			tHash_Lookup_row30.put(row30_HashRow);
			
            




 


	tos_count_tAdvancedHash_row30++;

/**
 * [tAdvancedHash_row30 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";
	
	

 



/**
 * [tAdvancedHash_row30 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row30 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";
	
	

 



/**
 * [tAdvancedHash_row30 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_14 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

}
}finally{
	if (rs_tOracleInput_14 != null) {
		rs_tOracleInput_14.close();
	}
	if (stmt_tOracleInput_14 != null) {
		stmt_tOracleInput_14.close();
	}
}

globalMap.put("tOracleInput_14_NB_LINE",nb_line_tOracleInput_14);
 

ok_Hash.put("tOracleInput_14", true);
end_Hash.put("tOracleInput_14", System.currentTimeMillis());




/**
 * [tOracleInput_14 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row30 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";
	
	

tHash_Lookup_row30.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row30", true);
end_Hash.put("tAdvancedHash_row30", System.currentTimeMillis());




/**
 * [tAdvancedHash_row30 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_14 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row30 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";
	
	

 



/**
 * [tAdvancedHash_row30 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_14_SUBPROCESS_STATE", 1);
	}
	


public static class row31Struct implements routines.system.IPersistableComparableLookupRow<row31Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 1024;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row31Struct other = (row31Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row31Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            
	}

	public void copyKeysDataTo(row31Struct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row31Struct row31 = new row31Struct();




	
	/**
	 * [tAdvancedHash_row31 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row31", false);
		start_Hash.put("tAdvancedHash_row31", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row31";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tAdvancedHash_row31 = 0;
		

			   		// connection name:row31
			   		// source node:tOracleInput_15 - inputs:(after_tOracleInput_8) outputs:(row31,row31) | target node:tAdvancedHash_row31 - inputs:(row31) outputs:()
			   		// linked node: tMap_7 - inputs:(row23,row24,row25,row26,row28,row30,row31) outputs:(AGE_SCITAS)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row31 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct> tHash_Lookup_row31 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row31Struct>getLookup(matchingModeEnum_row31);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row31", tHash_Lookup_row31);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row31 begin ] stop
 */



	
	/**
	 * [tOracleInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_15", false);
		start_Hash.put("tOracleInput_15", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_15";
	
	
		int tos_count_tOracleInput_15 = 0;
		
	


	
		    int nb_line_tOracleInput_15 = 0;
		    java.sql.Connection conn_tOracleInput_15 = null;
				conn_tOracleInput_15 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_15 = false;
				boolean isConnectionWrapped_tOracleInput_15 = !(conn_tOracleInput_15 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_15.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_15 = null;
                if (isConnectionWrapped_tOracleInput_15) {
					unwrappedOraConn_tOracleInput_15 = conn_tOracleInput_15.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_15 != null) {
                        isTimeZoneNull_tOracleInput_15 = (unwrappedOraConn_tOracleInput_15.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_15 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_15).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_15) {
					java.sql.Statement stmtGetTZ_tOracleInput_15 = conn_tOracleInput_15.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_15 = stmtGetTZ_tOracleInput_15.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_15 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_15.next()) {
						sessionTimezone_tOracleInput_15 = rsGetTZ_tOracleInput_15.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_15 && unwrappedOraConn_tOracleInput_15 != null) {
                        unwrappedOraConn_tOracleInput_15.setSessionTimeZone(sessionTimezone_tOracleInput_15);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_15).setSessionTimeZone(sessionTimezone_tOracleInput_15);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_15 = conn_tOracleInput_15.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_15.setFetchSize(1000);


		    String dbquery_tOracleInput_15 = "SELECT \n  SALUDSIS.AGE_TASIGNACIONES.\"ID\", \n  SALUDSIS.AGE_TASIGNACIONES.NOMBRE\nFROM SALUDSIS.AGE_TASIGNACIONES ";
		    

		    globalMap.put("tOracleInput_15_QUERY",dbquery_tOracleInput_15);

		    java.sql.ResultSet rs_tOracleInput_15 = null;

		    try {
		    	rs_tOracleInput_15 = stmt_tOracleInput_15.executeQuery(dbquery_tOracleInput_15);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_15 = rs_tOracleInput_15.getMetaData();
		    	int colQtyInRs_tOracleInput_15 = rsmd_tOracleInput_15.getColumnCount();

		    String tmpContent_tOracleInput_15 = null;
		    
		    
		    while (rs_tOracleInput_15.next()) {
		        nb_line_tOracleInput_15++;
		        
							if(colQtyInRs_tOracleInput_15 < 1) {
								row31.ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(1) != null) {
						row31.ID = rs_tOracleInput_15.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 2) {
								row31.NOMBRE = null;
							} else {
	                         		
        	row31.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 2, false);
		                    }
					




 



/**
 * [tOracleInput_15 begin ] stop
 */
	
	/**
	 * [tOracleInput_15 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 


	tos_count_tOracleInput_15++;

/**
 * [tOracleInput_15 main ] stop
 */
	
	/**
	 * [tOracleInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row31 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row31"
						
						);
					}
					


			   
			   

					row31Struct row31_HashRow = new row31Struct();
		   	   	   
				
				row31_HashRow.ID = row31.ID;
				
				row31_HashRow.NOMBRE = row31.NOMBRE;
				
			tHash_Lookup_row31.put(row31_HashRow);
			
            




 


	tos_count_tAdvancedHash_row31++;

/**
 * [tAdvancedHash_row31 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";
	
	

 



/**
 * [tAdvancedHash_row31 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row31 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";
	
	

 



/**
 * [tAdvancedHash_row31 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_15 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

}
}finally{
	if (rs_tOracleInput_15 != null) {
		rs_tOracleInput_15.close();
	}
	if (stmt_tOracleInput_15 != null) {
		stmt_tOracleInput_15.close();
	}
}

globalMap.put("tOracleInput_15_NB_LINE",nb_line_tOracleInput_15);
 

ok_Hash.put("tOracleInput_15", true);
end_Hash.put("tOracleInput_15", System.currentTimeMillis());




/**
 * [tOracleInput_15 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row31 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";
	
	

tHash_Lookup_row31.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row31", true);
end_Hash.put("tAdvancedHash_row31", System.currentTimeMillis());




/**
 * [tAdvancedHash_row31 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_15 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row31 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";
	
	

 



/**
 * [tAdvancedHash_row31 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_15_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row27Struct row27 = new row27Struct();
row27Struct row11 = row27;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tRunJob_1 = 0;
		
class DealChildJobLibrary_tRunJob_1 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new java.io.ObjectInputStream(new java.io.FileInputStream(crcMapPath)) {
				@Override
				public Class<?> resolveClass(java.io.ObjectStreamClass desc) throws java.io.IOException, ClassNotFoundException {
					if(!"java.util.HashMap".equals(desc.getName())) {
						throw new java.io.InvalidClassException("Unauthorized deserialization attempt : " + desc.getName());
					}
					return super.resolveClass(desc);
				}
			};
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

	class JVMArgumentHelper_tRunJob_1 {
		
		
		
		private void addClasspath(java.util.List<String> target_argument_list, String job_origin_classpath) {
			
			String extra_classpath = null;
			String path_separator = System.getProperty("path.separator");
			if (path_separator != null && path_separator.length() > 1) {
				throw new RuntimeException("path separator should be single character");
			}
			
			if(extra_classpath!=null && !extra_classpath.isEmpty()) {
				if(extra_classpath.endsWith(path_separator)) {
					target_argument_list.add(extra_classpath+job_origin_classpath);
				} else if(extra_classpath.contains(path_separator)) {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				} else if(extra_classpath.endsWith(":")) {
					target_argument_list.add(extra_classpath.replace(":", path_separator)+job_origin_classpath);
				} else if(extra_classpath.endsWith(";")) {
					target_argument_list.add(extra_classpath.replace(";", path_separator)+job_origin_classpath);
				} else if(extra_classpath.contains(":")) {
					target_argument_list.add(concatStr(extra_classpath.replace(":", path_separator), path_separator, job_origin_classpath));
				} else if(extra_classpath.contains(";")) {
					target_argument_list.add(concatStr(extra_classpath.replace(";", path_separator), path_separator, job_origin_classpath));
				} else {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				}
				return;
			}
			
			target_argument_list.add(job_origin_classpath);
		}
		
		private String concatStr(String s1, String s2, String s3) {
			java.lang.StringBuilder strB = new java.lang.StringBuilder();
			strB.append(s1).append(s2).append(s3);
			return strB.toString();
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			addArgumentsTo(target_argument_list, argument_from_child, false);
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child, boolean isCP) {
			if(isCP) {
				addClasspath(target_argument_list, argument_from_child);
				return;
			}
		
			
			
			
			target_argument_list.add(argument_from_child);
			
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_1 jvm_argument_helper_tRunJob_1 = new JVMArgumentHelper_tRunJob_1();
	
	String audit_jar_path_tRunJob_1 = System.getProperty("classpath.extended");
	

 



/**
 * [tRunJob_1 begin ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.LOGS_ERROR)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                        synchronized (multiThreadLockWrite) {
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("moment");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("root_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("father_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("project");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("job");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("context");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("priority");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("type");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("origin");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("message");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("code");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row27.type = lcm.getType();
		row27.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row27.priority = lcm.getPriority();
		row27.message = lcm.getMessage();
		row27.code = lcm.getCode();
		
		row27.moment = java.util.Calendar.getInstance().getTime();
	
    	row27.pid = pid;
		row27.root_pid = rootPid;
		row27.father_pid = fatherPid;
	
    	row27.project = projectName;
    	row27.job = jobName;
    	row27.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row27"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row27.moment != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row27.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row27.pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row27.pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row27.root_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row27.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row27.father_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row27.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row27.project != null) {
                        sb_tFileOutputDelimited_1.append(
                            row27.project
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row27.job != null) {
                        sb_tFileOutputDelimited_1.append(
                            row27.job
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row27.context != null) {
                        sb_tFileOutputDelimited_1.append(
                            row27.context
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row27.priority != null) {
                        sb_tFileOutputDelimited_1.append(
                            row27.priority
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row27.type != null) {
                        sb_tFileOutputDelimited_1.append(
                            row27.type
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row27.origin != null) {
                        sb_tFileOutputDelimited_1.append(
                            row27.origin
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row27.message != null) {
                        sb_tFileOutputDelimited_1.append(
                            row27.message
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row27.code != null) {
                        sb_tFileOutputDelimited_1.append(
                            row27.code
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

                    }



 
     row11 = row27;


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */

	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
			
			String osName_tRunJob_1 = System.getProperty("os.name");
			if (osName_tRunJob_1 != null && osName_tRunJob_1.toLowerCase(java.util.Locale.US).startsWith("win")){
				
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
              					String classpath_tRunJob_1_5 = ".;../lib/routines.jar;../lib/log4j-slf4j-impl-2.17.1.jar;../lib/log4j-api-2.17.1.jar;../lib/log4j-core-2.17.1.jar;../lib/activation-1.1.jar;../lib/jakarta.mail-1.6.7.jar;../lib/xpathutil-1.0.0.jar;../lib/slf4j-api-1.7.34.jar;../lib/crypto-utils-7.1.16.jar;../lib/jboss-marshalling-2.0.12.Final.jar;../lib/dom4j-2.1.3.jar;../lib/jaxen-1.1.6.jar;mail_1_3.jar;";
              					
              					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
	        					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5), true);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "rep_inicio.mail_1_3.Mail");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
		      					String classpath_tRunJob_1_5 = ".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/log4j-slf4j-impl-2.17.1.jar:$ROOT_PATH/../lib/log4j-api-2.17.1.jar:$ROOT_PATH/../lib/log4j-core-2.17.1.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/jakarta.mail-1.6.7.jar:$ROOT_PATH/../lib/xpathutil-1.0.0.jar:$ROOT_PATH/../lib/slf4j-api-1.7.34.jar:$ROOT_PATH/../lib/crypto-utils-7.1.16.jar:$ROOT_PATH/../lib/jboss-marshalling-2.0.12.Final.jar:$ROOT_PATH/../lib/dom4j-2.1.3.jar:$ROOT_PATH/../lib/jaxen-1.1.6.jar:$ROOT_PATH/mail_1_3.jar:";
		      					
		      					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5).replace("$ROOT_PATH",System.getProperty("user.dir")), true);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "rep_inicio.mail_1_3.Mail");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "$@");
		      				
			}

			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = row11.moment;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param moment=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param moment=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param moment=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("moment", obj_tRunJob_1);
	
		obj_tRunJob_1 = row11.project;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param project=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param project=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param project=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("project", obj_tRunJob_1);
	
		obj_tRunJob_1 = row11.job;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param job=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param job=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param job=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("job", obj_tRunJob_1);
	
		obj_tRunJob_1 = row11.context;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param context=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param context=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param context=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("context", obj_tRunJob_1);
	
		obj_tRunJob_1 = row11.origin;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param origin=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param origin=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param origin=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("origin", obj_tRunJob_1);
	
		obj_tRunJob_1 = row11.message;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param message=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param message=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param message=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("message", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_destino", obj_tRunJob_1);
	
	
				class ConsoleHelper_tRunJob_1 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_1 consoleHelper_tRunJob_1 = new ConsoleHelper_tRunJob_1();

		Runtime runtime_tRunJob_1 = Runtime.getRuntime();
		Process ps_tRunJob_1 = null;
		
		//0 indicates normal termination
        int result_tRunJob_1;
        StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
        try {
            ps_tRunJob_1 = runtime_tRunJob_1.exec((String[])paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

            Thread normal_tRunJob_1 = consoleHelper_tRunJob_1.getNormalThread(ps_tRunJob_1);
            normal_tRunJob_1.start();

            Thread error_tRunJob_1 = consoleHelper_tRunJob_1.getErrorThread(ps_tRunJob_1, errorMsg_tRunJob_1);
            error_tRunJob_1.start();

            result_tRunJob_1 = ps_tRunJob_1.waitFor();
            normal_tRunJob_1.join();
            error_tRunJob_1.join();
        } catch (ThreadDeath tde) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",tde.getMessage());
            ps_tRunJob_1.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_1_CHILD_RETURN_CODE",result_tRunJob_1);
		if(result_tRunJob_1 != 0){
   			globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_1.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_1 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_1.toString());
			
  		}

		

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tJava_3Process(globalMap);



/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */

	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */

	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
	
 



/**
 * [tRunJob_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";
	
	
		int tos_count_tJava_3 = 0;
		


context.ESTADO_EXEC = "Fail";
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row75Struct implements routines.system.IPersistableRow<row75Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return true;
				}
				public Integer HostLength(){
				    return 13;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return true;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return true;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 16;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 12;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 12;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 3;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Host == null) ? 0 : this.Host.hashCode());
					
						result = prime * result + ((this.Port == null) ? 0 : this.Port.hashCode());
					
						result = prime * result + ((this.Sid == null) ? 0 : this.Sid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row75Struct other = (row75Struct) obj;
		
						if (this.Host == null) {
							if (other.Host != null)
								return false;
						
						} else if (!this.Host.equals(other.Host))
						
							return false;
					
						if (this.Port == null) {
							if (other.Port != null)
								return false;
						
						} else if (!this.Port.equals(other.Port))
						
							return false;
					
						if (this.Sid == null) {
							if (other.Sid != null)
								return false;
						
						} else if (!this.Sid.equals(other.Sid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row75Struct other) {

		other.Host = this.Host;
	            other.Port = this.Port;
	            other.Sid = this.Sid;
	            other.ServiceName = this.ServiceName;
	            other.Schema = this.Schema;
	            other.User = this.User;
	            other.Password = this.Password;
	            other.SMTPHost = this.SMTPHost;
	            other.SMTPPort = this.SMTPPort;
	            other.UsernameMail = this.UsernameMail;
	            other.PasswordMail = this.PasswordMail;
	            
	}

	public void copyKeysDataTo(row75Struct other) {

		other.Host = this.Host;
	            	other.Port = this.Port;
	            	other.Sid = this.Sid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row75Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Host, other.Host);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Port, other.Port);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Sid, other.Sid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row75Struct row75 = new row75Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row75");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class NameSpaceTool_tFileInputXML_1 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_1{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getStringValue().isEmpty();
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	throw(e);
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_1 = true;
org.dom4j.Document doc_tFileInputXML_1 = null;
java.io.Closeable toClose_tFileInputXML_1 = null;
try{
	if(filename_tFileInputXML_1 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream)filename_tFileInputXML_1;
		toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(inputStream_tFileInputXML_1);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_1)),"UTF-8");
		toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
		org.xml.sax.InputSource in_tFileInputXML_1= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_1);
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(in_tFileInputXML_1);
	}
}catch(java.lang.Exception e){
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	throw(e);
} finally {
	if(toClose_tFileInputXML_1!=null) {
		toClose_tFileInputXML_1.close();
	}
}
if(isValidFile_tFileInputXML_1){
NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1.createXPath(nsTool_tFileInputXML_1.addDefaultNSPrefix("/connectionStrings"));  
x_tFileInputXML_1.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_1.selectNodes(doc_tFileInputXML_1);	
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
String str_tFileInputXML_1 = "";
org.dom4j.Node node_tFileInputXML_1 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_1=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_1{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Host","/connectionStrings"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Port","/connectionStrings"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Sid","/connectionStrings"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("ServiceName","/connectionStrings"));
	xpath_3.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(3,xpath_3);
			
	org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Schema","/connectionStrings"));
	xpath_4.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(4,xpath_4);
			
	org.dom4j.XPath xpath_5 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("User","/connectionStrings"));
	xpath_5.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(5,xpath_5);
			
	org.dom4j.XPath xpath_6 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Password","/connectionStrings"));
	xpath_6.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(6,xpath_6);
			
	org.dom4j.XPath xpath_7 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPHost","/connectionStrings"));
	xpath_7.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(7,xpath_7);
			
	org.dom4j.XPath xpath_8 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPPort","/connectionStrings"));
	xpath_8.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(8,xpath_8);
			
	org.dom4j.XPath xpath_9 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("UsernameMail","/connectionStrings"));
	xpath_9.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(9,xpath_9);
			
	org.dom4j.XPath xpath_10 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PasswordMail","/connectionStrings"));
	xpath_10.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(10,xpath_10);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_1 xPathUtil_tFileInputXML_1 = new XPathUtil_tFileInputXML_1();
	xPathUtil_tFileInputXML_1.initXPaths(xpaths_tFileInputXML_1, nsTool_tFileInputXML_1, xmlNameSpaceMap_tFileInputXML_1);
for (org.dom4j.Node temp_tFileInputXML_1: nodeList_tFileInputXML_1) {
	if (nb_line_tFileInputXML_1>=50) {
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row75 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row75 = new row75Struct();
	try{
    Object obj0_tFileInputXML_1 = xpaths_tFileInputXML_1.get(0).evaluate(temp_tFileInputXML_1);
    if(obj0_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj0_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_1 instanceof String || obj0_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj0_tFileInputXML_1);
    } else if(obj0_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.Host =null;
									}else{
		row75.Host = str_tFileInputXML_1;
	}
    Object obj1_tFileInputXML_1 = xpaths_tFileInputXML_1.get(1).evaluate(temp_tFileInputXML_1);
    if(obj1_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj1_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj1_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_1 instanceof String || obj1_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj1_tFileInputXML_1);
    } else if(obj1_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.Port =null;
									}else{
		row75.Port = str_tFileInputXML_1;
	}
    Object obj2_tFileInputXML_1 = xpaths_tFileInputXML_1.get(2).evaluate(temp_tFileInputXML_1);
    if(obj2_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj2_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj2_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_1 instanceof String || obj2_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj2_tFileInputXML_1);
    } else if(obj2_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.Sid =null;
									}else{
		row75.Sid = str_tFileInputXML_1;
	}
    Object obj3_tFileInputXML_1 = xpaths_tFileInputXML_1.get(3).evaluate(temp_tFileInputXML_1);
    if(obj3_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj3_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj3_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj3_tFileInputXML_1 instanceof String || obj3_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj3_tFileInputXML_1);
    } else if(obj3_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj3_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.ServiceName =null;
									}else{
		row75.ServiceName = str_tFileInputXML_1;
	}
    Object obj4_tFileInputXML_1 = xpaths_tFileInputXML_1.get(4).evaluate(temp_tFileInputXML_1);
    if(obj4_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj4_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj4_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj4_tFileInputXML_1 instanceof String || obj4_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj4_tFileInputXML_1);
    } else if(obj4_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj4_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.Schema =null;
									}else{
		row75.Schema = str_tFileInputXML_1;
	}
    Object obj5_tFileInputXML_1 = xpaths_tFileInputXML_1.get(5).evaluate(temp_tFileInputXML_1);
    if(obj5_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj5_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj5_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj5_tFileInputXML_1 instanceof String || obj5_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj5_tFileInputXML_1);
    } else if(obj5_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj5_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.User =null;
									}else{
		row75.User = str_tFileInputXML_1;
	}
    Object obj6_tFileInputXML_1 = xpaths_tFileInputXML_1.get(6).evaluate(temp_tFileInputXML_1);
    if(obj6_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj6_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj6_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj6_tFileInputXML_1 instanceof String || obj6_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj6_tFileInputXML_1);
    } else if(obj6_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj6_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.Password =null;
									}else{
		row75.Password = str_tFileInputXML_1;
	}
    Object obj7_tFileInputXML_1 = xpaths_tFileInputXML_1.get(7).evaluate(temp_tFileInputXML_1);
    if(obj7_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj7_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj7_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj7_tFileInputXML_1 instanceof String || obj7_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj7_tFileInputXML_1);
    } else if(obj7_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj7_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.SMTPHost =null;
									}else{
		row75.SMTPHost = str_tFileInputXML_1;
	}
    Object obj8_tFileInputXML_1 = xpaths_tFileInputXML_1.get(8).evaluate(temp_tFileInputXML_1);
    if(obj8_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj8_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj8_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj8_tFileInputXML_1 instanceof String || obj8_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj8_tFileInputXML_1);
    } else if(obj8_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj8_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.SMTPPort =null;
									}else{
		row75.SMTPPort = str_tFileInputXML_1;
	}
    Object obj9_tFileInputXML_1 = xpaths_tFileInputXML_1.get(9).evaluate(temp_tFileInputXML_1);
    if(obj9_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj9_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj9_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj9_tFileInputXML_1 instanceof String || obj9_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj9_tFileInputXML_1);
    } else if(obj9_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj9_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.UsernameMail =null;
									}else{
		row75.UsernameMail = str_tFileInputXML_1;
	}
    Object obj10_tFileInputXML_1 = xpaths_tFileInputXML_1.get(10).evaluate(temp_tFileInputXML_1);
    if(obj10_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj10_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj10_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj10_tFileInputXML_1 instanceof String || obj10_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj10_tFileInputXML_1);
    } else if(obj10_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj10_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.PasswordMail =null;
									}else{
		row75.PasswordMail = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
            throw(e);
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row75"
if(row75 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row75"
						
						);
					}
					

    context.db_origen_Server = row75.Host;
context.db_origen_Port = row75.Port;
//context.db_origen_Sid = row75.Sid;
context.db_origen_Login = row75.User;
context.db_origen_Password = row75.Password;
context.db_origen_ServiceName = row75.ServiceName;
context.db_origen_Schema = row75.Schema;

//System.out.println(context.db_origen_ServiceName);

System.out.println("+ Agendamiento ");
System.out.println("  - Start:" + TalendDate.getDate("DD/MM/YYYY") + " "  + TalendDate.getDate("HH:mm:ss") );


    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row75"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


}
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row75");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputXML_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tFileInputXML_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.db_origen_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.db_origen_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.db_origen_Server);
        globalMap.put("port_" + "tOracleConnection_1",context.db_origen_Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.db_origen_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.db_origen_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.db_origen_Login);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());




/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row77Struct implements routines.system.IPersistableRow<row77Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return true;
				}
				public Integer HostLength(){
				    return 13;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return true;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return true;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 16;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 12;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 12;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 12;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Host == null) ? 0 : this.Host.hashCode());
					
						result = prime * result + ((this.Port == null) ? 0 : this.Port.hashCode());
					
						result = prime * result + ((this.Sid == null) ? 0 : this.Sid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row77Struct other = (row77Struct) obj;
		
						if (this.Host == null) {
							if (other.Host != null)
								return false;
						
						} else if (!this.Host.equals(other.Host))
						
							return false;
					
						if (this.Port == null) {
							if (other.Port != null)
								return false;
						
						} else if (!this.Port.equals(other.Port))
						
							return false;
					
						if (this.Sid == null) {
							if (other.Sid != null)
								return false;
						
						} else if (!this.Sid.equals(other.Sid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row77Struct other) {

		other.Host = this.Host;
	            other.Port = this.Port;
	            other.Sid = this.Sid;
	            other.ServiceName = this.ServiceName;
	            other.Schema = this.Schema;
	            other.User = this.User;
	            other.Password = this.Password;
	            
	}

	public void copyKeysDataTo(row77Struct other) {

		other.Host = this.Host;
	            	other.Port = this.Port;
	            	other.Sid = this.Sid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row77Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Host, other.Host);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Port, other.Port);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Sid, other.Sid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row77Struct row77 = new row77Struct();




	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row77");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tFileInputXML_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_2", false);
		start_Hash.put("tFileInputXML_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_2";
	
	
		int tos_count_tFileInputXML_2 = 0;
		

	

int nb_line_tFileInputXML_2 = 0;

	String os_tFileInputXML_2 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_2=false;
	if(os_tFileInputXML_2.indexOf("windows") > -1 || os_tFileInputXML_2.indexOf("nt") > -1){
		isWindows_tFileInputXML_2=true;
	}
class NameSpaceTool_tFileInputXML_2 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_2{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getStringValue().isEmpty();
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_2 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_2 = null;
try {
	filename_tFileInputXML_2 = context.BODEGA;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
	
	throw(e);
	
}
if(filename_tFileInputXML_2 != null && filename_tFileInputXML_2 instanceof String && filename_tFileInputXML_2.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_2){
		filename_tFileInputXML_2 = filename_tFileInputXML_2.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_2 = true;
org.dom4j.Document doc_tFileInputXML_2 = null;
java.io.Closeable toClose_tFileInputXML_2 = null;
try{
	if(filename_tFileInputXML_2 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_2 = (java.io.InputStream)filename_tFileInputXML_2;
		toClose_tFileInputXML_2 = inputStream_tFileInputXML_2;
		doc_tFileInputXML_2 = reader_tFileInputXML_2.read(inputStream_tFileInputXML_2);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_2 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_2)),"UTF-8");
		toClose_tFileInputXML_2 = unicodeReader_tFileInputXML_2;
		org.xml.sax.InputSource in_tFileInputXML_2= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_2);
		doc_tFileInputXML_2 = reader_tFileInputXML_2.read(in_tFileInputXML_2);
	}
}catch(java.lang.Exception e){
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
	throw(e);
} finally {
	if(toClose_tFileInputXML_2!=null) {
		toClose_tFileInputXML_2.close();
	}
}
if(isValidFile_tFileInputXML_2){
NameSpaceTool_tFileInputXML_2 nsTool_tFileInputXML_2 = new NameSpaceTool_tFileInputXML_2();
nsTool_tFileInputXML_2.countNSMap(doc_tFileInputXML_2.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_2 = nsTool_tFileInputXML_2.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_2 = doc_tFileInputXML_2.createXPath(nsTool_tFileInputXML_2.addDefaultNSPrefix("/connectionStrings"));  
x_tFileInputXML_2.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_2); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_2.selectNodes(doc_tFileInputXML_2);	
XML_API_tFileInputXML_2 xml_api_tFileInputXML_2 = new XML_API_tFileInputXML_2();
String str_tFileInputXML_2 = "";
org.dom4j.Node node_tFileInputXML_2 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_2=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_2{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_2 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Host","/connectionStrings"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Port","/connectionStrings"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Sid","/connectionStrings"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("ServiceName","/connectionStrings"));
	xpath_3.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(3,xpath_3);
			
	org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Schema","/connectionStrings"));
	xpath_4.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(4,xpath_4);
			
	org.dom4j.XPath xpath_5 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("User","/connectionStrings"));
	xpath_5.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(5,xpath_5);
			
	org.dom4j.XPath xpath_6 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Password","/connectionStrings"));
	xpath_6.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(6,xpath_6);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_2 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_2 xPathUtil_tFileInputXML_2 = new XPathUtil_tFileInputXML_2();
	xPathUtil_tFileInputXML_2.initXPaths(xpaths_tFileInputXML_2, nsTool_tFileInputXML_2, xmlNameSpaceMap_tFileInputXML_2);
for (org.dom4j.Node temp_tFileInputXML_2: nodeList_tFileInputXML_2) {
	if (nb_line_tFileInputXML_2>=50) {
	
		break;
	}
		nb_line_tFileInputXML_2++;
		
	row77 = null;			
	boolean whetherReject_tFileInputXML_2 = false;
	row77 = new row77Struct();
	try{
    Object obj0_tFileInputXML_2 = xpaths_tFileInputXML_2.get(0).evaluate(temp_tFileInputXML_2);
    if(obj0_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj0_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj0_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_2 instanceof String || obj0_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj0_tFileInputXML_2);
    } else if(obj0_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row77.Host =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row77.Host ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row77.Host =null;
									}else{
		row77.Host = str_tFileInputXML_2;
	}
    Object obj1_tFileInputXML_2 = xpaths_tFileInputXML_2.get(1).evaluate(temp_tFileInputXML_2);
    if(obj1_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj1_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj1_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_2 instanceof String || obj1_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj1_tFileInputXML_2);
    } else if(obj1_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row77.Port =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row77.Port ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row77.Port =null;
									}else{
		row77.Port = str_tFileInputXML_2;
	}
    Object obj2_tFileInputXML_2 = xpaths_tFileInputXML_2.get(2).evaluate(temp_tFileInputXML_2);
    if(obj2_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj2_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj2_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_2 instanceof String || obj2_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj2_tFileInputXML_2);
    } else if(obj2_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row77.Sid =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row77.Sid ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row77.Sid =null;
									}else{
		row77.Sid = str_tFileInputXML_2;
	}
    Object obj3_tFileInputXML_2 = xpaths_tFileInputXML_2.get(3).evaluate(temp_tFileInputXML_2);
    if(obj3_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj3_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj3_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj3_tFileInputXML_2 instanceof String || obj3_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj3_tFileInputXML_2);
    } else if(obj3_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj3_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row77.ServiceName =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row77.ServiceName ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row77.ServiceName =null;
									}else{
		row77.ServiceName = str_tFileInputXML_2;
	}
    Object obj4_tFileInputXML_2 = xpaths_tFileInputXML_2.get(4).evaluate(temp_tFileInputXML_2);
    if(obj4_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj4_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj4_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj4_tFileInputXML_2 instanceof String || obj4_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj4_tFileInputXML_2);
    } else if(obj4_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj4_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row77.Schema =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row77.Schema ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row77.Schema =null;
									}else{
		row77.Schema = str_tFileInputXML_2;
	}
    Object obj5_tFileInputXML_2 = xpaths_tFileInputXML_2.get(5).evaluate(temp_tFileInputXML_2);
    if(obj5_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj5_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj5_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj5_tFileInputXML_2 instanceof String || obj5_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj5_tFileInputXML_2);
    } else if(obj5_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj5_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row77.User =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row77.User ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row77.User =null;
									}else{
		row77.User = str_tFileInputXML_2;
	}
    Object obj6_tFileInputXML_2 = xpaths_tFileInputXML_2.get(6).evaluate(temp_tFileInputXML_2);
    if(obj6_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj6_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj6_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj6_tFileInputXML_2 instanceof String || obj6_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj6_tFileInputXML_2);
    } else if(obj6_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj6_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row77.Password =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row77.Password ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row77.Password =null;
									}else{
		row77.Password = str_tFileInputXML_2;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_2 = true;
            throw(e);
    }
			
			

 



/**
 * [tFileInputXML_2 begin ] stop
 */
	
	/**
	 * [tFileInputXML_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 


	tos_count_tFileInputXML_2++;

/**
 * [tFileInputXML_2 main ] stop
 */
	
	/**
	 * [tFileInputXML_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_begin ] stop
 */
// Start of branch "row77"
if(row77 != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row77"
						
						);
					}
					

    context.db_destino_Server = row77.Host;
context.db_destino_Port = row77.Port;
//context.db_destino_Sid = row77.Sid;
context.db_destino_Login = row77.User;
context.db_destino_Password = row77.Password;
context.db_destino_ServiceName = row77.ServiceName;
context.db_destino_Schema = row77.Schema;


//System.out.println(context.db_destino_ServiceName);


    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */

} // End of branch "row77"




	
	/**
	 * [tFileInputXML_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	


}
	}
	globalMap.put("tFileInputXML_2_NB_LINE",nb_line_tFileInputXML_2);

	

 

ok_Hash.put("tFileInputXML_2", true);
end_Hash.put("tFileInputXML_2", System.currentTimeMillis());




/**
 * [tFileInputXML_2 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row77");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tOracleConnection_2Process(globalMap);



/**
 * [tJavaRow_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_2", false);
		start_Hash.put("tOracleConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_2";
	
	
		int tos_count_tOracleConnection_2 = 0;
		
	

	
        String url_tOracleConnection_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_2", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_2 = context.db_destino_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_2 = context.db_destino_Password; 
		String dbPwd_tOracleConnection_2 = decryptedPassword_tOracleConnection_2;
	
	
	java.sql.Connection conn_tOracleConnection_2 = null;
	
		
			String driverClass_tOracleConnection_2 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_2 = java.lang.Class.forName(driverClass_tOracleConnection_2);
			globalMap.put("driverClass_tOracleConnection_2", driverClass_tOracleConnection_2);
		
			java.util.Properties atnParamsPrope_tOracleConnection_2 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_2.put("user",dbUser_tOracleConnection_2);
			    atnParamsPrope_tOracleConnection_2.put("password",dbPwd_tOracleConnection_2);
			if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                atnParamsPrope_tOracleConnection_2.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_2 = java.sql.DriverManager.getConnection(url_tOracleConnection_2, atnParamsPrope_tOracleConnection_2);

		globalMap.put("conn_tOracleConnection_2", conn_tOracleConnection_2);
	if (null != conn_tOracleConnection_2) {
		
			conn_tOracleConnection_2.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_2",context.db_destino_Server);
        globalMap.put("port_" + "tOracleConnection_2",context.db_destino_Port);
        globalMap.put("dbname_" + "tOracleConnection_2",context.db_destino_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_2", context.db_destino_Schema);
	globalMap.put("username_" + "tOracleConnection_2",context.db_destino_Login);
	globalMap.put("password_" + "tOracleConnection_2",dbPwd_tOracleConnection_2);

 



/**
 * [tOracleConnection_2 begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 


	tos_count_tOracleConnection_2++;

/**
 * [tOracleConnection_2 main ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_2 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 

ok_Hash.put("tOracleConnection_2", true);
end_Hash.put("tOracleConnection_2", System.currentTimeMillis());




/**
 * [tOracleConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tJava_2Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


context.HORA_FINAL = TalendDate.getDate("HH:mm:ss");
context.ESTADO_EXEC = "Success";


//System.out.println(context.ESTADO_EXEC);

System.out.println("  - End: " + TalendDate.getDate("DD/MM/YYYY") + " "  + TalendDate.getDate("HH:mm:ss") );
System.out.println("+ Job " + context.ESTADO_EXEC);

 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tFixedFlowInput_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tOracleClose_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tOracleClose_2Process(globalMap);



/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Agendamiento = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Agendamiento = new byte[0];

	
			    public String FECHA_EJECUCION;

				public String getFECHA_EJECUCION () {
					return this.FECHA_EJECUCION;
				}

				public Boolean FECHA_EJECUCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_EJECUCIONIsKey(){
				    return false;
				}
				public Integer FECHA_EJECUCIONLength(){
				    return null;
				}
				public Integer FECHA_EJECUCIONPrecision(){
				    return null;
				}
				public String FECHA_EJECUCIONDefault(){
				
					return null;
				
				}
				public String FECHA_EJECUCIONComment(){
				
				    return "";
				
				}
				public String FECHA_EJECUCIONPattern(){
				
					return "";
				
				}
				public String FECHA_EJECUCIONOriginalDbColumnName(){
				
					return "FECHA_EJECUCION";
				
				}

				
			    public String HORA_INICIO;

				public String getHORA_INICIO () {
					return this.HORA_INICIO;
				}

				public Boolean HORA_INICIOIsNullable(){
				    return true;
				}
				public Boolean HORA_INICIOIsKey(){
				    return false;
				}
				public Integer HORA_INICIOLength(){
				    return null;
				}
				public Integer HORA_INICIOPrecision(){
				    return null;
				}
				public String HORA_INICIODefault(){
				
					return null;
				
				}
				public String HORA_INICIOComment(){
				
				    return "";
				
				}
				public String HORA_INICIOPattern(){
				
					return "";
				
				}
				public String HORA_INICIOOriginalDbColumnName(){
				
					return "HORA_INICIO";
				
				}

				
			    public String HORA_FINAL;

				public String getHORA_FINAL () {
					return this.HORA_FINAL;
				}

				public Boolean HORA_FINALIsNullable(){
				    return true;
				}
				public Boolean HORA_FINALIsKey(){
				    return false;
				}
				public Integer HORA_FINALLength(){
				    return null;
				}
				public Integer HORA_FINALPrecision(){
				    return null;
				}
				public String HORA_FINALDefault(){
				
					return null;
				
				}
				public String HORA_FINALComment(){
				
				    return "";
				
				}
				public String HORA_FINALPattern(){
				
					return "";
				
				}
				public String HORA_FINALOriginalDbColumnName(){
				
					return "HORA_FINAL";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String JOBS;

				public String getJOBS () {
					return this.JOBS;
				}

				public Boolean JOBSIsNullable(){
				    return true;
				}
				public Boolean JOBSIsKey(){
				    return false;
				}
				public Integer JOBSLength(){
				    return null;
				}
				public Integer JOBSPrecision(){
				    return null;
				}
				public String JOBSDefault(){
				
					return null;
				
				}
				public String JOBSComment(){
				
				    return "";
				
				}
				public String JOBSPattern(){
				
					return "";
				
				}
				public String JOBSOriginalDbColumnName(){
				
					return "JOBS";
				
				}

				
			    public Integer tOracleInput_1_NB_LINE;

				public Integer getTOracleInput_1_NB_LINE () {
					return this.tOracleInput_1_NB_LINE;
				}

				public Boolean tOracleInput_1_NB_LINEIsNullable(){
				    return true;
				}
				public Boolean tOracleInput_1_NB_LINEIsKey(){
				    return false;
				}
				public Integer tOracleInput_1_NB_LINELength(){
				    return null;
				}
				public Integer tOracleInput_1_NB_LINEPrecision(){
				    return null;
				}
				public String tOracleInput_1_NB_LINEDefault(){
				
					return null;
				
				}
				public String tOracleInput_1_NB_LINEComment(){
				
				    return "";
				
				}
				public String tOracleInput_1_NB_LINEPattern(){
				
					return "";
				
				}
				public String tOracleInput_1_NB_LINEOriginalDbColumnName(){
				
					return "tOracleInput_1_NB_LINE";
				
				}

				
			    public Integer tOracleOutput_1_NB_LINE;

				public Integer getTOracleOutput_1_NB_LINE () {
					return this.tOracleOutput_1_NB_LINE;
				}

				public Boolean tOracleOutput_1_NB_LINEIsNullable(){
				    return true;
				}
				public Boolean tOracleOutput_1_NB_LINEIsKey(){
				    return false;
				}
				public Integer tOracleOutput_1_NB_LINELength(){
				    return null;
				}
				public Integer tOracleOutput_1_NB_LINEPrecision(){
				    return null;
				}
				public String tOracleOutput_1_NB_LINEDefault(){
				
					return null;
				
				}
				public String tOracleOutput_1_NB_LINEComment(){
				
				    return "";
				
				}
				public String tOracleOutput_1_NB_LINEPattern(){
				
					return "";
				
				}
				public String tOracleOutput_1_NB_LINEOriginalDbColumnName(){
				
					return "tOracleOutput_1_NB_LINE";
				
				}

				
			    public Integer tOracleOutput_1_NB_LINE_UPDATED;

				public Integer getTOracleOutput_1_NB_LINE_UPDATED () {
					return this.tOracleOutput_1_NB_LINE_UPDATED;
				}

				public Boolean tOracleOutput_1_NB_LINE_UPDATEDIsNullable(){
				    return true;
				}
				public Boolean tOracleOutput_1_NB_LINE_UPDATEDIsKey(){
				    return false;
				}
				public Integer tOracleOutput_1_NB_LINE_UPDATEDLength(){
				    return null;
				}
				public Integer tOracleOutput_1_NB_LINE_UPDATEDPrecision(){
				    return null;
				}
				public String tOracleOutput_1_NB_LINE_UPDATEDDefault(){
				
					return null;
				
				}
				public String tOracleOutput_1_NB_LINE_UPDATEDComment(){
				
				    return "";
				
				}
				public String tOracleOutput_1_NB_LINE_UPDATEDPattern(){
				
					return "";
				
				}
				public String tOracleOutput_1_NB_LINE_UPDATEDOriginalDbColumnName(){
				
					return "tOracleOutput_1_NB_LINE_UPDATED";
				
				}

				
			    public Integer tOracleOutput_1_NB_LINE_INSERTED;

				public Integer getTOracleOutput_1_NB_LINE_INSERTED () {
					return this.tOracleOutput_1_NB_LINE_INSERTED;
				}

				public Boolean tOracleOutput_1_NB_LINE_INSERTEDIsNullable(){
				    return true;
				}
				public Boolean tOracleOutput_1_NB_LINE_INSERTEDIsKey(){
				    return false;
				}
				public Integer tOracleOutput_1_NB_LINE_INSERTEDLength(){
				    return null;
				}
				public Integer tOracleOutput_1_NB_LINE_INSERTEDPrecision(){
				    return null;
				}
				public String tOracleOutput_1_NB_LINE_INSERTEDDefault(){
				
					return null;
				
				}
				public String tOracleOutput_1_NB_LINE_INSERTEDComment(){
				
				    return "";
				
				}
				public String tOracleOutput_1_NB_LINE_INSERTEDPattern(){
				
					return "";
				
				}
				public String tOracleOutput_1_NB_LINE_INSERTEDOriginalDbColumnName(){
				
					return "tOracleOutput_1_NB_LINE_INSERTED";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Agendamiento.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Agendamiento.length == 0) {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Agendamiento = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Agendamiento, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Agendamiento, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
						this.tOracleInput_1_NB_LINE = readInteger(dis);
					
						this.tOracleOutput_1_NB_LINE = readInteger(dis);
					
						this.tOracleOutput_1_NB_LINE_UPDATED = readInteger(dis);
					
						this.tOracleOutput_1_NB_LINE_INSERTED = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Agendamiento) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
						this.tOracleInput_1_NB_LINE = readInteger(dis);
					
						this.tOracleOutput_1_NB_LINE = readInteger(dis);
					
						this.tOracleOutput_1_NB_LINE_UPDATED = readInteger(dis);
					
						this.tOracleOutput_1_NB_LINE_INSERTED = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
					// Integer
				
						writeInteger(this.tOracleInput_1_NB_LINE,dos);
					
					// Integer
				
						writeInteger(this.tOracleOutput_1_NB_LINE,dos);
					
					// Integer
				
						writeInteger(this.tOracleOutput_1_NB_LINE_UPDATED,dos);
					
					// Integer
				
						writeInteger(this.tOracleOutput_1_NB_LINE_INSERTED,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
					// Integer
				
						writeInteger(this.tOracleInput_1_NB_LINE,dos);
					
					// Integer
				
						writeInteger(this.tOracleOutput_1_NB_LINE,dos);
					
					// Integer
				
						writeInteger(this.tOracleOutput_1_NB_LINE_UPDATED,dos);
					
					// Integer
				
						writeInteger(this.tOracleOutput_1_NB_LINE_INSERTED,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FECHA_EJECUCION="+FECHA_EJECUCION);
		sb.append(",HORA_INICIO="+HORA_INICIO);
		sb.append(",HORA_FINAL="+HORA_FINAL);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",JOBS="+JOBS);
		sb.append(",tOracleInput_1_NB_LINE="+String.valueOf(tOracleInput_1_NB_LINE));
		sb.append(",tOracleOutput_1_NB_LINE="+String.valueOf(tOracleOutput_1_NB_LINE));
		sb.append(",tOracleOutput_1_NB_LINE_UPDATED="+String.valueOf(tOracleOutput_1_NB_LINE_UPDATED));
		sb.append(",tOracleOutput_1_NB_LINE_INSERTED="+String.valueOf(tOracleOutput_1_NB_LINE_INSERTED));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.LOGS_EXECUTION)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
                        synchronized (multiThreadLockWrite) {
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("FECHA_EJECUCION");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_INICIO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_FINAL");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ESTADO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("JOBS");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("tOracleInput_1_NB_LINE");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("tOracleOutput_1_NB_LINE");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("tOracleOutput_1_NB_LINE_UPDATED");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("tOracleOutput_1_NB_LINE_INSERTED");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";
	
	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row16.FECHA_EJECUCION = context.FECHA_EJECUCION;
    	            	        	            	
    	            		row16.HORA_INICIO = context.HORA_INICIO;
    	            	        	            	
    	            		row16.HORA_FINAL = context.HORA_FINAL;
    	            	        	            	
    	            		row16.ESTADO = context.ESTADO_EXEC;
    	            	        	            	
    	            		row16.JOBS = "Agendamiento";
    	            	        	            	
    	            		row16.tOracleInput_1_NB_LINE = ((Integer)globalMap.get("tOracleInput_1_NB_LINE"));
    	            	        	            	
    	            		row16.tOracleOutput_1_NB_LINE = ((Integer)globalMap.get("tOracleOutput_1_NB_LINE"));
    	            	        	            	
    	            		row16.tOracleOutput_1_NB_LINE_UPDATED = ((Integer)globalMap.get("tOracleOutput_1_NB_LINE_UPDATED"));
    	            	        	            	
    	            		row16.tOracleOutput_1_NB_LINE_INSERTED = ((Integer)globalMap.get("tOracleOutput_1_NB_LINE_INSERTED"));
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row16.FECHA_EJECUCION != null) {
                        sb_tFileOutputDelimited_2.append(
                            row16.FECHA_EJECUCION
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row16.HORA_INICIO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row16.HORA_INICIO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row16.HORA_FINAL != null) {
                        sb_tFileOutputDelimited_2.append(
                            row16.HORA_FINAL
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row16.ESTADO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row16.ESTADO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row16.JOBS != null) {
                        sb_tFileOutputDelimited_2.append(
                            row16.JOBS
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row16.tOracleInput_1_NB_LINE != null) {
                        sb_tFileOutputDelimited_2.append(
                            row16.tOracleInput_1_NB_LINE
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row16.tOracleOutput_1_NB_LINE != null) {
                        sb_tFileOutputDelimited_2.append(
                            row16.tOracleOutput_1_NB_LINE
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row16.tOracleOutput_1_NB_LINE_UPDATED != null) {
                        sb_tFileOutputDelimited_2.append(
                            row16.tOracleOutput_1_NB_LINE_UPDATED
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row16.tOracleOutput_1_NB_LINE_INSERTED != null) {
                        sb_tFileOutputDelimited_2.append(
                            row16.tOracleOutput_1_NB_LINE_INSERTED
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

                    }



 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());




/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_2", false);
		start_Hash.put("tOracleClose_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_2";
	
	
		int tos_count_tOracleClose_2 = 0;
		

 



/**
 * [tOracleClose_2 begin ] stop
 */
	
	/**
	 * [tOracleClose_2 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

	java.sql.Connection conn_tOracleClose_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
	
	if(conn_tOracleClose_2 != null && !conn_tOracleClose_2.isClosed())
	{
		
			conn_tOracleClose_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_2"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_2++;

/**
 * [tOracleClose_2 main ] stop
 */
	
	/**
	 * [tOracleClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_2 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 

ok_Hash.put("tOracleClose_2", true);
end_Hash.put("tOracleClose_2", System.currentTimeMillis());




/**
 * [tOracleClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final Agendamiento AgendamientoClass = new Agendamiento();

        int exitCode = AgendamientoClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Agendamiento.class.getClassLoader().getResourceAsStream("rep_inicio/agendamiento_7_3/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Agendamiento.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("CONDICION_AGECITAS", "id_String");
                        if(context.getStringValue("CONDICION_AGECITAS") == null) {
                            context.CONDICION_AGECITAS = null;
                        } else {
                            context.CONDICION_AGECITAS=(String) context.getProperty("CONDICION_AGECITAS");
                        }
                        context.setContextType("AGE_FECHA", "id_String");
                        if(context.getStringValue("AGE_FECHA") == null) {
                            context.AGE_FECHA = null;
                        } else {
                            context.AGE_FECHA=(String) context.getProperty("AGE_FECHA");
                        }
                        context.setContextType("db_origen_AdditionalParams", "id_String");
                        if(context.getStringValue("db_origen_AdditionalParams") == null) {
                            context.db_origen_AdditionalParams = null;
                        } else {
                            context.db_origen_AdditionalParams=(String) context.getProperty("db_origen_AdditionalParams");
                        }
                        context.setContextType("db_origen_Login", "id_String");
                        if(context.getStringValue("db_origen_Login") == null) {
                            context.db_origen_Login = null;
                        } else {
                            context.db_origen_Login=(String) context.getProperty("db_origen_Login");
                        }
                        context.setContextType("db_origen_Password", "id_Password");
                        if(context.getStringValue("db_origen_Password") == null) {
                            context.db_origen_Password = null;
                        } else {
                            String pwd_db_origen_Password_value = context.getProperty("db_origen_Password");
                            context.db_origen_Password = null;
                            if(pwd_db_origen_Password_value!=null) {
                                if(context_param.containsKey("db_origen_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_origen_Password = pwd_db_origen_Password_value;
                                } else if (!pwd_db_origen_Password_value.isEmpty()) {
                                    try {
                                        context.db_origen_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_origen_Password_value);
                                        context.put("db_origen_Password",context.db_origen_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_origen_Port", "id_String");
                        if(context.getStringValue("db_origen_Port") == null) {
                            context.db_origen_Port = null;
                        } else {
                            context.db_origen_Port=(String) context.getProperty("db_origen_Port");
                        }
                        context.setContextType("db_origen_Schema", "id_String");
                        if(context.getStringValue("db_origen_Schema") == null) {
                            context.db_origen_Schema = null;
                        } else {
                            context.db_origen_Schema=(String) context.getProperty("db_origen_Schema");
                        }
                        context.setContextType("db_origen_Server", "id_String");
                        if(context.getStringValue("db_origen_Server") == null) {
                            context.db_origen_Server = null;
                        } else {
                            context.db_origen_Server=(String) context.getProperty("db_origen_Server");
                        }
                        context.setContextType("db_origen_ServiceName", "id_String");
                        if(context.getStringValue("db_origen_ServiceName") == null) {
                            context.db_origen_ServiceName = null;
                        } else {
                            context.db_origen_ServiceName=(String) context.getProperty("db_origen_ServiceName");
                        }
                        context.setContextType("db_destino_AdditionalParams", "id_String");
                        if(context.getStringValue("db_destino_AdditionalParams") == null) {
                            context.db_destino_AdditionalParams = null;
                        } else {
                            context.db_destino_AdditionalParams=(String) context.getProperty("db_destino_AdditionalParams");
                        }
                        context.setContextType("db_destino_Login", "id_String");
                        if(context.getStringValue("db_destino_Login") == null) {
                            context.db_destino_Login = null;
                        } else {
                            context.db_destino_Login=(String) context.getProperty("db_destino_Login");
                        }
                        context.setContextType("db_destino_Password", "id_Password");
                        if(context.getStringValue("db_destino_Password") == null) {
                            context.db_destino_Password = null;
                        } else {
                            String pwd_db_destino_Password_value = context.getProperty("db_destino_Password");
                            context.db_destino_Password = null;
                            if(pwd_db_destino_Password_value!=null) {
                                if(context_param.containsKey("db_destino_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_destino_Password = pwd_db_destino_Password_value;
                                } else if (!pwd_db_destino_Password_value.isEmpty()) {
                                    try {
                                        context.db_destino_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_destino_Password_value);
                                        context.put("db_destino_Password",context.db_destino_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_destino_Port", "id_String");
                        if(context.getStringValue("db_destino_Port") == null) {
                            context.db_destino_Port = null;
                        } else {
                            context.db_destino_Port=(String) context.getProperty("db_destino_Port");
                        }
                        context.setContextType("db_destino_Schema", "id_String");
                        if(context.getStringValue("db_destino_Schema") == null) {
                            context.db_destino_Schema = null;
                        } else {
                            context.db_destino_Schema=(String) context.getProperty("db_destino_Schema");
                        }
                        context.setContextType("db_destino_Server", "id_String");
                        if(context.getStringValue("db_destino_Server") == null) {
                            context.db_destino_Server = null;
                        } else {
                            context.db_destino_Server=(String) context.getProperty("db_destino_Server");
                        }
                        context.setContextType("db_destino_ServiceName", "id_String");
                        if(context.getStringValue("db_destino_ServiceName") == null) {
                            context.db_destino_ServiceName = null;
                        } else {
                            context.db_destino_ServiceName=(String) context.getProperty("db_destino_ServiceName");
                        }
                        context.setContextType("ACTUALIZACION_TOTAL", "id_Boolean");
                        if(context.getStringValue("ACTUALIZACION_TOTAL") == null) {
                            context.ACTUALIZACION_TOTAL = null;
                        } else {
                            try{
                                context.ACTUALIZACION_TOTAL=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("ACTUALIZACION_TOTAL"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ACTUALIZACION_TOTAL", e.getMessage()));
                                context.ACTUALIZACION_TOTAL=null;
                            }
                        }
                        context.setContextType("BODEGA", "id_String");
                        if(context.getStringValue("BODEGA") == null) {
                            context.BODEGA = null;
                        } else {
                            context.BODEGA=(String) context.getProperty("BODEGA");
                        }
                        context.setContextType("ERROR", "id_String");
                        if(context.getStringValue("ERROR") == null) {
                            context.ERROR = null;
                        } else {
                            context.ERROR=(String) context.getProperty("ERROR");
                        }
                        context.setContextType("ESTADO", "id_String");
                        if(context.getStringValue("ESTADO") == null) {
                            context.ESTADO = null;
                        } else {
                            context.ESTADO=(String) context.getProperty("ESTADO");
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("FANTERIOR", "id_String");
                        if(context.getStringValue("FANTERIOR") == null) {
                            context.FANTERIOR = null;
                        } else {
                            context.FANTERIOR=(String) context.getProperty("FANTERIOR");
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("ID_SOLICITUD", "id_Integer");
                        if(context.getStringValue("ID_SOLICITUD") == null) {
                            context.ID_SOLICITUD = null;
                        } else {
                            try{
                                context.ID_SOLICITUD=routines.system.ParserUtils.parseTo_Integer (context.getProperty("ID_SOLICITUD"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ID_SOLICITUD", e.getMessage()));
                                context.ID_SOLICITUD=null;
                            }
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                        context.setContextType("mail_Message", "id_String");
                        if(context.getStringValue("mail_Message") == null) {
                            context.mail_Message = null;
                        } else {
                            context.mail_Message=(String) context.getProperty("mail_Message");
                        }
                        context.setContextType("mail_Password", "id_Password");
                        if(context.getStringValue("mail_Password") == null) {
                            context.mail_Password = null;
                        } else {
                            String pwd_mail_Password_value = context.getProperty("mail_Password");
                            context.mail_Password = null;
                            if(pwd_mail_Password_value!=null) {
                                if(context_param.containsKey("mail_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.mail_Password = pwd_mail_Password_value;
                                } else if (!pwd_mail_Password_value.isEmpty()) {
                                    try {
                                        context.mail_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_mail_Password_value);
                                        context.put("mail_Password",context.mail_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("mail_Sendername", "id_String");
                        if(context.getStringValue("mail_Sendername") == null) {
                            context.mail_Sendername = null;
                        } else {
                            context.mail_Sendername=(String) context.getProperty("mail_Sendername");
                        }
                        context.setContextType("mail_SMTP_Host", "id_String");
                        if(context.getStringValue("mail_SMTP_Host") == null) {
                            context.mail_SMTP_Host = null;
                        } else {
                            context.mail_SMTP_Host=(String) context.getProperty("mail_SMTP_Host");
                        }
                        context.setContextType("mail_SMTP_Port", "id_String");
                        if(context.getStringValue("mail_SMTP_Port") == null) {
                            context.mail_SMTP_Port = null;
                        } else {
                            context.mail_SMTP_Port=(String) context.getProperty("mail_SMTP_Port");
                        }
                        context.setContextType("mail_Subject", "id_String");
                        if(context.getStringValue("mail_Subject") == null) {
                            context.mail_Subject = null;
                        } else {
                            context.mail_Subject=(String) context.getProperty("mail_Subject");
                        }
                        context.setContextType("mail_To", "id_String");
                        if(context.getStringValue("mail_To") == null) {
                            context.mail_To = null;
                        } else {
                            context.mail_To=(String) context.getProperty("mail_To");
                        }
                        context.setContextType("mail_User", "id_String");
                        if(context.getStringValue("mail_User") == null) {
                            context.mail_User = null;
                        } else {
                            context.mail_User=(String) context.getProperty("mail_User");
                        }
                        context.setContextType("CONDICION_AGESCITAS", "id_String");
                        if(context.getStringValue("CONDICION_AGESCITAS") == null) {
                            context.CONDICION_AGESCITAS = null;
                        } else {
                            context.CONDICION_AGESCITAS=(String) context.getProperty("CONDICION_AGESCITAS");
                        }
                        context.setContextType("CONDICION_AGE", "id_String");
                        if(context.getStringValue("CONDICION_AGE") == null) {
                            context.CONDICION_AGE = null;
                        } else {
                            context.CONDICION_AGE=(String) context.getProperty("CONDICION_AGE");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("CONDICION_AGECITAS")) {
                context.CONDICION_AGECITAS = (String) parentContextMap.get("CONDICION_AGECITAS");
            }if (parentContextMap.containsKey("AGE_FECHA")) {
                context.AGE_FECHA = (String) parentContextMap.get("AGE_FECHA");
            }if (parentContextMap.containsKey("db_origen_AdditionalParams")) {
                context.db_origen_AdditionalParams = (String) parentContextMap.get("db_origen_AdditionalParams");
            }if (parentContextMap.containsKey("db_origen_Login")) {
                context.db_origen_Login = (String) parentContextMap.get("db_origen_Login");
            }if (parentContextMap.containsKey("db_origen_Password")) {
                context.db_origen_Password = (java.lang.String) parentContextMap.get("db_origen_Password");
            }if (parentContextMap.containsKey("db_origen_Port")) {
                context.db_origen_Port = (String) parentContextMap.get("db_origen_Port");
            }if (parentContextMap.containsKey("db_origen_Schema")) {
                context.db_origen_Schema = (String) parentContextMap.get("db_origen_Schema");
            }if (parentContextMap.containsKey("db_origen_Server")) {
                context.db_origen_Server = (String) parentContextMap.get("db_origen_Server");
            }if (parentContextMap.containsKey("db_origen_ServiceName")) {
                context.db_origen_ServiceName = (String) parentContextMap.get("db_origen_ServiceName");
            }if (parentContextMap.containsKey("db_destino_AdditionalParams")) {
                context.db_destino_AdditionalParams = (String) parentContextMap.get("db_destino_AdditionalParams");
            }if (parentContextMap.containsKey("db_destino_Login")) {
                context.db_destino_Login = (String) parentContextMap.get("db_destino_Login");
            }if (parentContextMap.containsKey("db_destino_Password")) {
                context.db_destino_Password = (java.lang.String) parentContextMap.get("db_destino_Password");
            }if (parentContextMap.containsKey("db_destino_Port")) {
                context.db_destino_Port = (String) parentContextMap.get("db_destino_Port");
            }if (parentContextMap.containsKey("db_destino_Schema")) {
                context.db_destino_Schema = (String) parentContextMap.get("db_destino_Schema");
            }if (parentContextMap.containsKey("db_destino_Server")) {
                context.db_destino_Server = (String) parentContextMap.get("db_destino_Server");
            }if (parentContextMap.containsKey("db_destino_ServiceName")) {
                context.db_destino_ServiceName = (String) parentContextMap.get("db_destino_ServiceName");
            }if (parentContextMap.containsKey("ACTUALIZACION_TOTAL")) {
                context.ACTUALIZACION_TOTAL = (Boolean) parentContextMap.get("ACTUALIZACION_TOTAL");
            }if (parentContextMap.containsKey("BODEGA")) {
                context.BODEGA = (String) parentContextMap.get("BODEGA");
            }if (parentContextMap.containsKey("ERROR")) {
                context.ERROR = (String) parentContextMap.get("ERROR");
            }if (parentContextMap.containsKey("ESTADO")) {
                context.ESTADO = (String) parentContextMap.get("ESTADO");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("FANTERIOR")) {
                context.FANTERIOR = (String) parentContextMap.get("FANTERIOR");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("ID_SOLICITUD")) {
                context.ID_SOLICITUD = (Integer) parentContextMap.get("ID_SOLICITUD");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }if (parentContextMap.containsKey("mail_Message")) {
                context.mail_Message = (String) parentContextMap.get("mail_Message");
            }if (parentContextMap.containsKey("mail_Password")) {
                context.mail_Password = (java.lang.String) parentContextMap.get("mail_Password");
            }if (parentContextMap.containsKey("mail_Sendername")) {
                context.mail_Sendername = (String) parentContextMap.get("mail_Sendername");
            }if (parentContextMap.containsKey("mail_SMTP_Host")) {
                context.mail_SMTP_Host = (String) parentContextMap.get("mail_SMTP_Host");
            }if (parentContextMap.containsKey("mail_SMTP_Port")) {
                context.mail_SMTP_Port = (String) parentContextMap.get("mail_SMTP_Port");
            }if (parentContextMap.containsKey("mail_Subject")) {
                context.mail_Subject = (String) parentContextMap.get("mail_Subject");
            }if (parentContextMap.containsKey("mail_To")) {
                context.mail_To = (String) parentContextMap.get("mail_To");
            }if (parentContextMap.containsKey("mail_User")) {
                context.mail_User = (String) parentContextMap.get("mail_User");
            }if (parentContextMap.containsKey("CONDICION_AGESCITAS")) {
                context.CONDICION_AGESCITAS = (String) parentContextMap.get("CONDICION_AGESCITAS");
            }if (parentContextMap.containsKey("CONDICION_AGE")) {
                context.CONDICION_AGE = (String) parentContextMap.get("CONDICION_AGE");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("db_origen_Password");
			parametersToEncrypt.add("db_destino_Password");
			parametersToEncrypt.add("mail_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tJava_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

e_tJava_1.printStackTrace();

}catch (java.lang.Error e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tJava_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Agendamiento");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tOracleConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));
            connections.put("conn_tOracleConnection_2", globalMap.get("conn_tOracleConnection_2"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1454929 characters generated by Talend Open Studio for ESB 
 *     on the October 28, 2024, 11:47:12 AM COT
 ************************************************************************************************/