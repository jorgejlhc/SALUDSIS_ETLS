// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package rep_inicio.referenciaycontrarreferencia_4_0;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.Utils;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: ReferenciayContrarreferencia Purpose: <br>
 * Description:  <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status PROD
 */
public class ReferenciayContrarreferencia implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(CONDICION_CUPSOLICITADOS != null){
				
					this.setProperty("CONDICION_CUPSOLICITADOS", CONDICION_CUPSOLICITADOS.toString());
				
			}
			
			if(CONDICION_AUTORIZACIONES != null){
				
					this.setProperty("CONDICION_AUTORIZACIONES", CONDICION_AUTORIZACIONES.toString());
				
			}
			
			if(db_origen_AdditionalParams != null){
				
					this.setProperty("db_origen_AdditionalParams", db_origen_AdditionalParams.toString());
				
			}
			
			if(db_origen_Login != null){
				
					this.setProperty("db_origen_Login", db_origen_Login.toString());
				
			}
			
			if(db_origen_Password != null){
				
					this.setProperty("db_origen_Password", db_origen_Password.toString());
				
			}
			
			if(db_origen_Port != null){
				
					this.setProperty("db_origen_Port", db_origen_Port.toString());
				
			}
			
			if(db_origen_Schema != null){
				
					this.setProperty("db_origen_Schema", db_origen_Schema.toString());
				
			}
			
			if(db_origen_Server != null){
				
					this.setProperty("db_origen_Server", db_origen_Server.toString());
				
			}
			
			if(db_origen_ServiceName != null){
				
					this.setProperty("db_origen_ServiceName", db_origen_ServiceName.toString());
				
			}
			
			if(db_destino_AdditionalParams != null){
				
					this.setProperty("db_destino_AdditionalParams", db_destino_AdditionalParams.toString());
				
			}
			
			if(db_destino_Login != null){
				
					this.setProperty("db_destino_Login", db_destino_Login.toString());
				
			}
			
			if(db_destino_Password != null){
				
					this.setProperty("db_destino_Password", db_destino_Password.toString());
				
			}
			
			if(db_destino_Port != null){
				
					this.setProperty("db_destino_Port", db_destino_Port.toString());
				
			}
			
			if(db_destino_Schema != null){
				
					this.setProperty("db_destino_Schema", db_destino_Schema.toString());
				
			}
			
			if(db_destino_Server != null){
				
					this.setProperty("db_destino_Server", db_destino_Server.toString());
				
			}
			
			if(db_destino_ServiceName != null){
				
					this.setProperty("db_destino_ServiceName", db_destino_ServiceName.toString());
				
			}
			
			if(ACTUALIZACION_TOTAL != null){
				
					this.setProperty("ACTUALIZACION_TOTAL", ACTUALIZACION_TOTAL.toString());
				
			}
			
			if(BODEGA != null){
				
					this.setProperty("BODEGA", BODEGA.toString());
				
			}
			
			if(ERROR != null){
				
					this.setProperty("ERROR", ERROR.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(FANTERIOR != null){
				
					this.setProperty("FANTERIOR", FANTERIOR.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String CONDICION_CUPSOLICITADOS;
public String getCONDICION_CUPSOLICITADOS(){
	return this.CONDICION_CUPSOLICITADOS;
}
public String CONDICION_AUTORIZACIONES;
public String getCONDICION_AUTORIZACIONES(){
	return this.CONDICION_AUTORIZACIONES;
}
public String db_origen_AdditionalParams;
public String getDb_origen_AdditionalParams(){
	return this.db_origen_AdditionalParams;
}
public String db_origen_Login;
public String getDb_origen_Login(){
	return this.db_origen_Login;
}
public java.lang.String db_origen_Password;
public java.lang.String getDb_origen_Password(){
	return this.db_origen_Password;
}
public String db_origen_Port;
public String getDb_origen_Port(){
	return this.db_origen_Port;
}
public String db_origen_Schema;
public String getDb_origen_Schema(){
	return this.db_origen_Schema;
}
public String db_origen_Server;
public String getDb_origen_Server(){
	return this.db_origen_Server;
}
public String db_origen_ServiceName;
public String getDb_origen_ServiceName(){
	return this.db_origen_ServiceName;
}
public String db_destino_AdditionalParams;
public String getDb_destino_AdditionalParams(){
	return this.db_destino_AdditionalParams;
}
public String db_destino_Login;
public String getDb_destino_Login(){
	return this.db_destino_Login;
}
public java.lang.String db_destino_Password;
public java.lang.String getDb_destino_Password(){
	return this.db_destino_Password;
}
public String db_destino_Port;
public String getDb_destino_Port(){
	return this.db_destino_Port;
}
public String db_destino_Schema;
public String getDb_destino_Schema(){
	return this.db_destino_Schema;
}
public String db_destino_Server;
public String getDb_destino_Server(){
	return this.db_destino_Server;
}
public String db_destino_ServiceName;
public String getDb_destino_ServiceName(){
	return this.db_destino_ServiceName;
}
public Boolean ACTUALIZACION_TOTAL;
public Boolean getACTUALIZACION_TOTAL(){
	return this.ACTUALIZACION_TOTAL;
}
public String BODEGA;
public String getBODEGA(){
	return this.BODEGA;
}
public String ERROR;
public String getERROR(){
	return this.ERROR;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public String FANTERIOR;
public String getFANTERIOR(){
	return this.FANTERIOR;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "4.0";
	private final String jobName = "ReferenciayContrarreferencia";
	private final String projectName = "REP_INICIO";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ReferenciayContrarreferencia.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ReferenciayContrarreferencia.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public static class row75Struct implements routines.system.IPersistableRow<row75Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return true;
				}
				public Integer HostLength(){
				    return 13;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return true;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return true;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 16;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 12;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 12;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 3;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Host == null) ? 0 : this.Host.hashCode());
					
						result = prime * result + ((this.Port == null) ? 0 : this.Port.hashCode());
					
						result = prime * result + ((this.Sid == null) ? 0 : this.Sid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row75Struct other = (row75Struct) obj;
		
						if (this.Host == null) {
							if (other.Host != null)
								return false;
						
						} else if (!this.Host.equals(other.Host))
						
							return false;
					
						if (this.Port == null) {
							if (other.Port != null)
								return false;
						
						} else if (!this.Port.equals(other.Port))
						
							return false;
					
						if (this.Sid == null) {
							if (other.Sid != null)
								return false;
						
						} else if (!this.Sid.equals(other.Sid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row75Struct other) {

		other.Host = this.Host;
	            other.Port = this.Port;
	            other.Sid = this.Sid;
	            other.ServiceName = this.ServiceName;
	            other.Schema = this.Schema;
	            other.User = this.User;
	            other.Password = this.Password;
	            other.SMTPHost = this.SMTPHost;
	            other.SMTPPort = this.SMTPPort;
	            other.UsernameMail = this.UsernameMail;
	            other.PasswordMail = this.PasswordMail;
	            
	}

	public void copyKeysDataTo(row75Struct other) {

		other.Host = this.Host;
	            	other.Port = this.Port;
	            	other.Sid = this.Sid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length == 0) {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length == 0) {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row75Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Host, other.Host);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Port, other.Port);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Sid, other.Sid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row75Struct row75 = new row75Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row75");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class NameSpaceTool_tFileInputXML_1 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_1{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getStringValue().isEmpty();
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	throw(e);
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_1 = true;
org.dom4j.Document doc_tFileInputXML_1 = null;
java.io.Closeable toClose_tFileInputXML_1 = null;
try{
	if(filename_tFileInputXML_1 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream)filename_tFileInputXML_1;
		toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(inputStream_tFileInputXML_1);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_1)),"UTF-8");
		toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
		org.xml.sax.InputSource in_tFileInputXML_1= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_1);
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(in_tFileInputXML_1);
	}
}catch(java.lang.Exception e){
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	throw(e);
} finally {
	if(toClose_tFileInputXML_1!=null) {
		toClose_tFileInputXML_1.close();
	}
}
if(isValidFile_tFileInputXML_1){
NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1.createXPath(nsTool_tFileInputXML_1.addDefaultNSPrefix("/connectionStrings"));  
x_tFileInputXML_1.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_1.selectNodes(doc_tFileInputXML_1);	
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
String str_tFileInputXML_1 = "";
org.dom4j.Node node_tFileInputXML_1 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_1=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_1{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Host","/connectionStrings"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Port","/connectionStrings"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Sid","/connectionStrings"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("ServiceName","/connectionStrings"));
	xpath_3.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(3,xpath_3);
			
	org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Schema","/connectionStrings"));
	xpath_4.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(4,xpath_4);
			
	org.dom4j.XPath xpath_5 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("User","/connectionStrings"));
	xpath_5.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(5,xpath_5);
			
	org.dom4j.XPath xpath_6 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Password","/connectionStrings"));
	xpath_6.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(6,xpath_6);
			
	org.dom4j.XPath xpath_7 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPHost","/connectionStrings"));
	xpath_7.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(7,xpath_7);
			
	org.dom4j.XPath xpath_8 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPPort","/connectionStrings"));
	xpath_8.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(8,xpath_8);
			
	org.dom4j.XPath xpath_9 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("UsernameMail","/connectionStrings"));
	xpath_9.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(9,xpath_9);
			
	org.dom4j.XPath xpath_10 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PasswordMail","/connectionStrings"));
	xpath_10.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(10,xpath_10);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_1 xPathUtil_tFileInputXML_1 = new XPathUtil_tFileInputXML_1();
	xPathUtil_tFileInputXML_1.initXPaths(xpaths_tFileInputXML_1, nsTool_tFileInputXML_1, xmlNameSpaceMap_tFileInputXML_1);
for (org.dom4j.Node temp_tFileInputXML_1: nodeList_tFileInputXML_1) {
	if (nb_line_tFileInputXML_1>=50) {
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row75 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row75 = new row75Struct();
	try{
    Object obj0_tFileInputXML_1 = xpaths_tFileInputXML_1.get(0).evaluate(temp_tFileInputXML_1);
    if(obj0_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj0_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_1 instanceof String || obj0_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj0_tFileInputXML_1);
    } else if(obj0_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.Host =null;
									}else{
		row75.Host = str_tFileInputXML_1;
	}
    Object obj1_tFileInputXML_1 = xpaths_tFileInputXML_1.get(1).evaluate(temp_tFileInputXML_1);
    if(obj1_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj1_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj1_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_1 instanceof String || obj1_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj1_tFileInputXML_1);
    } else if(obj1_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.Port =null;
									}else{
		row75.Port = str_tFileInputXML_1;
	}
    Object obj2_tFileInputXML_1 = xpaths_tFileInputXML_1.get(2).evaluate(temp_tFileInputXML_1);
    if(obj2_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj2_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj2_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_1 instanceof String || obj2_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj2_tFileInputXML_1);
    } else if(obj2_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.Sid =null;
									}else{
		row75.Sid = str_tFileInputXML_1;
	}
    Object obj3_tFileInputXML_1 = xpaths_tFileInputXML_1.get(3).evaluate(temp_tFileInputXML_1);
    if(obj3_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj3_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj3_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj3_tFileInputXML_1 instanceof String || obj3_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj3_tFileInputXML_1);
    } else if(obj3_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj3_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.ServiceName =null;
									}else{
		row75.ServiceName = str_tFileInputXML_1;
	}
    Object obj4_tFileInputXML_1 = xpaths_tFileInputXML_1.get(4).evaluate(temp_tFileInputXML_1);
    if(obj4_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj4_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj4_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj4_tFileInputXML_1 instanceof String || obj4_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj4_tFileInputXML_1);
    } else if(obj4_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj4_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.Schema =null;
									}else{
		row75.Schema = str_tFileInputXML_1;
	}
    Object obj5_tFileInputXML_1 = xpaths_tFileInputXML_1.get(5).evaluate(temp_tFileInputXML_1);
    if(obj5_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj5_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj5_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj5_tFileInputXML_1 instanceof String || obj5_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj5_tFileInputXML_1);
    } else if(obj5_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj5_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.User =null;
									}else{
		row75.User = str_tFileInputXML_1;
	}
    Object obj6_tFileInputXML_1 = xpaths_tFileInputXML_1.get(6).evaluate(temp_tFileInputXML_1);
    if(obj6_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj6_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj6_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj6_tFileInputXML_1 instanceof String || obj6_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj6_tFileInputXML_1);
    } else if(obj6_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj6_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.Password =null;
									}else{
		row75.Password = str_tFileInputXML_1;
	}
    Object obj7_tFileInputXML_1 = xpaths_tFileInputXML_1.get(7).evaluate(temp_tFileInputXML_1);
    if(obj7_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj7_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj7_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj7_tFileInputXML_1 instanceof String || obj7_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj7_tFileInputXML_1);
    } else if(obj7_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj7_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.SMTPHost =null;
									}else{
		row75.SMTPHost = str_tFileInputXML_1;
	}
    Object obj8_tFileInputXML_1 = xpaths_tFileInputXML_1.get(8).evaluate(temp_tFileInputXML_1);
    if(obj8_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj8_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj8_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj8_tFileInputXML_1 instanceof String || obj8_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj8_tFileInputXML_1);
    } else if(obj8_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj8_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.SMTPPort =null;
									}else{
		row75.SMTPPort = str_tFileInputXML_1;
	}
    Object obj9_tFileInputXML_1 = xpaths_tFileInputXML_1.get(9).evaluate(temp_tFileInputXML_1);
    if(obj9_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj9_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj9_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj9_tFileInputXML_1 instanceof String || obj9_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj9_tFileInputXML_1);
    } else if(obj9_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj9_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.UsernameMail =null;
									}else{
		row75.UsernameMail = str_tFileInputXML_1;
	}
    Object obj10_tFileInputXML_1 = xpaths_tFileInputXML_1.get(10).evaluate(temp_tFileInputXML_1);
    if(obj10_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj10_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj10_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj10_tFileInputXML_1 instanceof String || obj10_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj10_tFileInputXML_1);
    } else if(obj10_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj10_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row75.PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row75.PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row75.PasswordMail =null;
									}else{
		row75.PasswordMail = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
            throw(e);
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row75"
if(row75 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row75"
						
						);
					}
					

    context.db_origen_Server = row75.Host;
context.db_origen_Port = row75.Port;
//context.db_origen_Sid = row75.Sid;
context.db_origen_Login = row75.User;
context.db_origen_Password = row75.Password;
context.db_origen_ServiceName = row75.ServiceName;
context.db_origen_Schema = row75.Schema;


System.out.println("+ RCA ");
System.out.println("  - Start:" + TalendDate.getDate("DD/MM/YYYY") + " "  + TalendDate.getDate("HH:mm:ss") );


    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row75"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


}
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row75");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tFileInputXML_2Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public static class row77Struct implements routines.system.IPersistableRow<row77Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return true;
				}
				public Integer HostLength(){
				    return 13;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return true;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return true;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 16;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 12;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 12;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 12;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Host == null) ? 0 : this.Host.hashCode());
					
						result = prime * result + ((this.Port == null) ? 0 : this.Port.hashCode());
					
						result = prime * result + ((this.Sid == null) ? 0 : this.Sid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row77Struct other = (row77Struct) obj;
		
						if (this.Host == null) {
							if (other.Host != null)
								return false;
						
						} else if (!this.Host.equals(other.Host))
						
							return false;
					
						if (this.Port == null) {
							if (other.Port != null)
								return false;
						
						} else if (!this.Port.equals(other.Port))
						
							return false;
					
						if (this.Sid == null) {
							if (other.Sid != null)
								return false;
						
						} else if (!this.Sid.equals(other.Sid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row77Struct other) {

		other.Host = this.Host;
	            other.Port = this.Port;
	            other.Sid = this.Sid;
	            other.ServiceName = this.ServiceName;
	            other.Schema = this.Schema;
	            other.User = this.User;
	            other.Password = this.Password;
	            
	}

	public void copyKeysDataTo(row77Struct other) {

		other.Host = this.Host;
	            	other.Port = this.Port;
	            	other.Sid = this.Sid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length == 0) {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length == 0) {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row77Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Host, other.Host);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Port, other.Port);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Sid, other.Sid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row77Struct row77 = new row77Struct();




	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row77");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tFileInputXML_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_2", false);
		start_Hash.put("tFileInputXML_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_2";
	
	
		int tos_count_tFileInputXML_2 = 0;
		

	

int nb_line_tFileInputXML_2 = 0;

	String os_tFileInputXML_2 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_2=false;
	if(os_tFileInputXML_2.indexOf("windows") > -1 || os_tFileInputXML_2.indexOf("nt") > -1){
		isWindows_tFileInputXML_2=true;
	}
class NameSpaceTool_tFileInputXML_2 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_2{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getStringValue().isEmpty();
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_2 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_2 = null;
try {
	filename_tFileInputXML_2 = context.BODEGA;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
	
	throw(e);
	
}
if(filename_tFileInputXML_2 != null && filename_tFileInputXML_2 instanceof String && filename_tFileInputXML_2.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_2){
		filename_tFileInputXML_2 = filename_tFileInputXML_2.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_2 = true;
org.dom4j.Document doc_tFileInputXML_2 = null;
java.io.Closeable toClose_tFileInputXML_2 = null;
try{
	if(filename_tFileInputXML_2 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_2 = (java.io.InputStream)filename_tFileInputXML_2;
		toClose_tFileInputXML_2 = inputStream_tFileInputXML_2;
		doc_tFileInputXML_2 = reader_tFileInputXML_2.read(inputStream_tFileInputXML_2);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_2 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_2)),"UTF-8");
		toClose_tFileInputXML_2 = unicodeReader_tFileInputXML_2;
		org.xml.sax.InputSource in_tFileInputXML_2= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_2);
		doc_tFileInputXML_2 = reader_tFileInputXML_2.read(in_tFileInputXML_2);
	}
}catch(java.lang.Exception e){
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
	throw(e);
} finally {
	if(toClose_tFileInputXML_2!=null) {
		toClose_tFileInputXML_2.close();
	}
}
if(isValidFile_tFileInputXML_2){
NameSpaceTool_tFileInputXML_2 nsTool_tFileInputXML_2 = new NameSpaceTool_tFileInputXML_2();
nsTool_tFileInputXML_2.countNSMap(doc_tFileInputXML_2.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_2 = nsTool_tFileInputXML_2.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_2 = doc_tFileInputXML_2.createXPath(nsTool_tFileInputXML_2.addDefaultNSPrefix("/connectionStrings"));  
x_tFileInputXML_2.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_2); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_2.selectNodes(doc_tFileInputXML_2);	
XML_API_tFileInputXML_2 xml_api_tFileInputXML_2 = new XML_API_tFileInputXML_2();
String str_tFileInputXML_2 = "";
org.dom4j.Node node_tFileInputXML_2 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_2=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_2{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_2 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Host","/connectionStrings"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Port","/connectionStrings"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Sid","/connectionStrings"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("ServiceName","/connectionStrings"));
	xpath_3.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(3,xpath_3);
			
	org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Schema","/connectionStrings"));
	xpath_4.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(4,xpath_4);
			
	org.dom4j.XPath xpath_5 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("User","/connectionStrings"));
	xpath_5.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(5,xpath_5);
			
	org.dom4j.XPath xpath_6 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Password","/connectionStrings"));
	xpath_6.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(6,xpath_6);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_2 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_2 xPathUtil_tFileInputXML_2 = new XPathUtil_tFileInputXML_2();
	xPathUtil_tFileInputXML_2.initXPaths(xpaths_tFileInputXML_2, nsTool_tFileInputXML_2, xmlNameSpaceMap_tFileInputXML_2);
for (org.dom4j.Node temp_tFileInputXML_2: nodeList_tFileInputXML_2) {
	if (nb_line_tFileInputXML_2>=50) {
	
		break;
	}
		nb_line_tFileInputXML_2++;
		
	row77 = null;			
	boolean whetherReject_tFileInputXML_2 = false;
	row77 = new row77Struct();
	try{
    Object obj0_tFileInputXML_2 = xpaths_tFileInputXML_2.get(0).evaluate(temp_tFileInputXML_2);
    if(obj0_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj0_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj0_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_2 instanceof String || obj0_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj0_tFileInputXML_2);
    } else if(obj0_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row77.Host =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row77.Host ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row77.Host =null;
									}else{
		row77.Host = str_tFileInputXML_2;
	}
    Object obj1_tFileInputXML_2 = xpaths_tFileInputXML_2.get(1).evaluate(temp_tFileInputXML_2);
    if(obj1_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj1_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj1_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_2 instanceof String || obj1_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj1_tFileInputXML_2);
    } else if(obj1_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row77.Port =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row77.Port ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row77.Port =null;
									}else{
		row77.Port = str_tFileInputXML_2;
	}
    Object obj2_tFileInputXML_2 = xpaths_tFileInputXML_2.get(2).evaluate(temp_tFileInputXML_2);
    if(obj2_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj2_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj2_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_2 instanceof String || obj2_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj2_tFileInputXML_2);
    } else if(obj2_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row77.Sid =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row77.Sid ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row77.Sid =null;
									}else{
		row77.Sid = str_tFileInputXML_2;
	}
    Object obj3_tFileInputXML_2 = xpaths_tFileInputXML_2.get(3).evaluate(temp_tFileInputXML_2);
    if(obj3_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj3_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj3_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj3_tFileInputXML_2 instanceof String || obj3_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj3_tFileInputXML_2);
    } else if(obj3_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj3_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row77.ServiceName =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row77.ServiceName ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row77.ServiceName =null;
									}else{
		row77.ServiceName = str_tFileInputXML_2;
	}
    Object obj4_tFileInputXML_2 = xpaths_tFileInputXML_2.get(4).evaluate(temp_tFileInputXML_2);
    if(obj4_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj4_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj4_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj4_tFileInputXML_2 instanceof String || obj4_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj4_tFileInputXML_2);
    } else if(obj4_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj4_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row77.Schema =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row77.Schema ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row77.Schema =null;
									}else{
		row77.Schema = str_tFileInputXML_2;
	}
    Object obj5_tFileInputXML_2 = xpaths_tFileInputXML_2.get(5).evaluate(temp_tFileInputXML_2);
    if(obj5_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj5_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj5_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj5_tFileInputXML_2 instanceof String || obj5_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj5_tFileInputXML_2);
    } else if(obj5_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj5_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row77.User =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row77.User ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row77.User =null;
									}else{
		row77.User = str_tFileInputXML_2;
	}
    Object obj6_tFileInputXML_2 = xpaths_tFileInputXML_2.get(6).evaluate(temp_tFileInputXML_2);
    if(obj6_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj6_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj6_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj6_tFileInputXML_2 instanceof String || obj6_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj6_tFileInputXML_2);
    } else if(obj6_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj6_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row77.Password =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row77.Password ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row77.Password =null;
									}else{
		row77.Password = str_tFileInputXML_2;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_2 = true;
            throw(e);
    }
			
			

 



/**
 * [tFileInputXML_2 begin ] stop
 */
	
	/**
	 * [tFileInputXML_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 


	tos_count_tFileInputXML_2++;

/**
 * [tFileInputXML_2 main ] stop
 */
	
	/**
	 * [tFileInputXML_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_begin ] stop
 */
// Start of branch "row77"
if(row77 != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row77"
						
						);
					}
					

    context.db_destino_Server = row77.Host;
context.db_destino_Port = row77.Port;
//context.db_destino_Sid = row77.Sid;
context.db_destino_Login = row77.User;
context.db_destino_Password = row77.Password;
context.db_destino_ServiceName = row77.ServiceName;
context.db_destino_Schema = row77.Schema;


//context.db_destino_Schema.db = row77.Schema;


    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */

} // End of branch "row77"




	
	/**
	 * [tFileInputXML_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	


}
	}
	globalMap.put("tFileInputXML_2_NB_LINE",nb_line_tFileInputXML_2);

	

 

ok_Hash.put("tFileInputXML_2", true);
end_Hash.put("tFileInputXML_2", System.currentTimeMillis());




/**
 * [tFileInputXML_2 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row77");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tJavaRow_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.db_origen_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.db_origen_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.db_origen_Server);
        globalMap.put("port_" + "tOracleConnection_1",context.db_origen_Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.db_origen_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.db_origen_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.db_origen_Login);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());




/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tOracleConnection_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_2", false);
		start_Hash.put("tOracleConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_2";
	
	
		int tos_count_tOracleConnection_2 = 0;
		
	

	
        String url_tOracleConnection_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_2", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_2 = context.db_destino_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_2 = context.db_destino_Password; 
		String dbPwd_tOracleConnection_2 = decryptedPassword_tOracleConnection_2;
	
	
	java.sql.Connection conn_tOracleConnection_2 = null;
	
		
			String driverClass_tOracleConnection_2 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_2 = java.lang.Class.forName(driverClass_tOracleConnection_2);
			globalMap.put("driverClass_tOracleConnection_2", driverClass_tOracleConnection_2);
		
			java.util.Properties atnParamsPrope_tOracleConnection_2 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_2.put("user",dbUser_tOracleConnection_2);
			    atnParamsPrope_tOracleConnection_2.put("password",dbPwd_tOracleConnection_2);
			if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                atnParamsPrope_tOracleConnection_2.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_2 = java.sql.DriverManager.getConnection(url_tOracleConnection_2, atnParamsPrope_tOracleConnection_2);

		globalMap.put("conn_tOracleConnection_2", conn_tOracleConnection_2);
	if (null != conn_tOracleConnection_2) {
		
			conn_tOracleConnection_2.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_2",context.db_destino_Server);
        globalMap.put("port_" + "tOracleConnection_2",context.db_destino_Port);
        globalMap.put("dbname_" + "tOracleConnection_2",context.db_destino_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_2", context.db_destino_Schema);
	globalMap.put("username_" + "tOracleConnection_2",context.db_destino_Login);
	globalMap.put("password_" + "tOracleConnection_2",dbPwd_tOracleConnection_2);

 



/**
 * [tOracleConnection_2 begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 


	tos_count_tOracleConnection_2++;

/**
 * [tOracleConnection_2 main ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_2 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 

ok_Hash.put("tOracleConnection_2", true);
end_Hash.put("tOracleConnection_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tOracleConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


//context.FANTERIOR = TalendDate.formatDate("dd-MM-YYYY",TalendDate.addDate(TalendDate.getCurrentDate(),-15,"DD"));

if(!context.ACTUALIZACION_TOTAL){
	//context.CONDICION_CUPSOLICITADOS = " AND TO_CHAR(RC.FMODIFICACION, 'DD-MM-YYYY') = '" + context.FANTERIOR + "' ";
	//context.CONDICION_AUTORIZACIONES = " AND TO_CHAR(RA.FMODIFICACION, 'DD-MM-YYYY') = '" + context.FANTERIOR + "' ";
	
	context.CONDICION_CUPSOLICITADOS = " AND TO_DATE(TO_CHAR(RC.FMODIFICACION,'DD-MM-YYYY'), 'DD-MM-YYYY') >= TO_DATE('" + context.FANTERIOR + "','DD-MM-YYYY')";
	context.CONDICION_AUTORIZACIONES = " AND (TO_DATE(TO_CHAR(RA.FMODIFICACION,'DD-MM-YYYY'), 'DD-MM-YYYY') >= TO_DATE('" + context.FANTERIOR + "','DD-MM-YYYY') OR TO_DATE(TO_CHAR(RC.FMODIFICACION,'DD-MM-YYYY'), 'DD-MM-YYYY') >= TO_DATE('" + context.FANTERIOR + "','DD-MM-YYYY'))";
}


System.out.println("SOL" + context.CONDICION_CUPSOLICITADOS);
System.out.println("AUT" + context.CONDICION_AUTORIZACIONES);

 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tOracleInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal IDENTIFICADOR;

				public BigDecimal getIDENTIFICADOR () {
					return this.IDENTIFICADOR;
				}

				public Boolean IDENTIFICADORIsNullable(){
				    return true;
				}
				public Boolean IDENTIFICADORIsKey(){
				    return false;
				}
				public Integer IDENTIFICADORLength(){
				    return 0;
				}
				public Integer IDENTIFICADORPrecision(){
				    return 0;
				}
				public String IDENTIFICADORDefault(){
				
					return "";
				
				}
				public String IDENTIFICADORComment(){
				
				    return "";
				
				}
				public String IDENTIFICADORPattern(){
				
					return "";
				
				}
				public String IDENTIFICADOROriginalDbColumnName(){
				
					return "IDENTIFICADOR";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.IDENTIFICADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.IDENTIFICADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.IDENTIFICADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IDENTIFICADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",IDENTIFICADOR="+String.valueOf(IDENTIFICADOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_ReferenciayContrarreferencia_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				String driverClass_tOracleInput_1 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_1);
				
			String url_tOracleInput_1 = null;
				url_tOracleInput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";

				String dbUser_tOracleInput_1 = context.db_destino_Login;

				

				
	final String decryptedPassword_tOracleInput_1 = context.db_destino_Password; 

				String dbPwd_tOracleInput_1 = decryptedPassword_tOracleInput_1;

				
					java.util.Properties atnParamsPrope_tOracleInput_1 = new java.util.Properties();
					atnParamsPrope_tOracleInput_1.put("user",dbUser_tOracleInput_1);
					atnParamsPrope_tOracleInput_1.put("password",dbPwd_tOracleInput_1);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleInput_1.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_1 = java.sql.DriverManager.getConnection(url_tOracleInput_1, atnParamsPrope_tOracleInput_1);
				java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_1.next()) {
					sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
				}
                                if (!(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                                }
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement();

		    String dbquery_tOracleInput_1 = "SELECT \n	ID,\n	TO_NUMBER(TO_CHAR(FECHA,'DDMMYYYY')) AS IDENTIFICADOR\nFROM BGEN_TIEMPOS";
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row5.ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row5.ID = rs_tOracleInput_1.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row5.IDENTIFICADOR = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(2) != null) {
						row5.IDENTIFICADOR = rs_tOracleInput_1.getBigDecimal(2);
					} else {
				
						row5.IDENTIFICADOR = null;
					}
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					



    
		row5Struct oneRow_tHashOutput_1 = new row5Struct();
				
					oneRow_tHashOutput_1.ID = row5.ID;
					oneRow_tHashOutput_1.IDENTIFICADOR = row5.IDENTIFICADOR;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
	if(conn_tOracleInput_1 != null && !conn_tOracleInput_1.isClosed()) {
	
			conn_tOracleInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tOracleInput_2Process(globalMap);



/**
 * [tHashOutput_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class SALIDAStruct implements routines.system.IPersistableRow<SALIDAStruct> {
    final static byte[] commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "PK - Llave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal UORGE_ID;

				public BigDecimal getUORGE_ID () {
					return this.UORGE_ID;
				}

				public Boolean UORGE_IDIsNullable(){
				    return true;
				}
				public Boolean UORGE_IDIsKey(){
				    return false;
				}
				public Integer UORGE_IDLength(){
				    return 0;
				}
				public Integer UORGE_IDPrecision(){
				    return null;
				}
				public String UORGE_IDDefault(){
				
					return null;
				
				}
				public String UORGE_IDComment(){
				
				    return "ID de la Unidad Organizacional";
				
				}
				public String UORGE_IDPattern(){
				
					return "";
				
				}
				public String UORGE_IDOriginalDbColumnName(){
				
					return "UORGE_ID";
				
				}

				
			    public BigDecimal PACIENTE_ID;

				public BigDecimal getPACIENTE_ID () {
					return this.PACIENTE_ID;
				}

				public Boolean PACIENTE_IDIsNullable(){
				    return true;
				}
				public Boolean PACIENTE_IDIsKey(){
				    return false;
				}
				public Integer PACIENTE_IDLength(){
				    return 0;
				}
				public Integer PACIENTE_IDPrecision(){
				    return null;
				}
				public String PACIENTE_IDDefault(){
				
					return null;
				
				}
				public String PACIENTE_IDComment(){
				
				    return "Id del paciente";
				
				}
				public String PACIENTE_IDPattern(){
				
					return "";
				
				}
				public String PACIENTE_IDOriginalDbColumnName(){
				
					return "PACIENTE_ID";
				
				}

				
			    public BigDecimal DIAGNOSTICOS_ID;

				public BigDecimal getDIAGNOSTICOS_ID () {
					return this.DIAGNOSTICOS_ID;
				}

				public Boolean DIAGNOSTICOS_IDIsNullable(){
				    return true;
				}
				public Boolean DIAGNOSTICOS_IDIsKey(){
				    return false;
				}
				public Integer DIAGNOSTICOS_IDLength(){
				    return 0;
				}
				public Integer DIAGNOSTICOS_IDPrecision(){
				    return null;
				}
				public String DIAGNOSTICOS_IDDefault(){
				
					return null;
				
				}
				public String DIAGNOSTICOS_IDComment(){
				
				    return "";
				
				}
				public String DIAGNOSTICOS_IDPattern(){
				
					return "";
				
				}
				public String DIAGNOSTICOS_IDOriginalDbColumnName(){
				
					return "DIAGNOSTICOS_ID";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return null;
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return true;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return null;
				
				}
				public String CUPS_IDComment(){
				
				    return "Id de CUPS solicitado";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public BigDecimal PROFESIONAL_ID;

				public BigDecimal getPROFESIONAL_ID () {
					return this.PROFESIONAL_ID;
				}

				public Boolean PROFESIONAL_IDIsNullable(){
				    return true;
				}
				public Boolean PROFESIONAL_IDIsKey(){
				    return false;
				}
				public Integer PROFESIONAL_IDLength(){
				    return 0;
				}
				public Integer PROFESIONAL_IDPrecision(){
				    return null;
				}
				public String PROFESIONAL_IDDefault(){
				
					return null;
				
				}
				public String PROFESIONAL_IDComment(){
				
				    return "Id del profesional que solicita";
				
				}
				public String PROFESIONAL_IDPattern(){
				
					return "";
				
				}
				public String PROFESIONAL_IDOriginalDbColumnName(){
				
					return "PROFESIONAL_ID";
				
				}

				
			    public BigDecimal TIEMPOA_ID;

				public BigDecimal getTIEMPOA_ID () {
					return this.TIEMPOA_ID;
				}

				public Boolean TIEMPOA_IDIsNullable(){
				    return true;
				}
				public Boolean TIEMPOA_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOA_IDLength(){
				    return 0;
				}
				public Integer TIEMPOA_IDPrecision(){
				    return null;
				}
				public String TIEMPOA_IDDefault(){
				
					return null;
				
				}
				public String TIEMPOA_IDComment(){
				
				    return "ID tiempos de la autorizaci\u00F3n";
				
				}
				public String TIEMPOA_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOA_IDOriginalDbColumnName(){
				
					return "TIEMPOA_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 20;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "Estado de la autorizaci\u00F3n";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String CLASIFICACION;

				public String getCLASIFICACION () {
					return this.CLASIFICACION;
				}

				public Boolean CLASIFICACIONIsNullable(){
				    return true;
				}
				public Boolean CLASIFICACIONIsKey(){
				    return false;
				}
				public Integer CLASIFICACIONLength(){
				    return 20;
				}
				public Integer CLASIFICACIONPrecision(){
				    return 0;
				}
				public String CLASIFICACIONDefault(){
				
					return null;
				
				}
				public String CLASIFICACIONComment(){
				
				    return "";
				
				}
				public String CLASIFICACIONPattern(){
				
					return "";
				
				}
				public String CLASIFICACIONOriginalDbColumnName(){
				
					return "CLASIFICACION";
				
				}

				
			    public java.util.Date FECHA_TUTELA;

				public java.util.Date getFECHA_TUTELA () {
					return this.FECHA_TUTELA;
				}

				public Boolean FECHA_TUTELAIsNullable(){
				    return true;
				}
				public Boolean FECHA_TUTELAIsKey(){
				    return false;
				}
				public Integer FECHA_TUTELALength(){
				    return 11;
				}
				public Integer FECHA_TUTELAPrecision(){
				    return 6;
				}
				public String FECHA_TUTELADefault(){
				
					return null;
				
				}
				public String FECHA_TUTELAComment(){
				
				    return "Fecha de la tutela, si aplica tutela.";
				
				}
				public String FECHA_TUTELAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_TUTELAOriginalDbColumnName(){
				
					return "FECHA_TUTELA";
				
				}

				
			    public String NUMERO_ACTA;

				public String getNUMERO_ACTA () {
					return this.NUMERO_ACTA;
				}

				public Boolean NUMERO_ACTAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_ACTAIsKey(){
				    return false;
				}
				public Integer NUMERO_ACTALength(){
				    return 500;
				}
				public Integer NUMERO_ACTAPrecision(){
				    return 0;
				}
				public String NUMERO_ACTADefault(){
				
					return null;
				
				}
				public String NUMERO_ACTAComment(){
				
				    return "N\u00FAmero de acta";
				
				}
				public String NUMERO_ACTAPattern(){
				
					return "";
				
				}
				public String NUMERO_ACTAOriginalDbColumnName(){
				
					return "NUMERO_ACTA";
				
				}

				
			    public String OBSERVACION;

				public String getOBSERVACION () {
					return this.OBSERVACION;
				}

				public Boolean OBSERVACIONIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONIsKey(){
				    return false;
				}
				public Integer OBSERVACIONLength(){
				    return 4000;
				}
				public Integer OBSERVACIONPrecision(){
				    return 0;
				}
				public String OBSERVACIONDefault(){
				
					return null;
				
				}
				public String OBSERVACIONComment(){
				
				    return "Observacion de la autorizaci\u00F3n";
				
				}
				public String OBSERVACIONPattern(){
				
					return "";
				
				}
				public String OBSERVACIONOriginalDbColumnName(){
				
					return "OBSERVACION";
				
				}

				
			    public BigDecimal NOMBRE_AUTORIZA;

				public BigDecimal getNOMBRE_AUTORIZA () {
					return this.NOMBRE_AUTORIZA;
				}

				public Boolean NOMBRE_AUTORIZAIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_AUTORIZAIsKey(){
				    return false;
				}
				public Integer NOMBRE_AUTORIZALength(){
				    return 0;
				}
				public Integer NOMBRE_AUTORIZAPrecision(){
				    return null;
				}
				public String NOMBRE_AUTORIZADefault(){
				
					return null;
				
				}
				public String NOMBRE_AUTORIZAComment(){
				
				    return "Nombre del usuario que autoriza";
				
				}
				public String NOMBRE_AUTORIZAPattern(){
				
					return "";
				
				}
				public String NOMBRE_AUTORIZAOriginalDbColumnName(){
				
					return "NOMBRE_AUTORIZA";
				
				}

				
			    public String AMBULANCIA;

				public String getAMBULANCIA () {
					return this.AMBULANCIA;
				}

				public Boolean AMBULANCIAIsNullable(){
				    return true;
				}
				public Boolean AMBULANCIAIsKey(){
				    return false;
				}
				public Integer AMBULANCIALength(){
				    return 50;
				}
				public Integer AMBULANCIAPrecision(){
				    return 0;
				}
				public String AMBULANCIADefault(){
				
					return null;
				
				}
				public String AMBULANCIAComment(){
				
				    return "";
				
				}
				public String AMBULANCIAPattern(){
				
					return "";
				
				}
				public String AMBULANCIAOriginalDbColumnName(){
				
					return "AMBULANCIA";
				
				}

				
			    public java.util.Date VENCIMIENTO;

				public java.util.Date getVENCIMIENTO () {
					return this.VENCIMIENTO;
				}

				public Boolean VENCIMIENTOIsNullable(){
				    return true;
				}
				public Boolean VENCIMIENTOIsKey(){
				    return false;
				}
				public Integer VENCIMIENTOLength(){
				    return 7;
				}
				public Integer VENCIMIENTOPrecision(){
				    return 0;
				}
				public String VENCIMIENTODefault(){
				
					return null;
				
				}
				public String VENCIMIENTOComment(){
				
				    return "";
				
				}
				public String VENCIMIENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VENCIMIENTOOriginalDbColumnName(){
				
					return "VENCIMIENTO";
				
				}

				
			    public BigDecimal PRORROGAS;

				public BigDecimal getPRORROGAS () {
					return this.PRORROGAS;
				}

				public Boolean PRORROGASIsNullable(){
				    return true;
				}
				public Boolean PRORROGASIsKey(){
				    return false;
				}
				public Integer PRORROGASLength(){
				    return 0;
				}
				public Integer PRORROGASPrecision(){
				    return null;
				}
				public String PRORROGASDefault(){
				
					return null;
				
				}
				public String PRORROGASComment(){
				
				    return "";
				
				}
				public String PRORROGASPattern(){
				
					return "";
				
				}
				public String PRORROGASOriginalDbColumnName(){
				
					return "PRORROGAS";
				
				}

				
			    public String MODO;

				public String getMODO () {
					return this.MODO;
				}

				public Boolean MODOIsNullable(){
				    return true;
				}
				public Boolean MODOIsKey(){
				    return false;
				}
				public Integer MODOLength(){
				    return 20;
				}
				public Integer MODOPrecision(){
				    return 0;
				}
				public String MODODefault(){
				
					return null;
				
				}
				public String MODOComment(){
				
				    return "";
				
				}
				public String MODOPattern(){
				
					return "";
				
				}
				public String MODOOriginalDbColumnName(){
				
					return "MODO";
				
				}

				
			    public String CODIGO_ACEPTACION;

				public String getCODIGO_ACEPTACION () {
					return this.CODIGO_ACEPTACION;
				}

				public Boolean CODIGO_ACEPTACIONIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ACEPTACIONIsKey(){
				    return false;
				}
				public Integer CODIGO_ACEPTACIONLength(){
				    return 2500;
				}
				public Integer CODIGO_ACEPTACIONPrecision(){
				    return 0;
				}
				public String CODIGO_ACEPTACIONDefault(){
				
					return null;
				
				}
				public String CODIGO_ACEPTACIONComment(){
				
				    return "";
				
				}
				public String CODIGO_ACEPTACIONPattern(){
				
					return "";
				
				}
				public String CODIGO_ACEPTACIONOriginalDbColumnName(){
				
					return "CODIGO_ACEPTACION";
				
				}

				
			    public String JUSTIFICAICON_ANULACION;

				public String getJUSTIFICAICON_ANULACION () {
					return this.JUSTIFICAICON_ANULACION;
				}

				public Boolean JUSTIFICAICON_ANULACIONIsNullable(){
				    return true;
				}
				public Boolean JUSTIFICAICON_ANULACIONIsKey(){
				    return false;
				}
				public Integer JUSTIFICAICON_ANULACIONLength(){
				    return 4000;
				}
				public Integer JUSTIFICAICON_ANULACIONPrecision(){
				    return 0;
				}
				public String JUSTIFICAICON_ANULACIONDefault(){
				
					return null;
				
				}
				public String JUSTIFICAICON_ANULACIONComment(){
				
				    return "";
				
				}
				public String JUSTIFICAICON_ANULACIONPattern(){
				
					return "";
				
				}
				public String JUSTIFICAICON_ANULACIONOriginalDbColumnName(){
				
					return "JUSTIFICAICON_ANULACION";
				
				}

				
			    public String RESOLICION_TUTELA;

				public String getRESOLICION_TUTELA () {
					return this.RESOLICION_TUTELA;
				}

				public Boolean RESOLICION_TUTELAIsNullable(){
				    return true;
				}
				public Boolean RESOLICION_TUTELAIsKey(){
				    return false;
				}
				public Integer RESOLICION_TUTELALength(){
				    return 4000;
				}
				public Integer RESOLICION_TUTELAPrecision(){
				    return 0;
				}
				public String RESOLICION_TUTELADefault(){
				
					return null;
				
				}
				public String RESOLICION_TUTELAComment(){
				
				    return "";
				
				}
				public String RESOLICION_TUTELAPattern(){
				
					return "";
				
				}
				public String RESOLICION_TUTELAOriginalDbColumnName(){
				
					return "RESOLICION_TUTELA";
				
				}

				
			    public String JUSTIFICAICON_NOFAVORABLE;

				public String getJUSTIFICAICON_NOFAVORABLE () {
					return this.JUSTIFICAICON_NOFAVORABLE;
				}

				public Boolean JUSTIFICAICON_NOFAVORABLEIsNullable(){
				    return true;
				}
				public Boolean JUSTIFICAICON_NOFAVORABLEIsKey(){
				    return false;
				}
				public Integer JUSTIFICAICON_NOFAVORABLELength(){
				    return 4000;
				}
				public Integer JUSTIFICAICON_NOFAVORABLEPrecision(){
				    return 0;
				}
				public String JUSTIFICAICON_NOFAVORABLEDefault(){
				
					return null;
				
				}
				public String JUSTIFICAICON_NOFAVORABLEComment(){
				
				    return "";
				
				}
				public String JUSTIFICAICON_NOFAVORABLEPattern(){
				
					return "";
				
				}
				public String JUSTIFICAICON_NOFAVORABLEOriginalDbColumnName(){
				
					return "JUSTIFICAICON_NOFAVORABLE";
				
				}

				
			    public BigDecimal UORGO_ID;

				public BigDecimal getUORGO_ID () {
					return this.UORGO_ID;
				}

				public Boolean UORGO_IDIsNullable(){
				    return true;
				}
				public Boolean UORGO_IDIsKey(){
				    return false;
				}
				public Integer UORGO_IDLength(){
				    return 0;
				}
				public Integer UORGO_IDPrecision(){
				    return null;
				}
				public String UORGO_IDDefault(){
				
					return null;
				
				}
				public String UORGO_IDComment(){
				
				    return "";
				
				}
				public String UORGO_IDPattern(){
				
					return "";
				
				}
				public String UORGO_IDOriginalDbColumnName(){
				
					return "UORGO_ID";
				
				}

				
			    public BigDecimal VALOR_TOTAL;

				public BigDecimal getVALOR_TOTAL () {
					return this.VALOR_TOTAL;
				}

				public Boolean VALOR_TOTALIsNullable(){
				    return true;
				}
				public Boolean VALOR_TOTALIsKey(){
				    return false;
				}
				public Integer VALOR_TOTALLength(){
				    return 0;
				}
				public Integer VALOR_TOTALPrecision(){
				    return null;
				}
				public String VALOR_TOTALDefault(){
				
					return null;
				
				}
				public String VALOR_TOTALComment(){
				
				    return "";
				
				}
				public String VALOR_TOTALPattern(){
				
					return "";
				
				}
				public String VALOR_TOTALOriginalDbColumnName(){
				
					return "VALOR_TOTAL";
				
				}

				
			    public BigDecimal VALOR_UNITARIO;

				public BigDecimal getVALOR_UNITARIO () {
					return this.VALOR_UNITARIO;
				}

				public Boolean VALOR_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_UNITARIOIsKey(){
				    return false;
				}
				public Integer VALOR_UNITARIOLength(){
				    return 0;
				}
				public Integer VALOR_UNITARIOPrecision(){
				    return null;
				}
				public String VALOR_UNITARIODefault(){
				
					return null;
				
				}
				public String VALOR_UNITARIOComment(){
				
				    return "";
				
				}
				public String VALOR_UNITARIOPattern(){
				
					return "";
				
				}
				public String VALOR_UNITARIOOriginalDbColumnName(){
				
					return "VALOR_UNITARIO";
				
				}

				
			    public BigDecimal CANTIDAD;

				public BigDecimal getCANTIDAD () {
					return this.CANTIDAD;
				}

				public Boolean CANTIDADIsNullable(){
				    return true;
				}
				public Boolean CANTIDADIsKey(){
				    return false;
				}
				public Integer CANTIDADLength(){
				    return 0;
				}
				public Integer CANTIDADPrecision(){
				    return null;
				}
				public String CANTIDADDefault(){
				
					return null;
				
				}
				public String CANTIDADComment(){
				
				    return "";
				
				}
				public String CANTIDADPattern(){
				
					return "";
				
				}
				public String CANTIDADOriginalDbColumnName(){
				
					return "CANTIDAD";
				
				}

				
			    public String ORIGEN;

				public String getORIGEN () {
					return this.ORIGEN;
				}

				public Boolean ORIGENIsNullable(){
				    return true;
				}
				public Boolean ORIGENIsKey(){
				    return false;
				}
				public Integer ORIGENLength(){
				    return 50;
				}
				public Integer ORIGENPrecision(){
				    return 0;
				}
				public String ORIGENDefault(){
				
					return null;
				
				}
				public String ORIGENComment(){
				
				    return "";
				
				}
				public String ORIGENPattern(){
				
					return "";
				
				}
				public String ORIGENOriginalDbColumnName(){
				
					return "ORIGEN";
				
				}

				
			    public java.util.Date FECHA_SOLICITUD;

				public java.util.Date getFECHA_SOLICITUD () {
					return this.FECHA_SOLICITUD;
				}

				public Boolean FECHA_SOLICITUDIsNullable(){
				    return true;
				}
				public Boolean FECHA_SOLICITUDIsKey(){
				    return false;
				}
				public Integer FECHA_SOLICITUDLength(){
				    return 7;
				}
				public Integer FECHA_SOLICITUDPrecision(){
				    return 0;
				}
				public String FECHA_SOLICITUDDefault(){
				
					return null;
				
				}
				public String FECHA_SOLICITUDComment(){
				
				    return "";
				
				}
				public String FECHA_SOLICITUDPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_SOLICITUDOriginalDbColumnName(){
				
					return "FECHA_SOLICITUD";
				
				}

				
			    public String TIPO_SOLICITUD;

				public String getTIPO_SOLICITUD () {
					return this.TIPO_SOLICITUD;
				}

				public Boolean TIPO_SOLICITUDIsNullable(){
				    return true;
				}
				public Boolean TIPO_SOLICITUDIsKey(){
				    return false;
				}
				public Integer TIPO_SOLICITUDLength(){
				    return 50;
				}
				public Integer TIPO_SOLICITUDPrecision(){
				    return 0;
				}
				public String TIPO_SOLICITUDDefault(){
				
					return null;
				
				}
				public String TIPO_SOLICITUDComment(){
				
				    return "";
				
				}
				public String TIPO_SOLICITUDPattern(){
				
					return "";
				
				}
				public String TIPO_SOLICITUDOriginalDbColumnName(){
				
					return "TIPO_SOLICITUD";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 1;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return 0;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "1";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public BigDecimal UORG_REGISTRA_ID;

				public BigDecimal getUORG_REGISTRA_ID () {
					return this.UORG_REGISTRA_ID;
				}

				public Boolean UORG_REGISTRA_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_REGISTRA_IDIsKey(){
				    return false;
				}
				public Integer UORG_REGISTRA_IDLength(){
				    return 0;
				}
				public Integer UORG_REGISTRA_IDPrecision(){
				    return null;
				}
				public String UORG_REGISTRA_IDDefault(){
				
					return null;
				
				}
				public String UORG_REGISTRA_IDComment(){
				
				    return "";
				
				}
				public String UORG_REGISTRA_IDPattern(){
				
					return "";
				
				}
				public String UORG_REGISTRA_IDOriginalDbColumnName(){
				
					return "UORG_REGISTRA_ID";
				
				}

				
			    public String OBSERVACIONAUT;

				public String getOBSERVACIONAUT () {
					return this.OBSERVACIONAUT;
				}

				public Boolean OBSERVACIONAUTIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONAUTIsKey(){
				    return false;
				}
				public Integer OBSERVACIONAUTLength(){
				    return 4000;
				}
				public Integer OBSERVACIONAUTPrecision(){
				    return 0;
				}
				public String OBSERVACIONAUTDefault(){
				
					return null;
				
				}
				public String OBSERVACIONAUTComment(){
				
				    return "Obervaciones de la solicitud";
				
				}
				public String OBSERVACIONAUTPattern(){
				
					return "";
				
				}
				public String OBSERVACIONAUTOriginalDbColumnName(){
				
					return "OBSERVACIONAUT";
				
				}

				
			    public String DRELACIONADO1;

				public String getDRELACIONADO1 () {
					return this.DRELACIONADO1;
				}

				public Boolean DRELACIONADO1IsNullable(){
				    return true;
				}
				public Boolean DRELACIONADO1IsKey(){
				    return false;
				}
				public Integer DRELACIONADO1Length(){
				    return 200;
				}
				public Integer DRELACIONADO1Precision(){
				    return 0;
				}
				public String DRELACIONADO1Default(){
				
					return null;
				
				}
				public String DRELACIONADO1Comment(){
				
				    return "";
				
				}
				public String DRELACIONADO1Pattern(){
				
					return "";
				
				}
				public String DRELACIONADO1OriginalDbColumnName(){
				
					return "DRELACIONADO1";
				
				}

				
			    public String DRELACIONADO2;

				public String getDRELACIONADO2 () {
					return this.DRELACIONADO2;
				}

				public Boolean DRELACIONADO2IsNullable(){
				    return true;
				}
				public Boolean DRELACIONADO2IsKey(){
				    return false;
				}
				public Integer DRELACIONADO2Length(){
				    return 200;
				}
				public Integer DRELACIONADO2Precision(){
				    return 0;
				}
				public String DRELACIONADO2Default(){
				
					return null;
				
				}
				public String DRELACIONADO2Comment(){
				
				    return "";
				
				}
				public String DRELACIONADO2Pattern(){
				
					return "";
				
				}
				public String DRELACIONADO2OriginalDbColumnName(){
				
					return "DRELACIONADO2";
				
				}

				
			    public String DRELACIONADO3;

				public String getDRELACIONADO3 () {
					return this.DRELACIONADO3;
				}

				public Boolean DRELACIONADO3IsNullable(){
				    return true;
				}
				public Boolean DRELACIONADO3IsKey(){
				    return false;
				}
				public Integer DRELACIONADO3Length(){
				    return 200;
				}
				public Integer DRELACIONADO3Precision(){
				    return 0;
				}
				public String DRELACIONADO3Default(){
				
					return null;
				
				}
				public String DRELACIONADO3Comment(){
				
				    return "";
				
				}
				public String DRELACIONADO3Pattern(){
				
					return "";
				
				}
				public String DRELACIONADO3OriginalDbColumnName(){
				
					return "DRELACIONADO3";
				
				}

				
			    public String DESCRIPCION1;

				public String getDESCRIPCION1 () {
					return this.DESCRIPCION1;
				}

				public Boolean DESCRIPCION1IsNullable(){
				    return true;
				}
				public Boolean DESCRIPCION1IsKey(){
				    return false;
				}
				public Integer DESCRIPCION1Length(){
				    return 200;
				}
				public Integer DESCRIPCION1Precision(){
				    return 0;
				}
				public String DESCRIPCION1Default(){
				
					return null;
				
				}
				public String DESCRIPCION1Comment(){
				
				    return "";
				
				}
				public String DESCRIPCION1Pattern(){
				
					return "";
				
				}
				public String DESCRIPCION1OriginalDbColumnName(){
				
					return "DESCRIPCION1";
				
				}

				
			    public String DESCRIPCION2;

				public String getDESCRIPCION2 () {
					return this.DESCRIPCION2;
				}

				public Boolean DESCRIPCION2IsNullable(){
				    return true;
				}
				public Boolean DESCRIPCION2IsKey(){
				    return false;
				}
				public Integer DESCRIPCION2Length(){
				    return 200;
				}
				public Integer DESCRIPCION2Precision(){
				    return 0;
				}
				public String DESCRIPCION2Default(){
				
					return null;
				
				}
				public String DESCRIPCION2Comment(){
				
				    return "";
				
				}
				public String DESCRIPCION2Pattern(){
				
					return "";
				
				}
				public String DESCRIPCION2OriginalDbColumnName(){
				
					return "DESCRIPCION2";
				
				}

				
			    public String DESCRIPCION3;

				public String getDESCRIPCION3 () {
					return this.DESCRIPCION3;
				}

				public Boolean DESCRIPCION3IsNullable(){
				    return true;
				}
				public Boolean DESCRIPCION3IsKey(){
				    return false;
				}
				public Integer DESCRIPCION3Length(){
				    return 200;
				}
				public Integer DESCRIPCION3Precision(){
				    return 0;
				}
				public String DESCRIPCION3Default(){
				
					return null;
				
				}
				public String DESCRIPCION3Comment(){
				
				    return "";
				
				}
				public String DESCRIPCION3Pattern(){
				
					return "";
				
				}
				public String DESCRIPCION3OriginalDbColumnName(){
				
					return "DESCRIPCION3";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return null;
				}
				public String EDADDefault(){
				
					return null;
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public BigDecimal DIGITADOR;

				public BigDecimal getDIGITADOR () {
					return this.DIGITADOR;
				}

				public Boolean DIGITADORIsNullable(){
				    return true;
				}
				public Boolean DIGITADORIsKey(){
				    return false;
				}
				public Integer DIGITADORLength(){
				    return 0;
				}
				public Integer DIGITADORPrecision(){
				    return null;
				}
				public String DIGITADORDefault(){
				
					return null;
				
				}
				public String DIGITADORComment(){
				
				    return "";
				
				}
				public String DIGITADORPattern(){
				
					return "";
				
				}
				public String DIGITADOROriginalDbColumnName(){
				
					return "DIGITADOR";
				
				}

				
			    public BigDecimal PARENTESCO_ID;

				public BigDecimal getPARENTESCO_ID () {
					return this.PARENTESCO_ID;
				}

				public Boolean PARENTESCO_IDIsNullable(){
				    return true;
				}
				public Boolean PARENTESCO_IDIsKey(){
				    return false;
				}
				public Integer PARENTESCO_IDLength(){
				    return 0;
				}
				public Integer PARENTESCO_IDPrecision(){
				    return null;
				}
				public String PARENTESCO_IDDefault(){
				
					return null;
				
				}
				public String PARENTESCO_IDComment(){
				
				    return "";
				
				}
				public String PARENTESCO_IDPattern(){
				
					return "";
				
				}
				public String PARENTESCO_IDOriginalDbColumnName(){
				
					return "PARENTESCO_ID";
				
				}

				
			    public BigDecimal ESPCSOLICITA;

				public BigDecimal getESPCSOLICITA () {
					return this.ESPCSOLICITA;
				}

				public Boolean ESPCSOLICITAIsNullable(){
				    return true;
				}
				public Boolean ESPCSOLICITAIsKey(){
				    return false;
				}
				public Integer ESPCSOLICITALength(){
				    return 0;
				}
				public Integer ESPCSOLICITAPrecision(){
				    return null;
				}
				public String ESPCSOLICITADefault(){
				
					return null;
				
				}
				public String ESPCSOLICITAComment(){
				
				    return "";
				
				}
				public String ESPCSOLICITAPattern(){
				
					return "";
				
				}
				public String ESPCSOLICITAOriginalDbColumnName(){
				
					return "ESPCSOLICITA";
				
				}

				
			    public BigDecimal PROCESOSASISTENCIALES_ID;

				public BigDecimal getPROCESOSASISTENCIALES_ID () {
					return this.PROCESOSASISTENCIALES_ID;
				}

				public Boolean PROCESOSASISTENCIALES_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOSASISTENCIALES_IDIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALES_IDLength(){
				    return 0;
				}
				public Integer PROCESOSASISTENCIALES_IDPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALES_IDDefault(){
				
					return null;
				
				}
				public String PROCESOSASISTENCIALES_IDComment(){
				
				    return "Proceso asistencial que origina la solicitud";
				
				}
				public String PROCESOSASISTENCIALES_IDPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIALES_ID";
				
				}

				
			    public String UBICACION_PACIENTE;

				public String getUBICACION_PACIENTE () {
					return this.UBICACION_PACIENTE;
				}

				public Boolean UBICACION_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean UBICACION_PACIENTEIsKey(){
				    return false;
				}
				public Integer UBICACION_PACIENTELength(){
				    return 50;
				}
				public Integer UBICACION_PACIENTEPrecision(){
				    return 0;
				}
				public String UBICACION_PACIENTEDefault(){
				
					return null;
				
				}
				public String UBICACION_PACIENTEComment(){
				
				    return "";
				
				}
				public String UBICACION_PACIENTEPattern(){
				
					return "";
				
				}
				public String UBICACION_PACIENTEOriginalDbColumnName(){
				
					return "UBICACION_PACIENTE";
				
				}

				
			    public String CAUTORIZACION;

				public String getCAUTORIZACION () {
					return this.CAUTORIZACION;
				}

				public Boolean CAUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean CAUTORIZACIONIsKey(){
				    return false;
				}
				public Integer CAUTORIZACIONLength(){
				    return 200;
				}
				public Integer CAUTORIZACIONPrecision(){
				    return 0;
				}
				public String CAUTORIZACIONDefault(){
				
					return null;
				
				}
				public String CAUTORIZACIONComment(){
				
				    return "Consecutivo de la autorizaci\u00F3n";
				
				}
				public String CAUTORIZACIONPattern(){
				
					return "";
				
				}
				public String CAUTORIZACIONOriginalDbColumnName(){
				
					return "CAUTORIZACION";
				
				}

				
			    public String CSOLICITUD;

				public String getCSOLICITUD () {
					return this.CSOLICITUD;
				}

				public Boolean CSOLICITUDIsNullable(){
				    return true;
				}
				public Boolean CSOLICITUDIsKey(){
				    return false;
				}
				public Integer CSOLICITUDLength(){
				    return 200;
				}
				public Integer CSOLICITUDPrecision(){
				    return 0;
				}
				public String CSOLICITUDDefault(){
				
					return null;
				
				}
				public String CSOLICITUDComment(){
				
				    return "Consecutivo de la solicitud";
				
				}
				public String CSOLICITUDPattern(){
				
					return "";
				
				}
				public String CSOLICITUDOriginalDbColumnName(){
				
					return "CSOLICITUD";
				
				}

				
			    public String PYP_SIGLA;

				public String getPYP_SIGLA () {
					return this.PYP_SIGLA;
				}

				public Boolean PYP_SIGLAIsNullable(){
				    return true;
				}
				public Boolean PYP_SIGLAIsKey(){
				    return false;
				}
				public Integer PYP_SIGLALength(){
				    return 20;
				}
				public Integer PYP_SIGLAPrecision(){
				    return 0;
				}
				public String PYP_SIGLADefault(){
				
					return null;
				
				}
				public String PYP_SIGLAComment(){
				
				    return "";
				
				}
				public String PYP_SIGLAPattern(){
				
					return "";
				
				}
				public String PYP_SIGLAOriginalDbColumnName(){
				
					return "PYP_SIGLA";
				
				}

				
			    public String RESOLUCION_TUTELAS;

				public String getRESOLUCION_TUTELAS () {
					return this.RESOLUCION_TUTELAS;
				}

				public Boolean RESOLUCION_TUTELASIsNullable(){
				    return true;
				}
				public Boolean RESOLUCION_TUTELASIsKey(){
				    return false;
				}
				public Integer RESOLUCION_TUTELASLength(){
				    return 4000;
				}
				public Integer RESOLUCION_TUTELASPrecision(){
				    return 0;
				}
				public String RESOLUCION_TUTELASDefault(){
				
					return null;
				
				}
				public String RESOLUCION_TUTELASComment(){
				
				    return "";
				
				}
				public String RESOLUCION_TUTELASPattern(){
				
					return "";
				
				}
				public String RESOLUCION_TUTELASOriginalDbColumnName(){
				
					return "RESOLUCION_TUTELAS";
				
				}

				
			    public BigDecimal PRESPONSABLE;

				public BigDecimal getPRESPONSABLE () {
					return this.PRESPONSABLE;
				}

				public Boolean PRESPONSABLEIsNullable(){
				    return true;
				}
				public Boolean PRESPONSABLEIsKey(){
				    return false;
				}
				public Integer PRESPONSABLELength(){
				    return 0;
				}
				public Integer PRESPONSABLEPrecision(){
				    return null;
				}
				public String PRESPONSABLEDefault(){
				
					return null;
				
				}
				public String PRESPONSABLEComment(){
				
				    return "";
				
				}
				public String PRESPONSABLEPattern(){
				
					return "";
				
				}
				public String PRESPONSABLEOriginalDbColumnName(){
				
					return "PRESPONSABLE";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 4000;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "Obervaciones de la solicitud";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return true;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return 0;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return null;
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public String OBSERVACIONES_AUTORIZACION;

				public String getOBSERVACIONES_AUTORIZACION () {
					return this.OBSERVACIONES_AUTORIZACION;
				}

				public Boolean OBSERVACIONES_AUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONES_AUTORIZACIONIsKey(){
				    return false;
				}
				public Integer OBSERVACIONES_AUTORIZACIONLength(){
				    return 4000;
				}
				public Integer OBSERVACIONES_AUTORIZACIONPrecision(){
				    return 0;
				}
				public String OBSERVACIONES_AUTORIZACIONDefault(){
				
					return null;
				
				}
				public String OBSERVACIONES_AUTORIZACIONComment(){
				
				    return "";
				
				}
				public String OBSERVACIONES_AUTORIZACIONPattern(){
				
					return "";
				
				}
				public String OBSERVACIONES_AUTORIZACIONOriginalDbColumnName(){
				
					return "OBSERVACIONES_AUTORIZACION";
				
				}

				
			    public java.util.Date FECHA_AUTORIZACION;

				public java.util.Date getFECHA_AUTORIZACION () {
					return this.FECHA_AUTORIZACION;
				}

				public Boolean FECHA_AUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_AUTORIZACIONIsKey(){
				    return false;
				}
				public Integer FECHA_AUTORIZACIONLength(){
				    return 7;
				}
				public Integer FECHA_AUTORIZACIONPrecision(){
				    return 0;
				}
				public String FECHA_AUTORIZACIONDefault(){
				
					return null;
				
				}
				public String FECHA_AUTORIZACIONComment(){
				
				    return "";
				
				}
				public String FECHA_AUTORIZACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_AUTORIZACIONOriginalDbColumnName(){
				
					return "FECHA_AUTORIZACION";
				
				}

				
			    public BigDecimal AUTORIZADOR;

				public BigDecimal getAUTORIZADOR () {
					return this.AUTORIZADOR;
				}

				public Boolean AUTORIZADORIsNullable(){
				    return true;
				}
				public Boolean AUTORIZADORIsKey(){
				    return false;
				}
				public Integer AUTORIZADORLength(){
				    return 0;
				}
				public Integer AUTORIZADORPrecision(){
				    return null;
				}
				public String AUTORIZADORDefault(){
				
					return null;
				
				}
				public String AUTORIZADORComment(){
				
				    return "";
				
				}
				public String AUTORIZADORPattern(){
				
					return "";
				
				}
				public String AUTORIZADOROriginalDbColumnName(){
				
					return "AUTORIZADOR";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final SALIDAStruct other = (SALIDAStruct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(SALIDAStruct other) {

		other.ID = this.ID;
	            other.UORGE_ID = this.UORGE_ID;
	            other.PACIENTE_ID = this.PACIENTE_ID;
	            other.DIAGNOSTICOS_ID = this.DIAGNOSTICOS_ID;
	            other.ESPECIALIDADES_ID = this.ESPECIALIDADES_ID;
	            other.CUPS_ID = this.CUPS_ID;
	            other.PROFESIONAL_ID = this.PROFESIONAL_ID;
	            other.TIEMPOA_ID = this.TIEMPOA_ID;
	            other.ESTADO = this.ESTADO;
	            other.CLASIFICACION = this.CLASIFICACION;
	            other.FECHA_TUTELA = this.FECHA_TUTELA;
	            other.NUMERO_ACTA = this.NUMERO_ACTA;
	            other.OBSERVACION = this.OBSERVACION;
	            other.NOMBRE_AUTORIZA = this.NOMBRE_AUTORIZA;
	            other.AMBULANCIA = this.AMBULANCIA;
	            other.VENCIMIENTO = this.VENCIMIENTO;
	            other.PRORROGAS = this.PRORROGAS;
	            other.MODO = this.MODO;
	            other.CODIGO_ACEPTACION = this.CODIGO_ACEPTACION;
	            other.JUSTIFICAICON_ANULACION = this.JUSTIFICAICON_ANULACION;
	            other.RESOLICION_TUTELA = this.RESOLICION_TUTELA;
	            other.JUSTIFICAICON_NOFAVORABLE = this.JUSTIFICAICON_NOFAVORABLE;
	            other.UORGO_ID = this.UORGO_ID;
	            other.VALOR_TOTAL = this.VALOR_TOTAL;
	            other.VALOR_UNITARIO = this.VALOR_UNITARIO;
	            other.CANTIDAD = this.CANTIDAD;
	            other.ORIGEN = this.ORIGEN;
	            other.FECHA_SOLICITUD = this.FECHA_SOLICITUD;
	            other.TIPO_SOLICITUD = this.TIPO_SOLICITUD;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            other.UORG_REGISTRA_ID = this.UORG_REGISTRA_ID;
	            other.OBSERVACIONAUT = this.OBSERVACIONAUT;
	            other.DRELACIONADO1 = this.DRELACIONADO1;
	            other.DRELACIONADO2 = this.DRELACIONADO2;
	            other.DRELACIONADO3 = this.DRELACIONADO3;
	            other.DESCRIPCION1 = this.DESCRIPCION1;
	            other.DESCRIPCION2 = this.DESCRIPCION2;
	            other.DESCRIPCION3 = this.DESCRIPCION3;
	            other.EDAD = this.EDAD;
	            other.DIGITADOR = this.DIGITADOR;
	            other.PARENTESCO_ID = this.PARENTESCO_ID;
	            other.ESPCSOLICITA = this.ESPCSOLICITA;
	            other.PROCESOSASISTENCIALES_ID = this.PROCESOSASISTENCIALES_ID;
	            other.UBICACION_PACIENTE = this.UBICACION_PACIENTE;
	            other.CAUTORIZACION = this.CAUTORIZACION;
	            other.CSOLICITUD = this.CSOLICITUD;
	            other.PYP_SIGLA = this.PYP_SIGLA;
	            other.RESOLUCION_TUTELAS = this.RESOLUCION_TUTELAS;
	            other.PRESPONSABLE = this.PRESPONSABLE;
	            other.OBSERVACIONES = this.OBSERVACIONES;
	            other.TIEMPOS_ID = this.TIEMPOS_ID;
	            other.OBSERVACIONES_AUTORIZACION = this.OBSERVACIONES_AUTORIZACION;
	            other.FECHA_AUTORIZACION = this.FECHA_AUTORIZACION;
	            other.AUTORIZADOR = this.AUTORIZADOR;
	            
	}

	public void copyKeysDataTo(SALIDAStruct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length == 0) {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length == 0) {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.UORGE_ID = (BigDecimal) dis.readObject();
					
						this.PACIENTE_ID = (BigDecimal) dis.readObject();
					
						this.DIAGNOSTICOS_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOA_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.CLASIFICACION = readString(dis);
					
					this.FECHA_TUTELA = readDate(dis);
					
					this.NUMERO_ACTA = readString(dis);
					
					this.OBSERVACION = readString(dis);
					
						this.NOMBRE_AUTORIZA = (BigDecimal) dis.readObject();
					
					this.AMBULANCIA = readString(dis);
					
					this.VENCIMIENTO = readDate(dis);
					
						this.PRORROGAS = (BigDecimal) dis.readObject();
					
					this.MODO = readString(dis);
					
					this.CODIGO_ACEPTACION = readString(dis);
					
					this.JUSTIFICAICON_ANULACION = readString(dis);
					
					this.RESOLICION_TUTELA = readString(dis);
					
					this.JUSTIFICAICON_NOFAVORABLE = readString(dis);
					
						this.UORGO_ID = (BigDecimal) dis.readObject();
					
						this.VALOR_TOTAL = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
					this.ORIGEN = readString(dis);
					
					this.FECHA_SOLICITUD = readDate(dis);
					
					this.TIPO_SOLICITUD = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.UORG_REGISTRA_ID = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONAUT = readString(dis);
					
					this.DRELACIONADO1 = readString(dis);
					
					this.DRELACIONADO2 = readString(dis);
					
					this.DRELACIONADO3 = readString(dis);
					
					this.DESCRIPCION1 = readString(dis);
					
					this.DESCRIPCION2 = readString(dis);
					
					this.DESCRIPCION3 = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
						this.DIGITADOR = (BigDecimal) dis.readObject();
					
						this.PARENTESCO_ID = (BigDecimal) dis.readObject();
					
						this.ESPCSOLICITA = (BigDecimal) dis.readObject();
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
					this.UBICACION_PACIENTE = readString(dis);
					
					this.CAUTORIZACION = readString(dis);
					
					this.CSOLICITUD = readString(dis);
					
					this.PYP_SIGLA = readString(dis);
					
					this.RESOLUCION_TUTELAS = readString(dis);
					
						this.PRESPONSABLE = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONES = readString(dis);
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONES_AUTORIZACION = readString(dis);
					
					this.FECHA_AUTORIZACION = readDate(dis);
					
						this.AUTORIZADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.UORGE_ID = (BigDecimal) dis.readObject();
					
						this.PACIENTE_ID = (BigDecimal) dis.readObject();
					
						this.DIAGNOSTICOS_ID = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOA_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.CLASIFICACION = readString(dis);
					
					this.FECHA_TUTELA = readDate(dis);
					
					this.NUMERO_ACTA = readString(dis);
					
					this.OBSERVACION = readString(dis);
					
						this.NOMBRE_AUTORIZA = (BigDecimal) dis.readObject();
					
					this.AMBULANCIA = readString(dis);
					
					this.VENCIMIENTO = readDate(dis);
					
						this.PRORROGAS = (BigDecimal) dis.readObject();
					
					this.MODO = readString(dis);
					
					this.CODIGO_ACEPTACION = readString(dis);
					
					this.JUSTIFICAICON_ANULACION = readString(dis);
					
					this.RESOLICION_TUTELA = readString(dis);
					
					this.JUSTIFICAICON_NOFAVORABLE = readString(dis);
					
						this.UORGO_ID = (BigDecimal) dis.readObject();
					
						this.VALOR_TOTAL = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
					this.ORIGEN = readString(dis);
					
					this.FECHA_SOLICITUD = readDate(dis);
					
					this.TIPO_SOLICITUD = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.UORG_REGISTRA_ID = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONAUT = readString(dis);
					
					this.DRELACIONADO1 = readString(dis);
					
					this.DRELACIONADO2 = readString(dis);
					
					this.DRELACIONADO3 = readString(dis);
					
					this.DESCRIPCION1 = readString(dis);
					
					this.DESCRIPCION2 = readString(dis);
					
					this.DESCRIPCION3 = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
						this.DIGITADOR = (BigDecimal) dis.readObject();
					
						this.PARENTESCO_ID = (BigDecimal) dis.readObject();
					
						this.ESPCSOLICITA = (BigDecimal) dis.readObject();
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
					this.UBICACION_PACIENTE = readString(dis);
					
					this.CAUTORIZACION = readString(dis);
					
					this.CSOLICITUD = readString(dis);
					
					this.PYP_SIGLA = readString(dis);
					
					this.RESOLUCION_TUTELAS = readString(dis);
					
						this.PRESPONSABLE = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONES = readString(dis);
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONES_AUTORIZACION = readString(dis);
					
					this.FECHA_AUTORIZACION = readDate(dis);
					
						this.AUTORIZADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORGE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PACIENTE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIAGNOSTICOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFESIONAL_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOA_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.CLASIFICACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_TUTELA,dos);
					
					// String
				
						writeString(this.NUMERO_ACTA,dos);
					
					// String
				
						writeString(this.OBSERVACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NOMBRE_AUTORIZA);
					
					// String
				
						writeString(this.AMBULANCIA,dos);
					
					// java.util.Date
				
						writeDate(this.VENCIMIENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRORROGAS);
					
					// String
				
						writeString(this.MODO,dos);
					
					// String
				
						writeString(this.CODIGO_ACEPTACION,dos);
					
					// String
				
						writeString(this.JUSTIFICAICON_ANULACION,dos);
					
					// String
				
						writeString(this.RESOLICION_TUTELA,dos);
					
					// String
				
						writeString(this.JUSTIFICAICON_NOFAVORABLE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORGO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_TOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD);
					
					// String
				
						writeString(this.ORIGEN,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_SOLICITUD,dos);
					
					// String
				
						writeString(this.TIPO_SOLICITUD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_REGISTRA_ID);
					
					// String
				
						writeString(this.OBSERVACIONAUT,dos);
					
					// String
				
						writeString(this.DRELACIONADO1,dos);
					
					// String
				
						writeString(this.DRELACIONADO2,dos);
					
					// String
				
						writeString(this.DRELACIONADO3,dos);
					
					// String
				
						writeString(this.DESCRIPCION1,dos);
					
					// String
				
						writeString(this.DESCRIPCION2,dos);
					
					// String
				
						writeString(this.DESCRIPCION3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIGITADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PARENTESCO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPCSOLICITA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// String
				
						writeString(this.UBICACION_PACIENTE,dos);
					
					// String
				
						writeString(this.CAUTORIZACION,dos);
					
					// String
				
						writeString(this.CSOLICITUD,dos);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// String
				
						writeString(this.RESOLUCION_TUTELAS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESPONSABLE);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// String
				
						writeString(this.OBSERVACIONES_AUTORIZACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_AUTORIZACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AUTORIZADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORGE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PACIENTE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIAGNOSTICOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFESIONAL_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOA_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.CLASIFICACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_TUTELA,dos);
					
					// String
				
						writeString(this.NUMERO_ACTA,dos);
					
					// String
				
						writeString(this.OBSERVACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NOMBRE_AUTORIZA);
					
					// String
				
						writeString(this.AMBULANCIA,dos);
					
					// java.util.Date
				
						writeDate(this.VENCIMIENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRORROGAS);
					
					// String
				
						writeString(this.MODO,dos);
					
					// String
				
						writeString(this.CODIGO_ACEPTACION,dos);
					
					// String
				
						writeString(this.JUSTIFICAICON_ANULACION,dos);
					
					// String
				
						writeString(this.RESOLICION_TUTELA,dos);
					
					// String
				
						writeString(this.JUSTIFICAICON_NOFAVORABLE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORGO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_TOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD);
					
					// String
				
						writeString(this.ORIGEN,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_SOLICITUD,dos);
					
					// String
				
						writeString(this.TIPO_SOLICITUD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_REGISTRA_ID);
					
					// String
				
						writeString(this.OBSERVACIONAUT,dos);
					
					// String
				
						writeString(this.DRELACIONADO1,dos);
					
					// String
				
						writeString(this.DRELACIONADO2,dos);
					
					// String
				
						writeString(this.DRELACIONADO3,dos);
					
					// String
				
						writeString(this.DESCRIPCION1,dos);
					
					// String
				
						writeString(this.DESCRIPCION2,dos);
					
					// String
				
						writeString(this.DESCRIPCION3,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIGITADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PARENTESCO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPCSOLICITA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// String
				
						writeString(this.UBICACION_PACIENTE,dos);
					
					// String
				
						writeString(this.CAUTORIZACION,dos);
					
					// String
				
						writeString(this.CSOLICITUD,dos);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// String
				
						writeString(this.RESOLUCION_TUTELAS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESPONSABLE);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// String
				
						writeString(this.OBSERVACIONES_AUTORIZACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_AUTORIZACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUTORIZADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",UORGE_ID="+String.valueOf(UORGE_ID));
		sb.append(",PACIENTE_ID="+String.valueOf(PACIENTE_ID));
		sb.append(",DIAGNOSTICOS_ID="+String.valueOf(DIAGNOSTICOS_ID));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",PROFESIONAL_ID="+String.valueOf(PROFESIONAL_ID));
		sb.append(",TIEMPOA_ID="+String.valueOf(TIEMPOA_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",CLASIFICACION="+CLASIFICACION);
		sb.append(",FECHA_TUTELA="+String.valueOf(FECHA_TUTELA));
		sb.append(",NUMERO_ACTA="+NUMERO_ACTA);
		sb.append(",OBSERVACION="+OBSERVACION);
		sb.append(",NOMBRE_AUTORIZA="+String.valueOf(NOMBRE_AUTORIZA));
		sb.append(",AMBULANCIA="+AMBULANCIA);
		sb.append(",VENCIMIENTO="+String.valueOf(VENCIMIENTO));
		sb.append(",PRORROGAS="+String.valueOf(PRORROGAS));
		sb.append(",MODO="+MODO);
		sb.append(",CODIGO_ACEPTACION="+CODIGO_ACEPTACION);
		sb.append(",JUSTIFICAICON_ANULACION="+JUSTIFICAICON_ANULACION);
		sb.append(",RESOLICION_TUTELA="+RESOLICION_TUTELA);
		sb.append(",JUSTIFICAICON_NOFAVORABLE="+JUSTIFICAICON_NOFAVORABLE);
		sb.append(",UORGO_ID="+String.valueOf(UORGO_ID));
		sb.append(",VALOR_TOTAL="+String.valueOf(VALOR_TOTAL));
		sb.append(",VALOR_UNITARIO="+String.valueOf(VALOR_UNITARIO));
		sb.append(",CANTIDAD="+String.valueOf(CANTIDAD));
		sb.append(",ORIGEN="+ORIGEN);
		sb.append(",FECHA_SOLICITUD="+String.valueOf(FECHA_SOLICITUD));
		sb.append(",TIPO_SOLICITUD="+TIPO_SOLICITUD);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",UORG_REGISTRA_ID="+String.valueOf(UORG_REGISTRA_ID));
		sb.append(",OBSERVACIONAUT="+OBSERVACIONAUT);
		sb.append(",DRELACIONADO1="+DRELACIONADO1);
		sb.append(",DRELACIONADO2="+DRELACIONADO2);
		sb.append(",DRELACIONADO3="+DRELACIONADO3);
		sb.append(",DESCRIPCION1="+DESCRIPCION1);
		sb.append(",DESCRIPCION2="+DESCRIPCION2);
		sb.append(",DESCRIPCION3="+DESCRIPCION3);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",DIGITADOR="+String.valueOf(DIGITADOR));
		sb.append(",PARENTESCO_ID="+String.valueOf(PARENTESCO_ID));
		sb.append(",ESPCSOLICITA="+String.valueOf(ESPCSOLICITA));
		sb.append(",PROCESOSASISTENCIALES_ID="+String.valueOf(PROCESOSASISTENCIALES_ID));
		sb.append(",UBICACION_PACIENTE="+UBICACION_PACIENTE);
		sb.append(",CAUTORIZACION="+CAUTORIZACION);
		sb.append(",CSOLICITUD="+CSOLICITUD);
		sb.append(",PYP_SIGLA="+PYP_SIGLA);
		sb.append(",RESOLUCION_TUTELAS="+RESOLUCION_TUTELAS);
		sb.append(",PRESPONSABLE="+String.valueOf(PRESPONSABLE));
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",OBSERVACIONES_AUTORIZACION="+OBSERVACIONES_AUTORIZACION);
		sb.append(",FECHA_AUTORIZACION="+String.valueOf(FECHA_AUTORIZACION));
		sb.append(",AUTORIZADOR="+String.valueOf(AUTORIZADOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(SALIDAStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal UORG_REGISTRA_ID;

				public BigDecimal getUORG_REGISTRA_ID () {
					return this.UORG_REGISTRA_ID;
				}

				public Boolean UORG_REGISTRA_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_REGISTRA_IDIsKey(){
				    return false;
				}
				public Integer UORG_REGISTRA_IDLength(){
				    return 0;
				}
				public Integer UORG_REGISTRA_IDPrecision(){
				    return null;
				}
				public String UORG_REGISTRA_IDDefault(){
				
					return "";
				
				}
				public String UORG_REGISTRA_IDComment(){
				
				    return "";
				
				}
				public String UORG_REGISTRA_IDPattern(){
				
					return "";
				
				}
				public String UORG_REGISTRA_IDOriginalDbColumnName(){
				
					return "UORG_REGISTRA_ID";
				
				}

				
			    public BigDecimal UORGO_ID;

				public BigDecimal getUORGO_ID () {
					return this.UORGO_ID;
				}

				public Boolean UORGO_IDIsNullable(){
				    return false;
				}
				public Boolean UORGO_IDIsKey(){
				    return false;
				}
				public Integer UORGO_IDLength(){
				    return 0;
				}
				public Integer UORGO_IDPrecision(){
				    return null;
				}
				public String UORGO_IDDefault(){
				
					return "";
				
				}
				public String UORGO_IDComment(){
				
				    return "";
				
				}
				public String UORGO_IDPattern(){
				
					return "";
				
				}
				public String UORGO_IDOriginalDbColumnName(){
				
					return "UORGO_ID";
				
				}

				
			    public BigDecimal UORGE_ID;

				public BigDecimal getUORGE_ID () {
					return this.UORGE_ID;
				}

				public Boolean UORGE_IDIsNullable(){
				    return true;
				}
				public Boolean UORGE_IDIsKey(){
				    return false;
				}
				public Integer UORGE_IDLength(){
				    return 0;
				}
				public Integer UORGE_IDPrecision(){
				    return null;
				}
				public String UORGE_IDDefault(){
				
					return "";
				
				}
				public String UORGE_IDComment(){
				
				    return "";
				
				}
				public String UORGE_IDPattern(){
				
					return "";
				
				}
				public String UORGE_IDOriginalDbColumnName(){
				
					return "UORGE_ID";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return true;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public BigDecimal PACIENTE_ID;

				public BigDecimal getPACIENTE_ID () {
					return this.PACIENTE_ID;
				}

				public Boolean PACIENTE_IDIsNullable(){
				    return false;
				}
				public Boolean PACIENTE_IDIsKey(){
				    return false;
				}
				public Integer PACIENTE_IDLength(){
				    return 0;
				}
				public Integer PACIENTE_IDPrecision(){
				    return null;
				}
				public String PACIENTE_IDDefault(){
				
					return "";
				
				}
				public String PACIENTE_IDComment(){
				
				    return "";
				
				}
				public String PACIENTE_IDPattern(){
				
					return "";
				
				}
				public String PACIENTE_IDOriginalDbColumnName(){
				
					return "PACIENTE_ID";
				
				}

				
			    public BigDecimal PARENTESCO_ID;

				public BigDecimal getPARENTESCO_ID () {
					return this.PARENTESCO_ID;
				}

				public Boolean PARENTESCO_IDIsNullable(){
				    return true;
				}
				public Boolean PARENTESCO_IDIsKey(){
				    return false;
				}
				public Integer PARENTESCO_IDLength(){
				    return 0;
				}
				public Integer PARENTESCO_IDPrecision(){
				    return null;
				}
				public String PARENTESCO_IDDefault(){
				
					return "";
				
				}
				public String PARENTESCO_IDComment(){
				
				    return "";
				
				}
				public String PARENTESCO_IDPattern(){
				
					return "";
				
				}
				public String PARENTESCO_IDOriginalDbColumnName(){
				
					return "PARENTESCO_ID";
				
				}

				
			    public BigDecimal DIGITADOR;

				public BigDecimal getDIGITADOR () {
					return this.DIGITADOR;
				}

				public Boolean DIGITADORIsNullable(){
				    return false;
				}
				public Boolean DIGITADORIsKey(){
				    return false;
				}
				public Integer DIGITADORLength(){
				    return 0;
				}
				public Integer DIGITADORPrecision(){
				    return null;
				}
				public String DIGITADORDefault(){
				
					return "";
				
				}
				public String DIGITADORComment(){
				
				    return "";
				
				}
				public String DIGITADORPattern(){
				
					return "";
				
				}
				public String DIGITADOROriginalDbColumnName(){
				
					return "DIGITADOR";
				
				}

				
			    public BigDecimal DIAGNOSTICOS_ID;

				public BigDecimal getDIAGNOSTICOS_ID () {
					return this.DIAGNOSTICOS_ID;
				}

				public Boolean DIAGNOSTICOS_IDIsNullable(){
				    return true;
				}
				public Boolean DIAGNOSTICOS_IDIsKey(){
				    return false;
				}
				public Integer DIAGNOSTICOS_IDLength(){
				    return 0;
				}
				public Integer DIAGNOSTICOS_IDPrecision(){
				    return null;
				}
				public String DIAGNOSTICOS_IDDefault(){
				
					return "";
				
				}
				public String DIAGNOSTICOS_IDComment(){
				
				    return "";
				
				}
				public String DIAGNOSTICOS_IDPattern(){
				
					return "";
				
				}
				public String DIAGNOSTICOS_IDOriginalDbColumnName(){
				
					return "DIAGNOSTICOS_ID";
				
				}

				
			    public BigDecimal ESPCSOLICITA;

				public BigDecimal getESPCSOLICITA () {
					return this.ESPCSOLICITA;
				}

				public Boolean ESPCSOLICITAIsNullable(){
				    return true;
				}
				public Boolean ESPCSOLICITAIsKey(){
				    return false;
				}
				public Integer ESPCSOLICITALength(){
				    return 0;
				}
				public Integer ESPCSOLICITAPrecision(){
				    return 0;
				}
				public String ESPCSOLICITADefault(){
				
					return "";
				
				}
				public String ESPCSOLICITAComment(){
				
				    return "";
				
				}
				public String ESPCSOLICITAPattern(){
				
					return "";
				
				}
				public String ESPCSOLICITAOriginalDbColumnName(){
				
					return "ESPCSOLICITA";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal PROFESIONAL_ID;

				public BigDecimal getPROFESIONAL_ID () {
					return this.PROFESIONAL_ID;
				}

				public Boolean PROFESIONAL_IDIsNullable(){
				    return true;
				}
				public Boolean PROFESIONAL_IDIsKey(){
				    return false;
				}
				public Integer PROFESIONAL_IDLength(){
				    return 0;
				}
				public Integer PROFESIONAL_IDPrecision(){
				    return null;
				}
				public String PROFESIONAL_IDDefault(){
				
					return "";
				
				}
				public String PROFESIONAL_IDComment(){
				
				    return "";
				
				}
				public String PROFESIONAL_IDPattern(){
				
					return "";
				
				}
				public String PROFESIONAL_IDOriginalDbColumnName(){
				
					return "PROFESIONAL_ID";
				
				}

				
			    public BigDecimal PROCESOSASISTENCIALES_ID;

				public BigDecimal getPROCESOSASISTENCIALES_ID () {
					return this.PROCESOSASISTENCIALES_ID;
				}

				public Boolean PROCESOSASISTENCIALES_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOSASISTENCIALES_IDIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALES_IDLength(){
				    return 0;
				}
				public Integer PROCESOSASISTENCIALES_IDPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALES_IDDefault(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDComment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALES_IDPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIALES_ID";
				
				}

				
			    public BigDecimal NOMBRE_AUTORIZA;

				public BigDecimal getNOMBRE_AUTORIZA () {
					return this.NOMBRE_AUTORIZA;
				}

				public Boolean NOMBRE_AUTORIZAIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_AUTORIZAIsKey(){
				    return false;
				}
				public Integer NOMBRE_AUTORIZALength(){
				    return 0;
				}
				public Integer NOMBRE_AUTORIZAPrecision(){
				    return null;
				}
				public String NOMBRE_AUTORIZADefault(){
				
					return "";
				
				}
				public String NOMBRE_AUTORIZAComment(){
				
				    return "";
				
				}
				public String NOMBRE_AUTORIZAPattern(){
				
					return "";
				
				}
				public String NOMBRE_AUTORIZAOriginalDbColumnName(){
				
					return "NOMBRE_AUTORIZA";
				
				}

				
			    public String UBICACION_PACIENTE;

				public String getUBICACION_PACIENTE () {
					return this.UBICACION_PACIENTE;
				}

				public Boolean UBICACION_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean UBICACION_PACIENTEIsKey(){
				    return false;
				}
				public Integer UBICACION_PACIENTELength(){
				    return 50;
				}
				public Integer UBICACION_PACIENTEPrecision(){
				    return 0;
				}
				public String UBICACION_PACIENTEDefault(){
				
					return null;
				
				}
				public String UBICACION_PACIENTEComment(){
				
				    return "";
				
				}
				public String UBICACION_PACIENTEPattern(){
				
					return "";
				
				}
				public String UBICACION_PACIENTEOriginalDbColumnName(){
				
					return "UBICACION_PACIENTE";
				
				}

				
			    public String AMBULANCIA;

				public String getAMBULANCIA () {
					return this.AMBULANCIA;
				}

				public Boolean AMBULANCIAIsNullable(){
				    return true;
				}
				public Boolean AMBULANCIAIsKey(){
				    return false;
				}
				public Integer AMBULANCIALength(){
				    return 20;
				}
				public Integer AMBULANCIAPrecision(){
				    return 0;
				}
				public String AMBULANCIADefault(){
				
					return null;
				
				}
				public String AMBULANCIAComment(){
				
				    return "";
				
				}
				public String AMBULANCIAPattern(){
				
					return "";
				
				}
				public String AMBULANCIAOriginalDbColumnName(){
				
					return "AMBULANCIA";
				
				}

				
			    public String CAUTORIZACION;

				public String getCAUTORIZACION () {
					return this.CAUTORIZACION;
				}

				public Boolean CAUTORIZACIONIsNullable(){
				    return false;
				}
				public Boolean CAUTORIZACIONIsKey(){
				    return false;
				}
				public Integer CAUTORIZACIONLength(){
				    return 250;
				}
				public Integer CAUTORIZACIONPrecision(){
				    return 0;
				}
				public String CAUTORIZACIONDefault(){
				
					return null;
				
				}
				public String CAUTORIZACIONComment(){
				
				    return "";
				
				}
				public String CAUTORIZACIONPattern(){
				
					return "";
				
				}
				public String CAUTORIZACIONOriginalDbColumnName(){
				
					return "CAUTORIZACION";
				
				}

				
			    public String CSOLICITUD;

				public String getCSOLICITUD () {
					return this.CSOLICITUD;
				}

				public Boolean CSOLICITUDIsNullable(){
				    return true;
				}
				public Boolean CSOLICITUDIsKey(){
				    return false;
				}
				public Integer CSOLICITUDLength(){
				    return 200;
				}
				public Integer CSOLICITUDPrecision(){
				    return 0;
				}
				public String CSOLICITUDDefault(){
				
					return null;
				
				}
				public String CSOLICITUDComment(){
				
				    return "";
				
				}
				public String CSOLICITUDPattern(){
				
					return "";
				
				}
				public String CSOLICITUDOriginalDbColumnName(){
				
					return "CSOLICITUD";
				
				}

				
			    public String TIPO_SOLICITUD;

				public String getTIPO_SOLICITUD () {
					return this.TIPO_SOLICITUD;
				}

				public Boolean TIPO_SOLICITUDIsNullable(){
				    return false;
				}
				public Boolean TIPO_SOLICITUDIsKey(){
				    return false;
				}
				public Integer TIPO_SOLICITUDLength(){
				    return 50;
				}
				public Integer TIPO_SOLICITUDPrecision(){
				    return 0;
				}
				public String TIPO_SOLICITUDDefault(){
				
					return null;
				
				}
				public String TIPO_SOLICITUDComment(){
				
				    return "";
				
				}
				public String TIPO_SOLICITUDPattern(){
				
					return "";
				
				}
				public String TIPO_SOLICITUDOriginalDbColumnName(){
				
					return "TIPO_SOLICITUD";
				
				}

				
			    public String ORIGEN;

				public String getORIGEN () {
					return this.ORIGEN;
				}

				public Boolean ORIGENIsNullable(){
				    return false;
				}
				public Boolean ORIGENIsKey(){
				    return false;
				}
				public Integer ORIGENLength(){
				    return 50;
				}
				public Integer ORIGENPrecision(){
				    return 0;
				}
				public String ORIGENDefault(){
				
					return null;
				
				}
				public String ORIGENComment(){
				
				    return "";
				
				}
				public String ORIGENPattern(){
				
					return "";
				
				}
				public String ORIGENOriginalDbColumnName(){
				
					return "ORIGEN";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return 0;
				}
				public String EDADDefault(){
				
					return "";
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String PYP_SIGLA;

				public String getPYP_SIGLA () {
					return this.PYP_SIGLA;
				}

				public Boolean PYP_SIGLAIsNullable(){
				    return true;
				}
				public Boolean PYP_SIGLAIsKey(){
				    return false;
				}
				public Integer PYP_SIGLALength(){
				    return 20;
				}
				public Integer PYP_SIGLAPrecision(){
				    return 0;
				}
				public String PYP_SIGLADefault(){
				
					return null;
				
				}
				public String PYP_SIGLAComment(){
				
				    return "";
				
				}
				public String PYP_SIGLAPattern(){
				
					return "";
				
				}
				public String PYP_SIGLAOriginalDbColumnName(){
				
					return "PYP_SIGLA";
				
				}

				
			    public java.util.Date FECHA_SOLI;

				public java.util.Date getFECHA_SOLI () {
					return this.FECHA_SOLI;
				}

				public Boolean FECHA_SOLIIsNullable(){
				    return false;
				}
				public Boolean FECHA_SOLIIsKey(){
				    return false;
				}
				public Integer FECHA_SOLILength(){
				    return 0;
				}
				public Integer FECHA_SOLIPrecision(){
				    return 0;
				}
				public String FECHA_SOLIDefault(){
				
					return null;
				
				}
				public String FECHA_SOLIComment(){
				
				    return "";
				
				}
				public String FECHA_SOLIPattern(){
				
					return "";
				
				}
				public String FECHA_SOLIOriginalDbColumnName(){
				
					return "FECHA_SOLI";
				
				}

				
			    public java.util.Date FECHA_AUTORIZACION;

				public java.util.Date getFECHA_AUTORIZACION () {
					return this.FECHA_AUTORIZACION;
				}

				public Boolean FECHA_AUTORIZACIONIsNullable(){
				    return false;
				}
				public Boolean FECHA_AUTORIZACIONIsKey(){
				    return false;
				}
				public Integer FECHA_AUTORIZACIONLength(){
				    return 0;
				}
				public Integer FECHA_AUTORIZACIONPrecision(){
				    return 0;
				}
				public String FECHA_AUTORIZACIONDefault(){
				
					return null;
				
				}
				public String FECHA_AUTORIZACIONComment(){
				
				    return "";
				
				}
				public String FECHA_AUTORIZACIONPattern(){
				
					return "";
				
				}
				public String FECHA_AUTORIZACIONOriginalDbColumnName(){
				
					return "FECHA_AUTORIZACION";
				
				}

				
			    public java.util.Date FECHA_TUTELA;

				public java.util.Date getFECHA_TUTELA () {
					return this.FECHA_TUTELA;
				}

				public Boolean FECHA_TUTELAIsNullable(){
				    return true;
				}
				public Boolean FECHA_TUTELAIsKey(){
				    return false;
				}
				public Integer FECHA_TUTELALength(){
				    return 0;
				}
				public Integer FECHA_TUTELAPrecision(){
				    return 0;
				}
				public String FECHA_TUTELADefault(){
				
					return null;
				
				}
				public String FECHA_TUTELAComment(){
				
				    return "";
				
				}
				public String FECHA_TUTELAPattern(){
				
					return "";
				
				}
				public String FECHA_TUTELAOriginalDbColumnName(){
				
					return "FECHA_TUTELA";
				
				}

				
			    public java.util.Date VENCIMIENTO;

				public java.util.Date getVENCIMIENTO () {
					return this.VENCIMIENTO;
				}

				public Boolean VENCIMIENTOIsNullable(){
				    return false;
				}
				public Boolean VENCIMIENTOIsKey(){
				    return false;
				}
				public Integer VENCIMIENTOLength(){
				    return 0;
				}
				public Integer VENCIMIENTOPrecision(){
				    return 0;
				}
				public String VENCIMIENTODefault(){
				
					return null;
				
				}
				public String VENCIMIENTOComment(){
				
				    return "";
				
				}
				public String VENCIMIENTOPattern(){
				
					return "";
				
				}
				public String VENCIMIENTOOriginalDbColumnName(){
				
					return "VENCIMIENTO";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 20;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String NUMERO_ACTA;

				public String getNUMERO_ACTA () {
					return this.NUMERO_ACTA;
				}

				public Boolean NUMERO_ACTAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_ACTAIsKey(){
				    return false;
				}
				public Integer NUMERO_ACTALength(){
				    return 500;
				}
				public Integer NUMERO_ACTAPrecision(){
				    return 0;
				}
				public String NUMERO_ACTADefault(){
				
					return null;
				
				}
				public String NUMERO_ACTAComment(){
				
				    return "";
				
				}
				public String NUMERO_ACTAPattern(){
				
					return "";
				
				}
				public String NUMERO_ACTAOriginalDbColumnName(){
				
					return "NUMERO_ACTA";
				
				}

				
			    public String CLASIFICACION;

				public String getCLASIFICACION () {
					return this.CLASIFICACION;
				}

				public Boolean CLASIFICACIONIsNullable(){
				    return true;
				}
				public Boolean CLASIFICACIONIsKey(){
				    return false;
				}
				public Integer CLASIFICACIONLength(){
				    return 20;
				}
				public Integer CLASIFICACIONPrecision(){
				    return 0;
				}
				public String CLASIFICACIONDefault(){
				
					return null;
				
				}
				public String CLASIFICACIONComment(){
				
				    return "";
				
				}
				public String CLASIFICACIONPattern(){
				
					return "";
				
				}
				public String CLASIFICACIONOriginalDbColumnName(){
				
					return "CLASIFICACION";
				
				}

				
			    public BigDecimal PRORROGAS;

				public BigDecimal getPRORROGAS () {
					return this.PRORROGAS;
				}

				public Boolean PRORROGASIsNullable(){
				    return false;
				}
				public Boolean PRORROGASIsKey(){
				    return false;
				}
				public Integer PRORROGASLength(){
				    return 0;
				}
				public Integer PRORROGASPrecision(){
				    return null;
				}
				public String PRORROGASDefault(){
				
					return "";
				
				}
				public String PRORROGASComment(){
				
				    return "";
				
				}
				public String PRORROGASPattern(){
				
					return "";
				
				}
				public String PRORROGASOriginalDbColumnName(){
				
					return "PRORROGAS";
				
				}

				
			    public String MODO;

				public String getMODO () {
					return this.MODO;
				}

				public Boolean MODOIsNullable(){
				    return true;
				}
				public Boolean MODOIsKey(){
				    return false;
				}
				public Integer MODOLength(){
				    return 20;
				}
				public Integer MODOPrecision(){
				    return 0;
				}
				public String MODODefault(){
				
					return null;
				
				}
				public String MODOComment(){
				
				    return "";
				
				}
				public String MODOPattern(){
				
					return "";
				
				}
				public String MODOOriginalDbColumnName(){
				
					return "MODO";
				
				}

				
			    public String CODIGO_ACEPTACION;

				public String getCODIGO_ACEPTACION () {
					return this.CODIGO_ACEPTACION;
				}

				public Boolean CODIGO_ACEPTACIONIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ACEPTACIONIsKey(){
				    return false;
				}
				public Integer CODIGO_ACEPTACIONLength(){
				    return 2500;
				}
				public Integer CODIGO_ACEPTACIONPrecision(){
				    return 0;
				}
				public String CODIGO_ACEPTACIONDefault(){
				
					return null;
				
				}
				public String CODIGO_ACEPTACIONComment(){
				
				    return "";
				
				}
				public String CODIGO_ACEPTACIONPattern(){
				
					return "";
				
				}
				public String CODIGO_ACEPTACIONOriginalDbColumnName(){
				
					return "CODIGO_ACEPTACION";
				
				}

				
			    public String RESOLUCION_TUTELA;

				public String getRESOLUCION_TUTELA () {
					return this.RESOLUCION_TUTELA;
				}

				public Boolean RESOLUCION_TUTELAIsNullable(){
				    return true;
				}
				public Boolean RESOLUCION_TUTELAIsKey(){
				    return false;
				}
				public Integer RESOLUCION_TUTELALength(){
				    return 4000;
				}
				public Integer RESOLUCION_TUTELAPrecision(){
				    return 0;
				}
				public String RESOLUCION_TUTELADefault(){
				
					return null;
				
				}
				public String RESOLUCION_TUTELAComment(){
				
				    return "";
				
				}
				public String RESOLUCION_TUTELAPattern(){
				
					return "";
				
				}
				public String RESOLUCION_TUTELAOriginalDbColumnName(){
				
					return "RESOLUCION_TUTELA";
				
				}

				
			    public String JUSTIFICACION_NOFAVORABLE;

				public String getJUSTIFICACION_NOFAVORABLE () {
					return this.JUSTIFICACION_NOFAVORABLE;
				}

				public Boolean JUSTIFICACION_NOFAVORABLEIsNullable(){
				    return true;
				}
				public Boolean JUSTIFICACION_NOFAVORABLEIsKey(){
				    return false;
				}
				public Integer JUSTIFICACION_NOFAVORABLELength(){
				    return 4000;
				}
				public Integer JUSTIFICACION_NOFAVORABLEPrecision(){
				    return 0;
				}
				public String JUSTIFICACION_NOFAVORABLEDefault(){
				
					return null;
				
				}
				public String JUSTIFICACION_NOFAVORABLEComment(){
				
				    return "";
				
				}
				public String JUSTIFICACION_NOFAVORABLEPattern(){
				
					return "";
				
				}
				public String JUSTIFICACION_NOFAVORABLEOriginalDbColumnName(){
				
					return "JUSTIFICACION_NOFAVORABLE";
				
				}

				
			    public String JUSTIFICACION_ANULACION;

				public String getJUSTIFICACION_ANULACION () {
					return this.JUSTIFICACION_ANULACION;
				}

				public Boolean JUSTIFICACION_ANULACIONIsNullable(){
				    return true;
				}
				public Boolean JUSTIFICACION_ANULACIONIsKey(){
				    return false;
				}
				public Integer JUSTIFICACION_ANULACIONLength(){
				    return 4000;
				}
				public Integer JUSTIFICACION_ANULACIONPrecision(){
				    return 0;
				}
				public String JUSTIFICACION_ANULACIONDefault(){
				
					return null;
				
				}
				public String JUSTIFICACION_ANULACIONComment(){
				
				    return "";
				
				}
				public String JUSTIFICACION_ANULACIONPattern(){
				
					return "";
				
				}
				public String JUSTIFICACION_ANULACIONOriginalDbColumnName(){
				
					return "JUSTIFICACION_ANULACION";
				
				}

				
			    public BigDecimal PRESPONSABLE;

				public BigDecimal getPRESPONSABLE () {
					return this.PRESPONSABLE;
				}

				public Boolean PRESPONSABLEIsNullable(){
				    return true;
				}
				public Boolean PRESPONSABLEIsKey(){
				    return false;
				}
				public Integer PRESPONSABLELength(){
				    return 0;
				}
				public Integer PRESPONSABLEPrecision(){
				    return null;
				}
				public String PRESPONSABLEDefault(){
				
					return "";
				
				}
				public String PRESPONSABLEComment(){
				
				    return "";
				
				}
				public String PRESPONSABLEPattern(){
				
					return "";
				
				}
				public String PRESPONSABLEOriginalDbColumnName(){
				
					return "PRESPONSABLE";
				
				}

				
			    public String DIAGR_1;

				public String getDIAGR_1 () {
					return this.DIAGR_1;
				}

				public Boolean DIAGR_1IsNullable(){
				    return true;
				}
				public Boolean DIAGR_1IsKey(){
				    return false;
				}
				public Integer DIAGR_1Length(){
				    return 512;
				}
				public Integer DIAGR_1Precision(){
				    return 0;
				}
				public String DIAGR_1Default(){
				
					return null;
				
				}
				public String DIAGR_1Comment(){
				
				    return "";
				
				}
				public String DIAGR_1Pattern(){
				
					return "";
				
				}
				public String DIAGR_1OriginalDbColumnName(){
				
					return "DIAGR_1";
				
				}

				
			    public String DIAGR_2;

				public String getDIAGR_2 () {
					return this.DIAGR_2;
				}

				public Boolean DIAGR_2IsNullable(){
				    return true;
				}
				public Boolean DIAGR_2IsKey(){
				    return false;
				}
				public Integer DIAGR_2Length(){
				    return 512;
				}
				public Integer DIAGR_2Precision(){
				    return 0;
				}
				public String DIAGR_2Default(){
				
					return null;
				
				}
				public String DIAGR_2Comment(){
				
				    return "";
				
				}
				public String DIAGR_2Pattern(){
				
					return "";
				
				}
				public String DIAGR_2OriginalDbColumnName(){
				
					return "DIAGR_2";
				
				}

				
			    public String DIAGR_3;

				public String getDIAGR_3 () {
					return this.DIAGR_3;
				}

				public Boolean DIAGR_3IsNullable(){
				    return true;
				}
				public Boolean DIAGR_3IsKey(){
				    return false;
				}
				public Integer DIAGR_3Length(){
				    return 512;
				}
				public Integer DIAGR_3Precision(){
				    return 0;
				}
				public String DIAGR_3Default(){
				
					return null;
				
				}
				public String DIAGR_3Comment(){
				
				    return "";
				
				}
				public String DIAGR_3Pattern(){
				
					return "";
				
				}
				public String DIAGR_3OriginalDbColumnName(){
				
					return "DIAGR_3";
				
				}

				
			    public BigDecimal CANTIDAD;

				public BigDecimal getCANTIDAD () {
					return this.CANTIDAD;
				}

				public Boolean CANTIDADIsNullable(){
				    return false;
				}
				public Boolean CANTIDADIsKey(){
				    return false;
				}
				public Integer CANTIDADLength(){
				    return 0;
				}
				public Integer CANTIDADPrecision(){
				    return null;
				}
				public String CANTIDADDefault(){
				
					return "";
				
				}
				public String CANTIDADComment(){
				
				    return "";
				
				}
				public String CANTIDADPattern(){
				
					return "";
				
				}
				public String CANTIDADOriginalDbColumnName(){
				
					return "CANTIDAD";
				
				}

				
			    public BigDecimal VALOR_UNITARIO;

				public BigDecimal getVALOR_UNITARIO () {
					return this.VALOR_UNITARIO;
				}

				public Boolean VALOR_UNITARIOIsNullable(){
				    return false;
				}
				public Boolean VALOR_UNITARIOIsKey(){
				    return false;
				}
				public Integer VALOR_UNITARIOLength(){
				    return 0;
				}
				public Integer VALOR_UNITARIOPrecision(){
				    return null;
				}
				public String VALOR_UNITARIODefault(){
				
					return "";
				
				}
				public String VALOR_UNITARIOComment(){
				
				    return "";
				
				}
				public String VALOR_UNITARIOPattern(){
				
					return "";
				
				}
				public String VALOR_UNITARIOOriginalDbColumnName(){
				
					return "VALOR_UNITARIO";
				
				}

				
			    public BigDecimal VALOR_TOTAL;

				public BigDecimal getVALOR_TOTAL () {
					return this.VALOR_TOTAL;
				}

				public Boolean VALOR_TOTALIsNullable(){
				    return false;
				}
				public Boolean VALOR_TOTALIsKey(){
				    return false;
				}
				public Integer VALOR_TOTALLength(){
				    return 0;
				}
				public Integer VALOR_TOTALPrecision(){
				    return null;
				}
				public String VALOR_TOTALDefault(){
				
					return "";
				
				}
				public String VALOR_TOTALComment(){
				
				    return "";
				
				}
				public String VALOR_TOTALPattern(){
				
					return "";
				
				}
				public String VALOR_TOTALOriginalDbColumnName(){
				
					return "VALOR_TOTAL";
				
				}

				
			    public String OBSERVACIONESAUT;

				public String getOBSERVACIONESAUT () {
					return this.OBSERVACIONESAUT;
				}

				public Boolean OBSERVACIONESAUTIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESAUTIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESAUTLength(){
				    return 4000;
				}
				public Integer OBSERVACIONESAUTPrecision(){
				    return 0;
				}
				public String OBSERVACIONESAUTDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESAUTComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESAUTPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESAUTOriginalDbColumnName(){
				
					return "OBSERVACIONESAUT";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 4000;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public String ONSERVACION;

				public String getONSERVACION () {
					return this.ONSERVACION;
				}

				public Boolean ONSERVACIONIsNullable(){
				    return true;
				}
				public Boolean ONSERVACIONIsKey(){
				    return false;
				}
				public Integer ONSERVACIONLength(){
				    return 4000;
				}
				public Integer ONSERVACIONPrecision(){
				    return 0;
				}
				public String ONSERVACIONDefault(){
				
					return null;
				
				}
				public String ONSERVACIONComment(){
				
				    return "";
				
				}
				public String ONSERVACIONPattern(){
				
					return "";
				
				}
				public String ONSERVACIONOriginalDbColumnName(){
				
					return "ONSERVACION";
				
				}

				
			    public String OBSERVACIONES_AUTORIZACION;

				public String getOBSERVACIONES_AUTORIZACION () {
					return this.OBSERVACIONES_AUTORIZACION;
				}

				public Boolean OBSERVACIONES_AUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONES_AUTORIZACIONIsKey(){
				    return false;
				}
				public Integer OBSERVACIONES_AUTORIZACIONLength(){
				    return 4000;
				}
				public Integer OBSERVACIONES_AUTORIZACIONPrecision(){
				    return 0;
				}
				public String OBSERVACIONES_AUTORIZACIONDefault(){
				
					return null;
				
				}
				public String OBSERVACIONES_AUTORIZACIONComment(){
				
				    return "";
				
				}
				public String OBSERVACIONES_AUTORIZACIONPattern(){
				
					return "";
				
				}
				public String OBSERVACIONES_AUTORIZACIONOriginalDbColumnName(){
				
					return "OBSERVACIONES_AUTORIZACION";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return true;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return null;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return null;
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public String DIAGR_1_DESCCRIPCION;

				public String getDIAGR_1_DESCCRIPCION () {
					return this.DIAGR_1_DESCCRIPCION;
				}

				public Boolean DIAGR_1_DESCCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DIAGR_1_DESCCRIPCIONIsKey(){
				    return false;
				}
				public Integer DIAGR_1_DESCCRIPCIONLength(){
				    return null;
				}
				public Integer DIAGR_1_DESCCRIPCIONPrecision(){
				    return null;
				}
				public String DIAGR_1_DESCCRIPCIONDefault(){
				
					return null;
				
				}
				public String DIAGR_1_DESCCRIPCIONComment(){
				
				    return "";
				
				}
				public String DIAGR_1_DESCCRIPCIONPattern(){
				
					return "";
				
				}
				public String DIAGR_1_DESCCRIPCIONOriginalDbColumnName(){
				
					return "DIAGR_1_DESCCRIPCION";
				
				}

				
			    public String DIAGR_2_DESCCRIPCION;

				public String getDIAGR_2_DESCCRIPCION () {
					return this.DIAGR_2_DESCCRIPCION;
				}

				public Boolean DIAGR_2_DESCCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DIAGR_2_DESCCRIPCIONIsKey(){
				    return false;
				}
				public Integer DIAGR_2_DESCCRIPCIONLength(){
				    return null;
				}
				public Integer DIAGR_2_DESCCRIPCIONPrecision(){
				    return null;
				}
				public String DIAGR_2_DESCCRIPCIONDefault(){
				
					return null;
				
				}
				public String DIAGR_2_DESCCRIPCIONComment(){
				
				    return "";
				
				}
				public String DIAGR_2_DESCCRIPCIONPattern(){
				
					return "";
				
				}
				public String DIAGR_2_DESCCRIPCIONOriginalDbColumnName(){
				
					return "DIAGR_2_DESCCRIPCION";
				
				}

				
			    public String DIAGR_3_DESCCRIPCION;

				public String getDIAGR_3_DESCCRIPCION () {
					return this.DIAGR_3_DESCCRIPCION;
				}

				public Boolean DIAGR_3_DESCCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DIAGR_3_DESCCRIPCIONIsKey(){
				    return false;
				}
				public Integer DIAGR_3_DESCCRIPCIONLength(){
				    return null;
				}
				public Integer DIAGR_3_DESCCRIPCIONPrecision(){
				    return null;
				}
				public String DIAGR_3_DESCCRIPCIONDefault(){
				
					return null;
				
				}
				public String DIAGR_3_DESCCRIPCIONComment(){
				
				    return "";
				
				}
				public String DIAGR_3_DESCCRIPCIONPattern(){
				
					return "";
				
				}
				public String DIAGR_3_DESCCRIPCIONOriginalDbColumnName(){
				
					return "DIAGR_3_DESCCRIPCION";
				
				}

				
			    public BigDecimal TIEMPOA_ID;

				public BigDecimal getTIEMPOA_ID () {
					return this.TIEMPOA_ID;
				}

				public Boolean TIEMPOA_IDIsNullable(){
				    return true;
				}
				public Boolean TIEMPOA_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOA_IDLength(){
				    return null;
				}
				public Integer TIEMPOA_IDPrecision(){
				    return null;
				}
				public String TIEMPOA_IDDefault(){
				
					return null;
				
				}
				public String TIEMPOA_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOA_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOA_IDOriginalDbColumnName(){
				
					return "TIEMPOA_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length == 0) {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length == 0) {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.UORG_REGISTRA_ID = (BigDecimal) dis.readObject();
					
						this.UORGO_ID = (BigDecimal) dis.readObject();
					
						this.UORGE_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
						this.PACIENTE_ID = (BigDecimal) dis.readObject();
					
						this.PARENTESCO_ID = (BigDecimal) dis.readObject();
					
						this.DIGITADOR = (BigDecimal) dis.readObject();
					
						this.DIAGNOSTICOS_ID = (BigDecimal) dis.readObject();
					
						this.ESPCSOLICITA = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
						this.NOMBRE_AUTORIZA = (BigDecimal) dis.readObject();
					
					this.UBICACION_PACIENTE = readString(dis);
					
					this.AMBULANCIA = readString(dis);
					
					this.CAUTORIZACION = readString(dis);
					
					this.CSOLICITUD = readString(dis);
					
					this.TIPO_SOLICITUD = readString(dis);
					
					this.ORIGEN = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.PYP_SIGLA = readString(dis);
					
					this.FECHA_SOLI = readDate(dis);
					
					this.FECHA_AUTORIZACION = readDate(dis);
					
					this.FECHA_TUTELA = readDate(dis);
					
					this.VENCIMIENTO = readDate(dis);
					
					this.ESTADO = readString(dis);
					
					this.NUMERO_ACTA = readString(dis);
					
					this.CLASIFICACION = readString(dis);
					
						this.PRORROGAS = (BigDecimal) dis.readObject();
					
					this.MODO = readString(dis);
					
					this.CODIGO_ACEPTACION = readString(dis);
					
					this.RESOLUCION_TUTELA = readString(dis);
					
					this.JUSTIFICACION_NOFAVORABLE = readString(dis);
					
					this.JUSTIFICACION_ANULACION = readString(dis);
					
						this.PRESPONSABLE = (BigDecimal) dis.readObject();
					
					this.DIAGR_1 = readString(dis);
					
					this.DIAGR_2 = readString(dis);
					
					this.DIAGR_3 = readString(dis);
					
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.VALOR_TOTAL = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONESAUT = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.ONSERVACION = readString(dis);
					
					this.OBSERVACIONES_AUTORIZACION = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
					this.DIAGR_1_DESCCRIPCION = readString(dis);
					
					this.DIAGR_2_DESCCRIPCION = readString(dis);
					
					this.DIAGR_3_DESCCRIPCION = readString(dis);
					
						this.TIEMPOA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.UORG_REGISTRA_ID = (BigDecimal) dis.readObject();
					
						this.UORGO_ID = (BigDecimal) dis.readObject();
					
						this.UORGE_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
						this.PACIENTE_ID = (BigDecimal) dis.readObject();
					
						this.PARENTESCO_ID = (BigDecimal) dis.readObject();
					
						this.DIGITADOR = (BigDecimal) dis.readObject();
					
						this.DIAGNOSTICOS_ID = (BigDecimal) dis.readObject();
					
						this.ESPCSOLICITA = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
						this.NOMBRE_AUTORIZA = (BigDecimal) dis.readObject();
					
					this.UBICACION_PACIENTE = readString(dis);
					
					this.AMBULANCIA = readString(dis);
					
					this.CAUTORIZACION = readString(dis);
					
					this.CSOLICITUD = readString(dis);
					
					this.TIPO_SOLICITUD = readString(dis);
					
					this.ORIGEN = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.PYP_SIGLA = readString(dis);
					
					this.FECHA_SOLI = readDate(dis);
					
					this.FECHA_AUTORIZACION = readDate(dis);
					
					this.FECHA_TUTELA = readDate(dis);
					
					this.VENCIMIENTO = readDate(dis);
					
					this.ESTADO = readString(dis);
					
					this.NUMERO_ACTA = readString(dis);
					
					this.CLASIFICACION = readString(dis);
					
						this.PRORROGAS = (BigDecimal) dis.readObject();
					
					this.MODO = readString(dis);
					
					this.CODIGO_ACEPTACION = readString(dis);
					
					this.RESOLUCION_TUTELA = readString(dis);
					
					this.JUSTIFICACION_NOFAVORABLE = readString(dis);
					
					this.JUSTIFICACION_ANULACION = readString(dis);
					
						this.PRESPONSABLE = (BigDecimal) dis.readObject();
					
					this.DIAGR_1 = readString(dis);
					
					this.DIAGR_2 = readString(dis);
					
					this.DIAGR_3 = readString(dis);
					
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.VALOR_TOTAL = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONESAUT = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.ONSERVACION = readString(dis);
					
					this.OBSERVACIONES_AUTORIZACION = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
					this.DIAGR_1_DESCCRIPCION = readString(dis);
					
					this.DIAGR_2_DESCCRIPCION = readString(dis);
					
					this.DIAGR_3_DESCCRIPCION = readString(dis);
					
						this.TIEMPOA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_REGISTRA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORGO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORGE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PACIENTE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PARENTESCO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIGITADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIAGNOSTICOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPCSOLICITA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFESIONAL_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NOMBRE_AUTORIZA);
					
					// String
				
						writeString(this.UBICACION_PACIENTE,dos);
					
					// String
				
						writeString(this.AMBULANCIA,dos);
					
					// String
				
						writeString(this.CAUTORIZACION,dos);
					
					// String
				
						writeString(this.CSOLICITUD,dos);
					
					// String
				
						writeString(this.TIPO_SOLICITUD,dos);
					
					// String
				
						writeString(this.ORIGEN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_SOLI,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_AUTORIZACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_TUTELA,dos);
					
					// java.util.Date
				
						writeDate(this.VENCIMIENTO,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.NUMERO_ACTA,dos);
					
					// String
				
						writeString(this.CLASIFICACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRORROGAS);
					
					// String
				
						writeString(this.MODO,dos);
					
					// String
				
						writeString(this.CODIGO_ACEPTACION,dos);
					
					// String
				
						writeString(this.RESOLUCION_TUTELA,dos);
					
					// String
				
						writeString(this.JUSTIFICACION_NOFAVORABLE,dos);
					
					// String
				
						writeString(this.JUSTIFICACION_ANULACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESPONSABLE);
					
					// String
				
						writeString(this.DIAGR_1,dos);
					
					// String
				
						writeString(this.DIAGR_2,dos);
					
					// String
				
						writeString(this.DIAGR_3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_TOTAL);
					
					// String
				
						writeString(this.OBSERVACIONESAUT,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.ONSERVACION,dos);
					
					// String
				
						writeString(this.OBSERVACIONES_AUTORIZACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// String
				
						writeString(this.DIAGR_1_DESCCRIPCION,dos);
					
					// String
				
						writeString(this.DIAGR_2_DESCCRIPCION,dos);
					
					// String
				
						writeString(this.DIAGR_3_DESCCRIPCION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_REGISTRA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORGO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORGE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PACIENTE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PARENTESCO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIGITADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIAGNOSTICOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPCSOLICITA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFESIONAL_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NOMBRE_AUTORIZA);
					
					// String
				
						writeString(this.UBICACION_PACIENTE,dos);
					
					// String
				
						writeString(this.AMBULANCIA,dos);
					
					// String
				
						writeString(this.CAUTORIZACION,dos);
					
					// String
				
						writeString(this.CSOLICITUD,dos);
					
					// String
				
						writeString(this.TIPO_SOLICITUD,dos);
					
					// String
				
						writeString(this.ORIGEN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_SOLI,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_AUTORIZACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_TUTELA,dos);
					
					// java.util.Date
				
						writeDate(this.VENCIMIENTO,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.NUMERO_ACTA,dos);
					
					// String
				
						writeString(this.CLASIFICACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRORROGAS);
					
					// String
				
						writeString(this.MODO,dos);
					
					// String
				
						writeString(this.CODIGO_ACEPTACION,dos);
					
					// String
				
						writeString(this.RESOLUCION_TUTELA,dos);
					
					// String
				
						writeString(this.JUSTIFICACION_NOFAVORABLE,dos);
					
					// String
				
						writeString(this.JUSTIFICACION_ANULACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESPONSABLE);
					
					// String
				
						writeString(this.DIAGR_1,dos);
					
					// String
				
						writeString(this.DIAGR_2,dos);
					
					// String
				
						writeString(this.DIAGR_3,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_TOTAL);
					
					// String
				
						writeString(this.OBSERVACIONESAUT,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.ONSERVACION,dos);
					
					// String
				
						writeString(this.OBSERVACIONES_AUTORIZACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// String
				
						writeString(this.DIAGR_1_DESCCRIPCION,dos);
					
					// String
				
						writeString(this.DIAGR_2_DESCCRIPCION,dos);
					
					// String
				
						writeString(this.DIAGR_3_DESCCRIPCION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",UORG_REGISTRA_ID="+String.valueOf(UORG_REGISTRA_ID));
		sb.append(",UORGO_ID="+String.valueOf(UORGO_ID));
		sb.append(",UORGE_ID="+String.valueOf(UORGE_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",PACIENTE_ID="+String.valueOf(PACIENTE_ID));
		sb.append(",PARENTESCO_ID="+String.valueOf(PARENTESCO_ID));
		sb.append(",DIGITADOR="+String.valueOf(DIGITADOR));
		sb.append(",DIAGNOSTICOS_ID="+String.valueOf(DIAGNOSTICOS_ID));
		sb.append(",ESPCSOLICITA="+String.valueOf(ESPCSOLICITA));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",PROFESIONAL_ID="+String.valueOf(PROFESIONAL_ID));
		sb.append(",PROCESOSASISTENCIALES_ID="+String.valueOf(PROCESOSASISTENCIALES_ID));
		sb.append(",NOMBRE_AUTORIZA="+String.valueOf(NOMBRE_AUTORIZA));
		sb.append(",UBICACION_PACIENTE="+UBICACION_PACIENTE);
		sb.append(",AMBULANCIA="+AMBULANCIA);
		sb.append(",CAUTORIZACION="+CAUTORIZACION);
		sb.append(",CSOLICITUD="+CSOLICITUD);
		sb.append(",TIPO_SOLICITUD="+TIPO_SOLICITUD);
		sb.append(",ORIGEN="+ORIGEN);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",PYP_SIGLA="+PYP_SIGLA);
		sb.append(",FECHA_SOLI="+String.valueOf(FECHA_SOLI));
		sb.append(",FECHA_AUTORIZACION="+String.valueOf(FECHA_AUTORIZACION));
		sb.append(",FECHA_TUTELA="+String.valueOf(FECHA_TUTELA));
		sb.append(",VENCIMIENTO="+String.valueOf(VENCIMIENTO));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",NUMERO_ACTA="+NUMERO_ACTA);
		sb.append(",CLASIFICACION="+CLASIFICACION);
		sb.append(",PRORROGAS="+String.valueOf(PRORROGAS));
		sb.append(",MODO="+MODO);
		sb.append(",CODIGO_ACEPTACION="+CODIGO_ACEPTACION);
		sb.append(",RESOLUCION_TUTELA="+RESOLUCION_TUTELA);
		sb.append(",JUSTIFICACION_NOFAVORABLE="+JUSTIFICACION_NOFAVORABLE);
		sb.append(",JUSTIFICACION_ANULACION="+JUSTIFICACION_ANULACION);
		sb.append(",PRESPONSABLE="+String.valueOf(PRESPONSABLE));
		sb.append(",DIAGR_1="+DIAGR_1);
		sb.append(",DIAGR_2="+DIAGR_2);
		sb.append(",DIAGR_3="+DIAGR_3);
		sb.append(",CANTIDAD="+String.valueOf(CANTIDAD));
		sb.append(",VALOR_UNITARIO="+String.valueOf(VALOR_UNITARIO));
		sb.append(",VALOR_TOTAL="+String.valueOf(VALOR_TOTAL));
		sb.append(",OBSERVACIONESAUT="+OBSERVACIONESAUT);
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",ONSERVACION="+ONSERVACION);
		sb.append(",OBSERVACIONES_AUTORIZACION="+OBSERVACIONES_AUTORIZACION);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",DIAGR_1_DESCCRIPCION="+DIAGR_1_DESCCRIPCION);
		sb.append(",DIAGR_2_DESCCRIPCION="+DIAGR_2_DESCCRIPCION);
		sb.append(",DIAGR_3_DESCCRIPCION="+DIAGR_3_DESCCRIPCION);
		sb.append(",TIEMPOA_ID="+String.valueOf(TIEMPOA_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class AUTORIZACIONES_OUTStruct implements routines.system.IPersistableRow<AUTORIZACIONES_OUTStruct> {
    final static byte[] commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal UORG_REGISTRA_ID;

				public BigDecimal getUORG_REGISTRA_ID () {
					return this.UORG_REGISTRA_ID;
				}

				public Boolean UORG_REGISTRA_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_REGISTRA_IDIsKey(){
				    return false;
				}
				public Integer UORG_REGISTRA_IDLength(){
				    return 0;
				}
				public Integer UORG_REGISTRA_IDPrecision(){
				    return null;
				}
				public String UORG_REGISTRA_IDDefault(){
				
					return "";
				
				}
				public String UORG_REGISTRA_IDComment(){
				
				    return "";
				
				}
				public String UORG_REGISTRA_IDPattern(){
				
					return "";
				
				}
				public String UORG_REGISTRA_IDOriginalDbColumnName(){
				
					return "UORG_REGISTRA_ID";
				
				}

				
			    public BigDecimal UORGO_ID;

				public BigDecimal getUORGO_ID () {
					return this.UORGO_ID;
				}

				public Boolean UORGO_IDIsNullable(){
				    return false;
				}
				public Boolean UORGO_IDIsKey(){
				    return false;
				}
				public Integer UORGO_IDLength(){
				    return 0;
				}
				public Integer UORGO_IDPrecision(){
				    return null;
				}
				public String UORGO_IDDefault(){
				
					return "";
				
				}
				public String UORGO_IDComment(){
				
				    return "";
				
				}
				public String UORGO_IDPattern(){
				
					return "";
				
				}
				public String UORGO_IDOriginalDbColumnName(){
				
					return "UORGO_ID";
				
				}

				
			    public BigDecimal UORGE_ID;

				public BigDecimal getUORGE_ID () {
					return this.UORGE_ID;
				}

				public Boolean UORGE_IDIsNullable(){
				    return true;
				}
				public Boolean UORGE_IDIsKey(){
				    return false;
				}
				public Integer UORGE_IDLength(){
				    return 0;
				}
				public Integer UORGE_IDPrecision(){
				    return null;
				}
				public String UORGE_IDDefault(){
				
					return "";
				
				}
				public String UORGE_IDComment(){
				
				    return "";
				
				}
				public String UORGE_IDPattern(){
				
					return "";
				
				}
				public String UORGE_IDOriginalDbColumnName(){
				
					return "UORGE_ID";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return true;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public BigDecimal PACIENTE_ID;

				public BigDecimal getPACIENTE_ID () {
					return this.PACIENTE_ID;
				}

				public Boolean PACIENTE_IDIsNullable(){
				    return false;
				}
				public Boolean PACIENTE_IDIsKey(){
				    return false;
				}
				public Integer PACIENTE_IDLength(){
				    return 0;
				}
				public Integer PACIENTE_IDPrecision(){
				    return null;
				}
				public String PACIENTE_IDDefault(){
				
					return "";
				
				}
				public String PACIENTE_IDComment(){
				
				    return "";
				
				}
				public String PACIENTE_IDPattern(){
				
					return "";
				
				}
				public String PACIENTE_IDOriginalDbColumnName(){
				
					return "PACIENTE_ID";
				
				}

				
			    public BigDecimal PARENTESCO_ID;

				public BigDecimal getPARENTESCO_ID () {
					return this.PARENTESCO_ID;
				}

				public Boolean PARENTESCO_IDIsNullable(){
				    return true;
				}
				public Boolean PARENTESCO_IDIsKey(){
				    return false;
				}
				public Integer PARENTESCO_IDLength(){
				    return 0;
				}
				public Integer PARENTESCO_IDPrecision(){
				    return null;
				}
				public String PARENTESCO_IDDefault(){
				
					return "";
				
				}
				public String PARENTESCO_IDComment(){
				
				    return "";
				
				}
				public String PARENTESCO_IDPattern(){
				
					return "";
				
				}
				public String PARENTESCO_IDOriginalDbColumnName(){
				
					return "PARENTESCO_ID";
				
				}

				
			    public BigDecimal DIGITADOR;

				public BigDecimal getDIGITADOR () {
					return this.DIGITADOR;
				}

				public Boolean DIGITADORIsNullable(){
				    return false;
				}
				public Boolean DIGITADORIsKey(){
				    return false;
				}
				public Integer DIGITADORLength(){
				    return 0;
				}
				public Integer DIGITADORPrecision(){
				    return null;
				}
				public String DIGITADORDefault(){
				
					return "";
				
				}
				public String DIGITADORComment(){
				
				    return "";
				
				}
				public String DIGITADORPattern(){
				
					return "";
				
				}
				public String DIGITADOROriginalDbColumnName(){
				
					return "DIGITADOR";
				
				}

				
			    public BigDecimal DIAGNOSTICOS_ID;

				public BigDecimal getDIAGNOSTICOS_ID () {
					return this.DIAGNOSTICOS_ID;
				}

				public Boolean DIAGNOSTICOS_IDIsNullable(){
				    return true;
				}
				public Boolean DIAGNOSTICOS_IDIsKey(){
				    return false;
				}
				public Integer DIAGNOSTICOS_IDLength(){
				    return 0;
				}
				public Integer DIAGNOSTICOS_IDPrecision(){
				    return null;
				}
				public String DIAGNOSTICOS_IDDefault(){
				
					return "";
				
				}
				public String DIAGNOSTICOS_IDComment(){
				
				    return "";
				
				}
				public String DIAGNOSTICOS_IDPattern(){
				
					return "";
				
				}
				public String DIAGNOSTICOS_IDOriginalDbColumnName(){
				
					return "DIAGNOSTICOS_ID";
				
				}

				
			    public BigDecimal ESPCSOLICITA;

				public BigDecimal getESPCSOLICITA () {
					return this.ESPCSOLICITA;
				}

				public Boolean ESPCSOLICITAIsNullable(){
				    return true;
				}
				public Boolean ESPCSOLICITAIsKey(){
				    return false;
				}
				public Integer ESPCSOLICITALength(){
				    return 0;
				}
				public Integer ESPCSOLICITAPrecision(){
				    return 0;
				}
				public String ESPCSOLICITADefault(){
				
					return "";
				
				}
				public String ESPCSOLICITAComment(){
				
				    return "";
				
				}
				public String ESPCSOLICITAPattern(){
				
					return "";
				
				}
				public String ESPCSOLICITAOriginalDbColumnName(){
				
					return "ESPCSOLICITA";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal PROFESIONAL_ID;

				public BigDecimal getPROFESIONAL_ID () {
					return this.PROFESIONAL_ID;
				}

				public Boolean PROFESIONAL_IDIsNullable(){
				    return true;
				}
				public Boolean PROFESIONAL_IDIsKey(){
				    return false;
				}
				public Integer PROFESIONAL_IDLength(){
				    return 0;
				}
				public Integer PROFESIONAL_IDPrecision(){
				    return null;
				}
				public String PROFESIONAL_IDDefault(){
				
					return "";
				
				}
				public String PROFESIONAL_IDComment(){
				
				    return "";
				
				}
				public String PROFESIONAL_IDPattern(){
				
					return "";
				
				}
				public String PROFESIONAL_IDOriginalDbColumnName(){
				
					return "PROFESIONAL_ID";
				
				}

				
			    public BigDecimal PROCESOSASISTENCIALES_ID;

				public BigDecimal getPROCESOSASISTENCIALES_ID () {
					return this.PROCESOSASISTENCIALES_ID;
				}

				public Boolean PROCESOSASISTENCIALES_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOSASISTENCIALES_IDIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALES_IDLength(){
				    return 0;
				}
				public Integer PROCESOSASISTENCIALES_IDPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALES_IDDefault(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDComment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALES_IDPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIALES_ID";
				
				}

				
			    public BigDecimal NOMBRE_AUTORIZA;

				public BigDecimal getNOMBRE_AUTORIZA () {
					return this.NOMBRE_AUTORIZA;
				}

				public Boolean NOMBRE_AUTORIZAIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_AUTORIZAIsKey(){
				    return false;
				}
				public Integer NOMBRE_AUTORIZALength(){
				    return 0;
				}
				public Integer NOMBRE_AUTORIZAPrecision(){
				    return null;
				}
				public String NOMBRE_AUTORIZADefault(){
				
					return "";
				
				}
				public String NOMBRE_AUTORIZAComment(){
				
				    return "";
				
				}
				public String NOMBRE_AUTORIZAPattern(){
				
					return "";
				
				}
				public String NOMBRE_AUTORIZAOriginalDbColumnName(){
				
					return "NOMBRE_AUTORIZA";
				
				}

				
			    public String UBICACION_PACIENTE;

				public String getUBICACION_PACIENTE () {
					return this.UBICACION_PACIENTE;
				}

				public Boolean UBICACION_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean UBICACION_PACIENTEIsKey(){
				    return false;
				}
				public Integer UBICACION_PACIENTELength(){
				    return 50;
				}
				public Integer UBICACION_PACIENTEPrecision(){
				    return 0;
				}
				public String UBICACION_PACIENTEDefault(){
				
					return null;
				
				}
				public String UBICACION_PACIENTEComment(){
				
				    return "";
				
				}
				public String UBICACION_PACIENTEPattern(){
				
					return "";
				
				}
				public String UBICACION_PACIENTEOriginalDbColumnName(){
				
					return "UBICACION_PACIENTE";
				
				}

				
			    public String AMBULANCIA;

				public String getAMBULANCIA () {
					return this.AMBULANCIA;
				}

				public Boolean AMBULANCIAIsNullable(){
				    return true;
				}
				public Boolean AMBULANCIAIsKey(){
				    return false;
				}
				public Integer AMBULANCIALength(){
				    return 20;
				}
				public Integer AMBULANCIAPrecision(){
				    return 0;
				}
				public String AMBULANCIADefault(){
				
					return null;
				
				}
				public String AMBULANCIAComment(){
				
				    return "";
				
				}
				public String AMBULANCIAPattern(){
				
					return "";
				
				}
				public String AMBULANCIAOriginalDbColumnName(){
				
					return "AMBULANCIA";
				
				}

				
			    public String CAUTORIZACION;

				public String getCAUTORIZACION () {
					return this.CAUTORIZACION;
				}

				public Boolean CAUTORIZACIONIsNullable(){
				    return false;
				}
				public Boolean CAUTORIZACIONIsKey(){
				    return false;
				}
				public Integer CAUTORIZACIONLength(){
				    return 250;
				}
				public Integer CAUTORIZACIONPrecision(){
				    return 0;
				}
				public String CAUTORIZACIONDefault(){
				
					return null;
				
				}
				public String CAUTORIZACIONComment(){
				
				    return "";
				
				}
				public String CAUTORIZACIONPattern(){
				
					return "";
				
				}
				public String CAUTORIZACIONOriginalDbColumnName(){
				
					return "CAUTORIZACION";
				
				}

				
			    public String CSOLICITUD;

				public String getCSOLICITUD () {
					return this.CSOLICITUD;
				}

				public Boolean CSOLICITUDIsNullable(){
				    return true;
				}
				public Boolean CSOLICITUDIsKey(){
				    return false;
				}
				public Integer CSOLICITUDLength(){
				    return 200;
				}
				public Integer CSOLICITUDPrecision(){
				    return 0;
				}
				public String CSOLICITUDDefault(){
				
					return null;
				
				}
				public String CSOLICITUDComment(){
				
				    return "";
				
				}
				public String CSOLICITUDPattern(){
				
					return "";
				
				}
				public String CSOLICITUDOriginalDbColumnName(){
				
					return "CSOLICITUD";
				
				}

				
			    public String TIPO_SOLICITUD;

				public String getTIPO_SOLICITUD () {
					return this.TIPO_SOLICITUD;
				}

				public Boolean TIPO_SOLICITUDIsNullable(){
				    return false;
				}
				public Boolean TIPO_SOLICITUDIsKey(){
				    return false;
				}
				public Integer TIPO_SOLICITUDLength(){
				    return 50;
				}
				public Integer TIPO_SOLICITUDPrecision(){
				    return 0;
				}
				public String TIPO_SOLICITUDDefault(){
				
					return null;
				
				}
				public String TIPO_SOLICITUDComment(){
				
				    return "";
				
				}
				public String TIPO_SOLICITUDPattern(){
				
					return "";
				
				}
				public String TIPO_SOLICITUDOriginalDbColumnName(){
				
					return "TIPO_SOLICITUD";
				
				}

				
			    public String ORIGEN;

				public String getORIGEN () {
					return this.ORIGEN;
				}

				public Boolean ORIGENIsNullable(){
				    return false;
				}
				public Boolean ORIGENIsKey(){
				    return false;
				}
				public Integer ORIGENLength(){
				    return 50;
				}
				public Integer ORIGENPrecision(){
				    return 0;
				}
				public String ORIGENDefault(){
				
					return null;
				
				}
				public String ORIGENComment(){
				
				    return "";
				
				}
				public String ORIGENPattern(){
				
					return "";
				
				}
				public String ORIGENOriginalDbColumnName(){
				
					return "ORIGEN";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return 0;
				}
				public String EDADDefault(){
				
					return "";
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String PYP_SIGLA;

				public String getPYP_SIGLA () {
					return this.PYP_SIGLA;
				}

				public Boolean PYP_SIGLAIsNullable(){
				    return true;
				}
				public Boolean PYP_SIGLAIsKey(){
				    return false;
				}
				public Integer PYP_SIGLALength(){
				    return 20;
				}
				public Integer PYP_SIGLAPrecision(){
				    return 0;
				}
				public String PYP_SIGLADefault(){
				
					return null;
				
				}
				public String PYP_SIGLAComment(){
				
				    return "";
				
				}
				public String PYP_SIGLAPattern(){
				
					return "";
				
				}
				public String PYP_SIGLAOriginalDbColumnName(){
				
					return "PYP_SIGLA";
				
				}

				
			    public java.util.Date FECHA_SOLI;

				public java.util.Date getFECHA_SOLI () {
					return this.FECHA_SOLI;
				}

				public Boolean FECHA_SOLIIsNullable(){
				    return false;
				}
				public Boolean FECHA_SOLIIsKey(){
				    return false;
				}
				public Integer FECHA_SOLILength(){
				    return 0;
				}
				public Integer FECHA_SOLIPrecision(){
				    return 0;
				}
				public String FECHA_SOLIDefault(){
				
					return null;
				
				}
				public String FECHA_SOLIComment(){
				
				    return "";
				
				}
				public String FECHA_SOLIPattern(){
				
					return "";
				
				}
				public String FECHA_SOLIOriginalDbColumnName(){
				
					return "FECHA_SOLI";
				
				}

				
			    public java.util.Date FECHA_AUTORIZACION;

				public java.util.Date getFECHA_AUTORIZACION () {
					return this.FECHA_AUTORIZACION;
				}

				public Boolean FECHA_AUTORIZACIONIsNullable(){
				    return false;
				}
				public Boolean FECHA_AUTORIZACIONIsKey(){
				    return false;
				}
				public Integer FECHA_AUTORIZACIONLength(){
				    return 0;
				}
				public Integer FECHA_AUTORIZACIONPrecision(){
				    return 0;
				}
				public String FECHA_AUTORIZACIONDefault(){
				
					return null;
				
				}
				public String FECHA_AUTORIZACIONComment(){
				
				    return "";
				
				}
				public String FECHA_AUTORIZACIONPattern(){
				
					return "";
				
				}
				public String FECHA_AUTORIZACIONOriginalDbColumnName(){
				
					return "FECHA_AUTORIZACION";
				
				}

				
			    public java.util.Date FECHA_TUTELA;

				public java.util.Date getFECHA_TUTELA () {
					return this.FECHA_TUTELA;
				}

				public Boolean FECHA_TUTELAIsNullable(){
				    return true;
				}
				public Boolean FECHA_TUTELAIsKey(){
				    return false;
				}
				public Integer FECHA_TUTELALength(){
				    return 0;
				}
				public Integer FECHA_TUTELAPrecision(){
				    return 0;
				}
				public String FECHA_TUTELADefault(){
				
					return null;
				
				}
				public String FECHA_TUTELAComment(){
				
				    return "";
				
				}
				public String FECHA_TUTELAPattern(){
				
					return "";
				
				}
				public String FECHA_TUTELAOriginalDbColumnName(){
				
					return "FECHA_TUTELA";
				
				}

				
			    public java.util.Date VENCIMIENTO;

				public java.util.Date getVENCIMIENTO () {
					return this.VENCIMIENTO;
				}

				public Boolean VENCIMIENTOIsNullable(){
				    return false;
				}
				public Boolean VENCIMIENTOIsKey(){
				    return false;
				}
				public Integer VENCIMIENTOLength(){
				    return 0;
				}
				public Integer VENCIMIENTOPrecision(){
				    return 0;
				}
				public String VENCIMIENTODefault(){
				
					return null;
				
				}
				public String VENCIMIENTOComment(){
				
				    return "";
				
				}
				public String VENCIMIENTOPattern(){
				
					return "";
				
				}
				public String VENCIMIENTOOriginalDbColumnName(){
				
					return "VENCIMIENTO";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 20;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String NUMERO_ACTA;

				public String getNUMERO_ACTA () {
					return this.NUMERO_ACTA;
				}

				public Boolean NUMERO_ACTAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_ACTAIsKey(){
				    return false;
				}
				public Integer NUMERO_ACTALength(){
				    return 500;
				}
				public Integer NUMERO_ACTAPrecision(){
				    return 0;
				}
				public String NUMERO_ACTADefault(){
				
					return null;
				
				}
				public String NUMERO_ACTAComment(){
				
				    return "";
				
				}
				public String NUMERO_ACTAPattern(){
				
					return "";
				
				}
				public String NUMERO_ACTAOriginalDbColumnName(){
				
					return "NUMERO_ACTA";
				
				}

				
			    public String CLASIFICACION;

				public String getCLASIFICACION () {
					return this.CLASIFICACION;
				}

				public Boolean CLASIFICACIONIsNullable(){
				    return true;
				}
				public Boolean CLASIFICACIONIsKey(){
				    return false;
				}
				public Integer CLASIFICACIONLength(){
				    return 20;
				}
				public Integer CLASIFICACIONPrecision(){
				    return 0;
				}
				public String CLASIFICACIONDefault(){
				
					return null;
				
				}
				public String CLASIFICACIONComment(){
				
				    return "";
				
				}
				public String CLASIFICACIONPattern(){
				
					return "";
				
				}
				public String CLASIFICACIONOriginalDbColumnName(){
				
					return "CLASIFICACION";
				
				}

				
			    public BigDecimal PRORROGAS;

				public BigDecimal getPRORROGAS () {
					return this.PRORROGAS;
				}

				public Boolean PRORROGASIsNullable(){
				    return false;
				}
				public Boolean PRORROGASIsKey(){
				    return false;
				}
				public Integer PRORROGASLength(){
				    return 0;
				}
				public Integer PRORROGASPrecision(){
				    return null;
				}
				public String PRORROGASDefault(){
				
					return "";
				
				}
				public String PRORROGASComment(){
				
				    return "";
				
				}
				public String PRORROGASPattern(){
				
					return "";
				
				}
				public String PRORROGASOriginalDbColumnName(){
				
					return "PRORROGAS";
				
				}

				
			    public String MODO;

				public String getMODO () {
					return this.MODO;
				}

				public Boolean MODOIsNullable(){
				    return true;
				}
				public Boolean MODOIsKey(){
				    return false;
				}
				public Integer MODOLength(){
				    return 20;
				}
				public Integer MODOPrecision(){
				    return 0;
				}
				public String MODODefault(){
				
					return null;
				
				}
				public String MODOComment(){
				
				    return "";
				
				}
				public String MODOPattern(){
				
					return "";
				
				}
				public String MODOOriginalDbColumnName(){
				
					return "MODO";
				
				}

				
			    public String CODIGO_ACEPTACION;

				public String getCODIGO_ACEPTACION () {
					return this.CODIGO_ACEPTACION;
				}

				public Boolean CODIGO_ACEPTACIONIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ACEPTACIONIsKey(){
				    return false;
				}
				public Integer CODIGO_ACEPTACIONLength(){
				    return 2500;
				}
				public Integer CODIGO_ACEPTACIONPrecision(){
				    return 0;
				}
				public String CODIGO_ACEPTACIONDefault(){
				
					return null;
				
				}
				public String CODIGO_ACEPTACIONComment(){
				
				    return "";
				
				}
				public String CODIGO_ACEPTACIONPattern(){
				
					return "";
				
				}
				public String CODIGO_ACEPTACIONOriginalDbColumnName(){
				
					return "CODIGO_ACEPTACION";
				
				}

				
			    public String RESOLUCION_TUTELA;

				public String getRESOLUCION_TUTELA () {
					return this.RESOLUCION_TUTELA;
				}

				public Boolean RESOLUCION_TUTELAIsNullable(){
				    return true;
				}
				public Boolean RESOLUCION_TUTELAIsKey(){
				    return false;
				}
				public Integer RESOLUCION_TUTELALength(){
				    return 4000;
				}
				public Integer RESOLUCION_TUTELAPrecision(){
				    return 0;
				}
				public String RESOLUCION_TUTELADefault(){
				
					return null;
				
				}
				public String RESOLUCION_TUTELAComment(){
				
				    return "";
				
				}
				public String RESOLUCION_TUTELAPattern(){
				
					return "";
				
				}
				public String RESOLUCION_TUTELAOriginalDbColumnName(){
				
					return "RESOLUCION_TUTELA";
				
				}

				
			    public String JUSTIFICACION_NOFAVORABLE;

				public String getJUSTIFICACION_NOFAVORABLE () {
					return this.JUSTIFICACION_NOFAVORABLE;
				}

				public Boolean JUSTIFICACION_NOFAVORABLEIsNullable(){
				    return true;
				}
				public Boolean JUSTIFICACION_NOFAVORABLEIsKey(){
				    return false;
				}
				public Integer JUSTIFICACION_NOFAVORABLELength(){
				    return 4000;
				}
				public Integer JUSTIFICACION_NOFAVORABLEPrecision(){
				    return 0;
				}
				public String JUSTIFICACION_NOFAVORABLEDefault(){
				
					return null;
				
				}
				public String JUSTIFICACION_NOFAVORABLEComment(){
				
				    return "";
				
				}
				public String JUSTIFICACION_NOFAVORABLEPattern(){
				
					return "";
				
				}
				public String JUSTIFICACION_NOFAVORABLEOriginalDbColumnName(){
				
					return "JUSTIFICACION_NOFAVORABLE";
				
				}

				
			    public String JUSTIFICACION_ANULACION;

				public String getJUSTIFICACION_ANULACION () {
					return this.JUSTIFICACION_ANULACION;
				}

				public Boolean JUSTIFICACION_ANULACIONIsNullable(){
				    return true;
				}
				public Boolean JUSTIFICACION_ANULACIONIsKey(){
				    return false;
				}
				public Integer JUSTIFICACION_ANULACIONLength(){
				    return 4000;
				}
				public Integer JUSTIFICACION_ANULACIONPrecision(){
				    return 0;
				}
				public String JUSTIFICACION_ANULACIONDefault(){
				
					return null;
				
				}
				public String JUSTIFICACION_ANULACIONComment(){
				
				    return "";
				
				}
				public String JUSTIFICACION_ANULACIONPattern(){
				
					return "";
				
				}
				public String JUSTIFICACION_ANULACIONOriginalDbColumnName(){
				
					return "JUSTIFICACION_ANULACION";
				
				}

				
			    public BigDecimal PRESPONSABLE;

				public BigDecimal getPRESPONSABLE () {
					return this.PRESPONSABLE;
				}

				public Boolean PRESPONSABLEIsNullable(){
				    return true;
				}
				public Boolean PRESPONSABLEIsKey(){
				    return false;
				}
				public Integer PRESPONSABLELength(){
				    return 0;
				}
				public Integer PRESPONSABLEPrecision(){
				    return null;
				}
				public String PRESPONSABLEDefault(){
				
					return "";
				
				}
				public String PRESPONSABLEComment(){
				
				    return "";
				
				}
				public String PRESPONSABLEPattern(){
				
					return "";
				
				}
				public String PRESPONSABLEOriginalDbColumnName(){
				
					return "PRESPONSABLE";
				
				}

				
			    public String DIAGR_1;

				public String getDIAGR_1 () {
					return this.DIAGR_1;
				}

				public Boolean DIAGR_1IsNullable(){
				    return true;
				}
				public Boolean DIAGR_1IsKey(){
				    return false;
				}
				public Integer DIAGR_1Length(){
				    return 512;
				}
				public Integer DIAGR_1Precision(){
				    return 0;
				}
				public String DIAGR_1Default(){
				
					return null;
				
				}
				public String DIAGR_1Comment(){
				
				    return "";
				
				}
				public String DIAGR_1Pattern(){
				
					return "";
				
				}
				public String DIAGR_1OriginalDbColumnName(){
				
					return "DIAGR_1";
				
				}

				
			    public String DIAGR_2;

				public String getDIAGR_2 () {
					return this.DIAGR_2;
				}

				public Boolean DIAGR_2IsNullable(){
				    return true;
				}
				public Boolean DIAGR_2IsKey(){
				    return false;
				}
				public Integer DIAGR_2Length(){
				    return 512;
				}
				public Integer DIAGR_2Precision(){
				    return 0;
				}
				public String DIAGR_2Default(){
				
					return null;
				
				}
				public String DIAGR_2Comment(){
				
				    return "";
				
				}
				public String DIAGR_2Pattern(){
				
					return "";
				
				}
				public String DIAGR_2OriginalDbColumnName(){
				
					return "DIAGR_2";
				
				}

				
			    public String DIAGR_3;

				public String getDIAGR_3 () {
					return this.DIAGR_3;
				}

				public Boolean DIAGR_3IsNullable(){
				    return true;
				}
				public Boolean DIAGR_3IsKey(){
				    return false;
				}
				public Integer DIAGR_3Length(){
				    return 512;
				}
				public Integer DIAGR_3Precision(){
				    return 0;
				}
				public String DIAGR_3Default(){
				
					return null;
				
				}
				public String DIAGR_3Comment(){
				
				    return "";
				
				}
				public String DIAGR_3Pattern(){
				
					return "";
				
				}
				public String DIAGR_3OriginalDbColumnName(){
				
					return "DIAGR_3";
				
				}

				
			    public BigDecimal CANTIDAD;

				public BigDecimal getCANTIDAD () {
					return this.CANTIDAD;
				}

				public Boolean CANTIDADIsNullable(){
				    return false;
				}
				public Boolean CANTIDADIsKey(){
				    return false;
				}
				public Integer CANTIDADLength(){
				    return 0;
				}
				public Integer CANTIDADPrecision(){
				    return null;
				}
				public String CANTIDADDefault(){
				
					return "";
				
				}
				public String CANTIDADComment(){
				
				    return "";
				
				}
				public String CANTIDADPattern(){
				
					return "";
				
				}
				public String CANTIDADOriginalDbColumnName(){
				
					return "CANTIDAD";
				
				}

				
			    public BigDecimal VALOR_UNITARIO;

				public BigDecimal getVALOR_UNITARIO () {
					return this.VALOR_UNITARIO;
				}

				public Boolean VALOR_UNITARIOIsNullable(){
				    return false;
				}
				public Boolean VALOR_UNITARIOIsKey(){
				    return false;
				}
				public Integer VALOR_UNITARIOLength(){
				    return 0;
				}
				public Integer VALOR_UNITARIOPrecision(){
				    return null;
				}
				public String VALOR_UNITARIODefault(){
				
					return "";
				
				}
				public String VALOR_UNITARIOComment(){
				
				    return "";
				
				}
				public String VALOR_UNITARIOPattern(){
				
					return "";
				
				}
				public String VALOR_UNITARIOOriginalDbColumnName(){
				
					return "VALOR_UNITARIO";
				
				}

				
			    public BigDecimal VALOR_TOTAL;

				public BigDecimal getVALOR_TOTAL () {
					return this.VALOR_TOTAL;
				}

				public Boolean VALOR_TOTALIsNullable(){
				    return false;
				}
				public Boolean VALOR_TOTALIsKey(){
				    return false;
				}
				public Integer VALOR_TOTALLength(){
				    return 0;
				}
				public Integer VALOR_TOTALPrecision(){
				    return null;
				}
				public String VALOR_TOTALDefault(){
				
					return "";
				
				}
				public String VALOR_TOTALComment(){
				
				    return "";
				
				}
				public String VALOR_TOTALPattern(){
				
					return "";
				
				}
				public String VALOR_TOTALOriginalDbColumnName(){
				
					return "VALOR_TOTAL";
				
				}

				
			    public String OBSERVACIONESAUT;

				public String getOBSERVACIONESAUT () {
					return this.OBSERVACIONESAUT;
				}

				public Boolean OBSERVACIONESAUTIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESAUTIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESAUTLength(){
				    return 4000;
				}
				public Integer OBSERVACIONESAUTPrecision(){
				    return 0;
				}
				public String OBSERVACIONESAUTDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESAUTComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESAUTPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESAUTOriginalDbColumnName(){
				
					return "OBSERVACIONESAUT";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 4000;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public String ONSERVACION;

				public String getONSERVACION () {
					return this.ONSERVACION;
				}

				public Boolean ONSERVACIONIsNullable(){
				    return true;
				}
				public Boolean ONSERVACIONIsKey(){
				    return false;
				}
				public Integer ONSERVACIONLength(){
				    return 4000;
				}
				public Integer ONSERVACIONPrecision(){
				    return 0;
				}
				public String ONSERVACIONDefault(){
				
					return null;
				
				}
				public String ONSERVACIONComment(){
				
				    return "";
				
				}
				public String ONSERVACIONPattern(){
				
					return "";
				
				}
				public String ONSERVACIONOriginalDbColumnName(){
				
					return "ONSERVACION";
				
				}

				
			    public String OBSERVACIONES_AUTORIZACION;

				public String getOBSERVACIONES_AUTORIZACION () {
					return this.OBSERVACIONES_AUTORIZACION;
				}

				public Boolean OBSERVACIONES_AUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONES_AUTORIZACIONIsKey(){
				    return false;
				}
				public Integer OBSERVACIONES_AUTORIZACIONLength(){
				    return 4000;
				}
				public Integer OBSERVACIONES_AUTORIZACIONPrecision(){
				    return 0;
				}
				public String OBSERVACIONES_AUTORIZACIONDefault(){
				
					return null;
				
				}
				public String OBSERVACIONES_AUTORIZACIONComment(){
				
				    return "";
				
				}
				public String OBSERVACIONES_AUTORIZACIONPattern(){
				
					return "";
				
				}
				public String OBSERVACIONES_AUTORIZACIONOriginalDbColumnName(){
				
					return "OBSERVACIONES_AUTORIZACION";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public BigDecimal TIEMPOS_ID;

				public BigDecimal getTIEMPOS_ID () {
					return this.TIEMPOS_ID;
				}

				public Boolean TIEMPOS_IDIsNullable(){
				    return true;
				}
				public Boolean TIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOS_IDLength(){
				    return null;
				}
				public Integer TIEMPOS_IDPrecision(){
				    return null;
				}
				public String TIEMPOS_IDDefault(){
				
					return null;
				
				}
				public String TIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOS_IDOriginalDbColumnName(){
				
					return "TIEMPOS_ID";
				
				}

				
			    public String DIAGR_1_DESCCRIPCION;

				public String getDIAGR_1_DESCCRIPCION () {
					return this.DIAGR_1_DESCCRIPCION;
				}

				public Boolean DIAGR_1_DESCCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DIAGR_1_DESCCRIPCIONIsKey(){
				    return false;
				}
				public Integer DIAGR_1_DESCCRIPCIONLength(){
				    return null;
				}
				public Integer DIAGR_1_DESCCRIPCIONPrecision(){
				    return null;
				}
				public String DIAGR_1_DESCCRIPCIONDefault(){
				
					return null;
				
				}
				public String DIAGR_1_DESCCRIPCIONComment(){
				
				    return "";
				
				}
				public String DIAGR_1_DESCCRIPCIONPattern(){
				
					return "";
				
				}
				public String DIAGR_1_DESCCRIPCIONOriginalDbColumnName(){
				
					return "DIAGR_1_DESCCRIPCION";
				
				}

				
			    public String DIAGR_2_DESCCRIPCION;

				public String getDIAGR_2_DESCCRIPCION () {
					return this.DIAGR_2_DESCCRIPCION;
				}

				public Boolean DIAGR_2_DESCCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DIAGR_2_DESCCRIPCIONIsKey(){
				    return false;
				}
				public Integer DIAGR_2_DESCCRIPCIONLength(){
				    return null;
				}
				public Integer DIAGR_2_DESCCRIPCIONPrecision(){
				    return null;
				}
				public String DIAGR_2_DESCCRIPCIONDefault(){
				
					return null;
				
				}
				public String DIAGR_2_DESCCRIPCIONComment(){
				
				    return "";
				
				}
				public String DIAGR_2_DESCCRIPCIONPattern(){
				
					return "";
				
				}
				public String DIAGR_2_DESCCRIPCIONOriginalDbColumnName(){
				
					return "DIAGR_2_DESCCRIPCION";
				
				}

				
			    public String DIAGR_3_DESCCRIPCION;

				public String getDIAGR_3_DESCCRIPCION () {
					return this.DIAGR_3_DESCCRIPCION;
				}

				public Boolean DIAGR_3_DESCCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DIAGR_3_DESCCRIPCIONIsKey(){
				    return false;
				}
				public Integer DIAGR_3_DESCCRIPCIONLength(){
				    return null;
				}
				public Integer DIAGR_3_DESCCRIPCIONPrecision(){
				    return null;
				}
				public String DIAGR_3_DESCCRIPCIONDefault(){
				
					return null;
				
				}
				public String DIAGR_3_DESCCRIPCIONComment(){
				
				    return "";
				
				}
				public String DIAGR_3_DESCCRIPCIONPattern(){
				
					return "";
				
				}
				public String DIAGR_3_DESCCRIPCIONOriginalDbColumnName(){
				
					return "DIAGR_3_DESCCRIPCION";
				
				}

				
			    public BigDecimal TIEMPOA_ID;

				public BigDecimal getTIEMPOA_ID () {
					return this.TIEMPOA_ID;
				}

				public Boolean TIEMPOA_IDIsNullable(){
				    return true;
				}
				public Boolean TIEMPOA_IDIsKey(){
				    return false;
				}
				public Integer TIEMPOA_IDLength(){
				    return null;
				}
				public Integer TIEMPOA_IDPrecision(){
				    return null;
				}
				public String TIEMPOA_IDDefault(){
				
					return null;
				
				}
				public String TIEMPOA_IDComment(){
				
				    return "";
				
				}
				public String TIEMPOA_IDPattern(){
				
					return "";
				
				}
				public String TIEMPOA_IDOriginalDbColumnName(){
				
					return "TIEMPOA_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length == 0) {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length == 0) {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.UORG_REGISTRA_ID = (BigDecimal) dis.readObject();
					
						this.UORGO_ID = (BigDecimal) dis.readObject();
					
						this.UORGE_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
						this.PACIENTE_ID = (BigDecimal) dis.readObject();
					
						this.PARENTESCO_ID = (BigDecimal) dis.readObject();
					
						this.DIGITADOR = (BigDecimal) dis.readObject();
					
						this.DIAGNOSTICOS_ID = (BigDecimal) dis.readObject();
					
						this.ESPCSOLICITA = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
						this.NOMBRE_AUTORIZA = (BigDecimal) dis.readObject();
					
					this.UBICACION_PACIENTE = readString(dis);
					
					this.AMBULANCIA = readString(dis);
					
					this.CAUTORIZACION = readString(dis);
					
					this.CSOLICITUD = readString(dis);
					
					this.TIPO_SOLICITUD = readString(dis);
					
					this.ORIGEN = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.PYP_SIGLA = readString(dis);
					
					this.FECHA_SOLI = readDate(dis);
					
					this.FECHA_AUTORIZACION = readDate(dis);
					
					this.FECHA_TUTELA = readDate(dis);
					
					this.VENCIMIENTO = readDate(dis);
					
					this.ESTADO = readString(dis);
					
					this.NUMERO_ACTA = readString(dis);
					
					this.CLASIFICACION = readString(dis);
					
						this.PRORROGAS = (BigDecimal) dis.readObject();
					
					this.MODO = readString(dis);
					
					this.CODIGO_ACEPTACION = readString(dis);
					
					this.RESOLUCION_TUTELA = readString(dis);
					
					this.JUSTIFICACION_NOFAVORABLE = readString(dis);
					
					this.JUSTIFICACION_ANULACION = readString(dis);
					
						this.PRESPONSABLE = (BigDecimal) dis.readObject();
					
					this.DIAGR_1 = readString(dis);
					
					this.DIAGR_2 = readString(dis);
					
					this.DIAGR_3 = readString(dis);
					
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.VALOR_TOTAL = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONESAUT = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.ONSERVACION = readString(dis);
					
					this.OBSERVACIONES_AUTORIZACION = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
					this.DIAGR_1_DESCCRIPCION = readString(dis);
					
					this.DIAGR_2_DESCCRIPCION = readString(dis);
					
					this.DIAGR_3_DESCCRIPCION = readString(dis);
					
						this.TIEMPOA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.UORG_REGISTRA_ID = (BigDecimal) dis.readObject();
					
						this.UORGO_ID = (BigDecimal) dis.readObject();
					
						this.UORGE_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
						this.PACIENTE_ID = (BigDecimal) dis.readObject();
					
						this.PARENTESCO_ID = (BigDecimal) dis.readObject();
					
						this.DIGITADOR = (BigDecimal) dis.readObject();
					
						this.DIAGNOSTICOS_ID = (BigDecimal) dis.readObject();
					
						this.ESPCSOLICITA = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
						this.NOMBRE_AUTORIZA = (BigDecimal) dis.readObject();
					
					this.UBICACION_PACIENTE = readString(dis);
					
					this.AMBULANCIA = readString(dis);
					
					this.CAUTORIZACION = readString(dis);
					
					this.CSOLICITUD = readString(dis);
					
					this.TIPO_SOLICITUD = readString(dis);
					
					this.ORIGEN = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.PYP_SIGLA = readString(dis);
					
					this.FECHA_SOLI = readDate(dis);
					
					this.FECHA_AUTORIZACION = readDate(dis);
					
					this.FECHA_TUTELA = readDate(dis);
					
					this.VENCIMIENTO = readDate(dis);
					
					this.ESTADO = readString(dis);
					
					this.NUMERO_ACTA = readString(dis);
					
					this.CLASIFICACION = readString(dis);
					
						this.PRORROGAS = (BigDecimal) dis.readObject();
					
					this.MODO = readString(dis);
					
					this.CODIGO_ACEPTACION = readString(dis);
					
					this.RESOLUCION_TUTELA = readString(dis);
					
					this.JUSTIFICACION_NOFAVORABLE = readString(dis);
					
					this.JUSTIFICACION_ANULACION = readString(dis);
					
						this.PRESPONSABLE = (BigDecimal) dis.readObject();
					
					this.DIAGR_1 = readString(dis);
					
					this.DIAGR_2 = readString(dis);
					
					this.DIAGR_3 = readString(dis);
					
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.VALOR_TOTAL = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONESAUT = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.ONSERVACION = readString(dis);
					
					this.OBSERVACIONES_AUTORIZACION = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.TIEMPOS_ID = (BigDecimal) dis.readObject();
					
					this.DIAGR_1_DESCCRIPCION = readString(dis);
					
					this.DIAGR_2_DESCCRIPCION = readString(dis);
					
					this.DIAGR_3_DESCCRIPCION = readString(dis);
					
						this.TIEMPOA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_REGISTRA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORGO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORGE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PACIENTE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PARENTESCO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIGITADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIAGNOSTICOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPCSOLICITA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFESIONAL_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NOMBRE_AUTORIZA);
					
					// String
				
						writeString(this.UBICACION_PACIENTE,dos);
					
					// String
				
						writeString(this.AMBULANCIA,dos);
					
					// String
				
						writeString(this.CAUTORIZACION,dos);
					
					// String
				
						writeString(this.CSOLICITUD,dos);
					
					// String
				
						writeString(this.TIPO_SOLICITUD,dos);
					
					// String
				
						writeString(this.ORIGEN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_SOLI,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_AUTORIZACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_TUTELA,dos);
					
					// java.util.Date
				
						writeDate(this.VENCIMIENTO,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.NUMERO_ACTA,dos);
					
					// String
				
						writeString(this.CLASIFICACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRORROGAS);
					
					// String
				
						writeString(this.MODO,dos);
					
					// String
				
						writeString(this.CODIGO_ACEPTACION,dos);
					
					// String
				
						writeString(this.RESOLUCION_TUTELA,dos);
					
					// String
				
						writeString(this.JUSTIFICACION_NOFAVORABLE,dos);
					
					// String
				
						writeString(this.JUSTIFICACION_ANULACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESPONSABLE);
					
					// String
				
						writeString(this.DIAGR_1,dos);
					
					// String
				
						writeString(this.DIAGR_2,dos);
					
					// String
				
						writeString(this.DIAGR_3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_TOTAL);
					
					// String
				
						writeString(this.OBSERVACIONESAUT,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.ONSERVACION,dos);
					
					// String
				
						writeString(this.OBSERVACIONES_AUTORIZACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOS_ID);
					
					// String
				
						writeString(this.DIAGR_1_DESCCRIPCION,dos);
					
					// String
				
						writeString(this.DIAGR_2_DESCCRIPCION,dos);
					
					// String
				
						writeString(this.DIAGR_3_DESCCRIPCION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TIEMPOA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_REGISTRA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORGO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORGE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PACIENTE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PARENTESCO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIGITADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIAGNOSTICOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPCSOLICITA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFESIONAL_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NOMBRE_AUTORIZA);
					
					// String
				
						writeString(this.UBICACION_PACIENTE,dos);
					
					// String
				
						writeString(this.AMBULANCIA,dos);
					
					// String
				
						writeString(this.CAUTORIZACION,dos);
					
					// String
				
						writeString(this.CSOLICITUD,dos);
					
					// String
				
						writeString(this.TIPO_SOLICITUD,dos);
					
					// String
				
						writeString(this.ORIGEN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_SOLI,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_AUTORIZACION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_TUTELA,dos);
					
					// java.util.Date
				
						writeDate(this.VENCIMIENTO,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.NUMERO_ACTA,dos);
					
					// String
				
						writeString(this.CLASIFICACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRORROGAS);
					
					// String
				
						writeString(this.MODO,dos);
					
					// String
				
						writeString(this.CODIGO_ACEPTACION,dos);
					
					// String
				
						writeString(this.RESOLUCION_TUTELA,dos);
					
					// String
				
						writeString(this.JUSTIFICACION_NOFAVORABLE,dos);
					
					// String
				
						writeString(this.JUSTIFICACION_ANULACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESPONSABLE);
					
					// String
				
						writeString(this.DIAGR_1,dos);
					
					// String
				
						writeString(this.DIAGR_2,dos);
					
					// String
				
						writeString(this.DIAGR_3,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_TOTAL);
					
					// String
				
						writeString(this.OBSERVACIONESAUT,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.ONSERVACION,dos);
					
					// String
				
						writeString(this.OBSERVACIONES_AUTORIZACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOS_ID);
					
					// String
				
						writeString(this.DIAGR_1_DESCCRIPCION,dos);
					
					// String
				
						writeString(this.DIAGR_2_DESCCRIPCION,dos);
					
					// String
				
						writeString(this.DIAGR_3_DESCCRIPCION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TIEMPOA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",UORG_REGISTRA_ID="+String.valueOf(UORG_REGISTRA_ID));
		sb.append(",UORGO_ID="+String.valueOf(UORGO_ID));
		sb.append(",UORGE_ID="+String.valueOf(UORGE_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",PACIENTE_ID="+String.valueOf(PACIENTE_ID));
		sb.append(",PARENTESCO_ID="+String.valueOf(PARENTESCO_ID));
		sb.append(",DIGITADOR="+String.valueOf(DIGITADOR));
		sb.append(",DIAGNOSTICOS_ID="+String.valueOf(DIAGNOSTICOS_ID));
		sb.append(",ESPCSOLICITA="+String.valueOf(ESPCSOLICITA));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",PROFESIONAL_ID="+String.valueOf(PROFESIONAL_ID));
		sb.append(",PROCESOSASISTENCIALES_ID="+String.valueOf(PROCESOSASISTENCIALES_ID));
		sb.append(",NOMBRE_AUTORIZA="+String.valueOf(NOMBRE_AUTORIZA));
		sb.append(",UBICACION_PACIENTE="+UBICACION_PACIENTE);
		sb.append(",AMBULANCIA="+AMBULANCIA);
		sb.append(",CAUTORIZACION="+CAUTORIZACION);
		sb.append(",CSOLICITUD="+CSOLICITUD);
		sb.append(",TIPO_SOLICITUD="+TIPO_SOLICITUD);
		sb.append(",ORIGEN="+ORIGEN);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",PYP_SIGLA="+PYP_SIGLA);
		sb.append(",FECHA_SOLI="+String.valueOf(FECHA_SOLI));
		sb.append(",FECHA_AUTORIZACION="+String.valueOf(FECHA_AUTORIZACION));
		sb.append(",FECHA_TUTELA="+String.valueOf(FECHA_TUTELA));
		sb.append(",VENCIMIENTO="+String.valueOf(VENCIMIENTO));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",NUMERO_ACTA="+NUMERO_ACTA);
		sb.append(",CLASIFICACION="+CLASIFICACION);
		sb.append(",PRORROGAS="+String.valueOf(PRORROGAS));
		sb.append(",MODO="+MODO);
		sb.append(",CODIGO_ACEPTACION="+CODIGO_ACEPTACION);
		sb.append(",RESOLUCION_TUTELA="+RESOLUCION_TUTELA);
		sb.append(",JUSTIFICACION_NOFAVORABLE="+JUSTIFICACION_NOFAVORABLE);
		sb.append(",JUSTIFICACION_ANULACION="+JUSTIFICACION_ANULACION);
		sb.append(",PRESPONSABLE="+String.valueOf(PRESPONSABLE));
		sb.append(",DIAGR_1="+DIAGR_1);
		sb.append(",DIAGR_2="+DIAGR_2);
		sb.append(",DIAGR_3="+DIAGR_3);
		sb.append(",CANTIDAD="+String.valueOf(CANTIDAD));
		sb.append(",VALOR_UNITARIO="+String.valueOf(VALOR_UNITARIO));
		sb.append(",VALOR_TOTAL="+String.valueOf(VALOR_TOTAL));
		sb.append(",OBSERVACIONESAUT="+OBSERVACIONESAUT);
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",ONSERVACION="+ONSERVACION);
		sb.append(",OBSERVACIONES_AUTORIZACION="+OBSERVACIONES_AUTORIZACION);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",TIEMPOS_ID="+String.valueOf(TIEMPOS_ID));
		sb.append(",DIAGR_1_DESCCRIPCION="+DIAGR_1_DESCCRIPCION);
		sb.append(",DIAGR_2_DESCCRIPCION="+DIAGR_2_DESCCRIPCION);
		sb.append(",DIAGR_3_DESCCRIPCION="+DIAGR_3_DESCCRIPCION);
		sb.append(",TIEMPOA_ID="+String.valueOf(TIEMPOA_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(AUTORIZACIONES_OUTStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal UORG_REGISTRA_ID;

				public BigDecimal getUORG_REGISTRA_ID () {
					return this.UORG_REGISTRA_ID;
				}

				public Boolean UORG_REGISTRA_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_REGISTRA_IDIsKey(){
				    return false;
				}
				public Integer UORG_REGISTRA_IDLength(){
				    return 0;
				}
				public Integer UORG_REGISTRA_IDPrecision(){
				    return null;
				}
				public String UORG_REGISTRA_IDDefault(){
				
					return "";
				
				}
				public String UORG_REGISTRA_IDComment(){
				
				    return "";
				
				}
				public String UORG_REGISTRA_IDPattern(){
				
					return "";
				
				}
				public String UORG_REGISTRA_IDOriginalDbColumnName(){
				
					return "UORG_REGISTRA_ID";
				
				}

				
			    public BigDecimal UORGO_ID;

				public BigDecimal getUORGO_ID () {
					return this.UORGO_ID;
				}

				public Boolean UORGO_IDIsNullable(){
				    return false;
				}
				public Boolean UORGO_IDIsKey(){
				    return false;
				}
				public Integer UORGO_IDLength(){
				    return 0;
				}
				public Integer UORGO_IDPrecision(){
				    return null;
				}
				public String UORGO_IDDefault(){
				
					return "";
				
				}
				public String UORGO_IDComment(){
				
				    return "";
				
				}
				public String UORGO_IDPattern(){
				
					return "";
				
				}
				public String UORGO_IDOriginalDbColumnName(){
				
					return "UORGO_ID";
				
				}

				
			    public BigDecimal UORGE_ID;

				public BigDecimal getUORGE_ID () {
					return this.UORGE_ID;
				}

				public Boolean UORGE_IDIsNullable(){
				    return true;
				}
				public Boolean UORGE_IDIsKey(){
				    return false;
				}
				public Integer UORGE_IDLength(){
				    return 0;
				}
				public Integer UORGE_IDPrecision(){
				    return null;
				}
				public String UORGE_IDDefault(){
				
					return "";
				
				}
				public String UORGE_IDComment(){
				
				    return "";
				
				}
				public String UORGE_IDPattern(){
				
					return "";
				
				}
				public String UORGE_IDOriginalDbColumnName(){
				
					return "UORGE_ID";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return true;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public BigDecimal PACIENTE_ID;

				public BigDecimal getPACIENTE_ID () {
					return this.PACIENTE_ID;
				}

				public Boolean PACIENTE_IDIsNullable(){
				    return false;
				}
				public Boolean PACIENTE_IDIsKey(){
				    return false;
				}
				public Integer PACIENTE_IDLength(){
				    return 0;
				}
				public Integer PACIENTE_IDPrecision(){
				    return null;
				}
				public String PACIENTE_IDDefault(){
				
					return "";
				
				}
				public String PACIENTE_IDComment(){
				
				    return "";
				
				}
				public String PACIENTE_IDPattern(){
				
					return "";
				
				}
				public String PACIENTE_IDOriginalDbColumnName(){
				
					return "PACIENTE_ID";
				
				}

				
			    public BigDecimal PARENTESCO_ID;

				public BigDecimal getPARENTESCO_ID () {
					return this.PARENTESCO_ID;
				}

				public Boolean PARENTESCO_IDIsNullable(){
				    return true;
				}
				public Boolean PARENTESCO_IDIsKey(){
				    return false;
				}
				public Integer PARENTESCO_IDLength(){
				    return 0;
				}
				public Integer PARENTESCO_IDPrecision(){
				    return null;
				}
				public String PARENTESCO_IDDefault(){
				
					return "";
				
				}
				public String PARENTESCO_IDComment(){
				
				    return "";
				
				}
				public String PARENTESCO_IDPattern(){
				
					return "";
				
				}
				public String PARENTESCO_IDOriginalDbColumnName(){
				
					return "PARENTESCO_ID";
				
				}

				
			    public BigDecimal DIGITADOR;

				public BigDecimal getDIGITADOR () {
					return this.DIGITADOR;
				}

				public Boolean DIGITADORIsNullable(){
				    return false;
				}
				public Boolean DIGITADORIsKey(){
				    return false;
				}
				public Integer DIGITADORLength(){
				    return 0;
				}
				public Integer DIGITADORPrecision(){
				    return null;
				}
				public String DIGITADORDefault(){
				
					return "";
				
				}
				public String DIGITADORComment(){
				
				    return "";
				
				}
				public String DIGITADORPattern(){
				
					return "";
				
				}
				public String DIGITADOROriginalDbColumnName(){
				
					return "DIGITADOR";
				
				}

				
			    public BigDecimal DIAGNOSTICOS_ID;

				public BigDecimal getDIAGNOSTICOS_ID () {
					return this.DIAGNOSTICOS_ID;
				}

				public Boolean DIAGNOSTICOS_IDIsNullable(){
				    return true;
				}
				public Boolean DIAGNOSTICOS_IDIsKey(){
				    return false;
				}
				public Integer DIAGNOSTICOS_IDLength(){
				    return 0;
				}
				public Integer DIAGNOSTICOS_IDPrecision(){
				    return null;
				}
				public String DIAGNOSTICOS_IDDefault(){
				
					return "";
				
				}
				public String DIAGNOSTICOS_IDComment(){
				
				    return "";
				
				}
				public String DIAGNOSTICOS_IDPattern(){
				
					return "";
				
				}
				public String DIAGNOSTICOS_IDOriginalDbColumnName(){
				
					return "DIAGNOSTICOS_ID";
				
				}

				
			    public BigDecimal ESPCSOLICITA;

				public BigDecimal getESPCSOLICITA () {
					return this.ESPCSOLICITA;
				}

				public Boolean ESPCSOLICITAIsNullable(){
				    return true;
				}
				public Boolean ESPCSOLICITAIsKey(){
				    return false;
				}
				public Integer ESPCSOLICITALength(){
				    return 0;
				}
				public Integer ESPCSOLICITAPrecision(){
				    return 0;
				}
				public String ESPCSOLICITADefault(){
				
					return "";
				
				}
				public String ESPCSOLICITAComment(){
				
				    return "";
				
				}
				public String ESPCSOLICITAPattern(){
				
					return "";
				
				}
				public String ESPCSOLICITAOriginalDbColumnName(){
				
					return "ESPCSOLICITA";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal PROFESIONAL_ID;

				public BigDecimal getPROFESIONAL_ID () {
					return this.PROFESIONAL_ID;
				}

				public Boolean PROFESIONAL_IDIsNullable(){
				    return true;
				}
				public Boolean PROFESIONAL_IDIsKey(){
				    return false;
				}
				public Integer PROFESIONAL_IDLength(){
				    return 0;
				}
				public Integer PROFESIONAL_IDPrecision(){
				    return null;
				}
				public String PROFESIONAL_IDDefault(){
				
					return "";
				
				}
				public String PROFESIONAL_IDComment(){
				
				    return "";
				
				}
				public String PROFESIONAL_IDPattern(){
				
					return "";
				
				}
				public String PROFESIONAL_IDOriginalDbColumnName(){
				
					return "PROFESIONAL_ID";
				
				}

				
			    public BigDecimal PROCESOSASISTENCIALES_ID;

				public BigDecimal getPROCESOSASISTENCIALES_ID () {
					return this.PROCESOSASISTENCIALES_ID;
				}

				public Boolean PROCESOSASISTENCIALES_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOSASISTENCIALES_IDIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALES_IDLength(){
				    return 0;
				}
				public Integer PROCESOSASISTENCIALES_IDPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALES_IDDefault(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDComment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALES_IDPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIALES_ID";
				
				}

				
			    public BigDecimal NOMBRE_AUTORIZA;

				public BigDecimal getNOMBRE_AUTORIZA () {
					return this.NOMBRE_AUTORIZA;
				}

				public Boolean NOMBRE_AUTORIZAIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_AUTORIZAIsKey(){
				    return false;
				}
				public Integer NOMBRE_AUTORIZALength(){
				    return 0;
				}
				public Integer NOMBRE_AUTORIZAPrecision(){
				    return null;
				}
				public String NOMBRE_AUTORIZADefault(){
				
					return "";
				
				}
				public String NOMBRE_AUTORIZAComment(){
				
				    return "";
				
				}
				public String NOMBRE_AUTORIZAPattern(){
				
					return "";
				
				}
				public String NOMBRE_AUTORIZAOriginalDbColumnName(){
				
					return "NOMBRE_AUTORIZA";
				
				}

				
			    public String UBICACION_PACIENTE;

				public String getUBICACION_PACIENTE () {
					return this.UBICACION_PACIENTE;
				}

				public Boolean UBICACION_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean UBICACION_PACIENTEIsKey(){
				    return false;
				}
				public Integer UBICACION_PACIENTELength(){
				    return 50;
				}
				public Integer UBICACION_PACIENTEPrecision(){
				    return 0;
				}
				public String UBICACION_PACIENTEDefault(){
				
					return null;
				
				}
				public String UBICACION_PACIENTEComment(){
				
				    return "";
				
				}
				public String UBICACION_PACIENTEPattern(){
				
					return "";
				
				}
				public String UBICACION_PACIENTEOriginalDbColumnName(){
				
					return "UBICACION_PACIENTE";
				
				}

				
			    public String AMBULANCIA;

				public String getAMBULANCIA () {
					return this.AMBULANCIA;
				}

				public Boolean AMBULANCIAIsNullable(){
				    return true;
				}
				public Boolean AMBULANCIAIsKey(){
				    return false;
				}
				public Integer AMBULANCIALength(){
				    return 20;
				}
				public Integer AMBULANCIAPrecision(){
				    return 0;
				}
				public String AMBULANCIADefault(){
				
					return null;
				
				}
				public String AMBULANCIAComment(){
				
				    return "";
				
				}
				public String AMBULANCIAPattern(){
				
					return "";
				
				}
				public String AMBULANCIAOriginalDbColumnName(){
				
					return "AMBULANCIA";
				
				}

				
			    public String CAUTORIZACION;

				public String getCAUTORIZACION () {
					return this.CAUTORIZACION;
				}

				public Boolean CAUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean CAUTORIZACIONIsKey(){
				    return false;
				}
				public Integer CAUTORIZACIONLength(){
				    return 250;
				}
				public Integer CAUTORIZACIONPrecision(){
				    return 0;
				}
				public String CAUTORIZACIONDefault(){
				
					return null;
				
				}
				public String CAUTORIZACIONComment(){
				
				    return "";
				
				}
				public String CAUTORIZACIONPattern(){
				
					return "";
				
				}
				public String CAUTORIZACIONOriginalDbColumnName(){
				
					return "CAUTORIZACION";
				
				}

				
			    public String CSOLICITUD;

				public String getCSOLICITUD () {
					return this.CSOLICITUD;
				}

				public Boolean CSOLICITUDIsNullable(){
				    return true;
				}
				public Boolean CSOLICITUDIsKey(){
				    return false;
				}
				public Integer CSOLICITUDLength(){
				    return 200;
				}
				public Integer CSOLICITUDPrecision(){
				    return 0;
				}
				public String CSOLICITUDDefault(){
				
					return null;
				
				}
				public String CSOLICITUDComment(){
				
				    return "";
				
				}
				public String CSOLICITUDPattern(){
				
					return "";
				
				}
				public String CSOLICITUDOriginalDbColumnName(){
				
					return "CSOLICITUD";
				
				}

				
			    public String TIPO_SOLICITUD;

				public String getTIPO_SOLICITUD () {
					return this.TIPO_SOLICITUD;
				}

				public Boolean TIPO_SOLICITUDIsNullable(){
				    return false;
				}
				public Boolean TIPO_SOLICITUDIsKey(){
				    return false;
				}
				public Integer TIPO_SOLICITUDLength(){
				    return 50;
				}
				public Integer TIPO_SOLICITUDPrecision(){
				    return 0;
				}
				public String TIPO_SOLICITUDDefault(){
				
					return null;
				
				}
				public String TIPO_SOLICITUDComment(){
				
				    return "";
				
				}
				public String TIPO_SOLICITUDPattern(){
				
					return "";
				
				}
				public String TIPO_SOLICITUDOriginalDbColumnName(){
				
					return "TIPO_SOLICITUD";
				
				}

				
			    public String ORIGEN;

				public String getORIGEN () {
					return this.ORIGEN;
				}

				public Boolean ORIGENIsNullable(){
				    return true;
				}
				public Boolean ORIGENIsKey(){
				    return false;
				}
				public Integer ORIGENLength(){
				    return 50;
				}
				public Integer ORIGENPrecision(){
				    return 0;
				}
				public String ORIGENDefault(){
				
					return null;
				
				}
				public String ORIGENComment(){
				
				    return "";
				
				}
				public String ORIGENPattern(){
				
					return "";
				
				}
				public String ORIGENOriginalDbColumnName(){
				
					return "ORIGEN";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return 0;
				}
				public String EDADDefault(){
				
					return "";
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String PYP_SIGLA;

				public String getPYP_SIGLA () {
					return this.PYP_SIGLA;
				}

				public Boolean PYP_SIGLAIsNullable(){
				    return true;
				}
				public Boolean PYP_SIGLAIsKey(){
				    return false;
				}
				public Integer PYP_SIGLALength(){
				    return 20;
				}
				public Integer PYP_SIGLAPrecision(){
				    return 0;
				}
				public String PYP_SIGLADefault(){
				
					return null;
				
				}
				public String PYP_SIGLAComment(){
				
				    return "";
				
				}
				public String PYP_SIGLAPattern(){
				
					return "";
				
				}
				public String PYP_SIGLAOriginalDbColumnName(){
				
					return "PYP_SIGLA";
				
				}

				
			    public java.util.Date FECHA_SOLI;

				public java.util.Date getFECHA_SOLI () {
					return this.FECHA_SOLI;
				}

				public Boolean FECHA_SOLIIsNullable(){
				    return false;
				}
				public Boolean FECHA_SOLIIsKey(){
				    return false;
				}
				public Integer FECHA_SOLILength(){
				    return 0;
				}
				public Integer FECHA_SOLIPrecision(){
				    return 0;
				}
				public String FECHA_SOLIDefault(){
				
					return null;
				
				}
				public String FECHA_SOLIComment(){
				
				    return "";
				
				}
				public String FECHA_SOLIPattern(){
				
					return "";
				
				}
				public String FECHA_SOLIOriginalDbColumnName(){
				
					return "FECHA_SOLI";
				
				}

				
			    public BigDecimal ID_TIEMPOS;

				public BigDecimal getID_TIEMPOS () {
					return this.ID_TIEMPOS;
				}

				public Boolean ID_TIEMPOSIsNullable(){
				    return true;
				}
				public Boolean ID_TIEMPOSIsKey(){
				    return false;
				}
				public Integer ID_TIEMPOSLength(){
				    return 0;
				}
				public Integer ID_TIEMPOSPrecision(){
				    return 0;
				}
				public String ID_TIEMPOSDefault(){
				
					return "";
				
				}
				public String ID_TIEMPOSComment(){
				
				    return "";
				
				}
				public String ID_TIEMPOSPattern(){
				
					return "";
				
				}
				public String ID_TIEMPOSOriginalDbColumnName(){
				
					return "ID_TIEMPOS";
				
				}

				
			    public java.util.Date FECHA_AUTORIZACION;

				public java.util.Date getFECHA_AUTORIZACION () {
					return this.FECHA_AUTORIZACION;
				}

				public Boolean FECHA_AUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_AUTORIZACIONIsKey(){
				    return false;
				}
				public Integer FECHA_AUTORIZACIONLength(){
				    return 0;
				}
				public Integer FECHA_AUTORIZACIONPrecision(){
				    return 0;
				}
				public String FECHA_AUTORIZACIONDefault(){
				
					return null;
				
				}
				public String FECHA_AUTORIZACIONComment(){
				
				    return "";
				
				}
				public String FECHA_AUTORIZACIONPattern(){
				
					return "";
				
				}
				public String FECHA_AUTORIZACIONOriginalDbColumnName(){
				
					return "FECHA_AUTORIZACION";
				
				}

				
			    public BigDecimal ID_TIEMPOA;

				public BigDecimal getID_TIEMPOA () {
					return this.ID_TIEMPOA;
				}

				public Boolean ID_TIEMPOAIsNullable(){
				    return true;
				}
				public Boolean ID_TIEMPOAIsKey(){
				    return false;
				}
				public Integer ID_TIEMPOALength(){
				    return 0;
				}
				public Integer ID_TIEMPOAPrecision(){
				    return 0;
				}
				public String ID_TIEMPOADefault(){
				
					return "";
				
				}
				public String ID_TIEMPOAComment(){
				
				    return "";
				
				}
				public String ID_TIEMPOAPattern(){
				
					return "";
				
				}
				public String ID_TIEMPOAOriginalDbColumnName(){
				
					return "ID_TIEMPOA";
				
				}

				
			    public java.util.Date FECHA_TUTELA;

				public java.util.Date getFECHA_TUTELA () {
					return this.FECHA_TUTELA;
				}

				public Boolean FECHA_TUTELAIsNullable(){
				    return true;
				}
				public Boolean FECHA_TUTELAIsKey(){
				    return false;
				}
				public Integer FECHA_TUTELALength(){
				    return 0;
				}
				public Integer FECHA_TUTELAPrecision(){
				    return 0;
				}
				public String FECHA_TUTELADefault(){
				
					return null;
				
				}
				public String FECHA_TUTELAComment(){
				
				    return "";
				
				}
				public String FECHA_TUTELAPattern(){
				
					return "";
				
				}
				public String FECHA_TUTELAOriginalDbColumnName(){
				
					return "FECHA_TUTELA";
				
				}

				
			    public java.util.Date VENCIMIENTO;

				public java.util.Date getVENCIMIENTO () {
					return this.VENCIMIENTO;
				}

				public Boolean VENCIMIENTOIsNullable(){
				    return true;
				}
				public Boolean VENCIMIENTOIsKey(){
				    return false;
				}
				public Integer VENCIMIENTOLength(){
				    return 0;
				}
				public Integer VENCIMIENTOPrecision(){
				    return 0;
				}
				public String VENCIMIENTODefault(){
				
					return null;
				
				}
				public String VENCIMIENTOComment(){
				
				    return "";
				
				}
				public String VENCIMIENTOPattern(){
				
					return "";
				
				}
				public String VENCIMIENTOOriginalDbColumnName(){
				
					return "VENCIMIENTO";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 30;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String NUMERO_ACTA;

				public String getNUMERO_ACTA () {
					return this.NUMERO_ACTA;
				}

				public Boolean NUMERO_ACTAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_ACTAIsKey(){
				    return false;
				}
				public Integer NUMERO_ACTALength(){
				    return 500;
				}
				public Integer NUMERO_ACTAPrecision(){
				    return 0;
				}
				public String NUMERO_ACTADefault(){
				
					return null;
				
				}
				public String NUMERO_ACTAComment(){
				
				    return "";
				
				}
				public String NUMERO_ACTAPattern(){
				
					return "";
				
				}
				public String NUMERO_ACTAOriginalDbColumnName(){
				
					return "NUMERO_ACTA";
				
				}

				
			    public String CLASIFICACION;

				public String getCLASIFICACION () {
					return this.CLASIFICACION;
				}

				public Boolean CLASIFICACIONIsNullable(){
				    return true;
				}
				public Boolean CLASIFICACIONIsKey(){
				    return false;
				}
				public Integer CLASIFICACIONLength(){
				    return 20;
				}
				public Integer CLASIFICACIONPrecision(){
				    return 0;
				}
				public String CLASIFICACIONDefault(){
				
					return null;
				
				}
				public String CLASIFICACIONComment(){
				
				    return "";
				
				}
				public String CLASIFICACIONPattern(){
				
					return "";
				
				}
				public String CLASIFICACIONOriginalDbColumnName(){
				
					return "CLASIFICACION";
				
				}

				
			    public BigDecimal PRORROGAS;

				public BigDecimal getPRORROGAS () {
					return this.PRORROGAS;
				}

				public Boolean PRORROGASIsNullable(){
				    return true;
				}
				public Boolean PRORROGASIsKey(){
				    return false;
				}
				public Integer PRORROGASLength(){
				    return 0;
				}
				public Integer PRORROGASPrecision(){
				    return null;
				}
				public String PRORROGASDefault(){
				
					return "";
				
				}
				public String PRORROGASComment(){
				
				    return "";
				
				}
				public String PRORROGASPattern(){
				
					return "";
				
				}
				public String PRORROGASOriginalDbColumnName(){
				
					return "PRORROGAS";
				
				}

				
			    public String MODO;

				public String getMODO () {
					return this.MODO;
				}

				public Boolean MODOIsNullable(){
				    return true;
				}
				public Boolean MODOIsKey(){
				    return false;
				}
				public Integer MODOLength(){
				    return 20;
				}
				public Integer MODOPrecision(){
				    return 0;
				}
				public String MODODefault(){
				
					return null;
				
				}
				public String MODOComment(){
				
				    return "";
				
				}
				public String MODOPattern(){
				
					return "";
				
				}
				public String MODOOriginalDbColumnName(){
				
					return "MODO";
				
				}

				
			    public String CODIGO_ACEPTACION;

				public String getCODIGO_ACEPTACION () {
					return this.CODIGO_ACEPTACION;
				}

				public Boolean CODIGO_ACEPTACIONIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ACEPTACIONIsKey(){
				    return false;
				}
				public Integer CODIGO_ACEPTACIONLength(){
				    return 2500;
				}
				public Integer CODIGO_ACEPTACIONPrecision(){
				    return 0;
				}
				public String CODIGO_ACEPTACIONDefault(){
				
					return null;
				
				}
				public String CODIGO_ACEPTACIONComment(){
				
				    return "";
				
				}
				public String CODIGO_ACEPTACIONPattern(){
				
					return "";
				
				}
				public String CODIGO_ACEPTACIONOriginalDbColumnName(){
				
					return "CODIGO_ACEPTACION";
				
				}

				
			    public String RESOLUCION_TUTELA;

				public String getRESOLUCION_TUTELA () {
					return this.RESOLUCION_TUTELA;
				}

				public Boolean RESOLUCION_TUTELAIsNullable(){
				    return true;
				}
				public Boolean RESOLUCION_TUTELAIsKey(){
				    return false;
				}
				public Integer RESOLUCION_TUTELALength(){
				    return 4000;
				}
				public Integer RESOLUCION_TUTELAPrecision(){
				    return 0;
				}
				public String RESOLUCION_TUTELADefault(){
				
					return null;
				
				}
				public String RESOLUCION_TUTELAComment(){
				
				    return "";
				
				}
				public String RESOLUCION_TUTELAPattern(){
				
					return "";
				
				}
				public String RESOLUCION_TUTELAOriginalDbColumnName(){
				
					return "RESOLUCION_TUTELA";
				
				}

				
			    public String JUSTIFICACION_NOFAVORABLE;

				public String getJUSTIFICACION_NOFAVORABLE () {
					return this.JUSTIFICACION_NOFAVORABLE;
				}

				public Boolean JUSTIFICACION_NOFAVORABLEIsNullable(){
				    return true;
				}
				public Boolean JUSTIFICACION_NOFAVORABLEIsKey(){
				    return false;
				}
				public Integer JUSTIFICACION_NOFAVORABLELength(){
				    return 4000;
				}
				public Integer JUSTIFICACION_NOFAVORABLEPrecision(){
				    return 0;
				}
				public String JUSTIFICACION_NOFAVORABLEDefault(){
				
					return null;
				
				}
				public String JUSTIFICACION_NOFAVORABLEComment(){
				
				    return "";
				
				}
				public String JUSTIFICACION_NOFAVORABLEPattern(){
				
					return "";
				
				}
				public String JUSTIFICACION_NOFAVORABLEOriginalDbColumnName(){
				
					return "JUSTIFICACION_NOFAVORABLE";
				
				}

				
			    public String JUSTIFICACION_ANULACION;

				public String getJUSTIFICACION_ANULACION () {
					return this.JUSTIFICACION_ANULACION;
				}

				public Boolean JUSTIFICACION_ANULACIONIsNullable(){
				    return true;
				}
				public Boolean JUSTIFICACION_ANULACIONIsKey(){
				    return false;
				}
				public Integer JUSTIFICACION_ANULACIONLength(){
				    return 4000;
				}
				public Integer JUSTIFICACION_ANULACIONPrecision(){
				    return 0;
				}
				public String JUSTIFICACION_ANULACIONDefault(){
				
					return null;
				
				}
				public String JUSTIFICACION_ANULACIONComment(){
				
				    return "";
				
				}
				public String JUSTIFICACION_ANULACIONPattern(){
				
					return "";
				
				}
				public String JUSTIFICACION_ANULACIONOriginalDbColumnName(){
				
					return "JUSTIFICACION_ANULACION";
				
				}

				
			    public BigDecimal PRESPONSABLE;

				public BigDecimal getPRESPONSABLE () {
					return this.PRESPONSABLE;
				}

				public Boolean PRESPONSABLEIsNullable(){
				    return true;
				}
				public Boolean PRESPONSABLEIsKey(){
				    return false;
				}
				public Integer PRESPONSABLELength(){
				    return 0;
				}
				public Integer PRESPONSABLEPrecision(){
				    return null;
				}
				public String PRESPONSABLEDefault(){
				
					return "";
				
				}
				public String PRESPONSABLEComment(){
				
				    return "";
				
				}
				public String PRESPONSABLEPattern(){
				
					return "";
				
				}
				public String PRESPONSABLEOriginalDbColumnName(){
				
					return "PRESPONSABLE";
				
				}

				
			    public String DIAGR_1;

				public String getDIAGR_1 () {
					return this.DIAGR_1;
				}

				public Boolean DIAGR_1IsNullable(){
				    return true;
				}
				public Boolean DIAGR_1IsKey(){
				    return false;
				}
				public Integer DIAGR_1Length(){
				    return 512;
				}
				public Integer DIAGR_1Precision(){
				    return 0;
				}
				public String DIAGR_1Default(){
				
					return null;
				
				}
				public String DIAGR_1Comment(){
				
				    return "";
				
				}
				public String DIAGR_1Pattern(){
				
					return "";
				
				}
				public String DIAGR_1OriginalDbColumnName(){
				
					return "DIAGR_1";
				
				}

				
			    public String DIAGR_2;

				public String getDIAGR_2 () {
					return this.DIAGR_2;
				}

				public Boolean DIAGR_2IsNullable(){
				    return true;
				}
				public Boolean DIAGR_2IsKey(){
				    return false;
				}
				public Integer DIAGR_2Length(){
				    return 512;
				}
				public Integer DIAGR_2Precision(){
				    return 0;
				}
				public String DIAGR_2Default(){
				
					return null;
				
				}
				public String DIAGR_2Comment(){
				
				    return "";
				
				}
				public String DIAGR_2Pattern(){
				
					return "";
				
				}
				public String DIAGR_2OriginalDbColumnName(){
				
					return "DIAGR_2";
				
				}

				
			    public String DIAGR_3;

				public String getDIAGR_3 () {
					return this.DIAGR_3;
				}

				public Boolean DIAGR_3IsNullable(){
				    return true;
				}
				public Boolean DIAGR_3IsKey(){
				    return false;
				}
				public Integer DIAGR_3Length(){
				    return 512;
				}
				public Integer DIAGR_3Precision(){
				    return 0;
				}
				public String DIAGR_3Default(){
				
					return null;
				
				}
				public String DIAGR_3Comment(){
				
				    return "";
				
				}
				public String DIAGR_3Pattern(){
				
					return "";
				
				}
				public String DIAGR_3OriginalDbColumnName(){
				
					return "DIAGR_3";
				
				}

				
			    public BigDecimal CANTIDAD;

				public BigDecimal getCANTIDAD () {
					return this.CANTIDAD;
				}

				public Boolean CANTIDADIsNullable(){
				    return false;
				}
				public Boolean CANTIDADIsKey(){
				    return false;
				}
				public Integer CANTIDADLength(){
				    return 0;
				}
				public Integer CANTIDADPrecision(){
				    return null;
				}
				public String CANTIDADDefault(){
				
					return "";
				
				}
				public String CANTIDADComment(){
				
				    return "";
				
				}
				public String CANTIDADPattern(){
				
					return "";
				
				}
				public String CANTIDADOriginalDbColumnName(){
				
					return "CANTIDAD";
				
				}

				
			    public BigDecimal VALOR_UNITARIO;

				public BigDecimal getVALOR_UNITARIO () {
					return this.VALOR_UNITARIO;
				}

				public Boolean VALOR_UNITARIOIsNullable(){
				    return false;
				}
				public Boolean VALOR_UNITARIOIsKey(){
				    return false;
				}
				public Integer VALOR_UNITARIOLength(){
				    return 0;
				}
				public Integer VALOR_UNITARIOPrecision(){
				    return null;
				}
				public String VALOR_UNITARIODefault(){
				
					return "";
				
				}
				public String VALOR_UNITARIOComment(){
				
				    return "";
				
				}
				public String VALOR_UNITARIOPattern(){
				
					return "";
				
				}
				public String VALOR_UNITARIOOriginalDbColumnName(){
				
					return "VALOR_UNITARIO";
				
				}

				
			    public BigDecimal VALOR_TOTAL;

				public BigDecimal getVALOR_TOTAL () {
					return this.VALOR_TOTAL;
				}

				public Boolean VALOR_TOTALIsNullable(){
				    return false;
				}
				public Boolean VALOR_TOTALIsKey(){
				    return false;
				}
				public Integer VALOR_TOTALLength(){
				    return 0;
				}
				public Integer VALOR_TOTALPrecision(){
				    return null;
				}
				public String VALOR_TOTALDefault(){
				
					return "";
				
				}
				public String VALOR_TOTALComment(){
				
				    return "";
				
				}
				public String VALOR_TOTALPattern(){
				
					return "";
				
				}
				public String VALOR_TOTALOriginalDbColumnName(){
				
					return "VALOR_TOTAL";
				
				}

				
			    public String OBSERVACIONESAUT;

				public String getOBSERVACIONESAUT () {
					return this.OBSERVACIONESAUT;
				}

				public Boolean OBSERVACIONESAUTIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESAUTIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESAUTLength(){
				    return 4000;
				}
				public Integer OBSERVACIONESAUTPrecision(){
				    return 0;
				}
				public String OBSERVACIONESAUTDefault(){
				
					return "";
				
				}
				public String OBSERVACIONESAUTComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESAUTPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESAUTOriginalDbColumnName(){
				
					return "OBSERVACIONESAUT";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 4000;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return "";
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public String ONSERVACION;

				public String getONSERVACION () {
					return this.ONSERVACION;
				}

				public Boolean ONSERVACIONIsNullable(){
				    return true;
				}
				public Boolean ONSERVACIONIsKey(){
				    return false;
				}
				public Integer ONSERVACIONLength(){
				    return 4000;
				}
				public Integer ONSERVACIONPrecision(){
				    return 0;
				}
				public String ONSERVACIONDefault(){
				
					return "";
				
				}
				public String ONSERVACIONComment(){
				
				    return "";
				
				}
				public String ONSERVACIONPattern(){
				
					return "";
				
				}
				public String ONSERVACIONOriginalDbColumnName(){
				
					return "ONSERVACION";
				
				}

				
			    public String OBSERVACIONES_AUTORIZACION;

				public String getOBSERVACIONES_AUTORIZACION () {
					return this.OBSERVACIONES_AUTORIZACION;
				}

				public Boolean OBSERVACIONES_AUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONES_AUTORIZACIONIsKey(){
				    return false;
				}
				public Integer OBSERVACIONES_AUTORIZACIONLength(){
				    return 4000;
				}
				public Integer OBSERVACIONES_AUTORIZACIONPrecision(){
				    return 0;
				}
				public String OBSERVACIONES_AUTORIZACIONDefault(){
				
					return "";
				
				}
				public String OBSERVACIONES_AUTORIZACIONComment(){
				
				    return "";
				
				}
				public String OBSERVACIONES_AUTORIZACIONPattern(){
				
					return "";
				
				}
				public String OBSERVACIONES_AUTORIZACIONOriginalDbColumnName(){
				
					return "OBSERVACIONES_AUTORIZACION";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length == 0) {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length == 0) {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.UORG_REGISTRA_ID = (BigDecimal) dis.readObject();
					
						this.UORGO_ID = (BigDecimal) dis.readObject();
					
						this.UORGE_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
						this.PACIENTE_ID = (BigDecimal) dis.readObject();
					
						this.PARENTESCO_ID = (BigDecimal) dis.readObject();
					
						this.DIGITADOR = (BigDecimal) dis.readObject();
					
						this.DIAGNOSTICOS_ID = (BigDecimal) dis.readObject();
					
						this.ESPCSOLICITA = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
						this.NOMBRE_AUTORIZA = (BigDecimal) dis.readObject();
					
					this.UBICACION_PACIENTE = readString(dis);
					
					this.AMBULANCIA = readString(dis);
					
					this.CAUTORIZACION = readString(dis);
					
					this.CSOLICITUD = readString(dis);
					
					this.TIPO_SOLICITUD = readString(dis);
					
					this.ORIGEN = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.PYP_SIGLA = readString(dis);
					
					this.FECHA_SOLI = readDate(dis);
					
						this.ID_TIEMPOS = (BigDecimal) dis.readObject();
					
					this.FECHA_AUTORIZACION = readDate(dis);
					
						this.ID_TIEMPOA = (BigDecimal) dis.readObject();
					
					this.FECHA_TUTELA = readDate(dis);
					
					this.VENCIMIENTO = readDate(dis);
					
					this.ESTADO = readString(dis);
					
					this.NUMERO_ACTA = readString(dis);
					
					this.CLASIFICACION = readString(dis);
					
						this.PRORROGAS = (BigDecimal) dis.readObject();
					
					this.MODO = readString(dis);
					
					this.CODIGO_ACEPTACION = readString(dis);
					
					this.RESOLUCION_TUTELA = readString(dis);
					
					this.JUSTIFICACION_NOFAVORABLE = readString(dis);
					
					this.JUSTIFICACION_ANULACION = readString(dis);
					
						this.PRESPONSABLE = (BigDecimal) dis.readObject();
					
					this.DIAGR_1 = readString(dis);
					
					this.DIAGR_2 = readString(dis);
					
					this.DIAGR_3 = readString(dis);
					
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.VALOR_TOTAL = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONESAUT = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.ONSERVACION = readString(dis);
					
					this.OBSERVACIONES_AUTORIZACION = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.UORG_REGISTRA_ID = (BigDecimal) dis.readObject();
					
						this.UORGO_ID = (BigDecimal) dis.readObject();
					
						this.UORGE_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
						this.PACIENTE_ID = (BigDecimal) dis.readObject();
					
						this.PARENTESCO_ID = (BigDecimal) dis.readObject();
					
						this.DIGITADOR = (BigDecimal) dis.readObject();
					
						this.DIAGNOSTICOS_ID = (BigDecimal) dis.readObject();
					
						this.ESPCSOLICITA = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
						this.NOMBRE_AUTORIZA = (BigDecimal) dis.readObject();
					
					this.UBICACION_PACIENTE = readString(dis);
					
					this.AMBULANCIA = readString(dis);
					
					this.CAUTORIZACION = readString(dis);
					
					this.CSOLICITUD = readString(dis);
					
					this.TIPO_SOLICITUD = readString(dis);
					
					this.ORIGEN = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.PYP_SIGLA = readString(dis);
					
					this.FECHA_SOLI = readDate(dis);
					
						this.ID_TIEMPOS = (BigDecimal) dis.readObject();
					
					this.FECHA_AUTORIZACION = readDate(dis);
					
						this.ID_TIEMPOA = (BigDecimal) dis.readObject();
					
					this.FECHA_TUTELA = readDate(dis);
					
					this.VENCIMIENTO = readDate(dis);
					
					this.ESTADO = readString(dis);
					
					this.NUMERO_ACTA = readString(dis);
					
					this.CLASIFICACION = readString(dis);
					
						this.PRORROGAS = (BigDecimal) dis.readObject();
					
					this.MODO = readString(dis);
					
					this.CODIGO_ACEPTACION = readString(dis);
					
					this.RESOLUCION_TUTELA = readString(dis);
					
					this.JUSTIFICACION_NOFAVORABLE = readString(dis);
					
					this.JUSTIFICACION_ANULACION = readString(dis);
					
						this.PRESPONSABLE = (BigDecimal) dis.readObject();
					
					this.DIAGR_1 = readString(dis);
					
					this.DIAGR_2 = readString(dis);
					
					this.DIAGR_3 = readString(dis);
					
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.VALOR_TOTAL = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONESAUT = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.ONSERVACION = readString(dis);
					
					this.OBSERVACIONES_AUTORIZACION = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_REGISTRA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORGO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORGE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PACIENTE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PARENTESCO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIGITADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIAGNOSTICOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPCSOLICITA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFESIONAL_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NOMBRE_AUTORIZA);
					
					// String
				
						writeString(this.UBICACION_PACIENTE,dos);
					
					// String
				
						writeString(this.AMBULANCIA,dos);
					
					// String
				
						writeString(this.CAUTORIZACION,dos);
					
					// String
				
						writeString(this.CSOLICITUD,dos);
					
					// String
				
						writeString(this.TIPO_SOLICITUD,dos);
					
					// String
				
						writeString(this.ORIGEN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_SOLI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_TIEMPOS);
					
					// java.util.Date
				
						writeDate(this.FECHA_AUTORIZACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_TIEMPOA);
					
					// java.util.Date
				
						writeDate(this.FECHA_TUTELA,dos);
					
					// java.util.Date
				
						writeDate(this.VENCIMIENTO,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.NUMERO_ACTA,dos);
					
					// String
				
						writeString(this.CLASIFICACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRORROGAS);
					
					// String
				
						writeString(this.MODO,dos);
					
					// String
				
						writeString(this.CODIGO_ACEPTACION,dos);
					
					// String
				
						writeString(this.RESOLUCION_TUTELA,dos);
					
					// String
				
						writeString(this.JUSTIFICACION_NOFAVORABLE,dos);
					
					// String
				
						writeString(this.JUSTIFICACION_ANULACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESPONSABLE);
					
					// String
				
						writeString(this.DIAGR_1,dos);
					
					// String
				
						writeString(this.DIAGR_2,dos);
					
					// String
				
						writeString(this.DIAGR_3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_TOTAL);
					
					// String
				
						writeString(this.OBSERVACIONESAUT,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.ONSERVACION,dos);
					
					// String
				
						writeString(this.OBSERVACIONES_AUTORIZACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_REGISTRA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORGO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORGE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PACIENTE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PARENTESCO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIGITADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIAGNOSTICOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPCSOLICITA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFESIONAL_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NOMBRE_AUTORIZA);
					
					// String
				
						writeString(this.UBICACION_PACIENTE,dos);
					
					// String
				
						writeString(this.AMBULANCIA,dos);
					
					// String
				
						writeString(this.CAUTORIZACION,dos);
					
					// String
				
						writeString(this.CSOLICITUD,dos);
					
					// String
				
						writeString(this.TIPO_SOLICITUD,dos);
					
					// String
				
						writeString(this.ORIGEN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_SOLI,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID_TIEMPOS);
					
					// java.util.Date
				
						writeDate(this.FECHA_AUTORIZACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID_TIEMPOA);
					
					// java.util.Date
				
						writeDate(this.FECHA_TUTELA,dos);
					
					// java.util.Date
				
						writeDate(this.VENCIMIENTO,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.NUMERO_ACTA,dos);
					
					// String
				
						writeString(this.CLASIFICACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRORROGAS);
					
					// String
				
						writeString(this.MODO,dos);
					
					// String
				
						writeString(this.CODIGO_ACEPTACION,dos);
					
					// String
				
						writeString(this.RESOLUCION_TUTELA,dos);
					
					// String
				
						writeString(this.JUSTIFICACION_NOFAVORABLE,dos);
					
					// String
				
						writeString(this.JUSTIFICACION_ANULACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESPONSABLE);
					
					// String
				
						writeString(this.DIAGR_1,dos);
					
					// String
				
						writeString(this.DIAGR_2,dos);
					
					// String
				
						writeString(this.DIAGR_3,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_TOTAL);
					
					// String
				
						writeString(this.OBSERVACIONESAUT,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.ONSERVACION,dos);
					
					// String
				
						writeString(this.OBSERVACIONES_AUTORIZACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",UORG_REGISTRA_ID="+String.valueOf(UORG_REGISTRA_ID));
		sb.append(",UORGO_ID="+String.valueOf(UORGO_ID));
		sb.append(",UORGE_ID="+String.valueOf(UORGE_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",PACIENTE_ID="+String.valueOf(PACIENTE_ID));
		sb.append(",PARENTESCO_ID="+String.valueOf(PARENTESCO_ID));
		sb.append(",DIGITADOR="+String.valueOf(DIGITADOR));
		sb.append(",DIAGNOSTICOS_ID="+String.valueOf(DIAGNOSTICOS_ID));
		sb.append(",ESPCSOLICITA="+String.valueOf(ESPCSOLICITA));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",PROFESIONAL_ID="+String.valueOf(PROFESIONAL_ID));
		sb.append(",PROCESOSASISTENCIALES_ID="+String.valueOf(PROCESOSASISTENCIALES_ID));
		sb.append(",NOMBRE_AUTORIZA="+String.valueOf(NOMBRE_AUTORIZA));
		sb.append(",UBICACION_PACIENTE="+UBICACION_PACIENTE);
		sb.append(",AMBULANCIA="+AMBULANCIA);
		sb.append(",CAUTORIZACION="+CAUTORIZACION);
		sb.append(",CSOLICITUD="+CSOLICITUD);
		sb.append(",TIPO_SOLICITUD="+TIPO_SOLICITUD);
		sb.append(",ORIGEN="+ORIGEN);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",PYP_SIGLA="+PYP_SIGLA);
		sb.append(",FECHA_SOLI="+String.valueOf(FECHA_SOLI));
		sb.append(",ID_TIEMPOS="+String.valueOf(ID_TIEMPOS));
		sb.append(",FECHA_AUTORIZACION="+String.valueOf(FECHA_AUTORIZACION));
		sb.append(",ID_TIEMPOA="+String.valueOf(ID_TIEMPOA));
		sb.append(",FECHA_TUTELA="+String.valueOf(FECHA_TUTELA));
		sb.append(",VENCIMIENTO="+String.valueOf(VENCIMIENTO));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",NUMERO_ACTA="+NUMERO_ACTA);
		sb.append(",CLASIFICACION="+CLASIFICACION);
		sb.append(",PRORROGAS="+String.valueOf(PRORROGAS));
		sb.append(",MODO="+MODO);
		sb.append(",CODIGO_ACEPTACION="+CODIGO_ACEPTACION);
		sb.append(",RESOLUCION_TUTELA="+RESOLUCION_TUTELA);
		sb.append(",JUSTIFICACION_NOFAVORABLE="+JUSTIFICACION_NOFAVORABLE);
		sb.append(",JUSTIFICACION_ANULACION="+JUSTIFICACION_ANULACION);
		sb.append(",PRESPONSABLE="+String.valueOf(PRESPONSABLE));
		sb.append(",DIAGR_1="+DIAGR_1);
		sb.append(",DIAGR_2="+DIAGR_2);
		sb.append(",DIAGR_3="+DIAGR_3);
		sb.append(",CANTIDAD="+String.valueOf(CANTIDAD));
		sb.append(",VALOR_UNITARIO="+String.valueOf(VALOR_UNITARIO));
		sb.append(",VALOR_TOTAL="+String.valueOf(VALOR_TOTAL));
		sb.append(",OBSERVACIONESAUT="+OBSERVACIONESAUT);
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",ONSERVACION="+ONSERVACION);
		sb.append(",OBSERVACIONES_AUTORIZACION="+OBSERVACIONES_AUTORIZACION);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_2Struct implements routines.system.IPersistableRow<after_tOracleInput_2Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal UORG_REGISTRA_ID;

				public BigDecimal getUORG_REGISTRA_ID () {
					return this.UORG_REGISTRA_ID;
				}

				public Boolean UORG_REGISTRA_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_REGISTRA_IDIsKey(){
				    return false;
				}
				public Integer UORG_REGISTRA_IDLength(){
				    return 0;
				}
				public Integer UORG_REGISTRA_IDPrecision(){
				    return null;
				}
				public String UORG_REGISTRA_IDDefault(){
				
					return "";
				
				}
				public String UORG_REGISTRA_IDComment(){
				
				    return "";
				
				}
				public String UORG_REGISTRA_IDPattern(){
				
					return "";
				
				}
				public String UORG_REGISTRA_IDOriginalDbColumnName(){
				
					return "UORG_REGISTRA_ID";
				
				}

				
			    public BigDecimal UORGO_ID;

				public BigDecimal getUORGO_ID () {
					return this.UORGO_ID;
				}

				public Boolean UORGO_IDIsNullable(){
				    return false;
				}
				public Boolean UORGO_IDIsKey(){
				    return false;
				}
				public Integer UORGO_IDLength(){
				    return 0;
				}
				public Integer UORGO_IDPrecision(){
				    return null;
				}
				public String UORGO_IDDefault(){
				
					return "";
				
				}
				public String UORGO_IDComment(){
				
				    return "";
				
				}
				public String UORGO_IDPattern(){
				
					return "";
				
				}
				public String UORGO_IDOriginalDbColumnName(){
				
					return "UORGO_ID";
				
				}

				
			    public BigDecimal UORGE_ID;

				public BigDecimal getUORGE_ID () {
					return this.UORGE_ID;
				}

				public Boolean UORGE_IDIsNullable(){
				    return true;
				}
				public Boolean UORGE_IDIsKey(){
				    return false;
				}
				public Integer UORGE_IDLength(){
				    return 0;
				}
				public Integer UORGE_IDPrecision(){
				    return null;
				}
				public String UORGE_IDDefault(){
				
					return "";
				
				}
				public String UORGE_IDComment(){
				
				    return "";
				
				}
				public String UORGE_IDPattern(){
				
					return "";
				
				}
				public String UORGE_IDOriginalDbColumnName(){
				
					return "UORGE_ID";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return true;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public BigDecimal PACIENTE_ID;

				public BigDecimal getPACIENTE_ID () {
					return this.PACIENTE_ID;
				}

				public Boolean PACIENTE_IDIsNullable(){
				    return false;
				}
				public Boolean PACIENTE_IDIsKey(){
				    return false;
				}
				public Integer PACIENTE_IDLength(){
				    return 0;
				}
				public Integer PACIENTE_IDPrecision(){
				    return null;
				}
				public String PACIENTE_IDDefault(){
				
					return "";
				
				}
				public String PACIENTE_IDComment(){
				
				    return "";
				
				}
				public String PACIENTE_IDPattern(){
				
					return "";
				
				}
				public String PACIENTE_IDOriginalDbColumnName(){
				
					return "PACIENTE_ID";
				
				}

				
			    public BigDecimal PARENTESCO_ID;

				public BigDecimal getPARENTESCO_ID () {
					return this.PARENTESCO_ID;
				}

				public Boolean PARENTESCO_IDIsNullable(){
				    return true;
				}
				public Boolean PARENTESCO_IDIsKey(){
				    return false;
				}
				public Integer PARENTESCO_IDLength(){
				    return 0;
				}
				public Integer PARENTESCO_IDPrecision(){
				    return null;
				}
				public String PARENTESCO_IDDefault(){
				
					return "";
				
				}
				public String PARENTESCO_IDComment(){
				
				    return "";
				
				}
				public String PARENTESCO_IDPattern(){
				
					return "";
				
				}
				public String PARENTESCO_IDOriginalDbColumnName(){
				
					return "PARENTESCO_ID";
				
				}

				
			    public BigDecimal DIGITADOR;

				public BigDecimal getDIGITADOR () {
					return this.DIGITADOR;
				}

				public Boolean DIGITADORIsNullable(){
				    return false;
				}
				public Boolean DIGITADORIsKey(){
				    return false;
				}
				public Integer DIGITADORLength(){
				    return 0;
				}
				public Integer DIGITADORPrecision(){
				    return null;
				}
				public String DIGITADORDefault(){
				
					return "";
				
				}
				public String DIGITADORComment(){
				
				    return "";
				
				}
				public String DIGITADORPattern(){
				
					return "";
				
				}
				public String DIGITADOROriginalDbColumnName(){
				
					return "DIGITADOR";
				
				}

				
			    public BigDecimal DIAGNOSTICOS_ID;

				public BigDecimal getDIAGNOSTICOS_ID () {
					return this.DIAGNOSTICOS_ID;
				}

				public Boolean DIAGNOSTICOS_IDIsNullable(){
				    return true;
				}
				public Boolean DIAGNOSTICOS_IDIsKey(){
				    return false;
				}
				public Integer DIAGNOSTICOS_IDLength(){
				    return 0;
				}
				public Integer DIAGNOSTICOS_IDPrecision(){
				    return null;
				}
				public String DIAGNOSTICOS_IDDefault(){
				
					return "";
				
				}
				public String DIAGNOSTICOS_IDComment(){
				
				    return "";
				
				}
				public String DIAGNOSTICOS_IDPattern(){
				
					return "";
				
				}
				public String DIAGNOSTICOS_IDOriginalDbColumnName(){
				
					return "DIAGNOSTICOS_ID";
				
				}

				
			    public BigDecimal ESPCSOLICITA;

				public BigDecimal getESPCSOLICITA () {
					return this.ESPCSOLICITA;
				}

				public Boolean ESPCSOLICITAIsNullable(){
				    return true;
				}
				public Boolean ESPCSOLICITAIsKey(){
				    return false;
				}
				public Integer ESPCSOLICITALength(){
				    return 0;
				}
				public Integer ESPCSOLICITAPrecision(){
				    return 0;
				}
				public String ESPCSOLICITADefault(){
				
					return "";
				
				}
				public String ESPCSOLICITAComment(){
				
				    return "";
				
				}
				public String ESPCSOLICITAPattern(){
				
					return "";
				
				}
				public String ESPCSOLICITAOriginalDbColumnName(){
				
					return "ESPCSOLICITA";
				
				}

				
			    public BigDecimal ESPECIALIDADES_ID;

				public BigDecimal getESPECIALIDADES_ID () {
					return this.ESPECIALIDADES_ID;
				}

				public Boolean ESPECIALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean ESPECIALIDADES_IDIsKey(){
				    return false;
				}
				public Integer ESPECIALIDADES_IDLength(){
				    return 0;
				}
				public Integer ESPECIALIDADES_IDPrecision(){
				    return null;
				}
				public String ESPECIALIDADES_IDDefault(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDComment(){
				
				    return "";
				
				}
				public String ESPECIALIDADES_IDPattern(){
				
					return "";
				
				}
				public String ESPECIALIDADES_IDOriginalDbColumnName(){
				
					return "ESPECIALIDADES_ID";
				
				}

				
			    public BigDecimal PROFESIONAL_ID;

				public BigDecimal getPROFESIONAL_ID () {
					return this.PROFESIONAL_ID;
				}

				public Boolean PROFESIONAL_IDIsNullable(){
				    return true;
				}
				public Boolean PROFESIONAL_IDIsKey(){
				    return false;
				}
				public Integer PROFESIONAL_IDLength(){
				    return 0;
				}
				public Integer PROFESIONAL_IDPrecision(){
				    return null;
				}
				public String PROFESIONAL_IDDefault(){
				
					return "";
				
				}
				public String PROFESIONAL_IDComment(){
				
				    return "";
				
				}
				public String PROFESIONAL_IDPattern(){
				
					return "";
				
				}
				public String PROFESIONAL_IDOriginalDbColumnName(){
				
					return "PROFESIONAL_ID";
				
				}

				
			    public BigDecimal PROCESOSASISTENCIALES_ID;

				public BigDecimal getPROCESOSASISTENCIALES_ID () {
					return this.PROCESOSASISTENCIALES_ID;
				}

				public Boolean PROCESOSASISTENCIALES_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOSASISTENCIALES_IDIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALES_IDLength(){
				    return 0;
				}
				public Integer PROCESOSASISTENCIALES_IDPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALES_IDDefault(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDComment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALES_IDPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIALES_ID";
				
				}

				
			    public BigDecimal NOMBRE_AUTORIZA;

				public BigDecimal getNOMBRE_AUTORIZA () {
					return this.NOMBRE_AUTORIZA;
				}

				public Boolean NOMBRE_AUTORIZAIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_AUTORIZAIsKey(){
				    return false;
				}
				public Integer NOMBRE_AUTORIZALength(){
				    return 0;
				}
				public Integer NOMBRE_AUTORIZAPrecision(){
				    return null;
				}
				public String NOMBRE_AUTORIZADefault(){
				
					return "";
				
				}
				public String NOMBRE_AUTORIZAComment(){
				
				    return "";
				
				}
				public String NOMBRE_AUTORIZAPattern(){
				
					return "";
				
				}
				public String NOMBRE_AUTORIZAOriginalDbColumnName(){
				
					return "NOMBRE_AUTORIZA";
				
				}

				
			    public String UBICACION_PACIENTE;

				public String getUBICACION_PACIENTE () {
					return this.UBICACION_PACIENTE;
				}

				public Boolean UBICACION_PACIENTEIsNullable(){
				    return true;
				}
				public Boolean UBICACION_PACIENTEIsKey(){
				    return false;
				}
				public Integer UBICACION_PACIENTELength(){
				    return 50;
				}
				public Integer UBICACION_PACIENTEPrecision(){
				    return 0;
				}
				public String UBICACION_PACIENTEDefault(){
				
					return null;
				
				}
				public String UBICACION_PACIENTEComment(){
				
				    return "";
				
				}
				public String UBICACION_PACIENTEPattern(){
				
					return "";
				
				}
				public String UBICACION_PACIENTEOriginalDbColumnName(){
				
					return "UBICACION_PACIENTE";
				
				}

				
			    public String AMBULANCIA;

				public String getAMBULANCIA () {
					return this.AMBULANCIA;
				}

				public Boolean AMBULANCIAIsNullable(){
				    return true;
				}
				public Boolean AMBULANCIAIsKey(){
				    return false;
				}
				public Integer AMBULANCIALength(){
				    return 20;
				}
				public Integer AMBULANCIAPrecision(){
				    return 0;
				}
				public String AMBULANCIADefault(){
				
					return null;
				
				}
				public String AMBULANCIAComment(){
				
				    return "";
				
				}
				public String AMBULANCIAPattern(){
				
					return "";
				
				}
				public String AMBULANCIAOriginalDbColumnName(){
				
					return "AMBULANCIA";
				
				}

				
			    public String CAUTORIZACION;

				public String getCAUTORIZACION () {
					return this.CAUTORIZACION;
				}

				public Boolean CAUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean CAUTORIZACIONIsKey(){
				    return false;
				}
				public Integer CAUTORIZACIONLength(){
				    return 250;
				}
				public Integer CAUTORIZACIONPrecision(){
				    return 0;
				}
				public String CAUTORIZACIONDefault(){
				
					return null;
				
				}
				public String CAUTORIZACIONComment(){
				
				    return "";
				
				}
				public String CAUTORIZACIONPattern(){
				
					return "";
				
				}
				public String CAUTORIZACIONOriginalDbColumnName(){
				
					return "CAUTORIZACION";
				
				}

				
			    public String CSOLICITUD;

				public String getCSOLICITUD () {
					return this.CSOLICITUD;
				}

				public Boolean CSOLICITUDIsNullable(){
				    return true;
				}
				public Boolean CSOLICITUDIsKey(){
				    return false;
				}
				public Integer CSOLICITUDLength(){
				    return 200;
				}
				public Integer CSOLICITUDPrecision(){
				    return 0;
				}
				public String CSOLICITUDDefault(){
				
					return null;
				
				}
				public String CSOLICITUDComment(){
				
				    return "";
				
				}
				public String CSOLICITUDPattern(){
				
					return "";
				
				}
				public String CSOLICITUDOriginalDbColumnName(){
				
					return "CSOLICITUD";
				
				}

				
			    public String TIPO_SOLICITUD;

				public String getTIPO_SOLICITUD () {
					return this.TIPO_SOLICITUD;
				}

				public Boolean TIPO_SOLICITUDIsNullable(){
				    return false;
				}
				public Boolean TIPO_SOLICITUDIsKey(){
				    return false;
				}
				public Integer TIPO_SOLICITUDLength(){
				    return 50;
				}
				public Integer TIPO_SOLICITUDPrecision(){
				    return 0;
				}
				public String TIPO_SOLICITUDDefault(){
				
					return null;
				
				}
				public String TIPO_SOLICITUDComment(){
				
				    return "";
				
				}
				public String TIPO_SOLICITUDPattern(){
				
					return "";
				
				}
				public String TIPO_SOLICITUDOriginalDbColumnName(){
				
					return "TIPO_SOLICITUD";
				
				}

				
			    public String ORIGEN;

				public String getORIGEN () {
					return this.ORIGEN;
				}

				public Boolean ORIGENIsNullable(){
				    return true;
				}
				public Boolean ORIGENIsKey(){
				    return false;
				}
				public Integer ORIGENLength(){
				    return 50;
				}
				public Integer ORIGENPrecision(){
				    return 0;
				}
				public String ORIGENDefault(){
				
					return null;
				
				}
				public String ORIGENComment(){
				
				    return "";
				
				}
				public String ORIGENPattern(){
				
					return "";
				
				}
				public String ORIGENOriginalDbColumnName(){
				
					return "ORIGEN";
				
				}

				
			    public BigDecimal EDAD;

				public BigDecimal getEDAD () {
					return this.EDAD;
				}

				public Boolean EDADIsNullable(){
				    return true;
				}
				public Boolean EDADIsKey(){
				    return false;
				}
				public Integer EDADLength(){
				    return 0;
				}
				public Integer EDADPrecision(){
				    return 0;
				}
				public String EDADDefault(){
				
					return "";
				
				}
				public String EDADComment(){
				
				    return "";
				
				}
				public String EDADPattern(){
				
					return "";
				
				}
				public String EDADOriginalDbColumnName(){
				
					return "EDAD";
				
				}

				
			    public String PYP_SIGLA;

				public String getPYP_SIGLA () {
					return this.PYP_SIGLA;
				}

				public Boolean PYP_SIGLAIsNullable(){
				    return true;
				}
				public Boolean PYP_SIGLAIsKey(){
				    return false;
				}
				public Integer PYP_SIGLALength(){
				    return 20;
				}
				public Integer PYP_SIGLAPrecision(){
				    return 0;
				}
				public String PYP_SIGLADefault(){
				
					return null;
				
				}
				public String PYP_SIGLAComment(){
				
				    return "";
				
				}
				public String PYP_SIGLAPattern(){
				
					return "";
				
				}
				public String PYP_SIGLAOriginalDbColumnName(){
				
					return "PYP_SIGLA";
				
				}

				
			    public java.util.Date FECHA_SOLI;

				public java.util.Date getFECHA_SOLI () {
					return this.FECHA_SOLI;
				}

				public Boolean FECHA_SOLIIsNullable(){
				    return false;
				}
				public Boolean FECHA_SOLIIsKey(){
				    return false;
				}
				public Integer FECHA_SOLILength(){
				    return 0;
				}
				public Integer FECHA_SOLIPrecision(){
				    return 0;
				}
				public String FECHA_SOLIDefault(){
				
					return null;
				
				}
				public String FECHA_SOLIComment(){
				
				    return "";
				
				}
				public String FECHA_SOLIPattern(){
				
					return "";
				
				}
				public String FECHA_SOLIOriginalDbColumnName(){
				
					return "FECHA_SOLI";
				
				}

				
			    public BigDecimal ID_TIEMPOS;

				public BigDecimal getID_TIEMPOS () {
					return this.ID_TIEMPOS;
				}

				public Boolean ID_TIEMPOSIsNullable(){
				    return true;
				}
				public Boolean ID_TIEMPOSIsKey(){
				    return false;
				}
				public Integer ID_TIEMPOSLength(){
				    return 0;
				}
				public Integer ID_TIEMPOSPrecision(){
				    return 0;
				}
				public String ID_TIEMPOSDefault(){
				
					return "";
				
				}
				public String ID_TIEMPOSComment(){
				
				    return "";
				
				}
				public String ID_TIEMPOSPattern(){
				
					return "";
				
				}
				public String ID_TIEMPOSOriginalDbColumnName(){
				
					return "ID_TIEMPOS";
				
				}

				
			    public java.util.Date FECHA_AUTORIZACION;

				public java.util.Date getFECHA_AUTORIZACION () {
					return this.FECHA_AUTORIZACION;
				}

				public Boolean FECHA_AUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_AUTORIZACIONIsKey(){
				    return false;
				}
				public Integer FECHA_AUTORIZACIONLength(){
				    return 0;
				}
				public Integer FECHA_AUTORIZACIONPrecision(){
				    return 0;
				}
				public String FECHA_AUTORIZACIONDefault(){
				
					return null;
				
				}
				public String FECHA_AUTORIZACIONComment(){
				
				    return "";
				
				}
				public String FECHA_AUTORIZACIONPattern(){
				
					return "";
				
				}
				public String FECHA_AUTORIZACIONOriginalDbColumnName(){
				
					return "FECHA_AUTORIZACION";
				
				}

				
			    public BigDecimal ID_TIEMPOA;

				public BigDecimal getID_TIEMPOA () {
					return this.ID_TIEMPOA;
				}

				public Boolean ID_TIEMPOAIsNullable(){
				    return true;
				}
				public Boolean ID_TIEMPOAIsKey(){
				    return false;
				}
				public Integer ID_TIEMPOALength(){
				    return 0;
				}
				public Integer ID_TIEMPOAPrecision(){
				    return 0;
				}
				public String ID_TIEMPOADefault(){
				
					return "";
				
				}
				public String ID_TIEMPOAComment(){
				
				    return "";
				
				}
				public String ID_TIEMPOAPattern(){
				
					return "";
				
				}
				public String ID_TIEMPOAOriginalDbColumnName(){
				
					return "ID_TIEMPOA";
				
				}

				
			    public java.util.Date FECHA_TUTELA;

				public java.util.Date getFECHA_TUTELA () {
					return this.FECHA_TUTELA;
				}

				public Boolean FECHA_TUTELAIsNullable(){
				    return true;
				}
				public Boolean FECHA_TUTELAIsKey(){
				    return false;
				}
				public Integer FECHA_TUTELALength(){
				    return 0;
				}
				public Integer FECHA_TUTELAPrecision(){
				    return 0;
				}
				public String FECHA_TUTELADefault(){
				
					return null;
				
				}
				public String FECHA_TUTELAComment(){
				
				    return "";
				
				}
				public String FECHA_TUTELAPattern(){
				
					return "";
				
				}
				public String FECHA_TUTELAOriginalDbColumnName(){
				
					return "FECHA_TUTELA";
				
				}

				
			    public java.util.Date VENCIMIENTO;

				public java.util.Date getVENCIMIENTO () {
					return this.VENCIMIENTO;
				}

				public Boolean VENCIMIENTOIsNullable(){
				    return true;
				}
				public Boolean VENCIMIENTOIsKey(){
				    return false;
				}
				public Integer VENCIMIENTOLength(){
				    return 0;
				}
				public Integer VENCIMIENTOPrecision(){
				    return 0;
				}
				public String VENCIMIENTODefault(){
				
					return null;
				
				}
				public String VENCIMIENTOComment(){
				
				    return "";
				
				}
				public String VENCIMIENTOPattern(){
				
					return "";
				
				}
				public String VENCIMIENTOOriginalDbColumnName(){
				
					return "VENCIMIENTO";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 30;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String NUMERO_ACTA;

				public String getNUMERO_ACTA () {
					return this.NUMERO_ACTA;
				}

				public Boolean NUMERO_ACTAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_ACTAIsKey(){
				    return false;
				}
				public Integer NUMERO_ACTALength(){
				    return 500;
				}
				public Integer NUMERO_ACTAPrecision(){
				    return 0;
				}
				public String NUMERO_ACTADefault(){
				
					return null;
				
				}
				public String NUMERO_ACTAComment(){
				
				    return "";
				
				}
				public String NUMERO_ACTAPattern(){
				
					return "";
				
				}
				public String NUMERO_ACTAOriginalDbColumnName(){
				
					return "NUMERO_ACTA";
				
				}

				
			    public String CLASIFICACION;

				public String getCLASIFICACION () {
					return this.CLASIFICACION;
				}

				public Boolean CLASIFICACIONIsNullable(){
				    return true;
				}
				public Boolean CLASIFICACIONIsKey(){
				    return false;
				}
				public Integer CLASIFICACIONLength(){
				    return 20;
				}
				public Integer CLASIFICACIONPrecision(){
				    return 0;
				}
				public String CLASIFICACIONDefault(){
				
					return null;
				
				}
				public String CLASIFICACIONComment(){
				
				    return "";
				
				}
				public String CLASIFICACIONPattern(){
				
					return "";
				
				}
				public String CLASIFICACIONOriginalDbColumnName(){
				
					return "CLASIFICACION";
				
				}

				
			    public BigDecimal PRORROGAS;

				public BigDecimal getPRORROGAS () {
					return this.PRORROGAS;
				}

				public Boolean PRORROGASIsNullable(){
				    return true;
				}
				public Boolean PRORROGASIsKey(){
				    return false;
				}
				public Integer PRORROGASLength(){
				    return 0;
				}
				public Integer PRORROGASPrecision(){
				    return null;
				}
				public String PRORROGASDefault(){
				
					return "";
				
				}
				public String PRORROGASComment(){
				
				    return "";
				
				}
				public String PRORROGASPattern(){
				
					return "";
				
				}
				public String PRORROGASOriginalDbColumnName(){
				
					return "PRORROGAS";
				
				}

				
			    public String MODO;

				public String getMODO () {
					return this.MODO;
				}

				public Boolean MODOIsNullable(){
				    return true;
				}
				public Boolean MODOIsKey(){
				    return false;
				}
				public Integer MODOLength(){
				    return 20;
				}
				public Integer MODOPrecision(){
				    return 0;
				}
				public String MODODefault(){
				
					return null;
				
				}
				public String MODOComment(){
				
				    return "";
				
				}
				public String MODOPattern(){
				
					return "";
				
				}
				public String MODOOriginalDbColumnName(){
				
					return "MODO";
				
				}

				
			    public String CODIGO_ACEPTACION;

				public String getCODIGO_ACEPTACION () {
					return this.CODIGO_ACEPTACION;
				}

				public Boolean CODIGO_ACEPTACIONIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ACEPTACIONIsKey(){
				    return false;
				}
				public Integer CODIGO_ACEPTACIONLength(){
				    return 2500;
				}
				public Integer CODIGO_ACEPTACIONPrecision(){
				    return 0;
				}
				public String CODIGO_ACEPTACIONDefault(){
				
					return null;
				
				}
				public String CODIGO_ACEPTACIONComment(){
				
				    return "";
				
				}
				public String CODIGO_ACEPTACIONPattern(){
				
					return "";
				
				}
				public String CODIGO_ACEPTACIONOriginalDbColumnName(){
				
					return "CODIGO_ACEPTACION";
				
				}

				
			    public String RESOLUCION_TUTELA;

				public String getRESOLUCION_TUTELA () {
					return this.RESOLUCION_TUTELA;
				}

				public Boolean RESOLUCION_TUTELAIsNullable(){
				    return true;
				}
				public Boolean RESOLUCION_TUTELAIsKey(){
				    return false;
				}
				public Integer RESOLUCION_TUTELALength(){
				    return 4000;
				}
				public Integer RESOLUCION_TUTELAPrecision(){
				    return 0;
				}
				public String RESOLUCION_TUTELADefault(){
				
					return null;
				
				}
				public String RESOLUCION_TUTELAComment(){
				
				    return "";
				
				}
				public String RESOLUCION_TUTELAPattern(){
				
					return "";
				
				}
				public String RESOLUCION_TUTELAOriginalDbColumnName(){
				
					return "RESOLUCION_TUTELA";
				
				}

				
			    public String JUSTIFICACION_NOFAVORABLE;

				public String getJUSTIFICACION_NOFAVORABLE () {
					return this.JUSTIFICACION_NOFAVORABLE;
				}

				public Boolean JUSTIFICACION_NOFAVORABLEIsNullable(){
				    return true;
				}
				public Boolean JUSTIFICACION_NOFAVORABLEIsKey(){
				    return false;
				}
				public Integer JUSTIFICACION_NOFAVORABLELength(){
				    return 4000;
				}
				public Integer JUSTIFICACION_NOFAVORABLEPrecision(){
				    return 0;
				}
				public String JUSTIFICACION_NOFAVORABLEDefault(){
				
					return null;
				
				}
				public String JUSTIFICACION_NOFAVORABLEComment(){
				
				    return "";
				
				}
				public String JUSTIFICACION_NOFAVORABLEPattern(){
				
					return "";
				
				}
				public String JUSTIFICACION_NOFAVORABLEOriginalDbColumnName(){
				
					return "JUSTIFICACION_NOFAVORABLE";
				
				}

				
			    public String JUSTIFICACION_ANULACION;

				public String getJUSTIFICACION_ANULACION () {
					return this.JUSTIFICACION_ANULACION;
				}

				public Boolean JUSTIFICACION_ANULACIONIsNullable(){
				    return true;
				}
				public Boolean JUSTIFICACION_ANULACIONIsKey(){
				    return false;
				}
				public Integer JUSTIFICACION_ANULACIONLength(){
				    return 4000;
				}
				public Integer JUSTIFICACION_ANULACIONPrecision(){
				    return 0;
				}
				public String JUSTIFICACION_ANULACIONDefault(){
				
					return null;
				
				}
				public String JUSTIFICACION_ANULACIONComment(){
				
				    return "";
				
				}
				public String JUSTIFICACION_ANULACIONPattern(){
				
					return "";
				
				}
				public String JUSTIFICACION_ANULACIONOriginalDbColumnName(){
				
					return "JUSTIFICACION_ANULACION";
				
				}

				
			    public BigDecimal PRESPONSABLE;

				public BigDecimal getPRESPONSABLE () {
					return this.PRESPONSABLE;
				}

				public Boolean PRESPONSABLEIsNullable(){
				    return true;
				}
				public Boolean PRESPONSABLEIsKey(){
				    return false;
				}
				public Integer PRESPONSABLELength(){
				    return 0;
				}
				public Integer PRESPONSABLEPrecision(){
				    return null;
				}
				public String PRESPONSABLEDefault(){
				
					return "";
				
				}
				public String PRESPONSABLEComment(){
				
				    return "";
				
				}
				public String PRESPONSABLEPattern(){
				
					return "";
				
				}
				public String PRESPONSABLEOriginalDbColumnName(){
				
					return "PRESPONSABLE";
				
				}

				
			    public String DIAGR_1;

				public String getDIAGR_1 () {
					return this.DIAGR_1;
				}

				public Boolean DIAGR_1IsNullable(){
				    return true;
				}
				public Boolean DIAGR_1IsKey(){
				    return false;
				}
				public Integer DIAGR_1Length(){
				    return 512;
				}
				public Integer DIAGR_1Precision(){
				    return 0;
				}
				public String DIAGR_1Default(){
				
					return null;
				
				}
				public String DIAGR_1Comment(){
				
				    return "";
				
				}
				public String DIAGR_1Pattern(){
				
					return "";
				
				}
				public String DIAGR_1OriginalDbColumnName(){
				
					return "DIAGR_1";
				
				}

				
			    public String DIAGR_2;

				public String getDIAGR_2 () {
					return this.DIAGR_2;
				}

				public Boolean DIAGR_2IsNullable(){
				    return true;
				}
				public Boolean DIAGR_2IsKey(){
				    return false;
				}
				public Integer DIAGR_2Length(){
				    return 512;
				}
				public Integer DIAGR_2Precision(){
				    return 0;
				}
				public String DIAGR_2Default(){
				
					return null;
				
				}
				public String DIAGR_2Comment(){
				
				    return "";
				
				}
				public String DIAGR_2Pattern(){
				
					return "";
				
				}
				public String DIAGR_2OriginalDbColumnName(){
				
					return "DIAGR_2";
				
				}

				
			    public String DIAGR_3;

				public String getDIAGR_3 () {
					return this.DIAGR_3;
				}

				public Boolean DIAGR_3IsNullable(){
				    return true;
				}
				public Boolean DIAGR_3IsKey(){
				    return false;
				}
				public Integer DIAGR_3Length(){
				    return 512;
				}
				public Integer DIAGR_3Precision(){
				    return 0;
				}
				public String DIAGR_3Default(){
				
					return null;
				
				}
				public String DIAGR_3Comment(){
				
				    return "";
				
				}
				public String DIAGR_3Pattern(){
				
					return "";
				
				}
				public String DIAGR_3OriginalDbColumnName(){
				
					return "DIAGR_3";
				
				}

				
			    public BigDecimal CANTIDAD;

				public BigDecimal getCANTIDAD () {
					return this.CANTIDAD;
				}

				public Boolean CANTIDADIsNullable(){
				    return false;
				}
				public Boolean CANTIDADIsKey(){
				    return false;
				}
				public Integer CANTIDADLength(){
				    return 0;
				}
				public Integer CANTIDADPrecision(){
				    return null;
				}
				public String CANTIDADDefault(){
				
					return "";
				
				}
				public String CANTIDADComment(){
				
				    return "";
				
				}
				public String CANTIDADPattern(){
				
					return "";
				
				}
				public String CANTIDADOriginalDbColumnName(){
				
					return "CANTIDAD";
				
				}

				
			    public BigDecimal VALOR_UNITARIO;

				public BigDecimal getVALOR_UNITARIO () {
					return this.VALOR_UNITARIO;
				}

				public Boolean VALOR_UNITARIOIsNullable(){
				    return false;
				}
				public Boolean VALOR_UNITARIOIsKey(){
				    return false;
				}
				public Integer VALOR_UNITARIOLength(){
				    return 0;
				}
				public Integer VALOR_UNITARIOPrecision(){
				    return null;
				}
				public String VALOR_UNITARIODefault(){
				
					return "";
				
				}
				public String VALOR_UNITARIOComment(){
				
				    return "";
				
				}
				public String VALOR_UNITARIOPattern(){
				
					return "";
				
				}
				public String VALOR_UNITARIOOriginalDbColumnName(){
				
					return "VALOR_UNITARIO";
				
				}

				
			    public BigDecimal VALOR_TOTAL;

				public BigDecimal getVALOR_TOTAL () {
					return this.VALOR_TOTAL;
				}

				public Boolean VALOR_TOTALIsNullable(){
				    return false;
				}
				public Boolean VALOR_TOTALIsKey(){
				    return false;
				}
				public Integer VALOR_TOTALLength(){
				    return 0;
				}
				public Integer VALOR_TOTALPrecision(){
				    return null;
				}
				public String VALOR_TOTALDefault(){
				
					return "";
				
				}
				public String VALOR_TOTALComment(){
				
				    return "";
				
				}
				public String VALOR_TOTALPattern(){
				
					return "";
				
				}
				public String VALOR_TOTALOriginalDbColumnName(){
				
					return "VALOR_TOTAL";
				
				}

				
			    public String OBSERVACIONESAUT;

				public String getOBSERVACIONESAUT () {
					return this.OBSERVACIONESAUT;
				}

				public Boolean OBSERVACIONESAUTIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESAUTIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESAUTLength(){
				    return 4000;
				}
				public Integer OBSERVACIONESAUTPrecision(){
				    return 0;
				}
				public String OBSERVACIONESAUTDefault(){
				
					return "";
				
				}
				public String OBSERVACIONESAUTComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESAUTPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESAUTOriginalDbColumnName(){
				
					return "OBSERVACIONESAUT";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 4000;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return "";
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public String ONSERVACION;

				public String getONSERVACION () {
					return this.ONSERVACION;
				}

				public Boolean ONSERVACIONIsNullable(){
				    return true;
				}
				public Boolean ONSERVACIONIsKey(){
				    return false;
				}
				public Integer ONSERVACIONLength(){
				    return 4000;
				}
				public Integer ONSERVACIONPrecision(){
				    return 0;
				}
				public String ONSERVACIONDefault(){
				
					return "";
				
				}
				public String ONSERVACIONComment(){
				
				    return "";
				
				}
				public String ONSERVACIONPattern(){
				
					return "";
				
				}
				public String ONSERVACIONOriginalDbColumnName(){
				
					return "ONSERVACION";
				
				}

				
			    public String OBSERVACIONES_AUTORIZACION;

				public String getOBSERVACIONES_AUTORIZACION () {
					return this.OBSERVACIONES_AUTORIZACION;
				}

				public Boolean OBSERVACIONES_AUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONES_AUTORIZACIONIsKey(){
				    return false;
				}
				public Integer OBSERVACIONES_AUTORIZACIONLength(){
				    return 4000;
				}
				public Integer OBSERVACIONES_AUTORIZACIONPrecision(){
				    return 0;
				}
				public String OBSERVACIONES_AUTORIZACIONDefault(){
				
					return "";
				
				}
				public String OBSERVACIONES_AUTORIZACIONComment(){
				
				    return "";
				
				}
				public String OBSERVACIONES_AUTORIZACIONPattern(){
				
					return "";
				
				}
				public String OBSERVACIONES_AUTORIZACIONOriginalDbColumnName(){
				
					return "OBSERVACIONES_AUTORIZACION";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length == 0) {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length == 0) {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.UORG_REGISTRA_ID = (BigDecimal) dis.readObject();
					
						this.UORGO_ID = (BigDecimal) dis.readObject();
					
						this.UORGE_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
						this.PACIENTE_ID = (BigDecimal) dis.readObject();
					
						this.PARENTESCO_ID = (BigDecimal) dis.readObject();
					
						this.DIGITADOR = (BigDecimal) dis.readObject();
					
						this.DIAGNOSTICOS_ID = (BigDecimal) dis.readObject();
					
						this.ESPCSOLICITA = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
						this.NOMBRE_AUTORIZA = (BigDecimal) dis.readObject();
					
					this.UBICACION_PACIENTE = readString(dis);
					
					this.AMBULANCIA = readString(dis);
					
					this.CAUTORIZACION = readString(dis);
					
					this.CSOLICITUD = readString(dis);
					
					this.TIPO_SOLICITUD = readString(dis);
					
					this.ORIGEN = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.PYP_SIGLA = readString(dis);
					
					this.FECHA_SOLI = readDate(dis);
					
						this.ID_TIEMPOS = (BigDecimal) dis.readObject();
					
					this.FECHA_AUTORIZACION = readDate(dis);
					
						this.ID_TIEMPOA = (BigDecimal) dis.readObject();
					
					this.FECHA_TUTELA = readDate(dis);
					
					this.VENCIMIENTO = readDate(dis);
					
					this.ESTADO = readString(dis);
					
					this.NUMERO_ACTA = readString(dis);
					
					this.CLASIFICACION = readString(dis);
					
						this.PRORROGAS = (BigDecimal) dis.readObject();
					
					this.MODO = readString(dis);
					
					this.CODIGO_ACEPTACION = readString(dis);
					
					this.RESOLUCION_TUTELA = readString(dis);
					
					this.JUSTIFICACION_NOFAVORABLE = readString(dis);
					
					this.JUSTIFICACION_ANULACION = readString(dis);
					
						this.PRESPONSABLE = (BigDecimal) dis.readObject();
					
					this.DIAGR_1 = readString(dis);
					
					this.DIAGR_2 = readString(dis);
					
					this.DIAGR_3 = readString(dis);
					
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.VALOR_TOTAL = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONESAUT = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.ONSERVACION = readString(dis);
					
					this.OBSERVACIONES_AUTORIZACION = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.UORG_REGISTRA_ID = (BigDecimal) dis.readObject();
					
						this.UORGO_ID = (BigDecimal) dis.readObject();
					
						this.UORGE_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
						this.PACIENTE_ID = (BigDecimal) dis.readObject();
					
						this.PARENTESCO_ID = (BigDecimal) dis.readObject();
					
						this.DIGITADOR = (BigDecimal) dis.readObject();
					
						this.DIAGNOSTICOS_ID = (BigDecimal) dis.readObject();
					
						this.ESPCSOLICITA = (BigDecimal) dis.readObject();
					
						this.ESPECIALIDADES_ID = (BigDecimal) dis.readObject();
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
						this.NOMBRE_AUTORIZA = (BigDecimal) dis.readObject();
					
					this.UBICACION_PACIENTE = readString(dis);
					
					this.AMBULANCIA = readString(dis);
					
					this.CAUTORIZACION = readString(dis);
					
					this.CSOLICITUD = readString(dis);
					
					this.TIPO_SOLICITUD = readString(dis);
					
					this.ORIGEN = readString(dis);
					
						this.EDAD = (BigDecimal) dis.readObject();
					
					this.PYP_SIGLA = readString(dis);
					
					this.FECHA_SOLI = readDate(dis);
					
						this.ID_TIEMPOS = (BigDecimal) dis.readObject();
					
					this.FECHA_AUTORIZACION = readDate(dis);
					
						this.ID_TIEMPOA = (BigDecimal) dis.readObject();
					
					this.FECHA_TUTELA = readDate(dis);
					
					this.VENCIMIENTO = readDate(dis);
					
					this.ESTADO = readString(dis);
					
					this.NUMERO_ACTA = readString(dis);
					
					this.CLASIFICACION = readString(dis);
					
						this.PRORROGAS = (BigDecimal) dis.readObject();
					
					this.MODO = readString(dis);
					
					this.CODIGO_ACEPTACION = readString(dis);
					
					this.RESOLUCION_TUTELA = readString(dis);
					
					this.JUSTIFICACION_NOFAVORABLE = readString(dis);
					
					this.JUSTIFICACION_ANULACION = readString(dis);
					
						this.PRESPONSABLE = (BigDecimal) dis.readObject();
					
					this.DIAGR_1 = readString(dis);
					
					this.DIAGR_2 = readString(dis);
					
					this.DIAGR_3 = readString(dis);
					
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
						this.VALOR_TOTAL = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONESAUT = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.ONSERVACION = readString(dis);
					
					this.OBSERVACIONES_AUTORIZACION = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_REGISTRA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORGO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORGE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PACIENTE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PARENTESCO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIGITADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIAGNOSTICOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPCSOLICITA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFESIONAL_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NOMBRE_AUTORIZA);
					
					// String
				
						writeString(this.UBICACION_PACIENTE,dos);
					
					// String
				
						writeString(this.AMBULANCIA,dos);
					
					// String
				
						writeString(this.CAUTORIZACION,dos);
					
					// String
				
						writeString(this.CSOLICITUD,dos);
					
					// String
				
						writeString(this.TIPO_SOLICITUD,dos);
					
					// String
				
						writeString(this.ORIGEN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_SOLI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_TIEMPOS);
					
					// java.util.Date
				
						writeDate(this.FECHA_AUTORIZACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_TIEMPOA);
					
					// java.util.Date
				
						writeDate(this.FECHA_TUTELA,dos);
					
					// java.util.Date
				
						writeDate(this.VENCIMIENTO,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.NUMERO_ACTA,dos);
					
					// String
				
						writeString(this.CLASIFICACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRORROGAS);
					
					// String
				
						writeString(this.MODO,dos);
					
					// String
				
						writeString(this.CODIGO_ACEPTACION,dos);
					
					// String
				
						writeString(this.RESOLUCION_TUTELA,dos);
					
					// String
				
						writeString(this.JUSTIFICACION_NOFAVORABLE,dos);
					
					// String
				
						writeString(this.JUSTIFICACION_ANULACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESPONSABLE);
					
					// String
				
						writeString(this.DIAGR_1,dos);
					
					// String
				
						writeString(this.DIAGR_2,dos);
					
					// String
				
						writeString(this.DIAGR_3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_TOTAL);
					
					// String
				
						writeString(this.OBSERVACIONESAUT,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.ONSERVACION,dos);
					
					// String
				
						writeString(this.OBSERVACIONES_AUTORIZACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_REGISTRA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORGO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORGE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PACIENTE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PARENTESCO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIGITADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIAGNOSTICOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPCSOLICITA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESPECIALIDADES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFESIONAL_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NOMBRE_AUTORIZA);
					
					// String
				
						writeString(this.UBICACION_PACIENTE,dos);
					
					// String
				
						writeString(this.AMBULANCIA,dos);
					
					// String
				
						writeString(this.CAUTORIZACION,dos);
					
					// String
				
						writeString(this.CSOLICITUD,dos);
					
					// String
				
						writeString(this.TIPO_SOLICITUD,dos);
					
					// String
				
						writeString(this.ORIGEN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EDAD);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_SOLI,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID_TIEMPOS);
					
					// java.util.Date
				
						writeDate(this.FECHA_AUTORIZACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID_TIEMPOA);
					
					// java.util.Date
				
						writeDate(this.FECHA_TUTELA,dos);
					
					// java.util.Date
				
						writeDate(this.VENCIMIENTO,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.NUMERO_ACTA,dos);
					
					// String
				
						writeString(this.CLASIFICACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRORROGAS);
					
					// String
				
						writeString(this.MODO,dos);
					
					// String
				
						writeString(this.CODIGO_ACEPTACION,dos);
					
					// String
				
						writeString(this.RESOLUCION_TUTELA,dos);
					
					// String
				
						writeString(this.JUSTIFICACION_NOFAVORABLE,dos);
					
					// String
				
						writeString(this.JUSTIFICACION_ANULACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESPONSABLE);
					
					// String
				
						writeString(this.DIAGR_1,dos);
					
					// String
				
						writeString(this.DIAGR_2,dos);
					
					// String
				
						writeString(this.DIAGR_3,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_UNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_TOTAL);
					
					// String
				
						writeString(this.OBSERVACIONESAUT,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.ONSERVACION,dos);
					
					// String
				
						writeString(this.OBSERVACIONES_AUTORIZACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",UORG_REGISTRA_ID="+String.valueOf(UORG_REGISTRA_ID));
		sb.append(",UORGO_ID="+String.valueOf(UORGO_ID));
		sb.append(",UORGE_ID="+String.valueOf(UORGE_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",PACIENTE_ID="+String.valueOf(PACIENTE_ID));
		sb.append(",PARENTESCO_ID="+String.valueOf(PARENTESCO_ID));
		sb.append(",DIGITADOR="+String.valueOf(DIGITADOR));
		sb.append(",DIAGNOSTICOS_ID="+String.valueOf(DIAGNOSTICOS_ID));
		sb.append(",ESPCSOLICITA="+String.valueOf(ESPCSOLICITA));
		sb.append(",ESPECIALIDADES_ID="+String.valueOf(ESPECIALIDADES_ID));
		sb.append(",PROFESIONAL_ID="+String.valueOf(PROFESIONAL_ID));
		sb.append(",PROCESOSASISTENCIALES_ID="+String.valueOf(PROCESOSASISTENCIALES_ID));
		sb.append(",NOMBRE_AUTORIZA="+String.valueOf(NOMBRE_AUTORIZA));
		sb.append(",UBICACION_PACIENTE="+UBICACION_PACIENTE);
		sb.append(",AMBULANCIA="+AMBULANCIA);
		sb.append(",CAUTORIZACION="+CAUTORIZACION);
		sb.append(",CSOLICITUD="+CSOLICITUD);
		sb.append(",TIPO_SOLICITUD="+TIPO_SOLICITUD);
		sb.append(",ORIGEN="+ORIGEN);
		sb.append(",EDAD="+String.valueOf(EDAD));
		sb.append(",PYP_SIGLA="+PYP_SIGLA);
		sb.append(",FECHA_SOLI="+String.valueOf(FECHA_SOLI));
		sb.append(",ID_TIEMPOS="+String.valueOf(ID_TIEMPOS));
		sb.append(",FECHA_AUTORIZACION="+String.valueOf(FECHA_AUTORIZACION));
		sb.append(",ID_TIEMPOA="+String.valueOf(ID_TIEMPOA));
		sb.append(",FECHA_TUTELA="+String.valueOf(FECHA_TUTELA));
		sb.append(",VENCIMIENTO="+String.valueOf(VENCIMIENTO));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",NUMERO_ACTA="+NUMERO_ACTA);
		sb.append(",CLASIFICACION="+CLASIFICACION);
		sb.append(",PRORROGAS="+String.valueOf(PRORROGAS));
		sb.append(",MODO="+MODO);
		sb.append(",CODIGO_ACEPTACION="+CODIGO_ACEPTACION);
		sb.append(",RESOLUCION_TUTELA="+RESOLUCION_TUTELA);
		sb.append(",JUSTIFICACION_NOFAVORABLE="+JUSTIFICACION_NOFAVORABLE);
		sb.append(",JUSTIFICACION_ANULACION="+JUSTIFICACION_ANULACION);
		sb.append(",PRESPONSABLE="+String.valueOf(PRESPONSABLE));
		sb.append(",DIAGR_1="+DIAGR_1);
		sb.append(",DIAGR_2="+DIAGR_2);
		sb.append(",DIAGR_3="+DIAGR_3);
		sb.append(",CANTIDAD="+String.valueOf(CANTIDAD));
		sb.append(",VALOR_UNITARIO="+String.valueOf(VALOR_UNITARIO));
		sb.append(",VALOR_TOTAL="+String.valueOf(VALOR_TOTAL));
		sb.append(",OBSERVACIONESAUT="+OBSERVACIONESAUT);
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",ONSERVACION="+ONSERVACION);
		sb.append(",OBSERVACIONES_AUTORIZACION="+OBSERVACIONES_AUTORIZACION);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_1Process(globalMap);
		tHashInput_2Process(globalMap);

		row2Struct row2 = new row2Struct();
AUTORIZACIONES_OUTStruct AUTORIZACIONES_OUT = new AUTORIZACIONES_OUTStruct();
row1Struct row1 = new row1Struct();
SALIDAStruct SALIDA = new SALIDAStruct();







	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"SALIDA");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






        int updateKeyCount_tOracleOutput_1 = 1;
        if(updateKeyCount_tOracleOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_1 == 54 && true) {
                    System.err.println("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
                    String driverClass_tOracleOutput_1 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_1);
                String url_tOracleOutput_1 = null;
                    url_tOracleOutput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_1 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_1 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_1 = decryptedPassword_tOracleOutput_1;
                dbschema_tOracleOutput_1 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_1 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_1.put("user",dbUser_tOracleOutput_1);
                    atnParamsPrope_tOracleOutput_1.put("password",dbPwd_tOracleOutput_1);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_1.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_1 = java.sql.DriverManager.getConnection(url_tOracleOutput_1, atnParamsPrope_tOracleOutput_1);
        resourceMap.put("conn_tOracleOutput_1", conn_tOracleOutput_1);
            conn_tOracleOutput_1.setAutoCommit(false);
            int commitEvery_tOracleOutput_1 = 1000;
            int commitCounter_tOracleOutput_1 = 0;
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("BRCA_AUTORIZACIONES");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("BRCA_AUTORIZACIONES");
        }
                java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement("SELECT COUNT(1) FROM " + tableName_tOracleOutput_1 + " WHERE ID = ?");
                resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);
                String insert_tOracleOutput_1 = "INSERT INTO " + tableName_tOracleOutput_1 + " (ID,UORGE_ID,PACIENTE_ID,DIAGNOSTICOS_ID,ESPECIALIDADES_ID,CUPS_ID,PROFESIONAL_ID,TIEMPOA_ID,ESTADO,CLASIFICACION,FECHA_TUTELA,NUMERO_ACTA,OBSERVACION,NOMBRE_AUTORIZA,AMBULANCIA,VENCIMIENTO,PRORROGAS,MODO,CODIGO_ACEPTACION,JUSTIFICAICON_ANULACION,RESOLICION_TUTELA,JUSTIFICAICON_NOFAVORABLE,UORGO_ID,VALOR_TOTAL,VALOR_UNITARIO,CANTIDAD,ORIGEN,FECHA_SOLICITUD,TIPO_SOLICITUD,ESTREGISTRO_ID,UORG_REGISTRA_ID,OBSERVACIONAUT,DRELACIONADO1,DRELACIONADO2,DRELACIONADO3,DESCRIPCION1,DESCRIPCION2,DESCRIPCION3,EDAD,DIGITADOR,PARENTESCO_ID,ESPCSOLICITA,PROCESOSASISTENCIALES_ID,UBICACION_PACIENTE,CAUTORIZACION,CSOLICITUD,PYP_SIGLA,RESOLUCION_TUTELAS,PRESPONSABLE,OBSERVACIONES,TIEMPOS_ID,OBSERVACIONES_AUTORIZACION,FECHA_AUTORIZACION,AUTORIZADOR) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    
                java.sql.PreparedStatement pstmtInsert_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(insert_tOracleOutput_1);
                resourceMap.put("pstmtInsert_tOracleOutput_1", pstmtInsert_tOracleOutput_1);
                String update_tOracleOutput_1 = "UPDATE " + tableName_tOracleOutput_1 + " SET UORGE_ID = ?,PACIENTE_ID = ?,DIAGNOSTICOS_ID = ?,ESPECIALIDADES_ID = ?,CUPS_ID = ?,PROFESIONAL_ID = ?,TIEMPOA_ID = ?,ESTADO = ?,CLASIFICACION = ?,FECHA_TUTELA = ?,NUMERO_ACTA = ?,OBSERVACION = ?,NOMBRE_AUTORIZA = ?,AMBULANCIA = ?,VENCIMIENTO = ?,PRORROGAS = ?,MODO = ?,CODIGO_ACEPTACION = ?,JUSTIFICAICON_ANULACION = ?,RESOLICION_TUTELA = ?,JUSTIFICAICON_NOFAVORABLE = ?,UORGO_ID = ?,VALOR_TOTAL = ?,VALOR_UNITARIO = ?,CANTIDAD = ?,ORIGEN = ?,FECHA_SOLICITUD = ?,TIPO_SOLICITUD = ?,ESTREGISTRO_ID = ?,UORG_REGISTRA_ID = ?,OBSERVACIONAUT = ?,DRELACIONADO1 = ?,DRELACIONADO2 = ?,DRELACIONADO3 = ?,DESCRIPCION1 = ?,DESCRIPCION2 = ?,DESCRIPCION3 = ?,EDAD = ?,DIGITADOR = ?,PARENTESCO_ID = ?,ESPCSOLICITA = ?,PROCESOSASISTENCIALES_ID = ?,UBICACION_PACIENTE = ?,CAUTORIZACION = ?,CSOLICITUD = ?,PYP_SIGLA = ?,RESOLUCION_TUTELAS = ?,PRESPONSABLE = ?,OBSERVACIONES = ?,TIEMPOS_ID = ?,OBSERVACIONES_AUTORIZACION = ?,FECHA_AUTORIZACION = ?,AUTORIZADOR = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmtUpdate_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(update_tOracleOutput_1);
                resourceMap.put("pstmtUpdate_tOracleOutput_1", pstmtUpdate_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
SALIDAStruct SALIDA_tmp = new SALIDAStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"AUTORIZACIONES_OUT");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
					globalMap.get( "tHash_Lookup_row6" ))
					;					
					
	

row6Struct row6HashKey = new row6Struct();
row6Struct row6Default = new row6Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
					globalMap.get( "tHash_Lookup_row7" ))
					;					
					
	

row7Struct row7HashKey = new row7Struct();
row7Struct row7Default = new row7Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
AUTORIZACIONES_OUTStruct AUTORIZACIONES_OUT_tmp = new AUTORIZACIONES_OUTStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				conn_tOracleInput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_2 = false;
				boolean isConnectionWrapped_tOracleInput_2 = !(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_2 = null;
                if (isConnectionWrapped_tOracleInput_2) {
					unwrappedOraConn_tOracleInput_2 = conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_2 != null) {
                        isTimeZoneNull_tOracleInput_2 = (unwrappedOraConn_tOracleInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_2 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_2) {
					java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_2.next()) {
						sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_2 && unwrappedOraConn_tOracleInput_2 != null) {
                        unwrappedOraConn_tOracleInput_2.setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_2.setFetchSize(1000);


		    String dbquery_tOracleInput_2 = "SELECT \n  rc.id AS ID,\n  RI.UORG_REGISTRA_ID AS UORG_REGISTRA_ID,\n  ri.UORG_ID AS UORGO_ID,\n  rc.UORG_ID AS UORGE_I"
+"D,\n  rc.CUPS_ID AS CUPS_ID,\n  ri.PACIENTE AS PACIENTE_ID,\n  ri.PARENTESCOS_ID AS PARENTESCO_ID,\n  USUD.PERSONAS_ID A"
+"S DIGITADOR,\n  DIAG.CIE10_ID AS DIAGNOSTICOS_ID,\n  CASE \n    WHEN REFE.ESPSOLICITA  IS NOT NULL THEN REFE.ESPSOLICITA"
+"\n    ELSE SS.ESPSOLICITA\n  END	AS ESPCSOLICITA,\n  rc.ESPECIALIDADES_ID AS ESPECIALIDADES_ID,\n  ri.PROFESIONAL_ID,\n "
+" HP.ID AS PROCESOSASISTENCIALES_ID,\n  USU.PERSONAS_ID AS NOMBRE_AUTORIZA,\n  CASE \n  WHEN TF.SIGLA = 'URG' THEN 'Urgen"
+"cias'\n  ELSE  gs_ub.nombre  END AS UBICACION_PACIENTE,\n  ra.AMBULANCIA,\n  ra.CONSECUTIVO AS CAUTORIZACION,\n  ri.CONS"
+"ECUTIVO AS CSOLICITUD,\n  TFOR.NOMBRE AS TIPO_SOLICITUD,\n  ORIGEN.NOMBRE AS ORIGEN,\n  TRUNC(MONTHS_BETWEEN(RI.FECHA ,G"
+"P.FECHA_NACIMIENTO)/12) AS EDAD,\n  PYP.SIGLA AS PYP_SIGLA,\n  ri.FECHA AS FECHA_SOLI,\n  TO_NUMBER(TO_CHAR( ri.FECHA,'D"
+"DMMYYYY')) AS ID_TIEMPOS,\n  ra.FECHA AS FECHA_AUTORIZACION,\n  TO_NUMBER(TO_CHAR( ra.FECHA,'DDMMYYYY')) AS ID_TIEMPOA,"
+"\n  ra.FECHA_ACTA AS FECHA_TUTELA,\n  ra.VENCIMIENTO,\n  CASE \n  WHEN rc.AUTORIZACION_ID IS NOT NULL  THEN EST.NOMBRE\n "
+" WHEN ESTA.NOMBRE  IS NULL THEN 'FASE I'\n  ELSE ESTA.NOMBRE END AS ESTADO,\n  ra.NUMERO_ACTA,\n  rt.NOMBRE AS CLASIFICA"
+"CION,\n  ra.PRORROGAS,\n  ra.MODO,\n  ra.CODIGO_ACEPTACION,\n  ra.RESOLUCION_TUTELA,\n  ra.JUSTIFICACION_NOFAVORABLE,\n "
+" ra.JUSTIFICACION_ANULACION,\n  ri.PRESPONSABLE,\n  RELACIONADOS.UNO as DIAGR_1 ,\n  RELACIONADOS.DOS AS DIAGR_2,\n  REL"
+"ACIONADOS.TRES as DIAGR_3, \n  rc.CANTIDAD,\n  rc.VALOR_UNITARIO,\n  rc.VALOR_TOTAL,\n  rc.OBSERVACIONESAUT,\n  RC.OBSER"
+"VACIONES AS OBSERVACIONES,\n  ri.OBSERVACION AS ONSERVACION,\n  RA.OBSERVACIONES AS OBSERVACIONES_AUTORIZACION,\n  RC.ES"
+"TREGISTRO_ID AS ESTREGISTRO_ID\nFROM RCA_CUPSOLICITADOS rc\nINNER JOIN RCA_INFGENERAL ri ON (rc.INFGENERAL_ID = ri.ID) A"
+"ND ri.estregistro_id = 1\nINNER JOIN RCA_TFORMATOS TF ON TF.ID = ri.TFORMATOS_ID \nLEFT JOIN RCA_AUTORIZACION ra ON (rc."
+"AUTORIZACION_ID = ra.ID)  AND ra.estregistro_id = 1  \nLEFT JOIN RCA_ESTSOLICITUDES ESTA ON ESTA.ID = RC.ESTSOLICITUDES_"
+"ID\nLEFT JOIN RCA_ESTAUTORIZACIONES EST ON EST.ID = ra.ESTAUTORIZACIONES_ID \nLEFT JOIN RCA_SSERVICIOS SS ON SS.INFGENER"
+"AL_ID = ri.ID\nLEFT JOIN RCA_REFERENCIA REFE ON REFE.INFGENERAL_ID = ri.ID AND REFE.ESTREGISTRO_ID = 1\nLEFT JOIN GEN_SE"
+"RVICIOS gs_ub ON gs_ub.ID = nvl(SS.SERVICIOS_ID,refe.SERVICIOS_ID)\nINNER JOIN GEN_USUARIOS USUD ON USUD.ID = RI.USUARIO"
+"S_ID\nLEFT JOIN RCA_TORIGEN ORIGEN ON ORIGEN.ID = ri.TORIGEN_ID AND ORIGEN.ESTREGISTRO_ID = 1\nINNER JOIN RCA_TFORMATOS "
+"TFOR ON TFOR.ID = ri.TFORMATOS_ID AND TFOR.ESTREGISTRO_ID = 1\nLEFT JOIN HCL_PROCESOSASISTENCIALES HP ON HP.ID = RI.PROC"
+"ESOSASISTENCIALES_ID\nLEFT JOIN HCL_VALORACIONES VAL ON VAL.PROCESOSASISTENCIALES_ID = HP.ID\nLEFT JOIN GEN_PYP PYP ON P"
+"YP.ID = VAL.PYP_ID\nLEFT JOIN  HCL_DIAGNOSTICOS DIAG ON DIAG.PROCESOSASISTENCIALES_ID = HP.ID\nLEFT JOIN (\n            "
+"      SELECT * FROM (SELECT RELA.CIE10,NUM.NUMERO AS NUMERO_123,RELA.DIAGNOSTICOS_ID FROM (\n                  SELECT \n"
+"                  ROW_NUMBER()OVER (PARTITION BY DIAG.ID_DI ORDER BY DIAG.ID_DI) AS NUMERO ,\n                  DIAG.ID_"
+"DI AS DIAGNOSTICOS_ID,\n                  CIE.CODIGO||'##'||CIE.DESCRIPCION AS CIE10\n                  FROM (SELECT \n "
+"                       DI.ID AS ID_DI\n                        FROM  HCL_DIAGNOSTICOS DI \n                         ) DI"
+"AG\n                  INNER JOIN HCL_DIAGRELACIONADOS RE ON RE.DIAGNOSTICOS_ID = DIAG.ID_DI\n                  INNER JOI"
+"N GEN_CIE10 CIE ON CIE.ID = RE.CIE10_ID\n                  ) RELA\n                  \n                  RIGHT JOIN (SEL"
+"ECT '1' AS NUMERO FROM DUAL\n                              UNION\n                              SELECT '2' AS NUMERO FRO"
+"M DUAL\n                              UNION \n                              SELECT '3' AS NUMERO FROM DUAL \n           "
+"                   ) NUM ON NUM.NUMERO = RELA.NUMERO\n                                    ) \n                  PIVOT \n"
+"                  (\n                    MIN(CIE10)\n                    FOR NUMERO_123\n                    IN ( '1' UN"
+"O, '2' DOS,'3' TRES) \n                  )) RELACIONADOS ON RELACIONADOS.DIAGNOSTICOS_ID = DIAG.ID\nINNER JOIN GEN_PERSO"
+"NAS gp ON (ri.PACIENTE = gp.ID)\nINNER JOIN GEN_CUPS gc ON (rc.CUPS_ID = gc.ID)\nLEFT JOIN GEN_USUARIOS USU ON USU.ID = "
+"ra.USUARIOS_ID AND USU.ESTREGISTRO_ID = 1\nLEFT JOIN RCA_TCLASIFICACIONES rt ON (ra.TCLASIFICACIONES_ID = rt.ID)\nINNER "
+"JOIN GEN_UORG gu ON (rc.UORG_ID = gu.ID)\nLEFT JOIN RCA_ESTSOLICITUDES REA ON REA.ID = rc.ESTSOLICITUDES_ID\nWHERE rc.es"
+"tregistro_id = 1 "+ context.CONDICION_AUTORIZACIONES +"";
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row2.ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(1) != null) {
						row2.ID = rs_tOracleInput_2.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row2.UORG_REGISTRA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(2) != null) {
						row2.UORG_REGISTRA_ID = rs_tOracleInput_2.getBigDecimal(2);
					} else {
				
						row2.UORG_REGISTRA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 3) {
								row2.UORGO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(3) != null) {
						row2.UORGO_ID = rs_tOracleInput_2.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 4) {
								row2.UORGE_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(4) != null) {
						row2.UORGE_ID = rs_tOracleInput_2.getBigDecimal(4);
					} else {
				
						row2.UORGE_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 5) {
								row2.CUPS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(5) != null) {
						row2.CUPS_ID = rs_tOracleInput_2.getBigDecimal(5);
					} else {
				
						row2.CUPS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 6) {
								row2.PACIENTE_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(6) != null) {
						row2.PACIENTE_ID = rs_tOracleInput_2.getBigDecimal(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 7) {
								row2.PARENTESCO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(7) != null) {
						row2.PARENTESCO_ID = rs_tOracleInput_2.getBigDecimal(7);
					} else {
				
						row2.PARENTESCO_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 8) {
								row2.DIGITADOR = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(8) != null) {
						row2.DIGITADOR = rs_tOracleInput_2.getBigDecimal(8);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 9) {
								row2.DIAGNOSTICOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(9) != null) {
						row2.DIAGNOSTICOS_ID = rs_tOracleInput_2.getBigDecimal(9);
					} else {
				
						row2.DIAGNOSTICOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 10) {
								row2.ESPCSOLICITA = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(10) != null) {
						row2.ESPCSOLICITA = rs_tOracleInput_2.getBigDecimal(10);
					} else {
				
						row2.ESPCSOLICITA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 11) {
								row2.ESPECIALIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(11) != null) {
						row2.ESPECIALIDADES_ID = rs_tOracleInput_2.getBigDecimal(11);
					} else {
				
						row2.ESPECIALIDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 12) {
								row2.PROFESIONAL_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(12) != null) {
						row2.PROFESIONAL_ID = rs_tOracleInput_2.getBigDecimal(12);
					} else {
				
						row2.PROFESIONAL_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 13) {
								row2.PROCESOSASISTENCIALES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(13) != null) {
						row2.PROCESOSASISTENCIALES_ID = rs_tOracleInput_2.getBigDecimal(13);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 14) {
								row2.NOMBRE_AUTORIZA = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(14) != null) {
						row2.NOMBRE_AUTORIZA = rs_tOracleInput_2.getBigDecimal(14);
					} else {
				
						row2.NOMBRE_AUTORIZA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 15) {
								row2.UBICACION_PACIENTE = null;
							} else {
	                         		
        	row2.UBICACION_PACIENTE = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 15, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 16) {
								row2.AMBULANCIA = null;
							} else {
	                         		
        	row2.AMBULANCIA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 16, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 17) {
								row2.CAUTORIZACION = null;
							} else {
	                         		
        	row2.CAUTORIZACION = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 17, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 18) {
								row2.CSOLICITUD = null;
							} else {
	                         		
        	row2.CSOLICITUD = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 18, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 19) {
								row2.TIPO_SOLICITUD = null;
							} else {
	                         		
        	row2.TIPO_SOLICITUD = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 19, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 20) {
								row2.ORIGEN = null;
							} else {
	                         		
        	row2.ORIGEN = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 20, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 21) {
								row2.EDAD = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(21) != null) {
						row2.EDAD = rs_tOracleInput_2.getBigDecimal(21);
					} else {
				
						row2.EDAD = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 22) {
								row2.PYP_SIGLA = null;
							} else {
	                         		
        	row2.PYP_SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 22, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 23) {
								row2.FECHA_SOLI = null;
							} else {
										
			row2.FECHA_SOLI = routines.system.JDBCUtil.getDate(rs_tOracleInput_2, 23);
		                    }
							if(colQtyInRs_tOracleInput_2 < 24) {
								row2.ID_TIEMPOS = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(24) != null) {
						row2.ID_TIEMPOS = rs_tOracleInput_2.getBigDecimal(24);
					} else {
				
						row2.ID_TIEMPOS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 25) {
								row2.FECHA_AUTORIZACION = null;
							} else {
										
			row2.FECHA_AUTORIZACION = routines.system.JDBCUtil.getDate(rs_tOracleInput_2, 25);
		                    }
							if(colQtyInRs_tOracleInput_2 < 26) {
								row2.ID_TIEMPOA = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(26) != null) {
						row2.ID_TIEMPOA = rs_tOracleInput_2.getBigDecimal(26);
					} else {
				
						row2.ID_TIEMPOA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 27) {
								row2.FECHA_TUTELA = null;
							} else {
										
			row2.FECHA_TUTELA = routines.system.JDBCUtil.getDate(rs_tOracleInput_2, 27);
		                    }
							if(colQtyInRs_tOracleInput_2 < 28) {
								row2.VENCIMIENTO = null;
							} else {
										
			row2.VENCIMIENTO = routines.system.JDBCUtil.getDate(rs_tOracleInput_2, 28);
		                    }
							if(colQtyInRs_tOracleInput_2 < 29) {
								row2.ESTADO = null;
							} else {
	                         		
        	row2.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 29, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 30) {
								row2.NUMERO_ACTA = null;
							} else {
	                         		
        	row2.NUMERO_ACTA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 30, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 31) {
								row2.CLASIFICACION = null;
							} else {
	                         		
        	row2.CLASIFICACION = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 31, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 32) {
								row2.PRORROGAS = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(32) != null) {
						row2.PRORROGAS = rs_tOracleInput_2.getBigDecimal(32);
					} else {
				
						row2.PRORROGAS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 33) {
								row2.MODO = null;
							} else {
	                         		
        	row2.MODO = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 33, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 34) {
								row2.CODIGO_ACEPTACION = null;
							} else {
	                         		
        	row2.CODIGO_ACEPTACION = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 34, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 35) {
								row2.RESOLUCION_TUTELA = null;
							} else {
	                         		
        	row2.RESOLUCION_TUTELA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 35, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 36) {
								row2.JUSTIFICACION_NOFAVORABLE = null;
							} else {
	                         		
        	row2.JUSTIFICACION_NOFAVORABLE = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 36, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 37) {
								row2.JUSTIFICACION_ANULACION = null;
							} else {
	                         		
        	row2.JUSTIFICACION_ANULACION = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 37, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 38) {
								row2.PRESPONSABLE = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(38) != null) {
						row2.PRESPONSABLE = rs_tOracleInput_2.getBigDecimal(38);
					} else {
				
						row2.PRESPONSABLE = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 39) {
								row2.DIAGR_1 = null;
							} else {
	                         		
        	row2.DIAGR_1 = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 39, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 40) {
								row2.DIAGR_2 = null;
							} else {
	                         		
        	row2.DIAGR_2 = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 40, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 41) {
								row2.DIAGR_3 = null;
							} else {
	                         		
        	row2.DIAGR_3 = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 41, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 42) {
								row2.CANTIDAD = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(42) != null) {
						row2.CANTIDAD = rs_tOracleInput_2.getBigDecimal(42);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 43) {
								row2.VALOR_UNITARIO = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(43) != null) {
						row2.VALOR_UNITARIO = rs_tOracleInput_2.getBigDecimal(43);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 44) {
								row2.VALOR_TOTAL = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(44) != null) {
						row2.VALOR_TOTAL = rs_tOracleInput_2.getBigDecimal(44);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 45) {
								row2.OBSERVACIONESAUT = null;
							} else {
	                         		
        	row2.OBSERVACIONESAUT = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 45, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 46) {
								row2.OBSERVACIONES = null;
							} else {
	                         		
        	row2.OBSERVACIONES = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 46, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 47) {
								row2.ONSERVACION = null;
							} else {
	                         		
        	row2.ONSERVACION = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 47, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 48) {
								row2.OBSERVACIONES_AUTORIZACION = null;
							} else {
	                         		
        	row2.OBSERVACIONES_AUTORIZACION = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 48, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 49) {
								row2.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(49) != null) {
						row2.ESTREGISTRO_ID = rs_tOracleInput_2.getBigDecimal(49);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
						row6Struct row6 = null;
					
						row7Struct row7 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row6" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow6 = false;
       		  	    	
       		  	    	
 							row6Struct row6ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row6HashKey.IDENTIFICADOR = row2.ID_TIEMPOS ;
                        		    		

								
		                        	row6HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row6.lookup( row6HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row6 != null && tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6' and it contains more one result from keys :  row6.IDENTIFICADOR = '" + row6HashKey.IDENTIFICADOR + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row6Struct fromLookup_row6 = null;
							row6 = row6Default;
										 
							
								 
							
							
								if (tHash_Lookup_row6 !=null && tHash_Lookup_row6.hasNext()) { // G 099
								
							
								
								fromLookup_row6 = tHash_Lookup_row6.next();

							
							
								} // G 099
							
							

							if(fromLookup_row6 != null) {
								row6 = fromLookup_row6;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row7" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow7 = false;
       		  	    	
       		  	    	
 							row7Struct row7ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row7HashKey.IDENTIFICADOR = row2.ID_TIEMPOA ;
                        		    		

								
		                        	row7HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row7.lookup( row7HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row7 != null && tHash_Lookup_row7.getCount(row7HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7' and it contains more one result from keys :  row7.IDENTIFICADOR = '" + row7HashKey.IDENTIFICADOR + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row7Struct fromLookup_row7 = null;
							row7 = row7Default;
										 
							
								 
							
							
								if (tHash_Lookup_row7 !=null && tHash_Lookup_row7.hasNext()) { // G 099
								
							
								
								fromLookup_row7 = tHash_Lookup_row7.next();

							
							
								} // G 099
							
							

							if(fromLookup_row7 != null) {
								row7 = fromLookup_row7;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

AUTORIZACIONES_OUT = null;


// # Output table : 'AUTORIZACIONES_OUT'
AUTORIZACIONES_OUT_tmp.ID = row2.ID ;
AUTORIZACIONES_OUT_tmp.UORG_REGISTRA_ID = row2.UORG_REGISTRA_ID ;
AUTORIZACIONES_OUT_tmp.UORGO_ID = row2.UORGO_ID ;
AUTORIZACIONES_OUT_tmp.UORGE_ID = row2.UORGE_ID ;
AUTORIZACIONES_OUT_tmp.CUPS_ID = row2.CUPS_ID ;
AUTORIZACIONES_OUT_tmp.PACIENTE_ID = row2.PACIENTE_ID ;
AUTORIZACIONES_OUT_tmp.PARENTESCO_ID = row2.PARENTESCO_ID ;
AUTORIZACIONES_OUT_tmp.DIGITADOR = row2.DIGITADOR ;
AUTORIZACIONES_OUT_tmp.DIAGNOSTICOS_ID = row2.DIAGNOSTICOS_ID ;
AUTORIZACIONES_OUT_tmp.ESPCSOLICITA = row2.ESPCSOLICITA ;
AUTORIZACIONES_OUT_tmp.ESPECIALIDADES_ID = row2.ESPECIALIDADES_ID ;
AUTORIZACIONES_OUT_tmp.PROFESIONAL_ID = row2.PROFESIONAL_ID ;
AUTORIZACIONES_OUT_tmp.PROCESOSASISTENCIALES_ID = row2.PROCESOSASISTENCIALES_ID ;
AUTORIZACIONES_OUT_tmp.NOMBRE_AUTORIZA = row2.NOMBRE_AUTORIZA ;
AUTORIZACIONES_OUT_tmp.UBICACION_PACIENTE = row2.UBICACION_PACIENTE ;
AUTORIZACIONES_OUT_tmp.AMBULANCIA = row2.AMBULANCIA ;
AUTORIZACIONES_OUT_tmp.CAUTORIZACION = row2.CAUTORIZACION ;
AUTORIZACIONES_OUT_tmp.CSOLICITUD = row2.CSOLICITUD ;
AUTORIZACIONES_OUT_tmp.TIPO_SOLICITUD = row2.TIPO_SOLICITUD ;
AUTORIZACIONES_OUT_tmp.ORIGEN = row2.ORIGEN ;
AUTORIZACIONES_OUT_tmp.EDAD = row2.EDAD ;
AUTORIZACIONES_OUT_tmp.PYP_SIGLA = row2.PYP_SIGLA ;
AUTORIZACIONES_OUT_tmp.FECHA_SOLI = row2.FECHA_SOLI ;
AUTORIZACIONES_OUT_tmp.FECHA_AUTORIZACION = row2.FECHA_AUTORIZACION ;
AUTORIZACIONES_OUT_tmp.FECHA_TUTELA = row2.FECHA_TUTELA ;
AUTORIZACIONES_OUT_tmp.VENCIMIENTO = row2.VENCIMIENTO ;
AUTORIZACIONES_OUT_tmp.ESTADO = row2.ESTADO ;
AUTORIZACIONES_OUT_tmp.NUMERO_ACTA = row2.NUMERO_ACTA ;
AUTORIZACIONES_OUT_tmp.CLASIFICACION = row2.CLASIFICACION ;
AUTORIZACIONES_OUT_tmp.PRORROGAS = row2.PRORROGAS ;
AUTORIZACIONES_OUT_tmp.MODO = row2.MODO ;
AUTORIZACIONES_OUT_tmp.CODIGO_ACEPTACION = row2.CODIGO_ACEPTACION ;
AUTORIZACIONES_OUT_tmp.RESOLUCION_TUTELA = row2.RESOLUCION_TUTELA ;
AUTORIZACIONES_OUT_tmp.JUSTIFICACION_NOFAVORABLE = row2.JUSTIFICACION_NOFAVORABLE ;
AUTORIZACIONES_OUT_tmp.JUSTIFICACION_ANULACION = row2.JUSTIFICACION_ANULACION ;
AUTORIZACIONES_OUT_tmp.PRESPONSABLE = row2.PRESPONSABLE ;
AUTORIZACIONES_OUT_tmp.DIAGR_1 = row2.DIAGR_1 ;
AUTORIZACIONES_OUT_tmp.DIAGR_2 = row2.DIAGR_2 ;
AUTORIZACIONES_OUT_tmp.DIAGR_3 = row2.DIAGR_3 ;
AUTORIZACIONES_OUT_tmp.CANTIDAD = row2.CANTIDAD ;
AUTORIZACIONES_OUT_tmp.VALOR_UNITARIO = row2.VALOR_UNITARIO ;
AUTORIZACIONES_OUT_tmp.VALOR_TOTAL = row2.VALOR_TOTAL ;
AUTORIZACIONES_OUT_tmp.OBSERVACIONESAUT = row2.OBSERVACIONESAUT ;
AUTORIZACIONES_OUT_tmp.OBSERVACIONES = row2.OBSERVACIONES ;
AUTORIZACIONES_OUT_tmp.ONSERVACION = row2.ONSERVACION ;
AUTORIZACIONES_OUT_tmp.OBSERVACIONES_AUTORIZACION = row2.OBSERVACIONES_AUTORIZACION ;
AUTORIZACIONES_OUT_tmp.ESTREGISTRO_ID = row2.ESTREGISTRO_ID ;
AUTORIZACIONES_OUT_tmp.TIEMPOS_ID = row6.ID ;
AUTORIZACIONES_OUT_tmp.DIAGR_1_DESCCRIPCION = null;
AUTORIZACIONES_OUT_tmp.DIAGR_2_DESCCRIPCION = null;
AUTORIZACIONES_OUT_tmp.DIAGR_3_DESCCRIPCION = null;
AUTORIZACIONES_OUT_tmp.TIEMPOA_ID = row7.ID ;
AUTORIZACIONES_OUT = AUTORIZACIONES_OUT_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "AUTORIZACIONES_OUT"
if(AUTORIZACIONES_OUT != null) { 



	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"AUTORIZACIONES_OUT"
						
						);
					}
					

    //Code generate according to input schema and output schema
row1.ID = AUTORIZACIONES_OUT.ID;
row1.UORG_REGISTRA_ID = AUTORIZACIONES_OUT.UORG_REGISTRA_ID;
row1.UORGO_ID = AUTORIZACIONES_OUT.UORGO_ID;
row1.UORGE_ID = AUTORIZACIONES_OUT.UORGE_ID;
row1.CUPS_ID = AUTORIZACIONES_OUT.CUPS_ID;
row1.PACIENTE_ID = AUTORIZACIONES_OUT.PACIENTE_ID;
row1.PARENTESCO_ID = AUTORIZACIONES_OUT.PARENTESCO_ID;
row1.DIGITADOR = AUTORIZACIONES_OUT.DIGITADOR;
row1.DIAGNOSTICOS_ID = AUTORIZACIONES_OUT.DIAGNOSTICOS_ID;
row1.ESPCSOLICITA = AUTORIZACIONES_OUT.ESPCSOLICITA;
row1.ESPECIALIDADES_ID = AUTORIZACIONES_OUT.ESPECIALIDADES_ID;
row1.PROFESIONAL_ID = AUTORIZACIONES_OUT.PROFESIONAL_ID;
row1.PROCESOSASISTENCIALES_ID = AUTORIZACIONES_OUT.PROCESOSASISTENCIALES_ID;
row1.NOMBRE_AUTORIZA = AUTORIZACIONES_OUT.NOMBRE_AUTORIZA;
row1.UBICACION_PACIENTE = AUTORIZACIONES_OUT.UBICACION_PACIENTE;
row1.AMBULANCIA = AUTORIZACIONES_OUT.AMBULANCIA;
row1.CAUTORIZACION = AUTORIZACIONES_OUT.CAUTORIZACION;
row1.CSOLICITUD = AUTORIZACIONES_OUT.CSOLICITUD;
row1.TIPO_SOLICITUD = AUTORIZACIONES_OUT.TIPO_SOLICITUD;
row1.ORIGEN = AUTORIZACIONES_OUT.ORIGEN;
row1.EDAD = AUTORIZACIONES_OUT.EDAD;
row1.PYP_SIGLA = AUTORIZACIONES_OUT.PYP_SIGLA;
row1.FECHA_SOLI = AUTORIZACIONES_OUT.FECHA_SOLI;
row1.FECHA_AUTORIZACION = AUTORIZACIONES_OUT.FECHA_AUTORIZACION;
row1.FECHA_TUTELA = AUTORIZACIONES_OUT.FECHA_TUTELA;
row1.VENCIMIENTO = AUTORIZACIONES_OUT.VENCIMIENTO;
row1.ESTADO = AUTORIZACIONES_OUT.ESTADO;
row1.NUMERO_ACTA = AUTORIZACIONES_OUT.NUMERO_ACTA;
row1.CLASIFICACION = AUTORIZACIONES_OUT.CLASIFICACION;
row1.PRORROGAS = AUTORIZACIONES_OUT.PRORROGAS;
row1.MODO = AUTORIZACIONES_OUT.MODO;
row1.CODIGO_ACEPTACION = AUTORIZACIONES_OUT.CODIGO_ACEPTACION;
row1.RESOLUCION_TUTELA = AUTORIZACIONES_OUT.RESOLUCION_TUTELA;
row1.JUSTIFICACION_NOFAVORABLE = AUTORIZACIONES_OUT.JUSTIFICACION_NOFAVORABLE;
row1.JUSTIFICACION_ANULACION = AUTORIZACIONES_OUT.JUSTIFICACION_ANULACION;
row1.PRESPONSABLE = AUTORIZACIONES_OUT.PRESPONSABLE;
row1.DIAGR_1 = AUTORIZACIONES_OUT.DIAGR_1;
row1.DIAGR_2 = AUTORIZACIONES_OUT.DIAGR_2;
row1.DIAGR_3 = AUTORIZACIONES_OUT.DIAGR_3;
row1.CANTIDAD = AUTORIZACIONES_OUT.CANTIDAD;
row1.VALOR_UNITARIO = AUTORIZACIONES_OUT.VALOR_UNITARIO;
row1.VALOR_TOTAL = AUTORIZACIONES_OUT.VALOR_TOTAL;
row1.OBSERVACIONESAUT = AUTORIZACIONES_OUT.OBSERVACIONESAUT;
row1.OBSERVACIONES = AUTORIZACIONES_OUT.OBSERVACIONES;
row1.ONSERVACION = AUTORIZACIONES_OUT.ONSERVACION;
row1.OBSERVACIONES_AUTORIZACION = AUTORIZACIONES_OUT.OBSERVACIONES_AUTORIZACION;
row1.ESTREGISTRO_ID = AUTORIZACIONES_OUT.ESTREGISTRO_ID;
row1.TIEMPOS_ID = AUTORIZACIONES_OUT.TIEMPOS_ID;
row1.DIAGR_1_DESCCRIPCION = AUTORIZACIONES_OUT.DIAGR_1_DESCCRIPCION;
row1.DIAGR_2_DESCCRIPCION = AUTORIZACIONES_OUT.DIAGR_2_DESCCRIPCION;
row1.DIAGR_3_DESCCRIPCION = AUTORIZACIONES_OUT.DIAGR_3_DESCCRIPCION;
row1.TIEMPOA_ID = AUTORIZACIONES_OUT.TIEMPOA_ID;



if(Utils.empty(AUTORIZACIONES_OUT.DIAGR_1) == false) {

  String[] diag_1 = AUTORIZACIONES_OUT.DIAGR_1.split("##");
  row1.DIAGR_1 = diag_1[0];
  row1.DIAGR_1_DESCCRIPCION = diag_1[1]; 
  
//  System.out.println(AUTORIZACIONES_OUT.DIAGR_1);
}

if(Utils.empty(AUTORIZACIONES_OUT.DIAGR_2) == false) {

  String[] diag_2 = AUTORIZACIONES_OUT.DIAGR_2.split("##");
  row1.DIAGR_2 = diag_2[0];
  row1.DIAGR_2_DESCCRIPCION =diag_2[1];
  
//  System.out.println(AUTORIZACIONES_OUT.DIAGR_2);
}

if(Utils.empty(AUTORIZACIONES_OUT.DIAGR_3) == false) {

  String[] diag_3 = AUTORIZACIONES_OUT.DIAGR_3.split("##");
  row1.DIAGR_3 = diag_3[0];
  row1.DIAGR_3_DESCCRIPCION = diag_3[1];
  
//  System.out.println(AUTORIZACIONES_OUT.DIAGR_3);
}

    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

SALIDA = null;


// # Output table : 'SALIDA'
SALIDA_tmp.ID = row1.ID ;
SALIDA_tmp.UORGE_ID = row1.UORGE_ID ;
SALIDA_tmp.PACIENTE_ID = row1.PACIENTE_ID ;
SALIDA_tmp.DIAGNOSTICOS_ID = row1.DIAGNOSTICOS_ID ;
SALIDA_tmp.ESPECIALIDADES_ID = row1.ESPECIALIDADES_ID ;
SALIDA_tmp.CUPS_ID = row1.CUPS_ID ;
SALIDA_tmp.PROFESIONAL_ID = row1.PROFESIONAL_ID ;
SALIDA_tmp.TIEMPOA_ID = row1.TIEMPOA_ID ;
SALIDA_tmp.ESTADO = row1.ESTADO ;
SALIDA_tmp.CLASIFICACION = row1.CLASIFICACION ;
SALIDA_tmp.FECHA_TUTELA = row1.FECHA_TUTELA ;
SALIDA_tmp.NUMERO_ACTA = row1.NUMERO_ACTA ;
SALIDA_tmp.OBSERVACION = row1.ONSERVACION ;
SALIDA_tmp.NOMBRE_AUTORIZA = row1.NOMBRE_AUTORIZA ;
SALIDA_tmp.AMBULANCIA = row1.AMBULANCIA ;
SALIDA_tmp.VENCIMIENTO = row1.VENCIMIENTO ;
SALIDA_tmp.PRORROGAS = row1.PRORROGAS ;
SALIDA_tmp.MODO = row1.MODO ;
SALIDA_tmp.CODIGO_ACEPTACION = row1.CODIGO_ACEPTACION ;
SALIDA_tmp.JUSTIFICAICON_ANULACION = row1.JUSTIFICACION_ANULACION ;
SALIDA_tmp.RESOLICION_TUTELA = row1.RESOLUCION_TUTELA ;
SALIDA_tmp.JUSTIFICAICON_NOFAVORABLE = row1.JUSTIFICACION_NOFAVORABLE ;
SALIDA_tmp.UORGO_ID = row1.UORGO_ID ;
SALIDA_tmp.VALOR_TOTAL = row1.VALOR_TOTAL ;
SALIDA_tmp.VALOR_UNITARIO = row1.VALOR_UNITARIO ;
SALIDA_tmp.CANTIDAD = row1.CANTIDAD ;
SALIDA_tmp.ORIGEN = row1.ORIGEN ;
SALIDA_tmp.FECHA_SOLICITUD = row1.FECHA_SOLI ;
SALIDA_tmp.TIPO_SOLICITUD = row1.TIPO_SOLICITUD ;
SALIDA_tmp.ESTREGISTRO_ID = row1.ESTREGISTRO_ID ;
SALIDA_tmp.UORG_REGISTRA_ID = row1.UORG_REGISTRA_ID ;
SALIDA_tmp.OBSERVACIONAUT = row1.OBSERVACIONESAUT ;
SALIDA_tmp.DRELACIONADO1 = row1.DIAGR_1 ;
SALIDA_tmp.DRELACIONADO2 = row1.DIAGR_2 ;
SALIDA_tmp.DRELACIONADO3 = row1.DIAGR_3 ;
SALIDA_tmp.DESCRIPCION1 = row1.DIAGR_1_DESCCRIPCION ;
SALIDA_tmp.DESCRIPCION2 = row1.DIAGR_2_DESCCRIPCION ;
SALIDA_tmp.DESCRIPCION3 = row1.DIAGR_3_DESCCRIPCION ;
SALIDA_tmp.EDAD = row1.EDAD ;
SALIDA_tmp.DIGITADOR = row1.DIGITADOR ;
SALIDA_tmp.PARENTESCO_ID = row1.PARENTESCO_ID ;
SALIDA_tmp.ESPCSOLICITA = row1.ESPCSOLICITA ;
SALIDA_tmp.PROCESOSASISTENCIALES_ID = row1.PROCESOSASISTENCIALES_ID ;
SALIDA_tmp.UBICACION_PACIENTE = row1.UBICACION_PACIENTE ;
SALIDA_tmp.CAUTORIZACION = row1.CAUTORIZACION ;
SALIDA_tmp.CSOLICITUD = row1.CSOLICITUD ;
SALIDA_tmp.PYP_SIGLA = row1.PYP_SIGLA ;
SALIDA_tmp.RESOLUCION_TUTELAS = row1.RESOLUCION_TUTELA ;
SALIDA_tmp.PRESPONSABLE = row1.PRESPONSABLE ;
SALIDA_tmp.OBSERVACIONES = row1.OBSERVACIONES ;
SALIDA_tmp.TIEMPOS_ID = row1.TIEMPOS_ID ;
SALIDA_tmp.OBSERVACIONES_AUTORIZACION = row1.OBSERVACIONES_AUTORIZACION ;
SALIDA_tmp.FECHA_AUTORIZACION = row1.FECHA_AUTORIZACION ;
SALIDA_tmp.AUTORIZADOR = null;
SALIDA = SALIDA_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "SALIDA"
if(SALIDA != null) { 



	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"SALIDA"
						
						);
					}
					



        whetherReject_tOracleOutput_1 = false;
                    pstmt_tOracleOutput_1.setBigDecimal(1, SALIDA.ID);

            int checkCount_tOracleOutput_1 = -1;
            try (java.sql.ResultSet rs_tOracleOutput_1 = pstmt_tOracleOutput_1.executeQuery()) {
                while(rs_tOracleOutput_1.next()) {
                    checkCount_tOracleOutput_1 = rs_tOracleOutput_1.getInt(1);
                }
            }
            if(checkCount_tOracleOutput_1 > 0) {
                        pstmtUpdate_tOracleOutput_1.setBigDecimal(1, SALIDA.UORGE_ID);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(2, SALIDA.PACIENTE_ID);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(3, SALIDA.DIAGNOSTICOS_ID);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(4, SALIDA.ESPECIALIDADES_ID);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(5, SALIDA.CUPS_ID);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(6, SALIDA.PROFESIONAL_ID);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(7, SALIDA.TIEMPOA_ID);

                        if(SALIDA.ESTADO == null) {
pstmtUpdate_tOracleOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(8, SALIDA.ESTADO);
}

                        if(SALIDA.CLASIFICACION == null) {
pstmtUpdate_tOracleOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(9, SALIDA.CLASIFICACION);
}

                        if(SALIDA.FECHA_TUTELA != null) {
pstmtUpdate_tOracleOutput_1.setTimestamp(10, new java.sql.Timestamp(SALIDA.FECHA_TUTELA.getTime()));
} else {
pstmtUpdate_tOracleOutput_1.setNull(10, java.sql.Types.DATE);
}

                        if(SALIDA.NUMERO_ACTA == null) {
pstmtUpdate_tOracleOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(11, SALIDA.NUMERO_ACTA);
}

                        if(SALIDA.OBSERVACION == null) {
pstmtUpdate_tOracleOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(12, SALIDA.OBSERVACION);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(13, SALIDA.NOMBRE_AUTORIZA);

                        if(SALIDA.AMBULANCIA == null) {
pstmtUpdate_tOracleOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(14, SALIDA.AMBULANCIA);
}

                        if(SALIDA.VENCIMIENTO != null) {
pstmtUpdate_tOracleOutput_1.setObject(15, new java.sql.Timestamp(SALIDA.VENCIMIENTO.getTime()),java.sql.Types.DATE);
} else {
pstmtUpdate_tOracleOutput_1.setNull(15, java.sql.Types.DATE);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(16, SALIDA.PRORROGAS);

                        if(SALIDA.MODO == null) {
pstmtUpdate_tOracleOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(17, SALIDA.MODO);
}

                        if(SALIDA.CODIGO_ACEPTACION == null) {
pstmtUpdate_tOracleOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(18, SALIDA.CODIGO_ACEPTACION);
}

                        if(SALIDA.JUSTIFICAICON_ANULACION == null) {
pstmtUpdate_tOracleOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(19, SALIDA.JUSTIFICAICON_ANULACION);
}

                        if(SALIDA.RESOLICION_TUTELA == null) {
pstmtUpdate_tOracleOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(20, SALIDA.RESOLICION_TUTELA);
}

                        if(SALIDA.JUSTIFICAICON_NOFAVORABLE == null) {
pstmtUpdate_tOracleOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(21, SALIDA.JUSTIFICAICON_NOFAVORABLE);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(22, SALIDA.UORGO_ID);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(23, SALIDA.VALOR_TOTAL);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(24, SALIDA.VALOR_UNITARIO);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(25, SALIDA.CANTIDAD);

                        if(SALIDA.ORIGEN == null) {
pstmtUpdate_tOracleOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(26, SALIDA.ORIGEN);
}

                        if(SALIDA.FECHA_SOLICITUD != null) {
pstmtUpdate_tOracleOutput_1.setObject(27, new java.sql.Timestamp(SALIDA.FECHA_SOLICITUD.getTime()),java.sql.Types.DATE);
} else {
pstmtUpdate_tOracleOutput_1.setNull(27, java.sql.Types.DATE);
}

                        if(SALIDA.TIPO_SOLICITUD == null) {
pstmtUpdate_tOracleOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(28, SALIDA.TIPO_SOLICITUD);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(29, SALIDA.ESTREGISTRO_ID);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(30, SALIDA.UORG_REGISTRA_ID);

                        if(SALIDA.OBSERVACIONAUT == null) {
pstmtUpdate_tOracleOutput_1.setNull(31, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(31, SALIDA.OBSERVACIONAUT);
}

                        if(SALIDA.DRELACIONADO1 == null) {
pstmtUpdate_tOracleOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(32, SALIDA.DRELACIONADO1);
}

                        if(SALIDA.DRELACIONADO2 == null) {
pstmtUpdate_tOracleOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(33, SALIDA.DRELACIONADO2);
}

                        if(SALIDA.DRELACIONADO3 == null) {
pstmtUpdate_tOracleOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(34, SALIDA.DRELACIONADO3);
}

                        if(SALIDA.DESCRIPCION1 == null) {
pstmtUpdate_tOracleOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(35, SALIDA.DESCRIPCION1);
}

                        if(SALIDA.DESCRIPCION2 == null) {
pstmtUpdate_tOracleOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(36, SALIDA.DESCRIPCION2);
}

                        if(SALIDA.DESCRIPCION3 == null) {
pstmtUpdate_tOracleOutput_1.setNull(37, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(37, SALIDA.DESCRIPCION3);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(38, SALIDA.EDAD);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(39, SALIDA.DIGITADOR);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(40, SALIDA.PARENTESCO_ID);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(41, SALIDA.ESPCSOLICITA);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(42, SALIDA.PROCESOSASISTENCIALES_ID);

                        if(SALIDA.UBICACION_PACIENTE == null) {
pstmtUpdate_tOracleOutput_1.setNull(43, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(43, SALIDA.UBICACION_PACIENTE);
}

                        if(SALIDA.CAUTORIZACION == null) {
pstmtUpdate_tOracleOutput_1.setNull(44, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(44, SALIDA.CAUTORIZACION);
}

                        if(SALIDA.CSOLICITUD == null) {
pstmtUpdate_tOracleOutput_1.setNull(45, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(45, SALIDA.CSOLICITUD);
}

                        if(SALIDA.PYP_SIGLA == null) {
pstmtUpdate_tOracleOutput_1.setNull(46, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(46, SALIDA.PYP_SIGLA);
}

                        if(SALIDA.RESOLUCION_TUTELAS == null) {
pstmtUpdate_tOracleOutput_1.setNull(47, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(47, SALIDA.RESOLUCION_TUTELAS);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(48, SALIDA.PRESPONSABLE);

                        if(SALIDA.OBSERVACIONES == null) {
pstmtUpdate_tOracleOutput_1.setNull(49, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(49, SALIDA.OBSERVACIONES);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(50, SALIDA.TIEMPOS_ID);

                        if(SALIDA.OBSERVACIONES_AUTORIZACION == null) {
pstmtUpdate_tOracleOutput_1.setNull(51, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(51, SALIDA.OBSERVACIONES_AUTORIZACION);
}

                        if(SALIDA.FECHA_AUTORIZACION != null) {
pstmtUpdate_tOracleOutput_1.setObject(52, new java.sql.Timestamp(SALIDA.FECHA_AUTORIZACION.getTime()),java.sql.Types.DATE);
} else {
pstmtUpdate_tOracleOutput_1.setNull(52, java.sql.Types.DATE);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(53, SALIDA.AUTORIZADOR);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(54 + count_tOracleOutput_1, SALIDA.ID);

                try {
                    int processedCount_tOracleOutput_1 = pstmtUpdate_tOracleOutput_1.executeUpdate();
                    updatedCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    rowsToCommitCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    nb_line_tOracleOutput_1++;
                } catch(java.lang.Exception e_tOracleOutput_1) {
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
                    whetherReject_tOracleOutput_1 = true;
                        nb_line_tOracleOutput_1++;
                            System.err.print(e_tOracleOutput_1.getMessage());
                }
            } else {
                        pstmtInsert_tOracleOutput_1.setBigDecimal(1, SALIDA.ID);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(2, SALIDA.UORGE_ID);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(3, SALIDA.PACIENTE_ID);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(4, SALIDA.DIAGNOSTICOS_ID);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(5, SALIDA.ESPECIALIDADES_ID);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(6, SALIDA.CUPS_ID);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(7, SALIDA.PROFESIONAL_ID);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(8, SALIDA.TIEMPOA_ID);

                        if(SALIDA.ESTADO == null) {
pstmtInsert_tOracleOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(9, SALIDA.ESTADO);
}

                        if(SALIDA.CLASIFICACION == null) {
pstmtInsert_tOracleOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(10, SALIDA.CLASIFICACION);
}

                        if(SALIDA.FECHA_TUTELA != null) {
pstmtInsert_tOracleOutput_1.setTimestamp(11, new java.sql.Timestamp(SALIDA.FECHA_TUTELA.getTime()));
} else {
pstmtInsert_tOracleOutput_1.setNull(11, java.sql.Types.DATE);
}

                        if(SALIDA.NUMERO_ACTA == null) {
pstmtInsert_tOracleOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(12, SALIDA.NUMERO_ACTA);
}

                        if(SALIDA.OBSERVACION == null) {
pstmtInsert_tOracleOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(13, SALIDA.OBSERVACION);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(14, SALIDA.NOMBRE_AUTORIZA);

                        if(SALIDA.AMBULANCIA == null) {
pstmtInsert_tOracleOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(15, SALIDA.AMBULANCIA);
}

                        if(SALIDA.VENCIMIENTO != null) {
pstmtInsert_tOracleOutput_1.setObject(16, new java.sql.Timestamp(SALIDA.VENCIMIENTO.getTime()),java.sql.Types.DATE);
} else {
pstmtInsert_tOracleOutput_1.setNull(16, java.sql.Types.DATE);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(17, SALIDA.PRORROGAS);

                        if(SALIDA.MODO == null) {
pstmtInsert_tOracleOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(18, SALIDA.MODO);
}

                        if(SALIDA.CODIGO_ACEPTACION == null) {
pstmtInsert_tOracleOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(19, SALIDA.CODIGO_ACEPTACION);
}

                        if(SALIDA.JUSTIFICAICON_ANULACION == null) {
pstmtInsert_tOracleOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(20, SALIDA.JUSTIFICAICON_ANULACION);
}

                        if(SALIDA.RESOLICION_TUTELA == null) {
pstmtInsert_tOracleOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(21, SALIDA.RESOLICION_TUTELA);
}

                        if(SALIDA.JUSTIFICAICON_NOFAVORABLE == null) {
pstmtInsert_tOracleOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(22, SALIDA.JUSTIFICAICON_NOFAVORABLE);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(23, SALIDA.UORGO_ID);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(24, SALIDA.VALOR_TOTAL);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(25, SALIDA.VALOR_UNITARIO);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(26, SALIDA.CANTIDAD);

                        if(SALIDA.ORIGEN == null) {
pstmtInsert_tOracleOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(27, SALIDA.ORIGEN);
}

                        if(SALIDA.FECHA_SOLICITUD != null) {
pstmtInsert_tOracleOutput_1.setObject(28, new java.sql.Timestamp(SALIDA.FECHA_SOLICITUD.getTime()),java.sql.Types.DATE);
} else {
pstmtInsert_tOracleOutput_1.setNull(28, java.sql.Types.DATE);
}

                        if(SALIDA.TIPO_SOLICITUD == null) {
pstmtInsert_tOracleOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(29, SALIDA.TIPO_SOLICITUD);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(30, SALIDA.ESTREGISTRO_ID);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(31, SALIDA.UORG_REGISTRA_ID);

                        if(SALIDA.OBSERVACIONAUT == null) {
pstmtInsert_tOracleOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(32, SALIDA.OBSERVACIONAUT);
}

                        if(SALIDA.DRELACIONADO1 == null) {
pstmtInsert_tOracleOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(33, SALIDA.DRELACIONADO1);
}

                        if(SALIDA.DRELACIONADO2 == null) {
pstmtInsert_tOracleOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(34, SALIDA.DRELACIONADO2);
}

                        if(SALIDA.DRELACIONADO3 == null) {
pstmtInsert_tOracleOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(35, SALIDA.DRELACIONADO3);
}

                        if(SALIDA.DESCRIPCION1 == null) {
pstmtInsert_tOracleOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(36, SALIDA.DESCRIPCION1);
}

                        if(SALIDA.DESCRIPCION2 == null) {
pstmtInsert_tOracleOutput_1.setNull(37, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(37, SALIDA.DESCRIPCION2);
}

                        if(SALIDA.DESCRIPCION3 == null) {
pstmtInsert_tOracleOutput_1.setNull(38, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(38, SALIDA.DESCRIPCION3);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(39, SALIDA.EDAD);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(40, SALIDA.DIGITADOR);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(41, SALIDA.PARENTESCO_ID);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(42, SALIDA.ESPCSOLICITA);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(43, SALIDA.PROCESOSASISTENCIALES_ID);

                        if(SALIDA.UBICACION_PACIENTE == null) {
pstmtInsert_tOracleOutput_1.setNull(44, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(44, SALIDA.UBICACION_PACIENTE);
}

                        if(SALIDA.CAUTORIZACION == null) {
pstmtInsert_tOracleOutput_1.setNull(45, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(45, SALIDA.CAUTORIZACION);
}

                        if(SALIDA.CSOLICITUD == null) {
pstmtInsert_tOracleOutput_1.setNull(46, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(46, SALIDA.CSOLICITUD);
}

                        if(SALIDA.PYP_SIGLA == null) {
pstmtInsert_tOracleOutput_1.setNull(47, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(47, SALIDA.PYP_SIGLA);
}

                        if(SALIDA.RESOLUCION_TUTELAS == null) {
pstmtInsert_tOracleOutput_1.setNull(48, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(48, SALIDA.RESOLUCION_TUTELAS);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(49, SALIDA.PRESPONSABLE);

                        if(SALIDA.OBSERVACIONES == null) {
pstmtInsert_tOracleOutput_1.setNull(50, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(50, SALIDA.OBSERVACIONES);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(51, SALIDA.TIEMPOS_ID);

                        if(SALIDA.OBSERVACIONES_AUTORIZACION == null) {
pstmtInsert_tOracleOutput_1.setNull(52, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(52, SALIDA.OBSERVACIONES_AUTORIZACION);
}

                        if(SALIDA.FECHA_AUTORIZACION != null) {
pstmtInsert_tOracleOutput_1.setObject(53, new java.sql.Timestamp(SALIDA.FECHA_AUTORIZACION.getTime()),java.sql.Types.DATE);
} else {
pstmtInsert_tOracleOutput_1.setNull(53, java.sql.Types.DATE);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(54, SALIDA.AUTORIZADOR);

                try {
                    int processedCount_tOracleOutput_1 = pstmtInsert_tOracleOutput_1.executeUpdate();
                    insertedCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    rowsToCommitCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    nb_line_tOracleOutput_1++;
                } catch(java.lang.Exception e_tOracleOutput_1) {
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
                    whetherReject_tOracleOutput_1 = true;
                        nb_line_tOracleOutput_1++;
                            System.err.print(e_tOracleOutput_1.getMessage());
                }
            }
                commitCounter_tOracleOutput_1++;
                if(commitEvery_tOracleOutput_1 <= commitCounter_tOracleOutput_1) {
                    if(rowsToCommitCount_tOracleOutput_1 != 0){
                    	
                    }
                    conn_tOracleOutput_1.commit();
                    if(rowsToCommitCount_tOracleOutput_1 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_1 = 0;
                    }
                    commitCounter_tOracleOutput_1=0;
                }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */

} // End of branch "SALIDA"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */

} // End of branch "AUTORIZACIONES_OUT"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());




/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row6 != null) {
						tHash_Lookup_row6.endGet();
					}
					globalMap.remove( "tHash_Lookup_row6" );

					
					
				
					if(tHash_Lookup_row7 != null) {
						tHash_Lookup_row7.endGet();
					}
					globalMap.remove( "tHash_Lookup_row7" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"AUTORIZACIONES_OUT");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());




/**
 * [tJavaRow_3 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(pstmtUpdate_tOracleOutput_1 != null){
            pstmtUpdate_tOracleOutput_1.close();
            resourceMap.remove("pstmtUpdate_tOracleOutput_1");
        }
        if(pstmtInsert_tOracleOutput_1 != null){
            pstmtInsert_tOracleOutput_1.close();
            resourceMap.remove("pstmtInsert_tOracleOutput_1");
        }
        if(pstmt_tOracleOutput_1 != null) {
            pstmt_tOracleOutput_1.close();
            resourceMap.remove("pstmt_tOracleOutput_1");
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);
		if(commitCounter_tOracleOutput_1 > 0 && rowsToCommitCount_tOracleOutput_1 != 0) {
			
		}
		conn_tOracleOutput_1.commit();
		if(commitCounter_tOracleOutput_1 > 0 && rowsToCommitCount_tOracleOutput_1 != 0) {
			
			rowsToCommitCount_tOracleOutput_1 = 0;
		}
		commitCounter_tOracleOutput_1 = 0;
		
		
		conn_tOracleOutput_1 .close();
		
		resourceMap.put("finish_tOracleOutput_1", true);
   	

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"SALIDA");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());




/**
 * [tOracleOutput_1 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row6"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row7"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tOracleOutput_1 = null;
                if ((pstmtUpdateToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tOracleOutput_1")) != null) {
                    pstmtUpdateToClose_tOracleOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tOracleOutput_1 = null;
                if ((pstmtInsertToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tOracleOutput_1")) != null) {
                    pstmtInsertToClose_tOracleOutput_1.close();
                }
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_1") == null){
            java.sql.Connection ctn_tOracleOutput_1 = null;
            if((ctn_tOracleOutput_1 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_1")) != null){
                try {
                    ctn_tOracleOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_1) {
                    String errorMessage_tOracleOutput_1 = "failed to close the connection in tOracleOutput_1 :" + sqlEx_tOracleOutput_1.getMessage();
                    System.err.println(errorMessage_tOracleOutput_1);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal IDENTIFICADOR;

				public BigDecimal getIDENTIFICADOR () {
					return this.IDENTIFICADOR;
				}

				public Boolean IDENTIFICADORIsNullable(){
				    return true;
				}
				public Boolean IDENTIFICADORIsKey(){
				    return false;
				}
				public Integer IDENTIFICADORLength(){
				    return null;
				}
				public Integer IDENTIFICADORPrecision(){
				    return null;
				}
				public String IDENTIFICADORDefault(){
				
					return null;
				
				}
				public String IDENTIFICADORComment(){
				
				    return "";
				
				}
				public String IDENTIFICADORPattern(){
				
					return "";
				
				}
				public String IDENTIFICADOROriginalDbColumnName(){
				
					return "IDENTIFICADOR";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.IDENTIFICADOR == null) ? 0 : this.IDENTIFICADOR.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.IDENTIFICADOR == null) {
							if (other.IDENTIFICADOR != null)
								return false;
						
						} else if (!this.IDENTIFICADOR.equals(other.IDENTIFICADOR))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.ID = this.ID;
	            other.IDENTIFICADOR = this.IDENTIFICADOR;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.IDENTIFICADOR = this.IDENTIFICADOR;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia) {

        	try {

        		int length = 0;
		
						this.IDENTIFICADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia) {

        	try {

        		int length = 0;
		
						this.IDENTIFICADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.IDENTIFICADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IDENTIFICADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",IDENTIFICADOR="+String.valueOf(IDENTIFICADOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.IDENTIFICADOR, other.IDENTIFICADOR);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tAdvancedHash_row6 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row6", false);
		start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tAdvancedHash_row6 = 0;
		

			   		// connection name:row6
			   		// source node:tHashInput_1 - inputs:(after_tOracleInput_2) outputs:(row6,row6) | target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
			   		// linked node: tMap_1 - inputs:(row2,row6,row7) outputs:(AUTORIZACIONES_OUT)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row6Struct>getLookup(matchingModeEnum_row6);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row6 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_ReferenciayContrarreferencia_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row5Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row5Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row6.ID = next_tHashInput_1.ID;
	row6.IDENTIFICADOR = next_tHashInput_1.IDENTIFICADOR;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					


			   
			   

					row6Struct row6_HashRow = new row6Struct();
		   	   	   
				
				row6_HashRow.ID = row6.ID;
				
				row6_HashRow.IDENTIFICADOR = row6.IDENTIFICADOR;
				
			tHash_Lookup_row6.put(row6_HashRow);
			
            




 


	tos_count_tAdvancedHash_row6++;

/**
 * [tAdvancedHash_row6 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ReferenciayContrarreferencia_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

tHash_Lookup_row6.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row6", true);
end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());




/**
 * [tAdvancedHash_row6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal IDENTIFICADOR;

				public BigDecimal getIDENTIFICADOR () {
					return this.IDENTIFICADOR;
				}

				public Boolean IDENTIFICADORIsNullable(){
				    return true;
				}
				public Boolean IDENTIFICADORIsKey(){
				    return false;
				}
				public Integer IDENTIFICADORLength(){
				    return null;
				}
				public Integer IDENTIFICADORPrecision(){
				    return null;
				}
				public String IDENTIFICADORDefault(){
				
					return null;
				
				}
				public String IDENTIFICADORComment(){
				
				    return "";
				
				}
				public String IDENTIFICADORPattern(){
				
					return "";
				
				}
				public String IDENTIFICADOROriginalDbColumnName(){
				
					return "IDENTIFICADOR";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.IDENTIFICADOR == null) ? 0 : this.IDENTIFICADOR.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.IDENTIFICADOR == null) {
							if (other.IDENTIFICADOR != null)
								return false;
						
						} else if (!this.IDENTIFICADOR.equals(other.IDENTIFICADOR))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.ID = this.ID;
	            other.IDENTIFICADOR = this.IDENTIFICADOR;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.IDENTIFICADOR = this.IDENTIFICADOR;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia) {

        	try {

        		int length = 0;
		
						this.IDENTIFICADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia) {

        	try {

        		int length = 0;
		
						this.IDENTIFICADOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.IDENTIFICADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.IDENTIFICADOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",IDENTIFICADOR="+String.valueOf(IDENTIFICADOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.IDENTIFICADOR, other.IDENTIFICADOR);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tAdvancedHash_row7 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row7", false);
		start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tAdvancedHash_row7 = 0;
		

			   		// connection name:row7
			   		// source node:tHashInput_2 - inputs:(after_tOracleInput_2) outputs:(row7,row7) | target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
			   		// linked node: tMap_1 - inputs:(row2,row6,row7) outputs:(AUTORIZACIONES_OUT)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row7Struct>getLookup(matchingModeEnum_row7);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row7 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_ReferenciayContrarreferencia_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row5Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row5Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row7.ID = next_tHashInput_2.ID;
	row7.IDENTIFICADOR = next_tHashInput_2.IDENTIFICADOR;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					


			   
			   

					row7Struct row7_HashRow = new row7Struct();
		   	   	   
				
				row7_HashRow.ID = row7.ID;
				
				row7_HashRow.IDENTIFICADOR = row7.IDENTIFICADOR;
				
			tHash_Lookup_row7.put(row7_HashRow);
			
            




 


	tos_count_tAdvancedHash_row7++;

/**
 * [tAdvancedHash_row7 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_ReferenciayContrarreferencia_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

tHash_Lookup_row7.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row7", true);
end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());




/**
 * [tAdvancedHash_row7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length == 0) {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length == 0) {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length == 0) {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length == 0) {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
row3Struct row4 = row3;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tRunJob_1 = 0;
		
class DealChildJobLibrary_tRunJob_1 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new java.io.ObjectInputStream(new java.io.FileInputStream(crcMapPath)) {
				@Override
				public Class<?> resolveClass(java.io.ObjectStreamClass desc) throws java.io.IOException, ClassNotFoundException {
					if(!"java.util.HashMap".equals(desc.getName())) {
						throw new java.io.InvalidClassException("Unauthorized deserialization attempt : " + desc.getName());
					}
					return super.resolveClass(desc);
				}
			};
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

	class JVMArgumentHelper_tRunJob_1 {
		
		
		
		private void addClasspath(java.util.List<String> target_argument_list, String job_origin_classpath) {
			
			String extra_classpath = null;
			String path_separator = System.getProperty("path.separator");
			if (path_separator != null && path_separator.length() > 1) {
				throw new RuntimeException("path separator should be single character");
			}
			
			if(extra_classpath!=null && !extra_classpath.isEmpty()) {
				if(extra_classpath.endsWith(path_separator)) {
					target_argument_list.add(extra_classpath+job_origin_classpath);
				} else if(extra_classpath.contains(path_separator)) {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				} else if(extra_classpath.endsWith(":")) {
					target_argument_list.add(extra_classpath.replace(":", path_separator)+job_origin_classpath);
				} else if(extra_classpath.endsWith(";")) {
					target_argument_list.add(extra_classpath.replace(";", path_separator)+job_origin_classpath);
				} else if(extra_classpath.contains(":")) {
					target_argument_list.add(concatStr(extra_classpath.replace(":", path_separator), path_separator, job_origin_classpath));
				} else if(extra_classpath.contains(";")) {
					target_argument_list.add(concatStr(extra_classpath.replace(";", path_separator), path_separator, job_origin_classpath));
				} else {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				}
				return;
			}
			
			target_argument_list.add(job_origin_classpath);
		}
		
		private String concatStr(String s1, String s2, String s3) {
			java.lang.StringBuilder strB = new java.lang.StringBuilder();
			strB.append(s1).append(s2).append(s3);
			return strB.toString();
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			addArgumentsTo(target_argument_list, argument_from_child, false);
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child, boolean isCP) {
			if(isCP) {
				addClasspath(target_argument_list, argument_from_child);
				return;
			}
		
			
			
			
			target_argument_list.add(argument_from_child);
			
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_1 jvm_argument_helper_tRunJob_1 = new JVMArgumentHelper_tRunJob_1();
	
	String audit_jar_path_tRunJob_1 = System.getProperty("classpath.extended");
	

 



/**
 * [tRunJob_1 begin ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.LOGS_ERROR)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                        synchronized (multiThreadLockWrite) {
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("moment");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("root_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("father_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("project");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("job");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("context");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("priority");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("type");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("origin");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("message");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("code");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row3.type = lcm.getType();
		row3.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row3.priority = lcm.getPriority();
		row3.message = lcm.getMessage();
		row3.code = lcm.getCode();
		
		row3.moment = java.util.Calendar.getInstance().getTime();
	
    	row3.pid = pid;
		row3.root_pid = rootPid;
		row3.father_pid = fatherPid;
	
    	row3.project = projectName;
    	row3.job = jobName;
    	row3.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row3.moment != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row3.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.root_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.father_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.project != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.project
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.job != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.job
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.context != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.context
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.priority != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.priority
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.type != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.type
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.origin != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.origin
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.message != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.message
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row3.code != null) {
                        sb_tFileOutputDelimited_1.append(
                            row3.code
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

                    }



 
     row4 = row3;


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */

	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
			
			String osName_tRunJob_1 = System.getProperty("os.name");
			if (osName_tRunJob_1 != null && osName_tRunJob_1.toLowerCase(java.util.Locale.US).startsWith("win")){
				
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
              					String classpath_tRunJob_1_5 = ".;../lib/routines.jar;../lib/log4j-slf4j-impl-2.17.1.jar;../lib/log4j-api-2.17.1.jar;../lib/log4j-core-2.17.1.jar;../lib/activation-1.1.jar;../lib/jakarta.mail-1.6.7.jar;../lib/xpathutil-1.0.0.jar;../lib/slf4j-api-1.7.34.jar;../lib/crypto-utils-7.1.16.jar;../lib/jboss-marshalling-2.0.12.Final.jar;../lib/dom4j-2.1.3.jar;../lib/jaxen-1.1.6.jar;mail_1_3.jar;";
              					
              					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
	        					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5), true);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "rep_inicio.mail_1_3.Mail");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
		      					String classpath_tRunJob_1_5 = ".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/log4j-slf4j-impl-2.17.1.jar:$ROOT_PATH/../lib/log4j-api-2.17.1.jar:$ROOT_PATH/../lib/log4j-core-2.17.1.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/jakarta.mail-1.6.7.jar:$ROOT_PATH/../lib/xpathutil-1.0.0.jar:$ROOT_PATH/../lib/slf4j-api-1.7.34.jar:$ROOT_PATH/../lib/crypto-utils-7.1.16.jar:$ROOT_PATH/../lib/jboss-marshalling-2.0.12.Final.jar:$ROOT_PATH/../lib/dom4j-2.1.3.jar:$ROOT_PATH/../lib/jaxen-1.1.6.jar:$ROOT_PATH/mail_1_3.jar:";
		      					
		      					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5).replace("$ROOT_PATH",System.getProperty("user.dir")), true);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "rep_inicio.mail_1_3.Mail");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "$@");
		      				
			}

			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = row4.moment;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param moment=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param moment=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param moment=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("moment", obj_tRunJob_1);
	
		obj_tRunJob_1 = row4.project;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param project=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param project=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param project=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("project", obj_tRunJob_1);
	
		obj_tRunJob_1 = row4.job;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param job=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param job=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param job=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("job", obj_tRunJob_1);
	
		obj_tRunJob_1 = row4.context;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param context=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param context=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param context=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("context", obj_tRunJob_1);
	
		obj_tRunJob_1 = row4.origin;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param origin=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param origin=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param origin=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("origin", obj_tRunJob_1);
	
		obj_tRunJob_1 = row4.message;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param message=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param message=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param message=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("message", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_destino", obj_tRunJob_1);
	
	
				class ConsoleHelper_tRunJob_1 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_1 consoleHelper_tRunJob_1 = new ConsoleHelper_tRunJob_1();

		Runtime runtime_tRunJob_1 = Runtime.getRuntime();
		Process ps_tRunJob_1 = null;
		
		//0 indicates normal termination
        int result_tRunJob_1;
        StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
        try {
            ps_tRunJob_1 = runtime_tRunJob_1.exec((String[])paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

            Thread normal_tRunJob_1 = consoleHelper_tRunJob_1.getNormalThread(ps_tRunJob_1);
            normal_tRunJob_1.start();

            Thread error_tRunJob_1 = consoleHelper_tRunJob_1.getErrorThread(ps_tRunJob_1, errorMsg_tRunJob_1);
            error_tRunJob_1.start();

            result_tRunJob_1 = ps_tRunJob_1.waitFor();
            normal_tRunJob_1.join();
            error_tRunJob_1.join();
        } catch (ThreadDeath tde) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",tde.getMessage());
            ps_tRunJob_1.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_1_CHILD_RETURN_CODE",result_tRunJob_1);
		if(result_tRunJob_1 != 0){
   			globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_1.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_1 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_1.toString());
			
  		}

		

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk14", 0, "ok");
				}
				tJava_3Process(globalMap);



/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */

	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */

	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
	
 



/**
 * [tRunJob_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";
	
	
		int tos_count_tJava_3 = 0;
		


context.ESTADO_EXEC = "Fail";
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tJava_2Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


context.HORA_FINAL = TalendDate.getDate("HH:mm:ss");
//System.out.println(context.ESTADO_EXEC);

System.out.println("  - End: " + TalendDate.getDate("DD/MM/YYYY") + " "  + TalendDate.getDate("HH:mm:ss") );
System.out.println("+ Job " + context.ESTADO_EXEC);

 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tFixedFlowInput_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tOracleClose_2Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tOracleClose_1Process(globalMap);



/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[0];

	
			    public String FECHA_EJECUCION;

				public String getFECHA_EJECUCION () {
					return this.FECHA_EJECUCION;
				}

				public Boolean FECHA_EJECUCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_EJECUCIONIsKey(){
				    return false;
				}
				public Integer FECHA_EJECUCIONLength(){
				    return null;
				}
				public Integer FECHA_EJECUCIONPrecision(){
				    return null;
				}
				public String FECHA_EJECUCIONDefault(){
				
					return null;
				
				}
				public String FECHA_EJECUCIONComment(){
				
				    return "";
				
				}
				public String FECHA_EJECUCIONPattern(){
				
					return "";
				
				}
				public String FECHA_EJECUCIONOriginalDbColumnName(){
				
					return "FECHA_EJECUCION";
				
				}

				
			    public String HORA_INICIO;

				public String getHORA_INICIO () {
					return this.HORA_INICIO;
				}

				public Boolean HORA_INICIOIsNullable(){
				    return true;
				}
				public Boolean HORA_INICIOIsKey(){
				    return false;
				}
				public Integer HORA_INICIOLength(){
				    return null;
				}
				public Integer HORA_INICIOPrecision(){
				    return null;
				}
				public String HORA_INICIODefault(){
				
					return null;
				
				}
				public String HORA_INICIOComment(){
				
				    return "";
				
				}
				public String HORA_INICIOPattern(){
				
					return "";
				
				}
				public String HORA_INICIOOriginalDbColumnName(){
				
					return "HORA_INICIO";
				
				}

				
			    public String HORA_FINAL;

				public String getHORA_FINAL () {
					return this.HORA_FINAL;
				}

				public Boolean HORA_FINALIsNullable(){
				    return true;
				}
				public Boolean HORA_FINALIsKey(){
				    return false;
				}
				public Integer HORA_FINALLength(){
				    return null;
				}
				public Integer HORA_FINALPrecision(){
				    return null;
				}
				public String HORA_FINALDefault(){
				
					return null;
				
				}
				public String HORA_FINALComment(){
				
				    return "";
				
				}
				public String HORA_FINALPattern(){
				
					return "";
				
				}
				public String HORA_FINALOriginalDbColumnName(){
				
					return "HORA_FINAL";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String JOBS;

				public String getJOBS () {
					return this.JOBS;
				}

				public Boolean JOBSIsNullable(){
				    return true;
				}
				public Boolean JOBSIsKey(){
				    return false;
				}
				public Integer JOBSLength(){
				    return null;
				}
				public Integer JOBSPrecision(){
				    return null;
				}
				public String JOBSDefault(){
				
					return null;
				
				}
				public String JOBSComment(){
				
				    return "";
				
				}
				public String JOBSPattern(){
				
					return "";
				
				}
				public String JOBSOriginalDbColumnName(){
				
					return "JOBS";
				
				}

				
			    public Integer tOracleInput_2_NB_LINE;

				public Integer getTOracleInput_2_NB_LINE () {
					return this.tOracleInput_2_NB_LINE;
				}

				public Boolean tOracleInput_2_NB_LINEIsNullable(){
				    return true;
				}
				public Boolean tOracleInput_2_NB_LINEIsKey(){
				    return false;
				}
				public Integer tOracleInput_2_NB_LINELength(){
				    return null;
				}
				public Integer tOracleInput_2_NB_LINEPrecision(){
				    return null;
				}
				public String tOracleInput_2_NB_LINEDefault(){
				
					return null;
				
				}
				public String tOracleInput_2_NB_LINEComment(){
				
				    return "";
				
				}
				public String tOracleInput_2_NB_LINEPattern(){
				
					return "";
				
				}
				public String tOracleInput_2_NB_LINEOriginalDbColumnName(){
				
					return "tOracleInput_2_NB_LINE";
				
				}

				
			    public Integer tOracleOutput_1_NB_LINE_UPDATED;

				public Integer getTOracleOutput_1_NB_LINE_UPDATED () {
					return this.tOracleOutput_1_NB_LINE_UPDATED;
				}

				public Boolean tOracleOutput_1_NB_LINE_UPDATEDIsNullable(){
				    return true;
				}
				public Boolean tOracleOutput_1_NB_LINE_UPDATEDIsKey(){
				    return false;
				}
				public Integer tOracleOutput_1_NB_LINE_UPDATEDLength(){
				    return null;
				}
				public Integer tOracleOutput_1_NB_LINE_UPDATEDPrecision(){
				    return null;
				}
				public String tOracleOutput_1_NB_LINE_UPDATEDDefault(){
				
					return null;
				
				}
				public String tOracleOutput_1_NB_LINE_UPDATEDComment(){
				
				    return "";
				
				}
				public String tOracleOutput_1_NB_LINE_UPDATEDPattern(){
				
					return "";
				
				}
				public String tOracleOutput_1_NB_LINE_UPDATEDOriginalDbColumnName(){
				
					return "tOracleOutput_1_NB_LINE_UPDATED";
				
				}

				
			    public Integer tOracleOutput_1_NB_LINE_INSERTED;

				public Integer getTOracleOutput_1_NB_LINE_INSERTED () {
					return this.tOracleOutput_1_NB_LINE_INSERTED;
				}

				public Boolean tOracleOutput_1_NB_LINE_INSERTEDIsNullable(){
				    return true;
				}
				public Boolean tOracleOutput_1_NB_LINE_INSERTEDIsKey(){
				    return false;
				}
				public Integer tOracleOutput_1_NB_LINE_INSERTEDLength(){
				    return null;
				}
				public Integer tOracleOutput_1_NB_LINE_INSERTEDPrecision(){
				    return null;
				}
				public String tOracleOutput_1_NB_LINE_INSERTEDDefault(){
				
					return null;
				
				}
				public String tOracleOutput_1_NB_LINE_INSERTEDComment(){
				
				    return "";
				
				}
				public String tOracleOutput_1_NB_LINE_INSERTEDPattern(){
				
					return "";
				
				}
				public String tOracleOutput_1_NB_LINE_INSERTEDOriginalDbColumnName(){
				
					return "tOracleOutput_1_NB_LINE_INSERTED";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length == 0) {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_ReferenciayContrarreferencia.length == 0) {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_ReferenciayContrarreferencia = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_ReferenciayContrarreferencia, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
						this.tOracleInput_2_NB_LINE = readInteger(dis);
					
						this.tOracleOutput_1_NB_LINE_UPDATED = readInteger(dis);
					
						this.tOracleOutput_1_NB_LINE_INSERTED = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_ReferenciayContrarreferencia) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
						this.tOracleInput_2_NB_LINE = readInteger(dis);
					
						this.tOracleOutput_1_NB_LINE_UPDATED = readInteger(dis);
					
						this.tOracleOutput_1_NB_LINE_INSERTED = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
					// Integer
				
						writeInteger(this.tOracleInput_2_NB_LINE,dos);
					
					// Integer
				
						writeInteger(this.tOracleOutput_1_NB_LINE_UPDATED,dos);
					
					// Integer
				
						writeInteger(this.tOracleOutput_1_NB_LINE_INSERTED,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
					// Integer
				
						writeInteger(this.tOracleInput_2_NB_LINE,dos);
					
					// Integer
				
						writeInteger(this.tOracleOutput_1_NB_LINE_UPDATED,dos);
					
					// Integer
				
						writeInteger(this.tOracleOutput_1_NB_LINE_INSERTED,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FECHA_EJECUCION="+FECHA_EJECUCION);
		sb.append(",HORA_INICIO="+HORA_INICIO);
		sb.append(",HORA_FINAL="+HORA_FINAL);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",JOBS="+JOBS);
		sb.append(",tOracleInput_2_NB_LINE="+String.valueOf(tOracleInput_2_NB_LINE));
		sb.append(",tOracleOutput_1_NB_LINE_UPDATED="+String.valueOf(tOracleOutput_1_NB_LINE_UPDATED));
		sb.append(",tOracleOutput_1_NB_LINE_INSERTED="+String.valueOf(tOracleOutput_1_NB_LINE_INSERTED));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.LOGS_EXECUTION)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
                        synchronized (multiThreadLockWrite) {
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("FECHA_EJECUCION");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_INICIO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("HORA_FINAL");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ESTADO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("JOBS");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("tOracleInput_2_NB_LINE");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("tOracleOutput_1_NB_LINE_UPDATED");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("tOracleOutput_1_NB_LINE_INSERTED");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";
	
	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row16.FECHA_EJECUCION = context.FECHA_EJECUCION;
    	            	        	            	
    	            		row16.HORA_INICIO = context.HORA_INICIO;
    	            	        	            	
    	            		row16.HORA_FINAL = context.HORA_FINAL;
    	            	        	            	
    	            		row16.ESTADO = context.ESTADO_EXEC;
    	            	        	            	
    	            		row16.JOBS = "ReferenciayContrarreferencia";
    	            	        	            	
    	            		row16.tOracleInput_2_NB_LINE = ((Integer)globalMap.get("tOracleInput_2_NB_LINE"));
    	            	        	            	
    	            		row16.tOracleOutput_1_NB_LINE_UPDATED = ((Integer)globalMap.get("tOracleOutput_1_NB_LINE_UPDATED"));
    	            	        	            	
    	            		row16.tOracleOutput_1_NB_LINE_INSERTED = ((Integer)globalMap.get("tOracleOutput_1_NB_LINE_INSERTED"));
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row16.FECHA_EJECUCION != null) {
                        sb_tFileOutputDelimited_2.append(
                            row16.FECHA_EJECUCION
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row16.HORA_INICIO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row16.HORA_INICIO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row16.HORA_FINAL != null) {
                        sb_tFileOutputDelimited_2.append(
                            row16.HORA_FINAL
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row16.ESTADO != null) {
                        sb_tFileOutputDelimited_2.append(
                            row16.ESTADO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row16.JOBS != null) {
                        sb_tFileOutputDelimited_2.append(
                            row16.JOBS
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row16.tOracleInput_2_NB_LINE != null) {
                        sb_tFileOutputDelimited_2.append(
                            row16.tOracleInput_2_NB_LINE
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row16.tOracleOutput_1_NB_LINE_UPDATED != null) {
                        sb_tFileOutputDelimited_2.append(
                            row16.tOracleOutput_1_NB_LINE_UPDATED
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row16.tOracleOutput_1_NB_LINE_INSERTED != null) {
                        sb_tFileOutputDelimited_2.append(
                            row16.tOracleOutput_1_NB_LINE_INSERTED
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

                    }



 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_2", false);
		start_Hash.put("tOracleClose_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_2";
	
	
		int tos_count_tOracleClose_2 = 0;
		

 



/**
 * [tOracleClose_2 begin ] stop
 */
	
	/**
	 * [tOracleClose_2 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

	java.sql.Connection conn_tOracleClose_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
	
	if(conn_tOracleClose_2 != null && !conn_tOracleClose_2.isClosed())
	{
		
			conn_tOracleClose_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_2++;

/**
 * [tOracleClose_2 main ] stop
 */
	
	/**
	 * [tOracleClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_2 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 

ok_Hash.put("tOracleClose_2", true);
end_Hash.put("tOracleClose_2", System.currentTimeMillis());




/**
 * [tOracleClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_2_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_2"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());




/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final ReferenciayContrarreferencia ReferenciayContrarreferenciaClass = new ReferenciayContrarreferencia();

        int exitCode = ReferenciayContrarreferenciaClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ReferenciayContrarreferencia.class.getClassLoader().getResourceAsStream("rep_inicio/referenciaycontrarreferencia_4_0/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = ReferenciayContrarreferencia.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("CONDICION_CUPSOLICITADOS", "id_String");
                        if(context.getStringValue("CONDICION_CUPSOLICITADOS") == null) {
                            context.CONDICION_CUPSOLICITADOS = null;
                        } else {
                            context.CONDICION_CUPSOLICITADOS=(String) context.getProperty("CONDICION_CUPSOLICITADOS");
                        }
                        context.setContextType("CONDICION_AUTORIZACIONES", "id_String");
                        if(context.getStringValue("CONDICION_AUTORIZACIONES") == null) {
                            context.CONDICION_AUTORIZACIONES = null;
                        } else {
                            context.CONDICION_AUTORIZACIONES=(String) context.getProperty("CONDICION_AUTORIZACIONES");
                        }
                        context.setContextType("db_origen_AdditionalParams", "id_String");
                        if(context.getStringValue("db_origen_AdditionalParams") == null) {
                            context.db_origen_AdditionalParams = null;
                        } else {
                            context.db_origen_AdditionalParams=(String) context.getProperty("db_origen_AdditionalParams");
                        }
                        context.setContextType("db_origen_Login", "id_String");
                        if(context.getStringValue("db_origen_Login") == null) {
                            context.db_origen_Login = null;
                        } else {
                            context.db_origen_Login=(String) context.getProperty("db_origen_Login");
                        }
                        context.setContextType("db_origen_Password", "id_Password");
                        if(context.getStringValue("db_origen_Password") == null) {
                            context.db_origen_Password = null;
                        } else {
                            String pwd_db_origen_Password_value = context.getProperty("db_origen_Password");
                            context.db_origen_Password = null;
                            if(pwd_db_origen_Password_value!=null) {
                                if(context_param.containsKey("db_origen_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_origen_Password = pwd_db_origen_Password_value;
                                } else if (!pwd_db_origen_Password_value.isEmpty()) {
                                    try {
                                        context.db_origen_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_origen_Password_value);
                                        context.put("db_origen_Password",context.db_origen_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_origen_Port", "id_String");
                        if(context.getStringValue("db_origen_Port") == null) {
                            context.db_origen_Port = null;
                        } else {
                            context.db_origen_Port=(String) context.getProperty("db_origen_Port");
                        }
                        context.setContextType("db_origen_Schema", "id_String");
                        if(context.getStringValue("db_origen_Schema") == null) {
                            context.db_origen_Schema = null;
                        } else {
                            context.db_origen_Schema=(String) context.getProperty("db_origen_Schema");
                        }
                        context.setContextType("db_origen_Server", "id_String");
                        if(context.getStringValue("db_origen_Server") == null) {
                            context.db_origen_Server = null;
                        } else {
                            context.db_origen_Server=(String) context.getProperty("db_origen_Server");
                        }
                        context.setContextType("db_origen_ServiceName", "id_String");
                        if(context.getStringValue("db_origen_ServiceName") == null) {
                            context.db_origen_ServiceName = null;
                        } else {
                            context.db_origen_ServiceName=(String) context.getProperty("db_origen_ServiceName");
                        }
                        context.setContextType("db_destino_AdditionalParams", "id_String");
                        if(context.getStringValue("db_destino_AdditionalParams") == null) {
                            context.db_destino_AdditionalParams = null;
                        } else {
                            context.db_destino_AdditionalParams=(String) context.getProperty("db_destino_AdditionalParams");
                        }
                        context.setContextType("db_destino_Login", "id_String");
                        if(context.getStringValue("db_destino_Login") == null) {
                            context.db_destino_Login = null;
                        } else {
                            context.db_destino_Login=(String) context.getProperty("db_destino_Login");
                        }
                        context.setContextType("db_destino_Password", "id_Password");
                        if(context.getStringValue("db_destino_Password") == null) {
                            context.db_destino_Password = null;
                        } else {
                            String pwd_db_destino_Password_value = context.getProperty("db_destino_Password");
                            context.db_destino_Password = null;
                            if(pwd_db_destino_Password_value!=null) {
                                if(context_param.containsKey("db_destino_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_destino_Password = pwd_db_destino_Password_value;
                                } else if (!pwd_db_destino_Password_value.isEmpty()) {
                                    try {
                                        context.db_destino_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_destino_Password_value);
                                        context.put("db_destino_Password",context.db_destino_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_destino_Port", "id_String");
                        if(context.getStringValue("db_destino_Port") == null) {
                            context.db_destino_Port = null;
                        } else {
                            context.db_destino_Port=(String) context.getProperty("db_destino_Port");
                        }
                        context.setContextType("db_destino_Schema", "id_String");
                        if(context.getStringValue("db_destino_Schema") == null) {
                            context.db_destino_Schema = null;
                        } else {
                            context.db_destino_Schema=(String) context.getProperty("db_destino_Schema");
                        }
                        context.setContextType("db_destino_Server", "id_String");
                        if(context.getStringValue("db_destino_Server") == null) {
                            context.db_destino_Server = null;
                        } else {
                            context.db_destino_Server=(String) context.getProperty("db_destino_Server");
                        }
                        context.setContextType("db_destino_ServiceName", "id_String");
                        if(context.getStringValue("db_destino_ServiceName") == null) {
                            context.db_destino_ServiceName = null;
                        } else {
                            context.db_destino_ServiceName=(String) context.getProperty("db_destino_ServiceName");
                        }
                        context.setContextType("ACTUALIZACION_TOTAL", "id_Boolean");
                        if(context.getStringValue("ACTUALIZACION_TOTAL") == null) {
                            context.ACTUALIZACION_TOTAL = null;
                        } else {
                            try{
                                context.ACTUALIZACION_TOTAL=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("ACTUALIZACION_TOTAL"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ACTUALIZACION_TOTAL", e.getMessage()));
                                context.ACTUALIZACION_TOTAL=null;
                            }
                        }
                        context.setContextType("BODEGA", "id_String");
                        if(context.getStringValue("BODEGA") == null) {
                            context.BODEGA = null;
                        } else {
                            context.BODEGA=(String) context.getProperty("BODEGA");
                        }
                        context.setContextType("ERROR", "id_String");
                        if(context.getStringValue("ERROR") == null) {
                            context.ERROR = null;
                        } else {
                            context.ERROR=(String) context.getProperty("ERROR");
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("FANTERIOR", "id_String");
                        if(context.getStringValue("FANTERIOR") == null) {
                            context.FANTERIOR = null;
                        } else {
                            context.FANTERIOR=(String) context.getProperty("FANTERIOR");
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("CONDICION_CUPSOLICITADOS")) {
                context.CONDICION_CUPSOLICITADOS = (String) parentContextMap.get("CONDICION_CUPSOLICITADOS");
            }if (parentContextMap.containsKey("CONDICION_AUTORIZACIONES")) {
                context.CONDICION_AUTORIZACIONES = (String) parentContextMap.get("CONDICION_AUTORIZACIONES");
            }if (parentContextMap.containsKey("db_origen_AdditionalParams")) {
                context.db_origen_AdditionalParams = (String) parentContextMap.get("db_origen_AdditionalParams");
            }if (parentContextMap.containsKey("db_origen_Login")) {
                context.db_origen_Login = (String) parentContextMap.get("db_origen_Login");
            }if (parentContextMap.containsKey("db_origen_Password")) {
                context.db_origen_Password = (java.lang.String) parentContextMap.get("db_origen_Password");
            }if (parentContextMap.containsKey("db_origen_Port")) {
                context.db_origen_Port = (String) parentContextMap.get("db_origen_Port");
            }if (parentContextMap.containsKey("db_origen_Schema")) {
                context.db_origen_Schema = (String) parentContextMap.get("db_origen_Schema");
            }if (parentContextMap.containsKey("db_origen_Server")) {
                context.db_origen_Server = (String) parentContextMap.get("db_origen_Server");
            }if (parentContextMap.containsKey("db_origen_ServiceName")) {
                context.db_origen_ServiceName = (String) parentContextMap.get("db_origen_ServiceName");
            }if (parentContextMap.containsKey("db_destino_AdditionalParams")) {
                context.db_destino_AdditionalParams = (String) parentContextMap.get("db_destino_AdditionalParams");
            }if (parentContextMap.containsKey("db_destino_Login")) {
                context.db_destino_Login = (String) parentContextMap.get("db_destino_Login");
            }if (parentContextMap.containsKey("db_destino_Password")) {
                context.db_destino_Password = (java.lang.String) parentContextMap.get("db_destino_Password");
            }if (parentContextMap.containsKey("db_destino_Port")) {
                context.db_destino_Port = (String) parentContextMap.get("db_destino_Port");
            }if (parentContextMap.containsKey("db_destino_Schema")) {
                context.db_destino_Schema = (String) parentContextMap.get("db_destino_Schema");
            }if (parentContextMap.containsKey("db_destino_Server")) {
                context.db_destino_Server = (String) parentContextMap.get("db_destino_Server");
            }if (parentContextMap.containsKey("db_destino_ServiceName")) {
                context.db_destino_ServiceName = (String) parentContextMap.get("db_destino_ServiceName");
            }if (parentContextMap.containsKey("ACTUALIZACION_TOTAL")) {
                context.ACTUALIZACION_TOTAL = (Boolean) parentContextMap.get("ACTUALIZACION_TOTAL");
            }if (parentContextMap.containsKey("BODEGA")) {
                context.BODEGA = (String) parentContextMap.get("BODEGA");
            }if (parentContextMap.containsKey("ERROR")) {
                context.ERROR = (String) parentContextMap.get("ERROR");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("FANTERIOR")) {
                context.FANTERIOR = (String) parentContextMap.get("FANTERIOR");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("db_origen_Password");
			parametersToEncrypt.add("db_destino_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tFileInputXML_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tFileInputXML_1) {
globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", -1);

e_tFileInputXML_1.printStackTrace();

}catch (java.lang.Error e_tFileInputXML_1) {
globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tFileInputXML_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ReferenciayContrarreferencia");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tOracleConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));
            connections.put("conn_tOracleConnection_2", globalMap.get("conn_tOracleConnection_2"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     735978 characters generated by Talend Open Studio for ESB 
 *     on the October 28, 2024, 11:47:12 AM COT
 ************************************************************************************************/