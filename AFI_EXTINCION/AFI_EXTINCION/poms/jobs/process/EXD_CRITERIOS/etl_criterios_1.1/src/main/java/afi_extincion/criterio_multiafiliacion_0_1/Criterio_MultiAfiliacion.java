// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package afi_extincion.criterio_multiafiliacion_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.GenerarUuid;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJavaRow_5
	//import java.util.List;

	//the import part of tJavaRow_8
	//import java.util.List;

	//the import part of tJavaRow_6
	//import java.util.List;

	//the import part of tJavaRow_11
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJavaRow_9
	//import java.util.List;

	//the import part of tJavaRow_4
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;

	//the import part of tJava_6
	//import java.util.List;

	//the import part of tJavaRow_7
	//import java.util.List;

	//the import part of tJava_8
	//import java.util.List;

	//the import part of tJava_10
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Criterio_MultiAfiliacion Purpose: <br>
 * Description:  <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status 
 */
public class Criterio_MultiAfiliacion implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(nombreEstadoActivo != null){
				
					this.setProperty("nombreEstadoActivo", nombreEstadoActivo.toString());
				
			}
			
			if(nombreEstadoInactivo != null){
				
					this.setProperty("nombreEstadoInactivo", nombreEstadoInactivo.toString());
				
			}
			
			if(nombreEstadoInexistente != null){
				
					this.setProperty("nombreEstadoInexistente", nombreEstadoInexistente.toString());
				
			}
			
			if(nombreEstadoProvisional != null){
				
					this.setProperty("nombreEstadoProvisional", nombreEstadoProvisional.toString());
				
			}
			
			if(nombreEstadoIncompleto != null){
				
					this.setProperty("nombreEstadoIncompleto", nombreEstadoIncompleto.toString());
				
			}
			
			if(fileSystem_Path != null){
				
					this.setProperty("fileSystem_Path", fileSystem_Path.toString());
				
			}
			
			if(archivoSalida != null){
				
					this.setProperty("archivoSalida", archivoSalida.toString());
				
			}
			
			if(fileSystem_Area != null){
				
					this.setProperty("fileSystem_Area", fileSystem_Area.toString());
				
			}
			
			if(oracle_ServiceName != null){
				
					this.setProperty("oracle_ServiceName", oracle_ServiceName.toString());
				
			}
			
			if(oracle_AdditionalParams != null){
				
					this.setProperty("oracle_AdditionalParams", oracle_AdditionalParams.toString());
				
			}
			
			if(oracle_User != null){
				
					this.setProperty("oracle_User", oracle_User.toString());
				
			}
			
			if(oracle_Schema != null){
				
					this.setProperty("oracle_Schema", oracle_Schema.toString());
				
			}
			
			if(oracle_Host != null){
				
					this.setProperty("oracle_Host", oracle_Host.toString());
				
			}
			
			if(oracle_Sid != null){
				
					this.setProperty("oracle_Sid", oracle_Sid.toString());
				
			}
			
			if(oracle_Password != null){
				
					this.setProperty("oracle_Password", oracle_Password.toString());
				
			}
			
			if(oracle_Port != null){
				
					this.setProperty("oracle_Port", oracle_Port.toString());
				
			}
			
			if(HES_FECHA != null){
				
					String pattern_HES_FECHA = "yyyy-MM-dd HH:mm:ss";
					String value_HES_FECHA = "";
					String[] parts_HES_FECHA = value_HES_FECHA.split(";");
					if(parts_HES_FECHA.length > 1){
						pattern_HES_FECHA = parts_HES_FECHA[0];
						this.setProperty("HES_FECHA", pattern_HES_FECHA + ";" + FormatterUtils.format_Date(HES_FECHA, pattern_HES_FECHA));
					}else{
						this.setProperty("HES_FECHA", FormatterUtils.format_Date(HES_FECHA, pattern_HES_FECHA));
					}
				
			}
			
			if(HES_MOTIVOSESTADO_ID != null){
				
					this.setProperty("HES_MOTIVOSESTADO_ID", HES_MOTIVOSESTADO_ID.toString());
				
			}
			
			if(HES_AFILIADOS_ID != null){
				
					this.setProperty("HES_AFILIADOS_ID", HES_AFILIADOS_ID.toString());
				
			}
			
			if(HES_ESTADOS_ID != null){
				
					this.setProperty("HES_ESTADOS_ID", HES_ESTADOS_ID.toString());
				
			}
			
			if(HES_USUARIOS_ID != null){
				
					this.setProperty("HES_USUARIOS_ID", HES_USUARIOS_ID.toString());
				
			}
			
			if(HAF_MOTIVO != null){
				
					this.setProperty("HAF_MOTIVO", HAF_MOTIVO.toString());
				
			}
			
			if(HAF_PROCESOS_ID != null){
				
					this.setProperty("HAF_PROCESOS_ID", HAF_PROCESOS_ID.toString());
				
			}
			
			if(HAF_RNOVEDADES_ID != null){
				
					this.setProperty("HAF_RNOVEDADES_ID", HAF_RNOVEDADES_ID.toString());
				
			}
			
			if(HAF_VANTERIOR != null){
				
					this.setProperty("HAF_VANTERIOR", HAF_VANTERIOR.toString());
				
			}
			
			if(HAF_CAMPO != null){
				
					this.setProperty("HAF_CAMPO", HAF_CAMPO.toString());
				
			}
			
			if(HAF_AFILIADOS_ID != null){
				
					this.setProperty("HAF_AFILIADOS_ID", HAF_AFILIADOS_ID.toString());
				
			}
			
			if(HAF_VACTUAL != null){
				
					this.setProperty("HAF_VACTUAL", HAF_VACTUAL.toString());
				
			}
			
			if(AS_PRIMER_APELLIDO != null){
				
					this.setProperty("AS_PRIMER_APELLIDO", AS_PRIMER_APELLIDO.toString());
				
			}
			
			if(AS_SEGUNDO_APELLIDO != null){
				
					this.setProperty("AS_SEGUNDO_APELLIDO", AS_SEGUNDO_APELLIDO.toString());
				
			}
			
			if(AS_DESCRIPCION != null){
				
					this.setProperty("AS_DESCRIPCION", AS_DESCRIPCION.toString());
				
			}
			
			if(AS_DOCUMENTO != null){
				
					this.setProperty("AS_DOCUMENTO", AS_DOCUMENTO.toString());
				
			}
			
			if(AS_SEGUNDO_NOMBRE != null){
				
					this.setProperty("AS_SEGUNDO_NOMBRE", AS_SEGUNDO_NOMBRE.toString());
				
			}
			
			if(AS_PRIMER_NOMBRE != null){
				
					this.setProperty("AS_PRIMER_NOMBRE", AS_PRIMER_NOMBRE.toString());
				
			}
			
			if(auxInfoMotivoNombreInactivo != null){
				
					this.setProperty("auxInfoMotivoNombreInactivo", auxInfoMotivoNombreInactivo.toString());
				
			}
			
			if(auxInfoMotivoNombreProvisional != null){
				
					this.setProperty("auxInfoMotivoNombreProvisional", auxInfoMotivoNombreProvisional.toString());
				
			}
			
			if(auxInfoMotivoIdInactivo != null){
				
					this.setProperty("auxInfoMotivoIdInactivo", auxInfoMotivoIdInactivo.toString());
				
			}
			
			if(auxInfoMotivoIdActivo != null){
				
					this.setProperty("auxInfoMotivoIdActivo", auxInfoMotivoIdActivo.toString());
				
			}
			
			if(auxInfoMotivoNombreActivo != null){
				
					this.setProperty("auxInfoMotivoNombreActivo", auxInfoMotivoNombreActivo.toString());
				
			}
			
			if(auxInfoMotivoIdProvisional != null){
				
					this.setProperty("auxInfoMotivoIdProvisional", auxInfoMotivoIdProvisional.toString());
				
			}
			
			if(auxInfoRnovedadesActivo != null){
				
					this.setProperty("auxInfoRnovedadesActivo", auxInfoRnovedadesActivo.toString());
				
			}
			
			if(auxInfoRnovedadesInactivo != null){
				
					this.setProperty("auxInfoRnovedadesInactivo", auxInfoRnovedadesInactivo.toString());
				
			}
			
			if(auxInfoRnovedadesProvisional != null){
				
					this.setProperty("auxInfoRnovedadesProvisional", auxInfoRnovedadesProvisional.toString());
				
			}
			
			if(auxSiglaMotivoEstadoActivo != null){
				
					this.setProperty("auxSiglaMotivoEstadoActivo", auxSiglaMotivoEstadoActivo.toString());
				
			}
			
			if(auxSiglaMotivoEstadoInactivo != null){
				
					this.setProperty("auxSiglaMotivoEstadoInactivo", auxSiglaMotivoEstadoInactivo.toString());
				
			}
			
			if(auxSiglaMotivoEstadoProvisional != null){
				
					this.setProperty("auxSiglaMotivoEstadoProvisional", auxSiglaMotivoEstadoProvisional.toString());
				
			}
			
			if(idEstadoProvisional != null){
				
					this.setProperty("idEstadoProvisional", idEstadoProvisional.toString());
				
			}
			
			if(idEstadoActivo != null){
				
					this.setProperty("idEstadoActivo", idEstadoActivo.toString());
				
			}
			
			if(idEstadoInactivo != null){
				
					this.setProperty("idEstadoInactivo", idEstadoInactivo.toString());
				
			}
			
			if(RnovedadesInactivoId != null){
				
					this.setProperty("RnovedadesInactivoId", RnovedadesInactivoId.toString());
				
			}
			
			if(RnovedadesActivoId != null){
				
					this.setProperty("RnovedadesActivoId", RnovedadesActivoId.toString());
				
			}
			
			if(RnovedadesProvisionalId != null){
				
					this.setProperty("RnovedadesProvisionalId", RnovedadesProvisionalId.toString());
				
			}
			
			if(TafiliadoBeneficiario != null){
				
					this.setProperty("TafiliadoBeneficiario", TafiliadoBeneficiario.toString());
				
			}
			
			if(TafiliadoTitular != null){
				
					this.setProperty("TafiliadoTitular", TafiliadoTitular.toString());
				
			}
			
			if(auxCriterioActual != null){
				
					this.setProperty("auxCriterioActual", auxCriterioActual.toString());
				
			}
			
			if(auxRango != null){
				
					this.setProperty("auxRango", auxRango.toString());
				
			}
			
			if(auxAumentoRegistros != null){
				
					this.setProperty("auxAumentoRegistros", auxAumentoRegistros.toString());
				
			}
			
			if(archivoConfiguracion != null){
				
					this.setProperty("archivoConfiguracion", archivoConfiguracion.toString());
				
			}
			
			if(auxPosicionRegistros != null){
				
					this.setProperty("auxPosicionRegistros", auxPosicionRegistros.toString());
				
			}
			
			if(MotivoEstadoCaso10_INAC != null){
				
					this.setProperty("MotivoEstadoCaso10_INAC", MotivoEstadoCaso10_INAC.toString());
				
			}
			
			if(MotivoEstadoCaso06_PROV != null){
				
					this.setProperty("MotivoEstadoCaso06_PROV", MotivoEstadoCaso06_PROV.toString());
				
			}
			
			if(MotivoEstadoCaso09_ACTI != null){
				
					this.setProperty("MotivoEstadoCaso09_ACTI", MotivoEstadoCaso09_ACTI.toString());
				
			}
			
			if(MotivoEstadoCaso13_ACTI != null){
				
					this.setProperty("MotivoEstadoCaso13_ACTI", MotivoEstadoCaso13_ACTI.toString());
				
			}
			
			if(MotivoEstadoCaso05_PROV != null){
				
					this.setProperty("MotivoEstadoCaso05_PROV", MotivoEstadoCaso05_PROV.toString());
				
			}
			
			if(MotivoEstadoCaso12_INAC != null){
				
					this.setProperty("MotivoEstadoCaso12_INAC", MotivoEstadoCaso12_INAC.toString());
				
			}
			
			if(MotivoEstadoCaso01_PROV != null){
				
					this.setProperty("MotivoEstadoCaso01_PROV", MotivoEstadoCaso01_PROV.toString());
				
			}
			
			if(MotivoEstadoCaso02_PROV != null){
				
					this.setProperty("MotivoEstadoCaso02_PROV", MotivoEstadoCaso02_PROV.toString());
				
			}
			
			if(MotivoEstadoCaso07_INAC != null){
				
					this.setProperty("MotivoEstadoCaso07_INAC", MotivoEstadoCaso07_INAC.toString());
				
			}
			
			if(MotivoEstadoCaso07_ACTI != null){
				
					this.setProperty("MotivoEstadoCaso07_ACTI", MotivoEstadoCaso07_ACTI.toString());
				
			}
			
			if(MotivoEstadoCaso11_INAC != null){
				
					this.setProperty("MotivoEstadoCaso11_INAC", MotivoEstadoCaso11_INAC.toString());
				
			}
			
			if(MotivoEstadoCaso01_INAC != null){
				
					this.setProperty("MotivoEstadoCaso01_INAC", MotivoEstadoCaso01_INAC.toString());
				
			}
			
			if(MotivoEstadoCaso09_INAC != null){
				
					this.setProperty("MotivoEstadoCaso09_INAC", MotivoEstadoCaso09_INAC.toString());
				
			}
			
			if(MotivoEstadoCaso10_ACTI != null){
				
					this.setProperty("MotivoEstadoCaso10_ACTI", MotivoEstadoCaso10_ACTI.toString());
				
			}
			
			if(MotivoEstadoCaso11_ACTI != null){
				
					this.setProperty("MotivoEstadoCaso11_ACTI", MotivoEstadoCaso11_ACTI.toString());
				
			}
			
			if(MotivoEstadoCaso05_INAC != null){
				
					this.setProperty("MotivoEstadoCaso05_INAC", MotivoEstadoCaso05_INAC.toString());
				
			}
			
			if(MotivoEstadoCaso12_ACTI != null){
				
					this.setProperty("MotivoEstadoCaso12_ACTI", MotivoEstadoCaso12_ACTI.toString());
				
			}
			
			if(MotivoEstadoCaso04_PROV != null){
				
					this.setProperty("MotivoEstadoCaso04_PROV", MotivoEstadoCaso04_PROV.toString());
				
			}
			
			if(MotivoEstadoCaso04_INAC != null){
				
					this.setProperty("MotivoEstadoCaso04_INAC", MotivoEstadoCaso04_INAC.toString());
				
			}
			
			if(MotivoEstadoCaso02_INAC != null){
				
					this.setProperty("MotivoEstadoCaso02_INAC", MotivoEstadoCaso02_INAC.toString());
				
			}
			
			if(MotivoEstadoCaso03_ACTI != null){
				
					this.setProperty("MotivoEstadoCaso03_ACTI", MotivoEstadoCaso03_ACTI.toString());
				
			}
			
			if(MotivoEstadoCaso02_ACTI != null){
				
					this.setProperty("MotivoEstadoCaso02_ACTI", MotivoEstadoCaso02_ACTI.toString());
				
			}
			
			if(MotivoEstadoCaso03_PROV != null){
				
					this.setProperty("MotivoEstadoCaso03_PROV", MotivoEstadoCaso03_PROV.toString());
				
			}
			
			if(MotivoEstadoCaso08_INAC != null){
				
					this.setProperty("MotivoEstadoCaso08_INAC", MotivoEstadoCaso08_INAC.toString());
				
			}
			
			if(MotivoEstadoCaso10_PROV != null){
				
					this.setProperty("MotivoEstadoCaso10_PROV", MotivoEstadoCaso10_PROV.toString());
				
			}
			
			if(MotivoEstadoCaso08_ACTI != null){
				
					this.setProperty("MotivoEstadoCaso08_ACTI", MotivoEstadoCaso08_ACTI.toString());
				
			}
			
			if(MotivoEstadoCaso06_INAC != null){
				
					this.setProperty("MotivoEstadoCaso06_INAC", MotivoEstadoCaso06_INAC.toString());
				
			}
			
			if(MotivoEstadoCaso06_ACTI != null){
				
					this.setProperty("MotivoEstadoCaso06_ACTI", MotivoEstadoCaso06_ACTI.toString());
				
			}
			
			if(MotivoEstadoCaso04_ACTI != null){
				
					this.setProperty("MotivoEstadoCaso04_ACTI", MotivoEstadoCaso04_ACTI.toString());
				
			}
			
			if(MotivoEstadoCaso09_PROV != null){
				
					this.setProperty("MotivoEstadoCaso09_PROV", MotivoEstadoCaso09_PROV.toString());
				
			}
			
			if(MotivoEstadoCaso13_PROV != null){
				
					this.setProperty("MotivoEstadoCaso13_PROV", MotivoEstadoCaso13_PROV.toString());
				
			}
			
			if(MotivoEstadoCaso11_PROV != null){
				
					this.setProperty("MotivoEstadoCaso11_PROV", MotivoEstadoCaso11_PROV.toString());
				
			}
			
			if(MotivoEstadoCaso00_PROV != null){
				
					this.setProperty("MotivoEstadoCaso00_PROV", MotivoEstadoCaso00_PROV.toString());
				
			}
			
			if(MotivoEstadoCaso01_ACTI != null){
				
					this.setProperty("MotivoEstadoCaso01_ACTI", MotivoEstadoCaso01_ACTI.toString());
				
			}
			
			if(MotivoEstadoCaso08_PROV != null){
				
					this.setProperty("MotivoEstadoCaso08_PROV", MotivoEstadoCaso08_PROV.toString());
				
			}
			
			if(MotivoEstadoCaso07_PROV != null){
				
					this.setProperty("MotivoEstadoCaso07_PROV", MotivoEstadoCaso07_PROV.toString());
				
			}
			
			if(MotivoEstadoCaso03_INAC != null){
				
					this.setProperty("MotivoEstadoCaso03_INAC", MotivoEstadoCaso03_INAC.toString());
				
			}
			
			if(MotivoEstadoCaso05_ACTI != null){
				
					this.setProperty("MotivoEstadoCaso05_ACTI", MotivoEstadoCaso05_ACTI.toString());
				
			}
			
			if(MotivoEstadoCaso13_INAC != null){
				
					this.setProperty("MotivoEstadoCaso13_INAC", MotivoEstadoCaso13_INAC.toString());
				
			}
			
			if(MotivoEstadoCaso12_PROV != null){
				
					this.setProperty("MotivoEstadoCaso12_PROV", MotivoEstadoCaso12_PROV.toString());
				
			}
			
			if(infoIdJobProcesar != null){
				
					this.setProperty("infoIdJobProcesar", infoIdJobProcesar.toString());
				
			}
			
			if(infoUsuarioJobProcesar != null){
				
					this.setProperty("infoUsuarioJobProcesar", infoUsuarioJobProcesar.toString());
				
			}
			
			if(infoDescripcionJobProcesar != null){
				
					this.setProperty("infoDescripcionJobProcesar", infoDescripcionJobProcesar.toString());
				
			}
			
			if(infoIdProceso != null){
				
					this.setProperty("infoIdProceso", infoIdProceso.toString());
				
			}
			
			if(infoCodigoTipoJob != null){
				
					this.setProperty("infoCodigoTipoJob", infoCodigoTipoJob.toString());
				
			}
			
			if(infoTipoProceso != null){
				
					this.setProperty("infoTipoProceso", infoTipoProceso.toString());
				
			}
			
			if(infoIdEstadoActivo != null){
				
					this.setProperty("infoIdEstadoActivo", infoIdEstadoActivo.toString());
				
			}
			
			if(auxAfiliadosCriterio != null){
				
					this.setProperty("auxAfiliadosCriterio", auxAfiliadosCriterio.toString());
				
			}
			
			if(AS_CRITERIO != null){
				
					this.setProperty("AS_CRITERIO", AS_CRITERIO.toString());
				
			}
			
			if(AS_OPERACION_ACTIVO != null){
				
					this.setProperty("AS_OPERACION_ACTIVO", AS_OPERACION_ACTIVO.toString());
				
			}
			
			if(AS_OPERACION_INACTIVO != null){
				
					this.setProperty("AS_OPERACION_INACTIVO", AS_OPERACION_INACTIVO.toString());
				
			}
			
			if(AS_OPERACION_PROVISIONAL != null){
				
					this.setProperty("AS_OPERACION_PROVISIONAL", AS_OPERACION_PROVISIONAL.toString());
				
			}
			
			if(AS_TIPO_DOCUMENTO != null){
				
					this.setProperty("AS_TIPO_DOCUMENTO", AS_TIPO_DOCUMENTO.toString());
				
			}
			
			if(auxPrimerLoop != null){
				
					this.setProperty("auxPrimerLoop", auxPrimerLoop.toString());
				
			}
			
			if(MotivoEstadoMutiAfiliacion_INAC != null){
				
					this.setProperty("MotivoEstadoMutiAfiliacion_INAC", MotivoEstadoMutiAfiliacion_INAC.toString());
				
			}
			
			if(MotivoEstadoMutiAfiliacion_PROV != null){
				
					this.setProperty("MotivoEstadoMutiAfiliacion_PROV", MotivoEstadoMutiAfiliacion_PROV.toString());
				
			}
			
			if(MotivoEstadoMutiAfiliacion_ACTI != null){
				
					this.setProperty("MotivoEstadoMutiAfiliacion_ACTI", MotivoEstadoMutiAfiliacion_ACTI.toString());
				
			}
			
			if(TDocumentoCertRetiroEps != null){
				
					this.setProperty("TDocumentoCertRetiroEps", TDocumentoCertRetiroEps.toString());
				
			}
			
			if(TDocumentoCertDependenciaEconomica != null){
				
					this.setProperty("TDocumentoCertDependenciaEconomica", TDocumentoCertDependenciaEconomica.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String nombreEstadoActivo;
public String getNombreEstadoActivo(){
	return this.nombreEstadoActivo;
}
public String nombreEstadoInactivo;
public String getNombreEstadoInactivo(){
	return this.nombreEstadoInactivo;
}
public String nombreEstadoInexistente;
public String getNombreEstadoInexistente(){
	return this.nombreEstadoInexistente;
}
public String nombreEstadoProvisional;
public String getNombreEstadoProvisional(){
	return this.nombreEstadoProvisional;
}
public String nombreEstadoIncompleto;
public String getNombreEstadoIncompleto(){
	return this.nombreEstadoIncompleto;
}
public String fileSystem_Path;
public String getFileSystem_Path(){
	return this.fileSystem_Path;
}
public String archivoSalida;
public String getArchivoSalida(){
	return this.archivoSalida;
}
public String fileSystem_Area;
public String getFileSystem_Area(){
	return this.fileSystem_Area;
}
public String oracle_ServiceName;
public String getOracle_ServiceName(){
	return this.oracle_ServiceName;
}
public String oracle_AdditionalParams;
public String getOracle_AdditionalParams(){
	return this.oracle_AdditionalParams;
}
public String oracle_User;
public String getOracle_User(){
	return this.oracle_User;
}
public String oracle_Schema;
public String getOracle_Schema(){
	return this.oracle_Schema;
}
public String oracle_Host;
public String getOracle_Host(){
	return this.oracle_Host;
}
public String oracle_Sid;
public String getOracle_Sid(){
	return this.oracle_Sid;
}
public String oracle_Password;
public String getOracle_Password(){
	return this.oracle_Password;
}
public String oracle_Port;
public String getOracle_Port(){
	return this.oracle_Port;
}
public java.util.Date HES_FECHA;
public java.util.Date getHES_FECHA(){
	return this.HES_FECHA;
}
public Integer HES_MOTIVOSESTADO_ID;
public Integer getHES_MOTIVOSESTADO_ID(){
	return this.HES_MOTIVOSESTADO_ID;
}
public Integer HES_AFILIADOS_ID;
public Integer getHES_AFILIADOS_ID(){
	return this.HES_AFILIADOS_ID;
}
public Integer HES_ESTADOS_ID;
public Integer getHES_ESTADOS_ID(){
	return this.HES_ESTADOS_ID;
}
public Integer HES_USUARIOS_ID;
public Integer getHES_USUARIOS_ID(){
	return this.HES_USUARIOS_ID;
}
public String HAF_MOTIVO;
public String getHAF_MOTIVO(){
	return this.HAF_MOTIVO;
}
public Integer HAF_PROCESOS_ID;
public Integer getHAF_PROCESOS_ID(){
	return this.HAF_PROCESOS_ID;
}
public Integer HAF_RNOVEDADES_ID;
public Integer getHAF_RNOVEDADES_ID(){
	return this.HAF_RNOVEDADES_ID;
}
public Integer HAF_VANTERIOR;
public Integer getHAF_VANTERIOR(){
	return this.HAF_VANTERIOR;
}
public String HAF_CAMPO;
public String getHAF_CAMPO(){
	return this.HAF_CAMPO;
}
public Integer HAF_AFILIADOS_ID;
public Integer getHAF_AFILIADOS_ID(){
	return this.HAF_AFILIADOS_ID;
}
public Integer HAF_VACTUAL;
public Integer getHAF_VACTUAL(){
	return this.HAF_VACTUAL;
}
public String AS_PRIMER_APELLIDO;
public String getAS_PRIMER_APELLIDO(){
	return this.AS_PRIMER_APELLIDO;
}
public String AS_SEGUNDO_APELLIDO;
public String getAS_SEGUNDO_APELLIDO(){
	return this.AS_SEGUNDO_APELLIDO;
}
public String AS_DESCRIPCION;
public String getAS_DESCRIPCION(){
	return this.AS_DESCRIPCION;
}
public String AS_DOCUMENTO;
public String getAS_DOCUMENTO(){
	return this.AS_DOCUMENTO;
}
public String AS_SEGUNDO_NOMBRE;
public String getAS_SEGUNDO_NOMBRE(){
	return this.AS_SEGUNDO_NOMBRE;
}
public String AS_PRIMER_NOMBRE;
public String getAS_PRIMER_NOMBRE(){
	return this.AS_PRIMER_NOMBRE;
}
public String auxInfoMotivoNombreInactivo;
public String getAuxInfoMotivoNombreInactivo(){
	return this.auxInfoMotivoNombreInactivo;
}
public String auxInfoMotivoNombreProvisional;
public String getAuxInfoMotivoNombreProvisional(){
	return this.auxInfoMotivoNombreProvisional;
}
public Integer auxInfoMotivoIdInactivo;
public Integer getAuxInfoMotivoIdInactivo(){
	return this.auxInfoMotivoIdInactivo;
}
public Integer auxInfoMotivoIdActivo;
public Integer getAuxInfoMotivoIdActivo(){
	return this.auxInfoMotivoIdActivo;
}
public String auxInfoMotivoNombreActivo;
public String getAuxInfoMotivoNombreActivo(){
	return this.auxInfoMotivoNombreActivo;
}
public Integer auxInfoMotivoIdProvisional;
public Integer getAuxInfoMotivoIdProvisional(){
	return this.auxInfoMotivoIdProvisional;
}
public Integer auxInfoRnovedadesActivo;
public Integer getAuxInfoRnovedadesActivo(){
	return this.auxInfoRnovedadesActivo;
}
public Integer auxInfoRnovedadesInactivo;
public Integer getAuxInfoRnovedadesInactivo(){
	return this.auxInfoRnovedadesInactivo;
}
public Integer auxInfoRnovedadesProvisional;
public Integer getAuxInfoRnovedadesProvisional(){
	return this.auxInfoRnovedadesProvisional;
}
public String auxSiglaMotivoEstadoActivo;
public String getAuxSiglaMotivoEstadoActivo(){
	return this.auxSiglaMotivoEstadoActivo;
}
public String auxSiglaMotivoEstadoInactivo;
public String getAuxSiglaMotivoEstadoInactivo(){
	return this.auxSiglaMotivoEstadoInactivo;
}
public String auxSiglaMotivoEstadoProvisional;
public String getAuxSiglaMotivoEstadoProvisional(){
	return this.auxSiglaMotivoEstadoProvisional;
}
public Integer idEstadoProvisional;
public Integer getIdEstadoProvisional(){
	return this.idEstadoProvisional;
}
public Integer idEstadoActivo;
public Integer getIdEstadoActivo(){
	return this.idEstadoActivo;
}
public Integer idEstadoInactivo;
public Integer getIdEstadoInactivo(){
	return this.idEstadoInactivo;
}
public String RnovedadesInactivoId;
public String getRnovedadesInactivoId(){
	return this.RnovedadesInactivoId;
}
public String RnovedadesActivoId;
public String getRnovedadesActivoId(){
	return this.RnovedadesActivoId;
}
public String RnovedadesProvisionalId;
public String getRnovedadesProvisionalId(){
	return this.RnovedadesProvisionalId;
}
public String TafiliadoBeneficiario;
public String getTafiliadoBeneficiario(){
	return this.TafiliadoBeneficiario;
}
public String TafiliadoTitular;
public String getTafiliadoTitular(){
	return this.TafiliadoTitular;
}
public Integer auxCriterioActual;
public Integer getAuxCriterioActual(){
	return this.auxCriterioActual;
}
public String auxRango;
public String getAuxRango(){
	return this.auxRango;
}
public Integer auxAumentoRegistros;
public Integer getAuxAumentoRegistros(){
	return this.auxAumentoRegistros;
}
public String archivoConfiguracion;
public String getArchivoConfiguracion(){
	return this.archivoConfiguracion;
}
public Integer auxPosicionRegistros;
public Integer getAuxPosicionRegistros(){
	return this.auxPosicionRegistros;
}
public String MotivoEstadoCaso10_INAC;
public String getMotivoEstadoCaso10_INAC(){
	return this.MotivoEstadoCaso10_INAC;
}
public String MotivoEstadoCaso06_PROV;
public String getMotivoEstadoCaso06_PROV(){
	return this.MotivoEstadoCaso06_PROV;
}
public String MotivoEstadoCaso09_ACTI;
public String getMotivoEstadoCaso09_ACTI(){
	return this.MotivoEstadoCaso09_ACTI;
}
public String MotivoEstadoCaso13_ACTI;
public String getMotivoEstadoCaso13_ACTI(){
	return this.MotivoEstadoCaso13_ACTI;
}
public String MotivoEstadoCaso05_PROV;
public String getMotivoEstadoCaso05_PROV(){
	return this.MotivoEstadoCaso05_PROV;
}
public String MotivoEstadoCaso12_INAC;
public String getMotivoEstadoCaso12_INAC(){
	return this.MotivoEstadoCaso12_INAC;
}
public String MotivoEstadoCaso01_PROV;
public String getMotivoEstadoCaso01_PROV(){
	return this.MotivoEstadoCaso01_PROV;
}
public String MotivoEstadoCaso02_PROV;
public String getMotivoEstadoCaso02_PROV(){
	return this.MotivoEstadoCaso02_PROV;
}
public String MotivoEstadoCaso07_INAC;
public String getMotivoEstadoCaso07_INAC(){
	return this.MotivoEstadoCaso07_INAC;
}
public String MotivoEstadoCaso07_ACTI;
public String getMotivoEstadoCaso07_ACTI(){
	return this.MotivoEstadoCaso07_ACTI;
}
public String MotivoEstadoCaso11_INAC;
public String getMotivoEstadoCaso11_INAC(){
	return this.MotivoEstadoCaso11_INAC;
}
public String MotivoEstadoCaso01_INAC;
public String getMotivoEstadoCaso01_INAC(){
	return this.MotivoEstadoCaso01_INAC;
}
public String MotivoEstadoCaso09_INAC;
public String getMotivoEstadoCaso09_INAC(){
	return this.MotivoEstadoCaso09_INAC;
}
public String MotivoEstadoCaso10_ACTI;
public String getMotivoEstadoCaso10_ACTI(){
	return this.MotivoEstadoCaso10_ACTI;
}
public String MotivoEstadoCaso11_ACTI;
public String getMotivoEstadoCaso11_ACTI(){
	return this.MotivoEstadoCaso11_ACTI;
}
public String MotivoEstadoCaso05_INAC;
public String getMotivoEstadoCaso05_INAC(){
	return this.MotivoEstadoCaso05_INAC;
}
public String MotivoEstadoCaso12_ACTI;
public String getMotivoEstadoCaso12_ACTI(){
	return this.MotivoEstadoCaso12_ACTI;
}
public String MotivoEstadoCaso04_PROV;
public String getMotivoEstadoCaso04_PROV(){
	return this.MotivoEstadoCaso04_PROV;
}
public String MotivoEstadoCaso04_INAC;
public String getMotivoEstadoCaso04_INAC(){
	return this.MotivoEstadoCaso04_INAC;
}
public String MotivoEstadoCaso02_INAC;
public String getMotivoEstadoCaso02_INAC(){
	return this.MotivoEstadoCaso02_INAC;
}
public String MotivoEstadoCaso03_ACTI;
public String getMotivoEstadoCaso03_ACTI(){
	return this.MotivoEstadoCaso03_ACTI;
}
public String MotivoEstadoCaso02_ACTI;
public String getMotivoEstadoCaso02_ACTI(){
	return this.MotivoEstadoCaso02_ACTI;
}
public String MotivoEstadoCaso03_PROV;
public String getMotivoEstadoCaso03_PROV(){
	return this.MotivoEstadoCaso03_PROV;
}
public String MotivoEstadoCaso08_INAC;
public String getMotivoEstadoCaso08_INAC(){
	return this.MotivoEstadoCaso08_INAC;
}
public String MotivoEstadoCaso10_PROV;
public String getMotivoEstadoCaso10_PROV(){
	return this.MotivoEstadoCaso10_PROV;
}
public String MotivoEstadoCaso08_ACTI;
public String getMotivoEstadoCaso08_ACTI(){
	return this.MotivoEstadoCaso08_ACTI;
}
public String MotivoEstadoCaso06_INAC;
public String getMotivoEstadoCaso06_INAC(){
	return this.MotivoEstadoCaso06_INAC;
}
public String MotivoEstadoCaso06_ACTI;
public String getMotivoEstadoCaso06_ACTI(){
	return this.MotivoEstadoCaso06_ACTI;
}
public String MotivoEstadoCaso04_ACTI;
public String getMotivoEstadoCaso04_ACTI(){
	return this.MotivoEstadoCaso04_ACTI;
}
public String MotivoEstadoCaso09_PROV;
public String getMotivoEstadoCaso09_PROV(){
	return this.MotivoEstadoCaso09_PROV;
}
public String MotivoEstadoCaso13_PROV;
public String getMotivoEstadoCaso13_PROV(){
	return this.MotivoEstadoCaso13_PROV;
}
public String MotivoEstadoCaso11_PROV;
public String getMotivoEstadoCaso11_PROV(){
	return this.MotivoEstadoCaso11_PROV;
}
public String MotivoEstadoCaso00_PROV;
public String getMotivoEstadoCaso00_PROV(){
	return this.MotivoEstadoCaso00_PROV;
}
public String MotivoEstadoCaso01_ACTI;
public String getMotivoEstadoCaso01_ACTI(){
	return this.MotivoEstadoCaso01_ACTI;
}
public String MotivoEstadoCaso08_PROV;
public String getMotivoEstadoCaso08_PROV(){
	return this.MotivoEstadoCaso08_PROV;
}
public String MotivoEstadoCaso07_PROV;
public String getMotivoEstadoCaso07_PROV(){
	return this.MotivoEstadoCaso07_PROV;
}
public String MotivoEstadoCaso03_INAC;
public String getMotivoEstadoCaso03_INAC(){
	return this.MotivoEstadoCaso03_INAC;
}
public String MotivoEstadoCaso05_ACTI;
public String getMotivoEstadoCaso05_ACTI(){
	return this.MotivoEstadoCaso05_ACTI;
}
public String MotivoEstadoCaso13_INAC;
public String getMotivoEstadoCaso13_INAC(){
	return this.MotivoEstadoCaso13_INAC;
}
public String MotivoEstadoCaso12_PROV;
public String getMotivoEstadoCaso12_PROV(){
	return this.MotivoEstadoCaso12_PROV;
}
public Integer infoIdJobProcesar;
public Integer getInfoIdJobProcesar(){
	return this.infoIdJobProcesar;
}
public Integer infoUsuarioJobProcesar;
public Integer getInfoUsuarioJobProcesar(){
	return this.infoUsuarioJobProcesar;
}
public String infoDescripcionJobProcesar;
public String getInfoDescripcionJobProcesar(){
	return this.infoDescripcionJobProcesar;
}
public Integer infoIdProceso;
public Integer getInfoIdProceso(){
	return this.infoIdProceso;
}
public Integer infoCodigoTipoJob;
public Integer getInfoCodigoTipoJob(){
	return this.infoCodigoTipoJob;
}
public Integer infoTipoProceso;
public Integer getInfoTipoProceso(){
	return this.infoTipoProceso;
}
public Integer infoIdEstadoActivo;
public Integer getInfoIdEstadoActivo(){
	return this.infoIdEstadoActivo;
}
public String auxAfiliadosCriterio;
public String getAuxAfiliadosCriterio(){
	return this.auxAfiliadosCriterio;
}
public String AS_CRITERIO;
public String getAS_CRITERIO(){
	return this.AS_CRITERIO;
}
public String AS_OPERACION_ACTIVO;
public String getAS_OPERACION_ACTIVO(){
	return this.AS_OPERACION_ACTIVO;
}
public String AS_OPERACION_INACTIVO;
public String getAS_OPERACION_INACTIVO(){
	return this.AS_OPERACION_INACTIVO;
}
public String AS_OPERACION_PROVISIONAL;
public String getAS_OPERACION_PROVISIONAL(){
	return this.AS_OPERACION_PROVISIONAL;
}
public String AS_TIPO_DOCUMENTO;
public String getAS_TIPO_DOCUMENTO(){
	return this.AS_TIPO_DOCUMENTO;
}
public Boolean auxPrimerLoop;
public Boolean getAuxPrimerLoop(){
	return this.auxPrimerLoop;
}
public String MotivoEstadoMutiAfiliacion_INAC;
public String getMotivoEstadoMutiAfiliacion_INAC(){
	return this.MotivoEstadoMutiAfiliacion_INAC;
}
public String MotivoEstadoMutiAfiliacion_PROV;
public String getMotivoEstadoMutiAfiliacion_PROV(){
	return this.MotivoEstadoMutiAfiliacion_PROV;
}
public String MotivoEstadoMutiAfiliacion_ACTI;
public String getMotivoEstadoMutiAfiliacion_ACTI(){
	return this.MotivoEstadoMutiAfiliacion_ACTI;
}
public Integer TDocumentoCertRetiroEps;
public Integer getTDocumentoCertRetiroEps(){
	return this.TDocumentoCertRetiroEps;
}
public Integer TDocumentoCertDependenciaEconomica;
public Integer getTDocumentoCertDependenciaEconomica(){
	return this.TDocumentoCertDependenciaEconomica;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Criterio_MultiAfiliacion";
	private final String projectName = "AFI_EXTINCION";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_MKjksOpaEea7kYu0VB0iJQ", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Criterio_MultiAfiliacion.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Criterio_MultiAfiliacion.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError2", 0, "error");
								}
							
							
								errorCode = null;
								tDie_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLoop_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSampleRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tStatCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row_doc_ina_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row_doc_act_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDenormalize_2_DenormalizeOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tDenormalize_2_ArrayIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tDenormalize_2_ArrayIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLoop_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.oracle_Host + ")(port=" + context.oracle_Port + "))(connect_data=(service_name=" + context.oracle_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.oracle_User;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.oracle_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.oracle_AdditionalParams != null && !"\"\"".equals(context.oracle_AdditionalParams) && !"".equals(context.oracle_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.oracle_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.oracle_Host);
        globalMap.put("port_" + "tOracleConnection_1",context.oracle_Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.oracle_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.oracle_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.oracle_User);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";
	
	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

	try {
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("the end is near");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "the end is near");
	globalMap.put("tDie_1_DIE_MESSAGES", "the end is near");
	
	} catch (Exception | Error e_tDie_1) {
	    globalMap.put("tDie_1_ERROR_MESSAGE",e_tDie_1.getMessage());
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        

    
	if(true){	
		TDieException e_tDie_1 = new TDieException();

		

		throw e_tDie_1;
	}

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


//****************************************************************************************//
System.out.println("*** PREJOB FINALIZADO CRITERIO MULTIAFILIACION *****************************************");
//****************************************************************************************//

//****************************************************************************************//
//*** PRUEBAS ESTO HAY QUE ELIMINARLO ****************************************************//
//****************************************************************************************//
//context.fileSystem_Path="C:\\Users\\icnovaro\\Desktop\\AFI_FOREVER\\SaludSis\\App_Data\\Storage";
//context.infoIdProceso=1300;
//context.infoUsuarioJobProcesar=64;
//context.archivoSalida="out";
//****************************************************************************************//

//****************************************************************************************//
//*** INICIALIZACIÓN VARIABLES DEL JOB ***************************************************//
//****************************************************************************************//
context.auxPosicionRegistros=0;

//****************************************************************************************//
//*** VARIABLES QUE SE USARAN PARA INSERTAR EN HAFILIADOS ********************************//
//*** SON ENVIADAS DESDE EL JOB PARENT PARA SER PROCESADAS *******************************//
//****************************************************************************************//
context.HAF_PROCESOS_ID = context.infoIdProceso;

//****************************************************************************************//
//*** VARIABLES QUE SE USARAN PARA INSERTAR EN HESTADOS **********************************//
//*** SON ENVIADAS DESDE EL JOB PARENT PARA SER PROCESADAS *******************************//
//****************************************************************************************//
context.HES_USUARIOS_ID = context.infoUsuarioJobProcesar;

//****************************************************************************************//
//*** VARIABLES QUE SE USARAN PARA INSERTAR EN LA SALIDA DEL ARCHIVO *********************//
//****************************************************************************************//
context.AS_CRITERIO = "CRITERIO MULTIAFILIACION";

//****************************************************************************************//
//*** VARIABLES QUE SE USARAN PARA MANEJAR LOS MOTIVOS DE LOS ESTADOS ********************//
//*** ESTAN PRE-CONFIGURADAS EN LAS VARIABLES DE CONTEXTO PARAMETRICAS *******************//
//****************************************************************************************//
context.auxSiglaMotivoEstadoProvisional=context.MotivoEstadoMutiAfiliacion_PROV;
context.auxSiglaMotivoEstadoInactivo=context.MotivoEstadoMutiAfiliacion_INAC;
context.auxSiglaMotivoEstadoActivo=context.MotivoEstadoMutiAfiliacion_ACTI;

//****************************************************************************************//
System.out.println("ID PROCESO: "+context.HAF_PROCESOS_ID);
System.out.println("ID USUARIO: "+context.HES_USUARIOS_ID);
//****************************************************************************************//
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tOracleClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tJava_2Process(globalMap);



/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


//****************************************************************************************//
System.out.println("*******************POSTJOB FINALIZADO CRITERIO MULTIAFILIACION ****************");
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class row_a01Struct implements routines.system.IPersistableRow<row_a01Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_a01Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_a01Struct row_a01 = new row_a01Struct();




	
	/**
	 * [tJavaRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_5", false);
		start_Hash.put("tJavaRow_5", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row_a01");
					}
				
		int tos_count_tJavaRow_5 = 0;
		

int nb_line_tJavaRow_5 = 0;

 



/**
 * [tJavaRow_5 begin ] stop
 */



	
	/**
	 * [tOracleInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_8", false);
		start_Hash.put("tOracleInput_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_8";
	
	
		int tos_count_tOracleInput_8 = 0;
		
	


	
		    int nb_line_tOracleInput_8 = 0;
		    java.sql.Connection conn_tOracleInput_8 = null;
				conn_tOracleInput_8 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_8 = false;
				boolean isConnectionWrapped_tOracleInput_8 = !(conn_tOracleInput_8 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_8.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_8 = null;
                if (isConnectionWrapped_tOracleInput_8) {
					unwrappedOraConn_tOracleInput_8 = conn_tOracleInput_8.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_8 != null) {
                        isTimeZoneNull_tOracleInput_8 = (unwrappedOraConn_tOracleInput_8.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_8 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_8).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_8) {
					java.sql.Statement stmtGetTZ_tOracleInput_8 = conn_tOracleInput_8.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_8 = stmtGetTZ_tOracleInput_8.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_8 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_8.next()) {
						sessionTimezone_tOracleInput_8 = rsGetTZ_tOracleInput_8.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_8 && unwrappedOraConn_tOracleInput_8 != null) {
                        unwrappedOraConn_tOracleInput_8.setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_8).setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_8 = conn_tOracleInput_8.createStatement();

		    String dbquery_tOracleInput_8 = "SELECT MAX(EST.ID) AS ID\nFROM AFI_ESTADOS EST\nWHERE EST.NOMBRE = '"+context.nombreEstadoActivo+"' AND\nEST.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_8_QUERY",dbquery_tOracleInput_8);

		    java.sql.ResultSet rs_tOracleInput_8 = null;

		    try {
		    	rs_tOracleInput_8 = stmt_tOracleInput_8.executeQuery(dbquery_tOracleInput_8);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_8 = rs_tOracleInput_8.getMetaData();
		    	int colQtyInRs_tOracleInput_8 = rsmd_tOracleInput_8.getColumnCount();

		    String tmpContent_tOracleInput_8 = null;
		    
		    
		    while (rs_tOracleInput_8.next()) {
		        nb_line_tOracleInput_8++;
		        
							if(colQtyInRs_tOracleInput_8 < 1) {
								row_a01.ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(1) != null) {
						row_a01.ID = rs_tOracleInput_8.getInt(1);
					} else {
				
						row_a01.ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_8 begin ] stop
 */
	
	/**
	 * [tOracleInput_8 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 


	tos_count_tOracleInput_8++;

/**
 * [tOracleInput_8 main ] stop
 */
	
	/**
	 * [tOracleInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_5 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row_a01"
						
						);
					}
					

    //****************************************************************************************//
//*** VARIABLES QUE ALMACENAN EL VALOR DEL ID DEL ESTADO ACTIVO **************************//
//****************************************************************************************//
context.idEstadoActivo = row_a01.ID;


    nb_line_tJavaRow_5++;   

 


	tos_count_tJavaRow_5++;

/**
 * [tJavaRow_5 main ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_8 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

}
}finally{
	if (rs_tOracleInput_8 != null) {
		rs_tOracleInput_8.close();
	}
	if (stmt_tOracleInput_8 != null) {
		stmt_tOracleInput_8.close();
	}
}

globalMap.put("tOracleInput_8_NB_LINE",nb_line_tOracleInput_8);
 

ok_Hash.put("tOracleInput_8", true);
end_Hash.put("tOracleInput_8", System.currentTimeMillis());




/**
 * [tOracleInput_8 end ] stop
 */

	
	/**
	 * [tJavaRow_5 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

globalMap.put("tJavaRow_5_NB_LINE",nb_line_tJavaRow_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row_a01");
			  	}
			  	
 

ok_Hash.put("tJavaRow_5", true);
end_Hash.put("tJavaRow_5", System.currentTimeMillis());




/**
 * [tJavaRow_5 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tOracleInput_11Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 finally ] stop
 */

	
	/**
	 * [tJavaRow_5 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row_a02Struct implements routines.system.IPersistableRow<row_a02Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_a02Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_a02Struct row_a02 = new row_a02Struct();




	
	/**
	 * [tJavaRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_8", false);
		start_Hash.put("tJavaRow_8", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row_a02");
					}
				
		int tos_count_tJavaRow_8 = 0;
		

int nb_line_tJavaRow_8 = 0;

 



/**
 * [tJavaRow_8 begin ] stop
 */



	
	/**
	 * [tOracleInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_11", false);
		start_Hash.put("tOracleInput_11", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_11";
	
	
		int tos_count_tOracleInput_11 = 0;
		
	


	
		    int nb_line_tOracleInput_11 = 0;
		    java.sql.Connection conn_tOracleInput_11 = null;
				conn_tOracleInput_11 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_11 = false;
				boolean isConnectionWrapped_tOracleInput_11 = !(conn_tOracleInput_11 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_11.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_11 = null;
                if (isConnectionWrapped_tOracleInput_11) {
					unwrappedOraConn_tOracleInput_11 = conn_tOracleInput_11.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_11 != null) {
                        isTimeZoneNull_tOracleInput_11 = (unwrappedOraConn_tOracleInput_11.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_11 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_11).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_11) {
					java.sql.Statement stmtGetTZ_tOracleInput_11 = conn_tOracleInput_11.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_11 = stmtGetTZ_tOracleInput_11.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_11 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_11.next()) {
						sessionTimezone_tOracleInput_11 = rsGetTZ_tOracleInput_11.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_11 && unwrappedOraConn_tOracleInput_11 != null) {
                        unwrappedOraConn_tOracleInput_11.setSessionTimeZone(sessionTimezone_tOracleInput_11);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_11).setSessionTimeZone(sessionTimezone_tOracleInput_11);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_11 = conn_tOracleInput_11.createStatement();

		    String dbquery_tOracleInput_11 = "SELECT MAX(EST.ID) AS ID\nFROM AFI_ESTADOS EST\nWHERE EST.NOMBRE = '"+context.nombreEstadoInactivo+"' AND\nEST.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_11_QUERY",dbquery_tOracleInput_11);

		    java.sql.ResultSet rs_tOracleInput_11 = null;

		    try {
		    	rs_tOracleInput_11 = stmt_tOracleInput_11.executeQuery(dbquery_tOracleInput_11);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_11 = rs_tOracleInput_11.getMetaData();
		    	int colQtyInRs_tOracleInput_11 = rsmd_tOracleInput_11.getColumnCount();

		    String tmpContent_tOracleInput_11 = null;
		    
		    
		    while (rs_tOracleInput_11.next()) {
		        nb_line_tOracleInput_11++;
		        
							if(colQtyInRs_tOracleInput_11 < 1) {
								row_a02.ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(1) != null) {
						row_a02.ID = rs_tOracleInput_11.getInt(1);
					} else {
				
						row_a02.ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_11 begin ] stop
 */
	
	/**
	 * [tOracleInput_11 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 


	tos_count_tOracleInput_11++;

/**
 * [tOracleInput_11 main ] stop
 */
	
	/**
	 * [tOracleInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_8 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row_a02"
						
						);
					}
					

    //****************************************************************************************//
//*** VARIABLES QUE ALMACENAN EL VALOR DEL ID DEL ESTADO PROVISIONAL *********************//
//****************************************************************************************//
context.idEstadoInactivo = row_a02.ID;
    nb_line_tJavaRow_8++;   

 


	tos_count_tJavaRow_8++;

/**
 * [tJavaRow_8 main ] stop
 */
	
	/**
	 * [tJavaRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_11 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

}
}finally{
	if (rs_tOracleInput_11 != null) {
		rs_tOracleInput_11.close();
	}
	if (stmt_tOracleInput_11 != null) {
		stmt_tOracleInput_11.close();
	}
}

globalMap.put("tOracleInput_11_NB_LINE",nb_line_tOracleInput_11);
 

ok_Hash.put("tOracleInput_11", true);
end_Hash.put("tOracleInput_11", System.currentTimeMillis());




/**
 * [tOracleInput_11 end ] stop
 */

	
	/**
	 * [tJavaRow_8 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

globalMap.put("tJavaRow_8_NB_LINE",nb_line_tJavaRow_8);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row_a02");
			  	}
			  	
 

ok_Hash.put("tJavaRow_8", true);
end_Hash.put("tJavaRow_8", System.currentTimeMillis());




/**
 * [tJavaRow_8 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_11:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tOracleInput_10Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_11 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 finally ] stop
 */

	
	/**
	 * [tJavaRow_8 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row_a03Struct implements routines.system.IPersistableRow<row_a03Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_a03Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_a03Struct row_a03 = new row_a03Struct();




	
	/**
	 * [tJavaRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_6", false);
		start_Hash.put("tJavaRow_6", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row_a03");
					}
				
		int tos_count_tJavaRow_6 = 0;
		

int nb_line_tJavaRow_6 = 0;

 



/**
 * [tJavaRow_6 begin ] stop
 */



	
	/**
	 * [tOracleInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_10", false);
		start_Hash.put("tOracleInput_10", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_10";
	
	
		int tos_count_tOracleInput_10 = 0;
		
	


	
		    int nb_line_tOracleInput_10 = 0;
		    java.sql.Connection conn_tOracleInput_10 = null;
				conn_tOracleInput_10 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_10 = false;
				boolean isConnectionWrapped_tOracleInput_10 = !(conn_tOracleInput_10 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_10.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_10 = null;
                if (isConnectionWrapped_tOracleInput_10) {
					unwrappedOraConn_tOracleInput_10 = conn_tOracleInput_10.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_10 != null) {
                        isTimeZoneNull_tOracleInput_10 = (unwrappedOraConn_tOracleInput_10.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_10 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_10).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_10) {
					java.sql.Statement stmtGetTZ_tOracleInput_10 = conn_tOracleInput_10.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_10 = stmtGetTZ_tOracleInput_10.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_10 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_10.next()) {
						sessionTimezone_tOracleInput_10 = rsGetTZ_tOracleInput_10.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_10 && unwrappedOraConn_tOracleInput_10 != null) {
                        unwrappedOraConn_tOracleInput_10.setSessionTimeZone(sessionTimezone_tOracleInput_10);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_10).setSessionTimeZone(sessionTimezone_tOracleInput_10);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_10 = conn_tOracleInput_10.createStatement();

		    String dbquery_tOracleInput_10 = "SELECT MAX(EST.ID) AS ID\nFROM AFI_ESTADOS EST\nWHERE EST.NOMBRE = '"+context.nombreEstadoProvisional+"' AND\nEST.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_10_QUERY",dbquery_tOracleInput_10);

		    java.sql.ResultSet rs_tOracleInput_10 = null;

		    try {
		    	rs_tOracleInput_10 = stmt_tOracleInput_10.executeQuery(dbquery_tOracleInput_10);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_10 = rs_tOracleInput_10.getMetaData();
		    	int colQtyInRs_tOracleInput_10 = rsmd_tOracleInput_10.getColumnCount();

		    String tmpContent_tOracleInput_10 = null;
		    
		    
		    while (rs_tOracleInput_10.next()) {
		        nb_line_tOracleInput_10++;
		        
							if(colQtyInRs_tOracleInput_10 < 1) {
								row_a03.ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(1) != null) {
						row_a03.ID = rs_tOracleInput_10.getInt(1);
					} else {
				
						row_a03.ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_10 begin ] stop
 */
	
	/**
	 * [tOracleInput_10 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 


	tos_count_tOracleInput_10++;

/**
 * [tOracleInput_10 main ] stop
 */
	
	/**
	 * [tOracleInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_6 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row_a03"
						
						);
					}
					

    //****************************************************************************************//
//*** VARIABLES QUE ALMACENAN EL VALOR DEL ID DEL ESTADO PROVISIONAL *********************//
//****************************************************************************************//
context.idEstadoProvisional = row_a03.ID;
    nb_line_tJavaRow_6++;   

 


	tos_count_tJavaRow_6++;

/**
 * [tJavaRow_6 main ] stop
 */
	
	/**
	 * [tJavaRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_10 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

}
}finally{
	if (rs_tOracleInput_10 != null) {
		rs_tOracleInput_10.close();
	}
	if (stmt_tOracleInput_10 != null) {
		stmt_tOracleInput_10.close();
	}
}

globalMap.put("tOracleInput_10_NB_LINE",nb_line_tOracleInput_10);
 

ok_Hash.put("tOracleInput_10", true);
end_Hash.put("tOracleInput_10", System.currentTimeMillis());




/**
 * [tOracleInput_10 end ] stop
 */

	
	/**
	 * [tJavaRow_6 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

globalMap.put("tJavaRow_6_NB_LINE",nb_line_tJavaRow_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row_a03");
			  	}
			  	
 

ok_Hash.put("tJavaRow_6", true);
end_Hash.put("tJavaRow_6", System.currentTimeMillis());




/**
 * [tJavaRow_6 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_10:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tOracleInput_14Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_10 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 finally ] stop
 */

	
	/**
	 * [tJavaRow_6 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row_b01Struct implements routines.system.IPersistableRow<row_b01Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 0;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_b01Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_b01Struct row_b01 = new row_b01Struct();




	
	/**
	 * [tJavaRow_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_11", false);
		start_Hash.put("tJavaRow_11", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row_b01");
					}
				
		int tos_count_tJavaRow_11 = 0;
		

int nb_line_tJavaRow_11 = 0;

 



/**
 * [tJavaRow_11 begin ] stop
 */



	
	/**
	 * [tOracleInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_14", false);
		start_Hash.put("tOracleInput_14", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_14";
	
	
		int tos_count_tOracleInput_14 = 0;
		
	


	
		    int nb_line_tOracleInput_14 = 0;
		    java.sql.Connection conn_tOracleInput_14 = null;
				conn_tOracleInput_14 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_14 = false;
				boolean isConnectionWrapped_tOracleInput_14 = !(conn_tOracleInput_14 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_14.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_14 = null;
                if (isConnectionWrapped_tOracleInput_14) {
					unwrappedOraConn_tOracleInput_14 = conn_tOracleInput_14.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_14 != null) {
                        isTimeZoneNull_tOracleInput_14 = (unwrappedOraConn_tOracleInput_14.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_14 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_14).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_14) {
					java.sql.Statement stmtGetTZ_tOracleInput_14 = conn_tOracleInput_14.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_14 = stmtGetTZ_tOracleInput_14.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_14 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_14.next()) {
						sessionTimezone_tOracleInput_14 = rsGetTZ_tOracleInput_14.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_14 && unwrappedOraConn_tOracleInput_14 != null) {
                        unwrappedOraConn_tOracleInput_14.setSessionTimeZone(sessionTimezone_tOracleInput_14);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_14).setSessionTimeZone(sessionTimezone_tOracleInput_14);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_14 = conn_tOracleInput_14.createStatement();

		    String dbquery_tOracleInput_14 = "SELECT\nAME.ID,\nAME.NOMBRE\nFROM AFI_MOTIVOSESTADO AME\nWHERE AME.SIGLA = '"+context.auxSiglaMotivoEstadoActivo+"'";
		    

		    globalMap.put("tOracleInput_14_QUERY",dbquery_tOracleInput_14);

		    java.sql.ResultSet rs_tOracleInput_14 = null;

		    try {
		    	rs_tOracleInput_14 = stmt_tOracleInput_14.executeQuery(dbquery_tOracleInput_14);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_14 = rs_tOracleInput_14.getMetaData();
		    	int colQtyInRs_tOracleInput_14 = rsmd_tOracleInput_14.getColumnCount();

		    String tmpContent_tOracleInput_14 = null;
		    
		    
		    while (rs_tOracleInput_14.next()) {
		        nb_line_tOracleInput_14++;
		        
							if(colQtyInRs_tOracleInput_14 < 1) {
								row_b01.ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(1) != null) {
						row_b01.ID = rs_tOracleInput_14.getInt(1);
					} else {
				
						row_b01.ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 2) {
								row_b01.NOMBRE = null;
							} else {
	                         		
        	row_b01.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 2, false);
		                    }
					




 



/**
 * [tOracleInput_14 begin ] stop
 */
	
	/**
	 * [tOracleInput_14 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 


	tos_count_tOracleInput_14++;

/**
 * [tOracleInput_14 main ] stop
 */
	
	/**
	 * [tOracleInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_11 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row_b01"
						
						);
					}
					

    //****************************************************************************************//
//*** VARIABLES QUE SE USARAN PARA VALIDAR EL MOTIVO DEL ESTADO **************************//
//****************************************************************************************//
context.auxInfoMotivoIdActivo=row_b01.ID;
context.auxInfoMotivoNombreActivo=row_b01.NOMBRE;

    nb_line_tJavaRow_11++;   

 


	tos_count_tJavaRow_11++;

/**
 * [tJavaRow_11 main ] stop
 */
	
	/**
	 * [tJavaRow_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";
	
	

 



/**
 * [tJavaRow_11 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";
	
	

 



/**
 * [tJavaRow_11 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_14 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

}
}finally{
	if (rs_tOracleInput_14 != null) {
		rs_tOracleInput_14.close();
	}
	if (stmt_tOracleInput_14 != null) {
		stmt_tOracleInput_14.close();
	}
}

globalMap.put("tOracleInput_14_NB_LINE",nb_line_tOracleInput_14);
 

ok_Hash.put("tOracleInput_14", true);
end_Hash.put("tOracleInput_14", System.currentTimeMillis());




/**
 * [tOracleInput_14 end ] stop
 */

	
	/**
	 * [tJavaRow_11 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";
	
	

globalMap.put("tJavaRow_11_NB_LINE",nb_line_tJavaRow_11);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row_b01");
			  	}
			  	
 

ok_Hash.put("tJavaRow_11", true);
end_Hash.put("tJavaRow_11", System.currentTimeMillis());




/**
 * [tJavaRow_11 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_14:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tOracleInput_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_14 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 finally ] stop
 */

	
	/**
	 * [tJavaRow_11 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";
	
	

 



/**
 * [tJavaRow_11 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_14_SUBPROCESS_STATE", 1);
	}
	


public static class row_b02Struct implements routines.system.IPersistableRow<row_b02Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 0;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_b02Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_b02Struct row_b02 = new row_b02Struct();




	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row_b02");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_6", false);
		start_Hash.put("tOracleInput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_6";
	
	
		int tos_count_tOracleInput_6 = 0;
		
	


	
		    int nb_line_tOracleInput_6 = 0;
		    java.sql.Connection conn_tOracleInput_6 = null;
				conn_tOracleInput_6 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_6 = false;
				boolean isConnectionWrapped_tOracleInput_6 = !(conn_tOracleInput_6 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_6.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_6 = null;
                if (isConnectionWrapped_tOracleInput_6) {
					unwrappedOraConn_tOracleInput_6 = conn_tOracleInput_6.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_6 != null) {
                        isTimeZoneNull_tOracleInput_6 = (unwrappedOraConn_tOracleInput_6.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_6 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_6).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_6) {
					java.sql.Statement stmtGetTZ_tOracleInput_6 = conn_tOracleInput_6.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_6 = stmtGetTZ_tOracleInput_6.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_6 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_6.next()) {
						sessionTimezone_tOracleInput_6 = rsGetTZ_tOracleInput_6.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_6 && unwrappedOraConn_tOracleInput_6 != null) {
                        unwrappedOraConn_tOracleInput_6.setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_6).setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_6 = conn_tOracleInput_6.createStatement();

		    String dbquery_tOracleInput_6 = "SELECT\nAME.ID,\nAME.NOMBRE\nFROM AFI_MOTIVOSESTADO AME\nWHERE AME.SIGLA = '"+context.auxSiglaMotivoEstadoInactivo+"'";
		    

		    globalMap.put("tOracleInput_6_QUERY",dbquery_tOracleInput_6);

		    java.sql.ResultSet rs_tOracleInput_6 = null;

		    try {
		    	rs_tOracleInput_6 = stmt_tOracleInput_6.executeQuery(dbquery_tOracleInput_6);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_6 = rs_tOracleInput_6.getMetaData();
		    	int colQtyInRs_tOracleInput_6 = rsmd_tOracleInput_6.getColumnCount();

		    String tmpContent_tOracleInput_6 = null;
		    
		    
		    while (rs_tOracleInput_6.next()) {
		        nb_line_tOracleInput_6++;
		        
							if(colQtyInRs_tOracleInput_6 < 1) {
								row_b02.ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(1) != null) {
						row_b02.ID = rs_tOracleInput_6.getInt(1);
					} else {
				
						row_b02.ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 2) {
								row_b02.NOMBRE = null;
							} else {
	                         		
        	row_b02.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 2, false);
		                    }
					




 



/**
 * [tOracleInput_6 begin ] stop
 */
	
	/**
	 * [tOracleInput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 


	tos_count_tOracleInput_6++;

/**
 * [tOracleInput_6 main ] stop
 */
	
	/**
	 * [tOracleInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row_b02"
						
						);
					}
					

    //****************************************************************************************//
//*** VARIABLES QUE SE USARAN PARA VALIDAR EL MOTIVO DEL ESTADO **************************//
//****************************************************************************************//
context.auxInfoMotivoIdInactivo=row_b02.ID;
context.auxInfoMotivoNombreInactivo=row_b02.NOMBRE;

    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

}
}finally{
	if (rs_tOracleInput_6 != null) {
		rs_tOracleInput_6.close();
	}
	if (stmt_tOracleInput_6 != null) {
		stmt_tOracleInput_6.close();
	}
}

globalMap.put("tOracleInput_6_NB_LINE",nb_line_tOracleInput_6);
 

ok_Hash.put("tOracleInput_6", true);
end_Hash.put("tOracleInput_6", System.currentTimeMillis());




/**
 * [tOracleInput_6 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row_b02");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tOracleInput_9Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row_b03Struct implements routines.system.IPersistableRow<row_b03Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 0;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_b03Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_b03Struct row_b03 = new row_b03Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row_b03");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_9", false);
		start_Hash.put("tOracleInput_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_9";
	
	
		int tos_count_tOracleInput_9 = 0;
		
	


	
		    int nb_line_tOracleInput_9 = 0;
		    java.sql.Connection conn_tOracleInput_9 = null;
				conn_tOracleInput_9 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_9 = false;
				boolean isConnectionWrapped_tOracleInput_9 = !(conn_tOracleInput_9 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_9.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_9 = null;
                if (isConnectionWrapped_tOracleInput_9) {
					unwrappedOraConn_tOracleInput_9 = conn_tOracleInput_9.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_9 != null) {
                        isTimeZoneNull_tOracleInput_9 = (unwrappedOraConn_tOracleInput_9.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_9 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_9).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_9) {
					java.sql.Statement stmtGetTZ_tOracleInput_9 = conn_tOracleInput_9.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_9 = stmtGetTZ_tOracleInput_9.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_9 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_9.next()) {
						sessionTimezone_tOracleInput_9 = rsGetTZ_tOracleInput_9.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_9 && unwrappedOraConn_tOracleInput_9 != null) {
                        unwrappedOraConn_tOracleInput_9.setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_9).setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_9 = conn_tOracleInput_9.createStatement();

		    String dbquery_tOracleInput_9 = "SELECT\nAME.ID,\nAME.NOMBRE\nFROM AFI_MOTIVOSESTADO AME\nWHERE AME.SIGLA = '"+context.auxSiglaMotivoEstadoProvisional+"'";
		    

		    globalMap.put("tOracleInput_9_QUERY",dbquery_tOracleInput_9);

		    java.sql.ResultSet rs_tOracleInput_9 = null;

		    try {
		    	rs_tOracleInput_9 = stmt_tOracleInput_9.executeQuery(dbquery_tOracleInput_9);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_9 = rs_tOracleInput_9.getMetaData();
		    	int colQtyInRs_tOracleInput_9 = rsmd_tOracleInput_9.getColumnCount();

		    String tmpContent_tOracleInput_9 = null;
		    
		    
		    while (rs_tOracleInput_9.next()) {
		        nb_line_tOracleInput_9++;
		        
							if(colQtyInRs_tOracleInput_9 < 1) {
								row_b03.ID = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(1) != null) {
						row_b03.ID = rs_tOracleInput_9.getInt(1);
					} else {
				
						row_b03.ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 2) {
								row_b03.NOMBRE = null;
							} else {
	                         		
        	row_b03.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_9, 2, false);
		                    }
					




 



/**
 * [tOracleInput_9 begin ] stop
 */
	
	/**
	 * [tOracleInput_9 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 


	tos_count_tOracleInput_9++;

/**
 * [tOracleInput_9 main ] stop
 */
	
	/**
	 * [tOracleInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row_b03"
						
						);
					}
					

    //****************************************************************************************//
//*** VARIABLES QUE SE USARAN PARA VALIDAR EL MOTIVO DEL ESTADO **************************//
//****************************************************************************************//
context.auxInfoMotivoIdProvisional=row_b03.ID;
context.auxInfoMotivoNombreProvisional=row_b03.NOMBRE;

    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_9 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

}
}finally{
	if (rs_tOracleInput_9 != null) {
		rs_tOracleInput_9.close();
	}
	if (stmt_tOracleInput_9 != null) {
		stmt_tOracleInput_9.close();
	}
}

globalMap.put("tOracleInput_9_NB_LINE",nb_line_tOracleInput_9);
 

ok_Hash.put("tOracleInput_9", true);
end_Hash.put("tOracleInput_9", System.currentTimeMillis());




/**
 * [tOracleInput_9 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row_b03");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_9:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tOracleInput_12Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row_c01Struct implements routines.system.IPersistableRow<row_c01Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_c01Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_c01Struct row_c01 = new row_c01Struct();




	
	/**
	 * [tJavaRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_9", false);
		start_Hash.put("tJavaRow_9", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row_c01");
					}
				
		int tos_count_tJavaRow_9 = 0;
		

int nb_line_tJavaRow_9 = 0;

 



/**
 * [tJavaRow_9 begin ] stop
 */



	
	/**
	 * [tOracleInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_12", false);
		start_Hash.put("tOracleInput_12", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_12";
	
	
		int tos_count_tOracleInput_12 = 0;
		
	


	
		    int nb_line_tOracleInput_12 = 0;
		    java.sql.Connection conn_tOracleInput_12 = null;
				conn_tOracleInput_12 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_12 = false;
				boolean isConnectionWrapped_tOracleInput_12 = !(conn_tOracleInput_12 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_12.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_12 = null;
                if (isConnectionWrapped_tOracleInput_12) {
					unwrappedOraConn_tOracleInput_12 = conn_tOracleInput_12.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_12 != null) {
                        isTimeZoneNull_tOracleInput_12 = (unwrappedOraConn_tOracleInput_12.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_12 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_12).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_12) {
					java.sql.Statement stmtGetTZ_tOracleInput_12 = conn_tOracleInput_12.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_12 = stmtGetTZ_tOracleInput_12.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_12 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_12.next()) {
						sessionTimezone_tOracleInput_12 = rsGetTZ_tOracleInput_12.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_12 && unwrappedOraConn_tOracleInput_12 != null) {
                        unwrappedOraConn_tOracleInput_12.setSessionTimeZone(sessionTimezone_tOracleInput_12);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_12).setSessionTimeZone(sessionTimezone_tOracleInput_12);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_12 = conn_tOracleInput_12.createStatement();

		    String dbquery_tOracleInput_12 = "SELECT MAX(ID) AS ID\nFROM AFI_RNOVEDADES\nWHERE CODIGO = '"+context.RnovedadesActivoId+"'";
		    

		    globalMap.put("tOracleInput_12_QUERY",dbquery_tOracleInput_12);

		    java.sql.ResultSet rs_tOracleInput_12 = null;

		    try {
		    	rs_tOracleInput_12 = stmt_tOracleInput_12.executeQuery(dbquery_tOracleInput_12);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_12 = rs_tOracleInput_12.getMetaData();
		    	int colQtyInRs_tOracleInput_12 = rsmd_tOracleInput_12.getColumnCount();

		    String tmpContent_tOracleInput_12 = null;
		    
		    
		    while (rs_tOracleInput_12.next()) {
		        nb_line_tOracleInput_12++;
		        
							if(colQtyInRs_tOracleInput_12 < 1) {
								row_c01.ID = null;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(1) != null) {
						row_c01.ID = rs_tOracleInput_12.getInt(1);
					} else {
				
						row_c01.ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_12 begin ] stop
 */
	
	/**
	 * [tOracleInput_12 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 


	tos_count_tOracleInput_12++;

/**
 * [tOracleInput_12 main ] stop
 */
	
	/**
	 * [tOracleInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_9 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row_c01"
						
						);
					}
					

    //****************************************************************************************//
//*** VARIABLES QUE SE USARAN PARA INSERTAR EN HAFILIADOS ********************************//
//****************************************************************************************//
context.auxInfoRnovedadesActivo = row_c01.ID;
    nb_line_tJavaRow_9++;   

 


	tos_count_tJavaRow_9++;

/**
 * [tJavaRow_9 main ] stop
 */
	
	/**
	 * [tJavaRow_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

 



/**
 * [tJavaRow_9 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

 



/**
 * [tJavaRow_9 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_12 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

}
}finally{
	if (rs_tOracleInput_12 != null) {
		rs_tOracleInput_12.close();
	}
	if (stmt_tOracleInput_12 != null) {
		stmt_tOracleInput_12.close();
	}
}

globalMap.put("tOracleInput_12_NB_LINE",nb_line_tOracleInput_12);
 

ok_Hash.put("tOracleInput_12", true);
end_Hash.put("tOracleInput_12", System.currentTimeMillis());




/**
 * [tOracleInput_12 end ] stop
 */

	
	/**
	 * [tJavaRow_9 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

globalMap.put("tJavaRow_9_NB_LINE",nb_line_tJavaRow_9);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row_c01");
			  	}
			  	
 

ok_Hash.put("tJavaRow_9", true);
end_Hash.put("tJavaRow_9", System.currentTimeMillis());




/**
 * [tJavaRow_9 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_12:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tOracleInput_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_12 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 finally ] stop
 */

	
	/**
	 * [tJavaRow_9 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

 



/**
 * [tJavaRow_9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class row_c02Struct implements routines.system.IPersistableRow<row_c02Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_c02Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_c02Struct row_c02 = new row_c02Struct();




	
	/**
	 * [tJavaRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_4", false);
		start_Hash.put("tJavaRow_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row_c02");
					}
				
		int tos_count_tJavaRow_4 = 0;
		

int nb_line_tJavaRow_4 = 0;

 



/**
 * [tJavaRow_4 begin ] stop
 */



	
	/**
	 * [tOracleInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_7", false);
		start_Hash.put("tOracleInput_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_7";
	
	
		int tos_count_tOracleInput_7 = 0;
		
	


	
		    int nb_line_tOracleInput_7 = 0;
		    java.sql.Connection conn_tOracleInput_7 = null;
				conn_tOracleInput_7 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_7 = false;
				boolean isConnectionWrapped_tOracleInput_7 = !(conn_tOracleInput_7 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_7.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_7 = null;
                if (isConnectionWrapped_tOracleInput_7) {
					unwrappedOraConn_tOracleInput_7 = conn_tOracleInput_7.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_7 != null) {
                        isTimeZoneNull_tOracleInput_7 = (unwrappedOraConn_tOracleInput_7.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_7 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_7).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_7) {
					java.sql.Statement stmtGetTZ_tOracleInput_7 = conn_tOracleInput_7.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_7 = stmtGetTZ_tOracleInput_7.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_7 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_7.next()) {
						sessionTimezone_tOracleInput_7 = rsGetTZ_tOracleInput_7.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_7 && unwrappedOraConn_tOracleInput_7 != null) {
                        unwrappedOraConn_tOracleInput_7.setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_7).setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_7 = conn_tOracleInput_7.createStatement();

		    String dbquery_tOracleInput_7 = "SELECT MAX(ID) AS ID\nFROM AFI_RNOVEDADES\nWHERE CODIGO = '"+context.RnovedadesProvisionalId+"'";
		    

		    globalMap.put("tOracleInput_7_QUERY",dbquery_tOracleInput_7);

		    java.sql.ResultSet rs_tOracleInput_7 = null;

		    try {
		    	rs_tOracleInput_7 = stmt_tOracleInput_7.executeQuery(dbquery_tOracleInput_7);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_7 = rs_tOracleInput_7.getMetaData();
		    	int colQtyInRs_tOracleInput_7 = rsmd_tOracleInput_7.getColumnCount();

		    String tmpContent_tOracleInput_7 = null;
		    
		    
		    while (rs_tOracleInput_7.next()) {
		        nb_line_tOracleInput_7++;
		        
							if(colQtyInRs_tOracleInput_7 < 1) {
								row_c02.ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(1) != null) {
						row_c02.ID = rs_tOracleInput_7.getInt(1);
					} else {
				
						row_c02.ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_7 begin ] stop
 */
	
	/**
	 * [tOracleInput_7 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 


	tos_count_tOracleInput_7++;

/**
 * [tOracleInput_7 main ] stop
 */
	
	/**
	 * [tOracleInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_4 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row_c02"
						
						);
					}
					

    //****************************************************************************************//
//*** VARIABLES QUE SE USARAN PARA INSERTAR EN HAFILIADOS ********************************//
//****************************************************************************************//
context.auxInfoRnovedadesProvisional = row_c02.ID;
    nb_line_tJavaRow_4++;   

 


	tos_count_tJavaRow_4++;

/**
 * [tJavaRow_4 main ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_7 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

}
}finally{
	if (rs_tOracleInput_7 != null) {
		rs_tOracleInput_7.close();
	}
	if (stmt_tOracleInput_7 != null) {
		stmt_tOracleInput_7.close();
	}
}

globalMap.put("tOracleInput_7_NB_LINE",nb_line_tOracleInput_7);
 

ok_Hash.put("tOracleInput_7", true);
end_Hash.put("tOracleInput_7", System.currentTimeMillis());




/**
 * [tOracleInput_7 end ] stop
 */

	
	/**
	 * [tJavaRow_4 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

globalMap.put("tJavaRow_4_NB_LINE",nb_line_tJavaRow_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row_c02");
			  	}
			  	
 

ok_Hash.put("tJavaRow_4", true);
end_Hash.put("tJavaRow_4", System.currentTimeMillis());




/**
 * [tJavaRow_4 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tOracleInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 finally ] stop
 */

	
	/**
	 * [tJavaRow_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row_c03Struct implements routines.system.IPersistableRow<row_c03Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_c03Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_c03Struct row_c03 = new row_c03Struct();




	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row_c03");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_4", false);
		start_Hash.put("tOracleInput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_4";
	
	
		int tos_count_tOracleInput_4 = 0;
		
	


	
		    int nb_line_tOracleInput_4 = 0;
		    java.sql.Connection conn_tOracleInput_4 = null;
				conn_tOracleInput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_4 = false;
				boolean isConnectionWrapped_tOracleInput_4 = !(conn_tOracleInput_4 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_4 = null;
                if (isConnectionWrapped_tOracleInput_4) {
					unwrappedOraConn_tOracleInput_4 = conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_4 != null) {
                        isTimeZoneNull_tOracleInput_4 = (unwrappedOraConn_tOracleInput_4.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_4 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_4).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_4) {
					java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_4.next()) {
						sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_4 && unwrappedOraConn_tOracleInput_4 != null) {
                        unwrappedOraConn_tOracleInput_4.setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement();

		    String dbquery_tOracleInput_4 = "SELECT MAX(ID) AS ID\nFROM AFI_RNOVEDADES\nWHERE CODIGO = '"+context.RnovedadesInactivoId+"'";
		    

		    globalMap.put("tOracleInput_4_QUERY",dbquery_tOracleInput_4);

		    java.sql.ResultSet rs_tOracleInput_4 = null;

		    try {
		    	rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
		    	int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

		    String tmpContent_tOracleInput_4 = null;
		    
		    
		    while (rs_tOracleInput_4.next()) {
		        nb_line_tOracleInput_4++;
		        
							if(colQtyInRs_tOracleInput_4 < 1) {
								row_c03.ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(1) != null) {
						row_c03.ID = rs_tOracleInput_4.getInt(1);
					} else {
				
						row_c03.ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_4 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 


	tos_count_tOracleInput_4++;

/**
 * [tOracleInput_4 main ] stop
 */
	
	/**
	 * [tOracleInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row_c03"
						
						);
					}
					

    //****************************************************************************************//
//*** VARIABLES QUE SE USARAN PARA INSERTAR EN HAFILIADOS ********************************//
//****************************************************************************************//
context.auxInfoRnovedadesInactivo = row_c03.ID;
    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

}
}finally{
	if (rs_tOracleInput_4 != null) {
		rs_tOracleInput_4.close();
	}
	if (stmt_tOracleInput_4 != null) {
		stmt_tOracleInput_4.close();
	}
}

globalMap.put("tOracleInput_4_NB_LINE",nb_line_tOracleInput_4);
 

ok_Hash.put("tOracleInput_4", true);
end_Hash.put("tOracleInput_4", System.currentTimeMillis());




/**
 * [tOracleInput_4 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row_c03");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());




/**
 * [tJavaRow_3 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
								} 
							
							tOracleInput_13Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row_d01Struct implements routines.system.IPersistableRow<row_d01Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public String ID;

				public String getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 0;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+ID);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_d01Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_d01Struct row_d01 = new row_d01Struct();




	
	/**
	 * [tHashOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_4", false);
		start_Hash.put("tHashOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row_d01");
					}
				
		int tos_count_tHashOutput_4 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row_d01Struct> tHashFile_tHashOutput_4 = null;
		String hashKey_tHashOutput_4 = "tHashFile_Criterio_MultiAfiliacion_" + pid + "_tHashOutput_4";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_4)){
			    if(mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4) == null){
	      		    mf_tHashOutput_4.getResourceMap().put(hashKey_tHashOutput_4, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row_d01Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }else{
			    	tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }
			}
        int nb_line_tHashOutput_4 = 0;

 



/**
 * [tHashOutput_4 begin ] stop
 */



	
	/**
	 * [tOracleInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_13", false);
		start_Hash.put("tOracleInput_13", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_13";
	
	
		int tos_count_tOracleInput_13 = 0;
		
	


	
		    int nb_line_tOracleInput_13 = 0;
		    java.sql.Connection conn_tOracleInput_13 = null;
				conn_tOracleInput_13 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_13 = false;
				boolean isConnectionWrapped_tOracleInput_13 = !(conn_tOracleInput_13 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_13.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_13 = null;
                if (isConnectionWrapped_tOracleInput_13) {
					unwrappedOraConn_tOracleInput_13 = conn_tOracleInput_13.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_13 != null) {
                        isTimeZoneNull_tOracleInput_13 = (unwrappedOraConn_tOracleInput_13.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_13 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_13).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_13) {
					java.sql.Statement stmtGetTZ_tOracleInput_13 = conn_tOracleInput_13.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_13 = stmtGetTZ_tOracleInput_13.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_13 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_13.next()) {
						sessionTimezone_tOracleInput_13 = rsGetTZ_tOracleInput_13.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_13 && unwrappedOraConn_tOracleInput_13 != null) {
                        unwrappedOraConn_tOracleInput_13.setSessionTimeZone(sessionTimezone_tOracleInput_13);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_13).setSessionTimeZone(sessionTimezone_tOracleInput_13);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_13 = conn_tOracleInput_13.createStatement();

		    String dbquery_tOracleInput_13 = "SELECT\n  TDOC.ID,\n  TDOC.SIGLA\nFROM\n  GEN_TDOCUMENTOS TDOC \nWHERE\n  TDOC.ESTREGISTRO_ID=1";
		    

		    globalMap.put("tOracleInput_13_QUERY",dbquery_tOracleInput_13);

		    java.sql.ResultSet rs_tOracleInput_13 = null;

		    try {
		    	rs_tOracleInput_13 = stmt_tOracleInput_13.executeQuery(dbquery_tOracleInput_13);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_13 = rs_tOracleInput_13.getMetaData();
		    	int colQtyInRs_tOracleInput_13 = rsmd_tOracleInput_13.getColumnCount();

		    String tmpContent_tOracleInput_13 = null;
		    
		    
		    while (rs_tOracleInput_13.next()) {
		        nb_line_tOracleInput_13++;
		        
							if(colQtyInRs_tOracleInput_13 < 1) {
								row_d01.ID = null;
							} else {
	                         		
        	row_d01.ID = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 2) {
								row_d01.SIGLA = null;
							} else {
	                         		
        	row_d01.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 2, false);
		                    }
					




 



/**
 * [tOracleInput_13 begin ] stop
 */
	
	/**
	 * [tOracleInput_13 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 


	tos_count_tOracleInput_13++;

/**
 * [tOracleInput_13 main ] stop
 */
	
	/**
	 * [tOracleInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_4 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row_d01"
						
						);
					}
					



    
		row_d01Struct oneRow_tHashOutput_4 = new row_d01Struct();
				
					oneRow_tHashOutput_4.ID = row_d01.ID;
					oneRow_tHashOutput_4.SIGLA = row_d01.SIGLA;
		
        tHashFile_tHashOutput_4.put(oneRow_tHashOutput_4);
        nb_line_tHashOutput_4 ++;

 


	tos_count_tHashOutput_4++;

/**
 * [tHashOutput_4 main ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_13 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

}
}finally{
	if (rs_tOracleInput_13 != null) {
		rs_tOracleInput_13.close();
	}
	if (stmt_tOracleInput_13 != null) {
		stmt_tOracleInput_13.close();
	}
}

globalMap.put("tOracleInput_13_NB_LINE",nb_line_tOracleInput_13);
 

ok_Hash.put("tOracleInput_13", true);
end_Hash.put("tOracleInput_13", System.currentTimeMillis());




/**
 * [tOracleInput_13 end ] stop
 */

	
	/**
	 * [tHashOutput_4 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
globalMap.put("tHashOutput_4_NB_LINE", nb_line_tHashOutput_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row_d01");
			  	}
			  	
 

ok_Hash.put("tHashOutput_4", true);
end_Hash.put("tHashOutput_4", System.currentTimeMillis());




/**
 * [tHashOutput_4 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_13:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tOracleInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_13 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 finally ] stop
 */

	
	/**
	 * [tHashOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class row_d02Struct implements routines.system.IPersistableRow<row_d02Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public String ID;

				public String getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String PADRE_ID;

				public String getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return true;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return 0;
				}
				public Integer PADRE_IDPrecision(){
				    return 0;
				}
				public String PADRE_IDDefault(){
				
					return null;
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				
			    public String PARENTESCOS_ID;

				public String getPARENTESCOS_ID () {
					return this.PARENTESCOS_ID;
				}

				public Boolean PARENTESCOS_IDIsNullable(){
				    return true;
				}
				public Boolean PARENTESCOS_IDIsKey(){
				    return false;
				}
				public Integer PARENTESCOS_IDLength(){
				    return 0;
				}
				public Integer PARENTESCOS_IDPrecision(){
				    return 0;
				}
				public String PARENTESCOS_IDDefault(){
				
					return null;
				
				}
				public String PARENTESCOS_IDComment(){
				
				    return "";
				
				}
				public String PARENTESCOS_IDPattern(){
				
					return "";
				
				}
				public String PARENTESCOS_IDOriginalDbColumnName(){
				
					return "PARENTESCOS_ID";
				
				}

				
			    public String PLANAFILIACIONES_ID;

				public String getPLANAFILIACIONES_ID () {
					return this.PLANAFILIACIONES_ID;
				}

				public Boolean PLANAFILIACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean PLANAFILIACIONES_IDIsKey(){
				    return false;
				}
				public Integer PLANAFILIACIONES_IDLength(){
				    return 0;
				}
				public Integer PLANAFILIACIONES_IDPrecision(){
				    return 0;
				}
				public String PLANAFILIACIONES_IDDefault(){
				
					return null;
				
				}
				public String PLANAFILIACIONES_IDComment(){
				
				    return "";
				
				}
				public String PLANAFILIACIONES_IDPattern(){
				
					return "";
				
				}
				public String PLANAFILIACIONES_IDOriginalDbColumnName(){
				
					return "PLANAFILIACIONES_ID";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 0;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 0;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 0;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 0;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 0;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
					this.PADRE_ID = readString(dis);
					
					this.PARENTESCOS_ID = readString(dis);
					
					this.PLANAFILIACIONES_ID = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
					this.PADRE_ID = readString(dis);
					
					this.PARENTESCOS_ID = readString(dis);
					
					this.PLANAFILIACIONES_ID = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
					// String
				
						writeString(this.PADRE_ID,dos);
					
					// String
				
						writeString(this.PARENTESCOS_ID,dos);
					
					// String
				
						writeString(this.PLANAFILIACIONES_ID,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
					// String
				
						writeString(this.PADRE_ID,dos);
					
					// String
				
						writeString(this.PARENTESCOS_ID,dos);
					
					// String
				
						writeString(this.PLANAFILIACIONES_ID,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+ID);
		sb.append(",PADRE_ID="+PADRE_ID);
		sb.append(",PARENTESCOS_ID="+PARENTESCOS_ID);
		sb.append(",PLANAFILIACIONES_ID="+PLANAFILIACIONES_ID);
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_d02Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_d02Struct row_d02 = new row_d02Struct();




	
	/**
	 * [tHashOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_3", false);
		start_Hash.put("tHashOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row_d02");
					}
				
		int tos_count_tHashOutput_3 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row_d02Struct> tHashFile_tHashOutput_3 = null;
		String hashKey_tHashOutput_3 = "tHashFile_Criterio_MultiAfiliacion_" + pid + "_tHashOutput_3";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_3)){
			    if(mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null){
	      		    mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row_d02Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }else{
			    	tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }
			}
        int nb_line_tHashOutput_3 = 0;

 



/**
 * [tHashOutput_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				conn_tOracleInput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_3 = false;
				boolean isConnectionWrapped_tOracleInput_3 = !(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_3 = null;
                if (isConnectionWrapped_tOracleInput_3) {
					unwrappedOraConn_tOracleInput_3 = conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_3 != null) {
                        isTimeZoneNull_tOracleInput_3 = (unwrappedOraConn_tOracleInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_3 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_3) {
					java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_3.next()) {
						sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_3 && unwrappedOraConn_tOracleInput_3 != null) {
                        unwrappedOraConn_tOracleInput_3.setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement();

		    String dbquery_tOracleInput_3 = "SELECT\n\n	DISTINCT    GA.ID,\n	GA.PADRE_ID,\n	GA.PARENTESCOS_ID,\n	GA.PLANAFILIACIONES_ID,\n	GP.TDOCUMENTOS_ID AS TIPO"
+"_DOCUMENTO,\n	GP.DOCUMENTO,\n	GP.PRIMER_NOMBRE,\n	GP.SEGUNDO_NOMBRE,\n	GP.PRIMER_APELLIDO, \n	GP.SEGUNDO_APELLIDO,\n	HES"
+".FECHA\nFROM\n  GEN_AFILIADOS GA\n  INNER JOIN GEN_PERSONAS GP ON GA.PERSONAS_ID=GP.ID\n  INNER JOIN AFI_HESTADOS HES ON"
+" HES.AFILIADOS_ID = GA.ID\nWHERE \n  --CONDICION: ULTIMO ESTADO\n  (SELECT MAX(ID) FROM AFI_HESTADOS WHERE AFILIADOS_ID="
+"GA.ID)=HES.ID AND\n  --EVALUACION: SOLO USUARIOS PROVISIONALES\n    GA.ESTAFILIACION = '"+context.nombreEstadoProvisional+"' AND\n  --EVALUACION: MOTIVO DE ESTADO CRITERIO\n  HES.MOTIVOSESTADO_ID = '"+context.auxInfoMotivoIdProvisional+"' AND\n--REGISTROS ACTIVOS\n	GA.ESTREGISTRO_ID=1 AND\n	HES.ESTREGISTRO_ID=1 ";
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row_d02.ID = null;
							} else {
	                         		
        	row_d02.ID = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 2) {
								row_d02.PADRE_ID = null;
							} else {
	                         		
        	row_d02.PADRE_ID = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 3) {
								row_d02.PARENTESCOS_ID = null;
							} else {
	                         		
        	row_d02.PARENTESCOS_ID = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 4) {
								row_d02.PLANAFILIACIONES_ID = null;
							} else {
	                         		
        	row_d02.PLANAFILIACIONES_ID = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 5) {
								row_d02.TIPO_DOCUMENTO = null;
							} else {
	                         		
        	row_d02.TIPO_DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 6) {
								row_d02.DOCUMENTO = null;
							} else {
	                         		
        	row_d02.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 7) {
								row_d02.PRIMER_NOMBRE = null;
							} else {
	                         		
        	row_d02.PRIMER_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 8) {
								row_d02.SEGUNDO_NOMBRE = null;
							} else {
	                         		
        	row_d02.SEGUNDO_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 9) {
								row_d02.PRIMER_APELLIDO = null;
							} else {
	                         		
        	row_d02.PRIMER_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 10) {
								row_d02.SEGUNDO_APELLIDO = null;
							} else {
	                         		
        	row_d02.SEGUNDO_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 11) {
								row_d02.FECHA = null;
							} else {
										
			row_d02.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_3, 11);
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_3 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row_d02"
						
						);
					}
					



    
		row_d02Struct oneRow_tHashOutput_3 = new row_d02Struct();
				
					oneRow_tHashOutput_3.ID = row_d02.ID;
					oneRow_tHashOutput_3.PADRE_ID = row_d02.PADRE_ID;
					oneRow_tHashOutput_3.PARENTESCOS_ID = row_d02.PARENTESCOS_ID;
					oneRow_tHashOutput_3.PLANAFILIACIONES_ID = row_d02.PLANAFILIACIONES_ID;
					oneRow_tHashOutput_3.TIPO_DOCUMENTO = row_d02.TIPO_DOCUMENTO;
					oneRow_tHashOutput_3.DOCUMENTO = row_d02.DOCUMENTO;
					oneRow_tHashOutput_3.PRIMER_NOMBRE = row_d02.PRIMER_NOMBRE;
					oneRow_tHashOutput_3.SEGUNDO_NOMBRE = row_d02.SEGUNDO_NOMBRE;
					oneRow_tHashOutput_3.PRIMER_APELLIDO = row_d02.PRIMER_APELLIDO;
					oneRow_tHashOutput_3.SEGUNDO_APELLIDO = row_d02.SEGUNDO_APELLIDO;
					oneRow_tHashOutput_3.FECHA = row_d02.FECHA;
		
        tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
        nb_line_tHashOutput_3 ++;

 


	tos_count_tHashOutput_3++;

/**
 * [tHashOutput_3 main ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tHashOutput_3 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row_d02");
			  	}
			  	
 

ok_Hash.put("tHashOutput_3", true);
end_Hash.put("tHashOutput_3", System.currentTimeMillis());




/**
 * [tHashOutput_3 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tLoop_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tHashOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public void tLoop_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLoop_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tLoop_2 begin ] start
	 */

				
			int NB_ITERATE_tJava_6 = 0; //for statistics
			

	
		
		ok_Hash.put("tLoop_2", false);
		start_Hash.put("tLoop_2", System.currentTimeMillis());
		
	
	currentComponent="tLoop_2";
	
	
		int tos_count_tLoop_2 = 0;
		

int current_iteration_tLoop_2 = 0;

;
	
while((((Integer)globalMap.get("tHashOutput_3_NB_LINE"))>(Integer)context.auxPosicionRegistros+context.auxAumentoRegistros)||(context.auxPrimerLoop)){
	
current_iteration_tLoop_2++;
globalMap.put("tLoop_2_CURRENT_ITERATION",current_iteration_tLoop_2);


 



/**
 * [tLoop_2 begin ] stop
 */
	
	/**
	 * [tLoop_2 main ] start
	 */

	

	
	
	currentComponent="tLoop_2";
	
	

 


	tos_count_tLoop_2++;

/**
 * [tLoop_2 main ] stop
 */
	
	/**
	 * [tLoop_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLoop_2";
	
	

 



/**
 * [tLoop_2 process_data_begin ] stop
 */
	NB_ITERATE_tJava_6++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row30", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row32", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tOracleInput_5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk19", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row34", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row_ina", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row_doc_act", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row35", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row23", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row26", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row21", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row29", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row37", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row39", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row33", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk15", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row28", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("coincidencias_activacion", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row38", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk17", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row_doc_act", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row_doc_ina", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row_doc_ina", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row24", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row_act", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row25", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tOracleInput_5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk21", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row36", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row22", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("coincidencias_inactivacion", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk16", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row31", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row21", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tOracleInput_5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk20", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk18", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row40", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate5", 1, "exec" + NB_ITERATE_tJava_6);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJava_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_6", false);
		start_Hash.put("tJava_6", System.currentTimeMillis());
		
	
	currentComponent="tJava_6";
	
	
		int tos_count_tJava_6 = 0;
		


//****************************************************************************************//
//*** INICIALIZACION VARIABLES DE RANGOS *************************************************//
//****************************************************************************************//

int rangoInferior=0;

int rangoSuperior=0;

//****************************************************************************************//
//*** ALMACENAMIENTO EN VARIABLES DE CONTEXTO DE LA NUEVA POSICION DE LA CONSULTA     ****//
//****************************************************************************************//

context.auxPrimerLoop=false;

context.auxPosicionRegistros=(((Integer)globalMap.get("tLoop_2_CURRENT_ITERATION"))-1)*context.auxAumentoRegistros;

rangoInferior=context.auxPosicionRegistros+1;

rangoSuperior=((Integer)globalMap.get("tHashOutput_3_NB_LINE"));

if(context.auxPosicionRegistros==0){

	rangoInferior=0;
	
}

if((context.auxPosicionRegistros+context.auxAumentoRegistros)<((Integer)globalMap.get("tHashOutput_3_NB_LINE"))){

	rangoSuperior=context.auxPosicionRegistros+context.auxAumentoRegistros;
	
}

context.auxRango=rangoInferior+".."+rangoSuperior;

//System.out.println("Rango Loop 02: "+context.auxRango+" de: "+globalMap.get("tHashOutput_3_NB_LINE"));
 



/**
 * [tJava_6 begin ] stop
 */
	
	/**
	 * [tJava_6 main ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 


	tos_count_tJava_6++;

/**
 * [tJava_6 main ] stop
 */
	
	/**
	 * [tJava_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 process_data_begin ] stop
 */
	
	/**
	 * [tJava_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 process_data_end ] stop
 */
	
	/**
	 * [tJava_6 end ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 

ok_Hash.put("tJava_6", true);
end_Hash.put("tJava_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tHashInput_4Process(globalMap);



/**
 * [tJava_6 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate5", 2, "exec" + NB_ITERATE_tJava_6);
						}				
					




	
	/**
	 * [tLoop_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLoop_2";
	
	

 



/**
 * [tLoop_2 process_data_end ] stop
 */
	
	/**
	 * [tLoop_2 end ] start
	 */

	

	
	
	currentComponent="tLoop_2";
	
	




;


}


 

ok_Hash.put("tLoop_2", true);
end_Hash.put("tLoop_2", System.currentTimeMillis());




/**
 * [tLoop_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLoop_2 finally ] start
	 */

	

	
	
	currentComponent="tLoop_2";
	
	

 



/**
 * [tLoop_2 finally ] stop
 */

	
	/**
	 * [tJava_6 finally ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLoop_2_SUBPROCESS_STATE", 1);
	}
	


public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public String ID;

				public String getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+ID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtDenormalize_2 implements routines.system.IPersistableRow<OnRowsEndStructtDenormalize_2> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public String ID;

				public String getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+ID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtDenormalize_2 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public String ID;

				public String getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+ID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public String ID;

				public String getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String PADRE_ID;

				public String getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return true;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return 0;
				}
				public Integer PADRE_IDPrecision(){
				    return 0;
				}
				public String PADRE_IDDefault(){
				
					return null;
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				
			    public String PARENTESCOS_ID;

				public String getPARENTESCOS_ID () {
					return this.PARENTESCOS_ID;
				}

				public Boolean PARENTESCOS_IDIsNullable(){
				    return true;
				}
				public Boolean PARENTESCOS_IDIsKey(){
				    return false;
				}
				public Integer PARENTESCOS_IDLength(){
				    return 0;
				}
				public Integer PARENTESCOS_IDPrecision(){
				    return 0;
				}
				public String PARENTESCOS_IDDefault(){
				
					return null;
				
				}
				public String PARENTESCOS_IDComment(){
				
				    return "";
				
				}
				public String PARENTESCOS_IDPattern(){
				
					return "";
				
				}
				public String PARENTESCOS_IDOriginalDbColumnName(){
				
					return "PARENTESCOS_ID";
				
				}

				
			    public String PLANAFILIACIONES_ID;

				public String getPLANAFILIACIONES_ID () {
					return this.PLANAFILIACIONES_ID;
				}

				public Boolean PLANAFILIACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean PLANAFILIACIONES_IDIsKey(){
				    return false;
				}
				public Integer PLANAFILIACIONES_IDLength(){
				    return 0;
				}
				public Integer PLANAFILIACIONES_IDPrecision(){
				    return 0;
				}
				public String PLANAFILIACIONES_IDDefault(){
				
					return null;
				
				}
				public String PLANAFILIACIONES_IDComment(){
				
				    return "";
				
				}
				public String PLANAFILIACIONES_IDPattern(){
				
					return "";
				
				}
				public String PLANAFILIACIONES_IDOriginalDbColumnName(){
				
					return "PLANAFILIACIONES_ID";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 0;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 0;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 0;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 0;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 0;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
					this.PADRE_ID = readString(dis);
					
					this.PARENTESCOS_ID = readString(dis);
					
					this.PLANAFILIACIONES_ID = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
					this.PADRE_ID = readString(dis);
					
					this.PARENTESCOS_ID = readString(dis);
					
					this.PLANAFILIACIONES_ID = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
					// String
				
						writeString(this.PADRE_ID,dos);
					
					// String
				
						writeString(this.PARENTESCOS_ID,dos);
					
					// String
				
						writeString(this.PLANAFILIACIONES_ID,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
					// String
				
						writeString(this.PADRE_ID,dos);
					
					// String
				
						writeString(this.PARENTESCOS_ID,dos);
					
					// String
				
						writeString(this.PLANAFILIACIONES_ID,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+ID);
		sb.append(",PADRE_ID="+PADRE_ID);
		sb.append(",PARENTESCOS_ID="+PARENTESCOS_ID);
		sb.append(",PLANAFILIACIONES_ID="+PLANAFILIACIONES_ID);
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row22Struct row22 = new row22Struct();
row23Struct row23 = new row23Struct();
row24Struct row24 = new row24Struct();





	
	/**
	 * [tDenormalize_2_DenormalizeOut begin ] start
	 */

	

	
		
		ok_Hash.put("tDenormalize_2_DenormalizeOut", false);
		start_Hash.put("tDenormalize_2_DenormalizeOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_DenormalizeOut";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tDenormalize_2_DenormalizeOut = 0;
		

class DenormalizeStructtDenormalize_2_DenormalizeOut {
StringBuilder ID = new StringBuilder();
}
DenormalizeStructtDenormalize_2_DenormalizeOut denormalize_result_tDenormalize_2_DenormalizeOut = null;

 



/**
 * [tDenormalize_2_DenormalizeOut begin ] stop
 */



	
	/**
	 * [tSampleRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSampleRow_2", false);
		start_Hash.put("tSampleRow_2", System.currentTimeMillis());
		
	
	currentComponent="tSampleRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tSampleRow_2 = 0;
		

String[] rangetSampleRow_2 = context.auxRango.split(",");
java.util.Set rangeSettSampleRow_2 = new java.util.HashSet();

Integer nb_line_tSampleRow_2 = 0;

for(int i =0;i<rangetSampleRow_2.length;i++){

	if(rangetSampleRow_2[i].matches("\\d+")){
	
		rangeSettSampleRow_2 .add(Integer.valueOf(rangetSampleRow_2[i]));
		
	}else if(rangetSampleRow_2[i].matches("\\d+\\.\\.\\d+")){
		
		String[] edgetSampleRow_2= rangetSampleRow_2[i].split("\\.\\.");
		
		for(int j=Integer.valueOf(edgetSampleRow_2[0]).intValue();j<Integer.valueOf(edgetSampleRow_2[1]).intValue()+1;j++){			
			rangeSettSampleRow_2 .add(Integer.valueOf(j));			
		}		
	}else{
	
	}
	
}



 



/**
 * [tSampleRow_2 begin ] stop
 */



	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";
	
	
		int tos_count_tHashInput_4 = 0;
		


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row_d02Struct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_Criterio_MultiAfiliacion_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row_d02Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    row_d02Struct next_tHashInput_4 = iterator_tHashInput_4.next();

	row22.ID = next_tHashInput_4.ID;
	row22.PADRE_ID = next_tHashInput_4.PADRE_ID;
	row22.PARENTESCOS_ID = next_tHashInput_4.PARENTESCOS_ID;
	row22.PLANAFILIACIONES_ID = next_tHashInput_4.PLANAFILIACIONES_ID;
	row22.TIPO_DOCUMENTO = next_tHashInput_4.TIPO_DOCUMENTO;
	row22.DOCUMENTO = next_tHashInput_4.DOCUMENTO;
	row22.PRIMER_NOMBRE = next_tHashInput_4.PRIMER_NOMBRE;
	row22.SEGUNDO_NOMBRE = next_tHashInput_4.SEGUNDO_NOMBRE;
	row22.PRIMER_APELLIDO = next_tHashInput_4.PRIMER_APELLIDO;
	row22.SEGUNDO_APELLIDO = next_tHashInput_4.SEGUNDO_APELLIDO;
	row22.FECHA = next_tHashInput_4.FECHA;

 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */
	
	/**
	 * [tHashInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tSampleRow_2 main ] start
	 */

	

	
	
	currentComponent="tSampleRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row22"
						
						);
					}
					

	
	nb_line_tSampleRow_2++;
	
 	if(!rangeSettSampleRow_2.contains(nb_line_tSampleRow_2)){        
            row23 = null;            	
 	}else{  	
 	   row23 = new row23Struct();
 	   

       row23.ID = row22.ID;
       
 	
 	}
 
 
 
 
 
 
 
 
 
 
 
 
 


	tos_count_tSampleRow_2++;

/**
 * [tSampleRow_2 main ] stop
 */
	
	/**
	 * [tSampleRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSampleRow_2";
	
	

 



/**
 * [tSampleRow_2 process_data_begin ] stop
 */
// Start of branch "row23"
if(row23 != null) { 



	
	/**
	 * [tDenormalize_2_DenormalizeOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_DenormalizeOut";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row23"
						
						);
					}
					

if(denormalize_result_tDenormalize_2_DenormalizeOut == null){
	denormalize_result_tDenormalize_2_DenormalizeOut = new DenormalizeStructtDenormalize_2_DenormalizeOut();		
	denormalize_result_tDenormalize_2_DenormalizeOut.ID.append(row23.ID);
			
}else{		
	denormalize_result_tDenormalize_2_DenormalizeOut.ID.append(",").append(row23.ID);
			
}

 


	tos_count_tDenormalize_2_DenormalizeOut++;

/**
 * [tDenormalize_2_DenormalizeOut main ] stop
 */
	
	/**
	 * [tDenormalize_2_DenormalizeOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_2_DenormalizeOut process_data_begin ] stop
 */
	
	/**
	 * [tDenormalize_2_DenormalizeOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_2_DenormalizeOut process_data_end ] stop
 */

} // End of branch "row23"




	
	/**
	 * [tSampleRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tSampleRow_2";
	
	

 



/**
 * [tSampleRow_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	
    

		
			nb_line_tHashInput_4++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Criterio_MultiAfiliacion_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */

	
	/**
	 * [tSampleRow_2 end ] start
	 */

	

	
	
	currentComponent="tSampleRow_2";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tSampleRow_2", true);
end_Hash.put("tSampleRow_2", System.currentTimeMillis());




/**
 * [tSampleRow_2 end ] stop
 */

	
	/**
	 * [tDenormalize_2_DenormalizeOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_DenormalizeOut";
	
	
java.util.List<OnRowsEndStructtDenormalize_2> result_list_tDenormalize_2_DenormalizeOut = new java.util.ArrayList<OnRowsEndStructtDenormalize_2>();
if (denormalize_result_tDenormalize_2_DenormalizeOut != null) {
//generate result begin
	OnRowsEndStructtDenormalize_2 denormalize_row_tDenormalize_2_DenormalizeOut = new OnRowsEndStructtDenormalize_2();
                
	denormalize_row_tDenormalize_2_DenormalizeOut.ID = denormalize_result_tDenormalize_2_DenormalizeOut.ID.toString();
	
	//in the deepest end
	
	result_list_tDenormalize_2_DenormalizeOut.add(denormalize_row_tDenormalize_2_DenormalizeOut);

}
//generate result end
globalMap.put("tDenormalize_2", result_list_tDenormalize_2_DenormalizeOut);
globalMap.put("tDenormalize_2_DenormalizeOut_NB_LINE", result_list_tDenormalize_2_DenormalizeOut.size()); 

        


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tDenormalize_2_DenormalizeOut", true);
end_Hash.put("tDenormalize_2_DenormalizeOut", System.currentTimeMillis());




/**
 * [tDenormalize_2_DenormalizeOut end ] stop
 */


	
	/**
	 * [tJavaRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_7", false);
		start_Hash.put("tJavaRow_7", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row24");
					}
				
		int tos_count_tJavaRow_7 = 0;
		

int nb_line_tJavaRow_7 = 0;

 



/**
 * [tJavaRow_7 begin ] stop
 */



	
	/**
	 * [tDenormalize_2_ArrayIn begin ] start
	 */

	

	
		
		ok_Hash.put("tDenormalize_2_ArrayIn", false);
		start_Hash.put("tDenormalize_2_ArrayIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_ArrayIn";
	
	
		int tos_count_tDenormalize_2_ArrayIn = 0;
		

        
        int nb_line_tDenormalize_2_ArrayIn = 0;
        java.util.List<OnRowsEndStructtDenormalize_2> list_tDenormalize_2_ArrayIn = (java.util.List<OnRowsEndStructtDenormalize_2>)globalMap.get("tDenormalize_2");
        if(list_tDenormalize_2_ArrayIn == null) {
            list_tDenormalize_2_ArrayIn = new java.util.ArrayList<OnRowsEndStructtDenormalize_2>();
        }        
        for(OnRowsEndStructtDenormalize_2 row_tDenormalize_2_ArrayIn : list_tDenormalize_2_ArrayIn){
        					
    						row24.ID = row_tDenormalize_2_ArrayIn.ID;
    						

 



/**
 * [tDenormalize_2_ArrayIn begin ] stop
 */
	
	/**
	 * [tDenormalize_2_ArrayIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_ArrayIn";
	
	

 


	tos_count_tDenormalize_2_ArrayIn++;

/**
 * [tDenormalize_2_ArrayIn main ] stop
 */
	
	/**
	 * [tDenormalize_2_ArrayIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_ArrayIn";
	
	

 



/**
 * [tDenormalize_2_ArrayIn process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_7 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row24"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.auxAfiliadosCriterio = row24.ID;

    nb_line_tJavaRow_7++;   

 


	tos_count_tJavaRow_7++;

/**
 * [tJavaRow_7 main ] stop
 */
	
	/**
	 * [tJavaRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_end ] stop
 */



	
	/**
	 * [tDenormalize_2_ArrayIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_ArrayIn";
	
	

 



/**
 * [tDenormalize_2_ArrayIn process_data_end ] stop
 */
	
	/**
	 * [tDenormalize_2_ArrayIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_ArrayIn";
	
	
	nb_line_tDenormalize_2_ArrayIn++;
}
globalMap.put("tDenormalize_2_ArrayIn_NB_LINE",nb_line_tDenormalize_2_ArrayIn);
 

ok_Hash.put("tDenormalize_2_ArrayIn", true);
end_Hash.put("tDenormalize_2_ArrayIn", System.currentTimeMillis());




/**
 * [tDenormalize_2_ArrayIn end ] stop
 */

	
	/**
	 * [tJavaRow_7 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

globalMap.put("tJavaRow_7_NB_LINE",nb_line_tJavaRow_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row24");
			  	}
			  	
 

ok_Hash.put("tJavaRow_7", true);
end_Hash.put("tJavaRow_7", System.currentTimeMillis());

   			if (context.auxAfiliadosCriterio.length()>0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				tOracleInput_5Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_7 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tDenormalize_2_ArrayIn"
							globalMap.remove("tDenormalize_2");
						
				try{
					
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 finally ] stop
 */

	
	/**
	 * [tSampleRow_2 finally ] start
	 */

	

	
	
	currentComponent="tSampleRow_2";
	
	

 



/**
 * [tSampleRow_2 finally ] stop
 */

	
	/**
	 * [tDenormalize_2_DenormalizeOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_2_DenormalizeOut finally ] stop
 */

	
	/**
	 * [tDenormalize_2_ArrayIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_ArrayIn";
	
	

 



/**
 * [tDenormalize_2_ArrayIn finally ] stop
 */

	
	/**
	 * [tJavaRow_7 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class coincidencias_activacionStruct implements routines.system.IPersistableRow<coincidencias_activacionStruct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public String ID;

				public String getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 0;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 0;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 0;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 0;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 0;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+ID);
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(coincidencias_activacionStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class coincidencias_inactivacionStruct implements routines.system.IPersistableRow<coincidencias_inactivacionStruct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public String ID;

				public String getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 0;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 0;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 0;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 0;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 0;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+ID);
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(coincidencias_inactivacionStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row_inaStruct implements routines.system.IPersistableRow<row_inaStruct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public String ID;

				public String getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 0;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 0;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 0;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 0;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 0;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+ID);
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_inaStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row_actStruct implements routines.system.IPersistableRow<row_actStruct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public String ID;

				public String getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 0;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 0;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 0;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 0;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 0;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+ID);
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_actStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public String ID;

				public String getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String PADRE_ID;

				public String getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return true;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return 0;
				}
				public Integer PADRE_IDPrecision(){
				    return 0;
				}
				public String PADRE_IDDefault(){
				
					return null;
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				
			    public String PARENTESCOS_ID;

				public String getPARENTESCOS_ID () {
					return this.PARENTESCOS_ID;
				}

				public Boolean PARENTESCOS_IDIsNullable(){
				    return true;
				}
				public Boolean PARENTESCOS_IDIsKey(){
				    return false;
				}
				public Integer PARENTESCOS_IDLength(){
				    return 0;
				}
				public Integer PARENTESCOS_IDPrecision(){
				    return 0;
				}
				public String PARENTESCOS_IDDefault(){
				
					return null;
				
				}
				public String PARENTESCOS_IDComment(){
				
				    return "";
				
				}
				public String PARENTESCOS_IDPattern(){
				
					return "";
				
				}
				public String PARENTESCOS_IDOriginalDbColumnName(){
				
					return "PARENTESCOS_ID";
				
				}

				
			    public String PLANAFILIACIONES_ID;

				public String getPLANAFILIACIONES_ID () {
					return this.PLANAFILIACIONES_ID;
				}

				public Boolean PLANAFILIACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean PLANAFILIACIONES_IDIsKey(){
				    return false;
				}
				public Integer PLANAFILIACIONES_IDLength(){
				    return 0;
				}
				public Integer PLANAFILIACIONES_IDPrecision(){
				    return 0;
				}
				public String PLANAFILIACIONES_IDDefault(){
				
					return null;
				
				}
				public String PLANAFILIACIONES_IDComment(){
				
				    return "";
				
				}
				public String PLANAFILIACIONES_IDPattern(){
				
					return "";
				
				}
				public String PLANAFILIACIONES_IDOriginalDbColumnName(){
				
					return "PLANAFILIACIONES_ID";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 0;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 0;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 0;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 0;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 0;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public BigDecimal VIGENCIA;

				public BigDecimal getVIGENCIA () {
					return this.VIGENCIA;
				}

				public Boolean VIGENCIAIsNullable(){
				    return true;
				}
				public Boolean VIGENCIAIsKey(){
				    return false;
				}
				public Integer VIGENCIALength(){
				    return 0;
				}
				public Integer VIGENCIAPrecision(){
				    return 0;
				}
				public String VIGENCIADefault(){
				
					return null;
				
				}
				public String VIGENCIAComment(){
				
				    return "";
				
				}
				public String VIGENCIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VIGENCIAOriginalDbColumnName(){
				
					return "VIGENCIA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
					this.PADRE_ID = readString(dis);
					
					this.PARENTESCOS_ID = readString(dis);
					
					this.PLANAFILIACIONES_ID = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
						this.VIGENCIA = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
					this.PADRE_ID = readString(dis);
					
					this.PARENTESCOS_ID = readString(dis);
					
					this.PLANAFILIACIONES_ID = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
						this.VIGENCIA = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
					// String
				
						writeString(this.PADRE_ID,dos);
					
					// String
				
						writeString(this.PARENTESCOS_ID,dos);
					
					// String
				
						writeString(this.PLANAFILIACIONES_ID,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VIGENCIA);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
					// String
				
						writeString(this.PADRE_ID,dos);
					
					// String
				
						writeString(this.PARENTESCOS_ID,dos);
					
					// String
				
						writeString(this.PLANAFILIACIONES_ID,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VIGENCIA);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+ID);
		sb.append(",PADRE_ID="+PADRE_ID);
		sb.append(",PARENTESCOS_ID="+PARENTESCOS_ID);
		sb.append(",PLANAFILIACIONES_ID="+PLANAFILIACIONES_ID);
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",VIGENCIA="+String.valueOf(VIGENCIA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_5Struct implements routines.system.IPersistableRow<after_tOracleInput_5Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public String ID;

				public String getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String PADRE_ID;

				public String getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return true;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return 0;
				}
				public Integer PADRE_IDPrecision(){
				    return 0;
				}
				public String PADRE_IDDefault(){
				
					return null;
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				
			    public String PARENTESCOS_ID;

				public String getPARENTESCOS_ID () {
					return this.PARENTESCOS_ID;
				}

				public Boolean PARENTESCOS_IDIsNullable(){
				    return true;
				}
				public Boolean PARENTESCOS_IDIsKey(){
				    return false;
				}
				public Integer PARENTESCOS_IDLength(){
				    return 0;
				}
				public Integer PARENTESCOS_IDPrecision(){
				    return 0;
				}
				public String PARENTESCOS_IDDefault(){
				
					return null;
				
				}
				public String PARENTESCOS_IDComment(){
				
				    return "";
				
				}
				public String PARENTESCOS_IDPattern(){
				
					return "";
				
				}
				public String PARENTESCOS_IDOriginalDbColumnName(){
				
					return "PARENTESCOS_ID";
				
				}

				
			    public String PLANAFILIACIONES_ID;

				public String getPLANAFILIACIONES_ID () {
					return this.PLANAFILIACIONES_ID;
				}

				public Boolean PLANAFILIACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean PLANAFILIACIONES_IDIsKey(){
				    return false;
				}
				public Integer PLANAFILIACIONES_IDLength(){
				    return 0;
				}
				public Integer PLANAFILIACIONES_IDPrecision(){
				    return 0;
				}
				public String PLANAFILIACIONES_IDDefault(){
				
					return null;
				
				}
				public String PLANAFILIACIONES_IDComment(){
				
				    return "";
				
				}
				public String PLANAFILIACIONES_IDPattern(){
				
					return "";
				
				}
				public String PLANAFILIACIONES_IDOriginalDbColumnName(){
				
					return "PLANAFILIACIONES_ID";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 0;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 0;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 0;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 0;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 0;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public BigDecimal VIGENCIA;

				public BigDecimal getVIGENCIA () {
					return this.VIGENCIA;
				}

				public Boolean VIGENCIAIsNullable(){
				    return true;
				}
				public Boolean VIGENCIAIsKey(){
				    return false;
				}
				public Integer VIGENCIALength(){
				    return 0;
				}
				public Integer VIGENCIAPrecision(){
				    return 0;
				}
				public String VIGENCIADefault(){
				
					return null;
				
				}
				public String VIGENCIAComment(){
				
				    return "";
				
				}
				public String VIGENCIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VIGENCIAOriginalDbColumnName(){
				
					return "VIGENCIA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
					this.PADRE_ID = readString(dis);
					
					this.PARENTESCOS_ID = readString(dis);
					
					this.PLANAFILIACIONES_ID = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
						this.VIGENCIA = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
					this.PADRE_ID = readString(dis);
					
					this.PARENTESCOS_ID = readString(dis);
					
					this.PLANAFILIACIONES_ID = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
						this.VIGENCIA = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
					// String
				
						writeString(this.PADRE_ID,dos);
					
					// String
				
						writeString(this.PARENTESCOS_ID,dos);
					
					// String
				
						writeString(this.PLANAFILIACIONES_ID,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VIGENCIA);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
					// String
				
						writeString(this.PADRE_ID,dos);
					
					// String
				
						writeString(this.PARENTESCOS_ID,dos);
					
					// String
				
						writeString(this.PLANAFILIACIONES_ID,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VIGENCIA);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+ID);
		sb.append(",PADRE_ID="+PADRE_ID);
		sb.append(",PARENTESCOS_ID="+PARENTESCOS_ID);
		sb.append(",PLANAFILIACIONES_ID="+PLANAFILIACIONES_ID);
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",VIGENCIA="+String.valueOf(VIGENCIA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_3Process(globalMap);
		tHashInput_7Process(globalMap);
		tHashInput_8Process(globalMap);

		row25Struct row25 = new row25Struct();
row_inaStruct row_ina = new row_inaStruct();
coincidencias_inactivacionStruct coincidencias_inactivacion = new coincidencias_inactivacionStruct();
row_actStruct row_act = new row_actStruct();
coincidencias_activacionStruct coincidencias_activacion = new coincidencias_activacionStruct();






	
	/**
	 * [tFlowToIterate_2 begin ] start
	 */

				
			int NB_ITERATE_tJava_8 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_2", false);
		start_Hash.put("tFlowToIterate_2", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"coincidencias_inactivacion");
					}
				
		int tos_count_tFlowToIterate_2 = 0;
		

int nb_line_tFlowToIterate_2 = 0;
int counter_tFlowToIterate_2 = 0;

 



/**
 * [tFlowToIterate_2 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row_ina");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_doc_inaStruct> tHash_Lookup_row_doc_ina = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_doc_inaStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_doc_inaStruct>) 
					globalMap.get( "tHash_Lookup_row_doc_ina" ))
					;					
					
	

row_doc_inaStruct row_doc_inaHashKey = new row_doc_inaStruct();
row_doc_inaStruct row_doc_inaDefault = new row_doc_inaStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
coincidencias_inactivacionStruct coincidencias_inactivacion_tmp = new coincidencias_inactivacionStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */





	
	/**
	 * [tFlowToIterate_3 begin ] start
	 */

				
			int NB_ITERATE_tJava_10 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_3", false);
		start_Hash.put("tFlowToIterate_3", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"coincidencias_activacion");
					}
				
		int tos_count_tFlowToIterate_3 = 0;
		

int nb_line_tFlowToIterate_3 = 0;
int counter_tFlowToIterate_3 = 0;

 



/**
 * [tFlowToIterate_3 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row_act");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_doc_actStruct> tHash_Lookup_row_doc_act = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_doc_actStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_doc_actStruct>) 
					globalMap.get( "tHash_Lookup_row_doc_act" ))
					;					
					
	

row_doc_actStruct row_doc_actHashKey = new row_doc_actStruct();
row_doc_actStruct row_doc_actDefault = new row_doc_actStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
coincidencias_activacionStruct coincidencias_activacion_tmp = new coincidencias_activacionStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) 
					globalMap.get( "tHash_Lookup_row21" ))
					;					
					
	

row21Struct row21HashKey = new row21Struct();
row21Struct row21Default = new row21Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
row_inaStruct row_ina_tmp = new row_inaStruct();
row_actStruct row_act_tmp = new row_actStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_5", false);
		start_Hash.put("tOracleInput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_5";
	
	
		int tos_count_tOracleInput_5 = 0;
		
	


	
		    int nb_line_tOracleInput_5 = 0;
		    java.sql.Connection conn_tOracleInput_5 = null;
				conn_tOracleInput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_5 = false;
				boolean isConnectionWrapped_tOracleInput_5 = !(conn_tOracleInput_5 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_5 = null;
                if (isConnectionWrapped_tOracleInput_5) {
					unwrappedOraConn_tOracleInput_5 = conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_5 != null) {
                        isTimeZoneNull_tOracleInput_5 = (unwrappedOraConn_tOracleInput_5.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_5 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_5).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_5) {
					java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_5 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_5.next()) {
						sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_5 && unwrappedOraConn_tOracleInput_5 != null) {
                        unwrappedOraConn_tOracleInput_5.setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_5).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5.createStatement();

		    String dbquery_tOracleInput_5 = "SELECT \n  DISTINCT GA.ID,\n  GA.PADRE_ID,\n  GA.PARENTESCOS_ID,\n  GA.PLANAFILIACIONES_ID,\n  GP.TDOCUMENTOS_ID AS TIP"
+"O_DOCUMENTO,\n  GP.DOCUMENTO,\n  GP.PRIMER_NOMBRE,\n  GP.SEGUNDO_NOMBRE,\n  GP.PRIMER_APELLIDO, \n  GP.SEGUNDO_APELLIDO,"
+" \n CASE \n  WHEN ARA.VIGENCIA IS NULL THEN 1\n  WHEN ARA.VIGENCIA < SYSDATE THEN 1\n  ELSE 2 END AS VIGENCIA\nFROM\n  G"
+"EN_AFILIADOS GA\n  INNER JOIN GEN_PERSONAS GP ON GA.PERSONAS_ID=GP.ID\n  LEFT JOIN AFI_RDOCUMENTOS ARA ON ARA.AFILIADOS_"
+"ID = GA.ID AND   ARA.ESTADO='Activo' AND   ARA.ESTREGISTRO_ID = 1 \n  LEFT JOIN AFI_TRDOCUMENTOS TRD ON ARA.TRDOCUMENTOS"
+"_ID=TRD.ID AND TRD.ESTREGISTRO_ID = 1  AND  TRD.CODIGO= '11' \nWHERE\n  GA.ID IN  ("+context.auxAfiliadosCriterio+")  AND\n  --CONDICION DOCUMENTO ENTREGA CERTIFICADO DE ESTUDIO\n  GA.ESTREGISTRO_ID = 1 AND\n  GP.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_5_QUERY",dbquery_tOracleInput_5);

		    java.sql.ResultSet rs_tOracleInput_5 = null;

		    try {
		    	rs_tOracleInput_5 = stmt_tOracleInput_5.executeQuery(dbquery_tOracleInput_5);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5.getMetaData();
		    	int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5.getColumnCount();

		    String tmpContent_tOracleInput_5 = null;
		    
		    
		    while (rs_tOracleInput_5.next()) {
		        nb_line_tOracleInput_5++;
		        
							if(colQtyInRs_tOracleInput_5 < 1) {
								row25.ID = null;
							} else {
	                         		
        	row25.ID = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 2) {
								row25.PADRE_ID = null;
							} else {
	                         		
        	row25.PADRE_ID = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 3) {
								row25.PARENTESCOS_ID = null;
							} else {
	                         		
        	row25.PARENTESCOS_ID = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 4) {
								row25.PLANAFILIACIONES_ID = null;
							} else {
	                         		
        	row25.PLANAFILIACIONES_ID = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 5) {
								row25.TIPO_DOCUMENTO = null;
							} else {
	                         		
        	row25.TIPO_DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 6) {
								row25.DOCUMENTO = null;
							} else {
	                         		
        	row25.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 7) {
								row25.PRIMER_NOMBRE = null;
							} else {
	                         		
        	row25.PRIMER_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 8) {
								row25.SEGUNDO_NOMBRE = null;
							} else {
	                         		
        	row25.SEGUNDO_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 9) {
								row25.PRIMER_APELLIDO = null;
							} else {
	                         		
        	row25.PRIMER_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 10) {
								row25.SEGUNDO_APELLIDO = null;
							} else {
	                         		
        	row25.SEGUNDO_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 11) {
								row25.VIGENCIA = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(11) != null) {
						row25.VIGENCIA = rs_tOracleInput_5.getBigDecimal(11);
					} else {
				
						row25.VIGENCIA = null;
					}
		                    }
					




 



/**
 * [tOracleInput_5 begin ] stop
 */
	
	/**
	 * [tOracleInput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 


	tos_count_tOracleInput_5++;

/**
 * [tOracleInput_5 main ] stop
 */
	
	/**
	 * [tOracleInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row25"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
						row21Struct row21 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row21" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow21 = false;
       		  	    	
       		  	    	
 							row21Struct row21ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row21HashKey.ID = row25.ID ;
                        		    		

								
		                        	row21HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row21.lookup( row21HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row21 != null && tHash_Lookup_row21.getCount(row21HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row21' and it contains more one result from keys :  row21.ID = '" + row21HashKey.ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row21Struct fromLookup_row21 = null;
							row21 = row21Default;
										 
							
								 
							
							
								if (tHash_Lookup_row21 !=null && tHash_Lookup_row21.hasNext()) { // G 099
								
							
								
								fromLookup_row21 = tHash_Lookup_row21.next();

							
							
								} // G 099
							
							

							if(fromLookup_row21 != null) {
								row21 = fromLookup_row21;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

row_ina = null;
row_act = null;


// # Output table : 'row_ina'
// # Filter conditions 
if( 

row25.VIGENCIA.intValue()==1&& ((TalendDate.diffDate(TalendDate.getCurrentDate(),row21.FECHA,"dd"))>30)

 ) {
row_ina_tmp.ID = row25.ID ;
row_ina_tmp.TIPO_DOCUMENTO = row25.TIPO_DOCUMENTO ;
row_ina_tmp.DOCUMENTO = row25.DOCUMENTO ;
row_ina_tmp.PRIMER_NOMBRE = row25.PRIMER_NOMBRE ;
row_ina_tmp.SEGUNDO_NOMBRE = row25.SEGUNDO_NOMBRE ;
row_ina_tmp.PRIMER_APELLIDO = row25.PRIMER_APELLIDO ;
row_ina_tmp.SEGUNDO_APELLIDO = row25.SEGUNDO_APELLIDO ;
row_ina = row_ina_tmp;
} // closing filter/reject

// # Output table : 'row_act'
// # Filter conditions 
if( 

row25.VIGENCIA.intValue() ==2

 ) {
row_act_tmp.ID = row25.ID ;
row_act_tmp.TIPO_DOCUMENTO = row25.TIPO_DOCUMENTO ;
row_act_tmp.DOCUMENTO = row25.DOCUMENTO ;
row_act_tmp.PRIMER_NOMBRE = row25.PRIMER_NOMBRE ;
row_act_tmp.SEGUNDO_NOMBRE = row25.SEGUNDO_NOMBRE ;
row_act_tmp.PRIMER_APELLIDO = row25.PRIMER_APELLIDO ;
row_act_tmp.SEGUNDO_APELLIDO = row25.SEGUNDO_APELLIDO ;
row_act = row_act_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "row_ina"
if(row_ina != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row_ina"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
						row_doc_inaStruct row_doc_ina = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row_doc_ina" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow_doc_ina = false;
       		  	    	
       		  	    	
 							row_doc_inaStruct row_doc_inaObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row_doc_inaHashKey.ID = row_ina.TIPO_DOCUMENTO ;
                        		    		

								
		                        	row_doc_inaHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row_doc_ina.lookup( row_doc_inaHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row_doc_ina.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_4 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row_doc_ina != null && tHash_Lookup_row_doc_ina.getCount(row_doc_inaHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row_doc_ina' and it contains more one result from keys :  row_doc_ina.ID = '" + row_doc_inaHashKey.ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row_doc_inaStruct fromLookup_row_doc_ina = null;
							row_doc_ina = row_doc_inaDefault;
										 
							
								 
							
							
								if (tHash_Lookup_row_doc_ina !=null && tHash_Lookup_row_doc_ina.hasNext()) { // G 099
								
							
								
								fromLookup_row_doc_ina = tHash_Lookup_row_doc_ina.next();

							
							
								} // G 099
							
							

							if(fromLookup_row_doc_ina != null) {
								row_doc_ina = fromLookup_row_doc_ina;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

coincidencias_inactivacion = null;

if(!rejectedInnerJoin_tMap_4 ) {

// # Output table : 'coincidencias_inactivacion'
coincidencias_inactivacion_tmp.ID = row_ina.ID ;
coincidencias_inactivacion_tmp.TIPO_DOCUMENTO = row_doc_ina.SIGLA ;
coincidencias_inactivacion_tmp.DOCUMENTO = row_ina.DOCUMENTO ;
coincidencias_inactivacion_tmp.PRIMER_NOMBRE = row_ina.PRIMER_NOMBRE ;
coincidencias_inactivacion_tmp.SEGUNDO_NOMBRE = row_ina.SEGUNDO_NOMBRE ;
coincidencias_inactivacion_tmp.PRIMER_APELLIDO = row_ina.PRIMER_APELLIDO ;
coincidencias_inactivacion_tmp.SEGUNDO_APELLIDO = row_ina.SEGUNDO_APELLIDO ;
coincidencias_inactivacion = coincidencias_inactivacion_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "coincidencias_inactivacion"
if(coincidencias_inactivacion != null) { 



	
	/**
	 * [tFlowToIterate_2 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"coincidencias_inactivacion"
						
						);
					}
					


    	            
            globalMap.put("coincidencias_inactivacion.ID", coincidencias_inactivacion.ID);
    	            
            globalMap.put("coincidencias_inactivacion.TIPO_DOCUMENTO", coincidencias_inactivacion.TIPO_DOCUMENTO);
    	            
            globalMap.put("coincidencias_inactivacion.DOCUMENTO", coincidencias_inactivacion.DOCUMENTO);
    	            
            globalMap.put("coincidencias_inactivacion.PRIMER_NOMBRE", coincidencias_inactivacion.PRIMER_NOMBRE);
    	            
            globalMap.put("coincidencias_inactivacion.SEGUNDO_NOMBRE", coincidencias_inactivacion.SEGUNDO_NOMBRE);
    	            
            globalMap.put("coincidencias_inactivacion.PRIMER_APELLIDO", coincidencias_inactivacion.PRIMER_APELLIDO);
    	            
            globalMap.put("coincidencias_inactivacion.SEGUNDO_APELLIDO", coincidencias_inactivacion.SEGUNDO_APELLIDO);
    	
 
	   nb_line_tFlowToIterate_2++;  
       counter_tFlowToIterate_2++;
       globalMap.put("tFlowToIterate_2_CURRENT_ITERATION", counter_tFlowToIterate_2);
 


	tos_count_tFlowToIterate_2++;

/**
 * [tFlowToIterate_2 main ] stop
 */
	
	/**
	 * [tFlowToIterate_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	

 



/**
 * [tFlowToIterate_2 process_data_begin ] stop
 */
	NB_ITERATE_tJava_8++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row30", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row32", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row26", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk17", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row29", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk16", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row31", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row33", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row28", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk18", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate6", 1, "exec" + NB_ITERATE_tJava_8);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJava_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_8", false);
		start_Hash.put("tJava_8", System.currentTimeMillis());
		
	
	currentComponent="tJava_8";
	
	
		int tos_count_tJava_8 = 0;
		


//****************************************************************************************//
//*** VARIABLES QUE SE USARAN PARA INSERTAR EN HAFILIADOS ********************************//
//****************************************************************************************//
context.HAF_AFILIADOS_ID = Integer.valueOf(coincidencias_inactivacion.ID);
context.HAF_CAMPO="ESTADOS_ID";
context.HAF_VANTERIOR = context.idEstadoProvisional;
context.HAF_VACTUAL = context.idEstadoInactivo;
context.HAF_MOTIVO = context.auxInfoMotivoNombreInactivo;
context.HAF_RNOVEDADES_ID = context.auxInfoRnovedadesInactivo;

//****************************************************************************************//
//*** VARIABLES QUE SE USARAN PARA INSERTAR EN HESTADOS **********************************//
//****************************************************************************************//
context.HES_AFILIADOS_ID = Integer.valueOf(coincidencias_inactivacion.ID);
context.HES_ESTADOS_ID = context.idEstadoInactivo;
context.HES_FECHA = TalendDate.getCurrentDate();
context.HES_MOTIVOSESTADO_ID = context.auxInfoMotivoIdInactivo;

//****************************************************************************************//
//*** VARIABLES QUE SE USARAN PARA EL ARCHIVO DE SALIDA **********************************//
//****************************************************************************************//
context.AS_TIPO_DOCUMENTO = coincidencias_inactivacion.TIPO_DOCUMENTO;
context.AS_DOCUMENTO = coincidencias_inactivacion.DOCUMENTO;
context.AS_PRIMER_NOMBRE = coincidencias_inactivacion.PRIMER_NOMBRE;
context.AS_SEGUNDO_NOMBRE = coincidencias_inactivacion.SEGUNDO_NOMBRE;
context.AS_PRIMER_APELLIDO = coincidencias_inactivacion.PRIMER_APELLIDO;
context.AS_SEGUNDO_APELLIDO = coincidencias_inactivacion.SEGUNDO_APELLIDO;

//****************************************************************************************//
//*** REINICIALIZACION DE ID DE AFILIADO *************************************************//
//****************************************************************************************//
context.auxAfiliadosCriterio="";

//****************************************************************************************//
//*** REINICIALIZACION DE ID DE AFILIADO *************************************************//
//****************************************************************************************//
//System.out.println("Coincidencia encontrada paso a inactivacion en Afiliado "+context.HES_AFILIADOS_ID+", procediendo a registro y salida de archivo.");

 



/**
 * [tJava_8 begin ] stop
 */
	
	/**
	 * [tJava_8 main ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 


	tos_count_tJava_8++;

/**
 * [tJava_8 main ] stop
 */
	
	/**
	 * [tJava_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 



/**
 * [tJava_8 process_data_begin ] stop
 */
	
	/**
	 * [tJava_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 



/**
 * [tJava_8 process_data_end ] stop
 */
	
	/**
	 * [tJava_8 end ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 

ok_Hash.put("tJava_8", true);
end_Hash.put("tJava_8", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk16", 0, "ok");
				}
				tFixedFlowInput_4Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk18", 0, "ok");
				}
				tFixedFlowInput_5Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk17", 0, "ok");
				}
				tFixedFlowInput_6Process(globalMap);



/**
 * [tJava_8 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate6", 2, "exec" + NB_ITERATE_tJava_8);
						}				
					




	
	/**
	 * [tFlowToIterate_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	

 



/**
 * [tFlowToIterate_2 process_data_end ] stop
 */

} // End of branch "coincidencias_inactivacion"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "row_ina"




// Start of branch "row_act"
if(row_act != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row_act"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
						row_doc_actStruct row_doc_act = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row_doc_act" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow_doc_act = false;
       		  	    	
       		  	    	
 							row_doc_actStruct row_doc_actObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    row_doc_actHashKey.ID = row_act.TIPO_DOCUMENTO ;
                        		    		

								
		                        	row_doc_actHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row_doc_act.lookup( row_doc_actHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row_doc_act.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_5 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row_doc_act != null && tHash_Lookup_row_doc_act.getCount(row_doc_actHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row_doc_act' and it contains more one result from keys :  row_doc_act.ID = '" + row_doc_actHashKey.ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row_doc_actStruct fromLookup_row_doc_act = null;
							row_doc_act = row_doc_actDefault;
										 
							
								 
							
							
								if (tHash_Lookup_row_doc_act !=null && tHash_Lookup_row_doc_act.hasNext()) { // G 099
								
							
								
								fromLookup_row_doc_act = tHash_Lookup_row_doc_act.next();

							
							
								} // G 099
							
							

							if(fromLookup_row_doc_act != null) {
								row_doc_act = fromLookup_row_doc_act;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

coincidencias_activacion = null;

if(!rejectedInnerJoin_tMap_5 ) {

// # Output table : 'coincidencias_activacion'
coincidencias_activacion_tmp.ID = row_act.ID ;
coincidencias_activacion_tmp.TIPO_DOCUMENTO = row_doc_act.SIGLA ;
coincidencias_activacion_tmp.DOCUMENTO = row_act.DOCUMENTO ;
coincidencias_activacion_tmp.PRIMER_NOMBRE = row_act.PRIMER_NOMBRE ;
coincidencias_activacion_tmp.SEGUNDO_NOMBRE = row_act.SEGUNDO_NOMBRE ;
coincidencias_activacion_tmp.PRIMER_APELLIDO = row_act.PRIMER_APELLIDO ;
coincidencias_activacion_tmp.SEGUNDO_APELLIDO = row_act.SEGUNDO_APELLIDO ;
coincidencias_activacion = coincidencias_activacion_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "coincidencias_activacion"
if(coincidencias_activacion != null) { 



	
	/**
	 * [tFlowToIterate_3 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"coincidencias_activacion"
						
						);
					}
					


    	            
            globalMap.put("coincidencias_activacion.ID", coincidencias_activacion.ID);
    	            
            globalMap.put("coincidencias_activacion.TIPO_DOCUMENTO", coincidencias_activacion.TIPO_DOCUMENTO);
    	            
            globalMap.put("coincidencias_activacion.DOCUMENTO", coincidencias_activacion.DOCUMENTO);
    	            
            globalMap.put("coincidencias_activacion.PRIMER_NOMBRE", coincidencias_activacion.PRIMER_NOMBRE);
    	            
            globalMap.put("coincidencias_activacion.SEGUNDO_NOMBRE", coincidencias_activacion.SEGUNDO_NOMBRE);
    	            
            globalMap.put("coincidencias_activacion.PRIMER_APELLIDO", coincidencias_activacion.PRIMER_APELLIDO);
    	            
            globalMap.put("coincidencias_activacion.SEGUNDO_APELLIDO", coincidencias_activacion.SEGUNDO_APELLIDO);
    	
 
	   nb_line_tFlowToIterate_3++;  
       counter_tFlowToIterate_3++;
       globalMap.put("tFlowToIterate_3_CURRENT_ITERATION", counter_tFlowToIterate_3);
 


	tos_count_tFlowToIterate_3++;

/**
 * [tFlowToIterate_3 main ] stop
 */
	
	/**
	 * [tFlowToIterate_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_3";
	
	

 



/**
 * [tFlowToIterate_3 process_data_begin ] stop
 */
	NB_ITERATE_tJava_10++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row38", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk21", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk19", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row34", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row36", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row37", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row35", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row39", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk20", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row40", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate7", 1, "exec" + NB_ITERATE_tJava_10);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJava_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_10", false);
		start_Hash.put("tJava_10", System.currentTimeMillis());
		
	
	currentComponent="tJava_10";
	
	
		int tos_count_tJava_10 = 0;
		


//****************************************************************************************//
//*** VARIABLES QUE SE USARAN PARA INSERTAR EN HAFILIADOS ********************************//
//****************************************************************************************//
context.HAF_AFILIADOS_ID = Integer.valueOf(coincidencias_activacion.ID);
context.HAF_CAMPO="ESTADOS_ID";
context.HAF_VANTERIOR = context.idEstadoProvisional;
context.HAF_VACTUAL = context.idEstadoActivo;
context.HAF_MOTIVO = context.auxInfoMotivoNombreActivo;
context.HAF_RNOVEDADES_ID = context.auxInfoRnovedadesActivo;

//****************************************************************************************//
//*** VARIABLES QUE SE USARAN PARA INSERTAR EN HESTADOS **********************************//
//****************************************************************************************//
context.HES_AFILIADOS_ID = Integer.valueOf(coincidencias_activacion.ID);
context.HES_ESTADOS_ID = context.idEstadoActivo;
context.HES_FECHA = TalendDate.getCurrentDate();
context.HES_MOTIVOSESTADO_ID = context.auxInfoMotivoIdActivo;

//****************************************************************************************//
//*** VARIABLES QUE SE USARAN PARA EL ARCHIVO DE SALIDA **********************************//
//****************************************************************************************//
context.AS_TIPO_DOCUMENTO = coincidencias_activacion.TIPO_DOCUMENTO;
context.AS_DOCUMENTO = coincidencias_activacion.DOCUMENTO;
context.AS_PRIMER_NOMBRE = coincidencias_activacion.PRIMER_NOMBRE;
context.AS_SEGUNDO_NOMBRE = coincidencias_activacion.SEGUNDO_NOMBRE;
context.AS_PRIMER_APELLIDO = coincidencias_activacion.PRIMER_APELLIDO;
context.AS_SEGUNDO_APELLIDO = coincidencias_activacion.SEGUNDO_APELLIDO;

//****************************************************************************************//
//*** REINICIALIZACION DE ID DE AFILIADO *************************************************//
//****************************************************************************************//
context.auxAfiliadosCriterio="";

//****************************************************************************************//
//*** REINICIALIZACION DE ID DE AFILIADO *************************************************//
//****************************************************************************************//
//System.out.println("Coincidencia encontrada paso a activacion en Afiliado "+context.HES_AFILIADOS_ID+", procediendo a registro y salida de archivo.");

 



/**
 * [tJava_10 begin ] stop
 */
	
	/**
	 * [tJava_10 main ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 


	tos_count_tJava_10++;

/**
 * [tJava_10 main ] stop
 */
	
	/**
	 * [tJava_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 



/**
 * [tJava_10 process_data_begin ] stop
 */
	
	/**
	 * [tJava_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 



/**
 * [tJava_10 process_data_end ] stop
 */
	
	/**
	 * [tJava_10 end ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 

ok_Hash.put("tJava_10", true);
end_Hash.put("tJava_10", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk21", 0, "ok");
				}
				tFixedFlowInput_8Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk20", 0, "ok");
				}
				tFixedFlowInput_9Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk19", 0, "ok");
				}
				tFixedFlowInput_7Process(globalMap);



/**
 * [tJava_10 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate7", 2, "exec" + NB_ITERATE_tJava_10);
						}				
					




	
	/**
	 * [tFlowToIterate_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_3";
	
	

 



/**
 * [tFlowToIterate_3 process_data_end ] stop
 */

} // End of branch "coincidencias_activacion"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "row_act"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

}
}finally{
	if (rs_tOracleInput_5 != null) {
		rs_tOracleInput_5.close();
	}
	if (stmt_tOracleInput_5 != null) {
		stmt_tOracleInput_5.close();
	}
}

globalMap.put("tOracleInput_5_NB_LINE",nb_line_tOracleInput_5);
 

ok_Hash.put("tOracleInput_5", true);
end_Hash.put("tOracleInput_5", System.currentTimeMillis());




/**
 * [tOracleInput_5 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row21 != null) {
						tHash_Lookup_row21.endGet();
					}
					globalMap.remove( "tHash_Lookup_row21" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row_doc_ina != null) {
						tHash_Lookup_row_doc_ina.endGet();
					}
					globalMap.remove( "tHash_Lookup_row_doc_ina" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row_ina");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tFlowToIterate_2 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	

globalMap.put("tFlowToIterate_2_NB_LINE",nb_line_tFlowToIterate_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"coincidencias_inactivacion");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_2", true);
end_Hash.put("tFlowToIterate_2", System.currentTimeMillis());




/**
 * [tFlowToIterate_2 end ] stop
 */







	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row_doc_act != null) {
						tHash_Lookup_row_doc_act.endGet();
					}
					globalMap.remove( "tHash_Lookup_row_doc_act" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row_act");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tFlowToIterate_3 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_3";
	
	

globalMap.put("tFlowToIterate_3_NB_LINE",nb_line_tFlowToIterate_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"coincidencias_activacion");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_3", true);
end_Hash.put("tFlowToIterate_3", System.currentTimeMillis());




/**
 * [tFlowToIterate_3 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row_doc_act"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row_doc_ina"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row21"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_2 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	

 



/**
 * [tFlowToIterate_2 finally ] stop
 */

	
	/**
	 * [tJava_8 finally ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 



/**
 * [tJava_8 finally ] stop
 */










	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_3 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_3";
	
	

 



/**
 * [tFlowToIterate_3 finally ] stop
 */

	
	/**
	 * [tJava_10 finally ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 



/**
 * [tJava_10 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 22;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public int PROCESOS_ID;

				public int getPROCESOS_ID () {
					return this.PROCESOS_ID;
				}

				public Boolean PROCESOS_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOS_IDIsKey(){
				    return false;
				}
				public Integer PROCESOS_IDLength(){
				    return 22;
				}
				public Integer PROCESOS_IDPrecision(){
				    return 0;
				}
				public String PROCESOS_IDDefault(){
				
					return null;
				
				}
				public String PROCESOS_IDComment(){
				
				    return "FK - AFI_PROCESOS";
				
				}
				public String PROCESOS_IDPattern(){
				
					return "";
				
				}
				public String PROCESOS_IDOriginalDbColumnName(){
				
					return "PROCESOS_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 500;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "Motivo de la edici\u00F3n";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public int RNOVEDADES_ID;

				public int getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return false;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 22;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return 0;
				}
				public String RNOVEDADES_IDDefault(){
				
					return null;
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "FK - AFI_NOVEDADES";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public Integer VANTERIOR;

				public Integer getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 50;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "Valor anterior";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public Integer VACTUAL;

				public Integer getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 50;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "Valor actual";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String CAMPO;

				public String getCAMPO () {
					return this.CAMPO;
				}

				public Boolean CAMPOIsNullable(){
				    return true;
				}
				public Boolean CAMPOIsKey(){
				    return false;
				}
				public Integer CAMPOLength(){
				    return 150;
				}
				public Integer CAMPOPrecision(){
				    return 0;
				}
				public String CAMPODefault(){
				
					return null;
				
				}
				public String CAMPOComment(){
				
				    return "Campo afectado por el historico";
				
				}
				public String CAMPOPattern(){
				
					return "";
				
				}
				public String CAMPOOriginalDbColumnName(){
				
					return "CAMPO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
						this.VANTERIOR = readInteger(dis);
					
						this.VACTUAL = readInteger(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
						this.VANTERIOR = readInteger(dis);
					
						this.VACTUAL = readInteger(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// Integer
				
						writeInteger(this.VANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// Integer
				
						writeInteger(this.VANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PROCESOS_ID="+String.valueOf(PROCESOS_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",VANTERIOR="+String.valueOf(VANTERIOR));
		sb.append(",VACTUAL="+String.valueOf(VACTUAL));
		sb.append(",CAMPO="+CAMPO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 22;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public int PROCESOS_ID;

				public int getPROCESOS_ID () {
					return this.PROCESOS_ID;
				}

				public Boolean PROCESOS_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOS_IDIsKey(){
				    return false;
				}
				public Integer PROCESOS_IDLength(){
				    return 22;
				}
				public Integer PROCESOS_IDPrecision(){
				    return 0;
				}
				public String PROCESOS_IDDefault(){
				
					return null;
				
				}
				public String PROCESOS_IDComment(){
				
				    return "FK - AFI_PROCESOS";
				
				}
				public String PROCESOS_IDPattern(){
				
					return "";
				
				}
				public String PROCESOS_IDOriginalDbColumnName(){
				
					return "PROCESOS_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 500;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "Motivo de la edici\u00F3n";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public int RNOVEDADES_ID;

				public int getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return false;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 22;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return 0;
				}
				public String RNOVEDADES_IDDefault(){
				
					return null;
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "FK - AFI_NOVEDADES";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public Integer VANTERIOR;

				public Integer getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 50;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "Valor anterior";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public Integer VACTUAL;

				public Integer getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 50;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "Valor actual";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String CAMPO;

				public String getCAMPO () {
					return this.CAMPO;
				}

				public Boolean CAMPOIsNullable(){
				    return true;
				}
				public Boolean CAMPOIsKey(){
				    return false;
				}
				public Integer CAMPOLength(){
				    return 150;
				}
				public Integer CAMPOPrecision(){
				    return 0;
				}
				public String CAMPODefault(){
				
					return null;
				
				}
				public String CAMPOComment(){
				
				    return "Campo afectado por el historico";
				
				}
				public String CAMPOPattern(){
				
					return "";
				
				}
				public String CAMPOOriginalDbColumnName(){
				
					return "CAMPO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
						this.VANTERIOR = readInteger(dis);
					
						this.VACTUAL = readInteger(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
						this.VANTERIOR = readInteger(dis);
					
						this.VACTUAL = readInteger(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// Integer
				
						writeInteger(this.VANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// Integer
				
						writeInteger(this.VANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PROCESOS_ID="+String.valueOf(PROCESOS_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",VANTERIOR="+String.valueOf(VANTERIOR));
		sb.append(",VACTUAL="+String.valueOf(VACTUAL));
		sb.append(",CAMPO="+CAMPO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 22;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public int PROCESOS_ID;

				public int getPROCESOS_ID () {
					return this.PROCESOS_ID;
				}

				public Boolean PROCESOS_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOS_IDIsKey(){
				    return false;
				}
				public Integer PROCESOS_IDLength(){
				    return 22;
				}
				public Integer PROCESOS_IDPrecision(){
				    return 0;
				}
				public String PROCESOS_IDDefault(){
				
					return null;
				
				}
				public String PROCESOS_IDComment(){
				
				    return "FK - AFI_PROCESOS";
				
				}
				public String PROCESOS_IDPattern(){
				
					return "";
				
				}
				public String PROCESOS_IDOriginalDbColumnName(){
				
					return "PROCESOS_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 500;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "Motivo de la edici\u00F3n";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public int RNOVEDADES_ID;

				public int getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return false;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 22;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return 0;
				}
				public String RNOVEDADES_IDDefault(){
				
					return null;
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "FK - AFI_NOVEDADES";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public Integer VANTERIOR;

				public Integer getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 50;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "Valor anterior";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public Integer VACTUAL;

				public Integer getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 50;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "Valor actual";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String CAMPO;

				public String getCAMPO () {
					return this.CAMPO;
				}

				public Boolean CAMPOIsNullable(){
				    return true;
				}
				public Boolean CAMPOIsKey(){
				    return false;
				}
				public Integer CAMPOLength(){
				    return 150;
				}
				public Integer CAMPOPrecision(){
				    return 0;
				}
				public String CAMPODefault(){
				
					return null;
				
				}
				public String CAMPOComment(){
				
				    return "Campo afectado por el historico";
				
				}
				public String CAMPOPattern(){
				
					return "";
				
				}
				public String CAMPOOriginalDbColumnName(){
				
					return "CAMPO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
						this.VANTERIOR = readInteger(dis);
					
						this.VACTUAL = readInteger(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
						this.VANTERIOR = readInteger(dis);
					
						this.VACTUAL = readInteger(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// Integer
				
						writeInteger(this.VANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// Integer
				
						writeInteger(this.VANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PROCESOS_ID="+String.valueOf(PROCESOS_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",VANTERIOR="+String.valueOf(VANTERIOR));
		sb.append(",VACTUAL="+String.valueOf(VACTUAL));
		sb.append(",CAMPO="+CAMPO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row26Struct row26 = new row26Struct();
row31Struct row31 = new row31Struct();
row30Struct row30 = new row30Struct();





	
	/**
	 * [tFileOutputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_4", false);
		start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tFileOutputDelimited_4 = 0;
		

String fileName_tFileOutputDelimited_4 = "";
    fileName_tFileOutputDelimited_4 = (new java.io.File(context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+context.archivoSalida+"_AFI_HAFILIADOS.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_4 = null;
    String extension_tFileOutputDelimited_4 = null;
    String directory_tFileOutputDelimited_4 = null;
    if((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        }
        directory_tFileOutputDelimited_4 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_4 = true;
    java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
    globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
        if(filetFileOutputDelimited_4.exists()){
            isFileGenerated_tFileOutputDelimited_4 = false;
        }
            int nb_line_tFileOutputDelimited_4 = 0;
            int splitedFileNo_tFileOutputDelimited_4 = 0;
            int currentRow_tFileOutputDelimited_4 = 0;

            final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
                        if(!dir_tFileOutputDelimited_4.exists()) {
                            dir_tFileOutputDelimited_4.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_4 = null;

                        outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
                                    if(filetFileOutputDelimited_4.length()==0){
                                        outtFileOutputDelimited_4.write("AFILIADOS_ID");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("PROCESOS_ID");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("MOTIVO");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("RNOVEDADES_ID");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("VANTERIOR");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("VACTUAL");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("CAMPO");
                                        outtFileOutputDelimited_4.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

 



/**
 * [tFileOutputDelimited_4 begin ] stop
 */




	
	/**
	 * [tOracleOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_3", false);
		start_Hash.put("tOracleOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tOracleOutput_3 = 0;
		






    
    int nb_line_tOracleOutput_3 = 0;
    int nb_line_update_tOracleOutput_3 = 0;
    int nb_line_inserted_tOracleOutput_3 = 0;
    int nb_line_deleted_tOracleOutput_3 = 0;
    int nb_line_rejected_tOracleOutput_3 = 0;

    int tmp_batchUpdateCount_tOracleOutput_3 = 0;

    int deletedCount_tOracleOutput_3=0;
    int updatedCount_tOracleOutput_3=0;
    int insertedCount_tOracleOutput_3=0;
    int rowsToCommitCount_tOracleOutput_3=0;
    int rejectedCount_tOracleOutput_3=0;

    boolean whetherReject_tOracleOutput_3 = false;

    java.sql.Connection conn_tOracleOutput_3 = null;

    //optional table
    String dbschema_tOracleOutput_3 = null;
    String tableName_tOracleOutput_3 = null;
        dbschema_tOracleOutput_3 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_3=0;

        if(dbschema_tOracleOutput_3 == null || dbschema_tOracleOutput_3.trim().length() == 0) {
            tableName_tOracleOutput_3 = ("AFI_HAFILIADOS");
        } else {
            tableName_tOracleOutput_3 = dbschema_tOracleOutput_3 + "." + ("AFI_HAFILIADOS");
        }
                String insert_tOracleOutput_3 = "INSERT INTO " + tableName_tOracleOutput_3 + " (AFILIADOS_ID,PROCESOS_ID,MOTIVO,RNOVEDADES_ID,VANTERIOR,VACTUAL,CAMPO) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_3 = conn_tOracleOutput_3.prepareStatement(insert_tOracleOutput_3);
                        resourceMap.put("pstmt_tOracleOutput_3", pstmt_tOracleOutput_3);





 



/**
 * [tOracleOutput_3 begin ] stop
 */



	
	/**
	 * [tReplicate_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_3", false);
		start_Hash.put("tReplicate_3", System.currentTimeMillis());
		
	
	currentComponent="tReplicate_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row26");
					}
				
		int tos_count_tReplicate_3 = 0;
		

 



/**
 * [tReplicate_3 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_4", false);
		start_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_4";
	
	
		int tos_count_tFixedFlowInput_4 = 0;
		

	    for (int i_tFixedFlowInput_4 = 0 ; i_tFixedFlowInput_4 < 1 ; i_tFixedFlowInput_4++) {
	                	            	
    	            		row26.AFILIADOS_ID = context.HAF_AFILIADOS_ID;
    	            	        	            	
    	            		row26.PROCESOS_ID = context.HAF_PROCESOS_ID;
    	            	        	            	
    	            		row26.MOTIVO = context.HAF_MOTIVO;
    	            	        	            	
    	            		row26.RNOVEDADES_ID = context.HAF_RNOVEDADES_ID;
    	            	        	            	
    	            		row26.VANTERIOR = context.HAF_VANTERIOR;
    	            	        	            	
    	            		row26.VACTUAL = context.HAF_VACTUAL;
    	            	        	            	
    	            		row26.CAMPO = context.HAF_CAMPO;
    	            	

 



/**
 * [tFixedFlowInput_4 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 


	tos_count_tFixedFlowInput_4++;

/**
 * [tFixedFlowInput_4 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tReplicate_3 main ] start
	 */

	

	
	
	currentComponent="tReplicate_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row26"
						
						);
					}
					


	row31 = new row31Struct();
						
	row31.AFILIADOS_ID = row26.AFILIADOS_ID;								
	row31.PROCESOS_ID = row26.PROCESOS_ID;								
	row31.MOTIVO = row26.MOTIVO;								
	row31.RNOVEDADES_ID = row26.RNOVEDADES_ID;								
	row31.VANTERIOR = row26.VANTERIOR;								
	row31.VACTUAL = row26.VACTUAL;								
	row31.CAMPO = row26.CAMPO;			
	row30 = new row30Struct();
						
	row30.AFILIADOS_ID = row26.AFILIADOS_ID;								
	row30.PROCESOS_ID = row26.PROCESOS_ID;								
	row30.MOTIVO = row26.MOTIVO;								
	row30.RNOVEDADES_ID = row26.RNOVEDADES_ID;								
	row30.VANTERIOR = row26.VANTERIOR;								
	row30.VACTUAL = row26.VACTUAL;								
	row30.CAMPO = row26.CAMPO;			


 


	tos_count_tReplicate_3++;

/**
 * [tReplicate_3 main ] stop
 */
	
	/**
	 * [tReplicate_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplicate_3";
	
	

 



/**
 * [tReplicate_3 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row31"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                        sb_tFileOutputDelimited_4.append(
                            row31.AFILIADOS_ID
                        );
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                        sb_tFileOutputDelimited_4.append(
                            row31.PROCESOS_ID
                        );
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row31.MOTIVO != null) {
                        sb_tFileOutputDelimited_4.append(
                            row31.MOTIVO
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                        sb_tFileOutputDelimited_4.append(
                            row31.RNOVEDADES_ID
                        );
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row31.VANTERIOR != null) {
                        sb_tFileOutputDelimited_4.append(
                            row31.VANTERIOR
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row31.VACTUAL != null) {
                        sb_tFileOutputDelimited_4.append(
                            row31.VACTUAL
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row31.CAMPO != null) {
                        sb_tFileOutputDelimited_4.append(
                            row31.CAMPO
                        );
                            }
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";
	
	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";
	
	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */




	
	/**
	 * [tOracleOutput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row30"
						
						);
					}
					



        whetherReject_tOracleOutput_3 = false;
                        pstmt_tOracleOutput_3.setInt(1, row30.AFILIADOS_ID);

                        pstmt_tOracleOutput_3.setInt(2, row30.PROCESOS_ID);

                        if(row30.MOTIVO == null) {
pstmt_tOracleOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(3, row30.MOTIVO);
}

                        pstmt_tOracleOutput_3.setInt(4, row30.RNOVEDADES_ID);

                        if(row30.VANTERIOR == null) {
pstmt_tOracleOutput_3.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(5, row30.VANTERIOR);
}

                        if(row30.VACTUAL == null) {
pstmt_tOracleOutput_3.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(6, row30.VACTUAL);
}

                        if(row30.CAMPO == null) {
pstmt_tOracleOutput_3.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(7, row30.CAMPO);
}

                try {
                    nb_line_tOracleOutput_3++;
                    int processedCount_tOracleOutput_3 = pstmt_tOracleOutput_3.executeUpdate();
                    insertedCount_tOracleOutput_3 += processedCount_tOracleOutput_3;
                    rowsToCommitCount_tOracleOutput_3 += processedCount_tOracleOutput_3;
                } catch(java.lang.Exception e_tOracleOutput_3) {
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
                    whetherReject_tOracleOutput_3 = true;
                            System.err.print(e_tOracleOutput_3.getMessage());
                }

 


	tos_count_tOracleOutput_3++;

/**
 * [tOracleOutput_3 main ] stop
 */
	
	/**
	 * [tOracleOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	

 



/**
 * [tOracleOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	

 



/**
 * [tOracleOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tReplicate_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplicate_3";
	
	

 



/**
 * [tReplicate_3 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

        }
        globalMap.put("tFixedFlowInput_4_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_4", true);
end_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());




/**
 * [tFixedFlowInput_4 end ] stop
 */

	
	/**
	 * [tReplicate_3 end ] start
	 */

	

	
	
	currentComponent="tReplicate_3";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row26");
			  	}
			  	
 

ok_Hash.put("tReplicate_3", true);
end_Hash.put("tReplicate_3", System.currentTimeMillis());




/**
 * [tReplicate_3 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";
	
	



		
			
					if(outtFileOutputDelimited_4!=null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}
				
				globalMap.put("tFileOutputDelimited_4_NB_LINE",nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_4", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_4", true);
end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_4 end ] stop
 */




	
	/**
	 * [tOracleOutput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	
	



	
        if(pstmt_tOracleOutput_3 != null) {
			
				pstmt_tOracleOutput_3.close();
				resourceMap.remove("pstmt_tOracleOutput_3");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_3", true);

	
	nb_line_deleted_tOracleOutput_3=nb_line_deleted_tOracleOutput_3+ deletedCount_tOracleOutput_3;
	nb_line_update_tOracleOutput_3=nb_line_update_tOracleOutput_3 + updatedCount_tOracleOutput_3;
	nb_line_inserted_tOracleOutput_3=nb_line_inserted_tOracleOutput_3 + insertedCount_tOracleOutput_3;
	nb_line_rejected_tOracleOutput_3=nb_line_rejected_tOracleOutput_3 + rejectedCount_tOracleOutput_3;
	
        globalMap.put("tOracleOutput_3_NB_LINE",nb_line_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_UPDATED",nb_line_update_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_3);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_3", true);
end_Hash.put("tOracleOutput_3", System.currentTimeMillis());




/**
 * [tOracleOutput_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_4 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 finally ] stop
 */

	
	/**
	 * [tReplicate_3 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_3";
	
	

 



/**
 * [tReplicate_3 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_4") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_4");
						if(outtFileOutputDelimited_4!=null) {
							outtFileOutputDelimited_4.flush();
							outtFileOutputDelimited_4.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_4 finally ] stop
 */




	
	/**
	 * [tOracleOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_3 = null;
                if ((pstmtToClose_tOracleOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_3")) != null) {
                    pstmtToClose_tOracleOutput_3.close();
                }
    }
 



/**
 * [tOracleOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public String CRITERIO;

				public String getCRITERIO () {
					return this.CRITERIO;
				}

				public Boolean CRITERIOIsNullable(){
				    return true;
				}
				public Boolean CRITERIOIsKey(){
				    return false;
				}
				public Integer CRITERIOLength(){
				    return 0;
				}
				public Integer CRITERIOPrecision(){
				    return 0;
				}
				public String CRITERIODefault(){
				
					return null;
				
				}
				public String CRITERIOComment(){
				
				    return "";
				
				}
				public String CRITERIOPattern(){
				
					return "";
				
				}
				public String CRITERIOOriginalDbColumnName(){
				
					return "CRITERIO";
				
				}

				
			    public String OPERACION;

				public String getOPERACION () {
					return this.OPERACION;
				}

				public Boolean OPERACIONIsNullable(){
				    return true;
				}
				public Boolean OPERACIONIsKey(){
				    return false;
				}
				public Integer OPERACIONLength(){
				    return 0;
				}
				public Integer OPERACIONPrecision(){
				    return 0;
				}
				public String OPERACIONDefault(){
				
					return null;
				
				}
				public String OPERACIONComment(){
				
				    return "";
				
				}
				public String OPERACIONPattern(){
				
					return "";
				
				}
				public String OPERACIONOriginalDbColumnName(){
				
					return "OPERACION";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return 0;
				}
				public Integer DESCRIPCIONPrecision(){
				    return 0;
				}
				public String DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 0;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 0;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 0;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 0;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 0;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.CRITERIO = readString(dis);
					
					this.OPERACION = readString(dis);
					
					this.DESCRIPCION = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.CRITERIO = readString(dis);
					
					this.OPERACION = readString(dis);
					
					this.DESCRIPCION = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CRITERIO,dos);
					
					// String
				
						writeString(this.OPERACION,dos);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CRITERIO,dos);
					
					// String
				
						writeString(this.OPERACION,dos);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CRITERIO="+CRITERIO);
		sb.append(",OPERACION="+OPERACION);
		sb.append(",DESCRIPCION="+DESCRIPCION);
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row28Struct row28 = new row28Struct();




	
	/**
	 * [tFileOutputDelimited_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_5", false);
		start_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tFileOutputDelimited_5 = 0;
		

String fileName_tFileOutputDelimited_5 = "";
    fileName_tFileOutputDelimited_5 = (new java.io.File(context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+context.archivoSalida+".csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_5 = null;
    String extension_tFileOutputDelimited_5 = null;
    String directory_tFileOutputDelimited_5 = null;
    if((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
            extension_tFileOutputDelimited_5 = "";
        } else {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("."));
            extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("."));
            extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
            extension_tFileOutputDelimited_5 = "";
        }
        directory_tFileOutputDelimited_5 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_5 = true;
    java.io.File filetFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
    globalMap.put("tFileOutputDelimited_5_FILE_NAME",fileName_tFileOutputDelimited_5);
        if(filetFileOutputDelimited_5.exists()){
            isFileGenerated_tFileOutputDelimited_5 = false;
        }
            int nb_line_tFileOutputDelimited_5 = 0;
            int splitedFileNo_tFileOutputDelimited_5 = 0;
            int currentRow_tFileOutputDelimited_5 = 0;

            final String OUT_DELIM_tFileOutputDelimited_5 = /** Start field tFileOutputDelimited_5:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_5:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_5 = /** Start field tFileOutputDelimited_5:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_5:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_5 != null && directory_tFileOutputDelimited_5.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_5 = new java.io.File(directory_tFileOutputDelimited_5);
                        if(!dir_tFileOutputDelimited_5.exists()) {
                            dir_tFileOutputDelimited_5.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_5 = null;

                        outtFileOutputDelimited_5 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_5, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_5", outtFileOutputDelimited_5);
                                    if(filetFileOutputDelimited_5.length()==0){
                                        outtFileOutputDelimited_5.write("CRITERIO");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("OPERACION");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("DESCRIPCION");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("TIPO_DOCUMENTO");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("DOCUMENTO");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("PRIMER_NOMBRE");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("SEGUNDO_NOMBRE");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("PRIMER_APELLIDO");
                                            outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.write("SEGUNDO_APELLIDO");
                                        outtFileOutputDelimited_5.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);
                                        outtFileOutputDelimited_5.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

 



/**
 * [tFileOutputDelimited_5 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_5", false);
		start_Hash.put("tFixedFlowInput_5", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_5";
	
	
		int tos_count_tFixedFlowInput_5 = 0;
		

	    for (int i_tFixedFlowInput_5 = 0 ; i_tFixedFlowInput_5 < 1 ; i_tFixedFlowInput_5++) {
	                	            	
    	            		row28.CRITERIO = context.AS_CRITERIO;
    	            	        	            	
    	            		row28.OPERACION = context.AS_OPERACION_INACTIVO;
    	            	        	            	
    	            		row28.DESCRIPCION = context.AS_DESCRIPCION;
    	            	        	            	
    	            		row28.TIPO_DOCUMENTO = context.AS_TIPO_DOCUMENTO;
    	            	        	            	
    	            		row28.DOCUMENTO = context.AS_DOCUMENTO;
    	            	        	            	
    	            		row28.PRIMER_NOMBRE = context.AS_PRIMER_NOMBRE;
    	            	        	            	
    	            		row28.SEGUNDO_NOMBRE = context.AS_SEGUNDO_NOMBRE;
    	            	        	            	
    	            		row28.PRIMER_APELLIDO = context.AS_PRIMER_APELLIDO;
    	            	        	            	
    	            		row28.SEGUNDO_APELLIDO = context.AS_SEGUNDO_APELLIDO;
    	            	

 



/**
 * [tFixedFlowInput_5 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 


	tos_count_tFixedFlowInput_5++;

/**
 * [tFixedFlowInput_5 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 



/**
 * [tFixedFlowInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_5 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row28"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_5 = new StringBuilder();
                            if(row28.CRITERIO != null) {
                        sb_tFileOutputDelimited_5.append(
                            row28.CRITERIO
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row28.OPERACION != null) {
                        sb_tFileOutputDelimited_5.append(
                            row28.OPERACION
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row28.DESCRIPCION != null) {
                        sb_tFileOutputDelimited_5.append(
                            row28.DESCRIPCION
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row28.TIPO_DOCUMENTO != null) {
                        sb_tFileOutputDelimited_5.append(
                            row28.TIPO_DOCUMENTO
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row28.DOCUMENTO != null) {
                        sb_tFileOutputDelimited_5.append(
                            row28.DOCUMENTO
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row28.PRIMER_NOMBRE != null) {
                        sb_tFileOutputDelimited_5.append(
                            row28.PRIMER_NOMBRE
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row28.SEGUNDO_NOMBRE != null) {
                        sb_tFileOutputDelimited_5.append(
                            row28.SEGUNDO_NOMBRE
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row28.PRIMER_APELLIDO != null) {
                        sb_tFileOutputDelimited_5.append(
                            row28.PRIMER_APELLIDO
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row28.SEGUNDO_APELLIDO != null) {
                        sb_tFileOutputDelimited_5.append(
                            row28.SEGUNDO_APELLIDO
                        );
                            }
                    sb_tFileOutputDelimited_5.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);


                    nb_line_tFileOutputDelimited_5++;
                    resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

                        outtFileOutputDelimited_5.write(sb_tFileOutputDelimited_5.toString());




 


	tos_count_tFileOutputDelimited_5++;

/**
 * [tFileOutputDelimited_5 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";
	
	

 



/**
 * [tFileOutputDelimited_5 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";
	
	

 



/**
 * [tFileOutputDelimited_5 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 



/**
 * [tFixedFlowInput_5 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

        }
        globalMap.put("tFixedFlowInput_5_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_5", true);
end_Hash.put("tFixedFlowInput_5", System.currentTimeMillis());




/**
 * [tFixedFlowInput_5 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_5 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";
	
	



		
			
					if(outtFileOutputDelimited_5!=null) {
						outtFileOutputDelimited_5.flush();
						outtFileOutputDelimited_5.close();
					}
				
				globalMap.put("tFileOutputDelimited_5_NB_LINE",nb_line_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME",fileName_tFileOutputDelimited_5);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_5", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_5", true);
end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_5 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 



/**
 * [tFixedFlowInput_5 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_5 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_5") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_5 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_5");
						if(outtFileOutputDelimited_5!=null) {
							outtFileOutputDelimited_5.flush();
							outtFileOutputDelimited_5.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public Integer USUARIOS_ID;

				public Integer getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 22;
				}
				public Integer USUARIOS_IDPrecision(){
				    return 0;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public Integer AFILIADOS_ID;

				public Integer getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 22;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public Integer ESTADOS_ID;

				public Integer getESTADOS_ID () {
					return this.ESTADOS_ID;
				}

				public Boolean ESTADOS_IDIsNullable(){
				    return true;
				}
				public Boolean ESTADOS_IDIsKey(){
				    return false;
				}
				public Integer ESTADOS_IDLength(){
				    return 22;
				}
				public Integer ESTADOS_IDPrecision(){
				    return 0;
				}
				public String ESTADOS_IDDefault(){
				
					return null;
				
				}
				public String ESTADOS_IDComment(){
				
				    return "FK - AFI_ESTADOS";
				
				}
				public String ESTADOS_IDPattern(){
				
					return "";
				
				}
				public String ESTADOS_IDOriginalDbColumnName(){
				
					return "ESTADOS_ID";
				
				}

				
			    public Integer MOTIVOSESTADO_ID;

				public Integer getMOTIVOSESTADO_ID () {
					return this.MOTIVOSESTADO_ID;
				}

				public Boolean MOTIVOSESTADO_IDIsNullable(){
				    return true;
				}
				public Boolean MOTIVOSESTADO_IDIsKey(){
				    return false;
				}
				public Integer MOTIVOSESTADO_IDLength(){
				    return 22;
				}
				public Integer MOTIVOSESTADO_IDPrecision(){
				    return 0;
				}
				public String MOTIVOSESTADO_IDDefault(){
				
					return null;
				
				}
				public String MOTIVOSESTADO_IDComment(){
				
				    return "FK - AFI_MOTIVOSESTADOS";
				
				}
				public String MOTIVOSESTADO_IDPattern(){
				
					return "";
				
				}
				public String MOTIVOSESTADO_IDOriginalDbColumnName(){
				
					return "MOTIVOSESTADO_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "Fecha del cambio de estado";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.USUARIOS_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.ESTADOS_ID = readInteger(dis);
					
						this.MOTIVOSESTADO_ID = readInteger(dis);
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.USUARIOS_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.ESTADOS_ID = readInteger(dis);
					
						this.MOTIVOSESTADO_ID = readInteger(dis);
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.ESTADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.MOTIVOSESTADO_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.ESTADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.MOTIVOSESTADO_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",ESTADOS_ID="+String.valueOf(ESTADOS_ID));
		sb.append(",MOTIVOSESTADO_ID="+String.valueOf(MOTIVOSESTADO_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public Integer USUARIOS_ID;

				public Integer getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 22;
				}
				public Integer USUARIOS_IDPrecision(){
				    return 0;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public Integer AFILIADOS_ID;

				public Integer getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 22;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public Integer ESTADOS_ID;

				public Integer getESTADOS_ID () {
					return this.ESTADOS_ID;
				}

				public Boolean ESTADOS_IDIsNullable(){
				    return true;
				}
				public Boolean ESTADOS_IDIsKey(){
				    return false;
				}
				public Integer ESTADOS_IDLength(){
				    return 22;
				}
				public Integer ESTADOS_IDPrecision(){
				    return 0;
				}
				public String ESTADOS_IDDefault(){
				
					return null;
				
				}
				public String ESTADOS_IDComment(){
				
				    return "FK - AFI_ESTADOS";
				
				}
				public String ESTADOS_IDPattern(){
				
					return "";
				
				}
				public String ESTADOS_IDOriginalDbColumnName(){
				
					return "ESTADOS_ID";
				
				}

				
			    public Integer MOTIVOSESTADO_ID;

				public Integer getMOTIVOSESTADO_ID () {
					return this.MOTIVOSESTADO_ID;
				}

				public Boolean MOTIVOSESTADO_IDIsNullable(){
				    return true;
				}
				public Boolean MOTIVOSESTADO_IDIsKey(){
				    return false;
				}
				public Integer MOTIVOSESTADO_IDLength(){
				    return 22;
				}
				public Integer MOTIVOSESTADO_IDPrecision(){
				    return 0;
				}
				public String MOTIVOSESTADO_IDDefault(){
				
					return null;
				
				}
				public String MOTIVOSESTADO_IDComment(){
				
				    return "FK - AFI_MOTIVOSESTADOS";
				
				}
				public String MOTIVOSESTADO_IDPattern(){
				
					return "";
				
				}
				public String MOTIVOSESTADO_IDOriginalDbColumnName(){
				
					return "MOTIVOSESTADO_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "Fecha del cambio de estado";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.USUARIOS_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.ESTADOS_ID = readInteger(dis);
					
						this.MOTIVOSESTADO_ID = readInteger(dis);
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.USUARIOS_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.ESTADOS_ID = readInteger(dis);
					
						this.MOTIVOSESTADO_ID = readInteger(dis);
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.ESTADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.MOTIVOSESTADO_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.ESTADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.MOTIVOSESTADO_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",ESTADOS_ID="+String.valueOf(ESTADOS_ID));
		sb.append(",MOTIVOSESTADO_ID="+String.valueOf(MOTIVOSESTADO_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public Integer USUARIOS_ID;

				public Integer getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 22;
				}
				public Integer USUARIOS_IDPrecision(){
				    return 0;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public Integer AFILIADOS_ID;

				public Integer getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 22;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public Integer ESTADOS_ID;

				public Integer getESTADOS_ID () {
					return this.ESTADOS_ID;
				}

				public Boolean ESTADOS_IDIsNullable(){
				    return true;
				}
				public Boolean ESTADOS_IDIsKey(){
				    return false;
				}
				public Integer ESTADOS_IDLength(){
				    return 22;
				}
				public Integer ESTADOS_IDPrecision(){
				    return 0;
				}
				public String ESTADOS_IDDefault(){
				
					return null;
				
				}
				public String ESTADOS_IDComment(){
				
				    return "FK - AFI_ESTADOS";
				
				}
				public String ESTADOS_IDPattern(){
				
					return "";
				
				}
				public String ESTADOS_IDOriginalDbColumnName(){
				
					return "ESTADOS_ID";
				
				}

				
			    public Integer MOTIVOSESTADO_ID;

				public Integer getMOTIVOSESTADO_ID () {
					return this.MOTIVOSESTADO_ID;
				}

				public Boolean MOTIVOSESTADO_IDIsNullable(){
				    return true;
				}
				public Boolean MOTIVOSESTADO_IDIsKey(){
				    return false;
				}
				public Integer MOTIVOSESTADO_IDLength(){
				    return 22;
				}
				public Integer MOTIVOSESTADO_IDPrecision(){
				    return 0;
				}
				public String MOTIVOSESTADO_IDDefault(){
				
					return null;
				
				}
				public String MOTIVOSESTADO_IDComment(){
				
				    return "FK - AFI_MOTIVOSESTADOS";
				
				}
				public String MOTIVOSESTADO_IDPattern(){
				
					return "";
				
				}
				public String MOTIVOSESTADO_IDOriginalDbColumnName(){
				
					return "MOTIVOSESTADO_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "Fecha del cambio de estado";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.USUARIOS_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.ESTADOS_ID = readInteger(dis);
					
						this.MOTIVOSESTADO_ID = readInteger(dis);
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.USUARIOS_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.ESTADOS_ID = readInteger(dis);
					
						this.MOTIVOSESTADO_ID = readInteger(dis);
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.ESTADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.MOTIVOSESTADO_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.ESTADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.MOTIVOSESTADO_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",ESTADOS_ID="+String.valueOf(ESTADOS_ID));
		sb.append(",MOTIVOSESTADO_ID="+String.valueOf(MOTIVOSESTADO_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row29Struct row29 = new row29Struct();
row33Struct row33 = new row33Struct();
row32Struct row32 = new row32Struct();





	
	/**
	 * [tFileOutputDelimited_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_6", false);
		start_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row33");
					}
				
		int tos_count_tFileOutputDelimited_6 = 0;
		

String fileName_tFileOutputDelimited_6 = "";
    fileName_tFileOutputDelimited_6 = (new java.io.File(context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+context.archivoSalida+"_AFI_HESTADOS.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_6 = null;
    String extension_tFileOutputDelimited_6 = null;
    String directory_tFileOutputDelimited_6 = null;
    if((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_6.lastIndexOf(".") < fileName_tFileOutputDelimited_6.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
            extension_tFileOutputDelimited_6 = "";
        } else {
            fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0, fileName_tFileOutputDelimited_6.lastIndexOf("."));
            extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0, fileName_tFileOutputDelimited_6.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_6.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0, fileName_tFileOutputDelimited_6.lastIndexOf("."));
            extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
            extension_tFileOutputDelimited_6 = "";
        }
        directory_tFileOutputDelimited_6 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_6 = true;
    java.io.File filetFileOutputDelimited_6 = new java.io.File(fileName_tFileOutputDelimited_6);
    globalMap.put("tFileOutputDelimited_6_FILE_NAME",fileName_tFileOutputDelimited_6);
        if(filetFileOutputDelimited_6.exists()){
            isFileGenerated_tFileOutputDelimited_6 = false;
        }
            int nb_line_tFileOutputDelimited_6 = 0;
            int splitedFileNo_tFileOutputDelimited_6 = 0;
            int currentRow_tFileOutputDelimited_6 = 0;

            final String OUT_DELIM_tFileOutputDelimited_6 = /** Start field tFileOutputDelimited_6:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_6:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_6 = /** Start field tFileOutputDelimited_6:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_6:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_6 != null && directory_tFileOutputDelimited_6.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_6 = new java.io.File(directory_tFileOutputDelimited_6);
                        if(!dir_tFileOutputDelimited_6.exists()) {
                            dir_tFileOutputDelimited_6.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_6 = null;

                        outtFileOutputDelimited_6 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_6, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_6", outtFileOutputDelimited_6);
                                    if(filetFileOutputDelimited_6.length()==0){
                                        outtFileOutputDelimited_6.write("USUARIOS_ID");
                                            outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
                                        outtFileOutputDelimited_6.write("AFILIADOS_ID");
                                            outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
                                        outtFileOutputDelimited_6.write("ESTADOS_ID");
                                            outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
                                        outtFileOutputDelimited_6.write("MOTIVOSESTADO_ID");
                                            outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
                                        outtFileOutputDelimited_6.write("FECHA");
                                        outtFileOutputDelimited_6.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);
                                        outtFileOutputDelimited_6.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);

 



/**
 * [tFileOutputDelimited_6 begin ] stop
 */




	
	/**
	 * [tOracleOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_4", false);
		start_Hash.put("tOracleOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tOracleOutput_4 = 0;
		






    
    int nb_line_tOracleOutput_4 = 0;
    int nb_line_update_tOracleOutput_4 = 0;
    int nb_line_inserted_tOracleOutput_4 = 0;
    int nb_line_deleted_tOracleOutput_4 = 0;
    int nb_line_rejected_tOracleOutput_4 = 0;

    int tmp_batchUpdateCount_tOracleOutput_4 = 0;

    int deletedCount_tOracleOutput_4=0;
    int updatedCount_tOracleOutput_4=0;
    int insertedCount_tOracleOutput_4=0;
    int rowsToCommitCount_tOracleOutput_4=0;
    int rejectedCount_tOracleOutput_4=0;

    boolean whetherReject_tOracleOutput_4 = false;

    java.sql.Connection conn_tOracleOutput_4 = null;

    //optional table
    String dbschema_tOracleOutput_4 = null;
    String tableName_tOracleOutput_4 = null;
        dbschema_tOracleOutput_4 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_4=0;

        if(dbschema_tOracleOutput_4 == null || dbschema_tOracleOutput_4.trim().length() == 0) {
            tableName_tOracleOutput_4 = ("AFI_HESTADOS");
        } else {
            tableName_tOracleOutput_4 = dbschema_tOracleOutput_4 + "." + ("AFI_HESTADOS");
        }
                String insert_tOracleOutput_4 = "INSERT INTO " + tableName_tOracleOutput_4 + " (USUARIOS_ID,AFILIADOS_ID,ESTADOS_ID,MOTIVOSESTADO_ID,FECHA) VALUES (?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_4 = conn_tOracleOutput_4.prepareStatement(insert_tOracleOutput_4);
                        resourceMap.put("pstmt_tOracleOutput_4", pstmt_tOracleOutput_4);





 



/**
 * [tOracleOutput_4 begin ] stop
 */



	
	/**
	 * [tReplicate_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_4", false);
		start_Hash.put("tReplicate_4", System.currentTimeMillis());
		
	
	currentComponent="tReplicate_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row29");
					}
				
		int tos_count_tReplicate_4 = 0;
		

 



/**
 * [tReplicate_4 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_6", false);
		start_Hash.put("tFixedFlowInput_6", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_6";
	
	
		int tos_count_tFixedFlowInput_6 = 0;
		

	    for (int i_tFixedFlowInput_6 = 0 ; i_tFixedFlowInput_6 < 1 ; i_tFixedFlowInput_6++) {
	                	            	
    	            		row29.USUARIOS_ID = context.HES_USUARIOS_ID;
    	            	        	            	
    	            		row29.AFILIADOS_ID = context.HES_AFILIADOS_ID;
    	            	        	            	
    	            		row29.ESTADOS_ID = context.HES_ESTADOS_ID;
    	            	        	            	
    	            		row29.MOTIVOSESTADO_ID = context.HES_MOTIVOSESTADO_ID;
    	            	        	            	
    	            		row29.FECHA = context.HES_FECHA;
    	            	

 



/**
 * [tFixedFlowInput_6 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_6 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 


	tos_count_tFixedFlowInput_6++;

/**
 * [tFixedFlowInput_6 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 



/**
 * [tFixedFlowInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tReplicate_4 main ] start
	 */

	

	
	
	currentComponent="tReplicate_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row29"
						
						);
					}
					


	row33 = new row33Struct();
						
	row33.USUARIOS_ID = row29.USUARIOS_ID;								
	row33.AFILIADOS_ID = row29.AFILIADOS_ID;								
	row33.ESTADOS_ID = row29.ESTADOS_ID;								
	row33.MOTIVOSESTADO_ID = row29.MOTIVOSESTADO_ID;								
	row33.FECHA = row29.FECHA;			
	row32 = new row32Struct();
						
	row32.USUARIOS_ID = row29.USUARIOS_ID;								
	row32.AFILIADOS_ID = row29.AFILIADOS_ID;								
	row32.ESTADOS_ID = row29.ESTADOS_ID;								
	row32.MOTIVOSESTADO_ID = row29.MOTIVOSESTADO_ID;								
	row32.FECHA = row29.FECHA;			


 


	tos_count_tReplicate_4++;

/**
 * [tReplicate_4 main ] stop
 */
	
	/**
	 * [tReplicate_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplicate_4";
	
	

 



/**
 * [tReplicate_4 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_6 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row33"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_6 = new StringBuilder();
                            if(row33.USUARIOS_ID != null) {
                        sb_tFileOutputDelimited_6.append(
                            row33.USUARIOS_ID
                        );
                            }
                            sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
                            if(row33.AFILIADOS_ID != null) {
                        sb_tFileOutputDelimited_6.append(
                            row33.AFILIADOS_ID
                        );
                            }
                            sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
                            if(row33.ESTADOS_ID != null) {
                        sb_tFileOutputDelimited_6.append(
                            row33.ESTADOS_ID
                        );
                            }
                            sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
                            if(row33.MOTIVOSESTADO_ID != null) {
                        sb_tFileOutputDelimited_6.append(
                            row33.MOTIVOSESTADO_ID
                        );
                            }
                            sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
                            if(row33.FECHA != null) {
                        sb_tFileOutputDelimited_6.append(
                            FormatterUtils.format_Date(row33.FECHA, "dd-MM-yyyy")
                        );
                            }
                    sb_tFileOutputDelimited_6.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);


                    nb_line_tFileOutputDelimited_6++;
                    resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);

                        outtFileOutputDelimited_6.write(sb_tFileOutputDelimited_6.toString());




 


	tos_count_tFileOutputDelimited_6++;

/**
 * [tFileOutputDelimited_6 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";
	
	

 



/**
 * [tFileOutputDelimited_6 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";
	
	

 



/**
 * [tFileOutputDelimited_6 process_data_end ] stop
 */




	
	/**
	 * [tOracleOutput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row32"
						
						);
					}
					



        whetherReject_tOracleOutput_4 = false;
                        if(row32.USUARIOS_ID == null) {
pstmt_tOracleOutput_4.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_4.setInt(1, row32.USUARIOS_ID);
}

                        if(row32.AFILIADOS_ID == null) {
pstmt_tOracleOutput_4.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_4.setInt(2, row32.AFILIADOS_ID);
}

                        if(row32.ESTADOS_ID == null) {
pstmt_tOracleOutput_4.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_4.setInt(3, row32.ESTADOS_ID);
}

                        if(row32.MOTIVOSESTADO_ID == null) {
pstmt_tOracleOutput_4.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_4.setInt(4, row32.MOTIVOSESTADO_ID);
}

                        if(row32.FECHA != null) {
pstmt_tOracleOutput_4.setObject(5, new java.sql.Timestamp(row32.FECHA.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_4.setNull(5, java.sql.Types.DATE);
}

                try {
                    nb_line_tOracleOutput_4++;
                    int processedCount_tOracleOutput_4 = pstmt_tOracleOutput_4.executeUpdate();
                    insertedCount_tOracleOutput_4 += processedCount_tOracleOutput_4;
                    rowsToCommitCount_tOracleOutput_4 += processedCount_tOracleOutput_4;
                } catch(java.lang.Exception e_tOracleOutput_4) {
globalMap.put("tOracleOutput_4_ERROR_MESSAGE",e_tOracleOutput_4.getMessage());
                    whetherReject_tOracleOutput_4 = true;
                            System.err.print(e_tOracleOutput_4.getMessage());
                }

 


	tos_count_tOracleOutput_4++;

/**
 * [tOracleOutput_4 main ] stop
 */
	
	/**
	 * [tOracleOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	

 



/**
 * [tOracleOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	

 



/**
 * [tOracleOutput_4 process_data_end ] stop
 */



	
	/**
	 * [tReplicate_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplicate_4";
	
	

 



/**
 * [tReplicate_4 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 



/**
 * [tFixedFlowInput_6 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_6 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

        }
        globalMap.put("tFixedFlowInput_6_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_6", true);
end_Hash.put("tFixedFlowInput_6", System.currentTimeMillis());




/**
 * [tFixedFlowInput_6 end ] stop
 */

	
	/**
	 * [tReplicate_4 end ] start
	 */

	

	
	
	currentComponent="tReplicate_4";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row29");
			  	}
			  	
 

ok_Hash.put("tReplicate_4", true);
end_Hash.put("tReplicate_4", System.currentTimeMillis());




/**
 * [tReplicate_4 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_6 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";
	
	



		
			
					if(outtFileOutputDelimited_6!=null) {
						outtFileOutputDelimited_6.flush();
						outtFileOutputDelimited_6.close();
					}
				
				globalMap.put("tFileOutputDelimited_6_NB_LINE",nb_line_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME",fileName_tFileOutputDelimited_6);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_6", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row33");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_6", true);
end_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_6 end ] stop
 */




	
	/**
	 * [tOracleOutput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	
	



	
        if(pstmt_tOracleOutput_4 != null) {
			
				pstmt_tOracleOutput_4.close();
				resourceMap.remove("pstmt_tOracleOutput_4");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_4", true);

	
	nb_line_deleted_tOracleOutput_4=nb_line_deleted_tOracleOutput_4+ deletedCount_tOracleOutput_4;
	nb_line_update_tOracleOutput_4=nb_line_update_tOracleOutput_4 + updatedCount_tOracleOutput_4;
	nb_line_inserted_tOracleOutput_4=nb_line_inserted_tOracleOutput_4 + insertedCount_tOracleOutput_4;
	nb_line_rejected_tOracleOutput_4=nb_line_rejected_tOracleOutput_4 + rejectedCount_tOracleOutput_4;
	
        globalMap.put("tOracleOutput_4_NB_LINE",nb_line_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_UPDATED",nb_line_update_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_4);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_4", true);
end_Hash.put("tOracleOutput_4", System.currentTimeMillis());




/**
 * [tOracleOutput_4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_6 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 



/**
 * [tFixedFlowInput_6 finally ] stop
 */

	
	/**
	 * [tReplicate_4 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_4";
	
	

 



/**
 * [tReplicate_4 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_6 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_6") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_6 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_6");
						if(outtFileOutputDelimited_6!=null) {
							outtFileOutputDelimited_6.flush();
							outtFileOutputDelimited_6.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_6 finally ] stop
 */




	
	/**
	 * [tOracleOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_4 = null;
                if ((pstmtToClose_tOracleOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_4")) != null) {
                    pstmtToClose_tOracleOutput_4.close();
                }
    }
 



/**
 * [tOracleOutput_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public String CRITERIO;

				public String getCRITERIO () {
					return this.CRITERIO;
				}

				public Boolean CRITERIOIsNullable(){
				    return true;
				}
				public Boolean CRITERIOIsKey(){
				    return false;
				}
				public Integer CRITERIOLength(){
				    return 0;
				}
				public Integer CRITERIOPrecision(){
				    return 0;
				}
				public String CRITERIODefault(){
				
					return null;
				
				}
				public String CRITERIOComment(){
				
				    return "";
				
				}
				public String CRITERIOPattern(){
				
					return "";
				
				}
				public String CRITERIOOriginalDbColumnName(){
				
					return "CRITERIO";
				
				}

				
			    public String OPERACION;

				public String getOPERACION () {
					return this.OPERACION;
				}

				public Boolean OPERACIONIsNullable(){
				    return true;
				}
				public Boolean OPERACIONIsKey(){
				    return false;
				}
				public Integer OPERACIONLength(){
				    return 0;
				}
				public Integer OPERACIONPrecision(){
				    return 0;
				}
				public String OPERACIONDefault(){
				
					return null;
				
				}
				public String OPERACIONComment(){
				
				    return "";
				
				}
				public String OPERACIONPattern(){
				
					return "";
				
				}
				public String OPERACIONOriginalDbColumnName(){
				
					return "OPERACION";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return 0;
				}
				public Integer DESCRIPCIONPrecision(){
				    return 0;
				}
				public String DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 0;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 0;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 0;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 0;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 0;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.CRITERIO = readString(dis);
					
					this.OPERACION = readString(dis);
					
					this.DESCRIPCION = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.CRITERIO = readString(dis);
					
					this.OPERACION = readString(dis);
					
					this.DESCRIPCION = readString(dis);
					
					this.TIPO_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CRITERIO,dos);
					
					// String
				
						writeString(this.OPERACION,dos);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CRITERIO,dos);
					
					// String
				
						writeString(this.OPERACION,dos);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// String
				
						writeString(this.TIPO_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CRITERIO="+CRITERIO);
		sb.append(",OPERACION="+OPERACION);
		sb.append(",DESCRIPCION="+DESCRIPCION);
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row35Struct row35 = new row35Struct();




	
	/**
	 * [tFileOutputDelimited_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_8", false);
		start_Hash.put("tFileOutputDelimited_8", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row35");
					}
				
		int tos_count_tFileOutputDelimited_8 = 0;
		

String fileName_tFileOutputDelimited_8 = "";
    fileName_tFileOutputDelimited_8 = (new java.io.File(context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+context.archivoSalida+".csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_8 = null;
    String extension_tFileOutputDelimited_8 = null;
    String directory_tFileOutputDelimited_8 = null;
    if((fileName_tFileOutputDelimited_8.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_8.lastIndexOf(".") < fileName_tFileOutputDelimited_8.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
            extension_tFileOutputDelimited_8 = "";
        } else {
            fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0, fileName_tFileOutputDelimited_8.lastIndexOf("."));
            extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(fileName_tFileOutputDelimited_8.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0, fileName_tFileOutputDelimited_8.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_8.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0, fileName_tFileOutputDelimited_8.lastIndexOf("."));
            extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(fileName_tFileOutputDelimited_8.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
            extension_tFileOutputDelimited_8 = "";
        }
        directory_tFileOutputDelimited_8 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_8 = true;
    java.io.File filetFileOutputDelimited_8 = new java.io.File(fileName_tFileOutputDelimited_8);
    globalMap.put("tFileOutputDelimited_8_FILE_NAME",fileName_tFileOutputDelimited_8);
        if(filetFileOutputDelimited_8.exists()){
            isFileGenerated_tFileOutputDelimited_8 = false;
        }
            int nb_line_tFileOutputDelimited_8 = 0;
            int splitedFileNo_tFileOutputDelimited_8 = 0;
            int currentRow_tFileOutputDelimited_8 = 0;

            final String OUT_DELIM_tFileOutputDelimited_8 = /** Start field tFileOutputDelimited_8:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_8:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_8 = /** Start field tFileOutputDelimited_8:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_8:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_8 != null && directory_tFileOutputDelimited_8.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_8 = new java.io.File(directory_tFileOutputDelimited_8);
                        if(!dir_tFileOutputDelimited_8.exists()) {
                            dir_tFileOutputDelimited_8.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_8 = null;

                        outtFileOutputDelimited_8 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_8, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_8", outtFileOutputDelimited_8);
                                    if(filetFileOutputDelimited_8.length()==0){
                                        outtFileOutputDelimited_8.write("CRITERIO");
                                            outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
                                        outtFileOutputDelimited_8.write("OPERACION");
                                            outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
                                        outtFileOutputDelimited_8.write("DESCRIPCION");
                                            outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
                                        outtFileOutputDelimited_8.write("TIPO_DOCUMENTO");
                                            outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
                                        outtFileOutputDelimited_8.write("DOCUMENTO");
                                            outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
                                        outtFileOutputDelimited_8.write("PRIMER_NOMBRE");
                                            outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
                                        outtFileOutputDelimited_8.write("SEGUNDO_NOMBRE");
                                            outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
                                        outtFileOutputDelimited_8.write("PRIMER_APELLIDO");
                                            outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
                                        outtFileOutputDelimited_8.write("SEGUNDO_APELLIDO");
                                        outtFileOutputDelimited_8.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_8);
                                        outtFileOutputDelimited_8.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_8", nb_line_tFileOutputDelimited_8);

 



/**
 * [tFileOutputDelimited_8 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_8", false);
		start_Hash.put("tFixedFlowInput_8", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_8";
	
	
		int tos_count_tFixedFlowInput_8 = 0;
		

	    for (int i_tFixedFlowInput_8 = 0 ; i_tFixedFlowInput_8 < 1 ; i_tFixedFlowInput_8++) {
	                	            	
    	            		row35.CRITERIO = context.AS_CRITERIO;
    	            	        	            	
    	            		row35.OPERACION = context.AS_OPERACION_ACTIVO;
    	            	        	            	
    	            		row35.DESCRIPCION = context.AS_DESCRIPCION;
    	            	        	            	
    	            		row35.TIPO_DOCUMENTO = context.AS_TIPO_DOCUMENTO;
    	            	        	            	
    	            		row35.DOCUMENTO = context.AS_DOCUMENTO;
    	            	        	            	
    	            		row35.PRIMER_NOMBRE = context.AS_PRIMER_NOMBRE;
    	            	        	            	
    	            		row35.SEGUNDO_NOMBRE = context.AS_SEGUNDO_NOMBRE;
    	            	        	            	
    	            		row35.PRIMER_APELLIDO = context.AS_PRIMER_APELLIDO;
    	            	        	            	
    	            		row35.SEGUNDO_APELLIDO = context.AS_SEGUNDO_APELLIDO;
    	            	

 



/**
 * [tFixedFlowInput_8 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_8 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";
	
	

 


	tos_count_tFixedFlowInput_8++;

/**
 * [tFixedFlowInput_8 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";
	
	

 



/**
 * [tFixedFlowInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_8 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row35"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_8 = new StringBuilder();
                            if(row35.CRITERIO != null) {
                        sb_tFileOutputDelimited_8.append(
                            row35.CRITERIO
                        );
                            }
                            sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
                            if(row35.OPERACION != null) {
                        sb_tFileOutputDelimited_8.append(
                            row35.OPERACION
                        );
                            }
                            sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
                            if(row35.DESCRIPCION != null) {
                        sb_tFileOutputDelimited_8.append(
                            row35.DESCRIPCION
                        );
                            }
                            sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
                            if(row35.TIPO_DOCUMENTO != null) {
                        sb_tFileOutputDelimited_8.append(
                            row35.TIPO_DOCUMENTO
                        );
                            }
                            sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
                            if(row35.DOCUMENTO != null) {
                        sb_tFileOutputDelimited_8.append(
                            row35.DOCUMENTO
                        );
                            }
                            sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
                            if(row35.PRIMER_NOMBRE != null) {
                        sb_tFileOutputDelimited_8.append(
                            row35.PRIMER_NOMBRE
                        );
                            }
                            sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
                            if(row35.SEGUNDO_NOMBRE != null) {
                        sb_tFileOutputDelimited_8.append(
                            row35.SEGUNDO_NOMBRE
                        );
                            }
                            sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
                            if(row35.PRIMER_APELLIDO != null) {
                        sb_tFileOutputDelimited_8.append(
                            row35.PRIMER_APELLIDO
                        );
                            }
                            sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
                            if(row35.SEGUNDO_APELLIDO != null) {
                        sb_tFileOutputDelimited_8.append(
                            row35.SEGUNDO_APELLIDO
                        );
                            }
                    sb_tFileOutputDelimited_8.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_8);


                    nb_line_tFileOutputDelimited_8++;
                    resourceMap.put("nb_line_tFileOutputDelimited_8", nb_line_tFileOutputDelimited_8);

                        outtFileOutputDelimited_8.write(sb_tFileOutputDelimited_8.toString());




 


	tos_count_tFileOutputDelimited_8++;

/**
 * [tFileOutputDelimited_8 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_8";
	
	

 



/**
 * [tFileOutputDelimited_8 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_8";
	
	

 



/**
 * [tFileOutputDelimited_8 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";
	
	

 



/**
 * [tFixedFlowInput_8 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_8 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";
	
	

        }
        globalMap.put("tFixedFlowInput_8_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_8", true);
end_Hash.put("tFixedFlowInput_8", System.currentTimeMillis());




/**
 * [tFixedFlowInput_8 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_8 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_8";
	
	



		
			
					if(outtFileOutputDelimited_8!=null) {
						outtFileOutputDelimited_8.flush();
						outtFileOutputDelimited_8.close();
					}
				
				globalMap.put("tFileOutputDelimited_8_NB_LINE",nb_line_tFileOutputDelimited_8);
				globalMap.put("tFileOutputDelimited_8_FILE_NAME",fileName_tFileOutputDelimited_8);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_8", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row35");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_8", true);
end_Hash.put("tFileOutputDelimited_8", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_8 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_8 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";
	
	

 



/**
 * [tFixedFlowInput_8 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_8 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_8";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_8") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_8 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_8");
						if(outtFileOutputDelimited_8!=null) {
							outtFileOutputDelimited_8.flush();
							outtFileOutputDelimited_8.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row40Struct implements routines.system.IPersistableRow<row40Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public Integer USUARIOS_ID;

				public Integer getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 22;
				}
				public Integer USUARIOS_IDPrecision(){
				    return 0;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public Integer AFILIADOS_ID;

				public Integer getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 22;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public Integer ESTADOS_ID;

				public Integer getESTADOS_ID () {
					return this.ESTADOS_ID;
				}

				public Boolean ESTADOS_IDIsNullable(){
				    return true;
				}
				public Boolean ESTADOS_IDIsKey(){
				    return false;
				}
				public Integer ESTADOS_IDLength(){
				    return 22;
				}
				public Integer ESTADOS_IDPrecision(){
				    return 0;
				}
				public String ESTADOS_IDDefault(){
				
					return null;
				
				}
				public String ESTADOS_IDComment(){
				
				    return "FK - AFI_ESTADOS";
				
				}
				public String ESTADOS_IDPattern(){
				
					return "";
				
				}
				public String ESTADOS_IDOriginalDbColumnName(){
				
					return "ESTADOS_ID";
				
				}

				
			    public Integer MOTIVOSESTADO_ID;

				public Integer getMOTIVOSESTADO_ID () {
					return this.MOTIVOSESTADO_ID;
				}

				public Boolean MOTIVOSESTADO_IDIsNullable(){
				    return true;
				}
				public Boolean MOTIVOSESTADO_IDIsKey(){
				    return false;
				}
				public Integer MOTIVOSESTADO_IDLength(){
				    return 22;
				}
				public Integer MOTIVOSESTADO_IDPrecision(){
				    return 0;
				}
				public String MOTIVOSESTADO_IDDefault(){
				
					return null;
				
				}
				public String MOTIVOSESTADO_IDComment(){
				
				    return "FK - AFI_MOTIVOSESTADOS";
				
				}
				public String MOTIVOSESTADO_IDPattern(){
				
					return "";
				
				}
				public String MOTIVOSESTADO_IDOriginalDbColumnName(){
				
					return "MOTIVOSESTADO_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "Fecha del cambio de estado";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.USUARIOS_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.ESTADOS_ID = readInteger(dis);
					
						this.MOTIVOSESTADO_ID = readInteger(dis);
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.USUARIOS_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.ESTADOS_ID = readInteger(dis);
					
						this.MOTIVOSESTADO_ID = readInteger(dis);
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.ESTADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.MOTIVOSESTADO_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.ESTADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.MOTIVOSESTADO_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",ESTADOS_ID="+String.valueOf(ESTADOS_ID));
		sb.append(",MOTIVOSESTADO_ID="+String.valueOf(MOTIVOSESTADO_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row40Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row39Struct implements routines.system.IPersistableRow<row39Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public Integer USUARIOS_ID;

				public Integer getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 22;
				}
				public Integer USUARIOS_IDPrecision(){
				    return 0;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public Integer AFILIADOS_ID;

				public Integer getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 22;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public Integer ESTADOS_ID;

				public Integer getESTADOS_ID () {
					return this.ESTADOS_ID;
				}

				public Boolean ESTADOS_IDIsNullable(){
				    return true;
				}
				public Boolean ESTADOS_IDIsKey(){
				    return false;
				}
				public Integer ESTADOS_IDLength(){
				    return 22;
				}
				public Integer ESTADOS_IDPrecision(){
				    return 0;
				}
				public String ESTADOS_IDDefault(){
				
					return null;
				
				}
				public String ESTADOS_IDComment(){
				
				    return "FK - AFI_ESTADOS";
				
				}
				public String ESTADOS_IDPattern(){
				
					return "";
				
				}
				public String ESTADOS_IDOriginalDbColumnName(){
				
					return "ESTADOS_ID";
				
				}

				
			    public Integer MOTIVOSESTADO_ID;

				public Integer getMOTIVOSESTADO_ID () {
					return this.MOTIVOSESTADO_ID;
				}

				public Boolean MOTIVOSESTADO_IDIsNullable(){
				    return true;
				}
				public Boolean MOTIVOSESTADO_IDIsKey(){
				    return false;
				}
				public Integer MOTIVOSESTADO_IDLength(){
				    return 22;
				}
				public Integer MOTIVOSESTADO_IDPrecision(){
				    return 0;
				}
				public String MOTIVOSESTADO_IDDefault(){
				
					return null;
				
				}
				public String MOTIVOSESTADO_IDComment(){
				
				    return "FK - AFI_MOTIVOSESTADOS";
				
				}
				public String MOTIVOSESTADO_IDPattern(){
				
					return "";
				
				}
				public String MOTIVOSESTADO_IDOriginalDbColumnName(){
				
					return "MOTIVOSESTADO_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "Fecha del cambio de estado";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.USUARIOS_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.ESTADOS_ID = readInteger(dis);
					
						this.MOTIVOSESTADO_ID = readInteger(dis);
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.USUARIOS_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.ESTADOS_ID = readInteger(dis);
					
						this.MOTIVOSESTADO_ID = readInteger(dis);
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.ESTADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.MOTIVOSESTADO_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.ESTADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.MOTIVOSESTADO_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",ESTADOS_ID="+String.valueOf(ESTADOS_ID));
		sb.append(",MOTIVOSESTADO_ID="+String.valueOf(MOTIVOSESTADO_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row39Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row38Struct implements routines.system.IPersistableRow<row38Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public Integer USUARIOS_ID;

				public Integer getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 22;
				}
				public Integer USUARIOS_IDPrecision(){
				    return 0;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public Integer AFILIADOS_ID;

				public Integer getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return true;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 22;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public Integer ESTADOS_ID;

				public Integer getESTADOS_ID () {
					return this.ESTADOS_ID;
				}

				public Boolean ESTADOS_IDIsNullable(){
				    return true;
				}
				public Boolean ESTADOS_IDIsKey(){
				    return false;
				}
				public Integer ESTADOS_IDLength(){
				    return 22;
				}
				public Integer ESTADOS_IDPrecision(){
				    return 0;
				}
				public String ESTADOS_IDDefault(){
				
					return null;
				
				}
				public String ESTADOS_IDComment(){
				
				    return "FK - AFI_ESTADOS";
				
				}
				public String ESTADOS_IDPattern(){
				
					return "";
				
				}
				public String ESTADOS_IDOriginalDbColumnName(){
				
					return "ESTADOS_ID";
				
				}

				
			    public Integer MOTIVOSESTADO_ID;

				public Integer getMOTIVOSESTADO_ID () {
					return this.MOTIVOSESTADO_ID;
				}

				public Boolean MOTIVOSESTADO_IDIsNullable(){
				    return true;
				}
				public Boolean MOTIVOSESTADO_IDIsKey(){
				    return false;
				}
				public Integer MOTIVOSESTADO_IDLength(){
				    return 22;
				}
				public Integer MOTIVOSESTADO_IDPrecision(){
				    return 0;
				}
				public String MOTIVOSESTADO_IDDefault(){
				
					return null;
				
				}
				public String MOTIVOSESTADO_IDComment(){
				
				    return "FK - AFI_MOTIVOSESTADOS";
				
				}
				public String MOTIVOSESTADO_IDPattern(){
				
					return "";
				
				}
				public String MOTIVOSESTADO_IDOriginalDbColumnName(){
				
					return "MOTIVOSESTADO_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "Fecha del cambio de estado";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.USUARIOS_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.ESTADOS_ID = readInteger(dis);
					
						this.MOTIVOSESTADO_ID = readInteger(dis);
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
						this.USUARIOS_ID = readInteger(dis);
					
						this.AFILIADOS_ID = readInteger(dis);
					
						this.ESTADOS_ID = readInteger(dis);
					
						this.MOTIVOSESTADO_ID = readInteger(dis);
					
					this.FECHA = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.ESTADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.MOTIVOSESTADO_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// Integer
				
						writeInteger(this.AFILIADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.ESTADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.MOTIVOSESTADO_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",ESTADOS_ID="+String.valueOf(ESTADOS_ID));
		sb.append(",MOTIVOSESTADO_ID="+String.valueOf(MOTIVOSESTADO_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row38Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row38Struct row38 = new row38Struct();
row40Struct row40 = new row40Struct();
row39Struct row39 = new row39Struct();





	
	/**
	 * [tFileOutputDelimited_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_9", false);
		start_Hash.put("tFileOutputDelimited_9", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row40");
					}
				
		int tos_count_tFileOutputDelimited_9 = 0;
		

String fileName_tFileOutputDelimited_9 = "";
    fileName_tFileOutputDelimited_9 = (new java.io.File(context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+context.archivoSalida+"_AFI_HESTADOS.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_9 = null;
    String extension_tFileOutputDelimited_9 = null;
    String directory_tFileOutputDelimited_9 = null;
    if((fileName_tFileOutputDelimited_9.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_9.lastIndexOf(".") < fileName_tFileOutputDelimited_9.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
            extension_tFileOutputDelimited_9 = "";
        } else {
            fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0, fileName_tFileOutputDelimited_9.lastIndexOf("."));
            extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(fileName_tFileOutputDelimited_9.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0, fileName_tFileOutputDelimited_9.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_9.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0, fileName_tFileOutputDelimited_9.lastIndexOf("."));
            extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(fileName_tFileOutputDelimited_9.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
            extension_tFileOutputDelimited_9 = "";
        }
        directory_tFileOutputDelimited_9 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_9 = true;
    java.io.File filetFileOutputDelimited_9 = new java.io.File(fileName_tFileOutputDelimited_9);
    globalMap.put("tFileOutputDelimited_9_FILE_NAME",fileName_tFileOutputDelimited_9);
        if(filetFileOutputDelimited_9.exists()){
            isFileGenerated_tFileOutputDelimited_9 = false;
        }
            int nb_line_tFileOutputDelimited_9 = 0;
            int splitedFileNo_tFileOutputDelimited_9 = 0;
            int currentRow_tFileOutputDelimited_9 = 0;

            final String OUT_DELIM_tFileOutputDelimited_9 = /** Start field tFileOutputDelimited_9:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_9:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_9 = /** Start field tFileOutputDelimited_9:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_9:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_9 != null && directory_tFileOutputDelimited_9.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_9 = new java.io.File(directory_tFileOutputDelimited_9);
                        if(!dir_tFileOutputDelimited_9.exists()) {
                            dir_tFileOutputDelimited_9.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_9 = null;

                        outtFileOutputDelimited_9 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_9, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_9", outtFileOutputDelimited_9);
                                    if(filetFileOutputDelimited_9.length()==0){
                                        outtFileOutputDelimited_9.write("USUARIOS_ID");
                                            outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
                                        outtFileOutputDelimited_9.write("AFILIADOS_ID");
                                            outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
                                        outtFileOutputDelimited_9.write("ESTADOS_ID");
                                            outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
                                        outtFileOutputDelimited_9.write("MOTIVOSESTADO_ID");
                                            outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
                                        outtFileOutputDelimited_9.write("FECHA");
                                        outtFileOutputDelimited_9.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_9);
                                        outtFileOutputDelimited_9.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_9", nb_line_tFileOutputDelimited_9);

 



/**
 * [tFileOutputDelimited_9 begin ] stop
 */




	
	/**
	 * [tOracleOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_6", false);
		start_Hash.put("tOracleOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row39");
					}
				
		int tos_count_tOracleOutput_6 = 0;
		






    
    int nb_line_tOracleOutput_6 = 0;
    int nb_line_update_tOracleOutput_6 = 0;
    int nb_line_inserted_tOracleOutput_6 = 0;
    int nb_line_deleted_tOracleOutput_6 = 0;
    int nb_line_rejected_tOracleOutput_6 = 0;

    int tmp_batchUpdateCount_tOracleOutput_6 = 0;

    int deletedCount_tOracleOutput_6=0;
    int updatedCount_tOracleOutput_6=0;
    int insertedCount_tOracleOutput_6=0;
    int rowsToCommitCount_tOracleOutput_6=0;
    int rejectedCount_tOracleOutput_6=0;

    boolean whetherReject_tOracleOutput_6 = false;

    java.sql.Connection conn_tOracleOutput_6 = null;

    //optional table
    String dbschema_tOracleOutput_6 = null;
    String tableName_tOracleOutput_6 = null;
        dbschema_tOracleOutput_6 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_6 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_6=0;

        if(dbschema_tOracleOutput_6 == null || dbschema_tOracleOutput_6.trim().length() == 0) {
            tableName_tOracleOutput_6 = ("AFI_HESTADOS");
        } else {
            tableName_tOracleOutput_6 = dbschema_tOracleOutput_6 + "." + ("AFI_HESTADOS");
        }
                String insert_tOracleOutput_6 = "INSERT INTO " + tableName_tOracleOutput_6 + " (USUARIOS_ID,AFILIADOS_ID,ESTADOS_ID,MOTIVOSESTADO_ID,FECHA) VALUES (?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_6 = conn_tOracleOutput_6.prepareStatement(insert_tOracleOutput_6);
                        resourceMap.put("pstmt_tOracleOutput_6", pstmt_tOracleOutput_6);





 



/**
 * [tOracleOutput_6 begin ] stop
 */



	
	/**
	 * [tReplicate_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_6", false);
		start_Hash.put("tReplicate_6", System.currentTimeMillis());
		
	
	currentComponent="tReplicate_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row38");
					}
				
		int tos_count_tReplicate_6 = 0;
		

 



/**
 * [tReplicate_6 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_9", false);
		start_Hash.put("tFixedFlowInput_9", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_9";
	
	
		int tos_count_tFixedFlowInput_9 = 0;
		

	    for (int i_tFixedFlowInput_9 = 0 ; i_tFixedFlowInput_9 < 1 ; i_tFixedFlowInput_9++) {
	                	            	
    	            		row38.USUARIOS_ID = context.HES_USUARIOS_ID;
    	            	        	            	
    	            		row38.AFILIADOS_ID = context.HES_AFILIADOS_ID;
    	            	        	            	
    	            		row38.ESTADOS_ID = context.HES_ESTADOS_ID;
    	            	        	            	
    	            		row38.MOTIVOSESTADO_ID = context.HES_MOTIVOSESTADO_ID;
    	            	        	            	
    	            		row38.FECHA = context.HES_FECHA;
    	            	

 



/**
 * [tFixedFlowInput_9 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_9 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_9";
	
	

 


	tos_count_tFixedFlowInput_9++;

/**
 * [tFixedFlowInput_9 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_9";
	
	

 



/**
 * [tFixedFlowInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tReplicate_6 main ] start
	 */

	

	
	
	currentComponent="tReplicate_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row38"
						
						);
					}
					


	row40 = new row40Struct();
						
	row40.USUARIOS_ID = row38.USUARIOS_ID;								
	row40.AFILIADOS_ID = row38.AFILIADOS_ID;								
	row40.ESTADOS_ID = row38.ESTADOS_ID;								
	row40.MOTIVOSESTADO_ID = row38.MOTIVOSESTADO_ID;								
	row40.FECHA = row38.FECHA;			
	row39 = new row39Struct();
						
	row39.USUARIOS_ID = row38.USUARIOS_ID;								
	row39.AFILIADOS_ID = row38.AFILIADOS_ID;								
	row39.ESTADOS_ID = row38.ESTADOS_ID;								
	row39.MOTIVOSESTADO_ID = row38.MOTIVOSESTADO_ID;								
	row39.FECHA = row38.FECHA;			


 


	tos_count_tReplicate_6++;

/**
 * [tReplicate_6 main ] stop
 */
	
	/**
	 * [tReplicate_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplicate_6";
	
	

 



/**
 * [tReplicate_6 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_9 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row40"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_9 = new StringBuilder();
                            if(row40.USUARIOS_ID != null) {
                        sb_tFileOutputDelimited_9.append(
                            row40.USUARIOS_ID
                        );
                            }
                            sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
                            if(row40.AFILIADOS_ID != null) {
                        sb_tFileOutputDelimited_9.append(
                            row40.AFILIADOS_ID
                        );
                            }
                            sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
                            if(row40.ESTADOS_ID != null) {
                        sb_tFileOutputDelimited_9.append(
                            row40.ESTADOS_ID
                        );
                            }
                            sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
                            if(row40.MOTIVOSESTADO_ID != null) {
                        sb_tFileOutputDelimited_9.append(
                            row40.MOTIVOSESTADO_ID
                        );
                            }
                            sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
                            if(row40.FECHA != null) {
                        sb_tFileOutputDelimited_9.append(
                            FormatterUtils.format_Date(row40.FECHA, "dd-MM-yyyy")
                        );
                            }
                    sb_tFileOutputDelimited_9.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_9);


                    nb_line_tFileOutputDelimited_9++;
                    resourceMap.put("nb_line_tFileOutputDelimited_9", nb_line_tFileOutputDelimited_9);

                        outtFileOutputDelimited_9.write(sb_tFileOutputDelimited_9.toString());




 


	tos_count_tFileOutputDelimited_9++;

/**
 * [tFileOutputDelimited_9 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_9";
	
	

 



/**
 * [tFileOutputDelimited_9 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_9";
	
	

 



/**
 * [tFileOutputDelimited_9 process_data_end ] stop
 */




	
	/**
	 * [tOracleOutput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row39"
						
						);
					}
					



        whetherReject_tOracleOutput_6 = false;
                        if(row39.USUARIOS_ID == null) {
pstmt_tOracleOutput_6.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_6.setInt(1, row39.USUARIOS_ID);
}

                        if(row39.AFILIADOS_ID == null) {
pstmt_tOracleOutput_6.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_6.setInt(2, row39.AFILIADOS_ID);
}

                        if(row39.ESTADOS_ID == null) {
pstmt_tOracleOutput_6.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_6.setInt(3, row39.ESTADOS_ID);
}

                        if(row39.MOTIVOSESTADO_ID == null) {
pstmt_tOracleOutput_6.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_6.setInt(4, row39.MOTIVOSESTADO_ID);
}

                        if(row39.FECHA != null) {
pstmt_tOracleOutput_6.setObject(5, new java.sql.Timestamp(row39.FECHA.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_6.setNull(5, java.sql.Types.DATE);
}

                try {
                    nb_line_tOracleOutput_6++;
                    int processedCount_tOracleOutput_6 = pstmt_tOracleOutput_6.executeUpdate();
                    insertedCount_tOracleOutput_6 += processedCount_tOracleOutput_6;
                    rowsToCommitCount_tOracleOutput_6 += processedCount_tOracleOutput_6;
                } catch(java.lang.Exception e_tOracleOutput_6) {
globalMap.put("tOracleOutput_6_ERROR_MESSAGE",e_tOracleOutput_6.getMessage());
                    whetherReject_tOracleOutput_6 = true;
                            System.err.print(e_tOracleOutput_6.getMessage());
                }

 


	tos_count_tOracleOutput_6++;

/**
 * [tOracleOutput_6 main ] stop
 */
	
	/**
	 * [tOracleOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	

 



/**
 * [tOracleOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	

 



/**
 * [tOracleOutput_6 process_data_end ] stop
 */



	
	/**
	 * [tReplicate_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplicate_6";
	
	

 



/**
 * [tReplicate_6 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_9";
	
	

 



/**
 * [tFixedFlowInput_9 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_9 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_9";
	
	

        }
        globalMap.put("tFixedFlowInput_9_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_9", true);
end_Hash.put("tFixedFlowInput_9", System.currentTimeMillis());




/**
 * [tFixedFlowInput_9 end ] stop
 */

	
	/**
	 * [tReplicate_6 end ] start
	 */

	

	
	
	currentComponent="tReplicate_6";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row38");
			  	}
			  	
 

ok_Hash.put("tReplicate_6", true);
end_Hash.put("tReplicate_6", System.currentTimeMillis());




/**
 * [tReplicate_6 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_9 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_9";
	
	



		
			
					if(outtFileOutputDelimited_9!=null) {
						outtFileOutputDelimited_9.flush();
						outtFileOutputDelimited_9.close();
					}
				
				globalMap.put("tFileOutputDelimited_9_NB_LINE",nb_line_tFileOutputDelimited_9);
				globalMap.put("tFileOutputDelimited_9_FILE_NAME",fileName_tFileOutputDelimited_9);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_9", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row40");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_9", true);
end_Hash.put("tFileOutputDelimited_9", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_9 end ] stop
 */




	
	/**
	 * [tOracleOutput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	
	



	
        if(pstmt_tOracleOutput_6 != null) {
			
				pstmt_tOracleOutput_6.close();
				resourceMap.remove("pstmt_tOracleOutput_6");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_6", true);

	
	nb_line_deleted_tOracleOutput_6=nb_line_deleted_tOracleOutput_6+ deletedCount_tOracleOutput_6;
	nb_line_update_tOracleOutput_6=nb_line_update_tOracleOutput_6 + updatedCount_tOracleOutput_6;
	nb_line_inserted_tOracleOutput_6=nb_line_inserted_tOracleOutput_6 + insertedCount_tOracleOutput_6;
	nb_line_rejected_tOracleOutput_6=nb_line_rejected_tOracleOutput_6 + rejectedCount_tOracleOutput_6;
	
        globalMap.put("tOracleOutput_6_NB_LINE",nb_line_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_UPDATED",nb_line_update_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_6);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row39");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_6", true);
end_Hash.put("tOracleOutput_6", System.currentTimeMillis());




/**
 * [tOracleOutput_6 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_9 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_9";
	
	

 



/**
 * [tFixedFlowInput_9 finally ] stop
 */

	
	/**
	 * [tReplicate_6 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_6";
	
	

 



/**
 * [tReplicate_6 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_9 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_9";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_9") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_9 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_9");
						if(outtFileOutputDelimited_9!=null) {
							outtFileOutputDelimited_9.flush();
							outtFileOutputDelimited_9.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_9 finally ] stop
 */




	
	/**
	 * [tOracleOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_6 = null;
                if ((pstmtToClose_tOracleOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_6")) != null) {
                    pstmtToClose_tOracleOutput_6.close();
                }
    }
 



/**
 * [tOracleOutput_6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row37Struct implements routines.system.IPersistableRow<row37Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 22;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public int PROCESOS_ID;

				public int getPROCESOS_ID () {
					return this.PROCESOS_ID;
				}

				public Boolean PROCESOS_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOS_IDIsKey(){
				    return false;
				}
				public Integer PROCESOS_IDLength(){
				    return 22;
				}
				public Integer PROCESOS_IDPrecision(){
				    return 0;
				}
				public String PROCESOS_IDDefault(){
				
					return null;
				
				}
				public String PROCESOS_IDComment(){
				
				    return "FK - AFI_PROCESOS";
				
				}
				public String PROCESOS_IDPattern(){
				
					return "";
				
				}
				public String PROCESOS_IDOriginalDbColumnName(){
				
					return "PROCESOS_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 500;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "Motivo de la edici\u00F3n";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public int RNOVEDADES_ID;

				public int getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return false;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 22;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return 0;
				}
				public String RNOVEDADES_IDDefault(){
				
					return null;
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "FK - AFI_NOVEDADES";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public Integer VANTERIOR;

				public Integer getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 50;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "Valor anterior";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public Integer VACTUAL;

				public Integer getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 50;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "Valor actual";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String CAMPO;

				public String getCAMPO () {
					return this.CAMPO;
				}

				public Boolean CAMPOIsNullable(){
				    return true;
				}
				public Boolean CAMPOIsKey(){
				    return false;
				}
				public Integer CAMPOLength(){
				    return 150;
				}
				public Integer CAMPOPrecision(){
				    return 0;
				}
				public String CAMPODefault(){
				
					return null;
				
				}
				public String CAMPOComment(){
				
				    return "Campo afectado por el historico";
				
				}
				public String CAMPOPattern(){
				
					return "";
				
				}
				public String CAMPOOriginalDbColumnName(){
				
					return "CAMPO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
						this.VANTERIOR = readInteger(dis);
					
						this.VACTUAL = readInteger(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
						this.VANTERIOR = readInteger(dis);
					
						this.VACTUAL = readInteger(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// Integer
				
						writeInteger(this.VANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// Integer
				
						writeInteger(this.VANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PROCESOS_ID="+String.valueOf(PROCESOS_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",VANTERIOR="+String.valueOf(VANTERIOR));
		sb.append(",VACTUAL="+String.valueOf(VACTUAL));
		sb.append(",CAMPO="+CAMPO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row37Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 22;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public int PROCESOS_ID;

				public int getPROCESOS_ID () {
					return this.PROCESOS_ID;
				}

				public Boolean PROCESOS_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOS_IDIsKey(){
				    return false;
				}
				public Integer PROCESOS_IDLength(){
				    return 22;
				}
				public Integer PROCESOS_IDPrecision(){
				    return 0;
				}
				public String PROCESOS_IDDefault(){
				
					return null;
				
				}
				public String PROCESOS_IDComment(){
				
				    return "FK - AFI_PROCESOS";
				
				}
				public String PROCESOS_IDPattern(){
				
					return "";
				
				}
				public String PROCESOS_IDOriginalDbColumnName(){
				
					return "PROCESOS_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 500;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "Motivo de la edici\u00F3n";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public int RNOVEDADES_ID;

				public int getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return false;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 22;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return 0;
				}
				public String RNOVEDADES_IDDefault(){
				
					return null;
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "FK - AFI_NOVEDADES";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public Integer VANTERIOR;

				public Integer getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 50;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "Valor anterior";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public Integer VACTUAL;

				public Integer getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 50;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "Valor actual";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String CAMPO;

				public String getCAMPO () {
					return this.CAMPO;
				}

				public Boolean CAMPOIsNullable(){
				    return true;
				}
				public Boolean CAMPOIsKey(){
				    return false;
				}
				public Integer CAMPOLength(){
				    return 150;
				}
				public Integer CAMPOPrecision(){
				    return 0;
				}
				public String CAMPODefault(){
				
					return null;
				
				}
				public String CAMPOComment(){
				
				    return "Campo afectado por el historico";
				
				}
				public String CAMPOPattern(){
				
					return "";
				
				}
				public String CAMPOOriginalDbColumnName(){
				
					return "CAMPO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
						this.VANTERIOR = readInteger(dis);
					
						this.VACTUAL = readInteger(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
						this.VANTERIOR = readInteger(dis);
					
						this.VACTUAL = readInteger(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// Integer
				
						writeInteger(this.VANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// Integer
				
						writeInteger(this.VANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PROCESOS_ID="+String.valueOf(PROCESOS_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",VANTERIOR="+String.valueOf(VANTERIOR));
		sb.append(",VACTUAL="+String.valueOf(VACTUAL));
		sb.append(",CAMPO="+CAMPO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row36Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 22;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return 0;
				}
				public String AFILIADOS_IDDefault(){
				
					return null;
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "FK - GEN_AFILIADOS";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public int PROCESOS_ID;

				public int getPROCESOS_ID () {
					return this.PROCESOS_ID;
				}

				public Boolean PROCESOS_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOS_IDIsKey(){
				    return false;
				}
				public Integer PROCESOS_IDLength(){
				    return 22;
				}
				public Integer PROCESOS_IDPrecision(){
				    return 0;
				}
				public String PROCESOS_IDDefault(){
				
					return null;
				
				}
				public String PROCESOS_IDComment(){
				
				    return "FK - AFI_PROCESOS";
				
				}
				public String PROCESOS_IDPattern(){
				
					return "";
				
				}
				public String PROCESOS_IDOriginalDbColumnName(){
				
					return "PROCESOS_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 500;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "Motivo de la edici\u00F3n";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public int RNOVEDADES_ID;

				public int getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return false;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 22;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return 0;
				}
				public String RNOVEDADES_IDDefault(){
				
					return null;
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "FK - AFI_NOVEDADES";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public Integer VANTERIOR;

				public Integer getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 50;
				}
				public Integer VANTERIORPrecision(){
				    return 0;
				}
				public String VANTERIORDefault(){
				
					return null;
				
				}
				public String VANTERIORComment(){
				
				    return "Valor anterior";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public Integer VACTUAL;

				public Integer getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 50;
				}
				public Integer VACTUALPrecision(){
				    return 0;
				}
				public String VACTUALDefault(){
				
					return null;
				
				}
				public String VACTUALComment(){
				
				    return "Valor actual";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public String CAMPO;

				public String getCAMPO () {
					return this.CAMPO;
				}

				public Boolean CAMPOIsNullable(){
				    return true;
				}
				public Boolean CAMPOIsKey(){
				    return false;
				}
				public Integer CAMPOLength(){
				    return 150;
				}
				public Integer CAMPOPrecision(){
				    return 0;
				}
				public String CAMPODefault(){
				
					return null;
				
				}
				public String CAMPOComment(){
				
				    return "Campo afectado por el historico";
				
				}
				public String CAMPOPattern(){
				
					return "";
				
				}
				public String CAMPOOriginalDbColumnName(){
				
					return "CAMPO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
						this.VANTERIOR = readInteger(dis);
					
						this.VACTUAL = readInteger(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
			        this.AFILIADOS_ID = dis.readInt();
					
			        this.PROCESOS_ID = dis.readInt();
					
					this.MOTIVO = readString(dis);
					
			        this.RNOVEDADES_ID = dis.readInt();
					
						this.VANTERIOR = readInteger(dis);
					
						this.VACTUAL = readInteger(dis);
					
					this.CAMPO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// Integer
				
						writeInteger(this.VANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// int
				
		            	dos.writeInt(this.RNOVEDADES_ID);
					
					// Integer
				
						writeInteger(this.VANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.VACTUAL,dos);
					
					// String
				
						writeString(this.CAMPO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PROCESOS_ID="+String.valueOf(PROCESOS_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",VANTERIOR="+String.valueOf(VANTERIOR));
		sb.append(",VACTUAL="+String.valueOf(VACTUAL));
		sb.append(",CAMPO="+CAMPO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row34Struct row34 = new row34Struct();
row37Struct row37 = new row37Struct();
row36Struct row36 = new row36Struct();





	
	/**
	 * [tFileOutputDelimited_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_7", false);
		start_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row37");
					}
				
		int tos_count_tFileOutputDelimited_7 = 0;
		

String fileName_tFileOutputDelimited_7 = "";
    fileName_tFileOutputDelimited_7 = (new java.io.File(context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+context.archivoSalida+"_AFI_HAFILIADOS.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_7 = null;
    String extension_tFileOutputDelimited_7 = null;
    String directory_tFileOutputDelimited_7 = null;
    if((fileName_tFileOutputDelimited_7.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_7.lastIndexOf(".") < fileName_tFileOutputDelimited_7.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
            extension_tFileOutputDelimited_7 = "";
        } else {
            fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0, fileName_tFileOutputDelimited_7.lastIndexOf("."));
            extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(fileName_tFileOutputDelimited_7.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0, fileName_tFileOutputDelimited_7.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_7.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0, fileName_tFileOutputDelimited_7.lastIndexOf("."));
            extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(fileName_tFileOutputDelimited_7.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
            extension_tFileOutputDelimited_7 = "";
        }
        directory_tFileOutputDelimited_7 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_7 = true;
    java.io.File filetFileOutputDelimited_7 = new java.io.File(fileName_tFileOutputDelimited_7);
    globalMap.put("tFileOutputDelimited_7_FILE_NAME",fileName_tFileOutputDelimited_7);
        if(filetFileOutputDelimited_7.exists()){
            isFileGenerated_tFileOutputDelimited_7 = false;
        }
            int nb_line_tFileOutputDelimited_7 = 0;
            int splitedFileNo_tFileOutputDelimited_7 = 0;
            int currentRow_tFileOutputDelimited_7 = 0;

            final String OUT_DELIM_tFileOutputDelimited_7 = /** Start field tFileOutputDelimited_7:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_7:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_7 = /** Start field tFileOutputDelimited_7:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_7:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_7 != null && directory_tFileOutputDelimited_7.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_7 = new java.io.File(directory_tFileOutputDelimited_7);
                        if(!dir_tFileOutputDelimited_7.exists()) {
                            dir_tFileOutputDelimited_7.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_7 = null;

                        outtFileOutputDelimited_7 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_7, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_7", outtFileOutputDelimited_7);
                                    if(filetFileOutputDelimited_7.length()==0){
                                        outtFileOutputDelimited_7.write("AFILIADOS_ID");
                                            outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.write("PROCESOS_ID");
                                            outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.write("MOTIVO");
                                            outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.write("RNOVEDADES_ID");
                                            outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.write("VANTERIOR");
                                            outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.write("VACTUAL");
                                            outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.write("CAMPO");
                                        outtFileOutputDelimited_7.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_7", nb_line_tFileOutputDelimited_7);

 



/**
 * [tFileOutputDelimited_7 begin ] stop
 */




	
	/**
	 * [tOracleOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_5", false);
		start_Hash.put("tOracleOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row36");
					}
				
		int tos_count_tOracleOutput_5 = 0;
		






    
    int nb_line_tOracleOutput_5 = 0;
    int nb_line_update_tOracleOutput_5 = 0;
    int nb_line_inserted_tOracleOutput_5 = 0;
    int nb_line_deleted_tOracleOutput_5 = 0;
    int nb_line_rejected_tOracleOutput_5 = 0;

    int tmp_batchUpdateCount_tOracleOutput_5 = 0;

    int deletedCount_tOracleOutput_5=0;
    int updatedCount_tOracleOutput_5=0;
    int insertedCount_tOracleOutput_5=0;
    int rowsToCommitCount_tOracleOutput_5=0;
    int rejectedCount_tOracleOutput_5=0;

    boolean whetherReject_tOracleOutput_5 = false;

    java.sql.Connection conn_tOracleOutput_5 = null;

    //optional table
    String dbschema_tOracleOutput_5 = null;
    String tableName_tOracleOutput_5 = null;
        dbschema_tOracleOutput_5 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_5=0;

        if(dbschema_tOracleOutput_5 == null || dbschema_tOracleOutput_5.trim().length() == 0) {
            tableName_tOracleOutput_5 = ("AFI_HAFILIADOS");
        } else {
            tableName_tOracleOutput_5 = dbschema_tOracleOutput_5 + "." + ("AFI_HAFILIADOS");
        }
                String insert_tOracleOutput_5 = "INSERT INTO " + tableName_tOracleOutput_5 + " (AFILIADOS_ID,PROCESOS_ID,MOTIVO,RNOVEDADES_ID,VANTERIOR,VACTUAL,CAMPO) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_5 = conn_tOracleOutput_5.prepareStatement(insert_tOracleOutput_5);
                        resourceMap.put("pstmt_tOracleOutput_5", pstmt_tOracleOutput_5);





 



/**
 * [tOracleOutput_5 begin ] stop
 */



	
	/**
	 * [tReplicate_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_5", false);
		start_Hash.put("tReplicate_5", System.currentTimeMillis());
		
	
	currentComponent="tReplicate_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tReplicate_5 = 0;
		

 



/**
 * [tReplicate_5 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_7", false);
		start_Hash.put("tFixedFlowInput_7", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_7";
	
	
		int tos_count_tFixedFlowInput_7 = 0;
		

	    for (int i_tFixedFlowInput_7 = 0 ; i_tFixedFlowInput_7 < 1 ; i_tFixedFlowInput_7++) {
	                	            	
    	            		row34.AFILIADOS_ID = context.HAF_AFILIADOS_ID;
    	            	        	            	
    	            		row34.PROCESOS_ID = context.HAF_PROCESOS_ID;
    	            	        	            	
    	            		row34.MOTIVO = context.HAF_MOTIVO;
    	            	        	            	
    	            		row34.RNOVEDADES_ID = context.HAF_RNOVEDADES_ID;
    	            	        	            	
    	            		row34.VANTERIOR = context.HAF_VANTERIOR;
    	            	        	            	
    	            		row34.VACTUAL = context.HAF_VACTUAL;
    	            	        	            	
    	            		row34.CAMPO = context.HAF_CAMPO;
    	            	

 



/**
 * [tFixedFlowInput_7 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_7 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";
	
	

 


	tos_count_tFixedFlowInput_7++;

/**
 * [tFixedFlowInput_7 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";
	
	

 



/**
 * [tFixedFlowInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tReplicate_5 main ] start
	 */

	

	
	
	currentComponent="tReplicate_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row34"
						
						);
					}
					


	row37 = new row37Struct();
						
	row37.AFILIADOS_ID = row34.AFILIADOS_ID;								
	row37.PROCESOS_ID = row34.PROCESOS_ID;								
	row37.MOTIVO = row34.MOTIVO;								
	row37.RNOVEDADES_ID = row34.RNOVEDADES_ID;								
	row37.VANTERIOR = row34.VANTERIOR;								
	row37.VACTUAL = row34.VACTUAL;								
	row37.CAMPO = row34.CAMPO;			
	row36 = new row36Struct();
						
	row36.AFILIADOS_ID = row34.AFILIADOS_ID;								
	row36.PROCESOS_ID = row34.PROCESOS_ID;								
	row36.MOTIVO = row34.MOTIVO;								
	row36.RNOVEDADES_ID = row34.RNOVEDADES_ID;								
	row36.VANTERIOR = row34.VANTERIOR;								
	row36.VACTUAL = row34.VACTUAL;								
	row36.CAMPO = row34.CAMPO;			


 


	tos_count_tReplicate_5++;

/**
 * [tReplicate_5 main ] stop
 */
	
	/**
	 * [tReplicate_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplicate_5";
	
	

 



/**
 * [tReplicate_5 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_7 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row37"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_7 = new StringBuilder();
                        sb_tFileOutputDelimited_7.append(
                            row37.AFILIADOS_ID
                        );
                            sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
                        sb_tFileOutputDelimited_7.append(
                            row37.PROCESOS_ID
                        );
                            sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
                            if(row37.MOTIVO != null) {
                        sb_tFileOutputDelimited_7.append(
                            row37.MOTIVO
                        );
                            }
                            sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
                        sb_tFileOutputDelimited_7.append(
                            row37.RNOVEDADES_ID
                        );
                            sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
                            if(row37.VANTERIOR != null) {
                        sb_tFileOutputDelimited_7.append(
                            row37.VANTERIOR
                        );
                            }
                            sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
                            if(row37.VACTUAL != null) {
                        sb_tFileOutputDelimited_7.append(
                            row37.VACTUAL
                        );
                            }
                            sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
                            if(row37.CAMPO != null) {
                        sb_tFileOutputDelimited_7.append(
                            row37.CAMPO
                        );
                            }
                    sb_tFileOutputDelimited_7.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);


                    nb_line_tFileOutputDelimited_7++;
                    resourceMap.put("nb_line_tFileOutputDelimited_7", nb_line_tFileOutputDelimited_7);

                        outtFileOutputDelimited_7.write(sb_tFileOutputDelimited_7.toString());




 


	tos_count_tFileOutputDelimited_7++;

/**
 * [tFileOutputDelimited_7 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";
	
	

 



/**
 * [tFileOutputDelimited_7 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";
	
	

 



/**
 * [tFileOutputDelimited_7 process_data_end ] stop
 */




	
	/**
	 * [tOracleOutput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row36"
						
						);
					}
					



        whetherReject_tOracleOutput_5 = false;
                        pstmt_tOracleOutput_5.setInt(1, row36.AFILIADOS_ID);

                        pstmt_tOracleOutput_5.setInt(2, row36.PROCESOS_ID);

                        if(row36.MOTIVO == null) {
pstmt_tOracleOutput_5.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_5.setString(3, row36.MOTIVO);
}

                        pstmt_tOracleOutput_5.setInt(4, row36.RNOVEDADES_ID);

                        if(row36.VANTERIOR == null) {
pstmt_tOracleOutput_5.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_5.setInt(5, row36.VANTERIOR);
}

                        if(row36.VACTUAL == null) {
pstmt_tOracleOutput_5.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_5.setInt(6, row36.VACTUAL);
}

                        if(row36.CAMPO == null) {
pstmt_tOracleOutput_5.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_5.setString(7, row36.CAMPO);
}

                try {
                    nb_line_tOracleOutput_5++;
                    int processedCount_tOracleOutput_5 = pstmt_tOracleOutput_5.executeUpdate();
                    insertedCount_tOracleOutput_5 += processedCount_tOracleOutput_5;
                    rowsToCommitCount_tOracleOutput_5 += processedCount_tOracleOutput_5;
                } catch(java.lang.Exception e_tOracleOutput_5) {
globalMap.put("tOracleOutput_5_ERROR_MESSAGE",e_tOracleOutput_5.getMessage());
                    whetherReject_tOracleOutput_5 = true;
                            System.err.print(e_tOracleOutput_5.getMessage());
                }

 


	tos_count_tOracleOutput_5++;

/**
 * [tOracleOutput_5 main ] stop
 */
	
	/**
	 * [tOracleOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	

 



/**
 * [tOracleOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	

 



/**
 * [tOracleOutput_5 process_data_end ] stop
 */



	
	/**
	 * [tReplicate_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplicate_5";
	
	

 



/**
 * [tReplicate_5 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";
	
	

 



/**
 * [tFixedFlowInput_7 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_7 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";
	
	

        }
        globalMap.put("tFixedFlowInput_7_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_7", true);
end_Hash.put("tFixedFlowInput_7", System.currentTimeMillis());




/**
 * [tFixedFlowInput_7 end ] stop
 */

	
	/**
	 * [tReplicate_5 end ] start
	 */

	

	
	
	currentComponent="tReplicate_5";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tReplicate_5", true);
end_Hash.put("tReplicate_5", System.currentTimeMillis());




/**
 * [tReplicate_5 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_7 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";
	
	



		
			
					if(outtFileOutputDelimited_7!=null) {
						outtFileOutputDelimited_7.flush();
						outtFileOutputDelimited_7.close();
					}
				
				globalMap.put("tFileOutputDelimited_7_NB_LINE",nb_line_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME",fileName_tFileOutputDelimited_7);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_7", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row37");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_7", true);
end_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_7 end ] stop
 */




	
	/**
	 * [tOracleOutput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	
	



	
        if(pstmt_tOracleOutput_5 != null) {
			
				pstmt_tOracleOutput_5.close();
				resourceMap.remove("pstmt_tOracleOutput_5");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_5", true);

	
	nb_line_deleted_tOracleOutput_5=nb_line_deleted_tOracleOutput_5+ deletedCount_tOracleOutput_5;
	nb_line_update_tOracleOutput_5=nb_line_update_tOracleOutput_5 + updatedCount_tOracleOutput_5;
	nb_line_inserted_tOracleOutput_5=nb_line_inserted_tOracleOutput_5 + insertedCount_tOracleOutput_5;
	nb_line_rejected_tOracleOutput_5=nb_line_rejected_tOracleOutput_5 + rejectedCount_tOracleOutput_5;
	
        globalMap.put("tOracleOutput_5_NB_LINE",nb_line_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_UPDATED",nb_line_update_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_5);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row36");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_5", true);
end_Hash.put("tOracleOutput_5", System.currentTimeMillis());




/**
 * [tOracleOutput_5 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_7 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";
	
	

 



/**
 * [tFixedFlowInput_7 finally ] stop
 */

	
	/**
	 * [tReplicate_5 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_5";
	
	

 



/**
 * [tReplicate_5 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_7 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_7") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_7 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_7");
						if(outtFileOutputDelimited_7!=null) {
							outtFileOutputDelimited_7.flush();
							outtFileOutputDelimited_7.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_7 finally ] stop
 */




	
	/**
	 * [tOracleOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_5 = null;
                if ((pstmtToClose_tOracleOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_5")) != null) {
                    pstmtToClose_tOracleOutput_5.close();
                }
    }
 



/**
 * [tOracleOutput_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row21Struct implements routines.system.IPersistableComparableLookupRow<row21Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ID;

				public String getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String PADRE_ID;

				public String getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return true;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return 0;
				}
				public Integer PADRE_IDPrecision(){
				    return 0;
				}
				public String PADRE_IDDefault(){
				
					return null;
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				
			    public String PARENTESCOS_ID;

				public String getPARENTESCOS_ID () {
					return this.PARENTESCOS_ID;
				}

				public Boolean PARENTESCOS_IDIsNullable(){
				    return true;
				}
				public Boolean PARENTESCOS_IDIsKey(){
				    return false;
				}
				public Integer PARENTESCOS_IDLength(){
				    return 0;
				}
				public Integer PARENTESCOS_IDPrecision(){
				    return 0;
				}
				public String PARENTESCOS_IDDefault(){
				
					return null;
				
				}
				public String PARENTESCOS_IDComment(){
				
				    return "";
				
				}
				public String PARENTESCOS_IDPattern(){
				
					return "";
				
				}
				public String PARENTESCOS_IDOriginalDbColumnName(){
				
					return "PARENTESCOS_ID";
				
				}

				
			    public String PLANAFILIACIONES_ID;

				public String getPLANAFILIACIONES_ID () {
					return this.PLANAFILIACIONES_ID;
				}

				public Boolean PLANAFILIACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean PLANAFILIACIONES_IDIsKey(){
				    return false;
				}
				public Integer PLANAFILIACIONES_IDLength(){
				    return 0;
				}
				public Integer PLANAFILIACIONES_IDPrecision(){
				    return 0;
				}
				public String PLANAFILIACIONES_IDDefault(){
				
					return null;
				
				}
				public String PLANAFILIACIONES_IDComment(){
				
				    return "";
				
				}
				public String PLANAFILIACIONES_IDPattern(){
				
					return "";
				
				}
				public String PLANAFILIACIONES_IDOriginalDbColumnName(){
				
					return "PLANAFILIACIONES_ID";
				
				}

				
			    public String TIPO_DOCUMENTO;

				public String getTIPO_DOCUMENTO () {
					return this.TIPO_DOCUMENTO;
				}

				public Boolean TIPO_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPO_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DOCUMENTOLength(){
				    return 0;
				}
				public Integer TIPO_DOCUMENTOPrecision(){
				    return 0;
				}
				public String TIPO_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 0;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 0;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 0;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 0;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 0;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row21Struct other = (row21Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row21Struct other) {

		other.ID = this.ID;
	            other.PADRE_ID = this.PADRE_ID;
	            other.PARENTESCOS_ID = this.PARENTESCOS_ID;
	            other.PLANAFILIACIONES_ID = this.PLANAFILIACIONES_ID;
	            other.TIPO_DOCUMENTO = this.TIPO_DOCUMENTO;
	            other.DOCUMENTO = this.DOCUMENTO;
	            other.PRIMER_NOMBRE = this.PRIMER_NOMBRE;
	            other.SEGUNDO_NOMBRE = this.SEGUNDO_NOMBRE;
	            other.PRIMER_APELLIDO = this.PRIMER_APELLIDO;
	            other.SEGUNDO_APELLIDO = this.SEGUNDO_APELLIDO;
	            other.FECHA = this.FECHA;
	            
	}

	public void copyKeysDataTo(row21Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.PADRE_ID = readString(dis,ois);
					
						this.PARENTESCOS_ID = readString(dis,ois);
					
						this.PLANAFILIACIONES_ID = readString(dis,ois);
					
						this.TIPO_DOCUMENTO = readString(dis,ois);
					
						this.DOCUMENTO = readString(dis,ois);
					
						this.PRIMER_NOMBRE = readString(dis,ois);
					
						this.SEGUNDO_NOMBRE = readString(dis,ois);
					
						this.PRIMER_APELLIDO = readString(dis,ois);
					
						this.SEGUNDO_APELLIDO = readString(dis,ois);
					
						this.FECHA = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.PADRE_ID = readString(dis,objectIn);
					
						this.PARENTESCOS_ID = readString(dis,objectIn);
					
						this.PLANAFILIACIONES_ID = readString(dis,objectIn);
					
						this.TIPO_DOCUMENTO = readString(dis,objectIn);
					
						this.DOCUMENTO = readString(dis,objectIn);
					
						this.PRIMER_NOMBRE = readString(dis,objectIn);
					
						this.SEGUNDO_NOMBRE = readString(dis,objectIn);
					
						this.PRIMER_APELLIDO = readString(dis,objectIn);
					
						this.SEGUNDO_APELLIDO = readString(dis,objectIn);
					
						this.FECHA = readDate(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.PADRE_ID, dos, oos);
					
						writeString(this.PARENTESCOS_ID, dos, oos);
					
						writeString(this.PLANAFILIACIONES_ID, dos, oos);
					
						writeString(this.TIPO_DOCUMENTO, dos, oos);
					
						writeString(this.DOCUMENTO, dos, oos);
					
						writeString(this.PRIMER_NOMBRE, dos, oos);
					
						writeString(this.SEGUNDO_NOMBRE, dos, oos);
					
						writeString(this.PRIMER_APELLIDO, dos, oos);
					
						writeString(this.SEGUNDO_APELLIDO, dos, oos);
					
						writeDate(this.FECHA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.PADRE_ID, dos, objectOut);
					
						writeString(this.PARENTESCOS_ID, dos, objectOut);
					
						writeString(this.PLANAFILIACIONES_ID, dos, objectOut);
					
						writeString(this.TIPO_DOCUMENTO, dos, objectOut);
					
						writeString(this.DOCUMENTO, dos, objectOut);
					
						writeString(this.PRIMER_NOMBRE, dos, objectOut);
					
						writeString(this.SEGUNDO_NOMBRE, dos, objectOut);
					
						writeString(this.PRIMER_APELLIDO, dos, objectOut);
					
						writeString(this.SEGUNDO_APELLIDO, dos, objectOut);
					
						writeDate(this.FECHA, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+ID);
		sb.append(",PADRE_ID="+PADRE_ID);
		sb.append(",PARENTESCOS_ID="+PARENTESCOS_ID);
		sb.append(",PLANAFILIACIONES_ID="+PLANAFILIACIONES_ID);
		sb.append(",TIPO_DOCUMENTO="+TIPO_DOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",FECHA="+String.valueOf(FECHA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row21Struct row21 = new row21Struct();




	
	/**
	 * [tAdvancedHash_row21 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row21", false);
		start_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row21";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tAdvancedHash_row21 = 0;
		

			   		// connection name:row21
			   		// source node:tHashInput_3 - inputs:(after_tOracleInput_5) outputs:(row21,row21) | target node:tAdvancedHash_row21 - inputs:(row21) outputs:()
			   		// linked node: tMap_2 - inputs:(row25,row21) outputs:(row_ina,row_act)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row21 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row21Struct>getLookup(matchingModeEnum_row21);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row21", tHash_Lookup_row21);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row21 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row_d02Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_Criterio_MultiAfiliacion_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row_d02Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row_d02Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row21.ID = next_tHashInput_3.ID;
	row21.PADRE_ID = next_tHashInput_3.PADRE_ID;
	row21.PARENTESCOS_ID = next_tHashInput_3.PARENTESCOS_ID;
	row21.PLANAFILIACIONES_ID = next_tHashInput_3.PLANAFILIACIONES_ID;
	row21.TIPO_DOCUMENTO = next_tHashInput_3.TIPO_DOCUMENTO;
	row21.DOCUMENTO = next_tHashInput_3.DOCUMENTO;
	row21.PRIMER_NOMBRE = next_tHashInput_3.PRIMER_NOMBRE;
	row21.SEGUNDO_NOMBRE = next_tHashInput_3.SEGUNDO_NOMBRE;
	row21.PRIMER_APELLIDO = next_tHashInput_3.PRIMER_APELLIDO;
	row21.SEGUNDO_APELLIDO = next_tHashInput_3.SEGUNDO_APELLIDO;
	row21.FECHA = next_tHashInput_3.FECHA;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row21"
						
						);
					}
					


			   
			   

					row21Struct row21_HashRow = new row21Struct();
		   	   	   
				
				row21_HashRow.ID = row21.ID;
				
				row21_HashRow.PADRE_ID = row21.PADRE_ID;
				
				row21_HashRow.PARENTESCOS_ID = row21.PARENTESCOS_ID;
				
				row21_HashRow.PLANAFILIACIONES_ID = row21.PLANAFILIACIONES_ID;
				
				row21_HashRow.TIPO_DOCUMENTO = row21.TIPO_DOCUMENTO;
				
				row21_HashRow.DOCUMENTO = row21.DOCUMENTO;
				
				row21_HashRow.PRIMER_NOMBRE = row21.PRIMER_NOMBRE;
				
				row21_HashRow.SEGUNDO_NOMBRE = row21.SEGUNDO_NOMBRE;
				
				row21_HashRow.PRIMER_APELLIDO = row21.PRIMER_APELLIDO;
				
				row21_HashRow.SEGUNDO_APELLIDO = row21.SEGUNDO_APELLIDO;
				
				row21_HashRow.FECHA = row21.FECHA;
				
			tHash_Lookup_row21.put(row21_HashRow);
			
            




 


	tos_count_tAdvancedHash_row21++;

/**
 * [tAdvancedHash_row21 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

 



/**
 * [tAdvancedHash_row21 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row21 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

 



/**
 * [tAdvancedHash_row21 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Criterio_MultiAfiliacion_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

tHash_Lookup_row21.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row21", true);
end_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());




/**
 * [tAdvancedHash_row21 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

 



/**
 * [tAdvancedHash_row21 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row_doc_inaStruct implements routines.system.IPersistableComparableLookupRow<row_doc_inaStruct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ID;

				public String getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 0;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row_doc_inaStruct other = (row_doc_inaStruct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row_doc_inaStruct other) {

		other.ID = this.ID;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row_doc_inaStruct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.SIGLA = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.SIGLA = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.SIGLA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.SIGLA, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+ID);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_doc_inaStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_doc_inaStruct row_doc_ina = new row_doc_inaStruct();




	
	/**
	 * [tAdvancedHash_row_doc_ina begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row_doc_ina", false);
		start_Hash.put("tAdvancedHash_row_doc_ina", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row_doc_ina";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row_doc_ina");
					}
				
		int tos_count_tAdvancedHash_row_doc_ina = 0;
		

			   		// connection name:row_doc_ina
			   		// source node:tHashInput_7 - inputs:(after_tOracleInput_5) outputs:(row_doc_ina,row_doc_ina) | target node:tAdvancedHash_row_doc_ina - inputs:(row_doc_ina) outputs:()
			   		// linked node: tMap_4 - inputs:(row_ina,row_doc_ina) outputs:(coincidencias_inactivacion)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row_doc_ina = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_doc_inaStruct> tHash_Lookup_row_doc_ina =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row_doc_inaStruct>getLookup(matchingModeEnum_row_doc_ina);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row_doc_ina", tHash_Lookup_row_doc_ina);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row_doc_ina begin ] stop
 */



	
	/**
	 * [tHashInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_7", false);
		start_Hash.put("tHashInput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_7";
	
	
		int tos_count_tHashInput_7 = 0;
		


int nb_line_tHashInput_7 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row_d01Struct> tHashFile_tHashInput_7 = mf_tHashInput_7.getAdvancedMemoryHashFile("tHashFile_Criterio_MultiAfiliacion_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_7==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row_d01Struct> iterator_tHashInput_7 = tHashFile_tHashInput_7.iterator();
while (iterator_tHashInput_7.hasNext()) {
    row_d01Struct next_tHashInput_7 = iterator_tHashInput_7.next();

	row_doc_ina.ID = next_tHashInput_7.ID;
	row_doc_ina.SIGLA = next_tHashInput_7.SIGLA;

 



/**
 * [tHashInput_7 begin ] stop
 */
	
	/**
	 * [tHashInput_7 main ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 


	tos_count_tHashInput_7++;

/**
 * [tHashInput_7 main ] stop
 */
	
	/**
	 * [tHashInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row_doc_ina main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_doc_ina";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row_doc_ina"
						
						);
					}
					


			   
			   

					row_doc_inaStruct row_doc_ina_HashRow = new row_doc_inaStruct();
		   	   	   
				
				row_doc_ina_HashRow.ID = row_doc_ina.ID;
				
				row_doc_ina_HashRow.SIGLA = row_doc_ina.SIGLA;
				
			tHash_Lookup_row_doc_ina.put(row_doc_ina_HashRow);
			
            




 


	tos_count_tAdvancedHash_row_doc_ina++;

/**
 * [tAdvancedHash_row_doc_ina main ] stop
 */
	
	/**
	 * [tAdvancedHash_row_doc_ina process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_doc_ina";
	
	

 



/**
 * [tAdvancedHash_row_doc_ina process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row_doc_ina process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_doc_ina";
	
	

 



/**
 * [tAdvancedHash_row_doc_ina process_data_end ] stop
 */



	
	/**
	 * [tHashInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_7 end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	
    

		
			nb_line_tHashInput_7++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Criterio_MultiAfiliacion_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_7_NB_LINE", nb_line_tHashInput_7);       

 

ok_Hash.put("tHashInput_7", true);
end_Hash.put("tHashInput_7", System.currentTimeMillis());




/**
 * [tHashInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row_doc_ina end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_doc_ina";
	
	

tHash_Lookup_row_doc_ina.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row_doc_ina");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row_doc_ina", true);
end_Hash.put("tAdvancedHash_row_doc_ina", System.currentTimeMillis());




/**
 * [tAdvancedHash_row_doc_ina end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row_doc_ina finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_doc_ina";
	
	

 



/**
 * [tAdvancedHash_row_doc_ina finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row_doc_actStruct implements routines.system.IPersistableComparableLookupRow<row_doc_actStruct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ID;

				public String getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 0;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row_doc_actStruct other = (row_doc_actStruct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row_doc_actStruct other) {

		other.ID = this.ID;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row_doc_actStruct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.SIGLA = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.SIGLA = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.SIGLA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.SIGLA, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+ID);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_doc_actStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_doc_actStruct row_doc_act = new row_doc_actStruct();




	
	/**
	 * [tAdvancedHash_row_doc_act begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row_doc_act", false);
		start_Hash.put("tAdvancedHash_row_doc_act", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row_doc_act";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row_doc_act");
					}
				
		int tos_count_tAdvancedHash_row_doc_act = 0;
		

			   		// connection name:row_doc_act
			   		// source node:tHashInput_8 - inputs:(after_tOracleInput_5) outputs:(row_doc_act,row_doc_act) | target node:tAdvancedHash_row_doc_act - inputs:(row_doc_act) outputs:()
			   		// linked node: tMap_5 - inputs:(row_act,row_doc_act) outputs:(coincidencias_activacion)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row_doc_act = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row_doc_actStruct> tHash_Lookup_row_doc_act =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row_doc_actStruct>getLookup(matchingModeEnum_row_doc_act);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row_doc_act", tHash_Lookup_row_doc_act);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row_doc_act begin ] stop
 */



	
	/**
	 * [tHashInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_8", false);
		start_Hash.put("tHashInput_8", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_8";
	
	
		int tos_count_tHashInput_8 = 0;
		


int nb_line_tHashInput_8 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_8=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row_d01Struct> tHashFile_tHashInput_8 = mf_tHashInput_8.getAdvancedMemoryHashFile("tHashFile_Criterio_MultiAfiliacion_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_8==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row_d01Struct> iterator_tHashInput_8 = tHashFile_tHashInput_8.iterator();
while (iterator_tHashInput_8.hasNext()) {
    row_d01Struct next_tHashInput_8 = iterator_tHashInput_8.next();

	row_doc_act.ID = next_tHashInput_8.ID;
	row_doc_act.SIGLA = next_tHashInput_8.SIGLA;

 



/**
 * [tHashInput_8 begin ] stop
 */
	
	/**
	 * [tHashInput_8 main ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 


	tos_count_tHashInput_8++;

/**
 * [tHashInput_8 main ] stop
 */
	
	/**
	 * [tHashInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row_doc_act main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_doc_act";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row_doc_act"
						
						);
					}
					


			   
			   

					row_doc_actStruct row_doc_act_HashRow = new row_doc_actStruct();
		   	   	   
				
				row_doc_act_HashRow.ID = row_doc_act.ID;
				
				row_doc_act_HashRow.SIGLA = row_doc_act.SIGLA;
				
			tHash_Lookup_row_doc_act.put(row_doc_act_HashRow);
			
            




 


	tos_count_tAdvancedHash_row_doc_act++;

/**
 * [tAdvancedHash_row_doc_act main ] stop
 */
	
	/**
	 * [tAdvancedHash_row_doc_act process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_doc_act";
	
	

 



/**
 * [tAdvancedHash_row_doc_act process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row_doc_act process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_doc_act";
	
	

 



/**
 * [tAdvancedHash_row_doc_act process_data_end ] stop
 */



	
	/**
	 * [tHashInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_8 end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	
    

		
			nb_line_tHashInput_8++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Criterio_MultiAfiliacion_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_8_NB_LINE", nb_line_tHashInput_8);       

 

ok_Hash.put("tHashInput_8", true);
end_Hash.put("tHashInput_8", System.currentTimeMillis());




/**
 * [tHashInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row_doc_act end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_doc_act";
	
	

tHash_Lookup_row_doc_act.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row_doc_act");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row_doc_act", true);
end_Hash.put("tAdvancedHash_row_doc_act", System.currentTimeMillis());




/**
 * [tAdvancedHash_row_doc_act end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_8 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row_doc_act finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row_doc_act";
	
	

 



/**
 * [tAdvancedHash_row_doc_act finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return "";
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return "";
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return "";
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return "";
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}

				public Boolean system_pidIsNullable(){
				    return true;
				}
				public Boolean system_pidIsKey(){
				    return false;
				}
				public Integer system_pidLength(){
				    return 8;
				}
				public Integer system_pidPrecision(){
				    return 0;
				}
				public String system_pidDefault(){
				
					return "";
				
				}
				public String system_pidComment(){
				
				    return null;
				
				}
				public String system_pidPattern(){
				
				    return null;
				
				}
				public String system_pidOriginalDbColumnName(){
				
					return "system_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return "";
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return "";
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}

				public Boolean job_repository_idIsNullable(){
				    return true;
				}
				public Boolean job_repository_idIsKey(){
				    return false;
				}
				public Integer job_repository_idLength(){
				    return 255;
				}
				public Integer job_repository_idPrecision(){
				    return 0;
				}
				public String job_repository_idDefault(){
				
					return "";
				
				}
				public String job_repository_idComment(){
				
				    return null;
				
				}
				public String job_repository_idPattern(){
				
				    return null;
				
				}
				public String job_repository_idOriginalDbColumnName(){
				
					return "job_repository_id";
				
				}

				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}

				public Boolean job_versionIsNullable(){
				    return true;
				}
				public Boolean job_versionIsKey(){
				    return false;
				}
				public Integer job_versionLength(){
				    return 255;
				}
				public Integer job_versionPrecision(){
				    return 0;
				}
				public String job_versionDefault(){
				
					return "";
				
				}
				public String job_versionComment(){
				
				    return null;
				
				}
				public String job_versionPattern(){
				
				    return null;
				
				}
				public String job_versionOriginalDbColumnName(){
				
					return "job_version";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return "";
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return "";
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}

				public Boolean message_typeIsNullable(){
				    return true;
				}
				public Boolean message_typeIsKey(){
				    return false;
				}
				public Integer message_typeLength(){
				    return 255;
				}
				public Integer message_typePrecision(){
				    return 0;
				}
				public String message_typeDefault(){
				
					return "";
				
				}
				public String message_typeComment(){
				
				    return null;
				
				}
				public String message_typePattern(){
				
				    return null;
				
				}
				public String message_typeOriginalDbColumnName(){
				
					return "message_type";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return "";
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}

				public Boolean durationIsNullable(){
				    return true;
				}
				public Boolean durationIsKey(){
				    return false;
				}
				public Integer durationLength(){
				    return 8;
				}
				public Integer durationPrecision(){
				    return 0;
				}
				public String durationDefault(){
				
					return "";
				
				}
				public String durationComment(){
				
				    return null;
				
				}
				public String durationPattern(){
				
				    return null;
				
				}
				public String durationOriginalDbColumnName(){
				
					return "duration";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion.length == 0) {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_Criterio_MultiAfiliacion, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_Criterio_MultiAfiliacion) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+context.archivoSalida+"_LOGSTAT.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("moment");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("father_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("root_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("system_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("project");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("job");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("job_repository_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("job_version");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("context");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("origin");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("message_type");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("message");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("duration");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tStatCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tStatCatcher_1", false);
		start_Hash.put("tStatCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tStatCatcher_1";
	
	
		int tos_count_tStatCatcher_1 = 0;
		

	for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
		row8.pid = pid;
		row8.root_pid = rootPid;
		row8.father_pid = fatherPid;	
    	row8.project = projectName;
    	row8.job = jobName;
    	row8.context = contextStr;
		row8.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		row8.message = scm.getMessage();
		row8.duration = scm.getDuration();
		row8.moment = scm.getMoment();
		row8.message_type = scm.getMessageType();
		row8.job_version = scm.getJobVersion();
		row8.job_repository_id = scm.getJobId();
		row8.system_pid = scm.getSystemPid();

 



/**
 * [tStatCatcher_1 begin ] stop
 */
	
	/**
	 * [tStatCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";
	
	

 


	tos_count_tStatCatcher_1++;

/**
 * [tStatCatcher_1 main ] stop
 */
	
	/**
	 * [tStatCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";
	
	

 



/**
 * [tStatCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row8.moment != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row8.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row8.pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row8.pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row8.father_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row8.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row8.root_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row8.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row8.system_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row8.system_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row8.project != null) {
                        sb_tFileOutputDelimited_1.append(
                            row8.project
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row8.job != null) {
                        sb_tFileOutputDelimited_1.append(
                            row8.job
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row8.job_repository_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row8.job_repository_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row8.job_version != null) {
                        sb_tFileOutputDelimited_1.append(
                            row8.job_version
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row8.context != null) {
                        sb_tFileOutputDelimited_1.append(
                            row8.context
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row8.origin != null) {
                        sb_tFileOutputDelimited_1.append(
                            row8.origin
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row8.message_type != null) {
                        sb_tFileOutputDelimited_1.append(
                            row8.message_type
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row8.message != null) {
                        sb_tFileOutputDelimited_1.append(
                            row8.message
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row8.duration != null) {
                        sb_tFileOutputDelimited_1.append(
                            row8.duration
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tStatCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";
	
	

 



/**
 * [tStatCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tStatCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";
	
	

	}


 

ok_Hash.put("tStatCatcher_1", true);
end_Hash.put("tStatCatcher_1", System.currentTimeMillis());




/**
 * [tStatCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tStatCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";
	
	

 



/**
 * [tStatCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final Criterio_MultiAfiliacion Criterio_MultiAfiliacionClass = new Criterio_MultiAfiliacion();

        int exitCode = Criterio_MultiAfiliacionClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Criterio_MultiAfiliacion.class.getClassLoader().getResourceAsStream("afi_extincion/criterio_multiafiliacion_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Criterio_MultiAfiliacion.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("nombreEstadoActivo", "id_String");
                        if(context.getStringValue("nombreEstadoActivo") == null) {
                            context.nombreEstadoActivo = null;
                        } else {
                            context.nombreEstadoActivo=(String) context.getProperty("nombreEstadoActivo");
                        }
                        context.setContextType("nombreEstadoInactivo", "id_String");
                        if(context.getStringValue("nombreEstadoInactivo") == null) {
                            context.nombreEstadoInactivo = null;
                        } else {
                            context.nombreEstadoInactivo=(String) context.getProperty("nombreEstadoInactivo");
                        }
                        context.setContextType("nombreEstadoInexistente", "id_String");
                        if(context.getStringValue("nombreEstadoInexistente") == null) {
                            context.nombreEstadoInexistente = null;
                        } else {
                            context.nombreEstadoInexistente=(String) context.getProperty("nombreEstadoInexistente");
                        }
                        context.setContextType("nombreEstadoProvisional", "id_String");
                        if(context.getStringValue("nombreEstadoProvisional") == null) {
                            context.nombreEstadoProvisional = null;
                        } else {
                            context.nombreEstadoProvisional=(String) context.getProperty("nombreEstadoProvisional");
                        }
                        context.setContextType("nombreEstadoIncompleto", "id_String");
                        if(context.getStringValue("nombreEstadoIncompleto") == null) {
                            context.nombreEstadoIncompleto = null;
                        } else {
                            context.nombreEstadoIncompleto=(String) context.getProperty("nombreEstadoIncompleto");
                        }
                        context.setContextType("fileSystem_Path", "id_String");
                        if(context.getStringValue("fileSystem_Path") == null) {
                            context.fileSystem_Path = null;
                        } else {
                            context.fileSystem_Path=(String) context.getProperty("fileSystem_Path");
                        }
                        context.setContextType("archivoSalida", "id_String");
                        if(context.getStringValue("archivoSalida") == null) {
                            context.archivoSalida = null;
                        } else {
                            context.archivoSalida=(String) context.getProperty("archivoSalida");
                        }
                        context.setContextType("fileSystem_Area", "id_String");
                        if(context.getStringValue("fileSystem_Area") == null) {
                            context.fileSystem_Area = null;
                        } else {
                            context.fileSystem_Area=(String) context.getProperty("fileSystem_Area");
                        }
                        context.setContextType("oracle_ServiceName", "id_String");
                        if(context.getStringValue("oracle_ServiceName") == null) {
                            context.oracle_ServiceName = null;
                        } else {
                            context.oracle_ServiceName=(String) context.getProperty("oracle_ServiceName");
                        }
                        context.setContextType("oracle_AdditionalParams", "id_String");
                        if(context.getStringValue("oracle_AdditionalParams") == null) {
                            context.oracle_AdditionalParams = null;
                        } else {
                            context.oracle_AdditionalParams=(String) context.getProperty("oracle_AdditionalParams");
                        }
                        context.setContextType("oracle_User", "id_String");
                        if(context.getStringValue("oracle_User") == null) {
                            context.oracle_User = null;
                        } else {
                            context.oracle_User=(String) context.getProperty("oracle_User");
                        }
                        context.setContextType("oracle_Schema", "id_String");
                        if(context.getStringValue("oracle_Schema") == null) {
                            context.oracle_Schema = null;
                        } else {
                            context.oracle_Schema=(String) context.getProperty("oracle_Schema");
                        }
                        context.setContextType("oracle_Host", "id_String");
                        if(context.getStringValue("oracle_Host") == null) {
                            context.oracle_Host = null;
                        } else {
                            context.oracle_Host=(String) context.getProperty("oracle_Host");
                        }
                        context.setContextType("oracle_Sid", "id_String");
                        if(context.getStringValue("oracle_Sid") == null) {
                            context.oracle_Sid = null;
                        } else {
                            context.oracle_Sid=(String) context.getProperty("oracle_Sid");
                        }
                        context.setContextType("oracle_Password", "id_String");
                        if(context.getStringValue("oracle_Password") == null) {
                            context.oracle_Password = null;
                        } else {
                            context.oracle_Password=(String) context.getProperty("oracle_Password");
                        }
                        context.setContextType("oracle_Port", "id_String");
                        if(context.getStringValue("oracle_Port") == null) {
                            context.oracle_Port = null;
                        } else {
                            context.oracle_Port=(String) context.getProperty("oracle_Port");
                        }
                        context.setContextType("HES_FECHA", "id_Date");
                        if(context.getStringValue("HES_FECHA") == null) {
                            context.HES_FECHA = null;
                        } else {
                            String context_HES_FECHA_value = context.getProperty("HES_FECHA");
                            try{
                                if (context_HES_FECHA_value == null){
                                    context_HES_FECHA_value = "";
                                }
                                int context_HES_FECHA_pos = context_HES_FECHA_value.indexOf(";");
                                String context_HES_FECHA_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_HES_FECHA_pos > -1){
                                    context_HES_FECHA_pattern = context_HES_FECHA_value.substring(0, context_HES_FECHA_pos);
                                    context_HES_FECHA_value = context_HES_FECHA_value.substring(context_HES_FECHA_pos + 1);
                                }

                                context.HES_FECHA=(java.util.Date)(new java.text.SimpleDateFormat(context_HES_FECHA_pattern).parse(context_HES_FECHA_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_HES_FECHA_longValue = Long.valueOf(context_HES_FECHA_value);
                                    context.HES_FECHA = new java.util.Date(context_HES_FECHA_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "HES_FECHA", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.HES_FECHA=null;
                                }
                            }
                        }
                        context.setContextType("HES_MOTIVOSESTADO_ID", "id_Integer");
                        if(context.getStringValue("HES_MOTIVOSESTADO_ID") == null) {
                            context.HES_MOTIVOSESTADO_ID = null;
                        } else {
                            try{
                                context.HES_MOTIVOSESTADO_ID=routines.system.ParserUtils.parseTo_Integer (context.getProperty("HES_MOTIVOSESTADO_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "HES_MOTIVOSESTADO_ID", e.getMessage()));
                                context.HES_MOTIVOSESTADO_ID=null;
                            }
                        }
                        context.setContextType("HES_AFILIADOS_ID", "id_Integer");
                        if(context.getStringValue("HES_AFILIADOS_ID") == null) {
                            context.HES_AFILIADOS_ID = null;
                        } else {
                            try{
                                context.HES_AFILIADOS_ID=routines.system.ParserUtils.parseTo_Integer (context.getProperty("HES_AFILIADOS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "HES_AFILIADOS_ID", e.getMessage()));
                                context.HES_AFILIADOS_ID=null;
                            }
                        }
                        context.setContextType("HES_ESTADOS_ID", "id_Integer");
                        if(context.getStringValue("HES_ESTADOS_ID") == null) {
                            context.HES_ESTADOS_ID = null;
                        } else {
                            try{
                                context.HES_ESTADOS_ID=routines.system.ParserUtils.parseTo_Integer (context.getProperty("HES_ESTADOS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "HES_ESTADOS_ID", e.getMessage()));
                                context.HES_ESTADOS_ID=null;
                            }
                        }
                        context.setContextType("HES_USUARIOS_ID", "id_Integer");
                        if(context.getStringValue("HES_USUARIOS_ID") == null) {
                            context.HES_USUARIOS_ID = null;
                        } else {
                            try{
                                context.HES_USUARIOS_ID=routines.system.ParserUtils.parseTo_Integer (context.getProperty("HES_USUARIOS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "HES_USUARIOS_ID", e.getMessage()));
                                context.HES_USUARIOS_ID=null;
                            }
                        }
                        context.setContextType("HAF_MOTIVO", "id_String");
                        if(context.getStringValue("HAF_MOTIVO") == null) {
                            context.HAF_MOTIVO = null;
                        } else {
                            context.HAF_MOTIVO=(String) context.getProperty("HAF_MOTIVO");
                        }
                        context.setContextType("HAF_PROCESOS_ID", "id_Integer");
                        if(context.getStringValue("HAF_PROCESOS_ID") == null) {
                            context.HAF_PROCESOS_ID = null;
                        } else {
                            try{
                                context.HAF_PROCESOS_ID=routines.system.ParserUtils.parseTo_Integer (context.getProperty("HAF_PROCESOS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "HAF_PROCESOS_ID", e.getMessage()));
                                context.HAF_PROCESOS_ID=null;
                            }
                        }
                        context.setContextType("HAF_RNOVEDADES_ID", "id_Integer");
                        if(context.getStringValue("HAF_RNOVEDADES_ID") == null) {
                            context.HAF_RNOVEDADES_ID = null;
                        } else {
                            try{
                                context.HAF_RNOVEDADES_ID=routines.system.ParserUtils.parseTo_Integer (context.getProperty("HAF_RNOVEDADES_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "HAF_RNOVEDADES_ID", e.getMessage()));
                                context.HAF_RNOVEDADES_ID=null;
                            }
                        }
                        context.setContextType("HAF_VANTERIOR", "id_Integer");
                        if(context.getStringValue("HAF_VANTERIOR") == null) {
                            context.HAF_VANTERIOR = null;
                        } else {
                            try{
                                context.HAF_VANTERIOR=routines.system.ParserUtils.parseTo_Integer (context.getProperty("HAF_VANTERIOR"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "HAF_VANTERIOR", e.getMessage()));
                                context.HAF_VANTERIOR=null;
                            }
                        }
                        context.setContextType("HAF_CAMPO", "id_String");
                        if(context.getStringValue("HAF_CAMPO") == null) {
                            context.HAF_CAMPO = null;
                        } else {
                            context.HAF_CAMPO=(String) context.getProperty("HAF_CAMPO");
                        }
                        context.setContextType("HAF_AFILIADOS_ID", "id_Integer");
                        if(context.getStringValue("HAF_AFILIADOS_ID") == null) {
                            context.HAF_AFILIADOS_ID = null;
                        } else {
                            try{
                                context.HAF_AFILIADOS_ID=routines.system.ParserUtils.parseTo_Integer (context.getProperty("HAF_AFILIADOS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "HAF_AFILIADOS_ID", e.getMessage()));
                                context.HAF_AFILIADOS_ID=null;
                            }
                        }
                        context.setContextType("HAF_VACTUAL", "id_Integer");
                        if(context.getStringValue("HAF_VACTUAL") == null) {
                            context.HAF_VACTUAL = null;
                        } else {
                            try{
                                context.HAF_VACTUAL=routines.system.ParserUtils.parseTo_Integer (context.getProperty("HAF_VACTUAL"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "HAF_VACTUAL", e.getMessage()));
                                context.HAF_VACTUAL=null;
                            }
                        }
                        context.setContextType("AS_PRIMER_APELLIDO", "id_String");
                        if(context.getStringValue("AS_PRIMER_APELLIDO") == null) {
                            context.AS_PRIMER_APELLIDO = null;
                        } else {
                            context.AS_PRIMER_APELLIDO=(String) context.getProperty("AS_PRIMER_APELLIDO");
                        }
                        context.setContextType("AS_SEGUNDO_APELLIDO", "id_String");
                        if(context.getStringValue("AS_SEGUNDO_APELLIDO") == null) {
                            context.AS_SEGUNDO_APELLIDO = null;
                        } else {
                            context.AS_SEGUNDO_APELLIDO=(String) context.getProperty("AS_SEGUNDO_APELLIDO");
                        }
                        context.setContextType("AS_DESCRIPCION", "id_String");
                        if(context.getStringValue("AS_DESCRIPCION") == null) {
                            context.AS_DESCRIPCION = null;
                        } else {
                            context.AS_DESCRIPCION=(String) context.getProperty("AS_DESCRIPCION");
                        }
                        context.setContextType("AS_DOCUMENTO", "id_String");
                        if(context.getStringValue("AS_DOCUMENTO") == null) {
                            context.AS_DOCUMENTO = null;
                        } else {
                            context.AS_DOCUMENTO=(String) context.getProperty("AS_DOCUMENTO");
                        }
                        context.setContextType("AS_SEGUNDO_NOMBRE", "id_String");
                        if(context.getStringValue("AS_SEGUNDO_NOMBRE") == null) {
                            context.AS_SEGUNDO_NOMBRE = null;
                        } else {
                            context.AS_SEGUNDO_NOMBRE=(String) context.getProperty("AS_SEGUNDO_NOMBRE");
                        }
                        context.setContextType("AS_PRIMER_NOMBRE", "id_String");
                        if(context.getStringValue("AS_PRIMER_NOMBRE") == null) {
                            context.AS_PRIMER_NOMBRE = null;
                        } else {
                            context.AS_PRIMER_NOMBRE=(String) context.getProperty("AS_PRIMER_NOMBRE");
                        }
                        context.setContextType("auxInfoMotivoNombreInactivo", "id_String");
                        if(context.getStringValue("auxInfoMotivoNombreInactivo") == null) {
                            context.auxInfoMotivoNombreInactivo = null;
                        } else {
                            context.auxInfoMotivoNombreInactivo=(String) context.getProperty("auxInfoMotivoNombreInactivo");
                        }
                        context.setContextType("auxInfoMotivoNombreProvisional", "id_String");
                        if(context.getStringValue("auxInfoMotivoNombreProvisional") == null) {
                            context.auxInfoMotivoNombreProvisional = null;
                        } else {
                            context.auxInfoMotivoNombreProvisional=(String) context.getProperty("auxInfoMotivoNombreProvisional");
                        }
                        context.setContextType("auxInfoMotivoIdInactivo", "id_Integer");
                        if(context.getStringValue("auxInfoMotivoIdInactivo") == null) {
                            context.auxInfoMotivoIdInactivo = null;
                        } else {
                            try{
                                context.auxInfoMotivoIdInactivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("auxInfoMotivoIdInactivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "auxInfoMotivoIdInactivo", e.getMessage()));
                                context.auxInfoMotivoIdInactivo=null;
                            }
                        }
                        context.setContextType("auxInfoMotivoIdActivo", "id_Integer");
                        if(context.getStringValue("auxInfoMotivoIdActivo") == null) {
                            context.auxInfoMotivoIdActivo = null;
                        } else {
                            try{
                                context.auxInfoMotivoIdActivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("auxInfoMotivoIdActivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "auxInfoMotivoIdActivo", e.getMessage()));
                                context.auxInfoMotivoIdActivo=null;
                            }
                        }
                        context.setContextType("auxInfoMotivoNombreActivo", "id_String");
                        if(context.getStringValue("auxInfoMotivoNombreActivo") == null) {
                            context.auxInfoMotivoNombreActivo = null;
                        } else {
                            context.auxInfoMotivoNombreActivo=(String) context.getProperty("auxInfoMotivoNombreActivo");
                        }
                        context.setContextType("auxInfoMotivoIdProvisional", "id_Integer");
                        if(context.getStringValue("auxInfoMotivoIdProvisional") == null) {
                            context.auxInfoMotivoIdProvisional = null;
                        } else {
                            try{
                                context.auxInfoMotivoIdProvisional=routines.system.ParserUtils.parseTo_Integer (context.getProperty("auxInfoMotivoIdProvisional"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "auxInfoMotivoIdProvisional", e.getMessage()));
                                context.auxInfoMotivoIdProvisional=null;
                            }
                        }
                        context.setContextType("auxInfoRnovedadesActivo", "id_Integer");
                        if(context.getStringValue("auxInfoRnovedadesActivo") == null) {
                            context.auxInfoRnovedadesActivo = null;
                        } else {
                            try{
                                context.auxInfoRnovedadesActivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("auxInfoRnovedadesActivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "auxInfoRnovedadesActivo", e.getMessage()));
                                context.auxInfoRnovedadesActivo=null;
                            }
                        }
                        context.setContextType("auxInfoRnovedadesInactivo", "id_Integer");
                        if(context.getStringValue("auxInfoRnovedadesInactivo") == null) {
                            context.auxInfoRnovedadesInactivo = null;
                        } else {
                            try{
                                context.auxInfoRnovedadesInactivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("auxInfoRnovedadesInactivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "auxInfoRnovedadesInactivo", e.getMessage()));
                                context.auxInfoRnovedadesInactivo=null;
                            }
                        }
                        context.setContextType("auxInfoRnovedadesProvisional", "id_Integer");
                        if(context.getStringValue("auxInfoRnovedadesProvisional") == null) {
                            context.auxInfoRnovedadesProvisional = null;
                        } else {
                            try{
                                context.auxInfoRnovedadesProvisional=routines.system.ParserUtils.parseTo_Integer (context.getProperty("auxInfoRnovedadesProvisional"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "auxInfoRnovedadesProvisional", e.getMessage()));
                                context.auxInfoRnovedadesProvisional=null;
                            }
                        }
                        context.setContextType("auxSiglaMotivoEstadoActivo", "id_String");
                        if(context.getStringValue("auxSiglaMotivoEstadoActivo") == null) {
                            context.auxSiglaMotivoEstadoActivo = null;
                        } else {
                            context.auxSiglaMotivoEstadoActivo=(String) context.getProperty("auxSiglaMotivoEstadoActivo");
                        }
                        context.setContextType("auxSiglaMotivoEstadoInactivo", "id_String");
                        if(context.getStringValue("auxSiglaMotivoEstadoInactivo") == null) {
                            context.auxSiglaMotivoEstadoInactivo = null;
                        } else {
                            context.auxSiglaMotivoEstadoInactivo=(String) context.getProperty("auxSiglaMotivoEstadoInactivo");
                        }
                        context.setContextType("auxSiglaMotivoEstadoProvisional", "id_String");
                        if(context.getStringValue("auxSiglaMotivoEstadoProvisional") == null) {
                            context.auxSiglaMotivoEstadoProvisional = null;
                        } else {
                            context.auxSiglaMotivoEstadoProvisional=(String) context.getProperty("auxSiglaMotivoEstadoProvisional");
                        }
                        context.setContextType("idEstadoProvisional", "id_Integer");
                        if(context.getStringValue("idEstadoProvisional") == null) {
                            context.idEstadoProvisional = null;
                        } else {
                            try{
                                context.idEstadoProvisional=routines.system.ParserUtils.parseTo_Integer (context.getProperty("idEstadoProvisional"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "idEstadoProvisional", e.getMessage()));
                                context.idEstadoProvisional=null;
                            }
                        }
                        context.setContextType("idEstadoActivo", "id_Integer");
                        if(context.getStringValue("idEstadoActivo") == null) {
                            context.idEstadoActivo = null;
                        } else {
                            try{
                                context.idEstadoActivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("idEstadoActivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "idEstadoActivo", e.getMessage()));
                                context.idEstadoActivo=null;
                            }
                        }
                        context.setContextType("idEstadoInactivo", "id_Integer");
                        if(context.getStringValue("idEstadoInactivo") == null) {
                            context.idEstadoInactivo = null;
                        } else {
                            try{
                                context.idEstadoInactivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("idEstadoInactivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "idEstadoInactivo", e.getMessage()));
                                context.idEstadoInactivo=null;
                            }
                        }
                        context.setContextType("RnovedadesInactivoId", "id_String");
                        if(context.getStringValue("RnovedadesInactivoId") == null) {
                            context.RnovedadesInactivoId = null;
                        } else {
                            context.RnovedadesInactivoId=(String) context.getProperty("RnovedadesInactivoId");
                        }
                        context.setContextType("RnovedadesActivoId", "id_String");
                        if(context.getStringValue("RnovedadesActivoId") == null) {
                            context.RnovedadesActivoId = null;
                        } else {
                            context.RnovedadesActivoId=(String) context.getProperty("RnovedadesActivoId");
                        }
                        context.setContextType("RnovedadesProvisionalId", "id_String");
                        if(context.getStringValue("RnovedadesProvisionalId") == null) {
                            context.RnovedadesProvisionalId = null;
                        } else {
                            context.RnovedadesProvisionalId=(String) context.getProperty("RnovedadesProvisionalId");
                        }
                        context.setContextType("TafiliadoBeneficiario", "id_String");
                        if(context.getStringValue("TafiliadoBeneficiario") == null) {
                            context.TafiliadoBeneficiario = null;
                        } else {
                            context.TafiliadoBeneficiario=(String) context.getProperty("TafiliadoBeneficiario");
                        }
                        context.setContextType("TafiliadoTitular", "id_String");
                        if(context.getStringValue("TafiliadoTitular") == null) {
                            context.TafiliadoTitular = null;
                        } else {
                            context.TafiliadoTitular=(String) context.getProperty("TafiliadoTitular");
                        }
                        context.setContextType("auxCriterioActual", "id_Integer");
                        if(context.getStringValue("auxCriterioActual") == null) {
                            context.auxCriterioActual = null;
                        } else {
                            try{
                                context.auxCriterioActual=routines.system.ParserUtils.parseTo_Integer (context.getProperty("auxCriterioActual"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "auxCriterioActual", e.getMessage()));
                                context.auxCriterioActual=null;
                            }
                        }
                        context.setContextType("auxRango", "id_String");
                        if(context.getStringValue("auxRango") == null) {
                            context.auxRango = null;
                        } else {
                            context.auxRango=(String) context.getProperty("auxRango");
                        }
                        context.setContextType("auxAumentoRegistros", "id_Integer");
                        if(context.getStringValue("auxAumentoRegistros") == null) {
                            context.auxAumentoRegistros = null;
                        } else {
                            try{
                                context.auxAumentoRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("auxAumentoRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "auxAumentoRegistros", e.getMessage()));
                                context.auxAumentoRegistros=null;
                            }
                        }
                        context.setContextType("archivoConfiguracion", "id_String");
                        if(context.getStringValue("archivoConfiguracion") == null) {
                            context.archivoConfiguracion = null;
                        } else {
                            context.archivoConfiguracion=(String) context.getProperty("archivoConfiguracion");
                        }
                        context.setContextType("auxPosicionRegistros", "id_Integer");
                        if(context.getStringValue("auxPosicionRegistros") == null) {
                            context.auxPosicionRegistros = null;
                        } else {
                            try{
                                context.auxPosicionRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("auxPosicionRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "auxPosicionRegistros", e.getMessage()));
                                context.auxPosicionRegistros=null;
                            }
                        }
                        context.setContextType("MotivoEstadoCaso10_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso10_INAC") == null) {
                            context.MotivoEstadoCaso10_INAC = null;
                        } else {
                            context.MotivoEstadoCaso10_INAC=(String) context.getProperty("MotivoEstadoCaso10_INAC");
                        }
                        context.setContextType("MotivoEstadoCaso06_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso06_PROV") == null) {
                            context.MotivoEstadoCaso06_PROV = null;
                        } else {
                            context.MotivoEstadoCaso06_PROV=(String) context.getProperty("MotivoEstadoCaso06_PROV");
                        }
                        context.setContextType("MotivoEstadoCaso09_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso09_ACTI") == null) {
                            context.MotivoEstadoCaso09_ACTI = null;
                        } else {
                            context.MotivoEstadoCaso09_ACTI=(String) context.getProperty("MotivoEstadoCaso09_ACTI");
                        }
                        context.setContextType("MotivoEstadoCaso13_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso13_ACTI") == null) {
                            context.MotivoEstadoCaso13_ACTI = null;
                        } else {
                            context.MotivoEstadoCaso13_ACTI=(String) context.getProperty("MotivoEstadoCaso13_ACTI");
                        }
                        context.setContextType("MotivoEstadoCaso05_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso05_PROV") == null) {
                            context.MotivoEstadoCaso05_PROV = null;
                        } else {
                            context.MotivoEstadoCaso05_PROV=(String) context.getProperty("MotivoEstadoCaso05_PROV");
                        }
                        context.setContextType("MotivoEstadoCaso12_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso12_INAC") == null) {
                            context.MotivoEstadoCaso12_INAC = null;
                        } else {
                            context.MotivoEstadoCaso12_INAC=(String) context.getProperty("MotivoEstadoCaso12_INAC");
                        }
                        context.setContextType("MotivoEstadoCaso01_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso01_PROV") == null) {
                            context.MotivoEstadoCaso01_PROV = null;
                        } else {
                            context.MotivoEstadoCaso01_PROV=(String) context.getProperty("MotivoEstadoCaso01_PROV");
                        }
                        context.setContextType("MotivoEstadoCaso02_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso02_PROV") == null) {
                            context.MotivoEstadoCaso02_PROV = null;
                        } else {
                            context.MotivoEstadoCaso02_PROV=(String) context.getProperty("MotivoEstadoCaso02_PROV");
                        }
                        context.setContextType("MotivoEstadoCaso07_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso07_INAC") == null) {
                            context.MotivoEstadoCaso07_INAC = null;
                        } else {
                            context.MotivoEstadoCaso07_INAC=(String) context.getProperty("MotivoEstadoCaso07_INAC");
                        }
                        context.setContextType("MotivoEstadoCaso07_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso07_ACTI") == null) {
                            context.MotivoEstadoCaso07_ACTI = null;
                        } else {
                            context.MotivoEstadoCaso07_ACTI=(String) context.getProperty("MotivoEstadoCaso07_ACTI");
                        }
                        context.setContextType("MotivoEstadoCaso11_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso11_INAC") == null) {
                            context.MotivoEstadoCaso11_INAC = null;
                        } else {
                            context.MotivoEstadoCaso11_INAC=(String) context.getProperty("MotivoEstadoCaso11_INAC");
                        }
                        context.setContextType("MotivoEstadoCaso01_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso01_INAC") == null) {
                            context.MotivoEstadoCaso01_INAC = null;
                        } else {
                            context.MotivoEstadoCaso01_INAC=(String) context.getProperty("MotivoEstadoCaso01_INAC");
                        }
                        context.setContextType("MotivoEstadoCaso09_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso09_INAC") == null) {
                            context.MotivoEstadoCaso09_INAC = null;
                        } else {
                            context.MotivoEstadoCaso09_INAC=(String) context.getProperty("MotivoEstadoCaso09_INAC");
                        }
                        context.setContextType("MotivoEstadoCaso10_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso10_ACTI") == null) {
                            context.MotivoEstadoCaso10_ACTI = null;
                        } else {
                            context.MotivoEstadoCaso10_ACTI=(String) context.getProperty("MotivoEstadoCaso10_ACTI");
                        }
                        context.setContextType("MotivoEstadoCaso11_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso11_ACTI") == null) {
                            context.MotivoEstadoCaso11_ACTI = null;
                        } else {
                            context.MotivoEstadoCaso11_ACTI=(String) context.getProperty("MotivoEstadoCaso11_ACTI");
                        }
                        context.setContextType("MotivoEstadoCaso05_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso05_INAC") == null) {
                            context.MotivoEstadoCaso05_INAC = null;
                        } else {
                            context.MotivoEstadoCaso05_INAC=(String) context.getProperty("MotivoEstadoCaso05_INAC");
                        }
                        context.setContextType("MotivoEstadoCaso12_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso12_ACTI") == null) {
                            context.MotivoEstadoCaso12_ACTI = null;
                        } else {
                            context.MotivoEstadoCaso12_ACTI=(String) context.getProperty("MotivoEstadoCaso12_ACTI");
                        }
                        context.setContextType("MotivoEstadoCaso04_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso04_PROV") == null) {
                            context.MotivoEstadoCaso04_PROV = null;
                        } else {
                            context.MotivoEstadoCaso04_PROV=(String) context.getProperty("MotivoEstadoCaso04_PROV");
                        }
                        context.setContextType("MotivoEstadoCaso04_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso04_INAC") == null) {
                            context.MotivoEstadoCaso04_INAC = null;
                        } else {
                            context.MotivoEstadoCaso04_INAC=(String) context.getProperty("MotivoEstadoCaso04_INAC");
                        }
                        context.setContextType("MotivoEstadoCaso02_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso02_INAC") == null) {
                            context.MotivoEstadoCaso02_INAC = null;
                        } else {
                            context.MotivoEstadoCaso02_INAC=(String) context.getProperty("MotivoEstadoCaso02_INAC");
                        }
                        context.setContextType("MotivoEstadoCaso03_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso03_ACTI") == null) {
                            context.MotivoEstadoCaso03_ACTI = null;
                        } else {
                            context.MotivoEstadoCaso03_ACTI=(String) context.getProperty("MotivoEstadoCaso03_ACTI");
                        }
                        context.setContextType("MotivoEstadoCaso02_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso02_ACTI") == null) {
                            context.MotivoEstadoCaso02_ACTI = null;
                        } else {
                            context.MotivoEstadoCaso02_ACTI=(String) context.getProperty("MotivoEstadoCaso02_ACTI");
                        }
                        context.setContextType("MotivoEstadoCaso03_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso03_PROV") == null) {
                            context.MotivoEstadoCaso03_PROV = null;
                        } else {
                            context.MotivoEstadoCaso03_PROV=(String) context.getProperty("MotivoEstadoCaso03_PROV");
                        }
                        context.setContextType("MotivoEstadoCaso08_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso08_INAC") == null) {
                            context.MotivoEstadoCaso08_INAC = null;
                        } else {
                            context.MotivoEstadoCaso08_INAC=(String) context.getProperty("MotivoEstadoCaso08_INAC");
                        }
                        context.setContextType("MotivoEstadoCaso10_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso10_PROV") == null) {
                            context.MotivoEstadoCaso10_PROV = null;
                        } else {
                            context.MotivoEstadoCaso10_PROV=(String) context.getProperty("MotivoEstadoCaso10_PROV");
                        }
                        context.setContextType("MotivoEstadoCaso08_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso08_ACTI") == null) {
                            context.MotivoEstadoCaso08_ACTI = null;
                        } else {
                            context.MotivoEstadoCaso08_ACTI=(String) context.getProperty("MotivoEstadoCaso08_ACTI");
                        }
                        context.setContextType("MotivoEstadoCaso06_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso06_INAC") == null) {
                            context.MotivoEstadoCaso06_INAC = null;
                        } else {
                            context.MotivoEstadoCaso06_INAC=(String) context.getProperty("MotivoEstadoCaso06_INAC");
                        }
                        context.setContextType("MotivoEstadoCaso06_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso06_ACTI") == null) {
                            context.MotivoEstadoCaso06_ACTI = null;
                        } else {
                            context.MotivoEstadoCaso06_ACTI=(String) context.getProperty("MotivoEstadoCaso06_ACTI");
                        }
                        context.setContextType("MotivoEstadoCaso04_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso04_ACTI") == null) {
                            context.MotivoEstadoCaso04_ACTI = null;
                        } else {
                            context.MotivoEstadoCaso04_ACTI=(String) context.getProperty("MotivoEstadoCaso04_ACTI");
                        }
                        context.setContextType("MotivoEstadoCaso09_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso09_PROV") == null) {
                            context.MotivoEstadoCaso09_PROV = null;
                        } else {
                            context.MotivoEstadoCaso09_PROV=(String) context.getProperty("MotivoEstadoCaso09_PROV");
                        }
                        context.setContextType("MotivoEstadoCaso13_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso13_PROV") == null) {
                            context.MotivoEstadoCaso13_PROV = null;
                        } else {
                            context.MotivoEstadoCaso13_PROV=(String) context.getProperty("MotivoEstadoCaso13_PROV");
                        }
                        context.setContextType("MotivoEstadoCaso11_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso11_PROV") == null) {
                            context.MotivoEstadoCaso11_PROV = null;
                        } else {
                            context.MotivoEstadoCaso11_PROV=(String) context.getProperty("MotivoEstadoCaso11_PROV");
                        }
                        context.setContextType("MotivoEstadoCaso00_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso00_PROV") == null) {
                            context.MotivoEstadoCaso00_PROV = null;
                        } else {
                            context.MotivoEstadoCaso00_PROV=(String) context.getProperty("MotivoEstadoCaso00_PROV");
                        }
                        context.setContextType("MotivoEstadoCaso01_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso01_ACTI") == null) {
                            context.MotivoEstadoCaso01_ACTI = null;
                        } else {
                            context.MotivoEstadoCaso01_ACTI=(String) context.getProperty("MotivoEstadoCaso01_ACTI");
                        }
                        context.setContextType("MotivoEstadoCaso08_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso08_PROV") == null) {
                            context.MotivoEstadoCaso08_PROV = null;
                        } else {
                            context.MotivoEstadoCaso08_PROV=(String) context.getProperty("MotivoEstadoCaso08_PROV");
                        }
                        context.setContextType("MotivoEstadoCaso07_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso07_PROV") == null) {
                            context.MotivoEstadoCaso07_PROV = null;
                        } else {
                            context.MotivoEstadoCaso07_PROV=(String) context.getProperty("MotivoEstadoCaso07_PROV");
                        }
                        context.setContextType("MotivoEstadoCaso03_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso03_INAC") == null) {
                            context.MotivoEstadoCaso03_INAC = null;
                        } else {
                            context.MotivoEstadoCaso03_INAC=(String) context.getProperty("MotivoEstadoCaso03_INAC");
                        }
                        context.setContextType("MotivoEstadoCaso05_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso05_ACTI") == null) {
                            context.MotivoEstadoCaso05_ACTI = null;
                        } else {
                            context.MotivoEstadoCaso05_ACTI=(String) context.getProperty("MotivoEstadoCaso05_ACTI");
                        }
                        context.setContextType("MotivoEstadoCaso13_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso13_INAC") == null) {
                            context.MotivoEstadoCaso13_INAC = null;
                        } else {
                            context.MotivoEstadoCaso13_INAC=(String) context.getProperty("MotivoEstadoCaso13_INAC");
                        }
                        context.setContextType("MotivoEstadoCaso12_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso12_PROV") == null) {
                            context.MotivoEstadoCaso12_PROV = null;
                        } else {
                            context.MotivoEstadoCaso12_PROV=(String) context.getProperty("MotivoEstadoCaso12_PROV");
                        }
                        }

                private void processContext_1() {
                        context.setContextType("infoIdJobProcesar", "id_Integer");
                        if(context.getStringValue("infoIdJobProcesar") == null) {
                            context.infoIdJobProcesar = null;
                        } else {
                            try{
                                context.infoIdJobProcesar=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoIdJobProcesar"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoIdJobProcesar", e.getMessage()));
                                context.infoIdJobProcesar=null;
                            }
                        }
                        context.setContextType("infoUsuarioJobProcesar", "id_Integer");
                        if(context.getStringValue("infoUsuarioJobProcesar") == null) {
                            context.infoUsuarioJobProcesar = null;
                        } else {
                            try{
                                context.infoUsuarioJobProcesar=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoUsuarioJobProcesar"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoUsuarioJobProcesar", e.getMessage()));
                                context.infoUsuarioJobProcesar=null;
                            }
                        }
                        context.setContextType("infoDescripcionJobProcesar", "id_String");
                        if(context.getStringValue("infoDescripcionJobProcesar") == null) {
                            context.infoDescripcionJobProcesar = null;
                        } else {
                            context.infoDescripcionJobProcesar=(String) context.getProperty("infoDescripcionJobProcesar");
                        }
                        context.setContextType("infoIdProceso", "id_Integer");
                        if(context.getStringValue("infoIdProceso") == null) {
                            context.infoIdProceso = null;
                        } else {
                            try{
                                context.infoIdProceso=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoIdProceso"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoIdProceso", e.getMessage()));
                                context.infoIdProceso=null;
                            }
                        }
                        context.setContextType("infoCodigoTipoJob", "id_Integer");
                        if(context.getStringValue("infoCodigoTipoJob") == null) {
                            context.infoCodigoTipoJob = null;
                        } else {
                            try{
                                context.infoCodigoTipoJob=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoCodigoTipoJob"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoCodigoTipoJob", e.getMessage()));
                                context.infoCodigoTipoJob=null;
                            }
                        }
                        context.setContextType("infoTipoProceso", "id_Integer");
                        if(context.getStringValue("infoTipoProceso") == null) {
                            context.infoTipoProceso = null;
                        } else {
                            try{
                                context.infoTipoProceso=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoTipoProceso"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoTipoProceso", e.getMessage()));
                                context.infoTipoProceso=null;
                            }
                        }
                        context.setContextType("infoIdEstadoActivo", "id_Integer");
                        if(context.getStringValue("infoIdEstadoActivo") == null) {
                            context.infoIdEstadoActivo = null;
                        } else {
                            try{
                                context.infoIdEstadoActivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoIdEstadoActivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoIdEstadoActivo", e.getMessage()));
                                context.infoIdEstadoActivo=null;
                            }
                        }
                        context.setContextType("auxAfiliadosCriterio", "id_String");
                        if(context.getStringValue("auxAfiliadosCriterio") == null) {
                            context.auxAfiliadosCriterio = null;
                        } else {
                            context.auxAfiliadosCriterio=(String) context.getProperty("auxAfiliadosCriterio");
                        }
                        context.setContextType("AS_CRITERIO", "id_String");
                        if(context.getStringValue("AS_CRITERIO") == null) {
                            context.AS_CRITERIO = null;
                        } else {
                            context.AS_CRITERIO=(String) context.getProperty("AS_CRITERIO");
                        }
                        context.setContextType("AS_OPERACION_ACTIVO", "id_String");
                        if(context.getStringValue("AS_OPERACION_ACTIVO") == null) {
                            context.AS_OPERACION_ACTIVO = null;
                        } else {
                            context.AS_OPERACION_ACTIVO=(String) context.getProperty("AS_OPERACION_ACTIVO");
                        }
                        context.setContextType("AS_OPERACION_INACTIVO", "id_String");
                        if(context.getStringValue("AS_OPERACION_INACTIVO") == null) {
                            context.AS_OPERACION_INACTIVO = null;
                        } else {
                            context.AS_OPERACION_INACTIVO=(String) context.getProperty("AS_OPERACION_INACTIVO");
                        }
                        context.setContextType("AS_OPERACION_PROVISIONAL", "id_String");
                        if(context.getStringValue("AS_OPERACION_PROVISIONAL") == null) {
                            context.AS_OPERACION_PROVISIONAL = null;
                        } else {
                            context.AS_OPERACION_PROVISIONAL=(String) context.getProperty("AS_OPERACION_PROVISIONAL");
                        }
                        context.setContextType("AS_TIPO_DOCUMENTO", "id_String");
                        if(context.getStringValue("AS_TIPO_DOCUMENTO") == null) {
                            context.AS_TIPO_DOCUMENTO = null;
                        } else {
                            context.AS_TIPO_DOCUMENTO=(String) context.getProperty("AS_TIPO_DOCUMENTO");
                        }
                        context.setContextType("auxPrimerLoop", "id_Boolean");
                        if(context.getStringValue("auxPrimerLoop") == null) {
                            context.auxPrimerLoop = null;
                        } else {
                            try{
                                context.auxPrimerLoop=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("auxPrimerLoop"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "auxPrimerLoop", e.getMessage()));
                                context.auxPrimerLoop=null;
                            }
                        }
                        context.setContextType("MotivoEstadoMutiAfiliacion_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoMutiAfiliacion_INAC") == null) {
                            context.MotivoEstadoMutiAfiliacion_INAC = null;
                        } else {
                            context.MotivoEstadoMutiAfiliacion_INAC=(String) context.getProperty("MotivoEstadoMutiAfiliacion_INAC");
                        }
                        context.setContextType("MotivoEstadoMutiAfiliacion_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoMutiAfiliacion_PROV") == null) {
                            context.MotivoEstadoMutiAfiliacion_PROV = null;
                        } else {
                            context.MotivoEstadoMutiAfiliacion_PROV=(String) context.getProperty("MotivoEstadoMutiAfiliacion_PROV");
                        }
                        context.setContextType("MotivoEstadoMutiAfiliacion_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoMutiAfiliacion_ACTI") == null) {
                            context.MotivoEstadoMutiAfiliacion_ACTI = null;
                        } else {
                            context.MotivoEstadoMutiAfiliacion_ACTI=(String) context.getProperty("MotivoEstadoMutiAfiliacion_ACTI");
                        }
                        context.setContextType("TDocumentoCertRetiroEps", "id_Integer");
                        if(context.getStringValue("TDocumentoCertRetiroEps") == null) {
                            context.TDocumentoCertRetiroEps = null;
                        } else {
                            try{
                                context.TDocumentoCertRetiroEps=routines.system.ParserUtils.parseTo_Integer (context.getProperty("TDocumentoCertRetiroEps"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "TDocumentoCertRetiroEps", e.getMessage()));
                                context.TDocumentoCertRetiroEps=null;
                            }
                        }
                        context.setContextType("TDocumentoCertDependenciaEconomica", "id_Integer");
                        if(context.getStringValue("TDocumentoCertDependenciaEconomica") == null) {
                            context.TDocumentoCertDependenciaEconomica = null;
                        } else {
                            try{
                                context.TDocumentoCertDependenciaEconomica=routines.system.ParserUtils.parseTo_Integer (context.getProperty("TDocumentoCertDependenciaEconomica"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "TDocumentoCertDependenciaEconomica", e.getMessage()));
                                context.TDocumentoCertDependenciaEconomica=null;
                            }
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                        processContext_1();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("nombreEstadoActivo")) {
                context.nombreEstadoActivo = (String) parentContextMap.get("nombreEstadoActivo");
            }if (parentContextMap.containsKey("nombreEstadoInactivo")) {
                context.nombreEstadoInactivo = (String) parentContextMap.get("nombreEstadoInactivo");
            }if (parentContextMap.containsKey("nombreEstadoInexistente")) {
                context.nombreEstadoInexistente = (String) parentContextMap.get("nombreEstadoInexistente");
            }if (parentContextMap.containsKey("nombreEstadoProvisional")) {
                context.nombreEstadoProvisional = (String) parentContextMap.get("nombreEstadoProvisional");
            }if (parentContextMap.containsKey("nombreEstadoIncompleto")) {
                context.nombreEstadoIncompleto = (String) parentContextMap.get("nombreEstadoIncompleto");
            }if (parentContextMap.containsKey("fileSystem_Path")) {
                context.fileSystem_Path = (String) parentContextMap.get("fileSystem_Path");
            }if (parentContextMap.containsKey("archivoSalida")) {
                context.archivoSalida = (String) parentContextMap.get("archivoSalida");
            }if (parentContextMap.containsKey("fileSystem_Area")) {
                context.fileSystem_Area = (String) parentContextMap.get("fileSystem_Area");
            }if (parentContextMap.containsKey("oracle_ServiceName")) {
                context.oracle_ServiceName = (String) parentContextMap.get("oracle_ServiceName");
            }if (parentContextMap.containsKey("oracle_AdditionalParams")) {
                context.oracle_AdditionalParams = (String) parentContextMap.get("oracle_AdditionalParams");
            }if (parentContextMap.containsKey("oracle_User")) {
                context.oracle_User = (String) parentContextMap.get("oracle_User");
            }if (parentContextMap.containsKey("oracle_Schema")) {
                context.oracle_Schema = (String) parentContextMap.get("oracle_Schema");
            }if (parentContextMap.containsKey("oracle_Host")) {
                context.oracle_Host = (String) parentContextMap.get("oracle_Host");
            }if (parentContextMap.containsKey("oracle_Sid")) {
                context.oracle_Sid = (String) parentContextMap.get("oracle_Sid");
            }if (parentContextMap.containsKey("oracle_Password")) {
                context.oracle_Password = (String) parentContextMap.get("oracle_Password");
            }if (parentContextMap.containsKey("oracle_Port")) {
                context.oracle_Port = (String) parentContextMap.get("oracle_Port");
            }if (parentContextMap.containsKey("HES_FECHA")) {
                context.HES_FECHA = (java.util.Date) parentContextMap.get("HES_FECHA");
            }if (parentContextMap.containsKey("HES_MOTIVOSESTADO_ID")) {
                context.HES_MOTIVOSESTADO_ID = (Integer) parentContextMap.get("HES_MOTIVOSESTADO_ID");
            }if (parentContextMap.containsKey("HES_AFILIADOS_ID")) {
                context.HES_AFILIADOS_ID = (Integer) parentContextMap.get("HES_AFILIADOS_ID");
            }if (parentContextMap.containsKey("HES_ESTADOS_ID")) {
                context.HES_ESTADOS_ID = (Integer) parentContextMap.get("HES_ESTADOS_ID");
            }if (parentContextMap.containsKey("HES_USUARIOS_ID")) {
                context.HES_USUARIOS_ID = (Integer) parentContextMap.get("HES_USUARIOS_ID");
            }if (parentContextMap.containsKey("HAF_MOTIVO")) {
                context.HAF_MOTIVO = (String) parentContextMap.get("HAF_MOTIVO");
            }if (parentContextMap.containsKey("HAF_PROCESOS_ID")) {
                context.HAF_PROCESOS_ID = (Integer) parentContextMap.get("HAF_PROCESOS_ID");
            }if (parentContextMap.containsKey("HAF_RNOVEDADES_ID")) {
                context.HAF_RNOVEDADES_ID = (Integer) parentContextMap.get("HAF_RNOVEDADES_ID");
            }if (parentContextMap.containsKey("HAF_VANTERIOR")) {
                context.HAF_VANTERIOR = (Integer) parentContextMap.get("HAF_VANTERIOR");
            }if (parentContextMap.containsKey("HAF_CAMPO")) {
                context.HAF_CAMPO = (String) parentContextMap.get("HAF_CAMPO");
            }if (parentContextMap.containsKey("HAF_AFILIADOS_ID")) {
                context.HAF_AFILIADOS_ID = (Integer) parentContextMap.get("HAF_AFILIADOS_ID");
            }if (parentContextMap.containsKey("HAF_VACTUAL")) {
                context.HAF_VACTUAL = (Integer) parentContextMap.get("HAF_VACTUAL");
            }if (parentContextMap.containsKey("AS_PRIMER_APELLIDO")) {
                context.AS_PRIMER_APELLIDO = (String) parentContextMap.get("AS_PRIMER_APELLIDO");
            }if (parentContextMap.containsKey("AS_SEGUNDO_APELLIDO")) {
                context.AS_SEGUNDO_APELLIDO = (String) parentContextMap.get("AS_SEGUNDO_APELLIDO");
            }if (parentContextMap.containsKey("AS_DESCRIPCION")) {
                context.AS_DESCRIPCION = (String) parentContextMap.get("AS_DESCRIPCION");
            }if (parentContextMap.containsKey("AS_DOCUMENTO")) {
                context.AS_DOCUMENTO = (String) parentContextMap.get("AS_DOCUMENTO");
            }if (parentContextMap.containsKey("AS_SEGUNDO_NOMBRE")) {
                context.AS_SEGUNDO_NOMBRE = (String) parentContextMap.get("AS_SEGUNDO_NOMBRE");
            }if (parentContextMap.containsKey("AS_PRIMER_NOMBRE")) {
                context.AS_PRIMER_NOMBRE = (String) parentContextMap.get("AS_PRIMER_NOMBRE");
            }if (parentContextMap.containsKey("auxInfoMotivoNombreInactivo")) {
                context.auxInfoMotivoNombreInactivo = (String) parentContextMap.get("auxInfoMotivoNombreInactivo");
            }if (parentContextMap.containsKey("auxInfoMotivoNombreProvisional")) {
                context.auxInfoMotivoNombreProvisional = (String) parentContextMap.get("auxInfoMotivoNombreProvisional");
            }if (parentContextMap.containsKey("auxInfoMotivoIdInactivo")) {
                context.auxInfoMotivoIdInactivo = (Integer) parentContextMap.get("auxInfoMotivoIdInactivo");
            }if (parentContextMap.containsKey("auxInfoMotivoIdActivo")) {
                context.auxInfoMotivoIdActivo = (Integer) parentContextMap.get("auxInfoMotivoIdActivo");
            }if (parentContextMap.containsKey("auxInfoMotivoNombreActivo")) {
                context.auxInfoMotivoNombreActivo = (String) parentContextMap.get("auxInfoMotivoNombreActivo");
            }if (parentContextMap.containsKey("auxInfoMotivoIdProvisional")) {
                context.auxInfoMotivoIdProvisional = (Integer) parentContextMap.get("auxInfoMotivoIdProvisional");
            }if (parentContextMap.containsKey("auxInfoRnovedadesActivo")) {
                context.auxInfoRnovedadesActivo = (Integer) parentContextMap.get("auxInfoRnovedadesActivo");
            }if (parentContextMap.containsKey("auxInfoRnovedadesInactivo")) {
                context.auxInfoRnovedadesInactivo = (Integer) parentContextMap.get("auxInfoRnovedadesInactivo");
            }if (parentContextMap.containsKey("auxInfoRnovedadesProvisional")) {
                context.auxInfoRnovedadesProvisional = (Integer) parentContextMap.get("auxInfoRnovedadesProvisional");
            }if (parentContextMap.containsKey("auxSiglaMotivoEstadoActivo")) {
                context.auxSiglaMotivoEstadoActivo = (String) parentContextMap.get("auxSiglaMotivoEstadoActivo");
            }if (parentContextMap.containsKey("auxSiglaMotivoEstadoInactivo")) {
                context.auxSiglaMotivoEstadoInactivo = (String) parentContextMap.get("auxSiglaMotivoEstadoInactivo");
            }if (parentContextMap.containsKey("auxSiglaMotivoEstadoProvisional")) {
                context.auxSiglaMotivoEstadoProvisional = (String) parentContextMap.get("auxSiglaMotivoEstadoProvisional");
            }if (parentContextMap.containsKey("idEstadoProvisional")) {
                context.idEstadoProvisional = (Integer) parentContextMap.get("idEstadoProvisional");
            }if (parentContextMap.containsKey("idEstadoActivo")) {
                context.idEstadoActivo = (Integer) parentContextMap.get("idEstadoActivo");
            }if (parentContextMap.containsKey("idEstadoInactivo")) {
                context.idEstadoInactivo = (Integer) parentContextMap.get("idEstadoInactivo");
            }if (parentContextMap.containsKey("RnovedadesInactivoId")) {
                context.RnovedadesInactivoId = (String) parentContextMap.get("RnovedadesInactivoId");
            }if (parentContextMap.containsKey("RnovedadesActivoId")) {
                context.RnovedadesActivoId = (String) parentContextMap.get("RnovedadesActivoId");
            }if (parentContextMap.containsKey("RnovedadesProvisionalId")) {
                context.RnovedadesProvisionalId = (String) parentContextMap.get("RnovedadesProvisionalId");
            }if (parentContextMap.containsKey("TafiliadoBeneficiario")) {
                context.TafiliadoBeneficiario = (String) parentContextMap.get("TafiliadoBeneficiario");
            }if (parentContextMap.containsKey("TafiliadoTitular")) {
                context.TafiliadoTitular = (String) parentContextMap.get("TafiliadoTitular");
            }if (parentContextMap.containsKey("auxCriterioActual")) {
                context.auxCriterioActual = (Integer) parentContextMap.get("auxCriterioActual");
            }if (parentContextMap.containsKey("auxRango")) {
                context.auxRango = (String) parentContextMap.get("auxRango");
            }if (parentContextMap.containsKey("auxAumentoRegistros")) {
                context.auxAumentoRegistros = (Integer) parentContextMap.get("auxAumentoRegistros");
            }if (parentContextMap.containsKey("archivoConfiguracion")) {
                context.archivoConfiguracion = (String) parentContextMap.get("archivoConfiguracion");
            }if (parentContextMap.containsKey("auxPosicionRegistros")) {
                context.auxPosicionRegistros = (Integer) parentContextMap.get("auxPosicionRegistros");
            }if (parentContextMap.containsKey("MotivoEstadoCaso10_INAC")) {
                context.MotivoEstadoCaso10_INAC = (String) parentContextMap.get("MotivoEstadoCaso10_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoCaso06_PROV")) {
                context.MotivoEstadoCaso06_PROV = (String) parentContextMap.get("MotivoEstadoCaso06_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoCaso09_ACTI")) {
                context.MotivoEstadoCaso09_ACTI = (String) parentContextMap.get("MotivoEstadoCaso09_ACTI");
            }if (parentContextMap.containsKey("MotivoEstadoCaso13_ACTI")) {
                context.MotivoEstadoCaso13_ACTI = (String) parentContextMap.get("MotivoEstadoCaso13_ACTI");
            }if (parentContextMap.containsKey("MotivoEstadoCaso05_PROV")) {
                context.MotivoEstadoCaso05_PROV = (String) parentContextMap.get("MotivoEstadoCaso05_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoCaso12_INAC")) {
                context.MotivoEstadoCaso12_INAC = (String) parentContextMap.get("MotivoEstadoCaso12_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoCaso01_PROV")) {
                context.MotivoEstadoCaso01_PROV = (String) parentContextMap.get("MotivoEstadoCaso01_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoCaso02_PROV")) {
                context.MotivoEstadoCaso02_PROV = (String) parentContextMap.get("MotivoEstadoCaso02_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoCaso07_INAC")) {
                context.MotivoEstadoCaso07_INAC = (String) parentContextMap.get("MotivoEstadoCaso07_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoCaso07_ACTI")) {
                context.MotivoEstadoCaso07_ACTI = (String) parentContextMap.get("MotivoEstadoCaso07_ACTI");
            }if (parentContextMap.containsKey("MotivoEstadoCaso11_INAC")) {
                context.MotivoEstadoCaso11_INAC = (String) parentContextMap.get("MotivoEstadoCaso11_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoCaso01_INAC")) {
                context.MotivoEstadoCaso01_INAC = (String) parentContextMap.get("MotivoEstadoCaso01_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoCaso09_INAC")) {
                context.MotivoEstadoCaso09_INAC = (String) parentContextMap.get("MotivoEstadoCaso09_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoCaso10_ACTI")) {
                context.MotivoEstadoCaso10_ACTI = (String) parentContextMap.get("MotivoEstadoCaso10_ACTI");
            }if (parentContextMap.containsKey("MotivoEstadoCaso11_ACTI")) {
                context.MotivoEstadoCaso11_ACTI = (String) parentContextMap.get("MotivoEstadoCaso11_ACTI");
            }if (parentContextMap.containsKey("MotivoEstadoCaso05_INAC")) {
                context.MotivoEstadoCaso05_INAC = (String) parentContextMap.get("MotivoEstadoCaso05_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoCaso12_ACTI")) {
                context.MotivoEstadoCaso12_ACTI = (String) parentContextMap.get("MotivoEstadoCaso12_ACTI");
            }if (parentContextMap.containsKey("MotivoEstadoCaso04_PROV")) {
                context.MotivoEstadoCaso04_PROV = (String) parentContextMap.get("MotivoEstadoCaso04_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoCaso04_INAC")) {
                context.MotivoEstadoCaso04_INAC = (String) parentContextMap.get("MotivoEstadoCaso04_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoCaso02_INAC")) {
                context.MotivoEstadoCaso02_INAC = (String) parentContextMap.get("MotivoEstadoCaso02_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoCaso03_ACTI")) {
                context.MotivoEstadoCaso03_ACTI = (String) parentContextMap.get("MotivoEstadoCaso03_ACTI");
            }if (parentContextMap.containsKey("MotivoEstadoCaso02_ACTI")) {
                context.MotivoEstadoCaso02_ACTI = (String) parentContextMap.get("MotivoEstadoCaso02_ACTI");
            }if (parentContextMap.containsKey("MotivoEstadoCaso03_PROV")) {
                context.MotivoEstadoCaso03_PROV = (String) parentContextMap.get("MotivoEstadoCaso03_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoCaso08_INAC")) {
                context.MotivoEstadoCaso08_INAC = (String) parentContextMap.get("MotivoEstadoCaso08_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoCaso10_PROV")) {
                context.MotivoEstadoCaso10_PROV = (String) parentContextMap.get("MotivoEstadoCaso10_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoCaso08_ACTI")) {
                context.MotivoEstadoCaso08_ACTI = (String) parentContextMap.get("MotivoEstadoCaso08_ACTI");
            }if (parentContextMap.containsKey("MotivoEstadoCaso06_INAC")) {
                context.MotivoEstadoCaso06_INAC = (String) parentContextMap.get("MotivoEstadoCaso06_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoCaso06_ACTI")) {
                context.MotivoEstadoCaso06_ACTI = (String) parentContextMap.get("MotivoEstadoCaso06_ACTI");
            }if (parentContextMap.containsKey("MotivoEstadoCaso04_ACTI")) {
                context.MotivoEstadoCaso04_ACTI = (String) parentContextMap.get("MotivoEstadoCaso04_ACTI");
            }if (parentContextMap.containsKey("MotivoEstadoCaso09_PROV")) {
                context.MotivoEstadoCaso09_PROV = (String) parentContextMap.get("MotivoEstadoCaso09_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoCaso13_PROV")) {
                context.MotivoEstadoCaso13_PROV = (String) parentContextMap.get("MotivoEstadoCaso13_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoCaso11_PROV")) {
                context.MotivoEstadoCaso11_PROV = (String) parentContextMap.get("MotivoEstadoCaso11_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoCaso00_PROV")) {
                context.MotivoEstadoCaso00_PROV = (String) parentContextMap.get("MotivoEstadoCaso00_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoCaso01_ACTI")) {
                context.MotivoEstadoCaso01_ACTI = (String) parentContextMap.get("MotivoEstadoCaso01_ACTI");
            }if (parentContextMap.containsKey("MotivoEstadoCaso08_PROV")) {
                context.MotivoEstadoCaso08_PROV = (String) parentContextMap.get("MotivoEstadoCaso08_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoCaso07_PROV")) {
                context.MotivoEstadoCaso07_PROV = (String) parentContextMap.get("MotivoEstadoCaso07_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoCaso03_INAC")) {
                context.MotivoEstadoCaso03_INAC = (String) parentContextMap.get("MotivoEstadoCaso03_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoCaso05_ACTI")) {
                context.MotivoEstadoCaso05_ACTI = (String) parentContextMap.get("MotivoEstadoCaso05_ACTI");
            }if (parentContextMap.containsKey("MotivoEstadoCaso13_INAC")) {
                context.MotivoEstadoCaso13_INAC = (String) parentContextMap.get("MotivoEstadoCaso13_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoCaso12_PROV")) {
                context.MotivoEstadoCaso12_PROV = (String) parentContextMap.get("MotivoEstadoCaso12_PROV");
            }if (parentContextMap.containsKey("infoIdJobProcesar")) {
                context.infoIdJobProcesar = (Integer) parentContextMap.get("infoIdJobProcesar");
            }if (parentContextMap.containsKey("infoUsuarioJobProcesar")) {
                context.infoUsuarioJobProcesar = (Integer) parentContextMap.get("infoUsuarioJobProcesar");
            }if (parentContextMap.containsKey("infoDescripcionJobProcesar")) {
                context.infoDescripcionJobProcesar = (String) parentContextMap.get("infoDescripcionJobProcesar");
            }if (parentContextMap.containsKey("infoIdProceso")) {
                context.infoIdProceso = (Integer) parentContextMap.get("infoIdProceso");
            }if (parentContextMap.containsKey("infoCodigoTipoJob")) {
                context.infoCodigoTipoJob = (Integer) parentContextMap.get("infoCodigoTipoJob");
            }if (parentContextMap.containsKey("infoTipoProceso")) {
                context.infoTipoProceso = (Integer) parentContextMap.get("infoTipoProceso");
            }if (parentContextMap.containsKey("infoIdEstadoActivo")) {
                context.infoIdEstadoActivo = (Integer) parentContextMap.get("infoIdEstadoActivo");
            }if (parentContextMap.containsKey("auxAfiliadosCriterio")) {
                context.auxAfiliadosCriterio = (String) parentContextMap.get("auxAfiliadosCriterio");
            }if (parentContextMap.containsKey("AS_CRITERIO")) {
                context.AS_CRITERIO = (String) parentContextMap.get("AS_CRITERIO");
            }if (parentContextMap.containsKey("AS_OPERACION_ACTIVO")) {
                context.AS_OPERACION_ACTIVO = (String) parentContextMap.get("AS_OPERACION_ACTIVO");
            }if (parentContextMap.containsKey("AS_OPERACION_INACTIVO")) {
                context.AS_OPERACION_INACTIVO = (String) parentContextMap.get("AS_OPERACION_INACTIVO");
            }if (parentContextMap.containsKey("AS_OPERACION_PROVISIONAL")) {
                context.AS_OPERACION_PROVISIONAL = (String) parentContextMap.get("AS_OPERACION_PROVISIONAL");
            }if (parentContextMap.containsKey("AS_TIPO_DOCUMENTO")) {
                context.AS_TIPO_DOCUMENTO = (String) parentContextMap.get("AS_TIPO_DOCUMENTO");
            }if (parentContextMap.containsKey("auxPrimerLoop")) {
                context.auxPrimerLoop = (Boolean) parentContextMap.get("auxPrimerLoop");
            }if (parentContextMap.containsKey("MotivoEstadoMutiAfiliacion_INAC")) {
                context.MotivoEstadoMutiAfiliacion_INAC = (String) parentContextMap.get("MotivoEstadoMutiAfiliacion_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoMutiAfiliacion_PROV")) {
                context.MotivoEstadoMutiAfiliacion_PROV = (String) parentContextMap.get("MotivoEstadoMutiAfiliacion_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoMutiAfiliacion_ACTI")) {
                context.MotivoEstadoMutiAfiliacion_ACTI = (String) parentContextMap.get("MotivoEstadoMutiAfiliacion_ACTI");
            }if (parentContextMap.containsKey("TDocumentoCertRetiroEps")) {
                context.TDocumentoCertRetiroEps = (Integer) parentContextMap.get("TDocumentoCertRetiroEps");
            }if (parentContextMap.containsKey("TDocumentoCertDependenciaEconomica")) {
                context.TDocumentoCertDependenciaEconomica = (Integer) parentContextMap.get("TDocumentoCertDependenciaEconomica");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        tStatCatcher_1.addMessage("begin");


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tOracleInput_8Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tOracleInput_8) {
globalMap.put("tOracleInput_8_SUBPROCESS_STATE", -1);

e_tOracleInput_8.printStackTrace();

}
catch (Error error_tOracleInput_8 ) {
end = System.currentTimeMillis();
tStatCatcher_1.addMessage("failure", (end-startTime));
try {
 tStatCatcher_1Process(globalMap);
} catch (Exception e_tStatCatcher_1) {
e_tStatCatcher_1.printStackTrace();
}
throw error_tOracleInput_8;
}


this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Criterio_MultiAfiliacion");
        }
        tStatCatcher_1.addMessage(status==""?"end":status, (end-startTime));
        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     956793 characters generated by Talend Open Studio for ESB 
 *     on the October 28, 2024, 11:16:31 AM COT
 ************************************************************************************************/