// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package afi_extincion.etl_criterios_1_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.GenerarUuid;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_3
	//import java.util.List;

	//the import part of tJava_7
	//import java.util.List;

	//the import part of tJava_6
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJavaRow_5
	//import java.util.List;

	//the import part of tJavaRow_4
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJavaRow_6
	//import java.util.List;

	//the import part of tJavaRow_9
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: ETL_criterios Purpose: Procesador de archivos para doble afiliacion y Glosas de fallos<br>
 * Description: ETL que gestiona y procesa los archivos de MINSALUD ETAPA 2 y 3, y FEDEVIDA <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status DEV
 */
public class ETL_criterios implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(outCodigo != null){
				
					this.setProperty("outCodigo", outCodigo.toString());
				
			}
			
			if(archivoSalida != null){
				
					this.setProperty("archivoSalida", archivoSalida.toString());
				
			}
			
			if(infoConteoRegistros != null){
				
					this.setProperty("infoConteoRegistros", infoConteoRegistros.toString());
				
			}
			
			if(mail_PasswordMail != null){
				
					this.setProperty("mail_PasswordMail", mail_PasswordMail.toString());
				
			}
			
			if(mail_SMTPPort != null){
				
					this.setProperty("mail_SMTPPort", mail_SMTPPort.toString());
				
			}
			
			if(mail_UsernameMail != null){
				
					this.setProperty("mail_UsernameMail", mail_UsernameMail.toString());
				
			}
			
			if(mail_SMTPHost != null){
				
					this.setProperty("mail_SMTPHost", mail_SMTPHost.toString());
				
			}
			
			if(AuxCriterioActual != null){
				
					this.setProperty("AuxCriterioActual", AuxCriterioActual.toString());
				
			}
			
			if(AS_CRITERIO != null){
				
					this.setProperty("AS_CRITERIO", AS_CRITERIO.toString());
				
			}
			
			if(AS_DESCRIPCION != null){
				
					this.setProperty("AS_DESCRIPCION", AS_DESCRIPCION.toString());
				
			}
			
			if(AS_DOCUMENTO != null){
				
					this.setProperty("AS_DOCUMENTO", AS_DOCUMENTO.toString());
				
			}
			
			if(AS_OPERACION_ACTIVO != null){
				
					this.setProperty("AS_OPERACION_ACTIVO", AS_OPERACION_ACTIVO.toString());
				
			}
			
			if(AS_OPERACION_INACTIVO != null){
				
					this.setProperty("AS_OPERACION_INACTIVO", AS_OPERACION_INACTIVO.toString());
				
			}
			
			if(AS_OPERACION_PROVISIONAL != null){
				
					this.setProperty("AS_OPERACION_PROVISIONAL", AS_OPERACION_PROVISIONAL.toString());
				
			}
			
			if(AS_PRIMER_APELLIDO != null){
				
					this.setProperty("AS_PRIMER_APELLIDO", AS_PRIMER_APELLIDO.toString());
				
			}
			
			if(AS_PRIMER_NOMBRE != null){
				
					this.setProperty("AS_PRIMER_NOMBRE", AS_PRIMER_NOMBRE.toString());
				
			}
			
			if(AS_SEGUNDO_APELLIDO != null){
				
					this.setProperty("AS_SEGUNDO_APELLIDO", AS_SEGUNDO_APELLIDO.toString());
				
			}
			
			if(AS_SEGUNDO_NOMBRE != null){
				
					this.setProperty("AS_SEGUNDO_NOMBRE", AS_SEGUNDO_NOMBRE.toString());
				
			}
			
			if(AS_TIPO_DOCUMENTO != null){
				
					this.setProperty("AS_TIPO_DOCUMENTO", AS_TIPO_DOCUMENTO.toString());
				
			}
			
			if(fileSystem_Area != null){
				
					this.setProperty("fileSystem_Area", fileSystem_Area.toString());
				
			}
			
			if(fileSystem_Path != null){
				
					this.setProperty("fileSystem_Path", fileSystem_Path.toString());
				
			}
			
			if(infoCodigoTipoJob != null){
				
					this.setProperty("infoCodigoTipoJob", infoCodigoTipoJob.toString());
				
			}
			
			if(infoDescripcionJobProcesar != null){
				
					this.setProperty("infoDescripcionJobProcesar", infoDescripcionJobProcesar.toString());
				
			}
			
			if(infoEntidades != null){
				
					this.setProperty("infoEntidades", infoEntidades.toString());
				
			}
			
			if(infoIdEstadoActivo != null){
				
					this.setProperty("infoIdEstadoActivo", infoIdEstadoActivo.toString());
				
			}
			
			if(infoIdEstadoProcesado != null){
				
					this.setProperty("infoIdEstadoProcesado", infoIdEstadoProcesado.toString());
				
			}
			
			if(infoIdJobProcesar != null){
				
					this.setProperty("infoIdJobProcesar", infoIdJobProcesar.toString());
				
			}
			
			if(infoIdProceso != null){
				
					this.setProperty("infoIdProceso", infoIdProceso.toString());
				
			}
			
			if(infoIdTarchivoResultante != null){
				
					this.setProperty("infoIdTarchivoResultante", infoIdTarchivoResultante.toString());
				
			}
			
			if(infoTipoProceso != null){
				
					this.setProperty("infoTipoProceso", infoTipoProceso.toString());
				
			}
			
			if(infoUsuarioJobProcesar != null){
				
					this.setProperty("infoUsuarioJobProcesar", infoUsuarioJobProcesar.toString());
				
			}
			
			if(oracle_AdditionalParams != null){
				
					this.setProperty("oracle_AdditionalParams", oracle_AdditionalParams.toString());
				
			}
			
			if(oracle_Host != null){
				
					this.setProperty("oracle_Host", oracle_Host.toString());
				
			}
			
			if(oracle_Password != null){
				
					this.setProperty("oracle_Password", oracle_Password.toString());
				
			}
			
			if(oracle_Port != null){
				
					this.setProperty("oracle_Port", oracle_Port.toString());
				
			}
			
			if(oracle_Schema != null){
				
					this.setProperty("oracle_Schema", oracle_Schema.toString());
				
			}
			
			if(oracle_ServiceName != null){
				
					this.setProperty("oracle_ServiceName", oracle_ServiceName.toString());
				
			}
			
			if(oracle_Sid != null){
				
					this.setProperty("oracle_Sid", oracle_Sid.toString());
				
			}
			
			if(oracle_User != null){
				
					this.setProperty("oracle_User", oracle_User.toString());
				
			}
			
			if(archivoConfiguracion != null){
				
					this.setProperty("archivoConfiguracion", archivoConfiguracion.toString());
				
			}
			
			if(auxAumentoRegistros != null){
				
					this.setProperty("auxAumentoRegistros", auxAumentoRegistros.toString());
				
			}
			
			if(auxPosicionRegistros != null){
				
					this.setProperty("auxPosicionRegistros", auxPosicionRegistros.toString());
				
			}
			
			if(MotivoEstadoCaso00_PROV != null){
				
					this.setProperty("MotivoEstadoCaso00_PROV", MotivoEstadoCaso00_PROV.toString());
				
			}
			
			if(MotivoEstadoCaso01_ACTI != null){
				
					this.setProperty("MotivoEstadoCaso01_ACTI", MotivoEstadoCaso01_ACTI.toString());
				
			}
			
			if(MotivoEstadoCaso01_INAC != null){
				
					this.setProperty("MotivoEstadoCaso01_INAC", MotivoEstadoCaso01_INAC.toString());
				
			}
			
			if(MotivoEstadoCaso01_PROV != null){
				
					this.setProperty("MotivoEstadoCaso01_PROV", MotivoEstadoCaso01_PROV.toString());
				
			}
			
			if(MotivoEstadoCaso02_ACTI != null){
				
					this.setProperty("MotivoEstadoCaso02_ACTI", MotivoEstadoCaso02_ACTI.toString());
				
			}
			
			if(MotivoEstadoCaso02_INAC != null){
				
					this.setProperty("MotivoEstadoCaso02_INAC", MotivoEstadoCaso02_INAC.toString());
				
			}
			
			if(MotivoEstadoCaso02_PROV != null){
				
					this.setProperty("MotivoEstadoCaso02_PROV", MotivoEstadoCaso02_PROV.toString());
				
			}
			
			if(MotivoEstadoCaso03_ACTI != null){
				
					this.setProperty("MotivoEstadoCaso03_ACTI", MotivoEstadoCaso03_ACTI.toString());
				
			}
			
			if(MotivoEstadoCaso03_INAC != null){
				
					this.setProperty("MotivoEstadoCaso03_INAC", MotivoEstadoCaso03_INAC.toString());
				
			}
			
			if(MotivoEstadoCaso03_PROV != null){
				
					this.setProperty("MotivoEstadoCaso03_PROV", MotivoEstadoCaso03_PROV.toString());
				
			}
			
			if(MotivoEstadoCaso04_ACTI != null){
				
					this.setProperty("MotivoEstadoCaso04_ACTI", MotivoEstadoCaso04_ACTI.toString());
				
			}
			
			if(MotivoEstadoCaso04_INAC != null){
				
					this.setProperty("MotivoEstadoCaso04_INAC", MotivoEstadoCaso04_INAC.toString());
				
			}
			
			if(MotivoEstadoCaso04_PROV != null){
				
					this.setProperty("MotivoEstadoCaso04_PROV", MotivoEstadoCaso04_PROV.toString());
				
			}
			
			if(MotivoEstadoCaso05_ACTI != null){
				
					this.setProperty("MotivoEstadoCaso05_ACTI", MotivoEstadoCaso05_ACTI.toString());
				
			}
			
			if(MotivoEstadoCaso05_INAC != null){
				
					this.setProperty("MotivoEstadoCaso05_INAC", MotivoEstadoCaso05_INAC.toString());
				
			}
			
			if(MotivoEstadoCaso05_PROV != null){
				
					this.setProperty("MotivoEstadoCaso05_PROV", MotivoEstadoCaso05_PROV.toString());
				
			}
			
			if(MotivoEstadoCaso06_ACTI != null){
				
					this.setProperty("MotivoEstadoCaso06_ACTI", MotivoEstadoCaso06_ACTI.toString());
				
			}
			
			if(MotivoEstadoCaso06_INAC != null){
				
					this.setProperty("MotivoEstadoCaso06_INAC", MotivoEstadoCaso06_INAC.toString());
				
			}
			
			if(MotivoEstadoCaso06_PROV != null){
				
					this.setProperty("MotivoEstadoCaso06_PROV", MotivoEstadoCaso06_PROV.toString());
				
			}
			
			if(MotivoEstadoCaso07_ACTI != null){
				
					this.setProperty("MotivoEstadoCaso07_ACTI", MotivoEstadoCaso07_ACTI.toString());
				
			}
			
			if(MotivoEstadoCaso07_INAC != null){
				
					this.setProperty("MotivoEstadoCaso07_INAC", MotivoEstadoCaso07_INAC.toString());
				
			}
			
			if(MotivoEstadoCaso07_PROV != null){
				
					this.setProperty("MotivoEstadoCaso07_PROV", MotivoEstadoCaso07_PROV.toString());
				
			}
			
			if(MotivoEstadoCaso08_ACTI != null){
				
					this.setProperty("MotivoEstadoCaso08_ACTI", MotivoEstadoCaso08_ACTI.toString());
				
			}
			
			if(MotivoEstadoCaso08_INAC != null){
				
					this.setProperty("MotivoEstadoCaso08_INAC", MotivoEstadoCaso08_INAC.toString());
				
			}
			
			if(MotivoEstadoCaso08_PROV != null){
				
					this.setProperty("MotivoEstadoCaso08_PROV", MotivoEstadoCaso08_PROV.toString());
				
			}
			
			if(MotivoEstadoCaso09_ACTI != null){
				
					this.setProperty("MotivoEstadoCaso09_ACTI", MotivoEstadoCaso09_ACTI.toString());
				
			}
			
			if(MotivoEstadoCaso09_INAC != null){
				
					this.setProperty("MotivoEstadoCaso09_INAC", MotivoEstadoCaso09_INAC.toString());
				
			}
			
			if(MotivoEstadoCaso09_PROV != null){
				
					this.setProperty("MotivoEstadoCaso09_PROV", MotivoEstadoCaso09_PROV.toString());
				
			}
			
			if(MotivoEstadoCaso10_ACTI != null){
				
					this.setProperty("MotivoEstadoCaso10_ACTI", MotivoEstadoCaso10_ACTI.toString());
				
			}
			
			if(MotivoEstadoCaso10_INAC != null){
				
					this.setProperty("MotivoEstadoCaso10_INAC", MotivoEstadoCaso10_INAC.toString());
				
			}
			
			if(MotivoEstadoCaso10_PROV != null){
				
					this.setProperty("MotivoEstadoCaso10_PROV", MotivoEstadoCaso10_PROV.toString());
				
			}
			
			if(MotivoEstadoCaso11_ACTI != null){
				
					this.setProperty("MotivoEstadoCaso11_ACTI", MotivoEstadoCaso11_ACTI.toString());
				
			}
			
			if(MotivoEstadoCaso11_INAC != null){
				
					this.setProperty("MotivoEstadoCaso11_INAC", MotivoEstadoCaso11_INAC.toString());
				
			}
			
			if(MotivoEstadoCaso11_PROV != null){
				
					this.setProperty("MotivoEstadoCaso11_PROV", MotivoEstadoCaso11_PROV.toString());
				
			}
			
			if(MotivoEstadoCaso12_ACTI != null){
				
					this.setProperty("MotivoEstadoCaso12_ACTI", MotivoEstadoCaso12_ACTI.toString());
				
			}
			
			if(MotivoEstadoCaso12_INAC != null){
				
					this.setProperty("MotivoEstadoCaso12_INAC", MotivoEstadoCaso12_INAC.toString());
				
			}
			
			if(MotivoEstadoCaso12_PROV != null){
				
					this.setProperty("MotivoEstadoCaso12_PROV", MotivoEstadoCaso12_PROV.toString());
				
			}
			
			if(MotivoEstadoCaso13_ACTI != null){
				
					this.setProperty("MotivoEstadoCaso13_ACTI", MotivoEstadoCaso13_ACTI.toString());
				
			}
			
			if(MotivoEstadoCaso13_INAC != null){
				
					this.setProperty("MotivoEstadoCaso13_INAC", MotivoEstadoCaso13_INAC.toString());
				
			}
			
			if(MotivoEstadoCaso13_PROV != null){
				
					this.setProperty("MotivoEstadoCaso13_PROV", MotivoEstadoCaso13_PROV.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public Boolean outCodigo;
public Boolean getOutCodigo(){
	return this.outCodigo;
}
public String archivoSalida;
public String getArchivoSalida(){
	return this.archivoSalida;
}
public Integer infoConteoRegistros;
public Integer getInfoConteoRegistros(){
	return this.infoConteoRegistros;
}
public String mail_PasswordMail;
public String getMail_PasswordMail(){
	return this.mail_PasswordMail;
}
public String mail_SMTPPort;
public String getMail_SMTPPort(){
	return this.mail_SMTPPort;
}
public String mail_UsernameMail;
public String getMail_UsernameMail(){
	return this.mail_UsernameMail;
}
public String mail_SMTPHost;
public String getMail_SMTPHost(){
	return this.mail_SMTPHost;
}
public Integer AuxCriterioActual;
public Integer getAuxCriterioActual(){
	return this.AuxCriterioActual;
}
public String AS_CRITERIO;
public String getAS_CRITERIO(){
	return this.AS_CRITERIO;
}
public String AS_DESCRIPCION;
public String getAS_DESCRIPCION(){
	return this.AS_DESCRIPCION;
}
public String AS_DOCUMENTO;
public String getAS_DOCUMENTO(){
	return this.AS_DOCUMENTO;
}
public String AS_OPERACION_ACTIVO;
public String getAS_OPERACION_ACTIVO(){
	return this.AS_OPERACION_ACTIVO;
}
public String AS_OPERACION_INACTIVO;
public String getAS_OPERACION_INACTIVO(){
	return this.AS_OPERACION_INACTIVO;
}
public String AS_OPERACION_PROVISIONAL;
public String getAS_OPERACION_PROVISIONAL(){
	return this.AS_OPERACION_PROVISIONAL;
}
public String AS_PRIMER_APELLIDO;
public String getAS_PRIMER_APELLIDO(){
	return this.AS_PRIMER_APELLIDO;
}
public String AS_PRIMER_NOMBRE;
public String getAS_PRIMER_NOMBRE(){
	return this.AS_PRIMER_NOMBRE;
}
public String AS_SEGUNDO_APELLIDO;
public String getAS_SEGUNDO_APELLIDO(){
	return this.AS_SEGUNDO_APELLIDO;
}
public String AS_SEGUNDO_NOMBRE;
public String getAS_SEGUNDO_NOMBRE(){
	return this.AS_SEGUNDO_NOMBRE;
}
public String AS_TIPO_DOCUMENTO;
public String getAS_TIPO_DOCUMENTO(){
	return this.AS_TIPO_DOCUMENTO;
}
public String fileSystem_Area;
public String getFileSystem_Area(){
	return this.fileSystem_Area;
}
public String fileSystem_Path;
public String getFileSystem_Path(){
	return this.fileSystem_Path;
}
public Integer infoCodigoTipoJob;
public Integer getInfoCodigoTipoJob(){
	return this.infoCodigoTipoJob;
}
public String infoDescripcionJobProcesar;
public String getInfoDescripcionJobProcesar(){
	return this.infoDescripcionJobProcesar;
}
public String infoEntidades;
public String getInfoEntidades(){
	return this.infoEntidades;
}
public Integer infoIdEstadoActivo;
public Integer getInfoIdEstadoActivo(){
	return this.infoIdEstadoActivo;
}
public Integer infoIdEstadoProcesado;
public Integer getInfoIdEstadoProcesado(){
	return this.infoIdEstadoProcesado;
}
public Integer infoIdJobProcesar;
public Integer getInfoIdJobProcesar(){
	return this.infoIdJobProcesar;
}
public Integer infoIdProceso;
public Integer getInfoIdProceso(){
	return this.infoIdProceso;
}
public Integer infoIdTarchivoResultante;
public Integer getInfoIdTarchivoResultante(){
	return this.infoIdTarchivoResultante;
}
public Integer infoTipoProceso;
public Integer getInfoTipoProceso(){
	return this.infoTipoProceso;
}
public Integer infoUsuarioJobProcesar;
public Integer getInfoUsuarioJobProcesar(){
	return this.infoUsuarioJobProcesar;
}
public String oracle_AdditionalParams;
public String getOracle_AdditionalParams(){
	return this.oracle_AdditionalParams;
}
public String oracle_Host;
public String getOracle_Host(){
	return this.oracle_Host;
}
public String oracle_Password;
public String getOracle_Password(){
	return this.oracle_Password;
}
public String oracle_Port;
public String getOracle_Port(){
	return this.oracle_Port;
}
public String oracle_Schema;
public String getOracle_Schema(){
	return this.oracle_Schema;
}
public String oracle_ServiceName;
public String getOracle_ServiceName(){
	return this.oracle_ServiceName;
}
public String oracle_Sid;
public String getOracle_Sid(){
	return this.oracle_Sid;
}
public String oracle_User;
public String getOracle_User(){
	return this.oracle_User;
}
public String archivoConfiguracion;
public String getArchivoConfiguracion(){
	return this.archivoConfiguracion;
}
public Integer auxAumentoRegistros;
public Integer getAuxAumentoRegistros(){
	return this.auxAumentoRegistros;
}
public Integer auxPosicionRegistros;
public Integer getAuxPosicionRegistros(){
	return this.auxPosicionRegistros;
}
public String MotivoEstadoCaso00_PROV;
public String getMotivoEstadoCaso00_PROV(){
	return this.MotivoEstadoCaso00_PROV;
}
public String MotivoEstadoCaso01_ACTI;
public String getMotivoEstadoCaso01_ACTI(){
	return this.MotivoEstadoCaso01_ACTI;
}
public String MotivoEstadoCaso01_INAC;
public String getMotivoEstadoCaso01_INAC(){
	return this.MotivoEstadoCaso01_INAC;
}
public String MotivoEstadoCaso01_PROV;
public String getMotivoEstadoCaso01_PROV(){
	return this.MotivoEstadoCaso01_PROV;
}
public String MotivoEstadoCaso02_ACTI;
public String getMotivoEstadoCaso02_ACTI(){
	return this.MotivoEstadoCaso02_ACTI;
}
public String MotivoEstadoCaso02_INAC;
public String getMotivoEstadoCaso02_INAC(){
	return this.MotivoEstadoCaso02_INAC;
}
public String MotivoEstadoCaso02_PROV;
public String getMotivoEstadoCaso02_PROV(){
	return this.MotivoEstadoCaso02_PROV;
}
public String MotivoEstadoCaso03_ACTI;
public String getMotivoEstadoCaso03_ACTI(){
	return this.MotivoEstadoCaso03_ACTI;
}
public String MotivoEstadoCaso03_INAC;
public String getMotivoEstadoCaso03_INAC(){
	return this.MotivoEstadoCaso03_INAC;
}
public String MotivoEstadoCaso03_PROV;
public String getMotivoEstadoCaso03_PROV(){
	return this.MotivoEstadoCaso03_PROV;
}
public String MotivoEstadoCaso04_ACTI;
public String getMotivoEstadoCaso04_ACTI(){
	return this.MotivoEstadoCaso04_ACTI;
}
public String MotivoEstadoCaso04_INAC;
public String getMotivoEstadoCaso04_INAC(){
	return this.MotivoEstadoCaso04_INAC;
}
public String MotivoEstadoCaso04_PROV;
public String getMotivoEstadoCaso04_PROV(){
	return this.MotivoEstadoCaso04_PROV;
}
public String MotivoEstadoCaso05_ACTI;
public String getMotivoEstadoCaso05_ACTI(){
	return this.MotivoEstadoCaso05_ACTI;
}
public String MotivoEstadoCaso05_INAC;
public String getMotivoEstadoCaso05_INAC(){
	return this.MotivoEstadoCaso05_INAC;
}
public String MotivoEstadoCaso05_PROV;
public String getMotivoEstadoCaso05_PROV(){
	return this.MotivoEstadoCaso05_PROV;
}
public String MotivoEstadoCaso06_ACTI;
public String getMotivoEstadoCaso06_ACTI(){
	return this.MotivoEstadoCaso06_ACTI;
}
public String MotivoEstadoCaso06_INAC;
public String getMotivoEstadoCaso06_INAC(){
	return this.MotivoEstadoCaso06_INAC;
}
public String MotivoEstadoCaso06_PROV;
public String getMotivoEstadoCaso06_PROV(){
	return this.MotivoEstadoCaso06_PROV;
}
public String MotivoEstadoCaso07_ACTI;
public String getMotivoEstadoCaso07_ACTI(){
	return this.MotivoEstadoCaso07_ACTI;
}
public String MotivoEstadoCaso07_INAC;
public String getMotivoEstadoCaso07_INAC(){
	return this.MotivoEstadoCaso07_INAC;
}
public String MotivoEstadoCaso07_PROV;
public String getMotivoEstadoCaso07_PROV(){
	return this.MotivoEstadoCaso07_PROV;
}
public String MotivoEstadoCaso08_ACTI;
public String getMotivoEstadoCaso08_ACTI(){
	return this.MotivoEstadoCaso08_ACTI;
}
public String MotivoEstadoCaso08_INAC;
public String getMotivoEstadoCaso08_INAC(){
	return this.MotivoEstadoCaso08_INAC;
}
public String MotivoEstadoCaso08_PROV;
public String getMotivoEstadoCaso08_PROV(){
	return this.MotivoEstadoCaso08_PROV;
}
public String MotivoEstadoCaso09_ACTI;
public String getMotivoEstadoCaso09_ACTI(){
	return this.MotivoEstadoCaso09_ACTI;
}
public String MotivoEstadoCaso09_INAC;
public String getMotivoEstadoCaso09_INAC(){
	return this.MotivoEstadoCaso09_INAC;
}
public String MotivoEstadoCaso09_PROV;
public String getMotivoEstadoCaso09_PROV(){
	return this.MotivoEstadoCaso09_PROV;
}
public String MotivoEstadoCaso10_ACTI;
public String getMotivoEstadoCaso10_ACTI(){
	return this.MotivoEstadoCaso10_ACTI;
}
public String MotivoEstadoCaso10_INAC;
public String getMotivoEstadoCaso10_INAC(){
	return this.MotivoEstadoCaso10_INAC;
}
public String MotivoEstadoCaso10_PROV;
public String getMotivoEstadoCaso10_PROV(){
	return this.MotivoEstadoCaso10_PROV;
}
public String MotivoEstadoCaso11_ACTI;
public String getMotivoEstadoCaso11_ACTI(){
	return this.MotivoEstadoCaso11_ACTI;
}
public String MotivoEstadoCaso11_INAC;
public String getMotivoEstadoCaso11_INAC(){
	return this.MotivoEstadoCaso11_INAC;
}
public String MotivoEstadoCaso11_PROV;
public String getMotivoEstadoCaso11_PROV(){
	return this.MotivoEstadoCaso11_PROV;
}
public String MotivoEstadoCaso12_ACTI;
public String getMotivoEstadoCaso12_ACTI(){
	return this.MotivoEstadoCaso12_ACTI;
}
public String MotivoEstadoCaso12_INAC;
public String getMotivoEstadoCaso12_INAC(){
	return this.MotivoEstadoCaso12_INAC;
}
public String MotivoEstadoCaso12_PROV;
public String getMotivoEstadoCaso12_PROV(){
	return this.MotivoEstadoCaso12_PROV;
}
public String MotivoEstadoCaso13_ACTI;
public String getMotivoEstadoCaso13_ACTI(){
	return this.MotivoEstadoCaso13_ACTI;
}
public String MotivoEstadoCaso13_INAC;
public String getMotivoEstadoCaso13_INAC(){
	return this.MotivoEstadoCaso13_INAC;
}
public String MotivoEstadoCaso13_PROV;
public String getMotivoEstadoCaso13_PROV(){
	return this.MotivoEstadoCaso13_PROV;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "1.1";
	private final String jobName = "ETL_criterios";
	private final String projectName = "AFI_EXTINCION";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_2nnWALZ3EeaFO84cVtR0aA", "1.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ETL_criterios.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ETL_criterios.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExist_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileExist_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								((java.util.Map)threadLocal.get()).put("errorCode", null);
								tDie_1Process(globalMap);
								if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
									((java.util.Map)threadLocal.get()).put("status", "end");
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tStatCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileExist_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tFileExist_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public void tFileExist_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileExist_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileExist_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExist_1", false);
		start_Hash.put("tFileExist_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tFileExist_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tFileExist_1";
	
	
		int tos_count_tFileExist_1 = 0;
		

 



/**
 * [tFileExist_1 begin ] stop
 */
	
	/**
	 * [tFileExist_1 main ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	



java.io.File file_tFileExist_1 = new java.io.File(context.archivoConfiguracion);
if (!file_tFileExist_1.exists()) {
    globalMap.put("tFileExist_1_EXISTS",false);
}else{
	globalMap.put("tFileExist_1_EXISTS",true);
}

globalMap.put("tFileExist_1_FILENAME",context.archivoConfiguracion);


 


	tos_count_tFileExist_1++;

/**
 * [tFileExist_1 main ] stop
 */
	
	/**
	 * [tFileExist_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	

 



/**
 * [tFileExist_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileExist_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	

 



/**
 * [tFileExist_1 process_data_end ] stop
 */
	
	/**
	 * [tFileExist_1 end ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	

 

ok_Hash.put("tFileExist_1", true);
end_Hash.put("tFileExist_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tFileExist_1", end_Hash.get("tFileExist_1")-start_Hash.get("tFileExist_1"));
tStatCatcher_1Process(globalMap);
   			if (((Boolean)globalMap.get("tFileExist_1_EXISTS"))) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If20", 0, "true");
					}
				tFileInputXML_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If20", 0, "false");
					}   	 
   				}
   			if (!((Boolean)globalMap.get("tFileExist_1_EXISTS"))) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If35", 0, "true");
					}
				tJava_6Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If35", 0, "false");
					}   	 
   				}



/**
 * [tFileExist_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileExist_1 finally ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	

 



/**
 * [tFileExist_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileExist_1_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_ETL_criterios = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[0];

	
			    public String DB_Host;

				public String getDB_Host () {
					return this.DB_Host;
				}

				public Boolean DB_HostIsNullable(){
				    return true;
				}
				public Boolean DB_HostIsKey(){
				    return false;
				}
				public Integer DB_HostLength(){
				    return 13;
				}
				public Integer DB_HostPrecision(){
				    return 0;
				}
				public String DB_HostDefault(){
				
					return null;
				
				}
				public String DB_HostComment(){
				
				    return "";
				
				}
				public String DB_HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DB_HostOriginalDbColumnName(){
				
					return "DB_Host";
				
				}

				
			    public String DB_Port;

				public String getDB_Port () {
					return this.DB_Port;
				}

				public Boolean DB_PortIsNullable(){
				    return true;
				}
				public Boolean DB_PortIsKey(){
				    return false;
				}
				public Integer DB_PortLength(){
				    return 4;
				}
				public Integer DB_PortPrecision(){
				    return 0;
				}
				public String DB_PortDefault(){
				
					return null;
				
				}
				public String DB_PortComment(){
				
				    return "";
				
				}
				public String DB_PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DB_PortOriginalDbColumnName(){
				
					return "DB_Port";
				
				}

				
			    public String DB_Sid;

				public String getDB_Sid () {
					return this.DB_Sid;
				}

				public Boolean DB_SidIsNullable(){
				    return true;
				}
				public Boolean DB_SidIsKey(){
				    return false;
				}
				public Integer DB_SidLength(){
				    return 4;
				}
				public Integer DB_SidPrecision(){
				    return 0;
				}
				public String DB_SidDefault(){
				
					return null;
				
				}
				public String DB_SidComment(){
				
				    return "";
				
				}
				public String DB_SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DB_SidOriginalDbColumnName(){
				
					return "DB_Sid";
				
				}

				
			    public String DB_ServiceName;

				public String getDB_ServiceName () {
					return this.DB_ServiceName;
				}

				public Boolean DB_ServiceNameIsNullable(){
				    return true;
				}
				public Boolean DB_ServiceNameIsKey(){
				    return false;
				}
				public Integer DB_ServiceNameLength(){
				    return 16;
				}
				public Integer DB_ServiceNamePrecision(){
				    return 0;
				}
				public String DB_ServiceNameDefault(){
				
					return null;
				
				}
				public String DB_ServiceNameComment(){
				
				    return "";
				
				}
				public String DB_ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DB_ServiceNameOriginalDbColumnName(){
				
					return "DB_ServiceName";
				
				}

				
			    public String DB_Schema;

				public String getDB_Schema () {
					return this.DB_Schema;
				}

				public Boolean DB_SchemaIsNullable(){
				    return true;
				}
				public Boolean DB_SchemaIsKey(){
				    return false;
				}
				public Integer DB_SchemaLength(){
				    return 8;
				}
				public Integer DB_SchemaPrecision(){
				    return 0;
				}
				public String DB_SchemaDefault(){
				
					return null;
				
				}
				public String DB_SchemaComment(){
				
				    return "";
				
				}
				public String DB_SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DB_SchemaOriginalDbColumnName(){
				
					return "DB_Schema";
				
				}

				
			    public String DB_User;

				public String getDB_User () {
					return this.DB_User;
				}

				public Boolean DB_UserIsNullable(){
				    return true;
				}
				public Boolean DB_UserIsKey(){
				    return false;
				}
				public Integer DB_UserLength(){
				    return 8;
				}
				public Integer DB_UserPrecision(){
				    return 0;
				}
				public String DB_UserDefault(){
				
					return null;
				
				}
				public String DB_UserComment(){
				
				    return "";
				
				}
				public String DB_UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DB_UserOriginalDbColumnName(){
				
					return "DB_User";
				
				}

				
			    public String DB_Password;

				public String getDB_Password () {
					return this.DB_Password;
				}

				public Boolean DB_PasswordIsNullable(){
				    return true;
				}
				public Boolean DB_PasswordIsKey(){
				    return false;
				}
				public Integer DB_PasswordLength(){
				    return 11;
				}
				public Integer DB_PasswordPrecision(){
				    return 0;
				}
				public String DB_PasswordDefault(){
				
					return null;
				
				}
				public String DB_PasswordComment(){
				
				    return "";
				
				}
				public String DB_PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DB_PasswordOriginalDbColumnName(){
				
					return "DB_Password";
				
				}

				
			    public String FS_PathStorage;

				public String getFS_PathStorage () {
					return this.FS_PathStorage;
				}

				public Boolean FS_PathStorageIsNullable(){
				    return true;
				}
				public Boolean FS_PathStorageIsKey(){
				    return false;
				}
				public Integer FS_PathStorageLength(){
				    return 0;
				}
				public Integer FS_PathStoragePrecision(){
				    return 0;
				}
				public String FS_PathStorageDefault(){
				
					return null;
				
				}
				public String FS_PathStorageComment(){
				
				    return "";
				
				}
				public String FS_PathStoragePattern(){
				
					return "";
				
				}
				public String FS_PathStorageOriginalDbColumnName(){
				
					return "FS_PathStorage";
				
				}

				
			    public String ML_SMTPHost;

				public String getML_SMTPHost () {
					return this.ML_SMTPHost;
				}

				public Boolean ML_SMTPHostIsNullable(){
				    return true;
				}
				public Boolean ML_SMTPHostIsKey(){
				    return false;
				}
				public Integer ML_SMTPHostLength(){
				    return 0;
				}
				public Integer ML_SMTPHostPrecision(){
				    return 0;
				}
				public String ML_SMTPHostDefault(){
				
					return null;
				
				}
				public String ML_SMTPHostComment(){
				
				    return "";
				
				}
				public String ML_SMTPHostPattern(){
				
					return "";
				
				}
				public String ML_SMTPHostOriginalDbColumnName(){
				
					return "ML_SMTPHost";
				
				}

				
			    public String ML_SMTPPort;

				public String getML_SMTPPort () {
					return this.ML_SMTPPort;
				}

				public Boolean ML_SMTPPortIsNullable(){
				    return true;
				}
				public Boolean ML_SMTPPortIsKey(){
				    return false;
				}
				public Integer ML_SMTPPortLength(){
				    return 0;
				}
				public Integer ML_SMTPPortPrecision(){
				    return 0;
				}
				public String ML_SMTPPortDefault(){
				
					return null;
				
				}
				public String ML_SMTPPortComment(){
				
				    return "";
				
				}
				public String ML_SMTPPortPattern(){
				
					return "";
				
				}
				public String ML_SMTPPortOriginalDbColumnName(){
				
					return "ML_SMTPPort";
				
				}

				
			    public String ML_UsernameMail;

				public String getML_UsernameMail () {
					return this.ML_UsernameMail;
				}

				public Boolean ML_UsernameMailIsNullable(){
				    return true;
				}
				public Boolean ML_UsernameMailIsKey(){
				    return false;
				}
				public Integer ML_UsernameMailLength(){
				    return 0;
				}
				public Integer ML_UsernameMailPrecision(){
				    return 0;
				}
				public String ML_UsernameMailDefault(){
				
					return null;
				
				}
				public String ML_UsernameMailComment(){
				
				    return "";
				
				}
				public String ML_UsernameMailPattern(){
				
					return "";
				
				}
				public String ML_UsernameMailOriginalDbColumnName(){
				
					return "ML_UsernameMail";
				
				}

				
			    public String ML_PasswordMail;

				public String getML_PasswordMail () {
					return this.ML_PasswordMail;
				}

				public Boolean ML_PasswordMailIsNullable(){
				    return true;
				}
				public Boolean ML_PasswordMailIsKey(){
				    return false;
				}
				public Integer ML_PasswordMailLength(){
				    return 0;
				}
				public Integer ML_PasswordMailPrecision(){
				    return 0;
				}
				public String ML_PasswordMailDefault(){
				
					return null;
				
				}
				public String ML_PasswordMailComment(){
				
				    return "";
				
				}
				public String ML_PasswordMailPattern(){
				
					return "";
				
				}
				public String ML_PasswordMailOriginalDbColumnName(){
				
					return "ML_PasswordMail";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_ETL_criterios.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_ETL_criterios.length == 0) {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_ETL_criterios.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_ETL_criterios.length == 0) {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_ETL_criterios) {

        	try {

        		int length = 0;
		
					this.DB_Host = readString(dis);
					
					this.DB_Port = readString(dis);
					
					this.DB_Sid = readString(dis);
					
					this.DB_ServiceName = readString(dis);
					
					this.DB_Schema = readString(dis);
					
					this.DB_User = readString(dis);
					
					this.DB_Password = readString(dis);
					
					this.FS_PathStorage = readString(dis);
					
					this.ML_SMTPHost = readString(dis);
					
					this.ML_SMTPPort = readString(dis);
					
					this.ML_UsernameMail = readString(dis);
					
					this.ML_PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_ETL_criterios) {

        	try {

        		int length = 0;
		
					this.DB_Host = readString(dis);
					
					this.DB_Port = readString(dis);
					
					this.DB_Sid = readString(dis);
					
					this.DB_ServiceName = readString(dis);
					
					this.DB_Schema = readString(dis);
					
					this.DB_User = readString(dis);
					
					this.DB_Password = readString(dis);
					
					this.FS_PathStorage = readString(dis);
					
					this.ML_SMTPHost = readString(dis);
					
					this.ML_SMTPPort = readString(dis);
					
					this.ML_UsernameMail = readString(dis);
					
					this.ML_PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DB_Host,dos);
					
					// String
				
						writeString(this.DB_Port,dos);
					
					// String
				
						writeString(this.DB_Sid,dos);
					
					// String
				
						writeString(this.DB_ServiceName,dos);
					
					// String
				
						writeString(this.DB_Schema,dos);
					
					// String
				
						writeString(this.DB_User,dos);
					
					// String
				
						writeString(this.DB_Password,dos);
					
					// String
				
						writeString(this.FS_PathStorage,dos);
					
					// String
				
						writeString(this.ML_SMTPHost,dos);
					
					// String
				
						writeString(this.ML_SMTPPort,dos);
					
					// String
				
						writeString(this.ML_UsernameMail,dos);
					
					// String
				
						writeString(this.ML_PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DB_Host,dos);
					
					// String
				
						writeString(this.DB_Port,dos);
					
					// String
				
						writeString(this.DB_Sid,dos);
					
					// String
				
						writeString(this.DB_ServiceName,dos);
					
					// String
				
						writeString(this.DB_Schema,dos);
					
					// String
				
						writeString(this.DB_User,dos);
					
					// String
				
						writeString(this.DB_Password,dos);
					
					// String
				
						writeString(this.FS_PathStorage,dos);
					
					// String
				
						writeString(this.ML_SMTPHost,dos);
					
					// String
				
						writeString(this.ML_SMTPPort,dos);
					
					// String
				
						writeString(this.ML_UsernameMail,dos);
					
					// String
				
						writeString(this.ML_PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DB_Host="+DB_Host);
		sb.append(",DB_Port="+DB_Port);
		sb.append(",DB_Sid="+DB_Sid);
		sb.append(",DB_ServiceName="+DB_ServiceName);
		sb.append(",DB_Schema="+DB_Schema);
		sb.append(",DB_User="+DB_User);
		sb.append(",DB_Password="+DB_Password);
		sb.append(",FS_PathStorage="+FS_PathStorage);
		sb.append(",ML_SMTPHost="+ML_SMTPHost);
		sb.append(",ML_SMTPPort="+ML_SMTPPort);
		sb.append(",ML_UsernameMail="+ML_UsernameMail);
		sb.append(",ML_PasswordMail="+ML_PasswordMail);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class NameSpaceTool_tFileInputXML_1 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_1{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getStringValue().isEmpty();
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.archivoConfiguracion;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_1 = true;
org.dom4j.Document doc_tFileInputXML_1 = null;
java.io.Closeable toClose_tFileInputXML_1 = null;
try{
	if(filename_tFileInputXML_1 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream)filename_tFileInputXML_1;
		toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(inputStream_tFileInputXML_1);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_1)),"UTF-8");
		toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
		org.xml.sax.InputSource in_tFileInputXML_1= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_1);
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(in_tFileInputXML_1);
	}
}catch(java.lang.Exception e){
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_1 = false;
} finally {
	if(toClose_tFileInputXML_1!=null) {
		toClose_tFileInputXML_1.close();
	}
}
if(isValidFile_tFileInputXML_1){
NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1.createXPath(nsTool_tFileInputXML_1.addDefaultNSPrefix("/connectionStrings"));  
x_tFileInputXML_1.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_1.selectNodes(doc_tFileInputXML_1);	
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
String str_tFileInputXML_1 = "";
org.dom4j.Node node_tFileInputXML_1 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_1=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_1{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Host","/connectionStrings"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Port","/connectionStrings"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Sid","/connectionStrings"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("ServiceName","/connectionStrings"));
	xpath_3.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(3,xpath_3);
			
	org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Schema","/connectionStrings"));
	xpath_4.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(4,xpath_4);
			
	org.dom4j.XPath xpath_5 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("User","/connectionStrings"));
	xpath_5.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(5,xpath_5);
			
	org.dom4j.XPath xpath_6 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Password","/connectionStrings"));
	xpath_6.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(6,xpath_6);
			
	org.dom4j.XPath xpath_7 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PathStorage","/connectionStrings"));
	xpath_7.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(7,xpath_7);
			
	org.dom4j.XPath xpath_8 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPHost","/connectionStrings"));
	xpath_8.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(8,xpath_8);
			
	org.dom4j.XPath xpath_9 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPPort","/connectionStrings"));
	xpath_9.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(9,xpath_9);
			
	org.dom4j.XPath xpath_10 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("UsernameMail","/connectionStrings"));
	xpath_10.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(10,xpath_10);
			
	org.dom4j.XPath xpath_11 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PasswordMail","/connectionStrings"));
	xpath_11.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(11,xpath_11);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_1 xPathUtil_tFileInputXML_1 = new XPathUtil_tFileInputXML_1();
	xPathUtil_tFileInputXML_1.initXPaths(xpaths_tFileInputXML_1, nsTool_tFileInputXML_1, xmlNameSpaceMap_tFileInputXML_1);
for (org.dom4j.Node temp_tFileInputXML_1: nodeList_tFileInputXML_1) {
	if (nb_line_tFileInputXML_1>=50) {
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row3 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row3 = new row3Struct();
	try{
    Object obj0_tFileInputXML_1 = xpaths_tFileInputXML_1.get(0).evaluate(temp_tFileInputXML_1);
    if(obj0_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj0_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_1 instanceof String || obj0_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj0_tFileInputXML_1);
    } else if(obj0_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row3.DB_Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row3.DB_Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row3.DB_Host =null;
									}else{
		row3.DB_Host = str_tFileInputXML_1;
	}
    Object obj1_tFileInputXML_1 = xpaths_tFileInputXML_1.get(1).evaluate(temp_tFileInputXML_1);
    if(obj1_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj1_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj1_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_1 instanceof String || obj1_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj1_tFileInputXML_1);
    } else if(obj1_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row3.DB_Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row3.DB_Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row3.DB_Port =null;
									}else{
		row3.DB_Port = str_tFileInputXML_1;
	}
    Object obj2_tFileInputXML_1 = xpaths_tFileInputXML_1.get(2).evaluate(temp_tFileInputXML_1);
    if(obj2_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj2_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj2_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_1 instanceof String || obj2_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj2_tFileInputXML_1);
    } else if(obj2_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row3.DB_Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row3.DB_Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row3.DB_Sid =null;
									}else{
		row3.DB_Sid = str_tFileInputXML_1;
	}
    Object obj3_tFileInputXML_1 = xpaths_tFileInputXML_1.get(3).evaluate(temp_tFileInputXML_1);
    if(obj3_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj3_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj3_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj3_tFileInputXML_1 instanceof String || obj3_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj3_tFileInputXML_1);
    } else if(obj3_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj3_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row3.DB_ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row3.DB_ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row3.DB_ServiceName =null;
									}else{
		row3.DB_ServiceName = str_tFileInputXML_1;
	}
    Object obj4_tFileInputXML_1 = xpaths_tFileInputXML_1.get(4).evaluate(temp_tFileInputXML_1);
    if(obj4_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj4_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj4_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj4_tFileInputXML_1 instanceof String || obj4_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj4_tFileInputXML_1);
    } else if(obj4_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj4_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row3.DB_Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row3.DB_Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row3.DB_Schema =null;
									}else{
		row3.DB_Schema = str_tFileInputXML_1;
	}
    Object obj5_tFileInputXML_1 = xpaths_tFileInputXML_1.get(5).evaluate(temp_tFileInputXML_1);
    if(obj5_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj5_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj5_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj5_tFileInputXML_1 instanceof String || obj5_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj5_tFileInputXML_1);
    } else if(obj5_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj5_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row3.DB_User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row3.DB_User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row3.DB_User =null;
									}else{
		row3.DB_User = str_tFileInputXML_1;
	}
    Object obj6_tFileInputXML_1 = xpaths_tFileInputXML_1.get(6).evaluate(temp_tFileInputXML_1);
    if(obj6_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj6_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj6_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj6_tFileInputXML_1 instanceof String || obj6_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj6_tFileInputXML_1);
    } else if(obj6_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj6_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row3.DB_Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row3.DB_Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row3.DB_Password =null;
									}else{
		row3.DB_Password = str_tFileInputXML_1;
	}
    Object obj7_tFileInputXML_1 = xpaths_tFileInputXML_1.get(7).evaluate(temp_tFileInputXML_1);
    if(obj7_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj7_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj7_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj7_tFileInputXML_1 instanceof String || obj7_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj7_tFileInputXML_1);
    } else if(obj7_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj7_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row3.FS_PathStorage =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row3.FS_PathStorage ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row3.FS_PathStorage =null;
									}else{
		row3.FS_PathStorage = str_tFileInputXML_1;
	}
    Object obj8_tFileInputXML_1 = xpaths_tFileInputXML_1.get(8).evaluate(temp_tFileInputXML_1);
    if(obj8_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj8_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj8_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj8_tFileInputXML_1 instanceof String || obj8_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj8_tFileInputXML_1);
    } else if(obj8_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj8_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row3.ML_SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row3.ML_SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row3.ML_SMTPHost =null;
									}else{
		row3.ML_SMTPHost = str_tFileInputXML_1;
	}
    Object obj9_tFileInputXML_1 = xpaths_tFileInputXML_1.get(9).evaluate(temp_tFileInputXML_1);
    if(obj9_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj9_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj9_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj9_tFileInputXML_1 instanceof String || obj9_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj9_tFileInputXML_1);
    } else if(obj9_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj9_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row3.ML_SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row3.ML_SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row3.ML_SMTPPort =null;
									}else{
		row3.ML_SMTPPort = str_tFileInputXML_1;
	}
    Object obj10_tFileInputXML_1 = xpaths_tFileInputXML_1.get(10).evaluate(temp_tFileInputXML_1);
    if(obj10_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj10_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj10_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj10_tFileInputXML_1 instanceof String || obj10_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj10_tFileInputXML_1);
    } else if(obj10_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj10_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row3.ML_UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row3.ML_UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row3.ML_UsernameMail =null;
									}else{
		row3.ML_UsernameMail = str_tFileInputXML_1;
	}
    Object obj11_tFileInputXML_1 = xpaths_tFileInputXML_1.get(11).evaluate(temp_tFileInputXML_1);
    if(obj11_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj11_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj11_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj11_tFileInputXML_1 instanceof String || obj11_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj11_tFileInputXML_1);
    } else if(obj11_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj11_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row3.ML_PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row3.ML_PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row3.ML_PasswordMail =null;
									}else{
		row3.ML_PasswordMail = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row3 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

    
//****************************************************************************************//
//*** ALMACENAMIENTO EN VARIABLES DE CONTEXTO DE LA CONFIGURACIÓN DE LA BASE DE DATOS ****//
//****************************************************************************************//
context.oracle_Host=row3.DB_Host;
context.oracle_Port=row3.DB_Port;
context.oracle_Sid=row3.DB_Sid;
context.oracle_ServiceName=row3.DB_ServiceName;
context.oracle_Schema=row3.DB_Schema;
context.oracle_User=row3.DB_User;
context.oracle_Password=row3.DB_Password;
System.out.println(context.oracle_Host);

//****************************************************************************************//
//*** ALMACENAMIENTO EN VARIABLES DE CONTEXTO DE LA CONFIGURACIÓN DEL FILE SYSTEM ********//
//****************************************************************************************//
context.fileSystem_Path=row3.FS_PathStorage;

//****************************************************************************************//
//*** ALMACENAMIENTO EN VARIABLES DE CONTEXTO DE LA CONFIGURACIÓN DEL EMAIL **************//
//****************************************************************************************//
context.mail_SMTPHost=row3.ML_SMTPHost;
context.mail_SMTPPort=row3.ML_SMTPPort;
context.mail_UsernameMail=row3.ML_UsernameMail;
context.mail_PasswordMail=row3.ML_PasswordMail;

//****************************************************************************************//
//*** ALMACENAMIENTO EN VARIABLES DE CONTEXTO DEL NOMBRE PARA EL ARCHIVO DE SALIDA *******//
//****************************************************************************************//
context.archivoSalida=GenerarUuid.createUUID();
    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


}
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk19", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tJavaRow_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tOracleConnection_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.oracle_Host + ")(port=" + context.oracle_Port + "))(connect_data=(service_name=" + context.oracle_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.oracle_User;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.oracle_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.oracle_AdditionalParams != null && !"\"\"".equals(context.oracle_AdditionalParams) && !"".equals(context.oracle_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.oracle_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.oracle_Host);
        globalMap.put("port_" + "tOracleConnection_1",context.oracle_Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.oracle_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.oracle_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.oracle_User);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tOracleConnection_1", end_Hash.get("tOracleConnection_1")-start_Hash.get("tOracleConnection_1"));
tStatCatcher_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk23", 0, "ok");
				}
				tJava_7Process(globalMap);



/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";
	
	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

	try {
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("the end is near");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "the end is near");
	globalMap.put("tDie_1_DIE_MESSAGES", "the end is near");
	
	} catch (Exception | Error e_tDie_1) {
	    globalMap.put("tDie_1_ERROR_MESSAGE",e_tDie_1.getMessage());
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
    	errorCode = new Integer(4);
        ((java.util.Map)threadLocal.get()).put("errorCode", new Integer(4));
        ((java.util.Map)threadLocal.get()).put("status", "failure");
        globalMap.put("tDie_1_DIE_CODE", errorCode);

    
	if(true){	
		TDieException e_tDie_1 = new TDieException();

		

		throw e_tDie_1;
	}

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_7", false);
		start_Hash.put("tJava_7", System.currentTimeMillis());
		
	
	currentComponent="tJava_7";
	
	
		int tos_count_tJava_7 = 0;
		


//****************************************************************************************//
System.out.println("*** PREJOB FINALIZADO ETL PRINCIPAL ****************************************************");
//****************************************************************************************//


 



/**
 * [tJava_7 begin ] stop
 */
	
	/**
	 * [tJava_7 main ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 


	tos_count_tJava_7++;

/**
 * [tJava_7 main ] stop
 */
	
	/**
	 * [tJava_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 



/**
 * [tJava_7 process_data_begin ] stop
 */
	
	/**
	 * [tJava_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 



/**
 * [tJava_7 process_data_end ] stop
 */
	
	/**
	 * [tJava_7 end ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 

ok_Hash.put("tJava_7", true);
end_Hash.put("tJava_7", System.currentTimeMillis());




/**
 * [tJava_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_7 finally ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 



/**
 * [tJava_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}
	


public void tJava_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_6", false);
		start_Hash.put("tJava_6", System.currentTimeMillis());
		
	
	currentComponent="tJava_6";
	
	
		int tos_count_tJava_6 = 0;
		


//****************************************************************************************//
System.out.println("Archivo de configuración no encontrado.");
//****************************************************************************************//





 



/**
 * [tJava_6 begin ] stop
 */
	
	/**
	 * [tJava_6 main ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 


	tos_count_tJava_6++;

/**
 * [tJava_6 main ] stop
 */
	
	/**
	 * [tJava_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 process_data_begin ] stop
 */
	
	/**
	 * [tJava_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 process_data_end ] stop
 */
	
	/**
	 * [tJava_6 end ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 

ok_Hash.put("tJava_6", true);
end_Hash.put("tJava_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk20", 0, "ok");
				}
				tDie_1Process(globalMap);



/**
 * [tJava_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_6 finally ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tOracleClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tOracleClose_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tOracleClose_1", end_Hash.get("tOracleClose_1")-start_Hash.get("tOracleClose_1"));
tStatCatcher_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


//****************************************************************************************//
System.out.println("****************** POSTJOB FINALIZADO EXTINCION DE DERECHOS POR CRITERIOS ******");
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_ETL_criterios = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[0];

	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_ETL_criterios) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_ETL_criterios) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tOracleInput_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
                if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_1 != null) {
                        isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
                        unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement();

		    String dbquery_tOracleInput_1 = "SELECT\n	ID \nFROM\n	SALUDSIS.AFI_ESTEXTDERECHOS\nWHERE\n	CODIGO = 1";
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row1.ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row1.ID = rs_tOracleInput_1.getInt(1);
					} else {
				
						row1.ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.infoIdEstadoActivo = row1.ID;

    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tOracleInput_1", end_Hash.get("tOracleInput_1")-start_Hash.get("tOracleInput_1"));
tStatCatcher_1Process(globalMap);



/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tOracleInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_ETL_criterios = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[0];

	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public Integer USUARIOS_ID;

				public Integer getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return 0;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return 0;
				}
				public Integer DESCRIPCIONPrecision(){
				    return 0;
				}
				public String DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_ETL_criterios.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_ETL_criterios.length == 0) {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_ETL_criterios.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_ETL_criterios.length == 0) {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_ETL_criterios) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
						this.USUARIOS_ID = readInteger(dis);
					
					this.DESCRIPCION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_ETL_criterios) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
						this.USUARIOS_ID = readInteger(dis);
					
					this.DESCRIPCION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",DESCRIPCION="+DESCRIPCION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tOracleInput_2");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				conn_tOracleInput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_2 = false;
				boolean isConnectionWrapped_tOracleInput_2 = !(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_2 = null;
                if (isConnectionWrapped_tOracleInput_2) {
					unwrappedOraConn_tOracleInput_2 = conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_2 != null) {
                        isTimeZoneNull_tOracleInput_2 = (unwrappedOraConn_tOracleInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_2 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_2) {
					java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_2.next()) {
						sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_2 && unwrappedOraConn_tOracleInput_2 != null) {
                        unwrappedOraConn_tOracleInput_2.setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement();

		    String dbquery_tOracleInput_2 = "SELECT\n	MAX(AJ.ID) AS ID,\n	AJ.USUARIOS_ID,\n	ATJ.NOMBRE AS DESCRIPCION\nFROM\n	AFI_JOBS AJ\n	INNER JOIN AFI_TJOBS ATJ"
+" ON AJ.TJOB_ID = ATJ.ID\nWHERE\n	AJ.ESTADO = "+context.infoIdEstadoActivo+" AND\n	ATJ.CODIGO = "+context.infoCodigoTipoJob+" AND\n	AJ.ESTREGISTRO_ID = 1 AND\n	ATJ.ESTREGISTRO_ID = 1\nGROUP BY\n	AJ.USUARIOS_ID,\n	ATJ.NOMBRE";
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row2.ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(1) != null) {
						row2.ID = rs_tOracleInput_2.getInt(1);
					} else {
				
						row2.ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row2.USUARIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(2) != null) {
						row2.USUARIOS_ID = rs_tOracleInput_2.getInt(2);
					} else {
				
						row2.USUARIOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 3) {
								row2.DESCRIPCION = null;
							} else {
	                         		
        	row2.DESCRIPCION = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 3, false);
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.infoIdJobProcesar = row2.ID;
context.infoUsuarioJobProcesar = row2.USUARIOS_ID;
context.infoDescripcionJobProcesar = row2.DESCRIPCION;

    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tOracleInput_2", end_Hash.get("tOracleInput_2")-start_Hash.get("tOracleInput_2"));
tStatCatcher_1Process(globalMap);



/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());

   			if (context.infoIdJobProcesar > 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				tOracleInput_3Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_ETL_criterios = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[0];

	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_ETL_criterios) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_ETL_criterios) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tJavaRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_5", false);
		start_Hash.put("tJavaRow_5", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tJavaRow_5 = 0;
		

int nb_line_tJavaRow_5 = 0;

 



/**
 * [tJavaRow_5 begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tOracleInput_3");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				conn_tOracleInput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_3 = false;
				boolean isConnectionWrapped_tOracleInput_3 = !(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_3 = null;
                if (isConnectionWrapped_tOracleInput_3) {
					unwrappedOraConn_tOracleInput_3 = conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_3 != null) {
                        isTimeZoneNull_tOracleInput_3 = (unwrappedOraConn_tOracleInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_3 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_3) {
					java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_3.next()) {
						sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_3 && unwrappedOraConn_tOracleInput_3 != null) {
                        unwrappedOraConn_tOracleInput_3.setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement();

		    String dbquery_tOracleInput_3 = "SELECT\n	MAX(ID) AS ID\nFROM\n	AFI_TPROCESOS\nWHERE\n	CODIGO = 2";
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row6.ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(1) != null) {
						row6.ID = rs_tOracleInput_3.getInt(1);
					} else {
				
						row6.ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_5 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.infoTipoProceso = row6.ID;

    nb_line_tJavaRow_5++;   

 


	tos_count_tJavaRow_5++;

/**
 * [tJavaRow_5 main ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tOracleInput_3", end_Hash.get("tOracleInput_3")-start_Hash.get("tOracleInput_3"));
tStatCatcher_1Process(globalMap);



/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tJavaRow_5 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

globalMap.put("tJavaRow_5_NB_LINE",nb_line_tJavaRow_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tJavaRow_5", true);
end_Hash.put("tJavaRow_5", System.currentTimeMillis());




/**
 * [tJavaRow_5 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tFixedFlowInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tJavaRow_5 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_ETL_criterios = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[0];

	
			    public Integer IdJobEvaluar_;

				public Integer getIdJobEvaluar_ () {
					return this.IdJobEvaluar_;
				}

				public Boolean IdJobEvaluar_IsNullable(){
				    return true;
				}
				public Boolean IdJobEvaluar_IsKey(){
				    return false;
				}
				public Integer IdJobEvaluar_Length(){
				    return 0;
				}
				public Integer IdJobEvaluar_Precision(){
				    return 0;
				}
				public String IdJobEvaluar_Default(){
				
					return null;
				
				}
				public String IdJobEvaluar_Comment(){
				
				    return "";
				
				}
				public String IdJobEvaluar_Pattern(){
				
					return "";
				
				}
				public String IdJobEvaluar_OriginalDbColumnName(){
				
					return "IdJobEvaluar_";
				
				}

				
			    public Integer IdArchivoEvaluar_;

				public Integer getIdArchivoEvaluar_ () {
					return this.IdArchivoEvaluar_;
				}

				public Boolean IdArchivoEvaluar_IsNullable(){
				    return true;
				}
				public Boolean IdArchivoEvaluar_IsKey(){
				    return false;
				}
				public Integer IdArchivoEvaluar_Length(){
				    return 0;
				}
				public Integer IdArchivoEvaluar_Precision(){
				    return 0;
				}
				public String IdArchivoEvaluar_Default(){
				
					return null;
				
				}
				public String IdArchivoEvaluar_Comment(){
				
				    return "";
				
				}
				public String IdArchivoEvaluar_Pattern(){
				
					return "";
				
				}
				public String IdArchivoEvaluar_OriginalDbColumnName(){
				
					return "IdArchivoEvaluar_";
				
				}

				
			    public Integer UsuarioSistema_;

				public Integer getUsuarioSistema_ () {
					return this.UsuarioSistema_;
				}

				public Boolean UsuarioSistema_IsNullable(){
				    return true;
				}
				public Boolean UsuarioSistema_IsKey(){
				    return false;
				}
				public Integer UsuarioSistema_Length(){
				    return 0;
				}
				public Integer UsuarioSistema_Precision(){
				    return 0;
				}
				public String UsuarioSistema_Default(){
				
					return null;
				
				}
				public String UsuarioSistema_Comment(){
				
				    return "";
				
				}
				public String UsuarioSistema_Pattern(){
				
					return "";
				
				}
				public String UsuarioSistema_OriginalDbColumnName(){
				
					return "UsuarioSistema_";
				
				}

				
			    public Integer TipoProceso_;

				public Integer getTipoProceso_ () {
					return this.TipoProceso_;
				}

				public Boolean TipoProceso_IsNullable(){
				    return true;
				}
				public Boolean TipoProceso_IsKey(){
				    return false;
				}
				public Integer TipoProceso_Length(){
				    return 0;
				}
				public Integer TipoProceso_Precision(){
				    return 0;
				}
				public String TipoProceso_Default(){
				
					return null;
				
				}
				public String TipoProceso_Comment(){
				
				    return "";
				
				}
				public String TipoProceso_Pattern(){
				
					return "";
				
				}
				public String TipoProceso_OriginalDbColumnName(){
				
					return "TipoProceso_";
				
				}

				
			    public String DescripcionProceso_;

				public String getDescripcionProceso_ () {
					return this.DescripcionProceso_;
				}

				public Boolean DescripcionProceso_IsNullable(){
				    return true;
				}
				public Boolean DescripcionProceso_IsKey(){
				    return false;
				}
				public Integer DescripcionProceso_Length(){
				    return 0;
				}
				public Integer DescripcionProceso_Precision(){
				    return 0;
				}
				public String DescripcionProceso_Default(){
				
					return null;
				
				}
				public String DescripcionProceso_Comment(){
				
				    return "";
				
				}
				public String DescripcionProceso_Pattern(){
				
					return "";
				
				}
				public String DescripcionProceso_OriginalDbColumnName(){
				
					return "DescripcionProceso_";
				
				}

				
			    public Integer ProcesoId_;

				public Integer getProcesoId_ () {
					return this.ProcesoId_;
				}

				public Boolean ProcesoId_IsNullable(){
				    return true;
				}
				public Boolean ProcesoId_IsKey(){
				    return false;
				}
				public Integer ProcesoId_Length(){
				    return 0;
				}
				public Integer ProcesoId_Precision(){
				    return 0;
				}
				public String ProcesoId_Default(){
				
					return null;
				
				}
				public String ProcesoId_Comment(){
				
				    return "";
				
				}
				public String ProcesoId_Pattern(){
				
					return "";
				
				}
				public String ProcesoId_OriginalDbColumnName(){
				
					return "ProcesoId_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_ETL_criterios.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_ETL_criterios.length == 0) {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_ETL_criterios.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_ETL_criterios.length == 0) {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_ETL_criterios) {

        	try {

        		int length = 0;
		
						this.IdJobEvaluar_ = readInteger(dis);
					
						this.IdArchivoEvaluar_ = readInteger(dis);
					
						this.UsuarioSistema_ = readInteger(dis);
					
						this.TipoProceso_ = readInteger(dis);
					
					this.DescripcionProceso_ = readString(dis);
					
						this.ProcesoId_ = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_ETL_criterios) {

        	try {

        		int length = 0;
		
						this.IdJobEvaluar_ = readInteger(dis);
					
						this.IdArchivoEvaluar_ = readInteger(dis);
					
						this.UsuarioSistema_ = readInteger(dis);
					
						this.TipoProceso_ = readInteger(dis);
					
					this.DescripcionProceso_ = readString(dis);
					
						this.ProcesoId_ = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IdJobEvaluar_,dos);
					
					// Integer
				
						writeInteger(this.IdArchivoEvaluar_,dos);
					
					// Integer
				
						writeInteger(this.UsuarioSistema_,dos);
					
					// Integer
				
						writeInteger(this.TipoProceso_,dos);
					
					// String
				
						writeString(this.DescripcionProceso_,dos);
					
					// Integer
				
						writeInteger(this.ProcesoId_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.IdJobEvaluar_,dos);
					
					// Integer
				
						writeInteger(this.IdArchivoEvaluar_,dos);
					
					// Integer
				
						writeInteger(this.UsuarioSistema_,dos);
					
					// Integer
				
						writeInteger(this.TipoProceso_,dos);
					
					// String
				
						writeString(this.DescripcionProceso_,dos);
					
					// Integer
				
						writeInteger(this.ProcesoId_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IdJobEvaluar_="+String.valueOf(IdJobEvaluar_));
		sb.append(",IdArchivoEvaluar_="+String.valueOf(IdArchivoEvaluar_));
		sb.append(",UsuarioSistema_="+String.valueOf(UsuarioSistema_));
		sb.append(",TipoProceso_="+String.valueOf(TipoProceso_));
		sb.append(",DescripcionProceso_="+DescripcionProceso_);
		sb.append(",ProcesoId_="+String.valueOf(ProcesoId_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_ETL_criterios = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[0];

	
			    public Integer IdJobEvaluar_;

				public Integer getIdJobEvaluar_ () {
					return this.IdJobEvaluar_;
				}

				public Boolean IdJobEvaluar_IsNullable(){
				    return true;
				}
				public Boolean IdJobEvaluar_IsKey(){
				    return false;
				}
				public Integer IdJobEvaluar_Length(){
				    return 0;
				}
				public Integer IdJobEvaluar_Precision(){
				    return 0;
				}
				public String IdJobEvaluar_Default(){
				
					return null;
				
				}
				public String IdJobEvaluar_Comment(){
				
				    return "";
				
				}
				public String IdJobEvaluar_Pattern(){
				
					return "";
				
				}
				public String IdJobEvaluar_OriginalDbColumnName(){
				
					return "IdJobEvaluar_";
				
				}

				
			    public Integer IdArchivoEvaluar_;

				public Integer getIdArchivoEvaluar_ () {
					return this.IdArchivoEvaluar_;
				}

				public Boolean IdArchivoEvaluar_IsNullable(){
				    return true;
				}
				public Boolean IdArchivoEvaluar_IsKey(){
				    return false;
				}
				public Integer IdArchivoEvaluar_Length(){
				    return 0;
				}
				public Integer IdArchivoEvaluar_Precision(){
				    return 0;
				}
				public String IdArchivoEvaluar_Default(){
				
					return null;
				
				}
				public String IdArchivoEvaluar_Comment(){
				
				    return "";
				
				}
				public String IdArchivoEvaluar_Pattern(){
				
					return "";
				
				}
				public String IdArchivoEvaluar_OriginalDbColumnName(){
				
					return "IdArchivoEvaluar_";
				
				}

				
			    public Integer UsuarioSistema_;

				public Integer getUsuarioSistema_ () {
					return this.UsuarioSistema_;
				}

				public Boolean UsuarioSistema_IsNullable(){
				    return true;
				}
				public Boolean UsuarioSistema_IsKey(){
				    return false;
				}
				public Integer UsuarioSistema_Length(){
				    return 0;
				}
				public Integer UsuarioSistema_Precision(){
				    return 0;
				}
				public String UsuarioSistema_Default(){
				
					return null;
				
				}
				public String UsuarioSistema_Comment(){
				
				    return "";
				
				}
				public String UsuarioSistema_Pattern(){
				
					return "";
				
				}
				public String UsuarioSistema_OriginalDbColumnName(){
				
					return "UsuarioSistema_";
				
				}

				
			    public Integer TipoProceso_;

				public Integer getTipoProceso_ () {
					return this.TipoProceso_;
				}

				public Boolean TipoProceso_IsNullable(){
				    return true;
				}
				public Boolean TipoProceso_IsKey(){
				    return false;
				}
				public Integer TipoProceso_Length(){
				    return 0;
				}
				public Integer TipoProceso_Precision(){
				    return 0;
				}
				public String TipoProceso_Default(){
				
					return null;
				
				}
				public String TipoProceso_Comment(){
				
				    return "";
				
				}
				public String TipoProceso_Pattern(){
				
					return "";
				
				}
				public String TipoProceso_OriginalDbColumnName(){
				
					return "TipoProceso_";
				
				}

				
			    public String DescripcionProceso_;

				public String getDescripcionProceso_ () {
					return this.DescripcionProceso_;
				}

				public Boolean DescripcionProceso_IsNullable(){
				    return true;
				}
				public Boolean DescripcionProceso_IsKey(){
				    return false;
				}
				public Integer DescripcionProceso_Length(){
				    return 0;
				}
				public Integer DescripcionProceso_Precision(){
				    return 0;
				}
				public String DescripcionProceso_Default(){
				
					return null;
				
				}
				public String DescripcionProceso_Comment(){
				
				    return "";
				
				}
				public String DescripcionProceso_Pattern(){
				
					return "";
				
				}
				public String DescripcionProceso_OriginalDbColumnName(){
				
					return "DescripcionProceso_";
				
				}

				
			    public Integer ProcesoId_;

				public Integer getProcesoId_ () {
					return this.ProcesoId_;
				}

				public Boolean ProcesoId_IsNullable(){
				    return true;
				}
				public Boolean ProcesoId_IsKey(){
				    return false;
				}
				public Integer ProcesoId_Length(){
				    return 0;
				}
				public Integer ProcesoId_Precision(){
				    return 0;
				}
				public String ProcesoId_Default(){
				
					return null;
				
				}
				public String ProcesoId_Comment(){
				
				    return "";
				
				}
				public String ProcesoId_Pattern(){
				
					return "";
				
				}
				public String ProcesoId_OriginalDbColumnName(){
				
					return "ProcesoId_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_ETL_criterios.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_ETL_criterios.length == 0) {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_ETL_criterios.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_ETL_criterios.length == 0) {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_ETL_criterios) {

        	try {

        		int length = 0;
		
						this.IdJobEvaluar_ = readInteger(dis);
					
						this.IdArchivoEvaluar_ = readInteger(dis);
					
						this.UsuarioSistema_ = readInteger(dis);
					
						this.TipoProceso_ = readInteger(dis);
					
					this.DescripcionProceso_ = readString(dis);
					
						this.ProcesoId_ = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_ETL_criterios) {

        	try {

        		int length = 0;
		
						this.IdJobEvaluar_ = readInteger(dis);
					
						this.IdArchivoEvaluar_ = readInteger(dis);
					
						this.UsuarioSistema_ = readInteger(dis);
					
						this.TipoProceso_ = readInteger(dis);
					
					this.DescripcionProceso_ = readString(dis);
					
						this.ProcesoId_ = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IdJobEvaluar_,dos);
					
					// Integer
				
						writeInteger(this.IdArchivoEvaluar_,dos);
					
					// Integer
				
						writeInteger(this.UsuarioSistema_,dos);
					
					// Integer
				
						writeInteger(this.TipoProceso_,dos);
					
					// String
				
						writeString(this.DescripcionProceso_,dos);
					
					// Integer
				
						writeInteger(this.ProcesoId_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.IdJobEvaluar_,dos);
					
					// Integer
				
						writeInteger(this.IdArchivoEvaluar_,dos);
					
					// Integer
				
						writeInteger(this.UsuarioSistema_,dos);
					
					// Integer
				
						writeInteger(this.TipoProceso_,dos);
					
					// String
				
						writeString(this.DescripcionProceso_,dos);
					
					// Integer
				
						writeInteger(this.ProcesoId_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IdJobEvaluar_="+String.valueOf(IdJobEvaluar_));
		sb.append(",IdArchivoEvaluar_="+String.valueOf(IdArchivoEvaluar_));
		sb.append(",UsuarioSistema_="+String.valueOf(UsuarioSistema_));
		sb.append(",TipoProceso_="+String.valueOf(TipoProceso_));
		sb.append(",DescripcionProceso_="+DescripcionProceso_);
		sb.append(",ProcesoId_="+String.valueOf(ProcesoId_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
row4Struct row4 = new row4Struct();





	
	/**
	 * [tJavaRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_4", false);
		start_Hash.put("tJavaRow_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tJavaRow_4 = 0;
		

int nb_line_tJavaRow_4 = 0;

 



/**
 * [tJavaRow_4 begin ] stop
 */



	
	/**
	 * [tOracleSP_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_1", false);
		start_Hash.put("tOracleSP_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tOracleSP_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tOracleSP_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tOracleSP_1 = 0;
		

	java.sql.Connection connection_tOracleSP_1 = null;
	connection_tOracleSP_1 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_1");
	

java.sql.CallableStatement statement_tOracleSP_1 = connection_tOracleSP_1.prepareCall("{call " + "EXD.InsProcesoExd" + "(?,?,?,?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_1;
String tmpString_tOracleSP_1;

 



/**
 * [tOracleSP_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";
	
	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row5.IdJobEvaluar_ = context.infoIdJobProcesar;
    	            	        	            	
    	            		row5.IdArchivoEvaluar_ = null;
    	            	        	            	
    	            		row5.UsuarioSistema_ = context.infoUsuarioJobProcesar;
    	            	        	            	
    	            		row5.TipoProceso_ = context.infoTipoProceso;
    	            	        	            	
    	            		row5.DescripcionProceso_ = context.infoDescripcionJobProcesar;
    	            	        	            	
    	            		row5.ProcesoId_ = null;        	            	
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_1 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

			// code for the argument 1 (IdJobEvaluar_) of type 'IN AUTOMAPPING'
    					if (row5.IdJobEvaluar_ == null) {
    						statement_tOracleSP_1.setNull(1, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_1.setInt(1, row5.IdJobEvaluar_);
    					}
    					
			// code for the argument 2 (IdArchivoEvaluar_) of type 'IN AUTOMAPPING'
    					if (row5.IdArchivoEvaluar_ == null) {
    						statement_tOracleSP_1.setNull(2, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_1.setInt(2, row5.IdArchivoEvaluar_);
    					}
    					
			// code for the argument 3 (UsuarioSistema_) of type 'IN AUTOMAPPING'
    					if (row5.UsuarioSistema_ == null) {
    						statement_tOracleSP_1.setNull(3, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_1.setInt(3, row5.UsuarioSistema_);
    					}
    					
			// code for the argument 4 (TipoProceso_) of type 'IN AUTOMAPPING'
    					if (row5.TipoProceso_ == null) {
    						statement_tOracleSP_1.setNull(4, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_1.setInt(4, row5.TipoProceso_);
    					}
    					
			// code for the argument 5 (DescripcionProceso_) of type 'IN AUTOMAPPING'
    					if (row5.DescripcionProceso_ == null) {
    						statement_tOracleSP_1.setNull(5, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tOracleSP_1.setString(5, row5.DescripcionProceso_);
    					}
    					
			// code for the argument 6 (ProcesoId_) of type 'OUT AUTOMAPPING'
					statement_tOracleSP_1.registerOutParameter(6, java.sql.Types.INTEGER);
		statement_tOracleSP_1.execute();
		
								row4.IdJobEvaluar_ = row5.IdJobEvaluar_;
								
								row4.IdArchivoEvaluar_ = row5.IdArchivoEvaluar_;
								
								row4.UsuarioSistema_ = row5.UsuarioSistema_;
								
								row4.TipoProceso_ = row5.TipoProceso_;
								
								row4.DescripcionProceso_ = row5.DescripcionProceso_;
								
									row4.ProcesoId_ = statement_tOracleSP_1.getInt(6);
									
									if (statement_tOracleSP_1.wasNull()) {
										row4.ProcesoId_ = null;
									}
									

 


	tos_count_tOracleSP_1++;

/**
 * [tOracleSP_1 main ] stop
 */
	
	/**
	 * [tOracleSP_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_4 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

    //****************************************************************************************//
//*** ALMACENAMIENTO EN VARIABLES DE CONTEXTO DE LA INFORMACIÓN DEL PROCESO **************//
//****************************************************************************************//
context.infoIdProceso = row4.ProcesoId_;


    nb_line_tJavaRow_4++;   

 


	tos_count_tJavaRow_4++;

/**
 * [tJavaRow_4 main ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleSP_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tOracleSP_1 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	


	statement_tOracleSP_1.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tOracleSP_1", true);
end_Hash.put("tOracleSP_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tOracleSP_1", end_Hash.get("tOracleSP_1")-start_Hash.get("tOracleSP_1"));
tStatCatcher_1Process(globalMap);



/**
 * [tOracleSP_1 end ] stop
 */

	
	/**
	 * [tJavaRow_4 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

globalMap.put("tJavaRow_4_NB_LINE",nb_line_tJavaRow_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tJavaRow_4", true);
end_Hash.put("tJavaRow_4", System.currentTimeMillis());




/**
 * [tJavaRow_4 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFixedFlowInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tOracleInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tOracleSP_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_ETL_criterios = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[0];

	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String ENTAPORTANTES;

				public String getENTAPORTANTES () {
					return this.ENTAPORTANTES;
				}

				public Boolean ENTAPORTANTESIsNullable(){
				    return true;
				}
				public Boolean ENTAPORTANTESIsKey(){
				    return false;
				}
				public Integer ENTAPORTANTESLength(){
				    return null;
				}
				public Integer ENTAPORTANTESPrecision(){
				    return null;
				}
				public String ENTAPORTANTESDefault(){
				
					return null;
				
				}
				public String ENTAPORTANTESComment(){
				
				    return "";
				
				}
				public String ENTAPORTANTESPattern(){
				
					return "";
				
				}
				public String ENTAPORTANTESOriginalDbColumnName(){
				
					return "ENTAPORTANTES";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_ETL_criterios.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_ETL_criterios.length == 0) {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_ETL_criterios.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_ETL_criterios.length == 0) {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_ETL_criterios) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
					this.ENTAPORTANTES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_ETL_criterios) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
					this.ENTAPORTANTES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// String
				
						writeString(this.ENTAPORTANTES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
					// String
				
						writeString(this.ENTAPORTANTES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",ENTAPORTANTES="+ENTAPORTANTES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_tJava_3 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_1", false);
		start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tFlowToIterate_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tFlowToIterate_1 = 0;
		

int nb_line_tFlowToIterate_1 = 0;
int counter_tFlowToIterate_1 = 0;

 



/**
 * [tFlowToIterate_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_4", false);
		start_Hash.put("tOracleInput_4", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tOracleInput_4");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tOracleInput_4";
	
	
		int tos_count_tOracleInput_4 = 0;
		
	


	
		    int nb_line_tOracleInput_4 = 0;
		    java.sql.Connection conn_tOracleInput_4 = null;
				conn_tOracleInput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_4 = false;
				boolean isConnectionWrapped_tOracleInput_4 = !(conn_tOracleInput_4 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_4 = null;
                if (isConnectionWrapped_tOracleInput_4) {
					unwrappedOraConn_tOracleInput_4 = conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_4 != null) {
                        isTimeZoneNull_tOracleInput_4 = (unwrappedOraConn_tOracleInput_4.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_4 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_4).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_4) {
					java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_4.next()) {
						sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_4 && unwrappedOraConn_tOracleInput_4 != null) {
                        unwrappedOraConn_tOracleInput_4.setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement();

		    String dbquery_tOracleInput_4 = "SELECT\n  CON.CODIGO AS ID,\n	JO.ENTAPORTANTES\nFROM\n  AFI_JOBS_CONFJOBS AJC\n  INNER JOIN AFI_CONFJOBS CON ON CON.ID "
+"= AJC.CONFJOBS_ID\nINNER JOIN  AFI_JOBS JO ON JO.ID = AJC.JOBS_ID\nWHERE\n	AJC.JOBS_ID = "+context.infoIdJobProcesar+" AND\n --AJC.JOBS_ID = 3458 AND	\n AJC.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_4_QUERY",dbquery_tOracleInput_4);

		    java.sql.ResultSet rs_tOracleInput_4 = null;

		    try {
		    	rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
		    	int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

		    String tmpContent_tOracleInput_4 = null;
		    
		    
		    while (rs_tOracleInput_4.next()) {
		        nb_line_tOracleInput_4++;
		        
							if(colQtyInRs_tOracleInput_4 < 1) {
								row7.ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(1) != null) {
						row7.ID = rs_tOracleInput_4.getInt(1);
					} else {
				
						row7.ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 2) {
								row7.ENTAPORTANTES = null;
							} else {
	                         		
        	row7.ENTAPORTANTES = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 2, false);
		                    }
					




 



/**
 * [tOracleInput_4 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 


	tos_count_tOracleInput_4++;

/**
 * [tOracleInput_4 main ] stop
 */
	
	/**
	 * [tOracleInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					


    	            
            globalMap.put("row7.ID", row7.ID);
    	            
            globalMap.put("row7.ENTAPORTANTES", row7.ENTAPORTANTES);
    	
 
	   nb_line_tFlowToIterate_1++;  
       counter_tFlowToIterate_1++;
       globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);
 


	tos_count_tFlowToIterate_1++;

/**
 * [tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_tJava_3++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("Cirterio_01", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("Criterio_06", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("Criterio_05", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("Criterio_10", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("Criterio_08", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("Criterio_07", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("Criterio_11", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("Criterio_04", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("Criterio_09", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tJava_3);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";
	
	
		int tos_count_tJava_3 = 0;
		


context.AuxCriterioActual=row7.ID;
context.infoEntidades=row7.ENTAPORTANTES;
System.out.println("Entidades a procesar: " + context.infoEntidades);
System.out.println("Job id a procesar: " + context.infoIdJobProcesar);

 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());

   			if (context.AuxCriterioActual==1) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("Cirterio_01", 0, "true");
					}
				tRunJob_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("Cirterio_01", 0, "false");
					}   	 
   				}
   			if (context.AuxCriterioActual==4) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("Criterio_04", 0, "true");
					}
				tRunJob_9Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("Criterio_04", 0, "false");
					}   	 
   				}
   			if (context.AuxCriterioActual==5) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("Criterio_05", 0, "true");
					}
				tRunJob_10Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("Criterio_05", 0, "false");
					}   	 
   				}
   			if (context.AuxCriterioActual==6) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("Criterio_06", 0, "true");
					}
				tRunJob_13Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("Criterio_06", 0, "false");
					}   	 
   				}
   			if (context.AuxCriterioActual==7) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("Criterio_07", 0, "true");
					}
				tRunJob_12Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("Criterio_07", 0, "false");
					}   	 
   				}
   			if (context.AuxCriterioActual==8) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("Criterio_08", 0, "true");
					}
				tRunJob_6Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("Criterio_08", 0, "false");
					}   	 
   				}
   			if (context.AuxCriterioActual==9) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("Criterio_09", 0, "true");
					}
				tRunJob_14Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("Criterio_09", 0, "false");
					}   	 
   				}
   			if (context.AuxCriterioActual==10) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("Criterio_10", 0, "true");
					}
				tRunJob_7Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("Criterio_10", 0, "false");
					}   	 
   				}
   			if (context.AuxCriterioActual==11) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("Criterio_11", 0, "true");
					}
				tRunJob_8Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("Criterio_11", 0, "false");
					}   	 
   				}



/**
 * [tJava_3 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tJava_3);
						}				
					




	
	/**
	 * [tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

}
}finally{
	if (rs_tOracleInput_4 != null) {
		rs_tOracleInput_4.close();
	}
	if (stmt_tOracleInput_4 != null) {
		stmt_tOracleInput_4.close();
	}
}

globalMap.put("tOracleInput_4_NB_LINE",nb_line_tOracleInput_4);
 

ok_Hash.put("tOracleInput_4", true);
end_Hash.put("tOracleInput_4", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tOracleInput_4", end_Hash.get("tOracleInput_4")-start_Hash.get("tOracleInput_4"));
tStatCatcher_1Process(globalMap);



/**
 * [tOracleInput_4 end ] stop
 */

	
	/**
	 * [tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

globalMap.put("tFlowToIterate_1_NB_LINE",nb_line_tFlowToIterate_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_1", true);
end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tFlowToIterate_1", end_Hash.get("tFlowToIterate_1")-start_Hash.get("tFlowToIterate_1"));
tStatCatcher_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tRunJob_15Process(globalMap);



/**
 * [tFlowToIterate_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tOracleInput_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}
	


public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tRunJob_2");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tRunJob_2";
	
	
		int tos_count_tRunJob_2 = 0;
		


 



/**
 * [tRunJob_2 begin ] stop
 */
	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";
	
	
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_2.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_2.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_2.add("--father_node=tRunJob_2");
	      			
	        				paraList_tRunJob_2.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_2.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_2 = null;

	
		obj_tRunJob_2 = context.infoIdProceso;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param infoIdProceso=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param infoIdProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param infoIdProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("infoIdProceso", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.infoUsuarioJobProcesar;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param infoUsuarioJobProcesar=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param infoUsuarioJobProcesar=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param infoUsuarioJobProcesar=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("infoUsuarioJobProcesar", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.archivoSalida;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param archivoSalida=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param archivoSalida=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param archivoSalida=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("archivoSalida", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.fileSystem_Path;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param fileSystem_Path=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param fileSystem_Path=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param fileSystem_Path=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("fileSystem_Path", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.oracle_ServiceName;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param oracle_ServiceName=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param oracle_ServiceName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param oracle_ServiceName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("oracle_ServiceName", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.oracle_AdditionalParams;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param oracle_AdditionalParams=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param oracle_AdditionalParams=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param oracle_AdditionalParams=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("oracle_AdditionalParams", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.oracle_User;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param oracle_User=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param oracle_User=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param oracle_User=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("oracle_User", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.oracle_Schema;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param oracle_Schema=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param oracle_Schema=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param oracle_Schema=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("oracle_Schema", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.oracle_Host;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param oracle_Host=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param oracle_Host=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param oracle_Host=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("oracle_Host", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.oracle_Sid;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param oracle_Sid=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param oracle_Sid=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param oracle_Sid=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("oracle_Sid", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.oracle_Password;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param oracle_Password=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param oracle_Password=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param oracle_Password=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("oracle_Password", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.oracle_Port;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param oracle_Port=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param oracle_Port=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param oracle_Port=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("oracle_Port", obj_tRunJob_2);
	
	
		afi_extincion.criterio_01_0_5.Criterio_01 childJob_tRunJob_2 = new afi_extincion.criterio_01_0_5.Criterio_01();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_2) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
			        .entrySet()) {
	            dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
	                    talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
	    }
		  
			childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
		  
		
		String[][] childReturn_tRunJob_2 = childJob_tRunJob_2.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));
		
            if(childJob_tRunJob_2.getErrorCode() == null){
                globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
            }
            if (childJob_tRunJob_2.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
            }
                    ((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_2.getErrorCode());
                if (childJob_tRunJob_2.getErrorCode() != null || ("failure").equals(childJob_tRunJob_2.getStatus())) {
                    java.lang.Exception ce_tRunJob_2 = childJob_tRunJob_2.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_2!=null) ? (ce_tRunJob_2.getClass().getName() + ": " + ce_tRunJob_2.getMessage()) : ""));
                }

 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_2";
	
	

 



/**
 * [tRunJob_2 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";
	
	

 



/**
 * [tRunJob_2 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";
	
	

 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tRunJob_2", end_Hash.get("tRunJob_2")-start_Hash.get("tRunJob_2"));
tStatCatcher_1Process(globalMap);



/**
 * [tRunJob_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";
	
	
	
 



/**
 * [tRunJob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}
	


public void tRunJob_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_9", false);
		start_Hash.put("tRunJob_9", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tRunJob_9");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tRunJob_9";
	
	
		int tos_count_tRunJob_9 = 0;
		


 



/**
 * [tRunJob_9 begin ] stop
 */
	
	/**
	 * [tRunJob_9 main ] start
	 */

	

	
	
	currentComponent="tRunJob_9";
	
	
	java.util.List<String> paraList_tRunJob_9 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_9.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_9.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_9.add("--father_node=tRunJob_9");
	      			
	        				paraList_tRunJob_9.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_9.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_9.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_9.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_9 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_9 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_9".equals(tRunJobName_tRunJob_9) && childResumePath_tRunJob_9 != null){
		paraList_tRunJob_9.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_9.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_9");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_9 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_9 = null;

	
		obj_tRunJob_9 = context.infoIdProceso;
		if(obj_tRunJob_9!=null) {
			if (obj_tRunJob_9.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_9.add("--context_param infoIdProceso=" + ((java.util.Date) obj_tRunJob_9).getTime());
			} else {
				
					paraList_tRunJob_9.add("--context_param infoIdProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
					
				
			}
		} else {
			paraList_tRunJob_9.add("--context_param infoIdProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_9.put("infoIdProceso", obj_tRunJob_9);
	
		obj_tRunJob_9 = context.infoUsuarioJobProcesar;
		if(obj_tRunJob_9!=null) {
			if (obj_tRunJob_9.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_9.add("--context_param infoUsuarioJobProcesar=" + ((java.util.Date) obj_tRunJob_9).getTime());
			} else {
				
					paraList_tRunJob_9.add("--context_param infoUsuarioJobProcesar=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
					
				
			}
		} else {
			paraList_tRunJob_9.add("--context_param infoUsuarioJobProcesar=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_9.put("infoUsuarioJobProcesar", obj_tRunJob_9);
	
		obj_tRunJob_9 = context.archivoSalida;
		if(obj_tRunJob_9!=null) {
			if (obj_tRunJob_9.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_9.add("--context_param archivoSalida=" + ((java.util.Date) obj_tRunJob_9).getTime());
			} else {
				
					paraList_tRunJob_9.add("--context_param archivoSalida=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
					
				
			}
		} else {
			paraList_tRunJob_9.add("--context_param archivoSalida=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_9.put("archivoSalida", obj_tRunJob_9);
	
		obj_tRunJob_9 = context.fileSystem_Path;
		if(obj_tRunJob_9!=null) {
			if (obj_tRunJob_9.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_9.add("--context_param fileSystem_Path=" + ((java.util.Date) obj_tRunJob_9).getTime());
			} else {
				
					paraList_tRunJob_9.add("--context_param fileSystem_Path=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
					
				
			}
		} else {
			paraList_tRunJob_9.add("--context_param fileSystem_Path=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_9.put("fileSystem_Path", obj_tRunJob_9);
	
		obj_tRunJob_9 = context.oracle_ServiceName;
		if(obj_tRunJob_9!=null) {
			if (obj_tRunJob_9.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_9.add("--context_param oracle_ServiceName=" + ((java.util.Date) obj_tRunJob_9).getTime());
			} else {
				
					paraList_tRunJob_9.add("--context_param oracle_ServiceName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
					
				
			}
		} else {
			paraList_tRunJob_9.add("--context_param oracle_ServiceName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_9.put("oracle_ServiceName", obj_tRunJob_9);
	
		obj_tRunJob_9 = context.oracle_AdditionalParams;
		if(obj_tRunJob_9!=null) {
			if (obj_tRunJob_9.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_9.add("--context_param oracle_AdditionalParams=" + ((java.util.Date) obj_tRunJob_9).getTime());
			} else {
				
					paraList_tRunJob_9.add("--context_param oracle_AdditionalParams=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
					
				
			}
		} else {
			paraList_tRunJob_9.add("--context_param oracle_AdditionalParams=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_9.put("oracle_AdditionalParams", obj_tRunJob_9);
	
		obj_tRunJob_9 = context.oracle_User;
		if(obj_tRunJob_9!=null) {
			if (obj_tRunJob_9.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_9.add("--context_param oracle_User=" + ((java.util.Date) obj_tRunJob_9).getTime());
			} else {
				
					paraList_tRunJob_9.add("--context_param oracle_User=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
					
				
			}
		} else {
			paraList_tRunJob_9.add("--context_param oracle_User=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_9.put("oracle_User", obj_tRunJob_9);
	
		obj_tRunJob_9 = context.oracle_Schema;
		if(obj_tRunJob_9!=null) {
			if (obj_tRunJob_9.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_9.add("--context_param oracle_Schema=" + ((java.util.Date) obj_tRunJob_9).getTime());
			} else {
				
					paraList_tRunJob_9.add("--context_param oracle_Schema=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
					
				
			}
		} else {
			paraList_tRunJob_9.add("--context_param oracle_Schema=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_9.put("oracle_Schema", obj_tRunJob_9);
	
		obj_tRunJob_9 = context.oracle_Host;
		if(obj_tRunJob_9!=null) {
			if (obj_tRunJob_9.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_9.add("--context_param oracle_Host=" + ((java.util.Date) obj_tRunJob_9).getTime());
			} else {
				
					paraList_tRunJob_9.add("--context_param oracle_Host=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
					
				
			}
		} else {
			paraList_tRunJob_9.add("--context_param oracle_Host=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_9.put("oracle_Host", obj_tRunJob_9);
	
		obj_tRunJob_9 = context.oracle_Sid;
		if(obj_tRunJob_9!=null) {
			if (obj_tRunJob_9.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_9.add("--context_param oracle_Sid=" + ((java.util.Date) obj_tRunJob_9).getTime());
			} else {
				
					paraList_tRunJob_9.add("--context_param oracle_Sid=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
					
				
			}
		} else {
			paraList_tRunJob_9.add("--context_param oracle_Sid=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_9.put("oracle_Sid", obj_tRunJob_9);
	
		obj_tRunJob_9 = context.oracle_Password;
		if(obj_tRunJob_9!=null) {
			if (obj_tRunJob_9.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_9.add("--context_param oracle_Password=" + ((java.util.Date) obj_tRunJob_9).getTime());
			} else {
				
					paraList_tRunJob_9.add("--context_param oracle_Password=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
					
				
			}
		} else {
			paraList_tRunJob_9.add("--context_param oracle_Password=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_9.put("oracle_Password", obj_tRunJob_9);
	
		obj_tRunJob_9 = context.oracle_Port;
		if(obj_tRunJob_9!=null) {
			if (obj_tRunJob_9.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_9.add("--context_param oracle_Port=" + ((java.util.Date) obj_tRunJob_9).getTime());
			} else {
				
					paraList_tRunJob_9.add("--context_param oracle_Port=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
					
				
			}
		} else {
			paraList_tRunJob_9.add("--context_param oracle_Port=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_9.put("oracle_Port", obj_tRunJob_9);
	
	
		afi_extincion.criterio_04_0_4.Criterio_04 childJob_tRunJob_9 = new afi_extincion.criterio_04_0_4.Criterio_04();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_9 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_9) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_9 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_9 : talendDataSources_tRunJob_9
			        .entrySet()) {
	            dataSources_tRunJob_9.put(talendDataSourceEntry_tRunJob_9.getKey(),
	                    talendDataSourceEntry_tRunJob_9.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_9.setDataSources(dataSources_tRunJob_9);
	    }
		  
			childJob_tRunJob_9.parentContextMap = parentContextMap_tRunJob_9;
		  
		
		String[][] childReturn_tRunJob_9 = childJob_tRunJob_9.runJob((String[]) paraList_tRunJob_9.toArray(new String[paraList_tRunJob_9.size()]));
		
            if(childJob_tRunJob_9.getErrorCode() == null){
                globalMap.put("tRunJob_9_CHILD_RETURN_CODE", childJob_tRunJob_9.getStatus() != null && ("failure").equals(childJob_tRunJob_9.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_9_CHILD_RETURN_CODE", childJob_tRunJob_9.getErrorCode());
            }
            if (childJob_tRunJob_9.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_9_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_9.getExceptionStackTrace());
            }
                    ((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_9.getErrorCode());
                if (childJob_tRunJob_9.getErrorCode() != null || ("failure").equals(childJob_tRunJob_9.getStatus())) {
                    java.lang.Exception ce_tRunJob_9 = childJob_tRunJob_9.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_9!=null) ? (ce_tRunJob_9.getClass().getName() + ": " + ce_tRunJob_9.getMessage()) : ""));
                }

 


	tos_count_tRunJob_9++;

/**
 * [tRunJob_9 main ] stop
 */
	
	/**
	 * [tRunJob_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_9";
	
	

 



/**
 * [tRunJob_9 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_9";
	
	

 



/**
 * [tRunJob_9 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_9 end ] start
	 */

	

	
	
	currentComponent="tRunJob_9";
	
	

 

ok_Hash.put("tRunJob_9", true);
end_Hash.put("tRunJob_9", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tRunJob_9", end_Hash.get("tRunJob_9")-start_Hash.get("tRunJob_9"));
tStatCatcher_1Process(globalMap);



/**
 * [tRunJob_9 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_9 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_9";
	
	
	
 



/**
 * [tRunJob_9 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_9_SUBPROCESS_STATE", 1);
	}
	


public void tRunJob_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_10", false);
		start_Hash.put("tRunJob_10", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tRunJob_10");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tRunJob_10";
	
	
		int tos_count_tRunJob_10 = 0;
		


 



/**
 * [tRunJob_10 begin ] stop
 */
	
	/**
	 * [tRunJob_10 main ] start
	 */

	

	
	
	currentComponent="tRunJob_10";
	
	
	java.util.List<String> paraList_tRunJob_10 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_10.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_10.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_10.add("--father_node=tRunJob_10");
	      			
	        				paraList_tRunJob_10.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_10.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_10.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_10.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_10 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_10 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_10".equals(tRunJobName_tRunJob_10) && childResumePath_tRunJob_10 != null){
		paraList_tRunJob_10.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_10.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_10");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_10 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_10 = null;

	
		obj_tRunJob_10 = context.infoIdProceso;
		if(obj_tRunJob_10!=null) {
			if (obj_tRunJob_10.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_10.add("--context_param infoIdProceso=" + ((java.util.Date) obj_tRunJob_10).getTime());
			} else {
				
					paraList_tRunJob_10.add("--context_param infoIdProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
					
				
			}
		} else {
			paraList_tRunJob_10.add("--context_param infoIdProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_10.put("infoIdProceso", obj_tRunJob_10);
	
		obj_tRunJob_10 = context.infoUsuarioJobProcesar;
		if(obj_tRunJob_10!=null) {
			if (obj_tRunJob_10.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_10.add("--context_param infoUsuarioJobProcesar=" + ((java.util.Date) obj_tRunJob_10).getTime());
			} else {
				
					paraList_tRunJob_10.add("--context_param infoUsuarioJobProcesar=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
					
				
			}
		} else {
			paraList_tRunJob_10.add("--context_param infoUsuarioJobProcesar=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_10.put("infoUsuarioJobProcesar", obj_tRunJob_10);
	
		obj_tRunJob_10 = context.archivoSalida;
		if(obj_tRunJob_10!=null) {
			if (obj_tRunJob_10.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_10.add("--context_param archivoSalida=" + ((java.util.Date) obj_tRunJob_10).getTime());
			} else {
				
					paraList_tRunJob_10.add("--context_param archivoSalida=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
					
				
			}
		} else {
			paraList_tRunJob_10.add("--context_param archivoSalida=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_10.put("archivoSalida", obj_tRunJob_10);
	
		obj_tRunJob_10 = context.fileSystem_Path;
		if(obj_tRunJob_10!=null) {
			if (obj_tRunJob_10.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_10.add("--context_param fileSystem_Path=" + ((java.util.Date) obj_tRunJob_10).getTime());
			} else {
				
					paraList_tRunJob_10.add("--context_param fileSystem_Path=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
					
				
			}
		} else {
			paraList_tRunJob_10.add("--context_param fileSystem_Path=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_10.put("fileSystem_Path", obj_tRunJob_10);
	
		obj_tRunJob_10 = context.oracle_ServiceName;
		if(obj_tRunJob_10!=null) {
			if (obj_tRunJob_10.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_10.add("--context_param oracle_ServiceName=" + ((java.util.Date) obj_tRunJob_10).getTime());
			} else {
				
					paraList_tRunJob_10.add("--context_param oracle_ServiceName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
					
				
			}
		} else {
			paraList_tRunJob_10.add("--context_param oracle_ServiceName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_10.put("oracle_ServiceName", obj_tRunJob_10);
	
		obj_tRunJob_10 = context.oracle_AdditionalParams;
		if(obj_tRunJob_10!=null) {
			if (obj_tRunJob_10.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_10.add("--context_param oracle_AdditionalParams=" + ((java.util.Date) obj_tRunJob_10).getTime());
			} else {
				
					paraList_tRunJob_10.add("--context_param oracle_AdditionalParams=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
					
				
			}
		} else {
			paraList_tRunJob_10.add("--context_param oracle_AdditionalParams=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_10.put("oracle_AdditionalParams", obj_tRunJob_10);
	
		obj_tRunJob_10 = context.oracle_User;
		if(obj_tRunJob_10!=null) {
			if (obj_tRunJob_10.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_10.add("--context_param oracle_User=" + ((java.util.Date) obj_tRunJob_10).getTime());
			} else {
				
					paraList_tRunJob_10.add("--context_param oracle_User=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
					
				
			}
		} else {
			paraList_tRunJob_10.add("--context_param oracle_User=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_10.put("oracle_User", obj_tRunJob_10);
	
		obj_tRunJob_10 = context.oracle_Schema;
		if(obj_tRunJob_10!=null) {
			if (obj_tRunJob_10.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_10.add("--context_param oracle_Schema=" + ((java.util.Date) obj_tRunJob_10).getTime());
			} else {
				
					paraList_tRunJob_10.add("--context_param oracle_Schema=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
					
				
			}
		} else {
			paraList_tRunJob_10.add("--context_param oracle_Schema=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_10.put("oracle_Schema", obj_tRunJob_10);
	
		obj_tRunJob_10 = context.oracle_Host;
		if(obj_tRunJob_10!=null) {
			if (obj_tRunJob_10.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_10.add("--context_param oracle_Host=" + ((java.util.Date) obj_tRunJob_10).getTime());
			} else {
				
					paraList_tRunJob_10.add("--context_param oracle_Host=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
					
				
			}
		} else {
			paraList_tRunJob_10.add("--context_param oracle_Host=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_10.put("oracle_Host", obj_tRunJob_10);
	
		obj_tRunJob_10 = context.oracle_Sid;
		if(obj_tRunJob_10!=null) {
			if (obj_tRunJob_10.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_10.add("--context_param oracle_Sid=" + ((java.util.Date) obj_tRunJob_10).getTime());
			} else {
				
					paraList_tRunJob_10.add("--context_param oracle_Sid=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
					
				
			}
		} else {
			paraList_tRunJob_10.add("--context_param oracle_Sid=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_10.put("oracle_Sid", obj_tRunJob_10);
	
		obj_tRunJob_10 = context.oracle_Password;
		if(obj_tRunJob_10!=null) {
			if (obj_tRunJob_10.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_10.add("--context_param oracle_Password=" + ((java.util.Date) obj_tRunJob_10).getTime());
			} else {
				
					paraList_tRunJob_10.add("--context_param oracle_Password=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
					
				
			}
		} else {
			paraList_tRunJob_10.add("--context_param oracle_Password=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_10.put("oracle_Password", obj_tRunJob_10);
	
		obj_tRunJob_10 = context.oracle_Port;
		if(obj_tRunJob_10!=null) {
			if (obj_tRunJob_10.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_10.add("--context_param oracle_Port=" + ((java.util.Date) obj_tRunJob_10).getTime());
			} else {
				
					paraList_tRunJob_10.add("--context_param oracle_Port=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
					
				
			}
		} else {
			paraList_tRunJob_10.add("--context_param oracle_Port=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_10.put("oracle_Port", obj_tRunJob_10);
	
	
		afi_extincion.criterio_05_0_2.Criterio_05 childJob_tRunJob_10 = new afi_extincion.criterio_05_0_2.Criterio_05();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_10 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_10) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_10 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_10 : talendDataSources_tRunJob_10
			        .entrySet()) {
	            dataSources_tRunJob_10.put(talendDataSourceEntry_tRunJob_10.getKey(),
	                    talendDataSourceEntry_tRunJob_10.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_10.setDataSources(dataSources_tRunJob_10);
	    }
		  
			childJob_tRunJob_10.parentContextMap = parentContextMap_tRunJob_10;
		  
		
		String[][] childReturn_tRunJob_10 = childJob_tRunJob_10.runJob((String[]) paraList_tRunJob_10.toArray(new String[paraList_tRunJob_10.size()]));
		
            if(childJob_tRunJob_10.getErrorCode() == null){
                globalMap.put("tRunJob_10_CHILD_RETURN_CODE", childJob_tRunJob_10.getStatus() != null && ("failure").equals(childJob_tRunJob_10.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_10_CHILD_RETURN_CODE", childJob_tRunJob_10.getErrorCode());
            }
            if (childJob_tRunJob_10.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_10_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_10.getExceptionStackTrace());
            }
                    ((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_10.getErrorCode());
                if (childJob_tRunJob_10.getErrorCode() != null || ("failure").equals(childJob_tRunJob_10.getStatus())) {
                    java.lang.Exception ce_tRunJob_10 = childJob_tRunJob_10.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_10!=null) ? (ce_tRunJob_10.getClass().getName() + ": " + ce_tRunJob_10.getMessage()) : ""));
                }

 


	tos_count_tRunJob_10++;

/**
 * [tRunJob_10 main ] stop
 */
	
	/**
	 * [tRunJob_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_10";
	
	

 



/**
 * [tRunJob_10 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_10";
	
	

 



/**
 * [tRunJob_10 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_10 end ] start
	 */

	

	
	
	currentComponent="tRunJob_10";
	
	

 

ok_Hash.put("tRunJob_10", true);
end_Hash.put("tRunJob_10", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tRunJob_10", end_Hash.get("tRunJob_10")-start_Hash.get("tRunJob_10"));
tStatCatcher_1Process(globalMap);



/**
 * [tRunJob_10 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_10 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_10";
	
	
	
 



/**
 * [tRunJob_10 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_10_SUBPROCESS_STATE", 1);
	}
	


public void tRunJob_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_13", false);
		start_Hash.put("tRunJob_13", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tRunJob_13");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tRunJob_13";
	
	
		int tos_count_tRunJob_13 = 0;
		


 



/**
 * [tRunJob_13 begin ] stop
 */
	
	/**
	 * [tRunJob_13 main ] start
	 */

	

	
	
	currentComponent="tRunJob_13";
	
	
	java.util.List<String> paraList_tRunJob_13 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_13.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_13.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_13.add("--father_node=tRunJob_13");
	      			
	        				paraList_tRunJob_13.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_13.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_13.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_13.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_13 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_13 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_13".equals(tRunJobName_tRunJob_13) && childResumePath_tRunJob_13 != null){
		paraList_tRunJob_13.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_13.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_13");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_13 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_13 = null;

	
		obj_tRunJob_13 = context.infoIdProceso;
		if(obj_tRunJob_13!=null) {
			if (obj_tRunJob_13.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_13.add("--context_param infoIdProceso=" + ((java.util.Date) obj_tRunJob_13).getTime());
			} else {
				
					paraList_tRunJob_13.add("--context_param infoIdProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_13));
					
				
			}
		} else {
			paraList_tRunJob_13.add("--context_param infoIdProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_13.put("infoIdProceso", obj_tRunJob_13);
	
		obj_tRunJob_13 = context.infoUsuarioJobProcesar;
		if(obj_tRunJob_13!=null) {
			if (obj_tRunJob_13.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_13.add("--context_param infoUsuarioJobProcesar=" + ((java.util.Date) obj_tRunJob_13).getTime());
			} else {
				
					paraList_tRunJob_13.add("--context_param infoUsuarioJobProcesar=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_13));
					
				
			}
		} else {
			paraList_tRunJob_13.add("--context_param infoUsuarioJobProcesar=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_13.put("infoUsuarioJobProcesar", obj_tRunJob_13);
	
		obj_tRunJob_13 = context.archivoSalida;
		if(obj_tRunJob_13!=null) {
			if (obj_tRunJob_13.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_13.add("--context_param archivoSalida=" + ((java.util.Date) obj_tRunJob_13).getTime());
			} else {
				
					paraList_tRunJob_13.add("--context_param archivoSalida=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_13));
					
				
			}
		} else {
			paraList_tRunJob_13.add("--context_param archivoSalida=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_13.put("archivoSalida", obj_tRunJob_13);
	
		obj_tRunJob_13 = context.fileSystem_Path;
		if(obj_tRunJob_13!=null) {
			if (obj_tRunJob_13.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_13.add("--context_param fileSystem_Path=" + ((java.util.Date) obj_tRunJob_13).getTime());
			} else {
				
					paraList_tRunJob_13.add("--context_param fileSystem_Path=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_13));
					
				
			}
		} else {
			paraList_tRunJob_13.add("--context_param fileSystem_Path=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_13.put("fileSystem_Path", obj_tRunJob_13);
	
		obj_tRunJob_13 = context.oracle_ServiceName;
		if(obj_tRunJob_13!=null) {
			if (obj_tRunJob_13.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_13.add("--context_param oracle_ServiceName=" + ((java.util.Date) obj_tRunJob_13).getTime());
			} else {
				
					paraList_tRunJob_13.add("--context_param oracle_ServiceName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_13));
					
				
			}
		} else {
			paraList_tRunJob_13.add("--context_param oracle_ServiceName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_13.put("oracle_ServiceName", obj_tRunJob_13);
	
		obj_tRunJob_13 = context.oracle_AdditionalParams;
		if(obj_tRunJob_13!=null) {
			if (obj_tRunJob_13.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_13.add("--context_param oracle_AdditionalParams=" + ((java.util.Date) obj_tRunJob_13).getTime());
			} else {
				
					paraList_tRunJob_13.add("--context_param oracle_AdditionalParams=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_13));
					
				
			}
		} else {
			paraList_tRunJob_13.add("--context_param oracle_AdditionalParams=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_13.put("oracle_AdditionalParams", obj_tRunJob_13);
	
		obj_tRunJob_13 = context.oracle_User;
		if(obj_tRunJob_13!=null) {
			if (obj_tRunJob_13.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_13.add("--context_param oracle_User=" + ((java.util.Date) obj_tRunJob_13).getTime());
			} else {
				
					paraList_tRunJob_13.add("--context_param oracle_User=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_13));
					
				
			}
		} else {
			paraList_tRunJob_13.add("--context_param oracle_User=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_13.put("oracle_User", obj_tRunJob_13);
	
		obj_tRunJob_13 = context.oracle_Schema;
		if(obj_tRunJob_13!=null) {
			if (obj_tRunJob_13.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_13.add("--context_param oracle_Schema=" + ((java.util.Date) obj_tRunJob_13).getTime());
			} else {
				
					paraList_tRunJob_13.add("--context_param oracle_Schema=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_13));
					
				
			}
		} else {
			paraList_tRunJob_13.add("--context_param oracle_Schema=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_13.put("oracle_Schema", obj_tRunJob_13);
	
		obj_tRunJob_13 = context.oracle_Host;
		if(obj_tRunJob_13!=null) {
			if (obj_tRunJob_13.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_13.add("--context_param oracle_Host=" + ((java.util.Date) obj_tRunJob_13).getTime());
			} else {
				
					paraList_tRunJob_13.add("--context_param oracle_Host=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_13));
					
				
			}
		} else {
			paraList_tRunJob_13.add("--context_param oracle_Host=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_13.put("oracle_Host", obj_tRunJob_13);
	
		obj_tRunJob_13 = context.oracle_Sid;
		if(obj_tRunJob_13!=null) {
			if (obj_tRunJob_13.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_13.add("--context_param oracle_Sid=" + ((java.util.Date) obj_tRunJob_13).getTime());
			} else {
				
					paraList_tRunJob_13.add("--context_param oracle_Sid=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_13));
					
				
			}
		} else {
			paraList_tRunJob_13.add("--context_param oracle_Sid=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_13.put("oracle_Sid", obj_tRunJob_13);
	
		obj_tRunJob_13 = context.oracle_Password;
		if(obj_tRunJob_13!=null) {
			if (obj_tRunJob_13.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_13.add("--context_param oracle_Password=" + ((java.util.Date) obj_tRunJob_13).getTime());
			} else {
				
					paraList_tRunJob_13.add("--context_param oracle_Password=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_13));
					
				
			}
		} else {
			paraList_tRunJob_13.add("--context_param oracle_Password=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_13.put("oracle_Password", obj_tRunJob_13);
	
		obj_tRunJob_13 = context.oracle_Port;
		if(obj_tRunJob_13!=null) {
			if (obj_tRunJob_13.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_13.add("--context_param oracle_Port=" + ((java.util.Date) obj_tRunJob_13).getTime());
			} else {
				
					paraList_tRunJob_13.add("--context_param oracle_Port=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_13));
					
				
			}
		} else {
			paraList_tRunJob_13.add("--context_param oracle_Port=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_13.put("oracle_Port", obj_tRunJob_13);
	
	
		afi_extincion.criterio_06_0_3.Criterio_06 childJob_tRunJob_13 = new afi_extincion.criterio_06_0_3.Criterio_06();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_13 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_13) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_13 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_13 : talendDataSources_tRunJob_13
			        .entrySet()) {
	            dataSources_tRunJob_13.put(talendDataSourceEntry_tRunJob_13.getKey(),
	                    talendDataSourceEntry_tRunJob_13.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_13.setDataSources(dataSources_tRunJob_13);
	    }
		  
			childJob_tRunJob_13.parentContextMap = parentContextMap_tRunJob_13;
		  
		
		String[][] childReturn_tRunJob_13 = childJob_tRunJob_13.runJob((String[]) paraList_tRunJob_13.toArray(new String[paraList_tRunJob_13.size()]));
		
            if(childJob_tRunJob_13.getErrorCode() == null){
                globalMap.put("tRunJob_13_CHILD_RETURN_CODE", childJob_tRunJob_13.getStatus() != null && ("failure").equals(childJob_tRunJob_13.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_13_CHILD_RETURN_CODE", childJob_tRunJob_13.getErrorCode());
            }
            if (childJob_tRunJob_13.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_13_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_13.getExceptionStackTrace());
            }
                    ((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_13.getErrorCode());
                if (childJob_tRunJob_13.getErrorCode() != null || ("failure").equals(childJob_tRunJob_13.getStatus())) {
                    java.lang.Exception ce_tRunJob_13 = childJob_tRunJob_13.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_13!=null) ? (ce_tRunJob_13.getClass().getName() + ": " + ce_tRunJob_13.getMessage()) : ""));
                }

 


	tos_count_tRunJob_13++;

/**
 * [tRunJob_13 main ] stop
 */
	
	/**
	 * [tRunJob_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_13";
	
	

 



/**
 * [tRunJob_13 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_13";
	
	

 



/**
 * [tRunJob_13 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_13 end ] start
	 */

	

	
	
	currentComponent="tRunJob_13";
	
	

 

ok_Hash.put("tRunJob_13", true);
end_Hash.put("tRunJob_13", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tRunJob_13", end_Hash.get("tRunJob_13")-start_Hash.get("tRunJob_13"));
tStatCatcher_1Process(globalMap);



/**
 * [tRunJob_13 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_13 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_13";
	
	
	
 



/**
 * [tRunJob_13 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_13_SUBPROCESS_STATE", 1);
	}
	


public void tRunJob_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_12", false);
		start_Hash.put("tRunJob_12", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tRunJob_12");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tRunJob_12";
	
	
		int tos_count_tRunJob_12 = 0;
		


 



/**
 * [tRunJob_12 begin ] stop
 */
	
	/**
	 * [tRunJob_12 main ] start
	 */

	

	
	
	currentComponent="tRunJob_12";
	
	
	java.util.List<String> paraList_tRunJob_12 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_12.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_12.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_12.add("--father_node=tRunJob_12");
	      			
	        				paraList_tRunJob_12.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_12.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_12.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_12.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_12 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_12 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_12".equals(tRunJobName_tRunJob_12) && childResumePath_tRunJob_12 != null){
		paraList_tRunJob_12.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_12.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_12");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_12 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_12 = null;

	
		obj_tRunJob_12 = context.infoIdProceso;
		if(obj_tRunJob_12!=null) {
			if (obj_tRunJob_12.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_12.add("--context_param infoIdProceso=" + ((java.util.Date) obj_tRunJob_12).getTime());
			} else {
				
					paraList_tRunJob_12.add("--context_param infoIdProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
					
				
			}
		} else {
			paraList_tRunJob_12.add("--context_param infoIdProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_12.put("infoIdProceso", obj_tRunJob_12);
	
		obj_tRunJob_12 = context.infoUsuarioJobProcesar;
		if(obj_tRunJob_12!=null) {
			if (obj_tRunJob_12.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_12.add("--context_param infoUsuarioJobProcesar=" + ((java.util.Date) obj_tRunJob_12).getTime());
			} else {
				
					paraList_tRunJob_12.add("--context_param infoUsuarioJobProcesar=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
					
				
			}
		} else {
			paraList_tRunJob_12.add("--context_param infoUsuarioJobProcesar=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_12.put("infoUsuarioJobProcesar", obj_tRunJob_12);
	
		obj_tRunJob_12 = context.archivoSalida;
		if(obj_tRunJob_12!=null) {
			if (obj_tRunJob_12.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_12.add("--context_param archivoSalida=" + ((java.util.Date) obj_tRunJob_12).getTime());
			} else {
				
					paraList_tRunJob_12.add("--context_param archivoSalida=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
					
				
			}
		} else {
			paraList_tRunJob_12.add("--context_param archivoSalida=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_12.put("archivoSalida", obj_tRunJob_12);
	
		obj_tRunJob_12 = context.fileSystem_Path;
		if(obj_tRunJob_12!=null) {
			if (obj_tRunJob_12.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_12.add("--context_param fileSystem_Path=" + ((java.util.Date) obj_tRunJob_12).getTime());
			} else {
				
					paraList_tRunJob_12.add("--context_param fileSystem_Path=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
					
				
			}
		} else {
			paraList_tRunJob_12.add("--context_param fileSystem_Path=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_12.put("fileSystem_Path", obj_tRunJob_12);
	
		obj_tRunJob_12 = context.oracle_ServiceName;
		if(obj_tRunJob_12!=null) {
			if (obj_tRunJob_12.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_12.add("--context_param oracle_ServiceName=" + ((java.util.Date) obj_tRunJob_12).getTime());
			} else {
				
					paraList_tRunJob_12.add("--context_param oracle_ServiceName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
					
				
			}
		} else {
			paraList_tRunJob_12.add("--context_param oracle_ServiceName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_12.put("oracle_ServiceName", obj_tRunJob_12);
	
		obj_tRunJob_12 = context.oracle_AdditionalParams;
		if(obj_tRunJob_12!=null) {
			if (obj_tRunJob_12.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_12.add("--context_param oracle_AdditionalParams=" + ((java.util.Date) obj_tRunJob_12).getTime());
			} else {
				
					paraList_tRunJob_12.add("--context_param oracle_AdditionalParams=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
					
				
			}
		} else {
			paraList_tRunJob_12.add("--context_param oracle_AdditionalParams=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_12.put("oracle_AdditionalParams", obj_tRunJob_12);
	
		obj_tRunJob_12 = context.oracle_User;
		if(obj_tRunJob_12!=null) {
			if (obj_tRunJob_12.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_12.add("--context_param oracle_User=" + ((java.util.Date) obj_tRunJob_12).getTime());
			} else {
				
					paraList_tRunJob_12.add("--context_param oracle_User=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
					
				
			}
		} else {
			paraList_tRunJob_12.add("--context_param oracle_User=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_12.put("oracle_User", obj_tRunJob_12);
	
		obj_tRunJob_12 = context.oracle_Schema;
		if(obj_tRunJob_12!=null) {
			if (obj_tRunJob_12.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_12.add("--context_param oracle_Schema=" + ((java.util.Date) obj_tRunJob_12).getTime());
			} else {
				
					paraList_tRunJob_12.add("--context_param oracle_Schema=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
					
				
			}
		} else {
			paraList_tRunJob_12.add("--context_param oracle_Schema=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_12.put("oracle_Schema", obj_tRunJob_12);
	
		obj_tRunJob_12 = context.oracle_Host;
		if(obj_tRunJob_12!=null) {
			if (obj_tRunJob_12.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_12.add("--context_param oracle_Host=" + ((java.util.Date) obj_tRunJob_12).getTime());
			} else {
				
					paraList_tRunJob_12.add("--context_param oracle_Host=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
					
				
			}
		} else {
			paraList_tRunJob_12.add("--context_param oracle_Host=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_12.put("oracle_Host", obj_tRunJob_12);
	
		obj_tRunJob_12 = context.oracle_Sid;
		if(obj_tRunJob_12!=null) {
			if (obj_tRunJob_12.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_12.add("--context_param oracle_Sid=" + ((java.util.Date) obj_tRunJob_12).getTime());
			} else {
				
					paraList_tRunJob_12.add("--context_param oracle_Sid=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
					
				
			}
		} else {
			paraList_tRunJob_12.add("--context_param oracle_Sid=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_12.put("oracle_Sid", obj_tRunJob_12);
	
		obj_tRunJob_12 = context.oracle_Password;
		if(obj_tRunJob_12!=null) {
			if (obj_tRunJob_12.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_12.add("--context_param oracle_Password=" + ((java.util.Date) obj_tRunJob_12).getTime());
			} else {
				
					paraList_tRunJob_12.add("--context_param oracle_Password=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
					
				
			}
		} else {
			paraList_tRunJob_12.add("--context_param oracle_Password=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_12.put("oracle_Password", obj_tRunJob_12);
	
		obj_tRunJob_12 = context.oracle_Port;
		if(obj_tRunJob_12!=null) {
			if (obj_tRunJob_12.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_12.add("--context_param oracle_Port=" + ((java.util.Date) obj_tRunJob_12).getTime());
			} else {
				
					paraList_tRunJob_12.add("--context_param oracle_Port=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
					
				
			}
		} else {
			paraList_tRunJob_12.add("--context_param oracle_Port=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_12.put("oracle_Port", obj_tRunJob_12);
	
	
		afi_extincion.criterio_07_0_3.Criterio_07 childJob_tRunJob_12 = new afi_extincion.criterio_07_0_3.Criterio_07();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_12 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_12) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_12 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_12 : talendDataSources_tRunJob_12
			        .entrySet()) {
	            dataSources_tRunJob_12.put(talendDataSourceEntry_tRunJob_12.getKey(),
	                    talendDataSourceEntry_tRunJob_12.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_12.setDataSources(dataSources_tRunJob_12);
	    }
		  
			childJob_tRunJob_12.parentContextMap = parentContextMap_tRunJob_12;
		  
		
		String[][] childReturn_tRunJob_12 = childJob_tRunJob_12.runJob((String[]) paraList_tRunJob_12.toArray(new String[paraList_tRunJob_12.size()]));
		
            if(childJob_tRunJob_12.getErrorCode() == null){
                globalMap.put("tRunJob_12_CHILD_RETURN_CODE", childJob_tRunJob_12.getStatus() != null && ("failure").equals(childJob_tRunJob_12.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_12_CHILD_RETURN_CODE", childJob_tRunJob_12.getErrorCode());
            }
            if (childJob_tRunJob_12.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_12_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_12.getExceptionStackTrace());
            }
                    ((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_12.getErrorCode());
                if (childJob_tRunJob_12.getErrorCode() != null || ("failure").equals(childJob_tRunJob_12.getStatus())) {
                    java.lang.Exception ce_tRunJob_12 = childJob_tRunJob_12.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_12!=null) ? (ce_tRunJob_12.getClass().getName() + ": " + ce_tRunJob_12.getMessage()) : ""));
                }

 


	tos_count_tRunJob_12++;

/**
 * [tRunJob_12 main ] stop
 */
	
	/**
	 * [tRunJob_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_12";
	
	

 



/**
 * [tRunJob_12 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_12";
	
	

 



/**
 * [tRunJob_12 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_12 end ] start
	 */

	

	
	
	currentComponent="tRunJob_12";
	
	

 

ok_Hash.put("tRunJob_12", true);
end_Hash.put("tRunJob_12", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tRunJob_12", end_Hash.get("tRunJob_12")-start_Hash.get("tRunJob_12"));
tStatCatcher_1Process(globalMap);



/**
 * [tRunJob_12 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_12 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_12";
	
	
	
 



/**
 * [tRunJob_12 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_12_SUBPROCESS_STATE", 1);
	}
	


public void tRunJob_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_6", false);
		start_Hash.put("tRunJob_6", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tRunJob_6");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tRunJob_6";
	
	
		int tos_count_tRunJob_6 = 0;
		


 



/**
 * [tRunJob_6 begin ] stop
 */
	
	/**
	 * [tRunJob_6 main ] start
	 */

	

	
	
	currentComponent="tRunJob_6";
	
	
	java.util.List<String> paraList_tRunJob_6 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_6.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_6.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_6.add("--father_node=tRunJob_6");
	      			
	        				paraList_tRunJob_6.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_6.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_6.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_6.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_6 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_6 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_6".equals(tRunJobName_tRunJob_6) && childResumePath_tRunJob_6 != null){
		paraList_tRunJob_6.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_6.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_6");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_6 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_6 = null;

	
		obj_tRunJob_6 = context.infoIdProceso;
		if(obj_tRunJob_6!=null) {
			if (obj_tRunJob_6.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_6.add("--context_param infoIdProceso=" + ((java.util.Date) obj_tRunJob_6).getTime());
			} else {
				
					paraList_tRunJob_6.add("--context_param infoIdProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
					
				
			}
		} else {
			paraList_tRunJob_6.add("--context_param infoIdProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_6.put("infoIdProceso", obj_tRunJob_6);
	
		obj_tRunJob_6 = context.infoUsuarioJobProcesar;
		if(obj_tRunJob_6!=null) {
			if (obj_tRunJob_6.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_6.add("--context_param infoUsuarioJobProcesar=" + ((java.util.Date) obj_tRunJob_6).getTime());
			} else {
				
					paraList_tRunJob_6.add("--context_param infoUsuarioJobProcesar=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
					
				
			}
		} else {
			paraList_tRunJob_6.add("--context_param infoUsuarioJobProcesar=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_6.put("infoUsuarioJobProcesar", obj_tRunJob_6);
	
		obj_tRunJob_6 = context.archivoSalida;
		if(obj_tRunJob_6!=null) {
			if (obj_tRunJob_6.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_6.add("--context_param archivoSalida=" + ((java.util.Date) obj_tRunJob_6).getTime());
			} else {
				
					paraList_tRunJob_6.add("--context_param archivoSalida=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
					
				
			}
		} else {
			paraList_tRunJob_6.add("--context_param archivoSalida=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_6.put("archivoSalida", obj_tRunJob_6);
	
		obj_tRunJob_6 = context.fileSystem_Path;
		if(obj_tRunJob_6!=null) {
			if (obj_tRunJob_6.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_6.add("--context_param fileSystem_Path=" + ((java.util.Date) obj_tRunJob_6).getTime());
			} else {
				
					paraList_tRunJob_6.add("--context_param fileSystem_Path=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
					
				
			}
		} else {
			paraList_tRunJob_6.add("--context_param fileSystem_Path=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_6.put("fileSystem_Path", obj_tRunJob_6);
	
		obj_tRunJob_6 = context.oracle_ServiceName;
		if(obj_tRunJob_6!=null) {
			if (obj_tRunJob_6.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_6.add("--context_param oracle_ServiceName=" + ((java.util.Date) obj_tRunJob_6).getTime());
			} else {
				
					paraList_tRunJob_6.add("--context_param oracle_ServiceName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
					
				
			}
		} else {
			paraList_tRunJob_6.add("--context_param oracle_ServiceName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_6.put("oracle_ServiceName", obj_tRunJob_6);
	
		obj_tRunJob_6 = context.oracle_AdditionalParams;
		if(obj_tRunJob_6!=null) {
			if (obj_tRunJob_6.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_6.add("--context_param oracle_AdditionalParams=" + ((java.util.Date) obj_tRunJob_6).getTime());
			} else {
				
					paraList_tRunJob_6.add("--context_param oracle_AdditionalParams=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
					
				
			}
		} else {
			paraList_tRunJob_6.add("--context_param oracle_AdditionalParams=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_6.put("oracle_AdditionalParams", obj_tRunJob_6);
	
		obj_tRunJob_6 = context.oracle_User;
		if(obj_tRunJob_6!=null) {
			if (obj_tRunJob_6.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_6.add("--context_param oracle_User=" + ((java.util.Date) obj_tRunJob_6).getTime());
			} else {
				
					paraList_tRunJob_6.add("--context_param oracle_User=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
					
				
			}
		} else {
			paraList_tRunJob_6.add("--context_param oracle_User=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_6.put("oracle_User", obj_tRunJob_6);
	
		obj_tRunJob_6 = context.oracle_Schema;
		if(obj_tRunJob_6!=null) {
			if (obj_tRunJob_6.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_6.add("--context_param oracle_Schema=" + ((java.util.Date) obj_tRunJob_6).getTime());
			} else {
				
					paraList_tRunJob_6.add("--context_param oracle_Schema=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
					
				
			}
		} else {
			paraList_tRunJob_6.add("--context_param oracle_Schema=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_6.put("oracle_Schema", obj_tRunJob_6);
	
		obj_tRunJob_6 = context.oracle_Host;
		if(obj_tRunJob_6!=null) {
			if (obj_tRunJob_6.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_6.add("--context_param oracle_Host=" + ((java.util.Date) obj_tRunJob_6).getTime());
			} else {
				
					paraList_tRunJob_6.add("--context_param oracle_Host=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
					
				
			}
		} else {
			paraList_tRunJob_6.add("--context_param oracle_Host=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_6.put("oracle_Host", obj_tRunJob_6);
	
		obj_tRunJob_6 = context.oracle_Sid;
		if(obj_tRunJob_6!=null) {
			if (obj_tRunJob_6.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_6.add("--context_param oracle_Sid=" + ((java.util.Date) obj_tRunJob_6).getTime());
			} else {
				
					paraList_tRunJob_6.add("--context_param oracle_Sid=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
					
				
			}
		} else {
			paraList_tRunJob_6.add("--context_param oracle_Sid=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_6.put("oracle_Sid", obj_tRunJob_6);
	
		obj_tRunJob_6 = context.oracle_Password;
		if(obj_tRunJob_6!=null) {
			if (obj_tRunJob_6.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_6.add("--context_param oracle_Password=" + ((java.util.Date) obj_tRunJob_6).getTime());
			} else {
				
					paraList_tRunJob_6.add("--context_param oracle_Password=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
					
				
			}
		} else {
			paraList_tRunJob_6.add("--context_param oracle_Password=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_6.put("oracle_Password", obj_tRunJob_6);
	
		obj_tRunJob_6 = context.oracle_Port;
		if(obj_tRunJob_6!=null) {
			if (obj_tRunJob_6.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_6.add("--context_param oracle_Port=" + ((java.util.Date) obj_tRunJob_6).getTime());
			} else {
				
					paraList_tRunJob_6.add("--context_param oracle_Port=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
					
				
			}
		} else {
			paraList_tRunJob_6.add("--context_param oracle_Port=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_6.put("oracle_Port", obj_tRunJob_6);
	
	
		afi_extincion.criterio_08_0_3.Criterio_08 childJob_tRunJob_6 = new afi_extincion.criterio_08_0_3.Criterio_08();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_6 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_6) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_6 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_6 : talendDataSources_tRunJob_6
			        .entrySet()) {
	            dataSources_tRunJob_6.put(talendDataSourceEntry_tRunJob_6.getKey(),
	                    talendDataSourceEntry_tRunJob_6.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_6.setDataSources(dataSources_tRunJob_6);
	    }
		  
			childJob_tRunJob_6.parentContextMap = parentContextMap_tRunJob_6;
		  
		
		String[][] childReturn_tRunJob_6 = childJob_tRunJob_6.runJob((String[]) paraList_tRunJob_6.toArray(new String[paraList_tRunJob_6.size()]));
		
            if(childJob_tRunJob_6.getErrorCode() == null){
                globalMap.put("tRunJob_6_CHILD_RETURN_CODE", childJob_tRunJob_6.getStatus() != null && ("failure").equals(childJob_tRunJob_6.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_6_CHILD_RETURN_CODE", childJob_tRunJob_6.getErrorCode());
            }
            if (childJob_tRunJob_6.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_6_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_6.getExceptionStackTrace());
            }
                    ((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_6.getErrorCode());
                if (childJob_tRunJob_6.getErrorCode() != null || ("failure").equals(childJob_tRunJob_6.getStatus())) {
                    java.lang.Exception ce_tRunJob_6 = childJob_tRunJob_6.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_6!=null) ? (ce_tRunJob_6.getClass().getName() + ": " + ce_tRunJob_6.getMessage()) : ""));
                }

 


	tos_count_tRunJob_6++;

/**
 * [tRunJob_6 main ] stop
 */
	
	/**
	 * [tRunJob_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_6";
	
	

 



/**
 * [tRunJob_6 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_6";
	
	

 



/**
 * [tRunJob_6 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_6 end ] start
	 */

	

	
	
	currentComponent="tRunJob_6";
	
	

 

ok_Hash.put("tRunJob_6", true);
end_Hash.put("tRunJob_6", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tRunJob_6", end_Hash.get("tRunJob_6")-start_Hash.get("tRunJob_6"));
tStatCatcher_1Process(globalMap);



/**
 * [tRunJob_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_6 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_6";
	
	
	
 



/**
 * [tRunJob_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_6_SUBPROCESS_STATE", 1);
	}
	


public void tRunJob_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_14", false);
		start_Hash.put("tRunJob_14", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tRunJob_14");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tRunJob_14";
	
	
		int tos_count_tRunJob_14 = 0;
		


 



/**
 * [tRunJob_14 begin ] stop
 */
	
	/**
	 * [tRunJob_14 main ] start
	 */

	

	
	
	currentComponent="tRunJob_14";
	
	
	java.util.List<String> paraList_tRunJob_14 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_14.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_14.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_14.add("--father_node=tRunJob_14");
	      			
	        				paraList_tRunJob_14.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_14.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_14.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_14.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_14 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_14 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_14".equals(tRunJobName_tRunJob_14) && childResumePath_tRunJob_14 != null){
		paraList_tRunJob_14.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_14.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_14");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_14 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_14 = null;

	
		obj_tRunJob_14 = context.infoIdProceso;
		if(obj_tRunJob_14!=null) {
			if (obj_tRunJob_14.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_14.add("--context_param infoIdProceso=" + ((java.util.Date) obj_tRunJob_14).getTime());
			} else {
				
					paraList_tRunJob_14.add("--context_param infoIdProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_14));
					
				
			}
		} else {
			paraList_tRunJob_14.add("--context_param infoIdProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_14.put("infoIdProceso", obj_tRunJob_14);
	
		obj_tRunJob_14 = context.infoUsuarioJobProcesar;
		if(obj_tRunJob_14!=null) {
			if (obj_tRunJob_14.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_14.add("--context_param infoUsuarioJobProcesar=" + ((java.util.Date) obj_tRunJob_14).getTime());
			} else {
				
					paraList_tRunJob_14.add("--context_param infoUsuarioJobProcesar=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_14));
					
				
			}
		} else {
			paraList_tRunJob_14.add("--context_param infoUsuarioJobProcesar=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_14.put("infoUsuarioJobProcesar", obj_tRunJob_14);
	
		obj_tRunJob_14 = context.archivoSalida;
		if(obj_tRunJob_14!=null) {
			if (obj_tRunJob_14.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_14.add("--context_param archivoSalida=" + ((java.util.Date) obj_tRunJob_14).getTime());
			} else {
				
					paraList_tRunJob_14.add("--context_param archivoSalida=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_14));
					
				
			}
		} else {
			paraList_tRunJob_14.add("--context_param archivoSalida=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_14.put("archivoSalida", obj_tRunJob_14);
	
		obj_tRunJob_14 = context.fileSystem_Path;
		if(obj_tRunJob_14!=null) {
			if (obj_tRunJob_14.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_14.add("--context_param fileSystem_Path=" + ((java.util.Date) obj_tRunJob_14).getTime());
			} else {
				
					paraList_tRunJob_14.add("--context_param fileSystem_Path=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_14));
					
				
			}
		} else {
			paraList_tRunJob_14.add("--context_param fileSystem_Path=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_14.put("fileSystem_Path", obj_tRunJob_14);
	
		obj_tRunJob_14 = context.oracle_ServiceName;
		if(obj_tRunJob_14!=null) {
			if (obj_tRunJob_14.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_14.add("--context_param oracle_ServiceName=" + ((java.util.Date) obj_tRunJob_14).getTime());
			} else {
				
					paraList_tRunJob_14.add("--context_param oracle_ServiceName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_14));
					
				
			}
		} else {
			paraList_tRunJob_14.add("--context_param oracle_ServiceName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_14.put("oracle_ServiceName", obj_tRunJob_14);
	
		obj_tRunJob_14 = context.oracle_AdditionalParams;
		if(obj_tRunJob_14!=null) {
			if (obj_tRunJob_14.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_14.add("--context_param oracle_AdditionalParams=" + ((java.util.Date) obj_tRunJob_14).getTime());
			} else {
				
					paraList_tRunJob_14.add("--context_param oracle_AdditionalParams=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_14));
					
				
			}
		} else {
			paraList_tRunJob_14.add("--context_param oracle_AdditionalParams=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_14.put("oracle_AdditionalParams", obj_tRunJob_14);
	
		obj_tRunJob_14 = context.oracle_User;
		if(obj_tRunJob_14!=null) {
			if (obj_tRunJob_14.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_14.add("--context_param oracle_User=" + ((java.util.Date) obj_tRunJob_14).getTime());
			} else {
				
					paraList_tRunJob_14.add("--context_param oracle_User=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_14));
					
				
			}
		} else {
			paraList_tRunJob_14.add("--context_param oracle_User=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_14.put("oracle_User", obj_tRunJob_14);
	
		obj_tRunJob_14 = context.oracle_Schema;
		if(obj_tRunJob_14!=null) {
			if (obj_tRunJob_14.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_14.add("--context_param oracle_Schema=" + ((java.util.Date) obj_tRunJob_14).getTime());
			} else {
				
					paraList_tRunJob_14.add("--context_param oracle_Schema=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_14));
					
				
			}
		} else {
			paraList_tRunJob_14.add("--context_param oracle_Schema=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_14.put("oracle_Schema", obj_tRunJob_14);
	
		obj_tRunJob_14 = context.oracle_Host;
		if(obj_tRunJob_14!=null) {
			if (obj_tRunJob_14.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_14.add("--context_param oracle_Host=" + ((java.util.Date) obj_tRunJob_14).getTime());
			} else {
				
					paraList_tRunJob_14.add("--context_param oracle_Host=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_14));
					
				
			}
		} else {
			paraList_tRunJob_14.add("--context_param oracle_Host=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_14.put("oracle_Host", obj_tRunJob_14);
	
		obj_tRunJob_14 = context.oracle_Sid;
		if(obj_tRunJob_14!=null) {
			if (obj_tRunJob_14.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_14.add("--context_param oracle_Sid=" + ((java.util.Date) obj_tRunJob_14).getTime());
			} else {
				
					paraList_tRunJob_14.add("--context_param oracle_Sid=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_14));
					
				
			}
		} else {
			paraList_tRunJob_14.add("--context_param oracle_Sid=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_14.put("oracle_Sid", obj_tRunJob_14);
	
		obj_tRunJob_14 = context.oracle_Password;
		if(obj_tRunJob_14!=null) {
			if (obj_tRunJob_14.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_14.add("--context_param oracle_Password=" + ((java.util.Date) obj_tRunJob_14).getTime());
			} else {
				
					paraList_tRunJob_14.add("--context_param oracle_Password=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_14));
					
				
			}
		} else {
			paraList_tRunJob_14.add("--context_param oracle_Password=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_14.put("oracle_Password", obj_tRunJob_14);
	
		obj_tRunJob_14 = context.oracle_Port;
		if(obj_tRunJob_14!=null) {
			if (obj_tRunJob_14.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_14.add("--context_param oracle_Port=" + ((java.util.Date) obj_tRunJob_14).getTime());
			} else {
				
					paraList_tRunJob_14.add("--context_param oracle_Port=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_14));
					
				
			}
		} else {
			paraList_tRunJob_14.add("--context_param oracle_Port=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_14.put("oracle_Port", obj_tRunJob_14);
	
	
		afi_extincion.criterio_09_0_3.Criterio_09 childJob_tRunJob_14 = new afi_extincion.criterio_09_0_3.Criterio_09();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_14 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_14) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_14 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_14 : talendDataSources_tRunJob_14
			        .entrySet()) {
	            dataSources_tRunJob_14.put(talendDataSourceEntry_tRunJob_14.getKey(),
	                    talendDataSourceEntry_tRunJob_14.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_14.setDataSources(dataSources_tRunJob_14);
	    }
		  
			childJob_tRunJob_14.parentContextMap = parentContextMap_tRunJob_14;
		  
		
		String[][] childReturn_tRunJob_14 = childJob_tRunJob_14.runJob((String[]) paraList_tRunJob_14.toArray(new String[paraList_tRunJob_14.size()]));
		
            if(childJob_tRunJob_14.getErrorCode() == null){
                globalMap.put("tRunJob_14_CHILD_RETURN_CODE", childJob_tRunJob_14.getStatus() != null && ("failure").equals(childJob_tRunJob_14.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_14_CHILD_RETURN_CODE", childJob_tRunJob_14.getErrorCode());
            }
            if (childJob_tRunJob_14.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_14_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_14.getExceptionStackTrace());
            }
                    ((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_14.getErrorCode());
                if (childJob_tRunJob_14.getErrorCode() != null || ("failure").equals(childJob_tRunJob_14.getStatus())) {
                    java.lang.Exception ce_tRunJob_14 = childJob_tRunJob_14.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_14!=null) ? (ce_tRunJob_14.getClass().getName() + ": " + ce_tRunJob_14.getMessage()) : ""));
                }

 


	tos_count_tRunJob_14++;

/**
 * [tRunJob_14 main ] stop
 */
	
	/**
	 * [tRunJob_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_14";
	
	

 



/**
 * [tRunJob_14 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_14";
	
	

 



/**
 * [tRunJob_14 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_14 end ] start
	 */

	

	
	
	currentComponent="tRunJob_14";
	
	

 

ok_Hash.put("tRunJob_14", true);
end_Hash.put("tRunJob_14", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tRunJob_14", end_Hash.get("tRunJob_14")-start_Hash.get("tRunJob_14"));
tStatCatcher_1Process(globalMap);



/**
 * [tRunJob_14 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_14 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_14";
	
	
	
 



/**
 * [tRunJob_14 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_14_SUBPROCESS_STATE", 1);
	}
	


public void tRunJob_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_7", false);
		start_Hash.put("tRunJob_7", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_7";
	
	
		int tos_count_tRunJob_7 = 0;
		


 



/**
 * [tRunJob_7 begin ] stop
 */
	
	/**
	 * [tRunJob_7 main ] start
	 */

	

	
	
	currentComponent="tRunJob_7";
	
	
	java.util.List<String> paraList_tRunJob_7 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_7.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_7.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_7.add("--father_node=tRunJob_7");
	      			
	        				paraList_tRunJob_7.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_7.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_7.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_7.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_7 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_7 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_7".equals(tRunJobName_tRunJob_7) && childResumePath_tRunJob_7 != null){
		paraList_tRunJob_7.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_7.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_7");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_7 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_7 = null;

	
		obj_tRunJob_7 = context.infoIdProceso;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param infoIdProceso=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param infoIdProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param infoIdProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("infoIdProceso", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.infoUsuarioJobProcesar;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param infoUsuarioJobProcesar=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param infoUsuarioJobProcesar=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param infoUsuarioJobProcesar=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("infoUsuarioJobProcesar", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.archivoSalida;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param archivoSalida=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param archivoSalida=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param archivoSalida=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("archivoSalida", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.fileSystem_Path;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param fileSystem_Path=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param fileSystem_Path=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param fileSystem_Path=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("fileSystem_Path", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.oracle_ServiceName;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param oracle_ServiceName=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param oracle_ServiceName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param oracle_ServiceName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("oracle_ServiceName", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.oracle_AdditionalParams;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param oracle_AdditionalParams=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param oracle_AdditionalParams=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param oracle_AdditionalParams=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("oracle_AdditionalParams", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.oracle_User;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param oracle_User=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param oracle_User=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param oracle_User=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("oracle_User", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.oracle_Schema;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param oracle_Schema=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param oracle_Schema=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param oracle_Schema=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("oracle_Schema", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.oracle_Host;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param oracle_Host=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param oracle_Host=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param oracle_Host=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("oracle_Host", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.infoEntidades;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param infoEntidades=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param infoEntidades=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param infoEntidades=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("infoEntidades", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.oracle_Sid;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param oracle_Sid=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param oracle_Sid=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param oracle_Sid=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("oracle_Sid", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.oracle_Password;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param oracle_Password=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param oracle_Password=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param oracle_Password=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("oracle_Password", obj_tRunJob_7);
	
		obj_tRunJob_7 = context.oracle_Port;
		if(obj_tRunJob_7!=null) {
			if (obj_tRunJob_7.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_7.add("--context_param oracle_Port=" + ((java.util.Date) obj_tRunJob_7).getTime());
			} else {
				
					paraList_tRunJob_7.add("--context_param oracle_Port=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
					
				
			}
		} else {
			paraList_tRunJob_7.add("--context_param oracle_Port=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("oracle_Port", obj_tRunJob_7);
	
	
		afi_extincion.criterio_10_0_4.Criterio_10 childJob_tRunJob_7 = new afi_extincion.criterio_10_0_4.Criterio_10();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_7 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_7) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_7 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_7 : talendDataSources_tRunJob_7
			        .entrySet()) {
	            dataSources_tRunJob_7.put(talendDataSourceEntry_tRunJob_7.getKey(),
	                    talendDataSourceEntry_tRunJob_7.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_7.setDataSources(dataSources_tRunJob_7);
	    }
		  
			childJob_tRunJob_7.parentContextMap = parentContextMap_tRunJob_7;
		  
		
		String[][] childReturn_tRunJob_7 = childJob_tRunJob_7.runJob((String[]) paraList_tRunJob_7.toArray(new String[paraList_tRunJob_7.size()]));
		
            if(childJob_tRunJob_7.getErrorCode() == null){
                globalMap.put("tRunJob_7_CHILD_RETURN_CODE", childJob_tRunJob_7.getStatus() != null && ("failure").equals(childJob_tRunJob_7.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_7_CHILD_RETURN_CODE", childJob_tRunJob_7.getErrorCode());
            }
            if (childJob_tRunJob_7.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_7_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_7.getExceptionStackTrace());
            }
                    ((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_7.getErrorCode());
                if (childJob_tRunJob_7.getErrorCode() != null || ("failure").equals(childJob_tRunJob_7.getStatus())) {
                    java.lang.Exception ce_tRunJob_7 = childJob_tRunJob_7.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_7!=null) ? (ce_tRunJob_7.getClass().getName() + ": " + ce_tRunJob_7.getMessage()) : ""));
                }

 


	tos_count_tRunJob_7++;

/**
 * [tRunJob_7 main ] stop
 */
	
	/**
	 * [tRunJob_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_7";
	
	

 



/**
 * [tRunJob_7 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_7";
	
	

 



/**
 * [tRunJob_7 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_7 end ] start
	 */

	

	
	
	currentComponent="tRunJob_7";
	
	

 

ok_Hash.put("tRunJob_7", true);
end_Hash.put("tRunJob_7", System.currentTimeMillis());




/**
 * [tRunJob_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_7 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_7";
	
	
	
 



/**
 * [tRunJob_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_7_SUBPROCESS_STATE", 1);
	}
	


public void tRunJob_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_8", false);
		start_Hash.put("tRunJob_8", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tRunJob_8");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tRunJob_8";
	
	
		int tos_count_tRunJob_8 = 0;
		


 



/**
 * [tRunJob_8 begin ] stop
 */
	
	/**
	 * [tRunJob_8 main ] start
	 */

	

	
	
	currentComponent="tRunJob_8";
	
	
	java.util.List<String> paraList_tRunJob_8 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_8.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_8.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_8.add("--father_node=tRunJob_8");
	      			
	        				paraList_tRunJob_8.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_8.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_8.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_8.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_8 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_8 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_8".equals(tRunJobName_tRunJob_8) && childResumePath_tRunJob_8 != null){
		paraList_tRunJob_8.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_8.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_8");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_8 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_8 = null;

	
		obj_tRunJob_8 = context.infoIdProceso;
		if(obj_tRunJob_8!=null) {
			if (obj_tRunJob_8.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_8.add("--context_param infoIdProceso=" + ((java.util.Date) obj_tRunJob_8).getTime());
			} else {
				
					paraList_tRunJob_8.add("--context_param infoIdProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_8));
					
				
			}
		} else {
			paraList_tRunJob_8.add("--context_param infoIdProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_8.put("infoIdProceso", obj_tRunJob_8);
	
		obj_tRunJob_8 = context.infoUsuarioJobProcesar;
		if(obj_tRunJob_8!=null) {
			if (obj_tRunJob_8.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_8.add("--context_param infoUsuarioJobProcesar=" + ((java.util.Date) obj_tRunJob_8).getTime());
			} else {
				
					paraList_tRunJob_8.add("--context_param infoUsuarioJobProcesar=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_8));
					
				
			}
		} else {
			paraList_tRunJob_8.add("--context_param infoUsuarioJobProcesar=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_8.put("infoUsuarioJobProcesar", obj_tRunJob_8);
	
		obj_tRunJob_8 = context.archivoSalida;
		if(obj_tRunJob_8!=null) {
			if (obj_tRunJob_8.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_8.add("--context_param archivoSalida=" + ((java.util.Date) obj_tRunJob_8).getTime());
			} else {
				
					paraList_tRunJob_8.add("--context_param archivoSalida=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_8));
					
				
			}
		} else {
			paraList_tRunJob_8.add("--context_param archivoSalida=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_8.put("archivoSalida", obj_tRunJob_8);
	
		obj_tRunJob_8 = context.fileSystem_Path;
		if(obj_tRunJob_8!=null) {
			if (obj_tRunJob_8.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_8.add("--context_param fileSystem_Path=" + ((java.util.Date) obj_tRunJob_8).getTime());
			} else {
				
					paraList_tRunJob_8.add("--context_param fileSystem_Path=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_8));
					
				
			}
		} else {
			paraList_tRunJob_8.add("--context_param fileSystem_Path=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_8.put("fileSystem_Path", obj_tRunJob_8);
	
		obj_tRunJob_8 = context.oracle_ServiceName;
		if(obj_tRunJob_8!=null) {
			if (obj_tRunJob_8.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_8.add("--context_param oracle_ServiceName=" + ((java.util.Date) obj_tRunJob_8).getTime());
			} else {
				
					paraList_tRunJob_8.add("--context_param oracle_ServiceName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_8));
					
				
			}
		} else {
			paraList_tRunJob_8.add("--context_param oracle_ServiceName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_8.put("oracle_ServiceName", obj_tRunJob_8);
	
		obj_tRunJob_8 = context.oracle_AdditionalParams;
		if(obj_tRunJob_8!=null) {
			if (obj_tRunJob_8.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_8.add("--context_param oracle_AdditionalParams=" + ((java.util.Date) obj_tRunJob_8).getTime());
			} else {
				
					paraList_tRunJob_8.add("--context_param oracle_AdditionalParams=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_8));
					
				
			}
		} else {
			paraList_tRunJob_8.add("--context_param oracle_AdditionalParams=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_8.put("oracle_AdditionalParams", obj_tRunJob_8);
	
		obj_tRunJob_8 = context.oracle_User;
		if(obj_tRunJob_8!=null) {
			if (obj_tRunJob_8.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_8.add("--context_param oracle_User=" + ((java.util.Date) obj_tRunJob_8).getTime());
			} else {
				
					paraList_tRunJob_8.add("--context_param oracle_User=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_8));
					
				
			}
		} else {
			paraList_tRunJob_8.add("--context_param oracle_User=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_8.put("oracle_User", obj_tRunJob_8);
	
		obj_tRunJob_8 = context.oracle_Schema;
		if(obj_tRunJob_8!=null) {
			if (obj_tRunJob_8.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_8.add("--context_param oracle_Schema=" + ((java.util.Date) obj_tRunJob_8).getTime());
			} else {
				
					paraList_tRunJob_8.add("--context_param oracle_Schema=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_8));
					
				
			}
		} else {
			paraList_tRunJob_8.add("--context_param oracle_Schema=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_8.put("oracle_Schema", obj_tRunJob_8);
	
		obj_tRunJob_8 = context.oracle_Host;
		if(obj_tRunJob_8!=null) {
			if (obj_tRunJob_8.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_8.add("--context_param oracle_Host=" + ((java.util.Date) obj_tRunJob_8).getTime());
			} else {
				
					paraList_tRunJob_8.add("--context_param oracle_Host=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_8));
					
				
			}
		} else {
			paraList_tRunJob_8.add("--context_param oracle_Host=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_8.put("oracle_Host", obj_tRunJob_8);
	
		obj_tRunJob_8 = context.oracle_Sid;
		if(obj_tRunJob_8!=null) {
			if (obj_tRunJob_8.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_8.add("--context_param oracle_Sid=" + ((java.util.Date) obj_tRunJob_8).getTime());
			} else {
				
					paraList_tRunJob_8.add("--context_param oracle_Sid=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_8));
					
				
			}
		} else {
			paraList_tRunJob_8.add("--context_param oracle_Sid=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_8.put("oracle_Sid", obj_tRunJob_8);
	
		obj_tRunJob_8 = context.oracle_Password;
		if(obj_tRunJob_8!=null) {
			if (obj_tRunJob_8.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_8.add("--context_param oracle_Password=" + ((java.util.Date) obj_tRunJob_8).getTime());
			} else {
				
					paraList_tRunJob_8.add("--context_param oracle_Password=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_8));
					
				
			}
		} else {
			paraList_tRunJob_8.add("--context_param oracle_Password=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_8.put("oracle_Password", obj_tRunJob_8);
	
		obj_tRunJob_8 = context.oracle_Port;
		if(obj_tRunJob_8!=null) {
			if (obj_tRunJob_8.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_8.add("--context_param oracle_Port=" + ((java.util.Date) obj_tRunJob_8).getTime());
			} else {
				
					paraList_tRunJob_8.add("--context_param oracle_Port=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_8));
					
				
			}
		} else {
			paraList_tRunJob_8.add("--context_param oracle_Port=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_8.put("oracle_Port", obj_tRunJob_8);
	
	
		afi_extincion.criterio_11_0_3.Criterio_11 childJob_tRunJob_8 = new afi_extincion.criterio_11_0_3.Criterio_11();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_8 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_8) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_8 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_8 : talendDataSources_tRunJob_8
			        .entrySet()) {
	            dataSources_tRunJob_8.put(talendDataSourceEntry_tRunJob_8.getKey(),
	                    talendDataSourceEntry_tRunJob_8.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_8.setDataSources(dataSources_tRunJob_8);
	    }
		  
			childJob_tRunJob_8.parentContextMap = parentContextMap_tRunJob_8;
		  
		
		String[][] childReturn_tRunJob_8 = childJob_tRunJob_8.runJob((String[]) paraList_tRunJob_8.toArray(new String[paraList_tRunJob_8.size()]));
		
            if(childJob_tRunJob_8.getErrorCode() == null){
                globalMap.put("tRunJob_8_CHILD_RETURN_CODE", childJob_tRunJob_8.getStatus() != null && ("failure").equals(childJob_tRunJob_8.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_8_CHILD_RETURN_CODE", childJob_tRunJob_8.getErrorCode());
            }
            if (childJob_tRunJob_8.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_8_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_8.getExceptionStackTrace());
            }
                    ((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_8.getErrorCode());
                if (childJob_tRunJob_8.getErrorCode() != null || ("failure").equals(childJob_tRunJob_8.getStatus())) {
                    java.lang.Exception ce_tRunJob_8 = childJob_tRunJob_8.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_8!=null) ? (ce_tRunJob_8.getClass().getName() + ": " + ce_tRunJob_8.getMessage()) : ""));
                }

 


	tos_count_tRunJob_8++;

/**
 * [tRunJob_8 main ] stop
 */
	
	/**
	 * [tRunJob_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_8";
	
	

 



/**
 * [tRunJob_8 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_8";
	
	

 



/**
 * [tRunJob_8 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_8 end ] start
	 */

	

	
	
	currentComponent="tRunJob_8";
	
	

 

ok_Hash.put("tRunJob_8", true);
end_Hash.put("tRunJob_8", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tRunJob_8", end_Hash.get("tRunJob_8")-start_Hash.get("tRunJob_8"));
tStatCatcher_1Process(globalMap);



/**
 * [tRunJob_8 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_8 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_8";
	
	
	
 



/**
 * [tRunJob_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_8_SUBPROCESS_STATE", 1);
	}
	


public void tRunJob_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_15", false);
		start_Hash.put("tRunJob_15", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tRunJob_15");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tRunJob_15";
	
	
		int tos_count_tRunJob_15 = 0;
		


 



/**
 * [tRunJob_15 begin ] stop
 */
	
	/**
	 * [tRunJob_15 main ] start
	 */

	

	
	
	currentComponent="tRunJob_15";
	
	
	java.util.List<String> paraList_tRunJob_15 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_15.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_15.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_15.add("--father_node=tRunJob_15");
	      			
	        				paraList_tRunJob_15.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_15.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_15.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_15.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_15 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_15 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_15".equals(tRunJobName_tRunJob_15) && childResumePath_tRunJob_15 != null){
		paraList_tRunJob_15.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_15.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_15");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_15 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_15 = null;

	
		obj_tRunJob_15 = context.infoIdProceso;
		if(obj_tRunJob_15!=null) {
			if (obj_tRunJob_15.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_15.add("--context_param infoIdProceso=" + ((java.util.Date) obj_tRunJob_15).getTime());
			} else {
				
					paraList_tRunJob_15.add("--context_param infoIdProceso=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_15));
					
				
			}
		} else {
			paraList_tRunJob_15.add("--context_param infoIdProceso=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_15.put("infoIdProceso", obj_tRunJob_15);
	
		obj_tRunJob_15 = context.infoUsuarioJobProcesar;
		if(obj_tRunJob_15!=null) {
			if (obj_tRunJob_15.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_15.add("--context_param infoUsuarioJobProcesar=" + ((java.util.Date) obj_tRunJob_15).getTime());
			} else {
				
					paraList_tRunJob_15.add("--context_param infoUsuarioJobProcesar=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_15));
					
				
			}
		} else {
			paraList_tRunJob_15.add("--context_param infoUsuarioJobProcesar=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_15.put("infoUsuarioJobProcesar", obj_tRunJob_15);
	
		obj_tRunJob_15 = context.archivoSalida;
		if(obj_tRunJob_15!=null) {
			if (obj_tRunJob_15.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_15.add("--context_param archivoSalida=" + ((java.util.Date) obj_tRunJob_15).getTime());
			} else {
				
					paraList_tRunJob_15.add("--context_param archivoSalida=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_15));
					
				
			}
		} else {
			paraList_tRunJob_15.add("--context_param archivoSalida=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_15.put("archivoSalida", obj_tRunJob_15);
	
		obj_tRunJob_15 = context.fileSystem_Path;
		if(obj_tRunJob_15!=null) {
			if (obj_tRunJob_15.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_15.add("--context_param fileSystem_Path=" + ((java.util.Date) obj_tRunJob_15).getTime());
			} else {
				
					paraList_tRunJob_15.add("--context_param fileSystem_Path=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_15));
					
				
			}
		} else {
			paraList_tRunJob_15.add("--context_param fileSystem_Path=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_15.put("fileSystem_Path", obj_tRunJob_15);
	
		obj_tRunJob_15 = context.oracle_ServiceName;
		if(obj_tRunJob_15!=null) {
			if (obj_tRunJob_15.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_15.add("--context_param oracle_ServiceName=" + ((java.util.Date) obj_tRunJob_15).getTime());
			} else {
				
					paraList_tRunJob_15.add("--context_param oracle_ServiceName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_15));
					
				
			}
		} else {
			paraList_tRunJob_15.add("--context_param oracle_ServiceName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_15.put("oracle_ServiceName", obj_tRunJob_15);
	
		obj_tRunJob_15 = context.oracle_AdditionalParams;
		if(obj_tRunJob_15!=null) {
			if (obj_tRunJob_15.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_15.add("--context_param oracle_AdditionalParams=" + ((java.util.Date) obj_tRunJob_15).getTime());
			} else {
				
					paraList_tRunJob_15.add("--context_param oracle_AdditionalParams=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_15));
					
				
			}
		} else {
			paraList_tRunJob_15.add("--context_param oracle_AdditionalParams=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_15.put("oracle_AdditionalParams", obj_tRunJob_15);
	
		obj_tRunJob_15 = context.oracle_User;
		if(obj_tRunJob_15!=null) {
			if (obj_tRunJob_15.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_15.add("--context_param oracle_User=" + ((java.util.Date) obj_tRunJob_15).getTime());
			} else {
				
					paraList_tRunJob_15.add("--context_param oracle_User=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_15));
					
				
			}
		} else {
			paraList_tRunJob_15.add("--context_param oracle_User=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_15.put("oracle_User", obj_tRunJob_15);
	
		obj_tRunJob_15 = context.oracle_Schema;
		if(obj_tRunJob_15!=null) {
			if (obj_tRunJob_15.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_15.add("--context_param oracle_Schema=" + ((java.util.Date) obj_tRunJob_15).getTime());
			} else {
				
					paraList_tRunJob_15.add("--context_param oracle_Schema=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_15));
					
				
			}
		} else {
			paraList_tRunJob_15.add("--context_param oracle_Schema=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_15.put("oracle_Schema", obj_tRunJob_15);
	
		obj_tRunJob_15 = context.oracle_Host;
		if(obj_tRunJob_15!=null) {
			if (obj_tRunJob_15.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_15.add("--context_param oracle_Host=" + ((java.util.Date) obj_tRunJob_15).getTime());
			} else {
				
					paraList_tRunJob_15.add("--context_param oracle_Host=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_15));
					
				
			}
		} else {
			paraList_tRunJob_15.add("--context_param oracle_Host=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_15.put("oracle_Host", obj_tRunJob_15);
	
		obj_tRunJob_15 = context.oracle_Sid;
		if(obj_tRunJob_15!=null) {
			if (obj_tRunJob_15.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_15.add("--context_param oracle_Sid=" + ((java.util.Date) obj_tRunJob_15).getTime());
			} else {
				
					paraList_tRunJob_15.add("--context_param oracle_Sid=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_15));
					
				
			}
		} else {
			paraList_tRunJob_15.add("--context_param oracle_Sid=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_15.put("oracle_Sid", obj_tRunJob_15);
	
		obj_tRunJob_15 = context.oracle_Password;
		if(obj_tRunJob_15!=null) {
			if (obj_tRunJob_15.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_15.add("--context_param oracle_Password=" + ((java.util.Date) obj_tRunJob_15).getTime());
			} else {
				
					paraList_tRunJob_15.add("--context_param oracle_Password=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_15));
					
				
			}
		} else {
			paraList_tRunJob_15.add("--context_param oracle_Password=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_15.put("oracle_Password", obj_tRunJob_15);
	
		obj_tRunJob_15 = context.oracle_Port;
		if(obj_tRunJob_15!=null) {
			if (obj_tRunJob_15.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_15.add("--context_param oracle_Port=" + ((java.util.Date) obj_tRunJob_15).getTime());
			} else {
				
					paraList_tRunJob_15.add("--context_param oracle_Port=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_15));
					
				
			}
		} else {
			paraList_tRunJob_15.add("--context_param oracle_Port=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_15.put("oracle_Port", obj_tRunJob_15);
	
	
		afi_extincion.criterio_multiafiliacion_0_1.Criterio_MultiAfiliacion childJob_tRunJob_15 = new afi_extincion.criterio_multiafiliacion_0_1.Criterio_MultiAfiliacion();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_15 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_15) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_15 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_15 : talendDataSources_tRunJob_15
			        .entrySet()) {
	            dataSources_tRunJob_15.put(talendDataSourceEntry_tRunJob_15.getKey(),
	                    talendDataSourceEntry_tRunJob_15.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_15.setDataSources(dataSources_tRunJob_15);
	    }
		  
			childJob_tRunJob_15.parentContextMap = parentContextMap_tRunJob_15;
		  
		
		String[][] childReturn_tRunJob_15 = childJob_tRunJob_15.runJob((String[]) paraList_tRunJob_15.toArray(new String[paraList_tRunJob_15.size()]));
		
            if(childJob_tRunJob_15.getErrorCode() == null){
                globalMap.put("tRunJob_15_CHILD_RETURN_CODE", childJob_tRunJob_15.getStatus() != null && ("failure").equals(childJob_tRunJob_15.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_15_CHILD_RETURN_CODE", childJob_tRunJob_15.getErrorCode());
            }
            if (childJob_tRunJob_15.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_15_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_15.getExceptionStackTrace());
            }
                    ((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_15.getErrorCode());
                if (childJob_tRunJob_15.getErrorCode() != null || ("failure").equals(childJob_tRunJob_15.getStatus())) {
                    java.lang.Exception ce_tRunJob_15 = childJob_tRunJob_15.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_15!=null) ? (ce_tRunJob_15.getClass().getName() + ": " + ce_tRunJob_15.getMessage()) : ""));
                }

 


	tos_count_tRunJob_15++;

/**
 * [tRunJob_15 main ] stop
 */
	
	/**
	 * [tRunJob_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_15";
	
	

 



/**
 * [tRunJob_15 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_15";
	
	

 



/**
 * [tRunJob_15 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_15 end ] start
	 */

	

	
	
	currentComponent="tRunJob_15";
	
	

 

ok_Hash.put("tRunJob_15", true);
end_Hash.put("tRunJob_15", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tRunJob_15", end_Hash.get("tRunJob_15")-start_Hash.get("tRunJob_15"));
tStatCatcher_1Process(globalMap);



/**
 * [tRunJob_15 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_15 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_15";
	
	
	
 



/**
 * [tRunJob_15 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_15_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_ETL_criterios = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[0];

	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_ETL_criterios) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_ETL_criterios) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tJavaRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_6", false);
		start_Hash.put("tJavaRow_6", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tJavaRow_6 = 0;
		

int nb_line_tJavaRow_6 = 0;

 



/**
 * [tJavaRow_6 begin ] stop
 */



	
	/**
	 * [tOracleInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_5", false);
		start_Hash.put("tOracleInput_5", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tOracleInput_5");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tOracleInput_5";
	
	
		int tos_count_tOracleInput_5 = 0;
		
	


	
		    int nb_line_tOracleInput_5 = 0;
		    java.sql.Connection conn_tOracleInput_5 = null;
				conn_tOracleInput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_5 = false;
				boolean isConnectionWrapped_tOracleInput_5 = !(conn_tOracleInput_5 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_5 = null;
                if (isConnectionWrapped_tOracleInput_5) {
					unwrappedOraConn_tOracleInput_5 = conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_5 != null) {
                        isTimeZoneNull_tOracleInput_5 = (unwrappedOraConn_tOracleInput_5.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_5 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_5).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_5) {
					java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_5 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_5.next()) {
						sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_5 && unwrappedOraConn_tOracleInput_5 != null) {
                        unwrappedOraConn_tOracleInput_5.setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_5).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5.createStatement();

		    String dbquery_tOracleInput_5 = "SELECT\n	ID \nFROM\n	SALUDSIS.AFI_ESTEXTDERECHOS\nWHERE\n	CODIGO = 6";
		    

		    globalMap.put("tOracleInput_5_QUERY",dbquery_tOracleInput_5);

		    java.sql.ResultSet rs_tOracleInput_5 = null;

		    try {
		    	rs_tOracleInput_5 = stmt_tOracleInput_5.executeQuery(dbquery_tOracleInput_5);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5.getMetaData();
		    	int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5.getColumnCount();

		    String tmpContent_tOracleInput_5 = null;
		    
		    
		    while (rs_tOracleInput_5.next()) {
		        nb_line_tOracleInput_5++;
		        
							if(colQtyInRs_tOracleInput_5 < 1) {
								row8.ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(1) != null) {
						row8.ID = rs_tOracleInput_5.getInt(1);
					} else {
				
						row8.ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_5 begin ] stop
 */
	
	/**
	 * [tOracleInput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 


	tos_count_tOracleInput_5++;

/**
 * [tOracleInput_5 main ] stop
 */
	
	/**
	 * [tOracleInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_6 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.infoIdEstadoProcesado = row8.ID;

    nb_line_tJavaRow_6++;   

 


	tos_count_tJavaRow_6++;

/**
 * [tJavaRow_6 main ] stop
 */
	
	/**
	 * [tJavaRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

}
}finally{
	if (rs_tOracleInput_5 != null) {
		rs_tOracleInput_5.close();
	}
	if (stmt_tOracleInput_5 != null) {
		stmt_tOracleInput_5.close();
	}
}

globalMap.put("tOracleInput_5_NB_LINE",nb_line_tOracleInput_5);
 

ok_Hash.put("tOracleInput_5", true);
end_Hash.put("tOracleInput_5", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tOracleInput_5", end_Hash.get("tOracleInput_5")-start_Hash.get("tOracleInput_5"));
tStatCatcher_1Process(globalMap);



/**
 * [tOracleInput_5 end ] stop
 */

	
	/**
	 * [tJavaRow_6 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

globalMap.put("tJavaRow_6_NB_LINE",nb_line_tJavaRow_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tJavaRow_6", true);
end_Hash.put("tJavaRow_6", System.currentTimeMillis());




/**
 * [tJavaRow_6 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tOracleInput_8Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 finally ] stop
 */

	
	/**
	 * [tJavaRow_6 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_ETL_criterios = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[0];

	
			    public Integer ID;

				public Integer getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_ETL_criterios) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_ETL_criterios) {

        	try {

        		int length = 0;
		
						this.ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();




	
	/**
	 * [tJavaRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_9", false);
		start_Hash.put("tJavaRow_9", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tJavaRow_9 = 0;
		

int nb_line_tJavaRow_9 = 0;

 



/**
 * [tJavaRow_9 begin ] stop
 */



	
	/**
	 * [tOracleInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_8", false);
		start_Hash.put("tOracleInput_8", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tOracleInput_8");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tOracleInput_8";
	
	
		int tos_count_tOracleInput_8 = 0;
		
	


	
		    int nb_line_tOracleInput_8 = 0;
		    java.sql.Connection conn_tOracleInput_8 = null;
				conn_tOracleInput_8 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_8 = false;
				boolean isConnectionWrapped_tOracleInput_8 = !(conn_tOracleInput_8 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_8.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_8 = null;
                if (isConnectionWrapped_tOracleInput_8) {
					unwrappedOraConn_tOracleInput_8 = conn_tOracleInput_8.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_8 != null) {
                        isTimeZoneNull_tOracleInput_8 = (unwrappedOraConn_tOracleInput_8.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_8 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_8).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_8) {
					java.sql.Statement stmtGetTZ_tOracleInput_8 = conn_tOracleInput_8.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_8 = stmtGetTZ_tOracleInput_8.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_8 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_8.next()) {
						sessionTimezone_tOracleInput_8 = rsGetTZ_tOracleInput_8.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_8 && unwrappedOraConn_tOracleInput_8 != null) {
                        unwrappedOraConn_tOracleInput_8.setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_8).setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_8 = conn_tOracleInput_8.createStatement();

		    String dbquery_tOracleInput_8 = "SELECT\n	ID \nFROM\n	SALUDSIS.AFI_TARCHIVOS\nWHERE\n	CODIGO = 19";
		    

		    globalMap.put("tOracleInput_8_QUERY",dbquery_tOracleInput_8);

		    java.sql.ResultSet rs_tOracleInput_8 = null;

		    try {
		    	rs_tOracleInput_8 = stmt_tOracleInput_8.executeQuery(dbquery_tOracleInput_8);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_8 = rs_tOracleInput_8.getMetaData();
		    	int colQtyInRs_tOracleInput_8 = rsmd_tOracleInput_8.getColumnCount();

		    String tmpContent_tOracleInput_8 = null;
		    
		    
		    while (rs_tOracleInput_8.next()) {
		        nb_line_tOracleInput_8++;
		        
							if(colQtyInRs_tOracleInput_8 < 1) {
								row11.ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(1) != null) {
						row11.ID = rs_tOracleInput_8.getInt(1);
					} else {
				
						row11.ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_8 begin ] stop
 */
	
	/**
	 * [tOracleInput_8 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 


	tos_count_tOracleInput_8++;

/**
 * [tOracleInput_8 main ] stop
 */
	
	/**
	 * [tOracleInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_9 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.infoIdTarchivoResultante = row11.ID;

    nb_line_tJavaRow_9++;   

 


	tos_count_tJavaRow_9++;

/**
 * [tJavaRow_9 main ] stop
 */
	
	/**
	 * [tJavaRow_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

 



/**
 * [tJavaRow_9 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

 



/**
 * [tJavaRow_9 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_8 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

}
}finally{
	if (rs_tOracleInput_8 != null) {
		rs_tOracleInput_8.close();
	}
	if (stmt_tOracleInput_8 != null) {
		stmt_tOracleInput_8.close();
	}
}

globalMap.put("tOracleInput_8_NB_LINE",nb_line_tOracleInput_8);
 

ok_Hash.put("tOracleInput_8", true);
end_Hash.put("tOracleInput_8", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tOracleInput_8", end_Hash.get("tOracleInput_8")-start_Hash.get("tOracleInput_8"));
tStatCatcher_1Process(globalMap);



/**
 * [tOracleInput_8 end ] stop
 */

	
	/**
	 * [tJavaRow_9 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

globalMap.put("tJavaRow_9_NB_LINE",nb_line_tJavaRow_9);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tJavaRow_9", true);
end_Hash.put("tJavaRow_9", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tFixedFlowInput_2Process(globalMap);



/**
 * [tJavaRow_9 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 finally ] stop
 */

	
	/**
	 * [tJavaRow_9 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

 



/**
 * [tJavaRow_9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_ETL_criterios = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[0];

	
			    public Integer ESTADO;

				public Integer getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 0;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String ARCHIVO;

				public String getARCHIVO () {
					return this.ARCHIVO;
				}

				public Boolean ARCHIVOIsNullable(){
				    return true;
				}
				public Boolean ARCHIVOIsKey(){
				    return false;
				}
				public Integer ARCHIVOLength(){
				    return 0;
				}
				public Integer ARCHIVOPrecision(){
				    return 0;
				}
				public String ARCHIVODefault(){
				
					return null;
				
				}
				public String ARCHIVOComment(){
				
				    return "";
				
				}
				public String ARCHIVOPattern(){
				
					return "";
				
				}
				public String ARCHIVOOriginalDbColumnName(){
				
					return "ARCHIVO";
				
				}

				
			    public Integer TARCHIVOS_ID;

				public Integer getTARCHIVOS_ID () {
					return this.TARCHIVOS_ID;
				}

				public Boolean TARCHIVOS_IDIsNullable(){
				    return true;
				}
				public Boolean TARCHIVOS_IDIsKey(){
				    return false;
				}
				public Integer TARCHIVOS_IDLength(){
				    return 0;
				}
				public Integer TARCHIVOS_IDPrecision(){
				    return 0;
				}
				public String TARCHIVOS_IDDefault(){
				
					return null;
				
				}
				public String TARCHIVOS_IDComment(){
				
				    return "";
				
				}
				public String TARCHIVOS_IDPattern(){
				
					return "";
				
				}
				public String TARCHIVOS_IDOriginalDbColumnName(){
				
					return "TARCHIVOS_ID";
				
				}

				
			    public Integer USUARIOS_ID;

				public Integer getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return 0;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 0;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String ARCHIVOFS;

				public String getARCHIVOFS () {
					return this.ARCHIVOFS;
				}

				public Boolean ARCHIVOFSIsNullable(){
				    return true;
				}
				public Boolean ARCHIVOFSIsKey(){
				    return false;
				}
				public Integer ARCHIVOFSLength(){
				    return 0;
				}
				public Integer ARCHIVOFSPrecision(){
				    return 0;
				}
				public String ARCHIVOFSDefault(){
				
					return null;
				
				}
				public String ARCHIVOFSComment(){
				
				    return "";
				
				}
				public String ARCHIVOFSPattern(){
				
					return "";
				
				}
				public String ARCHIVOFSOriginalDbColumnName(){
				
					return "ARCHIVOFS";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String EXTENSION;

				public String getEXTENSION () {
					return this.EXTENSION;
				}

				public Boolean EXTENSIONIsNullable(){
				    return true;
				}
				public Boolean EXTENSIONIsKey(){
				    return false;
				}
				public Integer EXTENSIONLength(){
				    return 0;
				}
				public Integer EXTENSIONPrecision(){
				    return 0;
				}
				public String EXTENSIONDefault(){
				
					return null;
				
				}
				public String EXTENSIONComment(){
				
				    return "";
				
				}
				public String EXTENSIONPattern(){
				
					return "";
				
				}
				public String EXTENSIONOriginalDbColumnName(){
				
					return "EXTENSION";
				
				}

				
			    public Integer PROCESO_ID;

				public Integer getPROCESO_ID () {
					return this.PROCESO_ID;
				}

				public Boolean PROCESO_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESO_IDIsKey(){
				    return false;
				}
				public Integer PROCESO_IDLength(){
				    return 0;
				}
				public Integer PROCESO_IDPrecision(){
				    return 0;
				}
				public String PROCESO_IDDefault(){
				
					return null;
				
				}
				public String PROCESO_IDComment(){
				
				    return "";
				
				}
				public String PROCESO_IDPattern(){
				
					return "";
				
				}
				public String PROCESO_IDOriginalDbColumnName(){
				
					return "PROCESO_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_ETL_criterios.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_ETL_criterios.length == 0) {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_ETL_criterios.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_ETL_criterios.length == 0) {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_ETL_criterios) {

        	try {

        		int length = 0;
		
						this.ESTADO = readInteger(dis);
					
					this.ARCHIVO = readString(dis);
					
						this.TARCHIVOS_ID = readInteger(dis);
					
						this.USUARIOS_ID = readInteger(dis);
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.EXTENSION = readString(dis);
					
						this.PROCESO_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_ETL_criterios) {

        	try {

        		int length = 0;
		
						this.ESTADO = readInteger(dis);
					
					this.ARCHIVO = readString(dis);
					
						this.TARCHIVOS_ID = readInteger(dis);
					
						this.USUARIOS_ID = readInteger(dis);
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.EXTENSION = readString(dis);
					
						this.PROCESO_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESTADO,dos);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// Integer
				
						writeInteger(this.TARCHIVOS_ID,dos);
					
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// Integer
				
						writeInteger(this.PROCESO_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESTADO,dos);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// Integer
				
						writeInteger(this.TARCHIVOS_ID,dos);
					
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// Integer
				
						writeInteger(this.PROCESO_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESTADO="+String.valueOf(ESTADO));
		sb.append(",ARCHIVO="+ARCHIVO);
		sb.append(",TARCHIVOS_ID="+String.valueOf(TARCHIVOS_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",ARCHIVOFS="+ARCHIVOFS);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",EXTENSION="+EXTENSION);
		sb.append(",PROCESO_ID="+String.valueOf(PROCESO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_ETL_criterios = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[0];

	
			    public Integer ESTADO;

				public Integer getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 0;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String ARCHIVO;

				public String getARCHIVO () {
					return this.ARCHIVO;
				}

				public Boolean ARCHIVOIsNullable(){
				    return true;
				}
				public Boolean ARCHIVOIsKey(){
				    return false;
				}
				public Integer ARCHIVOLength(){
				    return 0;
				}
				public Integer ARCHIVOPrecision(){
				    return 0;
				}
				public String ARCHIVODefault(){
				
					return null;
				
				}
				public String ARCHIVOComment(){
				
				    return "";
				
				}
				public String ARCHIVOPattern(){
				
					return "";
				
				}
				public String ARCHIVOOriginalDbColumnName(){
				
					return "ARCHIVO";
				
				}

				
			    public Integer TARCHIVOS_ID;

				public Integer getTARCHIVOS_ID () {
					return this.TARCHIVOS_ID;
				}

				public Boolean TARCHIVOS_IDIsNullable(){
				    return true;
				}
				public Boolean TARCHIVOS_IDIsKey(){
				    return false;
				}
				public Integer TARCHIVOS_IDLength(){
				    return 0;
				}
				public Integer TARCHIVOS_IDPrecision(){
				    return 0;
				}
				public String TARCHIVOS_IDDefault(){
				
					return null;
				
				}
				public String TARCHIVOS_IDComment(){
				
				    return "";
				
				}
				public String TARCHIVOS_IDPattern(){
				
					return "";
				
				}
				public String TARCHIVOS_IDOriginalDbColumnName(){
				
					return "TARCHIVOS_ID";
				
				}

				
			    public Integer USUARIOS_ID;

				public Integer getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return 0;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 0;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String ARCHIVOFS;

				public String getARCHIVOFS () {
					return this.ARCHIVOFS;
				}

				public Boolean ARCHIVOFSIsNullable(){
				    return true;
				}
				public Boolean ARCHIVOFSIsKey(){
				    return false;
				}
				public Integer ARCHIVOFSLength(){
				    return 0;
				}
				public Integer ARCHIVOFSPrecision(){
				    return 0;
				}
				public String ARCHIVOFSDefault(){
				
					return null;
				
				}
				public String ARCHIVOFSComment(){
				
				    return "";
				
				}
				public String ARCHIVOFSPattern(){
				
					return "";
				
				}
				public String ARCHIVOFSOriginalDbColumnName(){
				
					return "ARCHIVOFS";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String EXTENSION;

				public String getEXTENSION () {
					return this.EXTENSION;
				}

				public Boolean EXTENSIONIsNullable(){
				    return true;
				}
				public Boolean EXTENSIONIsKey(){
				    return false;
				}
				public Integer EXTENSIONLength(){
				    return 0;
				}
				public Integer EXTENSIONPrecision(){
				    return 0;
				}
				public String EXTENSIONDefault(){
				
					return null;
				
				}
				public String EXTENSIONComment(){
				
				    return "";
				
				}
				public String EXTENSIONPattern(){
				
					return "";
				
				}
				public String EXTENSIONOriginalDbColumnName(){
				
					return "EXTENSION";
				
				}

				
			    public Integer PROCESO_ID;

				public Integer getPROCESO_ID () {
					return this.PROCESO_ID;
				}

				public Boolean PROCESO_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESO_IDIsKey(){
				    return false;
				}
				public Integer PROCESO_IDLength(){
				    return 0;
				}
				public Integer PROCESO_IDPrecision(){
				    return 0;
				}
				public String PROCESO_IDDefault(){
				
					return null;
				
				}
				public String PROCESO_IDComment(){
				
				    return "";
				
				}
				public String PROCESO_IDPattern(){
				
					return "";
				
				}
				public String PROCESO_IDOriginalDbColumnName(){
				
					return "PROCESO_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_ETL_criterios.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_ETL_criterios.length == 0) {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_ETL_criterios.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_ETL_criterios.length == 0) {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_ETL_criterios) {

        	try {

        		int length = 0;
		
						this.ESTADO = readInteger(dis);
					
					this.ARCHIVO = readString(dis);
					
						this.TARCHIVOS_ID = readInteger(dis);
					
						this.USUARIOS_ID = readInteger(dis);
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.EXTENSION = readString(dis);
					
						this.PROCESO_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_ETL_criterios) {

        	try {

        		int length = 0;
		
						this.ESTADO = readInteger(dis);
					
					this.ARCHIVO = readString(dis);
					
						this.TARCHIVOS_ID = readInteger(dis);
					
						this.USUARIOS_ID = readInteger(dis);
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.EXTENSION = readString(dis);
					
						this.PROCESO_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESTADO,dos);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// Integer
				
						writeInteger(this.TARCHIVOS_ID,dos);
					
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// Integer
				
						writeInteger(this.PROCESO_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESTADO,dos);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// Integer
				
						writeInteger(this.TARCHIVOS_ID,dos);
					
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// Integer
				
						writeInteger(this.PROCESO_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESTADO="+String.valueOf(ESTADO));
		sb.append(",ARCHIVO="+ARCHIVO);
		sb.append(",TARCHIVOS_ID="+String.valueOf(TARCHIVOS_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",ARCHIVOFS="+ARCHIVOFS);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",EXTENSION="+EXTENSION);
		sb.append(",PROCESO_ID="+String.valueOf(PROCESO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_ETL_criterios = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[0];

	
			    public Integer ESTADO;

				public Integer getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 0;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String ARCHIVO;

				public String getARCHIVO () {
					return this.ARCHIVO;
				}

				public Boolean ARCHIVOIsNullable(){
				    return true;
				}
				public Boolean ARCHIVOIsKey(){
				    return false;
				}
				public Integer ARCHIVOLength(){
				    return 0;
				}
				public Integer ARCHIVOPrecision(){
				    return 0;
				}
				public String ARCHIVODefault(){
				
					return null;
				
				}
				public String ARCHIVOComment(){
				
				    return "";
				
				}
				public String ARCHIVOPattern(){
				
					return "";
				
				}
				public String ARCHIVOOriginalDbColumnName(){
				
					return "ARCHIVO";
				
				}

				
			    public Integer TARCHIVOS_ID;

				public Integer getTARCHIVOS_ID () {
					return this.TARCHIVOS_ID;
				}

				public Boolean TARCHIVOS_IDIsNullable(){
				    return true;
				}
				public Boolean TARCHIVOS_IDIsKey(){
				    return false;
				}
				public Integer TARCHIVOS_IDLength(){
				    return 0;
				}
				public Integer TARCHIVOS_IDPrecision(){
				    return 0;
				}
				public String TARCHIVOS_IDDefault(){
				
					return null;
				
				}
				public String TARCHIVOS_IDComment(){
				
				    return "";
				
				}
				public String TARCHIVOS_IDPattern(){
				
					return "";
				
				}
				public String TARCHIVOS_IDOriginalDbColumnName(){
				
					return "TARCHIVOS_ID";
				
				}

				
			    public Integer USUARIOS_ID;

				public Integer getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return 0;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 0;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public String ARCHIVOFS;

				public String getARCHIVOFS () {
					return this.ARCHIVOFS;
				}

				public Boolean ARCHIVOFSIsNullable(){
				    return true;
				}
				public Boolean ARCHIVOFSIsKey(){
				    return false;
				}
				public Integer ARCHIVOFSLength(){
				    return 0;
				}
				public Integer ARCHIVOFSPrecision(){
				    return 0;
				}
				public String ARCHIVOFSDefault(){
				
					return null;
				
				}
				public String ARCHIVOFSComment(){
				
				    return "";
				
				}
				public String ARCHIVOFSPattern(){
				
					return "";
				
				}
				public String ARCHIVOFSOriginalDbColumnName(){
				
					return "ARCHIVOFS";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String EXTENSION;

				public String getEXTENSION () {
					return this.EXTENSION;
				}

				public Boolean EXTENSIONIsNullable(){
				    return true;
				}
				public Boolean EXTENSIONIsKey(){
				    return false;
				}
				public Integer EXTENSIONLength(){
				    return 0;
				}
				public Integer EXTENSIONPrecision(){
				    return 0;
				}
				public String EXTENSIONDefault(){
				
					return null;
				
				}
				public String EXTENSIONComment(){
				
				    return "";
				
				}
				public String EXTENSIONPattern(){
				
					return "";
				
				}
				public String EXTENSIONOriginalDbColumnName(){
				
					return "EXTENSION";
				
				}

				
			    public Integer PROCESO_ID;

				public Integer getPROCESO_ID () {
					return this.PROCESO_ID;
				}

				public Boolean PROCESO_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESO_IDIsKey(){
				    return false;
				}
				public Integer PROCESO_IDLength(){
				    return 0;
				}
				public Integer PROCESO_IDPrecision(){
				    return 0;
				}
				public String PROCESO_IDDefault(){
				
					return null;
				
				}
				public String PROCESO_IDComment(){
				
				    return "";
				
				}
				public String PROCESO_IDPattern(){
				
					return "";
				
				}
				public String PROCESO_IDOriginalDbColumnName(){
				
					return "PROCESO_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_ETL_criterios.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_ETL_criterios.length == 0) {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_ETL_criterios.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_ETL_criterios.length == 0) {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_ETL_criterios) {

        	try {

        		int length = 0;
		
						this.ESTADO = readInteger(dis);
					
					this.ARCHIVO = readString(dis);
					
						this.TARCHIVOS_ID = readInteger(dis);
					
						this.USUARIOS_ID = readInteger(dis);
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.EXTENSION = readString(dis);
					
						this.PROCESO_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_ETL_criterios) {

        	try {

        		int length = 0;
		
						this.ESTADO = readInteger(dis);
					
					this.ARCHIVO = readString(dis);
					
						this.TARCHIVOS_ID = readInteger(dis);
					
						this.USUARIOS_ID = readInteger(dis);
					
					this.CODIGO = readString(dis);
					
					this.ARCHIVOFS = readString(dis);
					
					this.FECHA = readDate(dis);
					
					this.EXTENSION = readString(dis);
					
						this.PROCESO_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESTADO,dos);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// Integer
				
						writeInteger(this.TARCHIVOS_ID,dos);
					
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// Integer
				
						writeInteger(this.PROCESO_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESTADO,dos);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// Integer
				
						writeInteger(this.TARCHIVOS_ID,dos);
					
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// String
				
						writeString(this.ARCHIVOFS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// Integer
				
						writeInteger(this.PROCESO_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESTADO="+String.valueOf(ESTADO));
		sb.append(",ARCHIVO="+ARCHIVO);
		sb.append(",TARCHIVOS_ID="+String.valueOf(TARCHIVOS_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",CODIGO="+CODIGO);
		sb.append(",ARCHIVOFS="+ARCHIVOFS);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",EXTENSION="+EXTENSION);
		sb.append(",PROCESO_ID="+String.valueOf(PROCESO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();
row10Struct row10 = new row10Struct();
row12Struct row12 = new row12Struct();





	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tOracleOutput_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
        dbschema_tOracleOutput_1 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("AFI_ARCHIVOS");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("AFI_ARCHIVOS");
        }
                String insert_tOracleOutput_1 = "INSERT INTO " + tableName_tOracleOutput_1 + " (ESTADO,ARCHIVO,TARCHIVOS_ID,USUARIOS_ID,CODIGO,ARCHIVOFS,FECHA,EXTENSION,PROCESO_ID) VALUES (?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(insert_tOracleOutput_1);
                        resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tFileOutputDelimited_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.fileSystem_Path+"/"+context.fileSystem_Area+"/"+context.archivoSalida+"_AFI_ARCHIVOS.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tReplicate_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_1", false);
		start_Hash.put("tReplicate_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tReplicate_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tReplicate_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tReplicate_1 = 0;
		

 



/**
 * [tReplicate_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_2", false);
		start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tFixedFlowInput_2");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tFixedFlowInput_2";
	
	
		int tos_count_tFixedFlowInput_2 = 0;
		

	    for (int i_tFixedFlowInput_2 = 0 ; i_tFixedFlowInput_2 < 1 ; i_tFixedFlowInput_2++) {
	                	            	
    	            		row9.ESTADO = context.infoIdEstadoProcesado;
    	            	        	            	
    	            		row9.ARCHIVO = "RESULTANTE EXTINCION DE DERECHOS";
    	            	        	            	
    	            		row9.TARCHIVOS_ID = context.infoIdTarchivoResultante;
    	            	        	            	
    	            		row9.USUARIOS_ID = context.infoUsuarioJobProcesar;
    	            	        	            	
    	            		row9.CODIGO = "AFI_"+context.infoIdProceso+"_"+context.infoUsuarioJobProcesar;
    	            	        	            	
    	            		row9.ARCHIVOFS = context.archivoSalida+".CSV";
    	            	        	            	
    	            		row9.FECHA = TalendDate.getCurrentDate();
    	            	        	            	
    	            		row9.EXTENSION = "CSV";
    	            	        	            	
    	            		row9.PROCESO_ID = context.infoIdProceso;
    	            	

 



/**
 * [tFixedFlowInput_2 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 


	tos_count_tFixedFlowInput_2++;

/**
 * [tFixedFlowInput_2 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tReplicate_1 main ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					


	row10 = new row10Struct();
						
	row10.ESTADO = row9.ESTADO;								
	row10.ARCHIVO = row9.ARCHIVO;								
	row10.TARCHIVOS_ID = row9.TARCHIVOS_ID;								
	row10.USUARIOS_ID = row9.USUARIOS_ID;								
	row10.CODIGO = row9.CODIGO;								
	row10.ARCHIVOFS = row9.ARCHIVOFS;								
	row10.FECHA = row9.FECHA;								
	row10.EXTENSION = row9.EXTENSION;								
	row10.PROCESO_ID = row9.PROCESO_ID;			
	row12 = new row12Struct();
						
	row12.ESTADO = row9.ESTADO;								
	row12.ARCHIVO = row9.ARCHIVO;								
	row12.TARCHIVOS_ID = row9.TARCHIVOS_ID;								
	row12.USUARIOS_ID = row9.USUARIOS_ID;								
	row12.CODIGO = row9.CODIGO;								
	row12.ARCHIVOFS = row9.ARCHIVOFS;								
	row12.FECHA = row9.FECHA;								
	row12.EXTENSION = row9.EXTENSION;								
	row12.PROCESO_ID = row9.PROCESO_ID;			


 


	tos_count_tReplicate_1++;

/**
 * [tReplicate_1 main ] stop
 */
	
	/**
	 * [tReplicate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	

 



/**
 * [tReplicate_1 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					



        whetherReject_tOracleOutput_1 = false;
                        if(row10.ESTADO == null) {
pstmt_tOracleOutput_1.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_1.setInt(1, row10.ESTADO);
}

                        if(row10.ARCHIVO == null) {
pstmt_tOracleOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(2, row10.ARCHIVO);
}

                        if(row10.TARCHIVOS_ID == null) {
pstmt_tOracleOutput_1.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_1.setInt(3, row10.TARCHIVOS_ID);
}

                        if(row10.USUARIOS_ID == null) {
pstmt_tOracleOutput_1.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_1.setInt(4, row10.USUARIOS_ID);
}

                        if(row10.CODIGO == null) {
pstmt_tOracleOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(5, row10.CODIGO);
}

                        if(row10.ARCHIVOFS == null) {
pstmt_tOracleOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(6, row10.ARCHIVOFS);
}

                        if(row10.FECHA != null) {
pstmt_tOracleOutput_1.setTimestamp(7, new java.sql.Timestamp(row10.FECHA.getTime()));
} else {
pstmt_tOracleOutput_1.setNull(7, java.sql.Types.DATE);
}

                        if(row10.EXTENSION == null) {
pstmt_tOracleOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(8, row10.EXTENSION);
}

                        if(row10.PROCESO_ID == null) {
pstmt_tOracleOutput_1.setNull(9, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_1.setInt(9, row10.PROCESO_ID);
}

                try {
                    nb_line_tOracleOutput_1++;
                    int processedCount_tOracleOutput_1 = pstmt_tOracleOutput_1.executeUpdate();
                    insertedCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    rowsToCommitCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                } catch(java.lang.Exception e_tOracleOutput_1) {
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
                    whetherReject_tOracleOutput_1 = true;
                            System.err.print(e_tOracleOutput_1.getMessage());
                }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */




	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row12.ESTADO != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.ESTADO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.ARCHIVO != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.ARCHIVO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.TARCHIVOS_ID != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.TARCHIVOS_ID
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.USUARIOS_ID != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.USUARIOS_ID
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.CODIGO != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.CODIGO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.ARCHIVOFS != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.ARCHIVOFS
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.FECHA != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row12.FECHA, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.EXTENSION != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.EXTENSION
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row12.PROCESO_ID != null) {
                        sb_tFileOutputDelimited_1.append(
                            row12.PROCESO_ID
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

                    }



 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tReplicate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	

 



/**
 * [tReplicate_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

        }
        globalMap.put("tFixedFlowInput_2_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_2", true);
end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tFixedFlowInput_2", end_Hash.get("tFixedFlowInput_2")-start_Hash.get("tFixedFlowInput_2"));
tStatCatcher_1Process(globalMap);



/**
 * [tFixedFlowInput_2 end ] stop
 */

	
	/**
	 * [tReplicate_1 end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tReplicate_1", true);
end_Hash.put("tReplicate_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tReplicate_1", end_Hash.get("tReplicate_1")-start_Hash.get("tReplicate_1"));
tStatCatcher_1Process(globalMap);



/**
 * [tReplicate_1 end ] stop
 */

	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(pstmt_tOracleOutput_1 != null) {
			
				pstmt_tOracleOutput_1.close();
				resourceMap.remove("pstmt_tOracleOutput_1");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tOracleOutput_1", end_Hash.get("tOracleOutput_1")-start_Hash.get("tOracleOutput_1"));
tStatCatcher_1Process(globalMap);



/**
 * [tOracleOutput_1 end ] stop
 */




	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tFileOutputDelimited_1", end_Hash.get("tFileOutputDelimited_1")-start_Hash.get("tFileOutputDelimited_1"));
tStatCatcher_1Process(globalMap);



/**
 * [tFileOutputDelimited_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_2 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 finally ] stop
 */

	
	/**
	 * [tReplicate_1 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	

 



/**
 * [tReplicate_1 finally ] stop
 */

	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */




	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_AFI_EXTINCION_ETL_criterios = new byte[0];
    static byte[] commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return "";
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return "";
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return "";
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return "";
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}

				public Boolean system_pidIsNullable(){
				    return true;
				}
				public Boolean system_pidIsKey(){
				    return false;
				}
				public Integer system_pidLength(){
				    return 8;
				}
				public Integer system_pidPrecision(){
				    return 0;
				}
				public String system_pidDefault(){
				
					return "";
				
				}
				public String system_pidComment(){
				
				    return null;
				
				}
				public String system_pidPattern(){
				
				    return null;
				
				}
				public String system_pidOriginalDbColumnName(){
				
					return "system_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return "";
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return "";
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}

				public Boolean job_repository_idIsNullable(){
				    return true;
				}
				public Boolean job_repository_idIsKey(){
				    return false;
				}
				public Integer job_repository_idLength(){
				    return 255;
				}
				public Integer job_repository_idPrecision(){
				    return 0;
				}
				public String job_repository_idDefault(){
				
					return "";
				
				}
				public String job_repository_idComment(){
				
				    return null;
				
				}
				public String job_repository_idPattern(){
				
				    return null;
				
				}
				public String job_repository_idOriginalDbColumnName(){
				
					return "job_repository_id";
				
				}

				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}

				public Boolean job_versionIsNullable(){
				    return true;
				}
				public Boolean job_versionIsKey(){
				    return false;
				}
				public Integer job_versionLength(){
				    return 255;
				}
				public Integer job_versionPrecision(){
				    return 0;
				}
				public String job_versionDefault(){
				
					return "";
				
				}
				public String job_versionComment(){
				
				    return null;
				
				}
				public String job_versionPattern(){
				
				    return null;
				
				}
				public String job_versionOriginalDbColumnName(){
				
					return "job_version";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return "";
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return "";
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}

				public Boolean message_typeIsNullable(){
				    return true;
				}
				public Boolean message_typeIsKey(){
				    return false;
				}
				public Integer message_typeLength(){
				    return 255;
				}
				public Integer message_typePrecision(){
				    return 0;
				}
				public String message_typeDefault(){
				
					return "";
				
				}
				public String message_typeComment(){
				
				    return null;
				
				}
				public String message_typePattern(){
				
				    return null;
				
				}
				public String message_typeOriginalDbColumnName(){
				
					return "message_type";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return "";
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}

				public Boolean durationIsNullable(){
				    return true;
				}
				public Boolean durationIsKey(){
				    return false;
				}
				public Integer durationLength(){
				    return 8;
				}
				public Integer durationPrecision(){
				    return 0;
				}
				public String durationDefault(){
				
					return "";
				
				}
				public String durationComment(){
				
				    return null;
				
				}
				public String durationPattern(){
				
				    return null;
				
				}
				public String durationOriginalDbColumnName(){
				
					return "duration";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_ETL_criterios.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_ETL_criterios.length == 0) {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_EXTINCION_ETL_criterios.length) {
				if(length < 1024 && commonByteArray_AFI_EXTINCION_ETL_criterios.length == 0) {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[1024];
				} else {
   					commonByteArray_AFI_EXTINCION_ETL_criterios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length);
			strReturn = new String(commonByteArray_AFI_EXTINCION_ETL_criterios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_ETL_criterios) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_EXTINCION_ETL_criterios) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File("_LOGSTAT.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
                        synchronized (multiThreadLockWrite) {
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("moment");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("pid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("father_pid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("root_pid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("system_pid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("project");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("job");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("job_repository_id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("job_version");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("context");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("origin");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("message_type");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("message");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("duration");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tStatCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tStatCatcher_1", false);
		start_Hash.put("tStatCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tStatCatcher_1";
	
	
		int tos_count_tStatCatcher_1 = 0;
		

	for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
		row13.pid = pid;
		row13.root_pid = rootPid;
		row13.father_pid = fatherPid;	
    	row13.project = projectName;
    	row13.job = jobName;
    	row13.context = contextStr;
		row13.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		row13.message = scm.getMessage();
		row13.duration = scm.getDuration();
		row13.moment = scm.getMoment();
		row13.message_type = scm.getMessageType();
		row13.job_version = scm.getJobVersion();
		row13.job_repository_id = scm.getJobId();
		row13.system_pid = scm.getSystemPid();

 



/**
 * [tStatCatcher_1 begin ] stop
 */
	
	/**
	 * [tStatCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";
	
	

 


	tos_count_tStatCatcher_1++;

/**
 * [tStatCatcher_1 main ] stop
 */
	
	/**
	 * [tStatCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";
	
	

 



/**
 * [tStatCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row13.moment != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(row13.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row13.pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row13.pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row13.father_pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row13.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row13.root_pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row13.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row13.system_pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row13.system_pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row13.project != null) {
                        sb_tFileOutputDelimited_2.append(
                            row13.project
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row13.job != null) {
                        sb_tFileOutputDelimited_2.append(
                            row13.job
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row13.job_repository_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            row13.job_repository_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row13.job_version != null) {
                        sb_tFileOutputDelimited_2.append(
                            row13.job_version
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row13.context != null) {
                        sb_tFileOutputDelimited_2.append(
                            row13.context
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row13.origin != null) {
                        sb_tFileOutputDelimited_2.append(
                            row13.origin
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row13.message_type != null) {
                        sb_tFileOutputDelimited_2.append(
                            row13.message_type
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row13.message != null) {
                        sb_tFileOutputDelimited_2.append(
                            row13.message
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row13.duration != null) {
                        sb_tFileOutputDelimited_2.append(
                            row13.duration
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

                    }



 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tStatCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";
	
	

 



/**
 * [tStatCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tStatCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";
	
	

	}


 

ok_Hash.put("tStatCatcher_1", true);
end_Hash.put("tStatCatcher_1", System.currentTimeMillis());




/**
 * [tStatCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tStatCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";
	
	

 



/**
 * [tStatCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final ETL_criterios ETL_criteriosClass = new ETL_criterios();

        int exitCode = ETL_criteriosClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ETL_criterios.class.getClassLoader().getResourceAsStream("afi_extincion/etl_criterios_1_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = ETL_criterios.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("outCodigo", "id_Boolean");
                        if(context.getStringValue("outCodigo") == null) {
                            context.outCodigo = null;
                        } else {
                            try{
                                context.outCodigo=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("outCodigo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "outCodigo", e.getMessage()));
                                context.outCodigo=null;
                            }
                        }
                        context.setContextType("archivoSalida", "id_String");
                        if(context.getStringValue("archivoSalida") == null) {
                            context.archivoSalida = null;
                        } else {
                            context.archivoSalida=(String) context.getProperty("archivoSalida");
                        }
                        context.setContextType("infoConteoRegistros", "id_Integer");
                        if(context.getStringValue("infoConteoRegistros") == null) {
                            context.infoConteoRegistros = null;
                        } else {
                            try{
                                context.infoConteoRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoConteoRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoConteoRegistros", e.getMessage()));
                                context.infoConteoRegistros=null;
                            }
                        }
                        context.setContextType("mail_PasswordMail", "id_String");
                        if(context.getStringValue("mail_PasswordMail") == null) {
                            context.mail_PasswordMail = null;
                        } else {
                            context.mail_PasswordMail=(String) context.getProperty("mail_PasswordMail");
                        }
                        context.setContextType("mail_SMTPPort", "id_String");
                        if(context.getStringValue("mail_SMTPPort") == null) {
                            context.mail_SMTPPort = null;
                        } else {
                            context.mail_SMTPPort=(String) context.getProperty("mail_SMTPPort");
                        }
                        context.setContextType("mail_UsernameMail", "id_String");
                        if(context.getStringValue("mail_UsernameMail") == null) {
                            context.mail_UsernameMail = null;
                        } else {
                            context.mail_UsernameMail=(String) context.getProperty("mail_UsernameMail");
                        }
                        context.setContextType("mail_SMTPHost", "id_String");
                        if(context.getStringValue("mail_SMTPHost") == null) {
                            context.mail_SMTPHost = null;
                        } else {
                            context.mail_SMTPHost=(String) context.getProperty("mail_SMTPHost");
                        }
                        context.setContextType("AuxCriterioActual", "id_Integer");
                        if(context.getStringValue("AuxCriterioActual") == null) {
                            context.AuxCriterioActual = null;
                        } else {
                            try{
                                context.AuxCriterioActual=routines.system.ParserUtils.parseTo_Integer (context.getProperty("AuxCriterioActual"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AuxCriterioActual", e.getMessage()));
                                context.AuxCriterioActual=null;
                            }
                        }
                        context.setContextType("AS_CRITERIO", "id_String");
                        if(context.getStringValue("AS_CRITERIO") == null) {
                            context.AS_CRITERIO = null;
                        } else {
                            context.AS_CRITERIO=(String) context.getProperty("AS_CRITERIO");
                        }
                        context.setContextType("AS_DESCRIPCION", "id_String");
                        if(context.getStringValue("AS_DESCRIPCION") == null) {
                            context.AS_DESCRIPCION = null;
                        } else {
                            context.AS_DESCRIPCION=(String) context.getProperty("AS_DESCRIPCION");
                        }
                        context.setContextType("AS_DOCUMENTO", "id_String");
                        if(context.getStringValue("AS_DOCUMENTO") == null) {
                            context.AS_DOCUMENTO = null;
                        } else {
                            context.AS_DOCUMENTO=(String) context.getProperty("AS_DOCUMENTO");
                        }
                        context.setContextType("AS_OPERACION_ACTIVO", "id_String");
                        if(context.getStringValue("AS_OPERACION_ACTIVO") == null) {
                            context.AS_OPERACION_ACTIVO = null;
                        } else {
                            context.AS_OPERACION_ACTIVO=(String) context.getProperty("AS_OPERACION_ACTIVO");
                        }
                        context.setContextType("AS_OPERACION_INACTIVO", "id_String");
                        if(context.getStringValue("AS_OPERACION_INACTIVO") == null) {
                            context.AS_OPERACION_INACTIVO = null;
                        } else {
                            context.AS_OPERACION_INACTIVO=(String) context.getProperty("AS_OPERACION_INACTIVO");
                        }
                        context.setContextType("AS_OPERACION_PROVISIONAL", "id_String");
                        if(context.getStringValue("AS_OPERACION_PROVISIONAL") == null) {
                            context.AS_OPERACION_PROVISIONAL = null;
                        } else {
                            context.AS_OPERACION_PROVISIONAL=(String) context.getProperty("AS_OPERACION_PROVISIONAL");
                        }
                        context.setContextType("AS_PRIMER_APELLIDO", "id_String");
                        if(context.getStringValue("AS_PRIMER_APELLIDO") == null) {
                            context.AS_PRIMER_APELLIDO = null;
                        } else {
                            context.AS_PRIMER_APELLIDO=(String) context.getProperty("AS_PRIMER_APELLIDO");
                        }
                        context.setContextType("AS_PRIMER_NOMBRE", "id_String");
                        if(context.getStringValue("AS_PRIMER_NOMBRE") == null) {
                            context.AS_PRIMER_NOMBRE = null;
                        } else {
                            context.AS_PRIMER_NOMBRE=(String) context.getProperty("AS_PRIMER_NOMBRE");
                        }
                        context.setContextType("AS_SEGUNDO_APELLIDO", "id_String");
                        if(context.getStringValue("AS_SEGUNDO_APELLIDO") == null) {
                            context.AS_SEGUNDO_APELLIDO = null;
                        } else {
                            context.AS_SEGUNDO_APELLIDO=(String) context.getProperty("AS_SEGUNDO_APELLIDO");
                        }
                        context.setContextType("AS_SEGUNDO_NOMBRE", "id_String");
                        if(context.getStringValue("AS_SEGUNDO_NOMBRE") == null) {
                            context.AS_SEGUNDO_NOMBRE = null;
                        } else {
                            context.AS_SEGUNDO_NOMBRE=(String) context.getProperty("AS_SEGUNDO_NOMBRE");
                        }
                        context.setContextType("AS_TIPO_DOCUMENTO", "id_String");
                        if(context.getStringValue("AS_TIPO_DOCUMENTO") == null) {
                            context.AS_TIPO_DOCUMENTO = null;
                        } else {
                            context.AS_TIPO_DOCUMENTO=(String) context.getProperty("AS_TIPO_DOCUMENTO");
                        }
                        context.setContextType("fileSystem_Area", "id_String");
                        if(context.getStringValue("fileSystem_Area") == null) {
                            context.fileSystem_Area = null;
                        } else {
                            context.fileSystem_Area=(String) context.getProperty("fileSystem_Area");
                        }
                        context.setContextType("fileSystem_Path", "id_String");
                        if(context.getStringValue("fileSystem_Path") == null) {
                            context.fileSystem_Path = null;
                        } else {
                            context.fileSystem_Path=(String) context.getProperty("fileSystem_Path");
                        }
                        context.setContextType("infoCodigoTipoJob", "id_Integer");
                        if(context.getStringValue("infoCodigoTipoJob") == null) {
                            context.infoCodigoTipoJob = null;
                        } else {
                            try{
                                context.infoCodigoTipoJob=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoCodigoTipoJob"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoCodigoTipoJob", e.getMessage()));
                                context.infoCodigoTipoJob=null;
                            }
                        }
                        context.setContextType("infoDescripcionJobProcesar", "id_String");
                        if(context.getStringValue("infoDescripcionJobProcesar") == null) {
                            context.infoDescripcionJobProcesar = null;
                        } else {
                            context.infoDescripcionJobProcesar=(String) context.getProperty("infoDescripcionJobProcesar");
                        }
                        context.setContextType("infoEntidades", "id_String");
                        if(context.getStringValue("infoEntidades") == null) {
                            context.infoEntidades = null;
                        } else {
                            context.infoEntidades=(String) context.getProperty("infoEntidades");
                        }
                        context.setContextType("infoIdEstadoActivo", "id_Integer");
                        if(context.getStringValue("infoIdEstadoActivo") == null) {
                            context.infoIdEstadoActivo = null;
                        } else {
                            try{
                                context.infoIdEstadoActivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoIdEstadoActivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoIdEstadoActivo", e.getMessage()));
                                context.infoIdEstadoActivo=null;
                            }
                        }
                        context.setContextType("infoIdEstadoProcesado", "id_Integer");
                        if(context.getStringValue("infoIdEstadoProcesado") == null) {
                            context.infoIdEstadoProcesado = null;
                        } else {
                            try{
                                context.infoIdEstadoProcesado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoIdEstadoProcesado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoIdEstadoProcesado", e.getMessage()));
                                context.infoIdEstadoProcesado=null;
                            }
                        }
                        context.setContextType("infoIdJobProcesar", "id_Integer");
                        if(context.getStringValue("infoIdJobProcesar") == null) {
                            context.infoIdJobProcesar = null;
                        } else {
                            try{
                                context.infoIdJobProcesar=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoIdJobProcesar"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoIdJobProcesar", e.getMessage()));
                                context.infoIdJobProcesar=null;
                            }
                        }
                        context.setContextType("infoIdProceso", "id_Integer");
                        if(context.getStringValue("infoIdProceso") == null) {
                            context.infoIdProceso = null;
                        } else {
                            try{
                                context.infoIdProceso=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoIdProceso"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoIdProceso", e.getMessage()));
                                context.infoIdProceso=null;
                            }
                        }
                        context.setContextType("infoIdTarchivoResultante", "id_Integer");
                        if(context.getStringValue("infoIdTarchivoResultante") == null) {
                            context.infoIdTarchivoResultante = null;
                        } else {
                            try{
                                context.infoIdTarchivoResultante=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoIdTarchivoResultante"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoIdTarchivoResultante", e.getMessage()));
                                context.infoIdTarchivoResultante=null;
                            }
                        }
                        context.setContextType("infoTipoProceso", "id_Integer");
                        if(context.getStringValue("infoTipoProceso") == null) {
                            context.infoTipoProceso = null;
                        } else {
                            try{
                                context.infoTipoProceso=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoTipoProceso"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoTipoProceso", e.getMessage()));
                                context.infoTipoProceso=null;
                            }
                        }
                        context.setContextType("infoUsuarioJobProcesar", "id_Integer");
                        if(context.getStringValue("infoUsuarioJobProcesar") == null) {
                            context.infoUsuarioJobProcesar = null;
                        } else {
                            try{
                                context.infoUsuarioJobProcesar=routines.system.ParserUtils.parseTo_Integer (context.getProperty("infoUsuarioJobProcesar"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "infoUsuarioJobProcesar", e.getMessage()));
                                context.infoUsuarioJobProcesar=null;
                            }
                        }
                        context.setContextType("oracle_AdditionalParams", "id_String");
                        if(context.getStringValue("oracle_AdditionalParams") == null) {
                            context.oracle_AdditionalParams = null;
                        } else {
                            context.oracle_AdditionalParams=(String) context.getProperty("oracle_AdditionalParams");
                        }
                        context.setContextType("oracle_Host", "id_String");
                        if(context.getStringValue("oracle_Host") == null) {
                            context.oracle_Host = null;
                        } else {
                            context.oracle_Host=(String) context.getProperty("oracle_Host");
                        }
                        context.setContextType("oracle_Password", "id_String");
                        if(context.getStringValue("oracle_Password") == null) {
                            context.oracle_Password = null;
                        } else {
                            context.oracle_Password=(String) context.getProperty("oracle_Password");
                        }
                        context.setContextType("oracle_Port", "id_String");
                        if(context.getStringValue("oracle_Port") == null) {
                            context.oracle_Port = null;
                        } else {
                            context.oracle_Port=(String) context.getProperty("oracle_Port");
                        }
                        context.setContextType("oracle_Schema", "id_String");
                        if(context.getStringValue("oracle_Schema") == null) {
                            context.oracle_Schema = null;
                        } else {
                            context.oracle_Schema=(String) context.getProperty("oracle_Schema");
                        }
                        context.setContextType("oracle_ServiceName", "id_String");
                        if(context.getStringValue("oracle_ServiceName") == null) {
                            context.oracle_ServiceName = null;
                        } else {
                            context.oracle_ServiceName=(String) context.getProperty("oracle_ServiceName");
                        }
                        context.setContextType("oracle_Sid", "id_String");
                        if(context.getStringValue("oracle_Sid") == null) {
                            context.oracle_Sid = null;
                        } else {
                            context.oracle_Sid=(String) context.getProperty("oracle_Sid");
                        }
                        context.setContextType("oracle_User", "id_String");
                        if(context.getStringValue("oracle_User") == null) {
                            context.oracle_User = null;
                        } else {
                            context.oracle_User=(String) context.getProperty("oracle_User");
                        }
                        context.setContextType("archivoConfiguracion", "id_String");
                        if(context.getStringValue("archivoConfiguracion") == null) {
                            context.archivoConfiguracion = null;
                        } else {
                            context.archivoConfiguracion=(String) context.getProperty("archivoConfiguracion");
                        }
                        context.setContextType("auxAumentoRegistros", "id_Integer");
                        if(context.getStringValue("auxAumentoRegistros") == null) {
                            context.auxAumentoRegistros = null;
                        } else {
                            try{
                                context.auxAumentoRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("auxAumentoRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "auxAumentoRegistros", e.getMessage()));
                                context.auxAumentoRegistros=null;
                            }
                        }
                        context.setContextType("auxPosicionRegistros", "id_Integer");
                        if(context.getStringValue("auxPosicionRegistros") == null) {
                            context.auxPosicionRegistros = null;
                        } else {
                            try{
                                context.auxPosicionRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("auxPosicionRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "auxPosicionRegistros", e.getMessage()));
                                context.auxPosicionRegistros=null;
                            }
                        }
                        context.setContextType("MotivoEstadoCaso00_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso00_PROV") == null) {
                            context.MotivoEstadoCaso00_PROV = null;
                        } else {
                            context.MotivoEstadoCaso00_PROV=(String) context.getProperty("MotivoEstadoCaso00_PROV");
                        }
                        context.setContextType("MotivoEstadoCaso01_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso01_ACTI") == null) {
                            context.MotivoEstadoCaso01_ACTI = null;
                        } else {
                            context.MotivoEstadoCaso01_ACTI=(String) context.getProperty("MotivoEstadoCaso01_ACTI");
                        }
                        context.setContextType("MotivoEstadoCaso01_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso01_INAC") == null) {
                            context.MotivoEstadoCaso01_INAC = null;
                        } else {
                            context.MotivoEstadoCaso01_INAC=(String) context.getProperty("MotivoEstadoCaso01_INAC");
                        }
                        context.setContextType("MotivoEstadoCaso01_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso01_PROV") == null) {
                            context.MotivoEstadoCaso01_PROV = null;
                        } else {
                            context.MotivoEstadoCaso01_PROV=(String) context.getProperty("MotivoEstadoCaso01_PROV");
                        }
                        context.setContextType("MotivoEstadoCaso02_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso02_ACTI") == null) {
                            context.MotivoEstadoCaso02_ACTI = null;
                        } else {
                            context.MotivoEstadoCaso02_ACTI=(String) context.getProperty("MotivoEstadoCaso02_ACTI");
                        }
                        context.setContextType("MotivoEstadoCaso02_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso02_INAC") == null) {
                            context.MotivoEstadoCaso02_INAC = null;
                        } else {
                            context.MotivoEstadoCaso02_INAC=(String) context.getProperty("MotivoEstadoCaso02_INAC");
                        }
                        context.setContextType("MotivoEstadoCaso02_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso02_PROV") == null) {
                            context.MotivoEstadoCaso02_PROV = null;
                        } else {
                            context.MotivoEstadoCaso02_PROV=(String) context.getProperty("MotivoEstadoCaso02_PROV");
                        }
                        context.setContextType("MotivoEstadoCaso03_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso03_ACTI") == null) {
                            context.MotivoEstadoCaso03_ACTI = null;
                        } else {
                            context.MotivoEstadoCaso03_ACTI=(String) context.getProperty("MotivoEstadoCaso03_ACTI");
                        }
                        context.setContextType("MotivoEstadoCaso03_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso03_INAC") == null) {
                            context.MotivoEstadoCaso03_INAC = null;
                        } else {
                            context.MotivoEstadoCaso03_INAC=(String) context.getProperty("MotivoEstadoCaso03_INAC");
                        }
                        context.setContextType("MotivoEstadoCaso03_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso03_PROV") == null) {
                            context.MotivoEstadoCaso03_PROV = null;
                        } else {
                            context.MotivoEstadoCaso03_PROV=(String) context.getProperty("MotivoEstadoCaso03_PROV");
                        }
                        context.setContextType("MotivoEstadoCaso04_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso04_ACTI") == null) {
                            context.MotivoEstadoCaso04_ACTI = null;
                        } else {
                            context.MotivoEstadoCaso04_ACTI=(String) context.getProperty("MotivoEstadoCaso04_ACTI");
                        }
                        context.setContextType("MotivoEstadoCaso04_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso04_INAC") == null) {
                            context.MotivoEstadoCaso04_INAC = null;
                        } else {
                            context.MotivoEstadoCaso04_INAC=(String) context.getProperty("MotivoEstadoCaso04_INAC");
                        }
                        context.setContextType("MotivoEstadoCaso04_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso04_PROV") == null) {
                            context.MotivoEstadoCaso04_PROV = null;
                        } else {
                            context.MotivoEstadoCaso04_PROV=(String) context.getProperty("MotivoEstadoCaso04_PROV");
                        }
                        context.setContextType("MotivoEstadoCaso05_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso05_ACTI") == null) {
                            context.MotivoEstadoCaso05_ACTI = null;
                        } else {
                            context.MotivoEstadoCaso05_ACTI=(String) context.getProperty("MotivoEstadoCaso05_ACTI");
                        }
                        context.setContextType("MotivoEstadoCaso05_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso05_INAC") == null) {
                            context.MotivoEstadoCaso05_INAC = null;
                        } else {
                            context.MotivoEstadoCaso05_INAC=(String) context.getProperty("MotivoEstadoCaso05_INAC");
                        }
                        context.setContextType("MotivoEstadoCaso05_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso05_PROV") == null) {
                            context.MotivoEstadoCaso05_PROV = null;
                        } else {
                            context.MotivoEstadoCaso05_PROV=(String) context.getProperty("MotivoEstadoCaso05_PROV");
                        }
                        context.setContextType("MotivoEstadoCaso06_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso06_ACTI") == null) {
                            context.MotivoEstadoCaso06_ACTI = null;
                        } else {
                            context.MotivoEstadoCaso06_ACTI=(String) context.getProperty("MotivoEstadoCaso06_ACTI");
                        }
                        context.setContextType("MotivoEstadoCaso06_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso06_INAC") == null) {
                            context.MotivoEstadoCaso06_INAC = null;
                        } else {
                            context.MotivoEstadoCaso06_INAC=(String) context.getProperty("MotivoEstadoCaso06_INAC");
                        }
                        context.setContextType("MotivoEstadoCaso06_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso06_PROV") == null) {
                            context.MotivoEstadoCaso06_PROV = null;
                        } else {
                            context.MotivoEstadoCaso06_PROV=(String) context.getProperty("MotivoEstadoCaso06_PROV");
                        }
                        context.setContextType("MotivoEstadoCaso07_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso07_ACTI") == null) {
                            context.MotivoEstadoCaso07_ACTI = null;
                        } else {
                            context.MotivoEstadoCaso07_ACTI=(String) context.getProperty("MotivoEstadoCaso07_ACTI");
                        }
                        context.setContextType("MotivoEstadoCaso07_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso07_INAC") == null) {
                            context.MotivoEstadoCaso07_INAC = null;
                        } else {
                            context.MotivoEstadoCaso07_INAC=(String) context.getProperty("MotivoEstadoCaso07_INAC");
                        }
                        context.setContextType("MotivoEstadoCaso07_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso07_PROV") == null) {
                            context.MotivoEstadoCaso07_PROV = null;
                        } else {
                            context.MotivoEstadoCaso07_PROV=(String) context.getProperty("MotivoEstadoCaso07_PROV");
                        }
                        context.setContextType("MotivoEstadoCaso08_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso08_ACTI") == null) {
                            context.MotivoEstadoCaso08_ACTI = null;
                        } else {
                            context.MotivoEstadoCaso08_ACTI=(String) context.getProperty("MotivoEstadoCaso08_ACTI");
                        }
                        context.setContextType("MotivoEstadoCaso08_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso08_INAC") == null) {
                            context.MotivoEstadoCaso08_INAC = null;
                        } else {
                            context.MotivoEstadoCaso08_INAC=(String) context.getProperty("MotivoEstadoCaso08_INAC");
                        }
                        context.setContextType("MotivoEstadoCaso08_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso08_PROV") == null) {
                            context.MotivoEstadoCaso08_PROV = null;
                        } else {
                            context.MotivoEstadoCaso08_PROV=(String) context.getProperty("MotivoEstadoCaso08_PROV");
                        }
                        context.setContextType("MotivoEstadoCaso09_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso09_ACTI") == null) {
                            context.MotivoEstadoCaso09_ACTI = null;
                        } else {
                            context.MotivoEstadoCaso09_ACTI=(String) context.getProperty("MotivoEstadoCaso09_ACTI");
                        }
                        context.setContextType("MotivoEstadoCaso09_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso09_INAC") == null) {
                            context.MotivoEstadoCaso09_INAC = null;
                        } else {
                            context.MotivoEstadoCaso09_INAC=(String) context.getProperty("MotivoEstadoCaso09_INAC");
                        }
                        context.setContextType("MotivoEstadoCaso09_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso09_PROV") == null) {
                            context.MotivoEstadoCaso09_PROV = null;
                        } else {
                            context.MotivoEstadoCaso09_PROV=(String) context.getProperty("MotivoEstadoCaso09_PROV");
                        }
                        context.setContextType("MotivoEstadoCaso10_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso10_ACTI") == null) {
                            context.MotivoEstadoCaso10_ACTI = null;
                        } else {
                            context.MotivoEstadoCaso10_ACTI=(String) context.getProperty("MotivoEstadoCaso10_ACTI");
                        }
                        context.setContextType("MotivoEstadoCaso10_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso10_INAC") == null) {
                            context.MotivoEstadoCaso10_INAC = null;
                        } else {
                            context.MotivoEstadoCaso10_INAC=(String) context.getProperty("MotivoEstadoCaso10_INAC");
                        }
                        context.setContextType("MotivoEstadoCaso10_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso10_PROV") == null) {
                            context.MotivoEstadoCaso10_PROV = null;
                        } else {
                            context.MotivoEstadoCaso10_PROV=(String) context.getProperty("MotivoEstadoCaso10_PROV");
                        }
                        context.setContextType("MotivoEstadoCaso11_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso11_ACTI") == null) {
                            context.MotivoEstadoCaso11_ACTI = null;
                        } else {
                            context.MotivoEstadoCaso11_ACTI=(String) context.getProperty("MotivoEstadoCaso11_ACTI");
                        }
                        context.setContextType("MotivoEstadoCaso11_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso11_INAC") == null) {
                            context.MotivoEstadoCaso11_INAC = null;
                        } else {
                            context.MotivoEstadoCaso11_INAC=(String) context.getProperty("MotivoEstadoCaso11_INAC");
                        }
                        context.setContextType("MotivoEstadoCaso11_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso11_PROV") == null) {
                            context.MotivoEstadoCaso11_PROV = null;
                        } else {
                            context.MotivoEstadoCaso11_PROV=(String) context.getProperty("MotivoEstadoCaso11_PROV");
                        }
                        context.setContextType("MotivoEstadoCaso12_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso12_ACTI") == null) {
                            context.MotivoEstadoCaso12_ACTI = null;
                        } else {
                            context.MotivoEstadoCaso12_ACTI=(String) context.getProperty("MotivoEstadoCaso12_ACTI");
                        }
                        context.setContextType("MotivoEstadoCaso12_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso12_INAC") == null) {
                            context.MotivoEstadoCaso12_INAC = null;
                        } else {
                            context.MotivoEstadoCaso12_INAC=(String) context.getProperty("MotivoEstadoCaso12_INAC");
                        }
                        context.setContextType("MotivoEstadoCaso12_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso12_PROV") == null) {
                            context.MotivoEstadoCaso12_PROV = null;
                        } else {
                            context.MotivoEstadoCaso12_PROV=(String) context.getProperty("MotivoEstadoCaso12_PROV");
                        }
                        context.setContextType("MotivoEstadoCaso13_ACTI", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso13_ACTI") == null) {
                            context.MotivoEstadoCaso13_ACTI = null;
                        } else {
                            context.MotivoEstadoCaso13_ACTI=(String) context.getProperty("MotivoEstadoCaso13_ACTI");
                        }
                        context.setContextType("MotivoEstadoCaso13_INAC", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso13_INAC") == null) {
                            context.MotivoEstadoCaso13_INAC = null;
                        } else {
                            context.MotivoEstadoCaso13_INAC=(String) context.getProperty("MotivoEstadoCaso13_INAC");
                        }
                        context.setContextType("MotivoEstadoCaso13_PROV", "id_String");
                        if(context.getStringValue("MotivoEstadoCaso13_PROV") == null) {
                            context.MotivoEstadoCaso13_PROV = null;
                        } else {
                            context.MotivoEstadoCaso13_PROV=(String) context.getProperty("MotivoEstadoCaso13_PROV");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("outCodigo")) {
                context.outCodigo = (Boolean) parentContextMap.get("outCodigo");
            }if (parentContextMap.containsKey("archivoSalida")) {
                context.archivoSalida = (String) parentContextMap.get("archivoSalida");
            }if (parentContextMap.containsKey("infoConteoRegistros")) {
                context.infoConteoRegistros = (Integer) parentContextMap.get("infoConteoRegistros");
            }if (parentContextMap.containsKey("mail_PasswordMail")) {
                context.mail_PasswordMail = (String) parentContextMap.get("mail_PasswordMail");
            }if (parentContextMap.containsKey("mail_SMTPPort")) {
                context.mail_SMTPPort = (String) parentContextMap.get("mail_SMTPPort");
            }if (parentContextMap.containsKey("mail_UsernameMail")) {
                context.mail_UsernameMail = (String) parentContextMap.get("mail_UsernameMail");
            }if (parentContextMap.containsKey("mail_SMTPHost")) {
                context.mail_SMTPHost = (String) parentContextMap.get("mail_SMTPHost");
            }if (parentContextMap.containsKey("AuxCriterioActual")) {
                context.AuxCriterioActual = (Integer) parentContextMap.get("AuxCriterioActual");
            }if (parentContextMap.containsKey("AS_CRITERIO")) {
                context.AS_CRITERIO = (String) parentContextMap.get("AS_CRITERIO");
            }if (parentContextMap.containsKey("AS_DESCRIPCION")) {
                context.AS_DESCRIPCION = (String) parentContextMap.get("AS_DESCRIPCION");
            }if (parentContextMap.containsKey("AS_DOCUMENTO")) {
                context.AS_DOCUMENTO = (String) parentContextMap.get("AS_DOCUMENTO");
            }if (parentContextMap.containsKey("AS_OPERACION_ACTIVO")) {
                context.AS_OPERACION_ACTIVO = (String) parentContextMap.get("AS_OPERACION_ACTIVO");
            }if (parentContextMap.containsKey("AS_OPERACION_INACTIVO")) {
                context.AS_OPERACION_INACTIVO = (String) parentContextMap.get("AS_OPERACION_INACTIVO");
            }if (parentContextMap.containsKey("AS_OPERACION_PROVISIONAL")) {
                context.AS_OPERACION_PROVISIONAL = (String) parentContextMap.get("AS_OPERACION_PROVISIONAL");
            }if (parentContextMap.containsKey("AS_PRIMER_APELLIDO")) {
                context.AS_PRIMER_APELLIDO = (String) parentContextMap.get("AS_PRIMER_APELLIDO");
            }if (parentContextMap.containsKey("AS_PRIMER_NOMBRE")) {
                context.AS_PRIMER_NOMBRE = (String) parentContextMap.get("AS_PRIMER_NOMBRE");
            }if (parentContextMap.containsKey("AS_SEGUNDO_APELLIDO")) {
                context.AS_SEGUNDO_APELLIDO = (String) parentContextMap.get("AS_SEGUNDO_APELLIDO");
            }if (parentContextMap.containsKey("AS_SEGUNDO_NOMBRE")) {
                context.AS_SEGUNDO_NOMBRE = (String) parentContextMap.get("AS_SEGUNDO_NOMBRE");
            }if (parentContextMap.containsKey("AS_TIPO_DOCUMENTO")) {
                context.AS_TIPO_DOCUMENTO = (String) parentContextMap.get("AS_TIPO_DOCUMENTO");
            }if (parentContextMap.containsKey("fileSystem_Area")) {
                context.fileSystem_Area = (String) parentContextMap.get("fileSystem_Area");
            }if (parentContextMap.containsKey("fileSystem_Path")) {
                context.fileSystem_Path = (String) parentContextMap.get("fileSystem_Path");
            }if (parentContextMap.containsKey("infoCodigoTipoJob")) {
                context.infoCodigoTipoJob = (Integer) parentContextMap.get("infoCodigoTipoJob");
            }if (parentContextMap.containsKey("infoDescripcionJobProcesar")) {
                context.infoDescripcionJobProcesar = (String) parentContextMap.get("infoDescripcionJobProcesar");
            }if (parentContextMap.containsKey("infoEntidades")) {
                context.infoEntidades = (String) parentContextMap.get("infoEntidades");
            }if (parentContextMap.containsKey("infoIdEstadoActivo")) {
                context.infoIdEstadoActivo = (Integer) parentContextMap.get("infoIdEstadoActivo");
            }if (parentContextMap.containsKey("infoIdEstadoProcesado")) {
                context.infoIdEstadoProcesado = (Integer) parentContextMap.get("infoIdEstadoProcesado");
            }if (parentContextMap.containsKey("infoIdJobProcesar")) {
                context.infoIdJobProcesar = (Integer) parentContextMap.get("infoIdJobProcesar");
            }if (parentContextMap.containsKey("infoIdProceso")) {
                context.infoIdProceso = (Integer) parentContextMap.get("infoIdProceso");
            }if (parentContextMap.containsKey("infoIdTarchivoResultante")) {
                context.infoIdTarchivoResultante = (Integer) parentContextMap.get("infoIdTarchivoResultante");
            }if (parentContextMap.containsKey("infoTipoProceso")) {
                context.infoTipoProceso = (Integer) parentContextMap.get("infoTipoProceso");
            }if (parentContextMap.containsKey("infoUsuarioJobProcesar")) {
                context.infoUsuarioJobProcesar = (Integer) parentContextMap.get("infoUsuarioJobProcesar");
            }if (parentContextMap.containsKey("oracle_AdditionalParams")) {
                context.oracle_AdditionalParams = (String) parentContextMap.get("oracle_AdditionalParams");
            }if (parentContextMap.containsKey("oracle_Host")) {
                context.oracle_Host = (String) parentContextMap.get("oracle_Host");
            }if (parentContextMap.containsKey("oracle_Password")) {
                context.oracle_Password = (String) parentContextMap.get("oracle_Password");
            }if (parentContextMap.containsKey("oracle_Port")) {
                context.oracle_Port = (String) parentContextMap.get("oracle_Port");
            }if (parentContextMap.containsKey("oracle_Schema")) {
                context.oracle_Schema = (String) parentContextMap.get("oracle_Schema");
            }if (parentContextMap.containsKey("oracle_ServiceName")) {
                context.oracle_ServiceName = (String) parentContextMap.get("oracle_ServiceName");
            }if (parentContextMap.containsKey("oracle_Sid")) {
                context.oracle_Sid = (String) parentContextMap.get("oracle_Sid");
            }if (parentContextMap.containsKey("oracle_User")) {
                context.oracle_User = (String) parentContextMap.get("oracle_User");
            }if (parentContextMap.containsKey("archivoConfiguracion")) {
                context.archivoConfiguracion = (String) parentContextMap.get("archivoConfiguracion");
            }if (parentContextMap.containsKey("auxAumentoRegistros")) {
                context.auxAumentoRegistros = (Integer) parentContextMap.get("auxAumentoRegistros");
            }if (parentContextMap.containsKey("auxPosicionRegistros")) {
                context.auxPosicionRegistros = (Integer) parentContextMap.get("auxPosicionRegistros");
            }if (parentContextMap.containsKey("MotivoEstadoCaso00_PROV")) {
                context.MotivoEstadoCaso00_PROV = (String) parentContextMap.get("MotivoEstadoCaso00_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoCaso01_ACTI")) {
                context.MotivoEstadoCaso01_ACTI = (String) parentContextMap.get("MotivoEstadoCaso01_ACTI");
            }if (parentContextMap.containsKey("MotivoEstadoCaso01_INAC")) {
                context.MotivoEstadoCaso01_INAC = (String) parentContextMap.get("MotivoEstadoCaso01_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoCaso01_PROV")) {
                context.MotivoEstadoCaso01_PROV = (String) parentContextMap.get("MotivoEstadoCaso01_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoCaso02_ACTI")) {
                context.MotivoEstadoCaso02_ACTI = (String) parentContextMap.get("MotivoEstadoCaso02_ACTI");
            }if (parentContextMap.containsKey("MotivoEstadoCaso02_INAC")) {
                context.MotivoEstadoCaso02_INAC = (String) parentContextMap.get("MotivoEstadoCaso02_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoCaso02_PROV")) {
                context.MotivoEstadoCaso02_PROV = (String) parentContextMap.get("MotivoEstadoCaso02_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoCaso03_ACTI")) {
                context.MotivoEstadoCaso03_ACTI = (String) parentContextMap.get("MotivoEstadoCaso03_ACTI");
            }if (parentContextMap.containsKey("MotivoEstadoCaso03_INAC")) {
                context.MotivoEstadoCaso03_INAC = (String) parentContextMap.get("MotivoEstadoCaso03_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoCaso03_PROV")) {
                context.MotivoEstadoCaso03_PROV = (String) parentContextMap.get("MotivoEstadoCaso03_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoCaso04_ACTI")) {
                context.MotivoEstadoCaso04_ACTI = (String) parentContextMap.get("MotivoEstadoCaso04_ACTI");
            }if (parentContextMap.containsKey("MotivoEstadoCaso04_INAC")) {
                context.MotivoEstadoCaso04_INAC = (String) parentContextMap.get("MotivoEstadoCaso04_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoCaso04_PROV")) {
                context.MotivoEstadoCaso04_PROV = (String) parentContextMap.get("MotivoEstadoCaso04_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoCaso05_ACTI")) {
                context.MotivoEstadoCaso05_ACTI = (String) parentContextMap.get("MotivoEstadoCaso05_ACTI");
            }if (parentContextMap.containsKey("MotivoEstadoCaso05_INAC")) {
                context.MotivoEstadoCaso05_INAC = (String) parentContextMap.get("MotivoEstadoCaso05_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoCaso05_PROV")) {
                context.MotivoEstadoCaso05_PROV = (String) parentContextMap.get("MotivoEstadoCaso05_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoCaso06_ACTI")) {
                context.MotivoEstadoCaso06_ACTI = (String) parentContextMap.get("MotivoEstadoCaso06_ACTI");
            }if (parentContextMap.containsKey("MotivoEstadoCaso06_INAC")) {
                context.MotivoEstadoCaso06_INAC = (String) parentContextMap.get("MotivoEstadoCaso06_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoCaso06_PROV")) {
                context.MotivoEstadoCaso06_PROV = (String) parentContextMap.get("MotivoEstadoCaso06_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoCaso07_ACTI")) {
                context.MotivoEstadoCaso07_ACTI = (String) parentContextMap.get("MotivoEstadoCaso07_ACTI");
            }if (parentContextMap.containsKey("MotivoEstadoCaso07_INAC")) {
                context.MotivoEstadoCaso07_INAC = (String) parentContextMap.get("MotivoEstadoCaso07_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoCaso07_PROV")) {
                context.MotivoEstadoCaso07_PROV = (String) parentContextMap.get("MotivoEstadoCaso07_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoCaso08_ACTI")) {
                context.MotivoEstadoCaso08_ACTI = (String) parentContextMap.get("MotivoEstadoCaso08_ACTI");
            }if (parentContextMap.containsKey("MotivoEstadoCaso08_INAC")) {
                context.MotivoEstadoCaso08_INAC = (String) parentContextMap.get("MotivoEstadoCaso08_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoCaso08_PROV")) {
                context.MotivoEstadoCaso08_PROV = (String) parentContextMap.get("MotivoEstadoCaso08_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoCaso09_ACTI")) {
                context.MotivoEstadoCaso09_ACTI = (String) parentContextMap.get("MotivoEstadoCaso09_ACTI");
            }if (parentContextMap.containsKey("MotivoEstadoCaso09_INAC")) {
                context.MotivoEstadoCaso09_INAC = (String) parentContextMap.get("MotivoEstadoCaso09_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoCaso09_PROV")) {
                context.MotivoEstadoCaso09_PROV = (String) parentContextMap.get("MotivoEstadoCaso09_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoCaso10_ACTI")) {
                context.MotivoEstadoCaso10_ACTI = (String) parentContextMap.get("MotivoEstadoCaso10_ACTI");
            }if (parentContextMap.containsKey("MotivoEstadoCaso10_INAC")) {
                context.MotivoEstadoCaso10_INAC = (String) parentContextMap.get("MotivoEstadoCaso10_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoCaso10_PROV")) {
                context.MotivoEstadoCaso10_PROV = (String) parentContextMap.get("MotivoEstadoCaso10_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoCaso11_ACTI")) {
                context.MotivoEstadoCaso11_ACTI = (String) parentContextMap.get("MotivoEstadoCaso11_ACTI");
            }if (parentContextMap.containsKey("MotivoEstadoCaso11_INAC")) {
                context.MotivoEstadoCaso11_INAC = (String) parentContextMap.get("MotivoEstadoCaso11_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoCaso11_PROV")) {
                context.MotivoEstadoCaso11_PROV = (String) parentContextMap.get("MotivoEstadoCaso11_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoCaso12_ACTI")) {
                context.MotivoEstadoCaso12_ACTI = (String) parentContextMap.get("MotivoEstadoCaso12_ACTI");
            }if (parentContextMap.containsKey("MotivoEstadoCaso12_INAC")) {
                context.MotivoEstadoCaso12_INAC = (String) parentContextMap.get("MotivoEstadoCaso12_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoCaso12_PROV")) {
                context.MotivoEstadoCaso12_PROV = (String) parentContextMap.get("MotivoEstadoCaso12_PROV");
            }if (parentContextMap.containsKey("MotivoEstadoCaso13_ACTI")) {
                context.MotivoEstadoCaso13_ACTI = (String) parentContextMap.get("MotivoEstadoCaso13_ACTI");
            }if (parentContextMap.containsKey("MotivoEstadoCaso13_INAC")) {
                context.MotivoEstadoCaso13_INAC = (String) parentContextMap.get("MotivoEstadoCaso13_INAC");
            }if (parentContextMap.containsKey("MotivoEstadoCaso13_PROV")) {
                context.MotivoEstadoCaso13_PROV = (String) parentContextMap.get("MotivoEstadoCaso13_PROV");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        tStatCatcher_1.addMessage("begin");


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tOracleInput_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tOracleInput_1) {
globalMap.put("tOracleInput_1_SUBPROCESS_STATE", -1);

e_tOracleInput_1.printStackTrace();

}catch (java.lang.Error e_tOracleInput_1) {
globalMap.put("tOracleInput_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tOracleInput_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ETL_criterios");
        }
        tStatCatcher_1.addMessage(status==""?"end":status, (end-startTime));
        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     595349 characters generated by Talend Open Studio for ESB 
 *     on the October 28, 2024, 11:16:32 AM COT
 ************************************************************************************************/