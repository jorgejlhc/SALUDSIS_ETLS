// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package med_cargar_medicamentos_genericos.cargamedicamentosgenericos_3_7;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.Utils;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJavaRow_5
	//import java.util.List;

	//the import part of tJavaRow_7
	//import java.util.List;

	//the import part of tJavaRow_10
	//import java.util.List;

	//the import part of tJavaRow_6
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;

	//the import part of tJavaRow_4
	//import java.util.List;

	//the import part of tJavaRow_8
	//import java.util.List;

	//the import part of tJavaFlex_1
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJava_4
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: CargaMedicamentosGenericos Purpose: <br>
 * Description:  <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status PROD
 */
public class CargaMedicamentosGenericos implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(db_origen_AdditionalParams != null){
				
					this.setProperty("db_origen_AdditionalParams", db_origen_AdditionalParams.toString());
				
			}
			
			if(db_origen_Login != null){
				
					this.setProperty("db_origen_Login", db_origen_Login.toString());
				
			}
			
			if(db_origen_Password != null){
				
					this.setProperty("db_origen_Password", db_origen_Password.toString());
				
			}
			
			if(db_origen_Port != null){
				
					this.setProperty("db_origen_Port", db_origen_Port.toString());
				
			}
			
			if(db_origen_Schema != null){
				
					this.setProperty("db_origen_Schema", db_origen_Schema.toString());
				
			}
			
			if(db_origen_Server != null){
				
					this.setProperty("db_origen_Server", db_origen_Server.toString());
				
			}
			
			if(db_origen_ServiceName != null){
				
					this.setProperty("db_origen_ServiceName", db_origen_ServiceName.toString());
				
			}
			
			if(ERROR != null){
				
					this.setProperty("ERROR", ERROR.toString());
				
			}
			
			if(ESTADO != null){
				
					this.setProperty("ESTADO", ESTADO.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
			if(carga_id != null){
				
					this.setProperty("carga_id", carga_id.toString());
				
			}
			
			if(Contenido != null){
				
					this.setProperty("Contenido", Contenido.toString());
				
			}
			
			if(result != null){
				
					this.setProperty("result", result.toString());
				
			}
			
			if(Salida != null){
				
					this.setProperty("Salida", Salida.toString());
				
			}
			
			if(TContenido != null){
				
					this.setProperty("TContenido", TContenido.toString());
				
			}
			
			if(Autoincremental != null){
				
					this.setProperty("Autoincremental", Autoincremental.toString());
				
			}
			
			if(nombre != null){
				
					this.setProperty("nombre", nombre.toString());
				
			}
			
			if(IsValid != null){
				
					this.setProperty("IsValid", IsValid.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String db_origen_AdditionalParams;
public String getDb_origen_AdditionalParams(){
	return this.db_origen_AdditionalParams;
}
public String db_origen_Login;
public String getDb_origen_Login(){
	return this.db_origen_Login;
}
public String db_origen_Password;
public String getDb_origen_Password(){
	return this.db_origen_Password;
}
public String db_origen_Port;
public String getDb_origen_Port(){
	return this.db_origen_Port;
}
public String db_origen_Schema;
public String getDb_origen_Schema(){
	return this.db_origen_Schema;
}
public String db_origen_Server;
public String getDb_origen_Server(){
	return this.db_origen_Server;
}
public String db_origen_ServiceName;
public String getDb_origen_ServiceName(){
	return this.db_origen_ServiceName;
}
public String ERROR;
public String getERROR(){
	return this.ERROR;
}
public String ESTADO;
public String getESTADO(){
	return this.ESTADO;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
public BigDecimal carga_id;
public BigDecimal getCarga_id(){
	return this.carga_id;
}
public Object Contenido;
public Object getContenido(){
	return this.Contenido;
}
public String result;
public String getResult(){
	return this.result;
}
public Object Salida;
public Object getSalida(){
	return this.Salida;
}
public String TContenido;
public String getTContenido(){
	return this.TContenido;
}
public Integer Autoincremental;
public Integer getAutoincremental(){
	return this.Autoincremental;
}
public String nombre;
public String getNombre(){
	return this.nombre;
}
public Boolean IsValid;
public Boolean getIsValid(){
	return this.IsValid;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "3.7";
	private final String jobName = "CargaMedicamentosGenericos";
	private final String projectName = "MED_CARGAR_MEDICAMENTOS_GENERICOS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				CargaMedicamentosGenericos.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(CargaMedicamentosGenericos.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tOracleInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJoin_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tNormalize_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJoin_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tNormalize_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJoin_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								errorCode = null;
								tFixedFlowInput_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleRow_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHash_row9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHash_row35_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHash_row15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDenormalize_1_DenormalizeOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tDenormalize_1_ArrayIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tDenormalize_1_ArrayIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_1_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_1_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_1_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleRow_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 4000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 4000;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row28Struct row28 = new row28Struct();




	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row28Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_CargaMedicamentosGenericos_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row28Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_7", false);
		start_Hash.put("tOracleInput_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_7";
	
	
		int tos_count_tOracleInput_7 = 0;
		
	


	
		    int nb_line_tOracleInput_7 = 0;
		    java.sql.Connection conn_tOracleInput_7 = null;
				conn_tOracleInput_7 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_7 = false;
				boolean isConnectionWrapped_tOracleInput_7 = !(conn_tOracleInput_7 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_7.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_7 = null;
                if (isConnectionWrapped_tOracleInput_7) {
					unwrappedOraConn_tOracleInput_7 = conn_tOracleInput_7.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_7 != null) {
                        isTimeZoneNull_tOracleInput_7 = (unwrappedOraConn_tOracleInput_7.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_7 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_7).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_7) {
					java.sql.Statement stmtGetTZ_tOracleInput_7 = conn_tOracleInput_7.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_7 = stmtGetTZ_tOracleInput_7.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_7 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_7.next()) {
						sessionTimezone_tOracleInput_7 = rsGetTZ_tOracleInput_7.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_7 && unwrappedOraConn_tOracleInput_7 != null) {
                        unwrappedOraConn_tOracleInput_7.setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_7).setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_7 = conn_tOracleInput_7.createStatement();

		    String dbquery_tOracleInput_7 = "SELECT \n  ID, \n  UPPER(TRIM(MED.MayusculasSinAcentos(NOMBRE))) AS NOMBRE, \n  UPPER(TRIM(MED.MayusculasSinAcentos(SIG"
+"LA))) AS SIGLA  \nFROM MED_TFORMASFARMACEUTICAS\nWHERE ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_7_QUERY",dbquery_tOracleInput_7);

		    java.sql.ResultSet rs_tOracleInput_7 = null;

		    try {
		    	rs_tOracleInput_7 = stmt_tOracleInput_7.executeQuery(dbquery_tOracleInput_7);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_7 = rs_tOracleInput_7.getMetaData();
		    	int colQtyInRs_tOracleInput_7 = rsmd_tOracleInput_7.getColumnCount();

		    String tmpContent_tOracleInput_7 = null;
		    
		    
		    while (rs_tOracleInput_7.next()) {
		        nb_line_tOracleInput_7++;
		        
							if(colQtyInRs_tOracleInput_7 < 1) {
								row28.ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(1) != null) {
						row28.ID = rs_tOracleInput_7.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 2) {
								row28.NOMBRE = null;
							} else {
	                         		
        	row28.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 3) {
								row28.SIGLA = null;
							} else {
	                         		
        	row28.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 3, false);
		                    }
					




 



/**
 * [tOracleInput_7 begin ] stop
 */
	
	/**
	 * [tOracleInput_7 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 


	tos_count_tOracleInput_7++;

/**
 * [tOracleInput_7 main ] stop
 */
	
	/**
	 * [tOracleInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row28"
						
						);
					}
					



    
		row28Struct oneRow_tHashOutput_2 = new row28Struct();
				
					oneRow_tHashOutput_2.ID = row28.ID;
					oneRow_tHashOutput_2.NOMBRE = row28.NOMBRE;
					oneRow_tHashOutput_2.SIGLA = row28.SIGLA;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_7 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

}
}finally{
	if (rs_tOracleInput_7 != null) {
		rs_tOracleInput_7.close();
	}
	if (stmt_tOracleInput_7 != null) {
		stmt_tOracleInput_7.close();
	}
}

globalMap.put("tOracleInput_7_NB_LINE",nb_line_tOracleInput_7);
 

ok_Hash.put("tOracleInput_7", true);
end_Hash.put("tOracleInput_7", System.currentTimeMillis());




/**
 * [tOracleInput_7 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tOracleInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class next_2Struct implements routines.system.IPersistableRow<next_2Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 200;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 200;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado;

				public String getEstado () {
					return this.Estado;
				}

				public Boolean EstadoIsNullable(){
				    return true;
				}
				public Boolean EstadoIsKey(){
				    return false;
				}
				public Integer EstadoLength(){
				    return 50;
				}
				public Integer EstadoPrecision(){
				    return 0;
				}
				public String EstadoDefault(){
				
					return null;
				
				}
				public String EstadoComment(){
				
				    return "";
				
				}
				public String EstadoPattern(){
				
					return "";
				
				}
				public String EstadoOriginalDbColumnName(){
				
					return "Estado";
				
				}

				
			    public String Insert;

				public String getInsert () {
					return this.Insert;
				}

				public Boolean InsertIsNullable(){
				    return true;
				}
				public Boolean InsertIsKey(){
				    return false;
				}
				public Integer InsertLength(){
				    return 50;
				}
				public Integer InsertPrecision(){
				    return 0;
				}
				public String InsertDefault(){
				
					return null;
				
				}
				public String InsertComment(){
				
				    return "";
				
				}
				public String InsertPattern(){
				
					return "";
				
				}
				public String InsertOriginalDbColumnName(){
				
					return "Insert";
				
				}

				
			    public String Message;

				public String getMessage () {
					return this.Message;
				}

				public Boolean MessageIsNullable(){
				    return true;
				}
				public Boolean MessageIsKey(){
				    return false;
				}
				public Integer MessageLength(){
				    return 200;
				}
				public Integer MessagePrecision(){
				    return 0;
				}
				public String MessageDefault(){
				
					return null;
				
				}
				public String MessageComment(){
				
				    return "";
				
				}
				public String MessagePattern(){
				
					return "";
				
				}
				public String MessageOriginalDbColumnName(){
				
					return "Message";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 350;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "";
				
				}
				public String NGenericoPattern(){
				
					return "";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 200;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "";
				
				}
				public String ConcentracionPattern(){
				
					return "";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String CodAtc;

				public String getCodAtc () {
					return this.CodAtc;
				}

				public Boolean CodAtcIsNullable(){
				    return true;
				}
				public Boolean CodAtcIsKey(){
				    return false;
				}
				public Integer CodAtcLength(){
				    return 50;
				}
				public Integer CodAtcPrecision(){
				    return 0;
				}
				public String CodAtcDefault(){
				
					return null;
				
				}
				public String CodAtcComment(){
				
				    return "";
				
				}
				public String CodAtcPattern(){
				
					return "";
				
				}
				public String CodAtcOriginalDbColumnName(){
				
					return "CodAtc";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 200;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "";
				
				}
				public String ViaAdminPattern(){
				
					return "";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String CatFarmacologica;

				public String getCatFarmacologica () {
					return this.CatFarmacologica;
				}

				public Boolean CatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologicaIsKey(){
				    return false;
				}
				public Integer CatFarmacologicaLength(){
				    return 200;
				}
				public Integer CatFarmacologicaPrecision(){
				    return 0;
				}
				public String CatFarmacologicaDefault(){
				
					return null;
				
				}
				public String CatFarmacologicaComment(){
				
				    return "";
				
				}
				public String CatFarmacologicaPattern(){
				
					return "";
				
				}
				public String CatFarmacologicaOriginalDbColumnName(){
				
					return "CatFarmacologica";
				
				}

				
			    public String FormFarmaceutica;

				public String getFormFarmaceutica () {
					return this.FormFarmaceutica;
				}

				public Boolean FormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FormFarmaceuticaLength(){
				    return 200;
				}
				public Integer FormFarmaceuticaPrecision(){
				    return 0;
				}
				public String FormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String FormFarmaceuticaPattern(){
				
					return "";
				
				}
				public String FormFarmaceuticaOriginalDbColumnName(){
				
					return "FormFarmaceutica";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado = readString(dis);
					
					this.Insert = readString(dis);
					
					this.Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado = readString(dis);
					
					this.Insert = readString(dis);
					
					this.Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado,dos);
					
					// String
				
						writeString(this.Insert,dos);
					
					// String
				
						writeString(this.Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado,dos);
					
					// String
				
						writeString(this.Insert,dos);
					
					// String
				
						writeString(this.Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado="+Estado);
		sb.append(",Insert="+Insert);
		sb.append(",Message="+Message);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",CodAtc="+CodAtc);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",CatFarmacologica="+CatFarmacologica);
		sb.append(",FormFarmaceutica="+FormFarmaceutica);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(next_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String NOMBRE_GENERICO;

				public String getNOMBRE_GENERICO () {
					return this.NOMBRE_GENERICO;
				}

				public Boolean NOMBRE_GENERICOIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_GENERICOIsKey(){
				    return false;
				}
				public Integer NOMBRE_GENERICOLength(){
				    return 0;
				}
				public Integer NOMBRE_GENERICOPrecision(){
				    return 0;
				}
				public String NOMBRE_GENERICODefault(){
				
					return null;
				
				}
				public String NOMBRE_GENERICOComment(){
				
				    return "";
				
				}
				public String NOMBRE_GENERICOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NOMBRE_GENERICOOriginalDbColumnName(){
				
					return "NOMBRE_GENERICO";
				
				}

				
			    public String CONCENTRACION;

				public String getCONCENTRACION () {
					return this.CONCENTRACION;
				}

				public Boolean CONCENTRACIONIsNullable(){
				    return true;
				}
				public Boolean CONCENTRACIONIsKey(){
				    return false;
				}
				public Integer CONCENTRACIONLength(){
				    return 0;
				}
				public Integer CONCENTRACIONPrecision(){
				    return 0;
				}
				public String CONCENTRACIONDefault(){
				
					return null;
				
				}
				public String CONCENTRACIONComment(){
				
				    return "";
				
				}
				public String CONCENTRACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONCENTRACIONOriginalDbColumnName(){
				
					return "CONCENTRACION";
				
				}

				
			    public String CODIGO_ATC;

				public String getCODIGO_ATC () {
					return this.CODIGO_ATC;
				}

				public Boolean CODIGO_ATCIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ATCIsKey(){
				    return false;
				}
				public Integer CODIGO_ATCLength(){
				    return 0;
				}
				public Integer CODIGO_ATCPrecision(){
				    return 0;
				}
				public String CODIGO_ATCDefault(){
				
					return null;
				
				}
				public String CODIGO_ATCComment(){
				
				    return "";
				
				}
				public String CODIGO_ATCPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CODIGO_ATCOriginalDbColumnName(){
				
					return "CODIGO_ATC";
				
				}

				
			    public String VIA_ADMINTRACION;

				public String getVIA_ADMINTRACION () {
					return this.VIA_ADMINTRACION;
				}

				public Boolean VIA_ADMINTRACIONIsNullable(){
				    return true;
				}
				public Boolean VIA_ADMINTRACIONIsKey(){
				    return false;
				}
				public Integer VIA_ADMINTRACIONLength(){
				    return 0;
				}
				public Integer VIA_ADMINTRACIONPrecision(){
				    return 0;
				}
				public String VIA_ADMINTRACIONDefault(){
				
					return null;
				
				}
				public String VIA_ADMINTRACIONComment(){
				
				    return "";
				
				}
				public String VIA_ADMINTRACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VIA_ADMINTRACIONOriginalDbColumnName(){
				
					return "VIA_ADMINTRACION";
				
				}

				
			    public String CATEGORIA_FARMACOLOGICA;

				public String getCATEGORIA_FARMACOLOGICA () {
					return this.CATEGORIA_FARMACOLOGICA;
				}

				public Boolean CATEGORIA_FARMACOLOGICAIsNullable(){
				    return true;
				}
				public Boolean CATEGORIA_FARMACOLOGICAIsKey(){
				    return false;
				}
				public Integer CATEGORIA_FARMACOLOGICALength(){
				    return 0;
				}
				public Integer CATEGORIA_FARMACOLOGICAPrecision(){
				    return 0;
				}
				public String CATEGORIA_FARMACOLOGICADefault(){
				
					return null;
				
				}
				public String CATEGORIA_FARMACOLOGICAComment(){
				
				    return "";
				
				}
				public String CATEGORIA_FARMACOLOGICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CATEGORIA_FARMACOLOGICAOriginalDbColumnName(){
				
					return "CATEGORIA_FARMACOLOGICA";
				
				}

				
			    public String FORMA_FARMACEUTICA;

				public String getFORMA_FARMACEUTICA () {
					return this.FORMA_FARMACEUTICA;
				}

				public Boolean FORMA_FARMACEUTICAIsNullable(){
				    return true;
				}
				public Boolean FORMA_FARMACEUTICAIsKey(){
				    return false;
				}
				public Integer FORMA_FARMACEUTICALength(){
				    return 0;
				}
				public Integer FORMA_FARMACEUTICAPrecision(){
				    return 0;
				}
				public String FORMA_FARMACEUTICADefault(){
				
					return null;
				
				}
				public String FORMA_FARMACEUTICAComment(){
				
				    return "";
				
				}
				public String FORMA_FARMACEUTICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FORMA_FARMACEUTICAOriginalDbColumnName(){
				
					return "FORMA_FARMACEUTICA";
				
				}

				
			    public String IDENTIFICADOR_UNICO;

				public String getIDENTIFICADOR_UNICO () {
					return this.IDENTIFICADOR_UNICO;
				}

				public Boolean IDENTIFICADOR_UNICOIsNullable(){
				    return true;
				}
				public Boolean IDENTIFICADOR_UNICOIsKey(){
				    return false;
				}
				public Integer IDENTIFICADOR_UNICOLength(){
				    return null;
				}
				public Integer IDENTIFICADOR_UNICOPrecision(){
				    return null;
				}
				public String IDENTIFICADOR_UNICODefault(){
				
					return null;
				
				}
				public String IDENTIFICADOR_UNICOComment(){
				
				    return "";
				
				}
				public String IDENTIFICADOR_UNICOPattern(){
				
					return "";
				
				}
				public String IDENTIFICADOR_UNICOOriginalDbColumnName(){
				
					return "IDENTIFICADOR_UNICO";
				
				}

				
			    public String SUSTANCIA_ACTIVA;

				public String getSUSTANCIA_ACTIVA () {
					return this.SUSTANCIA_ACTIVA;
				}

				public Boolean SUSTANCIA_ACTIVAIsNullable(){
				    return true;
				}
				public Boolean SUSTANCIA_ACTIVAIsKey(){
				    return false;
				}
				public Integer SUSTANCIA_ACTIVALength(){
				    return 0;
				}
				public Integer SUSTANCIA_ACTIVAPrecision(){
				    return 0;
				}
				public String SUSTANCIA_ACTIVADefault(){
				
					return null;
				
				}
				public String SUSTANCIA_ACTIVAComment(){
				
				    return "";
				
				}
				public String SUSTANCIA_ACTIVAPattern(){
				
					return "";
				
				}
				public String SUSTANCIA_ACTIVAOriginalDbColumnName(){
				
					return "SUSTANCIA_ACTIVA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.NOMBRE_GENERICO = readString(dis);
					
					this.CONCENTRACION = readString(dis);
					
					this.CODIGO_ATC = readString(dis);
					
					this.VIA_ADMINTRACION = readString(dis);
					
					this.CATEGORIA_FARMACOLOGICA = readString(dis);
					
					this.FORMA_FARMACEUTICA = readString(dis);
					
					this.IDENTIFICADOR_UNICO = readString(dis);
					
					this.SUSTANCIA_ACTIVA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.NOMBRE_GENERICO = readString(dis);
					
					this.CONCENTRACION = readString(dis);
					
					this.CODIGO_ATC = readString(dis);
					
					this.VIA_ADMINTRACION = readString(dis);
					
					this.CATEGORIA_FARMACOLOGICA = readString(dis);
					
					this.FORMA_FARMACEUTICA = readString(dis);
					
					this.IDENTIFICADOR_UNICO = readString(dis);
					
					this.SUSTANCIA_ACTIVA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NOMBRE_GENERICO,dos);
					
					// String
				
						writeString(this.CONCENTRACION,dos);
					
					// String
				
						writeString(this.CODIGO_ATC,dos);
					
					// String
				
						writeString(this.VIA_ADMINTRACION,dos);
					
					// String
				
						writeString(this.CATEGORIA_FARMACOLOGICA,dos);
					
					// String
				
						writeString(this.FORMA_FARMACEUTICA,dos);
					
					// String
				
						writeString(this.IDENTIFICADOR_UNICO,dos);
					
					// String
				
						writeString(this.SUSTANCIA_ACTIVA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NOMBRE_GENERICO,dos);
					
					// String
				
						writeString(this.CONCENTRACION,dos);
					
					// String
				
						writeString(this.CODIGO_ATC,dos);
					
					// String
				
						writeString(this.VIA_ADMINTRACION,dos);
					
					// String
				
						writeString(this.CATEGORIA_FARMACOLOGICA,dos);
					
					// String
				
						writeString(this.FORMA_FARMACEUTICA,dos);
					
					// String
				
						writeString(this.IDENTIFICADOR_UNICO,dos);
					
					// String
				
						writeString(this.SUSTANCIA_ACTIVA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NOMBRE_GENERICO="+NOMBRE_GENERICO);
		sb.append(",CONCENTRACION="+CONCENTRACION);
		sb.append(",CODIGO_ATC="+CODIGO_ATC);
		sb.append(",VIA_ADMINTRACION="+VIA_ADMINTRACION);
		sb.append(",CATEGORIA_FARMACOLOGICA="+CATEGORIA_FARMACOLOGICA);
		sb.append(",FORMA_FARMACEUTICA="+FORMA_FARMACEUTICA);
		sb.append(",IDENTIFICADOR_UNICO="+IDENTIFICADOR_UNICO);
		sb.append(",SUSTANCIA_ACTIVA="+SUSTANCIA_ACTIVA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String NOMBRE_GENERICO;

				public String getNOMBRE_GENERICO () {
					return this.NOMBRE_GENERICO;
				}

				public Boolean NOMBRE_GENERICOIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_GENERICOIsKey(){
				    return false;
				}
				public Integer NOMBRE_GENERICOLength(){
				    return 0;
				}
				public Integer NOMBRE_GENERICOPrecision(){
				    return 0;
				}
				public String NOMBRE_GENERICODefault(){
				
					return null;
				
				}
				public String NOMBRE_GENERICOComment(){
				
				    return "";
				
				}
				public String NOMBRE_GENERICOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NOMBRE_GENERICOOriginalDbColumnName(){
				
					return "NOMBRE_GENERICO";
				
				}

				
			    public String CONCENTRACION;

				public String getCONCENTRACION () {
					return this.CONCENTRACION;
				}

				public Boolean CONCENTRACIONIsNullable(){
				    return true;
				}
				public Boolean CONCENTRACIONIsKey(){
				    return false;
				}
				public Integer CONCENTRACIONLength(){
				    return 0;
				}
				public Integer CONCENTRACIONPrecision(){
				    return 0;
				}
				public String CONCENTRACIONDefault(){
				
					return null;
				
				}
				public String CONCENTRACIONComment(){
				
				    return "";
				
				}
				public String CONCENTRACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONCENTRACIONOriginalDbColumnName(){
				
					return "CONCENTRACION";
				
				}

				
			    public String CODIGO_ATC;

				public String getCODIGO_ATC () {
					return this.CODIGO_ATC;
				}

				public Boolean CODIGO_ATCIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ATCIsKey(){
				    return false;
				}
				public Integer CODIGO_ATCLength(){
				    return 0;
				}
				public Integer CODIGO_ATCPrecision(){
				    return 0;
				}
				public String CODIGO_ATCDefault(){
				
					return null;
				
				}
				public String CODIGO_ATCComment(){
				
				    return "";
				
				}
				public String CODIGO_ATCPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CODIGO_ATCOriginalDbColumnName(){
				
					return "CODIGO_ATC";
				
				}

				
			    public String VIA_ADMINTRACION;

				public String getVIA_ADMINTRACION () {
					return this.VIA_ADMINTRACION;
				}

				public Boolean VIA_ADMINTRACIONIsNullable(){
				    return true;
				}
				public Boolean VIA_ADMINTRACIONIsKey(){
				    return false;
				}
				public Integer VIA_ADMINTRACIONLength(){
				    return 0;
				}
				public Integer VIA_ADMINTRACIONPrecision(){
				    return 0;
				}
				public String VIA_ADMINTRACIONDefault(){
				
					return null;
				
				}
				public String VIA_ADMINTRACIONComment(){
				
				    return "";
				
				}
				public String VIA_ADMINTRACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VIA_ADMINTRACIONOriginalDbColumnName(){
				
					return "VIA_ADMINTRACION";
				
				}

				
			    public String CATEGORIA_FARMACOLOGICA;

				public String getCATEGORIA_FARMACOLOGICA () {
					return this.CATEGORIA_FARMACOLOGICA;
				}

				public Boolean CATEGORIA_FARMACOLOGICAIsNullable(){
				    return true;
				}
				public Boolean CATEGORIA_FARMACOLOGICAIsKey(){
				    return false;
				}
				public Integer CATEGORIA_FARMACOLOGICALength(){
				    return 0;
				}
				public Integer CATEGORIA_FARMACOLOGICAPrecision(){
				    return 0;
				}
				public String CATEGORIA_FARMACOLOGICADefault(){
				
					return null;
				
				}
				public String CATEGORIA_FARMACOLOGICAComment(){
				
				    return "";
				
				}
				public String CATEGORIA_FARMACOLOGICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CATEGORIA_FARMACOLOGICAOriginalDbColumnName(){
				
					return "CATEGORIA_FARMACOLOGICA";
				
				}

				
			    public String FORMA_FARMACEUTICA;

				public String getFORMA_FARMACEUTICA () {
					return this.FORMA_FARMACEUTICA;
				}

				public Boolean FORMA_FARMACEUTICAIsNullable(){
				    return true;
				}
				public Boolean FORMA_FARMACEUTICAIsKey(){
				    return false;
				}
				public Integer FORMA_FARMACEUTICALength(){
				    return 0;
				}
				public Integer FORMA_FARMACEUTICAPrecision(){
				    return 0;
				}
				public String FORMA_FARMACEUTICADefault(){
				
					return null;
				
				}
				public String FORMA_FARMACEUTICAComment(){
				
				    return "";
				
				}
				public String FORMA_FARMACEUTICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FORMA_FARMACEUTICAOriginalDbColumnName(){
				
					return "FORMA_FARMACEUTICA";
				
				}

				
			    public String IDENTIFICADOR_UNICO;

				public String getIDENTIFICADOR_UNICO () {
					return this.IDENTIFICADOR_UNICO;
				}

				public Boolean IDENTIFICADOR_UNICOIsNullable(){
				    return true;
				}
				public Boolean IDENTIFICADOR_UNICOIsKey(){
				    return false;
				}
				public Integer IDENTIFICADOR_UNICOLength(){
				    return null;
				}
				public Integer IDENTIFICADOR_UNICOPrecision(){
				    return null;
				}
				public String IDENTIFICADOR_UNICODefault(){
				
					return null;
				
				}
				public String IDENTIFICADOR_UNICOComment(){
				
				    return "";
				
				}
				public String IDENTIFICADOR_UNICOPattern(){
				
					return "";
				
				}
				public String IDENTIFICADOR_UNICOOriginalDbColumnName(){
				
					return "IDENTIFICADOR_UNICO";
				
				}

				
			    public String SUSTANCIA_ACTIVA;

				public String getSUSTANCIA_ACTIVA () {
					return this.SUSTANCIA_ACTIVA;
				}

				public Boolean SUSTANCIA_ACTIVAIsNullable(){
				    return true;
				}
				public Boolean SUSTANCIA_ACTIVAIsKey(){
				    return false;
				}
				public Integer SUSTANCIA_ACTIVALength(){
				    return 0;
				}
				public Integer SUSTANCIA_ACTIVAPrecision(){
				    return 0;
				}
				public String SUSTANCIA_ACTIVADefault(){
				
					return null;
				
				}
				public String SUSTANCIA_ACTIVAComment(){
				
				    return "";
				
				}
				public String SUSTANCIA_ACTIVAPattern(){
				
					return "";
				
				}
				public String SUSTANCIA_ACTIVAOriginalDbColumnName(){
				
					return "SUSTANCIA_ACTIVA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.NOMBRE_GENERICO = readString(dis);
					
					this.CONCENTRACION = readString(dis);
					
					this.CODIGO_ATC = readString(dis);
					
					this.VIA_ADMINTRACION = readString(dis);
					
					this.CATEGORIA_FARMACOLOGICA = readString(dis);
					
					this.FORMA_FARMACEUTICA = readString(dis);
					
					this.IDENTIFICADOR_UNICO = readString(dis);
					
					this.SUSTANCIA_ACTIVA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.NOMBRE_GENERICO = readString(dis);
					
					this.CONCENTRACION = readString(dis);
					
					this.CODIGO_ATC = readString(dis);
					
					this.VIA_ADMINTRACION = readString(dis);
					
					this.CATEGORIA_FARMACOLOGICA = readString(dis);
					
					this.FORMA_FARMACEUTICA = readString(dis);
					
					this.IDENTIFICADOR_UNICO = readString(dis);
					
					this.SUSTANCIA_ACTIVA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NOMBRE_GENERICO,dos);
					
					// String
				
						writeString(this.CONCENTRACION,dos);
					
					// String
				
						writeString(this.CODIGO_ATC,dos);
					
					// String
				
						writeString(this.VIA_ADMINTRACION,dos);
					
					// String
				
						writeString(this.CATEGORIA_FARMACOLOGICA,dos);
					
					// String
				
						writeString(this.FORMA_FARMACEUTICA,dos);
					
					// String
				
						writeString(this.IDENTIFICADOR_UNICO,dos);
					
					// String
				
						writeString(this.SUSTANCIA_ACTIVA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NOMBRE_GENERICO,dos);
					
					// String
				
						writeString(this.CONCENTRACION,dos);
					
					// String
				
						writeString(this.CODIGO_ATC,dos);
					
					// String
				
						writeString(this.VIA_ADMINTRACION,dos);
					
					// String
				
						writeString(this.CATEGORIA_FARMACOLOGICA,dos);
					
					// String
				
						writeString(this.FORMA_FARMACEUTICA,dos);
					
					// String
				
						writeString(this.IDENTIFICADOR_UNICO,dos);
					
					// String
				
						writeString(this.SUSTANCIA_ACTIVA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NOMBRE_GENERICO="+NOMBRE_GENERICO);
		sb.append(",CONCENTRACION="+CONCENTRACION);
		sb.append(",CODIGO_ATC="+CODIGO_ATC);
		sb.append(",VIA_ADMINTRACION="+VIA_ADMINTRACION);
		sb.append(",CATEGORIA_FARMACOLOGICA="+CATEGORIA_FARMACOLOGICA);
		sb.append(",FORMA_FARMACEUTICA="+FORMA_FARMACEUTICA);
		sb.append(",IDENTIFICADOR_UNICO="+IDENTIFICADOR_UNICO);
		sb.append(",SUSTANCIA_ACTIVA="+SUSTANCIA_ACTIVA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public Object CONTENIDO;

				public Object getCONTENIDO () {
					return this.CONTENIDO;
				}

				public Boolean CONTENIDOIsNullable(){
				    return false;
				}
				public Boolean CONTENIDOIsKey(){
				    return false;
				}
				public Integer CONTENIDOLength(){
				    return null;
				}
				public Integer CONTENIDOPrecision(){
				    return 0;
				}
				public String CONTENIDODefault(){
				
					return "";
				
				}
				public String CONTENIDOComment(){
				
				    return "";
				
				}
				public String CONTENIDOPattern(){
				
					return "";
				
				}
				public String CONTENIDOOriginalDbColumnName(){
				
					return "CONTENIDO";
				
				}

				
			    public String TCONTENIDO;

				public String getTCONTENIDO () {
					return this.TCONTENIDO;
				}

				public Boolean TCONTENIDOIsNullable(){
				    return false;
				}
				public Boolean TCONTENIDOIsKey(){
				    return false;
				}
				public Integer TCONTENIDOLength(){
				    return 300;
				}
				public Integer TCONTENIDOPrecision(){
				    return 0;
				}
				public String TCONTENIDODefault(){
				
					return null;
				
				}
				public String TCONTENIDOComment(){
				
				    return "";
				
				}
				public String TCONTENIDOPattern(){
				
					return "";
				
				}
				public String TCONTENIDOOriginalDbColumnName(){
				
					return "TCONTENIDO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.ID = this.ID;
	            other.CONTENIDO = this.CONTENIDO;
	            other.TCONTENIDO = this.TCONTENIDO;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.CONTENIDO = (Object) dis.readObject();
					
					this.TCONTENIDO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.CONTENIDO = (Object) dis.readObject();
					
					this.TCONTENIDO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// Object
				
       			    	dos.writeObject(this.CONTENIDO);
					
					// String
				
						writeString(this.TCONTENIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTENIDO);
					
					// String
				
						writeString(this.TCONTENIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CONTENIDO="+String.valueOf(CONTENIDO));
		sb.append(",TCONTENIDO="+TCONTENIDO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class update_estadoStruct implements routines.system.IPersistableRow<update_estadoStruct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public BigDecimal Id_;

				public BigDecimal getId_ () {
					return this.Id_;
				}

				public Boolean Id_IsNullable(){
				    return true;
				}
				public Boolean Id_IsKey(){
				    return false;
				}
				public Integer Id_Length(){
				    return null;
				}
				public Integer Id_Precision(){
				    return null;
				}
				public String Id_Default(){
				
					return null;
				
				}
				public String Id_Comment(){
				
				    return "";
				
				}
				public String Id_Pattern(){
				
					return "";
				
				}
				public String Id_OriginalDbColumnName(){
				
					return "Id_";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
						this.Id_ = (BigDecimal) dis.readObject();
					
					this.Estado_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
						this.Id_ = (BigDecimal) dis.readObject();
					
					this.Estado_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.Id_);
					
					// String
				
						writeString(this.Estado_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Id_);
					
					// String
				
						writeString(this.Estado_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id_="+String.valueOf(Id_));
		sb.append(",Estado_="+Estado_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update_estadoStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class next_1Struct implements routines.system.IPersistableRow<next_1Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public Object CONTENIDO;

				public Object getCONTENIDO () {
					return this.CONTENIDO;
				}

				public Boolean CONTENIDOIsNullable(){
				    return false;
				}
				public Boolean CONTENIDOIsKey(){
				    return false;
				}
				public Integer CONTENIDOLength(){
				    return null;
				}
				public Integer CONTENIDOPrecision(){
				    return 0;
				}
				public String CONTENIDODefault(){
				
					return "";
				
				}
				public String CONTENIDOComment(){
				
				    return "";
				
				}
				public String CONTENIDOPattern(){
				
					return "";
				
				}
				public String CONTENIDOOriginalDbColumnName(){
				
					return "CONTENIDO";
				
				}

				
			    public String TCONTENIDO;

				public String getTCONTENIDO () {
					return this.TCONTENIDO;
				}

				public Boolean TCONTENIDOIsNullable(){
				    return false;
				}
				public Boolean TCONTENIDOIsKey(){
				    return false;
				}
				public Integer TCONTENIDOLength(){
				    return 300;
				}
				public Integer TCONTENIDOPrecision(){
				    return 0;
				}
				public String TCONTENIDODefault(){
				
					return null;
				
				}
				public String TCONTENIDOComment(){
				
				    return "";
				
				}
				public String TCONTENIDOPattern(){
				
					return "";
				
				}
				public String TCONTENIDOOriginalDbColumnName(){
				
					return "TCONTENIDO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final next_1Struct other = (next_1Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(next_1Struct other) {

		other.ID = this.ID;
	            other.CONTENIDO = this.CONTENIDO;
	            other.TCONTENIDO = this.TCONTENIDO;
	            
	}

	public void copyKeysDataTo(next_1Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.CONTENIDO = (Object) dis.readObject();
					
					this.TCONTENIDO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.CONTENIDO = (Object) dis.readObject();
					
					this.TCONTENIDO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// Object
				
       			    	dos.writeObject(this.CONTENIDO);
					
					// String
				
						writeString(this.TCONTENIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTENIDO);
					
					// String
				
						writeString(this.TCONTENIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CONTENIDO="+String.valueOf(CONTENIDO));
		sb.append(",TCONTENIDO="+TCONTENIDO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(next_1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public Object CONTENIDO;

				public Object getCONTENIDO () {
					return this.CONTENIDO;
				}

				public Boolean CONTENIDOIsNullable(){
				    return false;
				}
				public Boolean CONTENIDOIsKey(){
				    return false;
				}
				public Integer CONTENIDOLength(){
				    return null;
				}
				public Integer CONTENIDOPrecision(){
				    return 0;
				}
				public String CONTENIDODefault(){
				
					return "";
				
				}
				public String CONTENIDOComment(){
				
				    return "";
				
				}
				public String CONTENIDOPattern(){
				
					return "";
				
				}
				public String CONTENIDOOriginalDbColumnName(){
				
					return "CONTENIDO";
				
				}

				
			    public String TCONTENIDO;

				public String getTCONTENIDO () {
					return this.TCONTENIDO;
				}

				public Boolean TCONTENIDOIsNullable(){
				    return false;
				}
				public Boolean TCONTENIDOIsKey(){
				    return false;
				}
				public Integer TCONTENIDOLength(){
				    return 300;
				}
				public Integer TCONTENIDOPrecision(){
				    return 0;
				}
				public String TCONTENIDODefault(){
				
					return null;
				
				}
				public String TCONTENIDOComment(){
				
				    return "";
				
				}
				public String TCONTENIDOPattern(){
				
					return "";
				
				}
				public String TCONTENIDOOriginalDbColumnName(){
				
					return "TCONTENIDO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.CONTENIDO = (Object) dis.readObject();
					
					this.TCONTENIDO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.CONTENIDO = (Object) dis.readObject();
					
					this.TCONTENIDO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// Object
				
       			    	dos.writeObject(this.CONTENIDO);
					
					// String
				
						writeString(this.TCONTENIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTENIDO);
					
					// String
				
						writeString(this.TCONTENIDO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CONTENIDO="+String.valueOf(CONTENIDO));
		sb.append(",TCONTENIDO="+TCONTENIDO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
update_estadoStruct update_estado = new update_estadoStruct();
next_1Struct next_1 = new next_1Struct();
row6Struct row6 = new row6Struct();
row4Struct row4 = new row4Struct();
row5Struct row5 = new row5Struct();
next_2Struct next_2 = new next_2Struct();





	
	/**
	 * [tOracleSP_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_1", false);
		start_Hash.put("tOracleSP_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update_estado");
					}
				
		int tos_count_tOracleSP_1 = 0;
		

	java.sql.Connection connection_tOracleSP_1 = null;
	connection_tOracleSP_1 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_1");
	

java.sql.CallableStatement statement_tOracleSP_1 = connection_tOracleSP_1.prepareCall("{call " + "MED.UpdEstadoCargaMasiva" + "(?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_1;
String tmpString_tOracleSP_1;

 



/**
 * [tOracleSP_1 begin ] stop
 */





	
	/**
	 * [tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_tFileInputDelimited_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_1", false);
		start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tFlowToIterate_1 = 0;
		

int nb_line_tFlowToIterate_1 = 0;
int counter_tFlowToIterate_1 = 0;

 



/**
 * [tFlowToIterate_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"next_1");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
update_estadoStruct update_estado_tmp = new update_estadoStruct();
next_1Struct next_1_tmp = new next_1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_4", false);
		start_Hash.put("tOracleInput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_4";
	
	
		int tos_count_tOracleInput_4 = 0;
		
	


	
		    int nb_line_tOracleInput_4 = 0;
		    java.sql.Connection conn_tOracleInput_4 = null;
				conn_tOracleInput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_4 = false;
				boolean isConnectionWrapped_tOracleInput_4 = !(conn_tOracleInput_4 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_4 = null;
                if (isConnectionWrapped_tOracleInput_4) {
					unwrappedOraConn_tOracleInput_4 = conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_4 != null) {
                        isTimeZoneNull_tOracleInput_4 = (unwrappedOraConn_tOracleInput_4.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_4 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_4).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_4) {
					java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_4.next()) {
						sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_4 && unwrappedOraConn_tOracleInput_4 != null) {
                        unwrappedOraConn_tOracleInput_4.setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement();

		    String dbquery_tOracleInput_4 = "select \n	carga.id,\n	anex.contenido,\n	anex.tcontenido\nfrom med_cargasmasivas carga\ninner join med_anexos anex on an"
+"ex.id=carga.anexos_id\nwhere carga.ESTREGISTRO_ID=1 and carga.id= " + context.carga_id+"\nand estado = 'Inicial'";
		    

		    globalMap.put("tOracleInput_4_QUERY",dbquery_tOracleInput_4);

		    java.sql.ResultSet rs_tOracleInput_4 = null;

		    try {
		    	rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
		    	int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

		    String tmpContent_tOracleInput_4 = null;
		    
		    
		    while (rs_tOracleInput_4.next()) {
		        nb_line_tOracleInput_4++;
		        
							if(colQtyInRs_tOracleInput_4 < 1) {
								row3.ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(1) != null) {
						row3.ID = rs_tOracleInput_4.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 2) {
								row3.CONTENIDO = null;
							} else {
		                          
				Object tmpObj_2_tOracleInput_4 = rs_tOracleInput_4.getObject(2);
				if(tmpObj_2_tOracleInput_4 != null) {
					row3.CONTENIDO = tmpObj_2_tOracleInput_4;
				} else {
						throw new RuntimeException("Null value in non-Nullable column");
				}
		                    }
							if(colQtyInRs_tOracleInput_4 < 3) {
								row3.TCONTENIDO = null;
							} else {
	                         		
        	row3.TCONTENIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 3, false);
		                    }
					




 



/**
 * [tOracleInput_4 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 


	tos_count_tOracleInput_4++;

/**
 * [tOracleInput_4 main ] stop
 */
	
	/**
	 * [tOracleInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

update_estado = null;
next_1 = null;


// # Output table : 'update_estado'
update_estado_tmp.Id_ = context.carga_id;
update_estado_tmp.Estado_ = "En proceso" ;
update_estado = update_estado_tmp;

// # Output table : 'next_1'
next_1_tmp.ID = row3.ID ;
next_1_tmp.CONTENIDO = row3.CONTENIDO ;
next_1_tmp.TCONTENIDO = row3.TCONTENIDO ;
next_1 = next_1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "update_estado"
if(update_estado != null) { 



	
	/**
	 * [tOracleSP_1 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update_estado"
						
						);
					}
					

			// code for the argument 1 (Id_) of type 'IN AUTOMAPPING'
    					if (update_estado.Id_ == null) {
    						statement_tOracleSP_1.setNull(1, java.sql.Types.OTHER);
    					} else {
    					
                        statement_tOracleSP_1.setBigDecimal(1, update_estado.Id_);
    					}
    					
			// code for the argument 2 (Estado_) of type 'IN AUTOMAPPING'
    					if (update_estado.Estado_ == null) {
    						statement_tOracleSP_1.setNull(2, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tOracleSP_1.setString(2, update_estado.Estado_);
    					}
    					
		statement_tOracleSP_1.execute();
		

 


	tos_count_tOracleSP_1++;

/**
 * [tOracleSP_1 main ] stop
 */
	
	/**
	 * [tOracleSP_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 process_data_end ] stop
 */

} // End of branch "update_estado"




// Start of branch "next_1"
if(next_1 != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"next_1"
						
						);
					}
					

    
//context.Id = next_1.id;
context.Contenido = ((java.sql.Blob)next_1.CONTENIDO).getBinaryStream();
context.TContenido =  next_1.TCONTENIDO;








    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					


    	            
            globalMap.put("row6.ID", row6.ID);
    	            
            globalMap.put("row6.CONTENIDO", row6.CONTENIDO);
    	            
            globalMap.put("row6.TCONTENIDO", row6.TCONTENIDO);
    	
 
	   nb_line_tFlowToIterate_1++;  
       counter_tFlowToIterate_1++;
       globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);
 


	tos_count_tFlowToIterate_1++;

/**
 * [tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputDelimited_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("next_2", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tFileInputDelimited_1);
					//Thread.sleep(1000);
				}				
			




	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"next_2");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
        dbschema_tOracleOutput_1 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("MED_GENERICOS_TEMP");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("MED_GENERICOS_TEMP");
        }
                                String tableNameForSearch_tOracleOutput_1= "" + ((String)"MED_GENERICOS_TEMP") + "";
String dbschemaForSearch_tOracleOutput_1= null;
if(dbschema_tOracleOutput_1== null || dbschema_tOracleOutput_1.trim().length() == 0) {
dbschemaForSearch_tOracleOutput_1= ((String)globalMap.get("username_tOracleConnection_1")).toUpperCase();
} else {
dbschemaForSearch_tOracleOutput_1= dbschema_tOracleOutput_1.toUpperCase();
}

                                java.sql.DatabaseMetaData dbMetaData_tOracleOutput_1 = conn_tOracleOutput_1.getMetaData();
                                if(tableNameForSearch_tOracleOutput_1.indexOf("\"")==-1){
                                    tableNameForSearch_tOracleOutput_1 = tableNameForSearch_tOracleOutput_1.toUpperCase();
                                }else{
                                    tableNameForSearch_tOracleOutput_1 = tableNameForSearch_tOracleOutput_1.replaceAll("\"","");
                                }
                                boolean whetherExist_tOracleOutput_1 = false;
                                try (java.sql.ResultSet rsTable_tOracleOutput_1 = dbMetaData_tOracleOutput_1.getTables(null, dbschemaForSearch_tOracleOutput_1, tableNameForSearch_tOracleOutput_1, new String[]{"TABLE"})) {
                                    if(rsTable_tOracleOutput_1.next()) {
                                        whetherExist_tOracleOutput_1 = true;
                                    }
                                }

                                if(!whetherExist_tOracleOutput_1) {
                                    try (java.sql.Statement stmtCreate_tOracleOutput_1 = conn_tOracleOutput_1.createStatement()) {
                                        stmtCreate_tOracleOutput_1.execute("CREATE TABLE " + tableName_tOracleOutput_1 + "(upNGenerico VARCHAR2(350)  ,upConcentracion VARCHAR2(200)  ,upCodAtc VARCHAR2(50)  ,upViaAdmin VARCHAR2(200)  ,upCatFarmacologica VARCHAR2(200)  ,upFormFarmaceutica VARCHAR2(200)  ,upIdentificadorUnico VARCHAR2(150)  ,upSustanciaActiva VARCHAR2(500)  ,Estado VARCHAR2(50)  ,\"Insert\" VARCHAR2(50)  ,Message VARCHAR2(200)  ,NGenerico VARCHAR2(350)  ,Concentracion VARCHAR2(200)  ,CodAtc VARCHAR2(50)  ,ViaAdmin VARCHAR2(200)  ,CatFarmacologica VARCHAR2(200)  ,FormFarmaceutica VARCHAR2(200)  ,IdentificadorUnico VARCHAR2(150)  ,SustanciaActiva VARCHAR2(500)  )");
                                    }
                                }
                String insert_tOracleOutput_1 = "INSERT INTO " + tableName_tOracleOutput_1 + " (upNGenerico,upConcentracion,upCodAtc,upViaAdmin,upCatFarmacologica,upFormFarmaceutica,upIdentificadorUnico,upSustanciaActiva,Estado,\"Insert\",Message,NGenerico,Concentracion,CodAtc,ViaAdmin,CatFarmacologica,FormFarmaceutica,IdentificadorUnico,SustanciaActiva) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(insert_tOracleOutput_1);
                        resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	String nombre_generico;
	String concentracion;
	String codigo_ctc;
	String via_admin;
	String categoria_farmacologica;
	String forma_farmaceutica;
	String identificador_unico;
	String sustancia_activa;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
next_2Struct next_2_tmp = new next_2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";
	
	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = (java.io.InputStream)context.Contenido;
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited((java.io.InputStream)context.Contenido, "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row4 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row4 = new row4Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							row4.NOMBRE_GENERICO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row4.CONCENTRACION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
							row4.CODIGO_ATC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
							row4.VIA_ADMINTRACION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
							row4.CATEGORIA_FARMACOLOGICA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
							row4.FORMA_FARMACEUTICA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
							row4.IDENTIFICADOR_UNICO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
							row4.SUSTANCIA_ACTIVA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row4 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

          row5 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("||");
            ope_tFilterRow_1.matches((row4.NOMBRE_GENERICO == null? false : row4.NOMBRE_GENERICO.compareTo("") != 0)
                           , "NOMBRE_GENERICO.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row4.CONCENTRACION == null? false : row4.CONCENTRACION.compareTo("") != 0)
                           , "CONCENTRACION.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row4.VIA_ADMINTRACION == null? false : row4.VIA_ADMINTRACION.compareTo("") != 0)
                           , "VIA_ADMINTRACION.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row4.FORMA_FARMACEUTICA == null? false : row4.FORMA_FARMACEUTICA.compareTo("") != 0)
                           , "FORMA_FARMACEUTICA.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row4.IDENTIFICADOR_UNICO == null? false : row4.IDENTIFICADOR_UNICO.compareTo("") != 0)
                           , "IDENTIFICADOR_UNICO.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row4.SUSTANCIA_ACTIVA == null? false : row4.SUSTANCIA_ACTIVA.compareTo("") != 0)
                           , "SUSTANCIA_ACTIVA.compareTo(\"\") != 0 failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row5 == null){ 
                row5 = new row5Struct();
              }
               row5.NOMBRE_GENERICO = row4.NOMBRE_GENERICO;
               row5.CONCENTRACION = row4.CONCENTRACION;
               row5.CODIGO_ATC = row4.CODIGO_ATC;
               row5.VIA_ADMINTRACION = row4.VIA_ADMINTRACION;
               row5.CATEGORIA_FARMACOLOGICA = row4.CATEGORIA_FARMACOLOGICA;
               row5.FORMA_FARMACEUTICA = row4.FORMA_FARMACEUTICA;
               row5.IDENTIFICADOR_UNICO = row4.IDENTIFICADOR_UNICO;
               row5.SUSTANCIA_ACTIVA = row4.SUSTANCIA_ACTIVA;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.nombre_generico = StringHandling.TRIM(row5.NOMBRE_GENERICO) ;
Var.concentracion = StringHandling.TRIM(row5.CONCENTRACION) ;
Var.codigo_ctc = StringHandling.TRIM(row5.CODIGO_ATC) ;
Var.via_admin = StringHandling.TRIM(row5.VIA_ADMINTRACION) ;
Var.categoria_farmacologica = StringHandling.TRIM(row5.CATEGORIA_FARMACOLOGICA) ;
Var.forma_farmaceutica = StringHandling.TRIM(row5.FORMA_FARMACEUTICA) ;
Var.identificador_unico = StringHandling.TRIM(row5.IDENTIFICADOR_UNICO) ;
Var.sustancia_activa = StringHandling.TRIM(row5.SUSTANCIA_ACTIVA) ;// ###############################
        // ###############################
        // # Output tables

next_2 = null;


// # Output table : 'next_2'
next_2_tmp.upNGenerico = Utils.mayusculasSinAcentos(Var.nombre_generico) ;
next_2_tmp.upConcentracion = Utils.mayusculasSinAcentos(Var.concentracion) ;
next_2_tmp.upCodAtc = Utils.mayusculasSinAcentos(Var.codigo_ctc) ;
next_2_tmp.upViaAdmin = Utils.mayusculasSinAcentos(Var.via_admin) ;
next_2_tmp.upCatFarmacologica = Utils.mayusculasSinAcentos(Var.categoria_farmacologica) ;
next_2_tmp.upFormFarmaceutica = Utils.mayusculasSinAcentos(Var.forma_farmaceutica) ;
next_2_tmp.upIdentificadorUnico = Utils.mayusculasSinAcentos(Var.identificador_unico) ;
next_2_tmp.upSustanciaActiva = Utils.mayusculasSinAcentos(Var.sustancia_activa) ;
next_2_tmp.Estado = null;
next_2_tmp.Insert = null;
next_2_tmp.Message = null;
next_2_tmp.NGenerico = Utils.mayusculasSinAcentos(Var.nombre_generico) ;
next_2_tmp.Concentracion = Utils.mayusculasSinAcentos(Var.concentracion) ;
next_2_tmp.CodAtc = Utils.mayusculasSinAcentos(Var.codigo_ctc) ;
next_2_tmp.ViaAdmin = Utils.mayusculasSinAcentos(Var.via_admin) ;
next_2_tmp.CatFarmacologica = Utils.mayusculasSinAcentos(Var.categoria_farmacologica) ;
next_2_tmp.FormFarmaceutica = Utils.mayusculasSinAcentos(Var.forma_farmaceutica) ;
next_2_tmp.IdentificadorUnico = Utils.mayusculasSinAcentos(Var.identificador_unico) ;
next_2_tmp.SustanciaActiva = Utils.mayusculasSinAcentos(Var.sustancia_activa);
next_2 = next_2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "next_2"
if(next_2 != null) { 



	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"next_2"
						
						);
					}
					



        whetherReject_tOracleOutput_1 = false;
                        if(next_2.upNGenerico == null) {
pstmt_tOracleOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(1, next_2.upNGenerico);
}

                        if(next_2.upConcentracion == null) {
pstmt_tOracleOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(2, next_2.upConcentracion);
}

                        if(next_2.upCodAtc == null) {
pstmt_tOracleOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(3, next_2.upCodAtc);
}

                        if(next_2.upViaAdmin == null) {
pstmt_tOracleOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(4, next_2.upViaAdmin);
}

                        if(next_2.upCatFarmacologica == null) {
pstmt_tOracleOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(5, next_2.upCatFarmacologica);
}

                        if(next_2.upFormFarmaceutica == null) {
pstmt_tOracleOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(6, next_2.upFormFarmaceutica);
}

                        if(next_2.upIdentificadorUnico == null) {
pstmt_tOracleOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(7, next_2.upIdentificadorUnico);
}

                        if(next_2.upSustanciaActiva == null) {
pstmt_tOracleOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(8, next_2.upSustanciaActiva);
}

                        if(next_2.Estado == null) {
pstmt_tOracleOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(9, next_2.Estado);
}

                        if(next_2.Insert == null) {
pstmt_tOracleOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(10, next_2.Insert);
}

                        if(next_2.Message == null) {
pstmt_tOracleOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(11, next_2.Message);
}

                        if(next_2.NGenerico == null) {
pstmt_tOracleOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(12, next_2.NGenerico);
}

                        if(next_2.Concentracion == null) {
pstmt_tOracleOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(13, next_2.Concentracion);
}

                        if(next_2.CodAtc == null) {
pstmt_tOracleOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(14, next_2.CodAtc);
}

                        if(next_2.ViaAdmin == null) {
pstmt_tOracleOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(15, next_2.ViaAdmin);
}

                        if(next_2.CatFarmacologica == null) {
pstmt_tOracleOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(16, next_2.CatFarmacologica);
}

                        if(next_2.FormFarmaceutica == null) {
pstmt_tOracleOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(17, next_2.FormFarmaceutica);
}

                        if(next_2.IdentificadorUnico == null) {
pstmt_tOracleOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(18, next_2.IdentificadorUnico);
}

                        if(next_2.SustanciaActiva == null) {
pstmt_tOracleOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(19, next_2.SustanciaActiva);
}

                try {
                    nb_line_tOracleOutput_1++;
                    int processedCount_tOracleOutput_1 = pstmt_tOracleOutput_1.executeUpdate();
                    insertedCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    rowsToCommitCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                } catch(java.lang.Exception e_tOracleOutput_1) {
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
                    whetherReject_tOracleOutput_1 = true;
                            System.err.print(e_tOracleOutput_1.getMessage());
                }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */

} // End of branch "next_2"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	



            }
            }finally{
                if(!((Object)((java.io.InputStream)context.Contenido) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(pstmt_tOracleOutput_1 != null) {
			
				pstmt_tOracleOutput_1.close();
				resourceMap.remove("pstmt_tOracleOutput_1");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"next_2");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());




/**
 * [tOracleOutput_1 end ] stop
 */









						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tFileInputDelimited_1);
						}				
					




	
	/**
	 * [tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */

} // End of branch "next_1"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

}
}finally{
	if (rs_tOracleInput_4 != null) {
		rs_tOracleInput_4.close();
	}
	if (stmt_tOracleInput_4 != null) {
		stmt_tOracleInput_4.close();
	}
}

globalMap.put("tOracleInput_4_NB_LINE",nb_line_tOracleInput_4);
 

ok_Hash.put("tOracleInput_4", true);
end_Hash.put("tOracleInput_4", System.currentTimeMillis());




/**
 * [tOracleInput_4 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tOracleSP_1 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	


	statement_tOracleSP_1.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update_estado");
			  	}
			  	
 

ok_Hash.put("tOracleSP_1", true);
end_Hash.put("tOracleSP_1", System.currentTimeMillis());




/**
 * [tOracleSP_1 end ] stop
 */




	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"next_1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */

	
	/**
	 * [tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

globalMap.put("tFlowToIterate_1_NB_LINE",nb_line_tFlowToIterate_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_1", true);
end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());




/**
 * [tFlowToIterate_1 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tOracleInput_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tOracleSP_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 finally ] stop
 */




	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */





















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class next_7Struct implements routines.system.IPersistableRow<next_7Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String IDENTIFICADOR_UNICO;

				public String getIDENTIFICADOR_UNICO () {
					return this.IDENTIFICADOR_UNICO;
				}

				public Boolean IDENTIFICADOR_UNICOIsNullable(){
				    return true;
				}
				public Boolean IDENTIFICADOR_UNICOIsKey(){
				    return false;
				}
				public Integer IDENTIFICADOR_UNICOLength(){
				    return 100;
				}
				public Integer IDENTIFICADOR_UNICOPrecision(){
				    return 0;
				}
				public String IDENTIFICADOR_UNICODefault(){
				
					return null;
				
				}
				public String IDENTIFICADOR_UNICOComment(){
				
				    return "";
				
				}
				public String IDENTIFICADOR_UNICOPattern(){
				
					return "";
				
				}
				public String IDENTIFICADOR_UNICOOriginalDbColumnName(){
				
					return "IDENTIFICADOR_UNICO";
				
				}

				
			    public String NOMBRE_GENERICO;

				public String getNOMBRE_GENERICO () {
					return this.NOMBRE_GENERICO;
				}

				public Boolean NOMBRE_GENERICOIsNullable(){
				    return true;
				}
				public Boolean NOMBRE_GENERICOIsKey(){
				    return false;
				}
				public Integer NOMBRE_GENERICOLength(){
				    return 500;
				}
				public Integer NOMBRE_GENERICOPrecision(){
				    return 0;
				}
				public String NOMBRE_GENERICODefault(){
				
					return null;
				
				}
				public String NOMBRE_GENERICOComment(){
				
				    return "";
				
				}
				public String NOMBRE_GENERICOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NOMBRE_GENERICOOriginalDbColumnName(){
				
					return "NOMBRE_GENERICO";
				
				}

				
			    public String CONCENTRACION;

				public String getCONCENTRACION () {
					return this.CONCENTRACION;
				}

				public Boolean CONCENTRACIONIsNullable(){
				    return true;
				}
				public Boolean CONCENTRACIONIsKey(){
				    return false;
				}
				public Integer CONCENTRACIONLength(){
				    return 500;
				}
				public Integer CONCENTRACIONPrecision(){
				    return 0;
				}
				public String CONCENTRACIONDefault(){
				
					return null;
				
				}
				public String CONCENTRACIONComment(){
				
				    return "";
				
				}
				public String CONCENTRACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONCENTRACIONOriginalDbColumnName(){
				
					return "CONCENTRACION";
				
				}

				
			    public String CODIGO_ATC;

				public String getCODIGO_ATC () {
					return this.CODIGO_ATC;
				}

				public Boolean CODIGO_ATCIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ATCIsKey(){
				    return false;
				}
				public Integer CODIGO_ATCLength(){
				    return 200;
				}
				public Integer CODIGO_ATCPrecision(){
				    return 0;
				}
				public String CODIGO_ATCDefault(){
				
					return null;
				
				}
				public String CODIGO_ATCComment(){
				
				    return "";
				
				}
				public String CODIGO_ATCPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CODIGO_ATCOriginalDbColumnName(){
				
					return "CODIGO_ATC";
				
				}

				
			    public String VIA_ADMINISTRACION;

				public String getVIA_ADMINISTRACION () {
					return this.VIA_ADMINISTRACION;
				}

				public Boolean VIA_ADMINISTRACIONIsNullable(){
				    return true;
				}
				public Boolean VIA_ADMINISTRACIONIsKey(){
				    return false;
				}
				public Integer VIA_ADMINISTRACIONLength(){
				    return 200;
				}
				public Integer VIA_ADMINISTRACIONPrecision(){
				    return 0;
				}
				public String VIA_ADMINISTRACIONDefault(){
				
					return null;
				
				}
				public String VIA_ADMINISTRACIONComment(){
				
				    return "";
				
				}
				public String VIA_ADMINISTRACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VIA_ADMINISTRACIONOriginalDbColumnName(){
				
					return "VIA_ADMINISTRACION";
				
				}

				
			    public String CATEGORIA_FARMACOLOGICA;

				public String getCATEGORIA_FARMACOLOGICA () {
					return this.CATEGORIA_FARMACOLOGICA;
				}

				public Boolean CATEGORIA_FARMACOLOGICAIsNullable(){
				    return true;
				}
				public Boolean CATEGORIA_FARMACOLOGICAIsKey(){
				    return false;
				}
				public Integer CATEGORIA_FARMACOLOGICALength(){
				    return 200;
				}
				public Integer CATEGORIA_FARMACOLOGICAPrecision(){
				    return 0;
				}
				public String CATEGORIA_FARMACOLOGICADefault(){
				
					return null;
				
				}
				public String CATEGORIA_FARMACOLOGICAComment(){
				
				    return "";
				
				}
				public String CATEGORIA_FARMACOLOGICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CATEGORIA_FARMACOLOGICAOriginalDbColumnName(){
				
					return "CATEGORIA_FARMACOLOGICA";
				
				}

				
			    public String FORMA_FARMACEUTICA;

				public String getFORMA_FARMACEUTICA () {
					return this.FORMA_FARMACEUTICA;
				}

				public Boolean FORMA_FARMACEUTICAIsNullable(){
				    return true;
				}
				public Boolean FORMA_FARMACEUTICAIsKey(){
				    return false;
				}
				public Integer FORMA_FARMACEUTICALength(){
				    return 500;
				}
				public Integer FORMA_FARMACEUTICAPrecision(){
				    return 0;
				}
				public String FORMA_FARMACEUTICADefault(){
				
					return null;
				
				}
				public String FORMA_FARMACEUTICAComment(){
				
				    return "";
				
				}
				public String FORMA_FARMACEUTICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FORMA_FARMACEUTICAOriginalDbColumnName(){
				
					return "FORMA_FARMACEUTICA";
				
				}

				
			    public String SUSTANCIA_ACTIVA;

				public String getSUSTANCIA_ACTIVA () {
					return this.SUSTANCIA_ACTIVA;
				}

				public Boolean SUSTANCIA_ACTIVAIsNullable(){
				    return true;
				}
				public Boolean SUSTANCIA_ACTIVAIsKey(){
				    return false;
				}
				public Integer SUSTANCIA_ACTIVALength(){
				    return 500;
				}
				public Integer SUSTANCIA_ACTIVAPrecision(){
				    return 0;
				}
				public String SUSTANCIA_ACTIVADefault(){
				
					return null;
				
				}
				public String SUSTANCIA_ACTIVAComment(){
				
				    return "";
				
				}
				public String SUSTANCIA_ACTIVAPattern(){
				
					return "";
				
				}
				public String SUSTANCIA_ACTIVAOriginalDbColumnName(){
				
					return "SUSTANCIA_ACTIVA";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 50;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String OBSERVACION;

				public String getOBSERVACION () {
					return this.OBSERVACION;
				}

				public Boolean OBSERVACIONIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONIsKey(){
				    return false;
				}
				public Integer OBSERVACIONLength(){
				    return 500;
				}
				public Integer OBSERVACIONPrecision(){
				    return 0;
				}
				public String OBSERVACIONDefault(){
				
					return null;
				
				}
				public String OBSERVACIONComment(){
				
				    return "";
				
				}
				public String OBSERVACIONPattern(){
				
					return "";
				
				}
				public String OBSERVACIONOriginalDbColumnName(){
				
					return "OBSERVACION";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.IDENTIFICADOR_UNICO = readString(dis);
					
					this.NOMBRE_GENERICO = readString(dis);
					
					this.CONCENTRACION = readString(dis);
					
					this.CODIGO_ATC = readString(dis);
					
					this.VIA_ADMINISTRACION = readString(dis);
					
					this.CATEGORIA_FARMACOLOGICA = readString(dis);
					
					this.FORMA_FARMACEUTICA = readString(dis);
					
					this.SUSTANCIA_ACTIVA = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.OBSERVACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.IDENTIFICADOR_UNICO = readString(dis);
					
					this.NOMBRE_GENERICO = readString(dis);
					
					this.CONCENTRACION = readString(dis);
					
					this.CODIGO_ATC = readString(dis);
					
					this.VIA_ADMINISTRACION = readString(dis);
					
					this.CATEGORIA_FARMACOLOGICA = readString(dis);
					
					this.FORMA_FARMACEUTICA = readString(dis);
					
					this.SUSTANCIA_ACTIVA = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.OBSERVACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.IDENTIFICADOR_UNICO,dos);
					
					// String
				
						writeString(this.NOMBRE_GENERICO,dos);
					
					// String
				
						writeString(this.CONCENTRACION,dos);
					
					// String
				
						writeString(this.CODIGO_ATC,dos);
					
					// String
				
						writeString(this.VIA_ADMINISTRACION,dos);
					
					// String
				
						writeString(this.CATEGORIA_FARMACOLOGICA,dos);
					
					// String
				
						writeString(this.FORMA_FARMACEUTICA,dos);
					
					// String
				
						writeString(this.SUSTANCIA_ACTIVA,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.OBSERVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.IDENTIFICADOR_UNICO,dos);
					
					// String
				
						writeString(this.NOMBRE_GENERICO,dos);
					
					// String
				
						writeString(this.CONCENTRACION,dos);
					
					// String
				
						writeString(this.CODIGO_ATC,dos);
					
					// String
				
						writeString(this.VIA_ADMINISTRACION,dos);
					
					// String
				
						writeString(this.CATEGORIA_FARMACOLOGICA,dos);
					
					// String
				
						writeString(this.FORMA_FARMACEUTICA,dos);
					
					// String
				
						writeString(this.SUSTANCIA_ACTIVA,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.OBSERVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IDENTIFICADOR_UNICO="+IDENTIFICADOR_UNICO);
		sb.append(",NOMBRE_GENERICO="+NOMBRE_GENERICO);
		sb.append(",CONCENTRACION="+CONCENTRACION);
		sb.append(",CODIGO_ATC="+CODIGO_ATC);
		sb.append(",VIA_ADMINISTRACION="+VIA_ADMINISTRACION);
		sb.append(",CATEGORIA_FARMACOLOGICA="+CATEGORIA_FARMACOLOGICA);
		sb.append(",FORMA_FARMACEUTICA="+FORMA_FARMACEUTICA);
		sb.append(",SUSTANCIA_ACTIVA="+SUSTANCIA_ACTIVA);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",OBSERVACION="+OBSERVACION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(next_7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public Integer Item;

				public Integer getItem () {
					return this.Item;
				}

				public Boolean ItemIsNullable(){
				    return true;
				}
				public Boolean ItemIsKey(){
				    return false;
				}
				public Integer ItemLength(){
				    return null;
				}
				public Integer ItemPrecision(){
				    return null;
				}
				public String ItemDefault(){
				
					return null;
				
				}
				public String ItemComment(){
				
				    return "";
				
				}
				public String ItemPattern(){
				
					return "";
				
				}
				public String ItemOriginalDbColumnName(){
				
					return "Item";
				
				}

				
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 500;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 50;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 50;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 500;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return null;
				}
				public Integer _MessagePrecision(){
				    return null;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico_;

				public String getNGenerico_ () {
					return this.NGenerico_;
				}

				public Boolean NGenerico_IsNullable(){
				    return true;
				}
				public Boolean NGenerico_IsKey(){
				    return false;
				}
				public Integer NGenerico_Length(){
				    return 350;
				}
				public Integer NGenerico_Precision(){
				    return 0;
				}
				public String NGenerico_Default(){
				
					return null;
				
				}
				public String NGenerico_Comment(){
				
				    return "";
				
				}
				public String NGenerico_Pattern(){
				
					return "";
				
				}
				public String NGenerico_OriginalDbColumnName(){
				
					return "NGenerico_";
				
				}

				
			    public String Concentracion_;

				public String getConcentracion_ () {
					return this.Concentracion_;
				}

				public Boolean Concentracion_IsNullable(){
				    return true;
				}
				public Boolean Concentracion_IsKey(){
				    return false;
				}
				public Integer Concentracion_Length(){
				    return 500;
				}
				public Integer Concentracion_Precision(){
				    return 0;
				}
				public String Concentracion_Default(){
				
					return null;
				
				}
				public String Concentracion_Comment(){
				
				    return "";
				
				}
				public String Concentracion_Pattern(){
				
					return "";
				
				}
				public String Concentracion_OriginalDbColumnName(){
				
					return "Concentracion_";
				
				}

				
			    public String CodAtc_;

				public String getCodAtc_ () {
					return this.CodAtc_;
				}

				public Boolean CodAtc_IsNullable(){
				    return true;
				}
				public Boolean CodAtc_IsKey(){
				    return false;
				}
				public Integer CodAtc_Length(){
				    return 50;
				}
				public Integer CodAtc_Precision(){
				    return 0;
				}
				public String CodAtc_Default(){
				
					return null;
				
				}
				public String CodAtc_Comment(){
				
				    return "";
				
				}
				public String CodAtc_Pattern(){
				
					return "";
				
				}
				public String CodAtc_OriginalDbColumnName(){
				
					return "CodAtc_";
				
				}

				
			    public String ViaAdmin_;

				public String getViaAdmin_ () {
					return this.ViaAdmin_;
				}

				public Boolean ViaAdmin_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Length(){
				    return 50;
				}
				public Integer ViaAdmin_Precision(){
				    return 0;
				}
				public String ViaAdmin_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_OriginalDbColumnName(){
				
					return "ViaAdmin_";
				
				}

				
			    public String CatFarmacologica_;

				public String getCatFarmacologica_ () {
					return this.CatFarmacologica_;
				}

				public Boolean CatFarmacologica_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Length(){
				    return 50;
				}
				public Integer CatFarmacologica_Precision(){
				    return 0;
				}
				public String CatFarmacologica_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_OriginalDbColumnName(){
				
					return "CatFarmacologica_";
				
				}

				
			    public String FormFarmaceutica_;

				public String getFormFarmaceutica_ () {
					return this.FormFarmaceutica_;
				}

				public Boolean FormFarmaceutica_IsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_IsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_Length(){
				    return 500;
				}
				public Integer FormFarmaceutica_Precision(){
				    return 0;
				}
				public String FormFarmaceutica_Default(){
				
					return null;
				
				}
				public String FormFarmaceutica_Comment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_Pattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_OriginalDbColumnName(){
				
					return "FormFarmaceutica_";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public BigDecimal ViaAdmin_Id_;

				public BigDecimal getViaAdmin_Id_ () {
					return this.ViaAdmin_Id_;
				}

				public Boolean ViaAdmin_Id_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_Id_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Id_Length(){
				    return null;
				}
				public Integer ViaAdmin_Id_Precision(){
				    return null;
				}
				public String ViaAdmin_Id_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Id_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Id_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_Id_OriginalDbColumnName(){
				
					return "ViaAdmin_Id_";
				
				}

				
			    public BigDecimal CatFarmacologica_Id;

				public BigDecimal getCatFarmacologica_Id () {
					return this.CatFarmacologica_Id;
				}

				public Boolean CatFarmacologica_IdIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_IdIsKey(){
				    return false;
				}
				public Integer CatFarmacologica_IdLength(){
				    return null;
				}
				public Integer CatFarmacologica_IdPrecision(){
				    return null;
				}
				public String CatFarmacologica_IdDefault(){
				
					return null;
				
				}
				public String CatFarmacologica_IdComment(){
				
				    return "";
				
				}
				public String CatFarmacologica_IdPattern(){
				
					return "";
				
				}
				public String CatFarmacologica_IdOriginalDbColumnName(){
				
					return "CatFarmacologica_Id";
				
				}

				
			    public BigDecimal Sustancia_Activa_Id_;

				public BigDecimal getSustancia_Activa_Id_ () {
					return this.Sustancia_Activa_Id_;
				}

				public Boolean Sustancia_Activa_Id_IsNullable(){
				    return true;
				}
				public Boolean Sustancia_Activa_Id_IsKey(){
				    return false;
				}
				public Integer Sustancia_Activa_Id_Length(){
				    return null;
				}
				public Integer Sustancia_Activa_Id_Precision(){
				    return null;
				}
				public String Sustancia_Activa_Id_Default(){
				
					return null;
				
				}
				public String Sustancia_Activa_Id_Comment(){
				
				    return "";
				
				}
				public String Sustancia_Activa_Id_Pattern(){
				
					return "";
				
				}
				public String Sustancia_Activa_Id_OriginalDbColumnName(){
				
					return "Sustancia_Activa_Id_";
				
				}

				
			    public String CatFarmacologica_Id_;

				public String getCatFarmacologica_Id_ () {
					return this.CatFarmacologica_Id_;
				}

				public Boolean CatFarmacologica_Id_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_Id_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Id_Length(){
				    return null;
				}
				public Integer CatFarmacologica_Id_Precision(){
				    return null;
				}
				public String CatFarmacologica_Id_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Id_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Id_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_Id_OriginalDbColumnName(){
				
					return "CatFarmacologica_Id_";
				
				}

				
			    public BigDecimal Generico_Id_;

				public BigDecimal getGenerico_Id_ () {
					return this.Generico_Id_;
				}

				public Boolean Generico_Id_IsNullable(){
				    return true;
				}
				public Boolean Generico_Id_IsKey(){
				    return false;
				}
				public Integer Generico_Id_Length(){
				    return null;
				}
				public Integer Generico_Id_Precision(){
				    return null;
				}
				public String Generico_Id_Default(){
				
					return null;
				
				}
				public String Generico_Id_Comment(){
				
				    return "";
				
				}
				public String Generico_Id_Pattern(){
				
					return "";
				
				}
				public String Generico_Id_OriginalDbColumnName(){
				
					return "Generico_Id_";
				
				}

				
			    public String FormFarmaceutica_Ids_;

				public String getFormFarmaceutica_Ids_ () {
					return this.FormFarmaceutica_Ids_;
				}

				public Boolean FormFarmaceutica_Ids_IsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_Ids_IsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_Ids_Length(){
				    return null;
				}
				public Integer FormFarmaceutica_Ids_Precision(){
				    return null;
				}
				public String FormFarmaceutica_Ids_Default(){
				
					return null;
				
				}
				public String FormFarmaceutica_Ids_Comment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_Ids_Pattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_Ids_OriginalDbColumnName(){
				
					return "FormFarmaceutica_Ids_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
						this.Item = readInteger(dis);
					
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
					this.CodAtc_ = readString(dis);
					
					this.ViaAdmin_ = readString(dis);
					
					this.CatFarmacologica_ = readString(dis);
					
					this.FormFarmaceutica_ = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.CatFarmacologica_Id_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
					this.FormFarmaceutica_Ids_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
						this.Item = readInteger(dis);
					
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
					this.CodAtc_ = readString(dis);
					
					this.ViaAdmin_ = readString(dis);
					
					this.CatFarmacologica_ = readString(dis);
					
					this.FormFarmaceutica_ = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.CatFarmacologica_Id_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
					this.FormFarmaceutica_Ids_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Item,dos);
					
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// String
				
						writeString(this.CodAtc_,dos);
					
					// String
				
						writeString(this.ViaAdmin_,dos);
					
					// String
				
						writeString(this.CatFarmacologica_,dos);
					
					// String
				
						writeString(this.FormFarmaceutica_,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CatFarmacologica_Id);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.CatFarmacologica_Id_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Generico_Id_);
					
					// String
				
						writeString(this.FormFarmaceutica_Ids_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.Item,dos);
					
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// String
				
						writeString(this.CodAtc_,dos);
					
					// String
				
						writeString(this.ViaAdmin_,dos);
					
					// String
				
						writeString(this.CatFarmacologica_,dos);
					
					// String
				
						writeString(this.FormFarmaceutica_,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CatFarmacologica_Id);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.CatFarmacologica_Id_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Generico_Id_);
					
					// String
				
						writeString(this.FormFarmaceutica_Ids_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Item="+String.valueOf(Item));
		sb.append(",upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Insert="+_Insert);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico_="+NGenerico_);
		sb.append(",Concentracion_="+Concentracion_);
		sb.append(",CodAtc_="+CodAtc_);
		sb.append(",ViaAdmin_="+ViaAdmin_);
		sb.append(",CatFarmacologica_="+CatFarmacologica_);
		sb.append(",FormFarmaceutica_="+FormFarmaceutica_);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",ViaAdmin_Id_="+String.valueOf(ViaAdmin_Id_));
		sb.append(",CatFarmacologica_Id="+String.valueOf(CatFarmacologica_Id));
		sb.append(",Sustancia_Activa_Id_="+String.valueOf(Sustancia_Activa_Id_));
		sb.append(",CatFarmacologica_Id_="+CatFarmacologica_Id_);
		sb.append(",Generico_Id_="+String.valueOf(Generico_Id_));
		sb.append(",FormFarmaceutica_Ids_="+FormFarmaceutica_Ids_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public Integer Item;

				public Integer getItem () {
					return this.Item;
				}

				public Boolean ItemIsNullable(){
				    return true;
				}
				public Boolean ItemIsKey(){
				    return false;
				}
				public Integer ItemLength(){
				    return null;
				}
				public Integer ItemPrecision(){
				    return null;
				}
				public String ItemDefault(){
				
					return null;
				
				}
				public String ItemComment(){
				
				    return "";
				
				}
				public String ItemPattern(){
				
					return "";
				
				}
				public String ItemOriginalDbColumnName(){
				
					return "Item";
				
				}

				
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 50;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 50;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return null;
				}
				public Integer _MessagePrecision(){
				    return null;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico_;

				public String getNGenerico_ () {
					return this.NGenerico_;
				}

				public Boolean NGenerico_IsNullable(){
				    return true;
				}
				public Boolean NGenerico_IsKey(){
				    return false;
				}
				public Integer NGenerico_Length(){
				    return 350;
				}
				public Integer NGenerico_Precision(){
				    return 0;
				}
				public String NGenerico_Default(){
				
					return null;
				
				}
				public String NGenerico_Comment(){
				
				    return "";
				
				}
				public String NGenerico_Pattern(){
				
					return "";
				
				}
				public String NGenerico_OriginalDbColumnName(){
				
					return "NGenerico_";
				
				}

				
			    public String Concentracion_;

				public String getConcentracion_ () {
					return this.Concentracion_;
				}

				public Boolean Concentracion_IsNullable(){
				    return true;
				}
				public Boolean Concentracion_IsKey(){
				    return false;
				}
				public Integer Concentracion_Length(){
				    return 200;
				}
				public Integer Concentracion_Precision(){
				    return 0;
				}
				public String Concentracion_Default(){
				
					return null;
				
				}
				public String Concentracion_Comment(){
				
				    return "";
				
				}
				public String Concentracion_Pattern(){
				
					return "";
				
				}
				public String Concentracion_OriginalDbColumnName(){
				
					return "Concentracion_";
				
				}

				
			    public String CodAtc_;

				public String getCodAtc_ () {
					return this.CodAtc_;
				}

				public Boolean CodAtc_IsNullable(){
				    return true;
				}
				public Boolean CodAtc_IsKey(){
				    return false;
				}
				public Integer CodAtc_Length(){
				    return 50;
				}
				public Integer CodAtc_Precision(){
				    return 0;
				}
				public String CodAtc_Default(){
				
					return null;
				
				}
				public String CodAtc_Comment(){
				
				    return "";
				
				}
				public String CodAtc_Pattern(){
				
					return "";
				
				}
				public String CodAtc_OriginalDbColumnName(){
				
					return "CodAtc_";
				
				}

				
			    public String ViaAdmin_;

				public String getViaAdmin_ () {
					return this.ViaAdmin_;
				}

				public Boolean ViaAdmin_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Length(){
				    return 50;
				}
				public Integer ViaAdmin_Precision(){
				    return 0;
				}
				public String ViaAdmin_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_OriginalDbColumnName(){
				
					return "ViaAdmin_";
				
				}

				
			    public String CatFarmacologica_;

				public String getCatFarmacologica_ () {
					return this.CatFarmacologica_;
				}

				public Boolean CatFarmacologica_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Length(){
				    return 50;
				}
				public Integer CatFarmacologica_Precision(){
				    return 0;
				}
				public String CatFarmacologica_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_OriginalDbColumnName(){
				
					return "CatFarmacologica_";
				
				}

				
			    public String FormFarmaceutica_;

				public String getFormFarmaceutica_ () {
					return this.FormFarmaceutica_;
				}

				public Boolean FormFarmaceutica_IsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_IsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_Length(){
				    return 200;
				}
				public Integer FormFarmaceutica_Precision(){
				    return 0;
				}
				public String FormFarmaceutica_Default(){
				
					return null;
				
				}
				public String FormFarmaceutica_Comment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_Pattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_OriginalDbColumnName(){
				
					return "FormFarmaceutica_";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public BigDecimal ViaAdmin_Id_;

				public BigDecimal getViaAdmin_Id_ () {
					return this.ViaAdmin_Id_;
				}

				public Boolean ViaAdmin_Id_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_Id_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Id_Length(){
				    return null;
				}
				public Integer ViaAdmin_Id_Precision(){
				    return null;
				}
				public String ViaAdmin_Id_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Id_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Id_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_Id_OriginalDbColumnName(){
				
					return "ViaAdmin_Id_";
				
				}

				
			    public BigDecimal CatFarmacologica_Id;

				public BigDecimal getCatFarmacologica_Id () {
					return this.CatFarmacologica_Id;
				}

				public Boolean CatFarmacologica_IdIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_IdIsKey(){
				    return false;
				}
				public Integer CatFarmacologica_IdLength(){
				    return null;
				}
				public Integer CatFarmacologica_IdPrecision(){
				    return null;
				}
				public String CatFarmacologica_IdDefault(){
				
					return null;
				
				}
				public String CatFarmacologica_IdComment(){
				
				    return "";
				
				}
				public String CatFarmacologica_IdPattern(){
				
					return "";
				
				}
				public String CatFarmacologica_IdOriginalDbColumnName(){
				
					return "CatFarmacologica_Id";
				
				}

				
			    public BigDecimal Sustancia_Activa_Id_;

				public BigDecimal getSustancia_Activa_Id_ () {
					return this.Sustancia_Activa_Id_;
				}

				public Boolean Sustancia_Activa_Id_IsNullable(){
				    return true;
				}
				public Boolean Sustancia_Activa_Id_IsKey(){
				    return false;
				}
				public Integer Sustancia_Activa_Id_Length(){
				    return null;
				}
				public Integer Sustancia_Activa_Id_Precision(){
				    return null;
				}
				public String Sustancia_Activa_Id_Default(){
				
					return null;
				
				}
				public String Sustancia_Activa_Id_Comment(){
				
				    return "";
				
				}
				public String Sustancia_Activa_Id_Pattern(){
				
					return "";
				
				}
				public String Sustancia_Activa_Id_OriginalDbColumnName(){
				
					return "Sustancia_Activa_Id_";
				
				}

				
			    public String CatFarmacologica_Id_;

				public String getCatFarmacologica_Id_ () {
					return this.CatFarmacologica_Id_;
				}

				public Boolean CatFarmacologica_Id_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_Id_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Id_Length(){
				    return null;
				}
				public Integer CatFarmacologica_Id_Precision(){
				    return null;
				}
				public String CatFarmacologica_Id_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Id_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Id_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_Id_OriginalDbColumnName(){
				
					return "CatFarmacologica_Id_";
				
				}

				
			    public BigDecimal Generico_Id_;

				public BigDecimal getGenerico_Id_ () {
					return this.Generico_Id_;
				}

				public Boolean Generico_Id_IsNullable(){
				    return true;
				}
				public Boolean Generico_Id_IsKey(){
				    return false;
				}
				public Integer Generico_Id_Length(){
				    return null;
				}
				public Integer Generico_Id_Precision(){
				    return null;
				}
				public String Generico_Id_Default(){
				
					return null;
				
				}
				public String Generico_Id_Comment(){
				
				    return "";
				
				}
				public String Generico_Id_Pattern(){
				
					return "";
				
				}
				public String Generico_Id_OriginalDbColumnName(){
				
					return "Generico_Id_";
				
				}

				
			    public String FormFarmaceutica_Ids_;

				public String getFormFarmaceutica_Ids_ () {
					return this.FormFarmaceutica_Ids_;
				}

				public Boolean FormFarmaceutica_Ids_IsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_Ids_IsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_Ids_Length(){
				    return null;
				}
				public Integer FormFarmaceutica_Ids_Precision(){
				    return null;
				}
				public String FormFarmaceutica_Ids_Default(){
				
					return null;
				
				}
				public String FormFarmaceutica_Ids_Comment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_Ids_Pattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_Ids_OriginalDbColumnName(){
				
					return "FormFarmaceutica_Ids_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
						this.Item = readInteger(dis);
					
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
					this.CodAtc_ = readString(dis);
					
					this.ViaAdmin_ = readString(dis);
					
					this.CatFarmacologica_ = readString(dis);
					
					this.FormFarmaceutica_ = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.CatFarmacologica_Id_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
					this.FormFarmaceutica_Ids_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
						this.Item = readInteger(dis);
					
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
					this.CodAtc_ = readString(dis);
					
					this.ViaAdmin_ = readString(dis);
					
					this.CatFarmacologica_ = readString(dis);
					
					this.FormFarmaceutica_ = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.CatFarmacologica_Id_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
					this.FormFarmaceutica_Ids_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Item,dos);
					
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// String
				
						writeString(this.CodAtc_,dos);
					
					// String
				
						writeString(this.ViaAdmin_,dos);
					
					// String
				
						writeString(this.CatFarmacologica_,dos);
					
					// String
				
						writeString(this.FormFarmaceutica_,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CatFarmacologica_Id);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.CatFarmacologica_Id_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Generico_Id_);
					
					// String
				
						writeString(this.FormFarmaceutica_Ids_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.Item,dos);
					
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// String
				
						writeString(this.CodAtc_,dos);
					
					// String
				
						writeString(this.ViaAdmin_,dos);
					
					// String
				
						writeString(this.CatFarmacologica_,dos);
					
					// String
				
						writeString(this.FormFarmaceutica_,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CatFarmacologica_Id);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.CatFarmacologica_Id_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Generico_Id_);
					
					// String
				
						writeString(this.FormFarmaceutica_Ids_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Item="+String.valueOf(Item));
		sb.append(",upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Insert="+_Insert);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico_="+NGenerico_);
		sb.append(",Concentracion_="+Concentracion_);
		sb.append(",CodAtc_="+CodAtc_);
		sb.append(",ViaAdmin_="+ViaAdmin_);
		sb.append(",CatFarmacologica_="+CatFarmacologica_);
		sb.append(",FormFarmaceutica_="+FormFarmaceutica_);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",ViaAdmin_Id_="+String.valueOf(ViaAdmin_Id_));
		sb.append(",CatFarmacologica_Id="+String.valueOf(CatFarmacologica_Id));
		sb.append(",Sustancia_Activa_Id_="+String.valueOf(Sustancia_Activa_Id_));
		sb.append(",CatFarmacologica_Id_="+CatFarmacologica_Id_);
		sb.append(",Generico_Id_="+String.valueOf(Generico_Id_));
		sb.append(",FormFarmaceutica_Ids_="+FormFarmaceutica_Ids_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class next_6Struct implements routines.system.IPersistableRow<next_6Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public Integer Item;

				public Integer getItem () {
					return this.Item;
				}

				public Boolean ItemIsNullable(){
				    return true;
				}
				public Boolean ItemIsKey(){
				    return false;
				}
				public Integer ItemLength(){
				    return 20;
				}
				public Integer ItemPrecision(){
				    return 0;
				}
				public String ItemDefault(){
				
					return null;
				
				}
				public String ItemComment(){
				
				    return "";
				
				}
				public String ItemPattern(){
				
					return "";
				
				}
				public String ItemOriginalDbColumnName(){
				
					return "Item";
				
				}

				
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 50;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 50;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return 20;
				}
				public Integer Estado_Precision(){
				    return 0;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return 20;
				}
				public Integer _InsertPrecision(){
				    return 0;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return 500;
				}
				public Integer _MessagePrecision(){
				    return 0;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico_;

				public String getNGenerico_ () {
					return this.NGenerico_;
				}

				public Boolean NGenerico_IsNullable(){
				    return true;
				}
				public Boolean NGenerico_IsKey(){
				    return false;
				}
				public Integer NGenerico_Length(){
				    return 350;
				}
				public Integer NGenerico_Precision(){
				    return 0;
				}
				public String NGenerico_Default(){
				
					return null;
				
				}
				public String NGenerico_Comment(){
				
				    return "";
				
				}
				public String NGenerico_Pattern(){
				
					return "";
				
				}
				public String NGenerico_OriginalDbColumnName(){
				
					return "NGenerico_";
				
				}

				
			    public String Concentracion_;

				public String getConcentracion_ () {
					return this.Concentracion_;
				}

				public Boolean Concentracion_IsNullable(){
				    return true;
				}
				public Boolean Concentracion_IsKey(){
				    return false;
				}
				public Integer Concentracion_Length(){
				    return 200;
				}
				public Integer Concentracion_Precision(){
				    return 0;
				}
				public String Concentracion_Default(){
				
					return null;
				
				}
				public String Concentracion_Comment(){
				
				    return "";
				
				}
				public String Concentracion_Pattern(){
				
					return "";
				
				}
				public String Concentracion_OriginalDbColumnName(){
				
					return "Concentracion_";
				
				}

				
			    public String CodAtc_;

				public String getCodAtc_ () {
					return this.CodAtc_;
				}

				public Boolean CodAtc_IsNullable(){
				    return true;
				}
				public Boolean CodAtc_IsKey(){
				    return false;
				}
				public Integer CodAtc_Length(){
				    return 50;
				}
				public Integer CodAtc_Precision(){
				    return 0;
				}
				public String CodAtc_Default(){
				
					return null;
				
				}
				public String CodAtc_Comment(){
				
				    return "";
				
				}
				public String CodAtc_Pattern(){
				
					return "";
				
				}
				public String CodAtc_OriginalDbColumnName(){
				
					return "CodAtc_";
				
				}

				
			    public String ViaAdmin_;

				public String getViaAdmin_ () {
					return this.ViaAdmin_;
				}

				public Boolean ViaAdmin_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Length(){
				    return 50;
				}
				public Integer ViaAdmin_Precision(){
				    return 0;
				}
				public String ViaAdmin_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_OriginalDbColumnName(){
				
					return "ViaAdmin_";
				
				}

				
			    public String CatFarmacologica_;

				public String getCatFarmacologica_ () {
					return this.CatFarmacologica_;
				}

				public Boolean CatFarmacologica_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Length(){
				    return 50;
				}
				public Integer CatFarmacologica_Precision(){
				    return 0;
				}
				public String CatFarmacologica_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_OriginalDbColumnName(){
				
					return "CatFarmacologica_";
				
				}

				
			    public String FormFarmaceutica_;

				public String getFormFarmaceutica_ () {
					return this.FormFarmaceutica_;
				}

				public Boolean FormFarmaceutica_IsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_IsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_Length(){
				    return 200;
				}
				public Integer FormFarmaceutica_Precision(){
				    return 0;
				}
				public String FormFarmaceutica_Default(){
				
					return null;
				
				}
				public String FormFarmaceutica_Comment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_Pattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_OriginalDbColumnName(){
				
					return "FormFarmaceutica_";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public BigDecimal ViaAdmin_Id_;

				public BigDecimal getViaAdmin_Id_ () {
					return this.ViaAdmin_Id_;
				}

				public Boolean ViaAdmin_Id_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_Id_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Id_Length(){
				    return 20;
				}
				public Integer ViaAdmin_Id_Precision(){
				    return 0;
				}
				public String ViaAdmin_Id_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Id_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Id_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_Id_OriginalDbColumnName(){
				
					return "ViaAdmin_Id_";
				
				}

				
			    public BigDecimal CatFarmacologica_Id;

				public BigDecimal getCatFarmacologica_Id () {
					return this.CatFarmacologica_Id;
				}

				public Boolean CatFarmacologica_IdIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_IdIsKey(){
				    return false;
				}
				public Integer CatFarmacologica_IdLength(){
				    return 20;
				}
				public Integer CatFarmacologica_IdPrecision(){
				    return 0;
				}
				public String CatFarmacologica_IdDefault(){
				
					return null;
				
				}
				public String CatFarmacologica_IdComment(){
				
				    return "";
				
				}
				public String CatFarmacologica_IdPattern(){
				
					return "";
				
				}
				public String CatFarmacologica_IdOriginalDbColumnName(){
				
					return "CatFarmacologica_Id";
				
				}

				
			    public BigDecimal Sustancia_Activa_Id_;

				public BigDecimal getSustancia_Activa_Id_ () {
					return this.Sustancia_Activa_Id_;
				}

				public Boolean Sustancia_Activa_Id_IsNullable(){
				    return true;
				}
				public Boolean Sustancia_Activa_Id_IsKey(){
				    return false;
				}
				public Integer Sustancia_Activa_Id_Length(){
				    return 20;
				}
				public Integer Sustancia_Activa_Id_Precision(){
				    return 0;
				}
				public String Sustancia_Activa_Id_Default(){
				
					return null;
				
				}
				public String Sustancia_Activa_Id_Comment(){
				
				    return "";
				
				}
				public String Sustancia_Activa_Id_Pattern(){
				
					return "";
				
				}
				public String Sustancia_Activa_Id_OriginalDbColumnName(){
				
					return "Sustancia_Activa_Id_";
				
				}

				
			    public String CatFarmacologica_Id_;

				public String getCatFarmacologica_Id_ () {
					return this.CatFarmacologica_Id_;
				}

				public Boolean CatFarmacologica_Id_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_Id_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Id_Length(){
				    return 50;
				}
				public Integer CatFarmacologica_Id_Precision(){
				    return 0;
				}
				public String CatFarmacologica_Id_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Id_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Id_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_Id_OriginalDbColumnName(){
				
					return "CatFarmacologica_Id_";
				
				}

				
			    public BigDecimal Generico_Id_;

				public BigDecimal getGenerico_Id_ () {
					return this.Generico_Id_;
				}

				public Boolean Generico_Id_IsNullable(){
				    return true;
				}
				public Boolean Generico_Id_IsKey(){
				    return false;
				}
				public Integer Generico_Id_Length(){
				    return 20;
				}
				public Integer Generico_Id_Precision(){
				    return 0;
				}
				public String Generico_Id_Default(){
				
					return null;
				
				}
				public String Generico_Id_Comment(){
				
				    return "";
				
				}
				public String Generico_Id_Pattern(){
				
					return "";
				
				}
				public String Generico_Id_OriginalDbColumnName(){
				
					return "Generico_Id_";
				
				}

				
			    public String FormFarmaceutica_Ids_;

				public String getFormFarmaceutica_Ids_ () {
					return this.FormFarmaceutica_Ids_;
				}

				public Boolean FormFarmaceutica_Ids_IsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_Ids_IsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_Ids_Length(){
				    return 50;
				}
				public Integer FormFarmaceutica_Ids_Precision(){
				    return 0;
				}
				public String FormFarmaceutica_Ids_Default(){
				
					return null;
				
				}
				public String FormFarmaceutica_Ids_Comment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_Ids_Pattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_Ids_OriginalDbColumnName(){
				
					return "FormFarmaceutica_Ids_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
						this.Item = readInteger(dis);
					
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
					this.CodAtc_ = readString(dis);
					
					this.ViaAdmin_ = readString(dis);
					
					this.CatFarmacologica_ = readString(dis);
					
					this.FormFarmaceutica_ = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.CatFarmacologica_Id_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
					this.FormFarmaceutica_Ids_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
						this.Item = readInteger(dis);
					
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
					this.CodAtc_ = readString(dis);
					
					this.ViaAdmin_ = readString(dis);
					
					this.CatFarmacologica_ = readString(dis);
					
					this.FormFarmaceutica_ = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.CatFarmacologica_Id_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
					this.FormFarmaceutica_Ids_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Item,dos);
					
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// String
				
						writeString(this.CodAtc_,dos);
					
					// String
				
						writeString(this.ViaAdmin_,dos);
					
					// String
				
						writeString(this.CatFarmacologica_,dos);
					
					// String
				
						writeString(this.FormFarmaceutica_,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CatFarmacologica_Id);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.CatFarmacologica_Id_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Generico_Id_);
					
					// String
				
						writeString(this.FormFarmaceutica_Ids_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.Item,dos);
					
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// String
				
						writeString(this.CodAtc_,dos);
					
					// String
				
						writeString(this.ViaAdmin_,dos);
					
					// String
				
						writeString(this.CatFarmacologica_,dos);
					
					// String
				
						writeString(this.FormFarmaceutica_,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CatFarmacologica_Id);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.CatFarmacologica_Id_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Generico_Id_);
					
					// String
				
						writeString(this.FormFarmaceutica_Ids_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Item="+String.valueOf(Item));
		sb.append(",upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Insert="+_Insert);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico_="+NGenerico_);
		sb.append(",Concentracion_="+Concentracion_);
		sb.append(",CodAtc_="+CodAtc_);
		sb.append(",ViaAdmin_="+ViaAdmin_);
		sb.append(",CatFarmacologica_="+CatFarmacologica_);
		sb.append(",FormFarmaceutica_="+FormFarmaceutica_);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",ViaAdmin_Id_="+String.valueOf(ViaAdmin_Id_));
		sb.append(",CatFarmacologica_Id="+String.valueOf(CatFarmacologica_Id));
		sb.append(",Sustancia_Activa_Id_="+String.valueOf(Sustancia_Activa_Id_));
		sb.append(",CatFarmacologica_Id_="+CatFarmacologica_Id_);
		sb.append(",Generico_Id_="+String.valueOf(Generico_Id_));
		sb.append(",FormFarmaceutica_Ids_="+FormFarmaceutica_Ids_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(next_6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 50;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 50;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return null;
				}
				public Integer _MessagePrecision(){
				    return null;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico_;

				public String getNGenerico_ () {
					return this.NGenerico_;
				}

				public Boolean NGenerico_IsNullable(){
				    return true;
				}
				public Boolean NGenerico_IsKey(){
				    return false;
				}
				public Integer NGenerico_Length(){
				    return 350;
				}
				public Integer NGenerico_Precision(){
				    return 0;
				}
				public String NGenerico_Default(){
				
					return null;
				
				}
				public String NGenerico_Comment(){
				
				    return "";
				
				}
				public String NGenerico_Pattern(){
				
					return "";
				
				}
				public String NGenerico_OriginalDbColumnName(){
				
					return "NGenerico_";
				
				}

				
			    public String Concentracion_;

				public String getConcentracion_ () {
					return this.Concentracion_;
				}

				public Boolean Concentracion_IsNullable(){
				    return true;
				}
				public Boolean Concentracion_IsKey(){
				    return false;
				}
				public Integer Concentracion_Length(){
				    return 200;
				}
				public Integer Concentracion_Precision(){
				    return 0;
				}
				public String Concentracion_Default(){
				
					return null;
				
				}
				public String Concentracion_Comment(){
				
				    return "";
				
				}
				public String Concentracion_Pattern(){
				
					return "";
				
				}
				public String Concentracion_OriginalDbColumnName(){
				
					return "Concentracion_";
				
				}

				
			    public String CodAtc_;

				public String getCodAtc_ () {
					return this.CodAtc_;
				}

				public Boolean CodAtc_IsNullable(){
				    return true;
				}
				public Boolean CodAtc_IsKey(){
				    return false;
				}
				public Integer CodAtc_Length(){
				    return 50;
				}
				public Integer CodAtc_Precision(){
				    return 0;
				}
				public String CodAtc_Default(){
				
					return null;
				
				}
				public String CodAtc_Comment(){
				
				    return "";
				
				}
				public String CodAtc_Pattern(){
				
					return "";
				
				}
				public String CodAtc_OriginalDbColumnName(){
				
					return "CodAtc_";
				
				}

				
			    public String ViaAdmin_;

				public String getViaAdmin_ () {
					return this.ViaAdmin_;
				}

				public Boolean ViaAdmin_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Length(){
				    return 50;
				}
				public Integer ViaAdmin_Precision(){
				    return 0;
				}
				public String ViaAdmin_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_OriginalDbColumnName(){
				
					return "ViaAdmin_";
				
				}

				
			    public String CatFarmacologica_;

				public String getCatFarmacologica_ () {
					return this.CatFarmacologica_;
				}

				public Boolean CatFarmacologica_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Length(){
				    return 50;
				}
				public Integer CatFarmacologica_Precision(){
				    return 0;
				}
				public String CatFarmacologica_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_OriginalDbColumnName(){
				
					return "CatFarmacologica_";
				
				}

				
			    public String FormFarmaceutica_;

				public String getFormFarmaceutica_ () {
					return this.FormFarmaceutica_;
				}

				public Boolean FormFarmaceutica_IsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_IsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_Length(){
				    return 200;
				}
				public Integer FormFarmaceutica_Precision(){
				    return 0;
				}
				public String FormFarmaceutica_Default(){
				
					return null;
				
				}
				public String FormFarmaceutica_Comment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_Pattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_OriginalDbColumnName(){
				
					return "FormFarmaceutica_";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public BigDecimal ViaAdmin_Id_;

				public BigDecimal getViaAdmin_Id_ () {
					return this.ViaAdmin_Id_;
				}

				public Boolean ViaAdmin_Id_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_Id_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Id_Length(){
				    return null;
				}
				public Integer ViaAdmin_Id_Precision(){
				    return null;
				}
				public String ViaAdmin_Id_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Id_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Id_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_Id_OriginalDbColumnName(){
				
					return "ViaAdmin_Id_";
				
				}

				
			    public BigDecimal CatFarmacologica_Id;

				public BigDecimal getCatFarmacologica_Id () {
					return this.CatFarmacologica_Id;
				}

				public Boolean CatFarmacologica_IdIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_IdIsKey(){
				    return false;
				}
				public Integer CatFarmacologica_IdLength(){
				    return null;
				}
				public Integer CatFarmacologica_IdPrecision(){
				    return null;
				}
				public String CatFarmacologica_IdDefault(){
				
					return null;
				
				}
				public String CatFarmacologica_IdComment(){
				
				    return "";
				
				}
				public String CatFarmacologica_IdPattern(){
				
					return "";
				
				}
				public String CatFarmacologica_IdOriginalDbColumnName(){
				
					return "CatFarmacologica_Id";
				
				}

				
			    public BigDecimal Sustancia_Activa_Id_;

				public BigDecimal getSustancia_Activa_Id_ () {
					return this.Sustancia_Activa_Id_;
				}

				public Boolean Sustancia_Activa_Id_IsNullable(){
				    return true;
				}
				public Boolean Sustancia_Activa_Id_IsKey(){
				    return false;
				}
				public Integer Sustancia_Activa_Id_Length(){
				    return null;
				}
				public Integer Sustancia_Activa_Id_Precision(){
				    return null;
				}
				public String Sustancia_Activa_Id_Default(){
				
					return null;
				
				}
				public String Sustancia_Activa_Id_Comment(){
				
				    return "";
				
				}
				public String Sustancia_Activa_Id_Pattern(){
				
					return "";
				
				}
				public String Sustancia_Activa_Id_OriginalDbColumnName(){
				
					return "Sustancia_Activa_Id_";
				
				}

				
			    public String CatFarmacologica_Id_;

				public String getCatFarmacologica_Id_ () {
					return this.CatFarmacologica_Id_;
				}

				public Boolean CatFarmacologica_Id_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_Id_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Id_Length(){
				    return null;
				}
				public Integer CatFarmacologica_Id_Precision(){
				    return null;
				}
				public String CatFarmacologica_Id_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Id_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Id_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_Id_OriginalDbColumnName(){
				
					return "CatFarmacologica_Id_";
				
				}

				
			    public BigDecimal Generico_Id_;

				public BigDecimal getGenerico_Id_ () {
					return this.Generico_Id_;
				}

				public Boolean Generico_Id_IsNullable(){
				    return true;
				}
				public Boolean Generico_Id_IsKey(){
				    return false;
				}
				public Integer Generico_Id_Length(){
				    return null;
				}
				public Integer Generico_Id_Precision(){
				    return null;
				}
				public String Generico_Id_Default(){
				
					return null;
				
				}
				public String Generico_Id_Comment(){
				
				    return "";
				
				}
				public String Generico_Id_Pattern(){
				
					return "";
				
				}
				public String Generico_Id_OriginalDbColumnName(){
				
					return "Generico_Id_";
				
				}

				
			    public BigDecimal FormFarmaceutica_Id;

				public BigDecimal getFormFarmaceutica_Id () {
					return this.FormFarmaceutica_Id;
				}

				public Boolean FormFarmaceutica_IdIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_IdIsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_IdLength(){
				    return null;
				}
				public Integer FormFarmaceutica_IdPrecision(){
				    return null;
				}
				public String FormFarmaceutica_IdDefault(){
				
					return null;
				
				}
				public String FormFarmaceutica_IdComment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_IdPattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_IdOriginalDbColumnName(){
				
					return "FormFarmaceutica_Id";
				
				}

				
			    public String FormFarmaceutica_Ids_;

				public String getFormFarmaceutica_Ids_ () {
					return this.FormFarmaceutica_Ids_;
				}

				public Boolean FormFarmaceutica_Ids_IsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_Ids_IsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_Ids_Length(){
				    return null;
				}
				public Integer FormFarmaceutica_Ids_Precision(){
				    return null;
				}
				public String FormFarmaceutica_Ids_Default(){
				
					return null;
				
				}
				public String FormFarmaceutica_Ids_Comment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_Ids_Pattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_Ids_OriginalDbColumnName(){
				
					return "FormFarmaceutica_Ids_";
				
				}

				
			    public String Id_;

				public String getId_ () {
					return this.Id_;
				}

				public Boolean Id_IsNullable(){
				    return true;
				}
				public Boolean Id_IsKey(){
				    return false;
				}
				public Integer Id_Length(){
				    return null;
				}
				public Integer Id_Precision(){
				    return null;
				}
				public String Id_Default(){
				
					return null;
				
				}
				public String Id_Comment(){
				
				    return "";
				
				}
				public String Id_Pattern(){
				
					return "";
				
				}
				public String Id_OriginalDbColumnName(){
				
					return "Id_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
					this.CodAtc_ = readString(dis);
					
					this.ViaAdmin_ = readString(dis);
					
					this.CatFarmacologica_ = readString(dis);
					
					this.FormFarmaceutica_ = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.CatFarmacologica_Id_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
						this.FormFarmaceutica_Id = (BigDecimal) dis.readObject();
					
					this.FormFarmaceutica_Ids_ = readString(dis);
					
					this.Id_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
					this.CodAtc_ = readString(dis);
					
					this.ViaAdmin_ = readString(dis);
					
					this.CatFarmacologica_ = readString(dis);
					
					this.FormFarmaceutica_ = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.CatFarmacologica_Id_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
						this.FormFarmaceutica_Id = (BigDecimal) dis.readObject();
					
					this.FormFarmaceutica_Ids_ = readString(dis);
					
					this.Id_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// String
				
						writeString(this.CodAtc_,dos);
					
					// String
				
						writeString(this.ViaAdmin_,dos);
					
					// String
				
						writeString(this.CatFarmacologica_,dos);
					
					// String
				
						writeString(this.FormFarmaceutica_,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CatFarmacologica_Id);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.CatFarmacologica_Id_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Generico_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FormFarmaceutica_Id);
					
					// String
				
						writeString(this.FormFarmaceutica_Ids_,dos);
					
					// String
				
						writeString(this.Id_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// String
				
						writeString(this.CodAtc_,dos);
					
					// String
				
						writeString(this.ViaAdmin_,dos);
					
					// String
				
						writeString(this.CatFarmacologica_,dos);
					
					// String
				
						writeString(this.FormFarmaceutica_,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CatFarmacologica_Id);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.CatFarmacologica_Id_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Generico_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FormFarmaceutica_Id);
					
					// String
				
						writeString(this.FormFarmaceutica_Ids_,dos);
					
					// String
				
						writeString(this.Id_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Insert="+_Insert);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico_="+NGenerico_);
		sb.append(",Concentracion_="+Concentracion_);
		sb.append(",CodAtc_="+CodAtc_);
		sb.append(",ViaAdmin_="+ViaAdmin_);
		sb.append(",CatFarmacologica_="+CatFarmacologica_);
		sb.append(",FormFarmaceutica_="+FormFarmaceutica_);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",ViaAdmin_Id_="+String.valueOf(ViaAdmin_Id_));
		sb.append(",CatFarmacologica_Id="+String.valueOf(CatFarmacologica_Id));
		sb.append(",Sustancia_Activa_Id_="+String.valueOf(Sustancia_Activa_Id_));
		sb.append(",CatFarmacologica_Id_="+CatFarmacologica_Id_);
		sb.append(",Generico_Id_="+String.valueOf(Generico_Id_));
		sb.append(",FormFarmaceutica_Id="+String.valueOf(FormFarmaceutica_Id));
		sb.append(",FormFarmaceutica_Ids_="+FormFarmaceutica_Ids_);
		sb.append(",Id_="+Id_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 50;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 50;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return null;
				}
				public Integer _MessagePrecision(){
				    return null;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico_;

				public String getNGenerico_ () {
					return this.NGenerico_;
				}

				public Boolean NGenerico_IsNullable(){
				    return true;
				}
				public Boolean NGenerico_IsKey(){
				    return false;
				}
				public Integer NGenerico_Length(){
				    return 350;
				}
				public Integer NGenerico_Precision(){
				    return 0;
				}
				public String NGenerico_Default(){
				
					return null;
				
				}
				public String NGenerico_Comment(){
				
				    return "";
				
				}
				public String NGenerico_Pattern(){
				
					return "";
				
				}
				public String NGenerico_OriginalDbColumnName(){
				
					return "NGenerico_";
				
				}

				
			    public String Concentracion_;

				public String getConcentracion_ () {
					return this.Concentracion_;
				}

				public Boolean Concentracion_IsNullable(){
				    return true;
				}
				public Boolean Concentracion_IsKey(){
				    return false;
				}
				public Integer Concentracion_Length(){
				    return 200;
				}
				public Integer Concentracion_Precision(){
				    return 0;
				}
				public String Concentracion_Default(){
				
					return null;
				
				}
				public String Concentracion_Comment(){
				
				    return "";
				
				}
				public String Concentracion_Pattern(){
				
					return "";
				
				}
				public String Concentracion_OriginalDbColumnName(){
				
					return "Concentracion_";
				
				}

				
			    public String CodAtc_;

				public String getCodAtc_ () {
					return this.CodAtc_;
				}

				public Boolean CodAtc_IsNullable(){
				    return true;
				}
				public Boolean CodAtc_IsKey(){
				    return false;
				}
				public Integer CodAtc_Length(){
				    return 50;
				}
				public Integer CodAtc_Precision(){
				    return 0;
				}
				public String CodAtc_Default(){
				
					return null;
				
				}
				public String CodAtc_Comment(){
				
				    return "";
				
				}
				public String CodAtc_Pattern(){
				
					return "";
				
				}
				public String CodAtc_OriginalDbColumnName(){
				
					return "CodAtc_";
				
				}

				
			    public String ViaAdmin_;

				public String getViaAdmin_ () {
					return this.ViaAdmin_;
				}

				public Boolean ViaAdmin_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Length(){
				    return 50;
				}
				public Integer ViaAdmin_Precision(){
				    return 0;
				}
				public String ViaAdmin_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_OriginalDbColumnName(){
				
					return "ViaAdmin_";
				
				}

				
			    public String CatFarmacologica_;

				public String getCatFarmacologica_ () {
					return this.CatFarmacologica_;
				}

				public Boolean CatFarmacologica_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Length(){
				    return 50;
				}
				public Integer CatFarmacologica_Precision(){
				    return 0;
				}
				public String CatFarmacologica_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_OriginalDbColumnName(){
				
					return "CatFarmacologica_";
				
				}

				
			    public String FormFarmaceutica_;

				public String getFormFarmaceutica_ () {
					return this.FormFarmaceutica_;
				}

				public Boolean FormFarmaceutica_IsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_IsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_Length(){
				    return 200;
				}
				public Integer FormFarmaceutica_Precision(){
				    return 0;
				}
				public String FormFarmaceutica_Default(){
				
					return null;
				
				}
				public String FormFarmaceutica_Comment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_Pattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_OriginalDbColumnName(){
				
					return "FormFarmaceutica_";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public BigDecimal ViaAdmin_Id_;

				public BigDecimal getViaAdmin_Id_ () {
					return this.ViaAdmin_Id_;
				}

				public Boolean ViaAdmin_Id_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_Id_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Id_Length(){
				    return null;
				}
				public Integer ViaAdmin_Id_Precision(){
				    return null;
				}
				public String ViaAdmin_Id_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Id_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Id_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_Id_OriginalDbColumnName(){
				
					return "ViaAdmin_Id_";
				
				}

				
			    public BigDecimal CatFarmacologica_Id;

				public BigDecimal getCatFarmacologica_Id () {
					return this.CatFarmacologica_Id;
				}

				public Boolean CatFarmacologica_IdIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_IdIsKey(){
				    return false;
				}
				public Integer CatFarmacologica_IdLength(){
				    return null;
				}
				public Integer CatFarmacologica_IdPrecision(){
				    return null;
				}
				public String CatFarmacologica_IdDefault(){
				
					return null;
				
				}
				public String CatFarmacologica_IdComment(){
				
				    return "";
				
				}
				public String CatFarmacologica_IdPattern(){
				
					return "";
				
				}
				public String CatFarmacologica_IdOriginalDbColumnName(){
				
					return "CatFarmacologica_Id";
				
				}

				
			    public BigDecimal Sustancia_Activa_Id_;

				public BigDecimal getSustancia_Activa_Id_ () {
					return this.Sustancia_Activa_Id_;
				}

				public Boolean Sustancia_Activa_Id_IsNullable(){
				    return true;
				}
				public Boolean Sustancia_Activa_Id_IsKey(){
				    return false;
				}
				public Integer Sustancia_Activa_Id_Length(){
				    return null;
				}
				public Integer Sustancia_Activa_Id_Precision(){
				    return null;
				}
				public String Sustancia_Activa_Id_Default(){
				
					return null;
				
				}
				public String Sustancia_Activa_Id_Comment(){
				
				    return "";
				
				}
				public String Sustancia_Activa_Id_Pattern(){
				
					return "";
				
				}
				public String Sustancia_Activa_Id_OriginalDbColumnName(){
				
					return "Sustancia_Activa_Id_";
				
				}

				
			    public String CatFarmacologica_Id_;

				public String getCatFarmacologica_Id_ () {
					return this.CatFarmacologica_Id_;
				}

				public Boolean CatFarmacologica_Id_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_Id_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Id_Length(){
				    return null;
				}
				public Integer CatFarmacologica_Id_Precision(){
				    return null;
				}
				public String CatFarmacologica_Id_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Id_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Id_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_Id_OriginalDbColumnName(){
				
					return "CatFarmacologica_Id_";
				
				}

				
			    public BigDecimal Generico_Id_;

				public BigDecimal getGenerico_Id_ () {
					return this.Generico_Id_;
				}

				public Boolean Generico_Id_IsNullable(){
				    return true;
				}
				public Boolean Generico_Id_IsKey(){
				    return false;
				}
				public Integer Generico_Id_Length(){
				    return null;
				}
				public Integer Generico_Id_Precision(){
				    return null;
				}
				public String Generico_Id_Default(){
				
					return null;
				
				}
				public String Generico_Id_Comment(){
				
				    return "";
				
				}
				public String Generico_Id_Pattern(){
				
					return "";
				
				}
				public String Generico_Id_OriginalDbColumnName(){
				
					return "Generico_Id_";
				
				}

				
			    public BigDecimal FormFarmaceutica_Id;

				public BigDecimal getFormFarmaceutica_Id () {
					return this.FormFarmaceutica_Id;
				}

				public Boolean FormFarmaceutica_IdIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_IdIsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_IdLength(){
				    return null;
				}
				public Integer FormFarmaceutica_IdPrecision(){
				    return null;
				}
				public String FormFarmaceutica_IdDefault(){
				
					return null;
				
				}
				public String FormFarmaceutica_IdComment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_IdPattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_IdOriginalDbColumnName(){
				
					return "FormFarmaceutica_Id";
				
				}

				
			    public String FormFarmaceutica_Ids_;

				public String getFormFarmaceutica_Ids_ () {
					return this.FormFarmaceutica_Ids_;
				}

				public Boolean FormFarmaceutica_Ids_IsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_Ids_IsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_Ids_Length(){
				    return null;
				}
				public Integer FormFarmaceutica_Ids_Precision(){
				    return null;
				}
				public String FormFarmaceutica_Ids_Default(){
				
					return null;
				
				}
				public String FormFarmaceutica_Ids_Comment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_Ids_Pattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_Ids_OriginalDbColumnName(){
				
					return "FormFarmaceutica_Ids_";
				
				}

				
			    public String Id_;

				public String getId_ () {
					return this.Id_;
				}

				public Boolean Id_IsNullable(){
				    return true;
				}
				public Boolean Id_IsKey(){
				    return false;
				}
				public Integer Id_Length(){
				    return null;
				}
				public Integer Id_Precision(){
				    return null;
				}
				public String Id_Default(){
				
					return null;
				
				}
				public String Id_Comment(){
				
				    return "";
				
				}
				public String Id_Pattern(){
				
					return "";
				
				}
				public String Id_OriginalDbColumnName(){
				
					return "Id_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
					this.CodAtc_ = readString(dis);
					
					this.ViaAdmin_ = readString(dis);
					
					this.CatFarmacologica_ = readString(dis);
					
					this.FormFarmaceutica_ = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.CatFarmacologica_Id_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
						this.FormFarmaceutica_Id = (BigDecimal) dis.readObject();
					
					this.FormFarmaceutica_Ids_ = readString(dis);
					
					this.Id_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
					this.CodAtc_ = readString(dis);
					
					this.ViaAdmin_ = readString(dis);
					
					this.CatFarmacologica_ = readString(dis);
					
					this.FormFarmaceutica_ = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.CatFarmacologica_Id_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
						this.FormFarmaceutica_Id = (BigDecimal) dis.readObject();
					
					this.FormFarmaceutica_Ids_ = readString(dis);
					
					this.Id_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// String
				
						writeString(this.CodAtc_,dos);
					
					// String
				
						writeString(this.ViaAdmin_,dos);
					
					// String
				
						writeString(this.CatFarmacologica_,dos);
					
					// String
				
						writeString(this.FormFarmaceutica_,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CatFarmacologica_Id);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.CatFarmacologica_Id_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Generico_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FormFarmaceutica_Id);
					
					// String
				
						writeString(this.FormFarmaceutica_Ids_,dos);
					
					// String
				
						writeString(this.Id_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// String
				
						writeString(this.CodAtc_,dos);
					
					// String
				
						writeString(this.ViaAdmin_,dos);
					
					// String
				
						writeString(this.CatFarmacologica_,dos);
					
					// String
				
						writeString(this.FormFarmaceutica_,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CatFarmacologica_Id);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.CatFarmacologica_Id_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Generico_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FormFarmaceutica_Id);
					
					// String
				
						writeString(this.FormFarmaceutica_Ids_,dos);
					
					// String
				
						writeString(this.Id_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Insert="+_Insert);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico_="+NGenerico_);
		sb.append(",Concentracion_="+Concentracion_);
		sb.append(",CodAtc_="+CodAtc_);
		sb.append(",ViaAdmin_="+ViaAdmin_);
		sb.append(",CatFarmacologica_="+CatFarmacologica_);
		sb.append(",FormFarmaceutica_="+FormFarmaceutica_);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",ViaAdmin_Id_="+String.valueOf(ViaAdmin_Id_));
		sb.append(",CatFarmacologica_Id="+String.valueOf(CatFarmacologica_Id));
		sb.append(",Sustancia_Activa_Id_="+String.valueOf(Sustancia_Activa_Id_));
		sb.append(",CatFarmacologica_Id_="+CatFarmacologica_Id_);
		sb.append(",Generico_Id_="+String.valueOf(Generico_Id_));
		sb.append(",FormFarmaceutica_Id="+String.valueOf(FormFarmaceutica_Id));
		sb.append(",FormFarmaceutica_Ids_="+FormFarmaceutica_Ids_);
		sb.append(",Id_="+Id_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 50;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 50;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return null;
				}
				public Integer _MessagePrecision(){
				    return null;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico_;

				public String getNGenerico_ () {
					return this.NGenerico_;
				}

				public Boolean NGenerico_IsNullable(){
				    return true;
				}
				public Boolean NGenerico_IsKey(){
				    return false;
				}
				public Integer NGenerico_Length(){
				    return 350;
				}
				public Integer NGenerico_Precision(){
				    return 0;
				}
				public String NGenerico_Default(){
				
					return null;
				
				}
				public String NGenerico_Comment(){
				
				    return "";
				
				}
				public String NGenerico_Pattern(){
				
					return "";
				
				}
				public String NGenerico_OriginalDbColumnName(){
				
					return "NGenerico_";
				
				}

				
			    public String Concentracion_;

				public String getConcentracion_ () {
					return this.Concentracion_;
				}

				public Boolean Concentracion_IsNullable(){
				    return true;
				}
				public Boolean Concentracion_IsKey(){
				    return false;
				}
				public Integer Concentracion_Length(){
				    return 200;
				}
				public Integer Concentracion_Precision(){
				    return 0;
				}
				public String Concentracion_Default(){
				
					return null;
				
				}
				public String Concentracion_Comment(){
				
				    return "";
				
				}
				public String Concentracion_Pattern(){
				
					return "";
				
				}
				public String Concentracion_OriginalDbColumnName(){
				
					return "Concentracion_";
				
				}

				
			    public String CodAtc_;

				public String getCodAtc_ () {
					return this.CodAtc_;
				}

				public Boolean CodAtc_IsNullable(){
				    return true;
				}
				public Boolean CodAtc_IsKey(){
				    return false;
				}
				public Integer CodAtc_Length(){
				    return 50;
				}
				public Integer CodAtc_Precision(){
				    return 0;
				}
				public String CodAtc_Default(){
				
					return null;
				
				}
				public String CodAtc_Comment(){
				
				    return "";
				
				}
				public String CodAtc_Pattern(){
				
					return "";
				
				}
				public String CodAtc_OriginalDbColumnName(){
				
					return "CodAtc_";
				
				}

				
			    public String ViaAdmin_;

				public String getViaAdmin_ () {
					return this.ViaAdmin_;
				}

				public Boolean ViaAdmin_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Length(){
				    return 50;
				}
				public Integer ViaAdmin_Precision(){
				    return 0;
				}
				public String ViaAdmin_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_OriginalDbColumnName(){
				
					return "ViaAdmin_";
				
				}

				
			    public String CatFarmacologica_;

				public String getCatFarmacologica_ () {
					return this.CatFarmacologica_;
				}

				public Boolean CatFarmacologica_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Length(){
				    return 50;
				}
				public Integer CatFarmacologica_Precision(){
				    return 0;
				}
				public String CatFarmacologica_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_OriginalDbColumnName(){
				
					return "CatFarmacologica_";
				
				}

				
			    public String FormFarmaceutica_;

				public String getFormFarmaceutica_ () {
					return this.FormFarmaceutica_;
				}

				public Boolean FormFarmaceutica_IsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_IsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_Length(){
				    return 200;
				}
				public Integer FormFarmaceutica_Precision(){
				    return 0;
				}
				public String FormFarmaceutica_Default(){
				
					return null;
				
				}
				public String FormFarmaceutica_Comment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_Pattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_OriginalDbColumnName(){
				
					return "FormFarmaceutica_";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public BigDecimal ViaAdmin_Id_;

				public BigDecimal getViaAdmin_Id_ () {
					return this.ViaAdmin_Id_;
				}

				public Boolean ViaAdmin_Id_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_Id_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Id_Length(){
				    return null;
				}
				public Integer ViaAdmin_Id_Precision(){
				    return null;
				}
				public String ViaAdmin_Id_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Id_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Id_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_Id_OriginalDbColumnName(){
				
					return "ViaAdmin_Id_";
				
				}

				
			    public BigDecimal CatFarmacologica_Id;

				public BigDecimal getCatFarmacologica_Id () {
					return this.CatFarmacologica_Id;
				}

				public Boolean CatFarmacologica_IdIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_IdIsKey(){
				    return false;
				}
				public Integer CatFarmacologica_IdLength(){
				    return null;
				}
				public Integer CatFarmacologica_IdPrecision(){
				    return null;
				}
				public String CatFarmacologica_IdDefault(){
				
					return null;
				
				}
				public String CatFarmacologica_IdComment(){
				
				    return "";
				
				}
				public String CatFarmacologica_IdPattern(){
				
					return "";
				
				}
				public String CatFarmacologica_IdOriginalDbColumnName(){
				
					return "CatFarmacologica_Id";
				
				}

				
			    public BigDecimal Sustancia_Activa_Id_;

				public BigDecimal getSustancia_Activa_Id_ () {
					return this.Sustancia_Activa_Id_;
				}

				public Boolean Sustancia_Activa_Id_IsNullable(){
				    return true;
				}
				public Boolean Sustancia_Activa_Id_IsKey(){
				    return false;
				}
				public Integer Sustancia_Activa_Id_Length(){
				    return null;
				}
				public Integer Sustancia_Activa_Id_Precision(){
				    return null;
				}
				public String Sustancia_Activa_Id_Default(){
				
					return null;
				
				}
				public String Sustancia_Activa_Id_Comment(){
				
				    return "";
				
				}
				public String Sustancia_Activa_Id_Pattern(){
				
					return "";
				
				}
				public String Sustancia_Activa_Id_OriginalDbColumnName(){
				
					return "Sustancia_Activa_Id_";
				
				}

				
			    public String CatFarmacologica_Id_;

				public String getCatFarmacologica_Id_ () {
					return this.CatFarmacologica_Id_;
				}

				public Boolean CatFarmacologica_Id_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_Id_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Id_Length(){
				    return null;
				}
				public Integer CatFarmacologica_Id_Precision(){
				    return null;
				}
				public String CatFarmacologica_Id_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Id_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Id_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_Id_OriginalDbColumnName(){
				
					return "CatFarmacologica_Id_";
				
				}

				
			    public BigDecimal Generico_Id_;

				public BigDecimal getGenerico_Id_ () {
					return this.Generico_Id_;
				}

				public Boolean Generico_Id_IsNullable(){
				    return true;
				}
				public Boolean Generico_Id_IsKey(){
				    return false;
				}
				public Integer Generico_Id_Length(){
				    return null;
				}
				public Integer Generico_Id_Precision(){
				    return null;
				}
				public String Generico_Id_Default(){
				
					return null;
				
				}
				public String Generico_Id_Comment(){
				
				    return "";
				
				}
				public String Generico_Id_Pattern(){
				
					return "";
				
				}
				public String Generico_Id_OriginalDbColumnName(){
				
					return "Generico_Id_";
				
				}

				
			    public BigDecimal FormFarmaceutica_Id;

				public BigDecimal getFormFarmaceutica_Id () {
					return this.FormFarmaceutica_Id;
				}

				public Boolean FormFarmaceutica_IdIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_IdIsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_IdLength(){
				    return null;
				}
				public Integer FormFarmaceutica_IdPrecision(){
				    return null;
				}
				public String FormFarmaceutica_IdDefault(){
				
					return null;
				
				}
				public String FormFarmaceutica_IdComment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_IdPattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_IdOriginalDbColumnName(){
				
					return "FormFarmaceutica_Id";
				
				}

				
			    public String FormFarmaceutica_Ids_;

				public String getFormFarmaceutica_Ids_ () {
					return this.FormFarmaceutica_Ids_;
				}

				public Boolean FormFarmaceutica_Ids_IsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_Ids_IsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_Ids_Length(){
				    return null;
				}
				public Integer FormFarmaceutica_Ids_Precision(){
				    return null;
				}
				public String FormFarmaceutica_Ids_Default(){
				
					return null;
				
				}
				public String FormFarmaceutica_Ids_Comment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_Ids_Pattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_Ids_OriginalDbColumnName(){
				
					return "FormFarmaceutica_Ids_";
				
				}

				
			    public String Id_;

				public String getId_ () {
					return this.Id_;
				}

				public Boolean Id_IsNullable(){
				    return true;
				}
				public Boolean Id_IsKey(){
				    return false;
				}
				public Integer Id_Length(){
				    return null;
				}
				public Integer Id_Precision(){
				    return null;
				}
				public String Id_Default(){
				
					return null;
				
				}
				public String Id_Comment(){
				
				    return "";
				
				}
				public String Id_Pattern(){
				
					return "";
				
				}
				public String Id_OriginalDbColumnName(){
				
					return "Id_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
					this.CodAtc_ = readString(dis);
					
					this.ViaAdmin_ = readString(dis);
					
					this.CatFarmacologica_ = readString(dis);
					
					this.FormFarmaceutica_ = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.CatFarmacologica_Id_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
						this.FormFarmaceutica_Id = (BigDecimal) dis.readObject();
					
					this.FormFarmaceutica_Ids_ = readString(dis);
					
					this.Id_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
					this.CodAtc_ = readString(dis);
					
					this.ViaAdmin_ = readString(dis);
					
					this.CatFarmacologica_ = readString(dis);
					
					this.FormFarmaceutica_ = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.CatFarmacologica_Id_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
						this.FormFarmaceutica_Id = (BigDecimal) dis.readObject();
					
					this.FormFarmaceutica_Ids_ = readString(dis);
					
					this.Id_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// String
				
						writeString(this.CodAtc_,dos);
					
					// String
				
						writeString(this.ViaAdmin_,dos);
					
					// String
				
						writeString(this.CatFarmacologica_,dos);
					
					// String
				
						writeString(this.FormFarmaceutica_,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CatFarmacologica_Id);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.CatFarmacologica_Id_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Generico_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FormFarmaceutica_Id);
					
					// String
				
						writeString(this.FormFarmaceutica_Ids_,dos);
					
					// String
				
						writeString(this.Id_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// String
				
						writeString(this.CodAtc_,dos);
					
					// String
				
						writeString(this.ViaAdmin_,dos);
					
					// String
				
						writeString(this.CatFarmacologica_,dos);
					
					// String
				
						writeString(this.FormFarmaceutica_,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CatFarmacologica_Id);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.CatFarmacologica_Id_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Generico_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FormFarmaceutica_Id);
					
					// String
				
						writeString(this.FormFarmaceutica_Ids_,dos);
					
					// String
				
						writeString(this.Id_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Insert="+_Insert);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico_="+NGenerico_);
		sb.append(",Concentracion_="+Concentracion_);
		sb.append(",CodAtc_="+CodAtc_);
		sb.append(",ViaAdmin_="+ViaAdmin_);
		sb.append(",CatFarmacologica_="+CatFarmacologica_);
		sb.append(",FormFarmaceutica_="+FormFarmaceutica_);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",ViaAdmin_Id_="+String.valueOf(ViaAdmin_Id_));
		sb.append(",CatFarmacologica_Id="+String.valueOf(CatFarmacologica_Id));
		sb.append(",Sustancia_Activa_Id_="+String.valueOf(Sustancia_Activa_Id_));
		sb.append(",CatFarmacologica_Id_="+CatFarmacologica_Id_);
		sb.append(",Generico_Id_="+String.valueOf(Generico_Id_));
		sb.append(",FormFarmaceutica_Id="+String.valueOf(FormFarmaceutica_Id));
		sb.append(",FormFarmaceutica_Ids_="+FormFarmaceutica_Ids_);
		sb.append(",Id_="+Id_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 50;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 50;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return null;
				}
				public Integer _MessagePrecision(){
				    return null;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico_;

				public String getNGenerico_ () {
					return this.NGenerico_;
				}

				public Boolean NGenerico_IsNullable(){
				    return true;
				}
				public Boolean NGenerico_IsKey(){
				    return false;
				}
				public Integer NGenerico_Length(){
				    return 350;
				}
				public Integer NGenerico_Precision(){
				    return 0;
				}
				public String NGenerico_Default(){
				
					return null;
				
				}
				public String NGenerico_Comment(){
				
				    return "";
				
				}
				public String NGenerico_Pattern(){
				
					return "";
				
				}
				public String NGenerico_OriginalDbColumnName(){
				
					return "NGenerico_";
				
				}

				
			    public String Concentracion_;

				public String getConcentracion_ () {
					return this.Concentracion_;
				}

				public Boolean Concentracion_IsNullable(){
				    return true;
				}
				public Boolean Concentracion_IsKey(){
				    return false;
				}
				public Integer Concentracion_Length(){
				    return 200;
				}
				public Integer Concentracion_Precision(){
				    return 0;
				}
				public String Concentracion_Default(){
				
					return null;
				
				}
				public String Concentracion_Comment(){
				
				    return "";
				
				}
				public String Concentracion_Pattern(){
				
					return "";
				
				}
				public String Concentracion_OriginalDbColumnName(){
				
					return "Concentracion_";
				
				}

				
			    public String CodAtc_;

				public String getCodAtc_ () {
					return this.CodAtc_;
				}

				public Boolean CodAtc_IsNullable(){
				    return true;
				}
				public Boolean CodAtc_IsKey(){
				    return false;
				}
				public Integer CodAtc_Length(){
				    return 50;
				}
				public Integer CodAtc_Precision(){
				    return 0;
				}
				public String CodAtc_Default(){
				
					return null;
				
				}
				public String CodAtc_Comment(){
				
				    return "";
				
				}
				public String CodAtc_Pattern(){
				
					return "";
				
				}
				public String CodAtc_OriginalDbColumnName(){
				
					return "CodAtc_";
				
				}

				
			    public String ViaAdmin_;

				public String getViaAdmin_ () {
					return this.ViaAdmin_;
				}

				public Boolean ViaAdmin_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Length(){
				    return 50;
				}
				public Integer ViaAdmin_Precision(){
				    return 0;
				}
				public String ViaAdmin_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_OriginalDbColumnName(){
				
					return "ViaAdmin_";
				
				}

				
			    public String CatFarmacologica_;

				public String getCatFarmacologica_ () {
					return this.CatFarmacologica_;
				}

				public Boolean CatFarmacologica_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Length(){
				    return 50;
				}
				public Integer CatFarmacologica_Precision(){
				    return 0;
				}
				public String CatFarmacologica_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_OriginalDbColumnName(){
				
					return "CatFarmacologica_";
				
				}

				
			    public String FormFarmaceutica_;

				public String getFormFarmaceutica_ () {
					return this.FormFarmaceutica_;
				}

				public Boolean FormFarmaceutica_IsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_IsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_Length(){
				    return 200;
				}
				public Integer FormFarmaceutica_Precision(){
				    return 0;
				}
				public String FormFarmaceutica_Default(){
				
					return null;
				
				}
				public String FormFarmaceutica_Comment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_Pattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_OriginalDbColumnName(){
				
					return "FormFarmaceutica_";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public BigDecimal ViaAdmin_Id_;

				public BigDecimal getViaAdmin_Id_ () {
					return this.ViaAdmin_Id_;
				}

				public Boolean ViaAdmin_Id_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_Id_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Id_Length(){
				    return null;
				}
				public Integer ViaAdmin_Id_Precision(){
				    return null;
				}
				public String ViaAdmin_Id_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Id_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Id_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_Id_OriginalDbColumnName(){
				
					return "ViaAdmin_Id_";
				
				}

				
			    public BigDecimal CatFarmacologica_Id;

				public BigDecimal getCatFarmacologica_Id () {
					return this.CatFarmacologica_Id;
				}

				public Boolean CatFarmacologica_IdIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_IdIsKey(){
				    return false;
				}
				public Integer CatFarmacologica_IdLength(){
				    return null;
				}
				public Integer CatFarmacologica_IdPrecision(){
				    return null;
				}
				public String CatFarmacologica_IdDefault(){
				
					return null;
				
				}
				public String CatFarmacologica_IdComment(){
				
				    return "";
				
				}
				public String CatFarmacologica_IdPattern(){
				
					return "";
				
				}
				public String CatFarmacologica_IdOriginalDbColumnName(){
				
					return "CatFarmacologica_Id";
				
				}

				
			    public BigDecimal Sustancia_Activa_Id_;

				public BigDecimal getSustancia_Activa_Id_ () {
					return this.Sustancia_Activa_Id_;
				}

				public Boolean Sustancia_Activa_Id_IsNullable(){
				    return true;
				}
				public Boolean Sustancia_Activa_Id_IsKey(){
				    return false;
				}
				public Integer Sustancia_Activa_Id_Length(){
				    return null;
				}
				public Integer Sustancia_Activa_Id_Precision(){
				    return null;
				}
				public String Sustancia_Activa_Id_Default(){
				
					return null;
				
				}
				public String Sustancia_Activa_Id_Comment(){
				
				    return "";
				
				}
				public String Sustancia_Activa_Id_Pattern(){
				
					return "";
				
				}
				public String Sustancia_Activa_Id_OriginalDbColumnName(){
				
					return "Sustancia_Activa_Id_";
				
				}

				
			    public String CatFarmacologica_Id_;

				public String getCatFarmacologica_Id_ () {
					return this.CatFarmacologica_Id_;
				}

				public Boolean CatFarmacologica_Id_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_Id_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Id_Length(){
				    return null;
				}
				public Integer CatFarmacologica_Id_Precision(){
				    return null;
				}
				public String CatFarmacologica_Id_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Id_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Id_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_Id_OriginalDbColumnName(){
				
					return "CatFarmacologica_Id_";
				
				}

				
			    public BigDecimal Generico_Id_;

				public BigDecimal getGenerico_Id_ () {
					return this.Generico_Id_;
				}

				public Boolean Generico_Id_IsNullable(){
				    return true;
				}
				public Boolean Generico_Id_IsKey(){
				    return false;
				}
				public Integer Generico_Id_Length(){
				    return null;
				}
				public Integer Generico_Id_Precision(){
				    return null;
				}
				public String Generico_Id_Default(){
				
					return null;
				
				}
				public String Generico_Id_Comment(){
				
				    return "";
				
				}
				public String Generico_Id_Pattern(){
				
					return "";
				
				}
				public String Generico_Id_OriginalDbColumnName(){
				
					return "Generico_Id_";
				
				}

				
			    public BigDecimal FormFarmaceutica_Id;

				public BigDecimal getFormFarmaceutica_Id () {
					return this.FormFarmaceutica_Id;
				}

				public Boolean FormFarmaceutica_IdIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_IdIsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_IdLength(){
				    return null;
				}
				public Integer FormFarmaceutica_IdPrecision(){
				    return null;
				}
				public String FormFarmaceutica_IdDefault(){
				
					return null;
				
				}
				public String FormFarmaceutica_IdComment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_IdPattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_IdOriginalDbColumnName(){
				
					return "FormFarmaceutica_Id";
				
				}

				
			    public String FormFarmaceutica_Ids_;

				public String getFormFarmaceutica_Ids_ () {
					return this.FormFarmaceutica_Ids_;
				}

				public Boolean FormFarmaceutica_Ids_IsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_Ids_IsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_Ids_Length(){
				    return null;
				}
				public Integer FormFarmaceutica_Ids_Precision(){
				    return null;
				}
				public String FormFarmaceutica_Ids_Default(){
				
					return null;
				
				}
				public String FormFarmaceutica_Ids_Comment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_Ids_Pattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_Ids_OriginalDbColumnName(){
				
					return "FormFarmaceutica_Ids_";
				
				}

				
			    public String Id_;

				public String getId_ () {
					return this.Id_;
				}

				public Boolean Id_IsNullable(){
				    return true;
				}
				public Boolean Id_IsKey(){
				    return false;
				}
				public Integer Id_Length(){
				    return null;
				}
				public Integer Id_Precision(){
				    return null;
				}
				public String Id_Default(){
				
					return null;
				
				}
				public String Id_Comment(){
				
				    return "";
				
				}
				public String Id_Pattern(){
				
					return "";
				
				}
				public String Id_OriginalDbColumnName(){
				
					return "Id_";
				
				}

				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}

				public Boolean errorMessageIsNullable(){
				    return true;
				}
				public Boolean errorMessageIsKey(){
				    return false;
				}
				public Integer errorMessageLength(){
				    return 255;
				}
				public Integer errorMessagePrecision(){
				    return 0;
				}
				public String errorMessageDefault(){
				
					return null;
				
				}
				public String errorMessageComment(){
				
				    return null;
				
				}
				public String errorMessagePattern(){
				
				    return null;
				
				}
				public String errorMessageOriginalDbColumnName(){
				
					return "errorMessage";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
					this.CodAtc_ = readString(dis);
					
					this.ViaAdmin_ = readString(dis);
					
					this.CatFarmacologica_ = readString(dis);
					
					this.FormFarmaceutica_ = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.CatFarmacologica_Id_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
						this.FormFarmaceutica_Id = (BigDecimal) dis.readObject();
					
					this.FormFarmaceutica_Ids_ = readString(dis);
					
					this.Id_ = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
					this.CodAtc_ = readString(dis);
					
					this.ViaAdmin_ = readString(dis);
					
					this.CatFarmacologica_ = readString(dis);
					
					this.FormFarmaceutica_ = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.CatFarmacologica_Id_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
						this.FormFarmaceutica_Id = (BigDecimal) dis.readObject();
					
					this.FormFarmaceutica_Ids_ = readString(dis);
					
					this.Id_ = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// String
				
						writeString(this.CodAtc_,dos);
					
					// String
				
						writeString(this.ViaAdmin_,dos);
					
					// String
				
						writeString(this.CatFarmacologica_,dos);
					
					// String
				
						writeString(this.FormFarmaceutica_,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CatFarmacologica_Id);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.CatFarmacologica_Id_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Generico_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FormFarmaceutica_Id);
					
					// String
				
						writeString(this.FormFarmaceutica_Ids_,dos);
					
					// String
				
						writeString(this.Id_,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// String
				
						writeString(this.CodAtc_,dos);
					
					// String
				
						writeString(this.ViaAdmin_,dos);
					
					// String
				
						writeString(this.CatFarmacologica_,dos);
					
					// String
				
						writeString(this.FormFarmaceutica_,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CatFarmacologica_Id);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.CatFarmacologica_Id_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Generico_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FormFarmaceutica_Id);
					
					// String
				
						writeString(this.FormFarmaceutica_Ids_,dos);
					
					// String
				
						writeString(this.Id_,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Insert="+_Insert);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico_="+NGenerico_);
		sb.append(",Concentracion_="+Concentracion_);
		sb.append(",CodAtc_="+CodAtc_);
		sb.append(",ViaAdmin_="+ViaAdmin_);
		sb.append(",CatFarmacologica_="+CatFarmacologica_);
		sb.append(",FormFarmaceutica_="+FormFarmaceutica_);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",ViaAdmin_Id_="+String.valueOf(ViaAdmin_Id_));
		sb.append(",CatFarmacologica_Id="+String.valueOf(CatFarmacologica_Id));
		sb.append(",Sustancia_Activa_Id_="+String.valueOf(Sustancia_Activa_Id_));
		sb.append(",CatFarmacologica_Id_="+CatFarmacologica_Id_);
		sb.append(",Generico_Id_="+String.valueOf(Generico_Id_));
		sb.append(",FormFarmaceutica_Id="+String.valueOf(FormFarmaceutica_Id));
		sb.append(",FormFarmaceutica_Ids_="+FormFarmaceutica_Ids_);
		sb.append(",Id_="+Id_);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 50;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 50;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return null;
				}
				public Integer _MessagePrecision(){
				    return null;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico_;

				public String getNGenerico_ () {
					return this.NGenerico_;
				}

				public Boolean NGenerico_IsNullable(){
				    return true;
				}
				public Boolean NGenerico_IsKey(){
				    return false;
				}
				public Integer NGenerico_Length(){
				    return 350;
				}
				public Integer NGenerico_Precision(){
				    return 0;
				}
				public String NGenerico_Default(){
				
					return null;
				
				}
				public String NGenerico_Comment(){
				
				    return "";
				
				}
				public String NGenerico_Pattern(){
				
					return "";
				
				}
				public String NGenerico_OriginalDbColumnName(){
				
					return "NGenerico_";
				
				}

				
			    public String Concentracion_;

				public String getConcentracion_ () {
					return this.Concentracion_;
				}

				public Boolean Concentracion_IsNullable(){
				    return true;
				}
				public Boolean Concentracion_IsKey(){
				    return false;
				}
				public Integer Concentracion_Length(){
				    return 200;
				}
				public Integer Concentracion_Precision(){
				    return 0;
				}
				public String Concentracion_Default(){
				
					return null;
				
				}
				public String Concentracion_Comment(){
				
				    return "";
				
				}
				public String Concentracion_Pattern(){
				
					return "";
				
				}
				public String Concentracion_OriginalDbColumnName(){
				
					return "Concentracion_";
				
				}

				
			    public String CodAtc_;

				public String getCodAtc_ () {
					return this.CodAtc_;
				}

				public Boolean CodAtc_IsNullable(){
				    return true;
				}
				public Boolean CodAtc_IsKey(){
				    return false;
				}
				public Integer CodAtc_Length(){
				    return 50;
				}
				public Integer CodAtc_Precision(){
				    return 0;
				}
				public String CodAtc_Default(){
				
					return null;
				
				}
				public String CodAtc_Comment(){
				
				    return "";
				
				}
				public String CodAtc_Pattern(){
				
					return "";
				
				}
				public String CodAtc_OriginalDbColumnName(){
				
					return "CodAtc_";
				
				}

				
			    public String ViaAdmin_;

				public String getViaAdmin_ () {
					return this.ViaAdmin_;
				}

				public Boolean ViaAdmin_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Length(){
				    return 50;
				}
				public Integer ViaAdmin_Precision(){
				    return 0;
				}
				public String ViaAdmin_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_OriginalDbColumnName(){
				
					return "ViaAdmin_";
				
				}

				
			    public String CatFarmacologica_;

				public String getCatFarmacologica_ () {
					return this.CatFarmacologica_;
				}

				public Boolean CatFarmacologica_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Length(){
				    return 50;
				}
				public Integer CatFarmacologica_Precision(){
				    return 0;
				}
				public String CatFarmacologica_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_OriginalDbColumnName(){
				
					return "CatFarmacologica_";
				
				}

				
			    public String FormFarmaceutica_;

				public String getFormFarmaceutica_ () {
					return this.FormFarmaceutica_;
				}

				public Boolean FormFarmaceutica_IsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_IsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_Length(){
				    return 200;
				}
				public Integer FormFarmaceutica_Precision(){
				    return 0;
				}
				public String FormFarmaceutica_Default(){
				
					return null;
				
				}
				public String FormFarmaceutica_Comment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_Pattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_OriginalDbColumnName(){
				
					return "FormFarmaceutica_";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public BigDecimal ViaAdmin_Id_;

				public BigDecimal getViaAdmin_Id_ () {
					return this.ViaAdmin_Id_;
				}

				public Boolean ViaAdmin_Id_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_Id_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Id_Length(){
				    return null;
				}
				public Integer ViaAdmin_Id_Precision(){
				    return null;
				}
				public String ViaAdmin_Id_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Id_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Id_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_Id_OriginalDbColumnName(){
				
					return "ViaAdmin_Id_";
				
				}

				
			    public BigDecimal CatFarmacologica_Id;

				public BigDecimal getCatFarmacologica_Id () {
					return this.CatFarmacologica_Id;
				}

				public Boolean CatFarmacologica_IdIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_IdIsKey(){
				    return false;
				}
				public Integer CatFarmacologica_IdLength(){
				    return null;
				}
				public Integer CatFarmacologica_IdPrecision(){
				    return null;
				}
				public String CatFarmacologica_IdDefault(){
				
					return null;
				
				}
				public String CatFarmacologica_IdComment(){
				
				    return "";
				
				}
				public String CatFarmacologica_IdPattern(){
				
					return "";
				
				}
				public String CatFarmacologica_IdOriginalDbColumnName(){
				
					return "CatFarmacologica_Id";
				
				}

				
			    public BigDecimal Sustancia_Activa_Id_;

				public BigDecimal getSustancia_Activa_Id_ () {
					return this.Sustancia_Activa_Id_;
				}

				public Boolean Sustancia_Activa_Id_IsNullable(){
				    return true;
				}
				public Boolean Sustancia_Activa_Id_IsKey(){
				    return false;
				}
				public Integer Sustancia_Activa_Id_Length(){
				    return null;
				}
				public Integer Sustancia_Activa_Id_Precision(){
				    return null;
				}
				public String Sustancia_Activa_Id_Default(){
				
					return null;
				
				}
				public String Sustancia_Activa_Id_Comment(){
				
				    return "";
				
				}
				public String Sustancia_Activa_Id_Pattern(){
				
					return "";
				
				}
				public String Sustancia_Activa_Id_OriginalDbColumnName(){
				
					return "Sustancia_Activa_Id_";
				
				}

				
			    public String CatFarmacologica_Id_;

				public String getCatFarmacologica_Id_ () {
					return this.CatFarmacologica_Id_;
				}

				public Boolean CatFarmacologica_Id_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_Id_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Id_Length(){
				    return null;
				}
				public Integer CatFarmacologica_Id_Precision(){
				    return null;
				}
				public String CatFarmacologica_Id_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Id_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Id_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_Id_OriginalDbColumnName(){
				
					return "CatFarmacologica_Id_";
				
				}

				
			    public BigDecimal Generico_Id_;

				public BigDecimal getGenerico_Id_ () {
					return this.Generico_Id_;
				}

				public Boolean Generico_Id_IsNullable(){
				    return true;
				}
				public Boolean Generico_Id_IsKey(){
				    return false;
				}
				public Integer Generico_Id_Length(){
				    return null;
				}
				public Integer Generico_Id_Precision(){
				    return null;
				}
				public String Generico_Id_Default(){
				
					return null;
				
				}
				public String Generico_Id_Comment(){
				
				    return "";
				
				}
				public String Generico_Id_Pattern(){
				
					return "";
				
				}
				public String Generico_Id_OriginalDbColumnName(){
				
					return "Generico_Id_";
				
				}

				
			    public BigDecimal FormFarmaceutica_Id;

				public BigDecimal getFormFarmaceutica_Id () {
					return this.FormFarmaceutica_Id;
				}

				public Boolean FormFarmaceutica_IdIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_IdIsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_IdLength(){
				    return null;
				}
				public Integer FormFarmaceutica_IdPrecision(){
				    return null;
				}
				public String FormFarmaceutica_IdDefault(){
				
					return null;
				
				}
				public String FormFarmaceutica_IdComment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_IdPattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_IdOriginalDbColumnName(){
				
					return "FormFarmaceutica_Id";
				
				}

				
			    public String FormFarmaceutica_Ids_;

				public String getFormFarmaceutica_Ids_ () {
					return this.FormFarmaceutica_Ids_;
				}

				public Boolean FormFarmaceutica_Ids_IsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_Ids_IsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_Ids_Length(){
				    return null;
				}
				public Integer FormFarmaceutica_Ids_Precision(){
				    return null;
				}
				public String FormFarmaceutica_Ids_Default(){
				
					return null;
				
				}
				public String FormFarmaceutica_Ids_Comment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_Ids_Pattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_Ids_OriginalDbColumnName(){
				
					return "FormFarmaceutica_Ids_";
				
				}

				
			    public String Id_;

				public String getId_ () {
					return this.Id_;
				}

				public Boolean Id_IsNullable(){
				    return true;
				}
				public Boolean Id_IsKey(){
				    return false;
				}
				public Integer Id_Length(){
				    return null;
				}
				public Integer Id_Precision(){
				    return null;
				}
				public String Id_Default(){
				
					return null;
				
				}
				public String Id_Comment(){
				
				    return "";
				
				}
				public String Id_Pattern(){
				
					return "";
				
				}
				public String Id_OriginalDbColumnName(){
				
					return "Id_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
					this.CodAtc_ = readString(dis);
					
					this.ViaAdmin_ = readString(dis);
					
					this.CatFarmacologica_ = readString(dis);
					
					this.FormFarmaceutica_ = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.CatFarmacologica_Id_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
						this.FormFarmaceutica_Id = (BigDecimal) dis.readObject();
					
					this.FormFarmaceutica_Ids_ = readString(dis);
					
					this.Id_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
					this.CodAtc_ = readString(dis);
					
					this.ViaAdmin_ = readString(dis);
					
					this.CatFarmacologica_ = readString(dis);
					
					this.FormFarmaceutica_ = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.CatFarmacologica_Id_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
						this.FormFarmaceutica_Id = (BigDecimal) dis.readObject();
					
					this.FormFarmaceutica_Ids_ = readString(dis);
					
					this.Id_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// String
				
						writeString(this.CodAtc_,dos);
					
					// String
				
						writeString(this.ViaAdmin_,dos);
					
					// String
				
						writeString(this.CatFarmacologica_,dos);
					
					// String
				
						writeString(this.FormFarmaceutica_,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CatFarmacologica_Id);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.CatFarmacologica_Id_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Generico_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FormFarmaceutica_Id);
					
					// String
				
						writeString(this.FormFarmaceutica_Ids_,dos);
					
					// String
				
						writeString(this.Id_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// String
				
						writeString(this.CodAtc_,dos);
					
					// String
				
						writeString(this.ViaAdmin_,dos);
					
					// String
				
						writeString(this.CatFarmacologica_,dos);
					
					// String
				
						writeString(this.FormFarmaceutica_,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CatFarmacologica_Id);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.CatFarmacologica_Id_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Generico_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FormFarmaceutica_Id);
					
					// String
				
						writeString(this.FormFarmaceutica_Ids_,dos);
					
					// String
				
						writeString(this.Id_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Insert="+_Insert);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico_="+NGenerico_);
		sb.append(",Concentracion_="+Concentracion_);
		sb.append(",CodAtc_="+CodAtc_);
		sb.append(",ViaAdmin_="+ViaAdmin_);
		sb.append(",CatFarmacologica_="+CatFarmacologica_);
		sb.append(",FormFarmaceutica_="+FormFarmaceutica_);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",ViaAdmin_Id_="+String.valueOf(ViaAdmin_Id_));
		sb.append(",CatFarmacologica_Id="+String.valueOf(CatFarmacologica_Id));
		sb.append(",Sustancia_Activa_Id_="+String.valueOf(Sustancia_Activa_Id_));
		sb.append(",CatFarmacologica_Id_="+CatFarmacologica_Id_);
		sb.append(",Generico_Id_="+String.valueOf(Generico_Id_));
		sb.append(",FormFarmaceutica_Id="+String.valueOf(FormFarmaceutica_Id));
		sb.append(",FormFarmaceutica_Ids_="+FormFarmaceutica_Ids_);
		sb.append(",Id_="+Id_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 50;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 50;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return null;
				}
				public Integer _MessagePrecision(){
				    return null;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico_;

				public String getNGenerico_ () {
					return this.NGenerico_;
				}

				public Boolean NGenerico_IsNullable(){
				    return true;
				}
				public Boolean NGenerico_IsKey(){
				    return false;
				}
				public Integer NGenerico_Length(){
				    return 350;
				}
				public Integer NGenerico_Precision(){
				    return 0;
				}
				public String NGenerico_Default(){
				
					return null;
				
				}
				public String NGenerico_Comment(){
				
				    return "";
				
				}
				public String NGenerico_Pattern(){
				
					return "";
				
				}
				public String NGenerico_OriginalDbColumnName(){
				
					return "NGenerico_";
				
				}

				
			    public String Concentracion_;

				public String getConcentracion_ () {
					return this.Concentracion_;
				}

				public Boolean Concentracion_IsNullable(){
				    return true;
				}
				public Boolean Concentracion_IsKey(){
				    return false;
				}
				public Integer Concentracion_Length(){
				    return 200;
				}
				public Integer Concentracion_Precision(){
				    return 0;
				}
				public String Concentracion_Default(){
				
					return null;
				
				}
				public String Concentracion_Comment(){
				
				    return "";
				
				}
				public String Concentracion_Pattern(){
				
					return "";
				
				}
				public String Concentracion_OriginalDbColumnName(){
				
					return "Concentracion_";
				
				}

				
			    public String CodAtc_;

				public String getCodAtc_ () {
					return this.CodAtc_;
				}

				public Boolean CodAtc_IsNullable(){
				    return true;
				}
				public Boolean CodAtc_IsKey(){
				    return false;
				}
				public Integer CodAtc_Length(){
				    return 50;
				}
				public Integer CodAtc_Precision(){
				    return 0;
				}
				public String CodAtc_Default(){
				
					return null;
				
				}
				public String CodAtc_Comment(){
				
				    return "";
				
				}
				public String CodAtc_Pattern(){
				
					return "";
				
				}
				public String CodAtc_OriginalDbColumnName(){
				
					return "CodAtc_";
				
				}

				
			    public String ViaAdmin_;

				public String getViaAdmin_ () {
					return this.ViaAdmin_;
				}

				public Boolean ViaAdmin_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Length(){
				    return 50;
				}
				public Integer ViaAdmin_Precision(){
				    return 0;
				}
				public String ViaAdmin_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_OriginalDbColumnName(){
				
					return "ViaAdmin_";
				
				}

				
			    public String CatFarmacologica_;

				public String getCatFarmacologica_ () {
					return this.CatFarmacologica_;
				}

				public Boolean CatFarmacologica_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Length(){
				    return 50;
				}
				public Integer CatFarmacologica_Precision(){
				    return 0;
				}
				public String CatFarmacologica_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_OriginalDbColumnName(){
				
					return "CatFarmacologica_";
				
				}

				
			    public String FormFarmaceutica_;

				public String getFormFarmaceutica_ () {
					return this.FormFarmaceutica_;
				}

				public Boolean FormFarmaceutica_IsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_IsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_Length(){
				    return 200;
				}
				public Integer FormFarmaceutica_Precision(){
				    return 0;
				}
				public String FormFarmaceutica_Default(){
				
					return null;
				
				}
				public String FormFarmaceutica_Comment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_Pattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_OriginalDbColumnName(){
				
					return "FormFarmaceutica_";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public BigDecimal ViaAdmin_Id_;

				public BigDecimal getViaAdmin_Id_ () {
					return this.ViaAdmin_Id_;
				}

				public Boolean ViaAdmin_Id_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_Id_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Id_Length(){
				    return null;
				}
				public Integer ViaAdmin_Id_Precision(){
				    return null;
				}
				public String ViaAdmin_Id_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Id_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Id_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_Id_OriginalDbColumnName(){
				
					return "ViaAdmin_Id_";
				
				}

				
			    public BigDecimal CatFarmacologica_Id;

				public BigDecimal getCatFarmacologica_Id () {
					return this.CatFarmacologica_Id;
				}

				public Boolean CatFarmacologica_IdIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_IdIsKey(){
				    return false;
				}
				public Integer CatFarmacologica_IdLength(){
				    return null;
				}
				public Integer CatFarmacologica_IdPrecision(){
				    return null;
				}
				public String CatFarmacologica_IdDefault(){
				
					return null;
				
				}
				public String CatFarmacologica_IdComment(){
				
				    return "";
				
				}
				public String CatFarmacologica_IdPattern(){
				
					return "";
				
				}
				public String CatFarmacologica_IdOriginalDbColumnName(){
				
					return "CatFarmacologica_Id";
				
				}

				
			    public BigDecimal Sustancia_Activa_Id_;

				public BigDecimal getSustancia_Activa_Id_ () {
					return this.Sustancia_Activa_Id_;
				}

				public Boolean Sustancia_Activa_Id_IsNullable(){
				    return true;
				}
				public Boolean Sustancia_Activa_Id_IsKey(){
				    return false;
				}
				public Integer Sustancia_Activa_Id_Length(){
				    return null;
				}
				public Integer Sustancia_Activa_Id_Precision(){
				    return null;
				}
				public String Sustancia_Activa_Id_Default(){
				
					return null;
				
				}
				public String Sustancia_Activa_Id_Comment(){
				
				    return "";
				
				}
				public String Sustancia_Activa_Id_Pattern(){
				
					return "";
				
				}
				public String Sustancia_Activa_Id_OriginalDbColumnName(){
				
					return "Sustancia_Activa_Id_";
				
				}

				
			    public String CatFarmacologica_Id_;

				public String getCatFarmacologica_Id_ () {
					return this.CatFarmacologica_Id_;
				}

				public Boolean CatFarmacologica_Id_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_Id_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Id_Length(){
				    return null;
				}
				public Integer CatFarmacologica_Id_Precision(){
				    return null;
				}
				public String CatFarmacologica_Id_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Id_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Id_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_Id_OriginalDbColumnName(){
				
					return "CatFarmacologica_Id_";
				
				}

				
			    public BigDecimal Generico_Id_;

				public BigDecimal getGenerico_Id_ () {
					return this.Generico_Id_;
				}

				public Boolean Generico_Id_IsNullable(){
				    return true;
				}
				public Boolean Generico_Id_IsKey(){
				    return false;
				}
				public Integer Generico_Id_Length(){
				    return null;
				}
				public Integer Generico_Id_Precision(){
				    return null;
				}
				public String Generico_Id_Default(){
				
					return null;
				
				}
				public String Generico_Id_Comment(){
				
				    return "";
				
				}
				public String Generico_Id_Pattern(){
				
					return "";
				
				}
				public String Generico_Id_OriginalDbColumnName(){
				
					return "Generico_Id_";
				
				}

				
			    public BigDecimal FormFarmaceutica_Id;

				public BigDecimal getFormFarmaceutica_Id () {
					return this.FormFarmaceutica_Id;
				}

				public Boolean FormFarmaceutica_IdIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_IdIsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_IdLength(){
				    return null;
				}
				public Integer FormFarmaceutica_IdPrecision(){
				    return null;
				}
				public String FormFarmaceutica_IdDefault(){
				
					return null;
				
				}
				public String FormFarmaceutica_IdComment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_IdPattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_IdOriginalDbColumnName(){
				
					return "FormFarmaceutica_Id";
				
				}

				
			    public String FormFarmaceutica_Ids_;

				public String getFormFarmaceutica_Ids_ () {
					return this.FormFarmaceutica_Ids_;
				}

				public Boolean FormFarmaceutica_Ids_IsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_Ids_IsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_Ids_Length(){
				    return null;
				}
				public Integer FormFarmaceutica_Ids_Precision(){
				    return null;
				}
				public String FormFarmaceutica_Ids_Default(){
				
					return null;
				
				}
				public String FormFarmaceutica_Ids_Comment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_Ids_Pattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_Ids_OriginalDbColumnName(){
				
					return "FormFarmaceutica_Ids_";
				
				}

				
			    public String Id_;

				public String getId_ () {
					return this.Id_;
				}

				public Boolean Id_IsNullable(){
				    return true;
				}
				public Boolean Id_IsKey(){
				    return false;
				}
				public Integer Id_Length(){
				    return null;
				}
				public Integer Id_Precision(){
				    return null;
				}
				public String Id_Default(){
				
					return null;
				
				}
				public String Id_Comment(){
				
				    return "";
				
				}
				public String Id_Pattern(){
				
					return "";
				
				}
				public String Id_OriginalDbColumnName(){
				
					return "Id_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
					this.CodAtc_ = readString(dis);
					
					this.ViaAdmin_ = readString(dis);
					
					this.CatFarmacologica_ = readString(dis);
					
					this.FormFarmaceutica_ = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.CatFarmacologica_Id_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
						this.FormFarmaceutica_Id = (BigDecimal) dis.readObject();
					
					this.FormFarmaceutica_Ids_ = readString(dis);
					
					this.Id_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
					this.CodAtc_ = readString(dis);
					
					this.ViaAdmin_ = readString(dis);
					
					this.CatFarmacologica_ = readString(dis);
					
					this.FormFarmaceutica_ = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.CatFarmacologica_Id_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
						this.FormFarmaceutica_Id = (BigDecimal) dis.readObject();
					
					this.FormFarmaceutica_Ids_ = readString(dis);
					
					this.Id_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// String
				
						writeString(this.CodAtc_,dos);
					
					// String
				
						writeString(this.ViaAdmin_,dos);
					
					// String
				
						writeString(this.CatFarmacologica_,dos);
					
					// String
				
						writeString(this.FormFarmaceutica_,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CatFarmacologica_Id);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.CatFarmacologica_Id_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Generico_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FormFarmaceutica_Id);
					
					// String
				
						writeString(this.FormFarmaceutica_Ids_,dos);
					
					// String
				
						writeString(this.Id_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// String
				
						writeString(this.CodAtc_,dos);
					
					// String
				
						writeString(this.ViaAdmin_,dos);
					
					// String
				
						writeString(this.CatFarmacologica_,dos);
					
					// String
				
						writeString(this.FormFarmaceutica_,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CatFarmacologica_Id);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.CatFarmacologica_Id_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Generico_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FormFarmaceutica_Id);
					
					// String
				
						writeString(this.FormFarmaceutica_Ids_,dos);
					
					// String
				
						writeString(this.Id_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Insert="+_Insert);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico_="+NGenerico_);
		sb.append(",Concentracion_="+Concentracion_);
		sb.append(",CodAtc_="+CodAtc_);
		sb.append(",ViaAdmin_="+ViaAdmin_);
		sb.append(",CatFarmacologica_="+CatFarmacologica_);
		sb.append(",FormFarmaceutica_="+FormFarmaceutica_);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",ViaAdmin_Id_="+String.valueOf(ViaAdmin_Id_));
		sb.append(",CatFarmacologica_Id="+String.valueOf(CatFarmacologica_Id));
		sb.append(",Sustancia_Activa_Id_="+String.valueOf(Sustancia_Activa_Id_));
		sb.append(",CatFarmacologica_Id_="+CatFarmacologica_Id_);
		sb.append(",Generico_Id_="+String.valueOf(Generico_Id_));
		sb.append(",FormFarmaceutica_Id="+String.valueOf(FormFarmaceutica_Id));
		sb.append(",FormFarmaceutica_Ids_="+FormFarmaceutica_Ids_);
		sb.append(",Id_="+Id_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtDenormalize_1 implements routines.system.IPersistableRow<OnRowsEndStructtDenormalize_1> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 50;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 50;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return null;
				}
				public Integer _MessagePrecision(){
				    return null;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico_;

				public String getNGenerico_ () {
					return this.NGenerico_;
				}

				public Boolean NGenerico_IsNullable(){
				    return true;
				}
				public Boolean NGenerico_IsKey(){
				    return false;
				}
				public Integer NGenerico_Length(){
				    return 350;
				}
				public Integer NGenerico_Precision(){
				    return 0;
				}
				public String NGenerico_Default(){
				
					return null;
				
				}
				public String NGenerico_Comment(){
				
				    return "";
				
				}
				public String NGenerico_Pattern(){
				
					return "";
				
				}
				public String NGenerico_OriginalDbColumnName(){
				
					return "NGenerico_";
				
				}

				
			    public String Concentracion_;

				public String getConcentracion_ () {
					return this.Concentracion_;
				}

				public Boolean Concentracion_IsNullable(){
				    return true;
				}
				public Boolean Concentracion_IsKey(){
				    return false;
				}
				public Integer Concentracion_Length(){
				    return 200;
				}
				public Integer Concentracion_Precision(){
				    return 0;
				}
				public String Concentracion_Default(){
				
					return null;
				
				}
				public String Concentracion_Comment(){
				
				    return "";
				
				}
				public String Concentracion_Pattern(){
				
					return "";
				
				}
				public String Concentracion_OriginalDbColumnName(){
				
					return "Concentracion_";
				
				}

				
			    public String CodAtc_;

				public String getCodAtc_ () {
					return this.CodAtc_;
				}

				public Boolean CodAtc_IsNullable(){
				    return true;
				}
				public Boolean CodAtc_IsKey(){
				    return false;
				}
				public Integer CodAtc_Length(){
				    return 50;
				}
				public Integer CodAtc_Precision(){
				    return 0;
				}
				public String CodAtc_Default(){
				
					return null;
				
				}
				public String CodAtc_Comment(){
				
				    return "";
				
				}
				public String CodAtc_Pattern(){
				
					return "";
				
				}
				public String CodAtc_OriginalDbColumnName(){
				
					return "CodAtc_";
				
				}

				
			    public String ViaAdmin_;

				public String getViaAdmin_ () {
					return this.ViaAdmin_;
				}

				public Boolean ViaAdmin_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Length(){
				    return 50;
				}
				public Integer ViaAdmin_Precision(){
				    return 0;
				}
				public String ViaAdmin_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_OriginalDbColumnName(){
				
					return "ViaAdmin_";
				
				}

				
			    public String CatFarmacologica_;

				public String getCatFarmacologica_ () {
					return this.CatFarmacologica_;
				}

				public Boolean CatFarmacologica_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Length(){
				    return 50;
				}
				public Integer CatFarmacologica_Precision(){
				    return 0;
				}
				public String CatFarmacologica_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_OriginalDbColumnName(){
				
					return "CatFarmacologica_";
				
				}

				
			    public String FormFarmaceutica_;

				public String getFormFarmaceutica_ () {
					return this.FormFarmaceutica_;
				}

				public Boolean FormFarmaceutica_IsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_IsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_Length(){
				    return 200;
				}
				public Integer FormFarmaceutica_Precision(){
				    return 0;
				}
				public String FormFarmaceutica_Default(){
				
					return null;
				
				}
				public String FormFarmaceutica_Comment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_Pattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_OriginalDbColumnName(){
				
					return "FormFarmaceutica_";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public BigDecimal ViaAdmin_Id_;

				public BigDecimal getViaAdmin_Id_ () {
					return this.ViaAdmin_Id_;
				}

				public Boolean ViaAdmin_Id_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_Id_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Id_Length(){
				    return null;
				}
				public Integer ViaAdmin_Id_Precision(){
				    return null;
				}
				public String ViaAdmin_Id_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Id_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Id_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_Id_OriginalDbColumnName(){
				
					return "ViaAdmin_Id_";
				
				}

				
			    public BigDecimal CatFarmacologica_Id;

				public BigDecimal getCatFarmacologica_Id () {
					return this.CatFarmacologica_Id;
				}

				public Boolean CatFarmacologica_IdIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_IdIsKey(){
				    return false;
				}
				public Integer CatFarmacologica_IdLength(){
				    return null;
				}
				public Integer CatFarmacologica_IdPrecision(){
				    return null;
				}
				public String CatFarmacologica_IdDefault(){
				
					return null;
				
				}
				public String CatFarmacologica_IdComment(){
				
				    return "";
				
				}
				public String CatFarmacologica_IdPattern(){
				
					return "";
				
				}
				public String CatFarmacologica_IdOriginalDbColumnName(){
				
					return "CatFarmacologica_Id";
				
				}

				
			    public BigDecimal Sustancia_Activa_Id_;

				public BigDecimal getSustancia_Activa_Id_ () {
					return this.Sustancia_Activa_Id_;
				}

				public Boolean Sustancia_Activa_Id_IsNullable(){
				    return true;
				}
				public Boolean Sustancia_Activa_Id_IsKey(){
				    return false;
				}
				public Integer Sustancia_Activa_Id_Length(){
				    return null;
				}
				public Integer Sustancia_Activa_Id_Precision(){
				    return null;
				}
				public String Sustancia_Activa_Id_Default(){
				
					return null;
				
				}
				public String Sustancia_Activa_Id_Comment(){
				
				    return "";
				
				}
				public String Sustancia_Activa_Id_Pattern(){
				
					return "";
				
				}
				public String Sustancia_Activa_Id_OriginalDbColumnName(){
				
					return "Sustancia_Activa_Id_";
				
				}

				
			    public String CatFarmacologica_Id_;

				public String getCatFarmacologica_Id_ () {
					return this.CatFarmacologica_Id_;
				}

				public Boolean CatFarmacologica_Id_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_Id_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Id_Length(){
				    return null;
				}
				public Integer CatFarmacologica_Id_Precision(){
				    return null;
				}
				public String CatFarmacologica_Id_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Id_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Id_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_Id_OriginalDbColumnName(){
				
					return "CatFarmacologica_Id_";
				
				}

				
			    public BigDecimal Generico_Id_;

				public BigDecimal getGenerico_Id_ () {
					return this.Generico_Id_;
				}

				public Boolean Generico_Id_IsNullable(){
				    return true;
				}
				public Boolean Generico_Id_IsKey(){
				    return false;
				}
				public Integer Generico_Id_Length(){
				    return null;
				}
				public Integer Generico_Id_Precision(){
				    return null;
				}
				public String Generico_Id_Default(){
				
					return null;
				
				}
				public String Generico_Id_Comment(){
				
				    return "";
				
				}
				public String Generico_Id_Pattern(){
				
					return "";
				
				}
				public String Generico_Id_OriginalDbColumnName(){
				
					return "Generico_Id_";
				
				}

				
			    public BigDecimal FormFarmaceutica_Id;

				public BigDecimal getFormFarmaceutica_Id () {
					return this.FormFarmaceutica_Id;
				}

				public Boolean FormFarmaceutica_IdIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_IdIsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_IdLength(){
				    return null;
				}
				public Integer FormFarmaceutica_IdPrecision(){
				    return null;
				}
				public String FormFarmaceutica_IdDefault(){
				
					return null;
				
				}
				public String FormFarmaceutica_IdComment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_IdPattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_IdOriginalDbColumnName(){
				
					return "FormFarmaceutica_Id";
				
				}

				
			    public String FormFarmaceutica_Ids_;

				public String getFormFarmaceutica_Ids_ () {
					return this.FormFarmaceutica_Ids_;
				}

				public Boolean FormFarmaceutica_Ids_IsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_Ids_IsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_Ids_Length(){
				    return null;
				}
				public Integer FormFarmaceutica_Ids_Precision(){
				    return null;
				}
				public String FormFarmaceutica_Ids_Default(){
				
					return null;
				
				}
				public String FormFarmaceutica_Ids_Comment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_Ids_Pattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_Ids_OriginalDbColumnName(){
				
					return "FormFarmaceutica_Ids_";
				
				}

				
			    public String Id_;

				public String getId_ () {
					return this.Id_;
				}

				public Boolean Id_IsNullable(){
				    return true;
				}
				public Boolean Id_IsKey(){
				    return false;
				}
				public Integer Id_Length(){
				    return null;
				}
				public Integer Id_Precision(){
				    return null;
				}
				public String Id_Default(){
				
					return null;
				
				}
				public String Id_Comment(){
				
				    return "";
				
				}
				public String Id_Pattern(){
				
					return "";
				
				}
				public String Id_OriginalDbColumnName(){
				
					return "Id_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
					this.CodAtc_ = readString(dis);
					
					this.ViaAdmin_ = readString(dis);
					
					this.CatFarmacologica_ = readString(dis);
					
					this.FormFarmaceutica_ = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.CatFarmacologica_Id_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
						this.FormFarmaceutica_Id = (BigDecimal) dis.readObject();
					
					this.FormFarmaceutica_Ids_ = readString(dis);
					
					this.Id_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
					this.CodAtc_ = readString(dis);
					
					this.ViaAdmin_ = readString(dis);
					
					this.CatFarmacologica_ = readString(dis);
					
					this.FormFarmaceutica_ = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.CatFarmacologica_Id_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
						this.FormFarmaceutica_Id = (BigDecimal) dis.readObject();
					
					this.FormFarmaceutica_Ids_ = readString(dis);
					
					this.Id_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// String
				
						writeString(this.CodAtc_,dos);
					
					// String
				
						writeString(this.ViaAdmin_,dos);
					
					// String
				
						writeString(this.CatFarmacologica_,dos);
					
					// String
				
						writeString(this.FormFarmaceutica_,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CatFarmacologica_Id);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.CatFarmacologica_Id_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Generico_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FormFarmaceutica_Id);
					
					// String
				
						writeString(this.FormFarmaceutica_Ids_,dos);
					
					// String
				
						writeString(this.Id_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// String
				
						writeString(this.CodAtc_,dos);
					
					// String
				
						writeString(this.ViaAdmin_,dos);
					
					// String
				
						writeString(this.CatFarmacologica_,dos);
					
					// String
				
						writeString(this.FormFarmaceutica_,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CatFarmacologica_Id);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.CatFarmacologica_Id_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Generico_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FormFarmaceutica_Id);
					
					// String
				
						writeString(this.FormFarmaceutica_Ids_,dos);
					
					// String
				
						writeString(this.Id_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Insert="+_Insert);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico_="+NGenerico_);
		sb.append(",Concentracion_="+Concentracion_);
		sb.append(",CodAtc_="+CodAtc_);
		sb.append(",ViaAdmin_="+ViaAdmin_);
		sb.append(",CatFarmacologica_="+CatFarmacologica_);
		sb.append(",FormFarmaceutica_="+FormFarmaceutica_);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",ViaAdmin_Id_="+String.valueOf(ViaAdmin_Id_));
		sb.append(",CatFarmacologica_Id="+String.valueOf(CatFarmacologica_Id));
		sb.append(",Sustancia_Activa_Id_="+String.valueOf(Sustancia_Activa_Id_));
		sb.append(",CatFarmacologica_Id_="+CatFarmacologica_Id_);
		sb.append(",Generico_Id_="+String.valueOf(Generico_Id_));
		sb.append(",FormFarmaceutica_Id="+String.valueOf(FormFarmaceutica_Id));
		sb.append(",FormFarmaceutica_Ids_="+FormFarmaceutica_Ids_);
		sb.append(",Id_="+Id_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtDenormalize_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class next_4Struct implements routines.system.IPersistableRow<next_4Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 50;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 50;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return null;
				}
				public Integer _MessagePrecision(){
				    return null;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico_;

				public String getNGenerico_ () {
					return this.NGenerico_;
				}

				public Boolean NGenerico_IsNullable(){
				    return true;
				}
				public Boolean NGenerico_IsKey(){
				    return false;
				}
				public Integer NGenerico_Length(){
				    return 350;
				}
				public Integer NGenerico_Precision(){
				    return 0;
				}
				public String NGenerico_Default(){
				
					return null;
				
				}
				public String NGenerico_Comment(){
				
				    return "";
				
				}
				public String NGenerico_Pattern(){
				
					return "";
				
				}
				public String NGenerico_OriginalDbColumnName(){
				
					return "NGenerico_";
				
				}

				
			    public String Concentracion_;

				public String getConcentracion_ () {
					return this.Concentracion_;
				}

				public Boolean Concentracion_IsNullable(){
				    return true;
				}
				public Boolean Concentracion_IsKey(){
				    return false;
				}
				public Integer Concentracion_Length(){
				    return 200;
				}
				public Integer Concentracion_Precision(){
				    return 0;
				}
				public String Concentracion_Default(){
				
					return null;
				
				}
				public String Concentracion_Comment(){
				
				    return "";
				
				}
				public String Concentracion_Pattern(){
				
					return "";
				
				}
				public String Concentracion_OriginalDbColumnName(){
				
					return "Concentracion_";
				
				}

				
			    public String CodAtc_;

				public String getCodAtc_ () {
					return this.CodAtc_;
				}

				public Boolean CodAtc_IsNullable(){
				    return true;
				}
				public Boolean CodAtc_IsKey(){
				    return false;
				}
				public Integer CodAtc_Length(){
				    return 50;
				}
				public Integer CodAtc_Precision(){
				    return 0;
				}
				public String CodAtc_Default(){
				
					return null;
				
				}
				public String CodAtc_Comment(){
				
				    return "";
				
				}
				public String CodAtc_Pattern(){
				
					return "";
				
				}
				public String CodAtc_OriginalDbColumnName(){
				
					return "CodAtc_";
				
				}

				
			    public String ViaAdmin_;

				public String getViaAdmin_ () {
					return this.ViaAdmin_;
				}

				public Boolean ViaAdmin_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Length(){
				    return 50;
				}
				public Integer ViaAdmin_Precision(){
				    return 0;
				}
				public String ViaAdmin_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_OriginalDbColumnName(){
				
					return "ViaAdmin_";
				
				}

				
			    public String CatFarmacologica_;

				public String getCatFarmacologica_ () {
					return this.CatFarmacologica_;
				}

				public Boolean CatFarmacologica_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Length(){
				    return 50;
				}
				public Integer CatFarmacologica_Precision(){
				    return 0;
				}
				public String CatFarmacologica_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_OriginalDbColumnName(){
				
					return "CatFarmacologica_";
				
				}

				
			    public String FormFarmaceutica_;

				public String getFormFarmaceutica_ () {
					return this.FormFarmaceutica_;
				}

				public Boolean FormFarmaceutica_IsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_IsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_Length(){
				    return 200;
				}
				public Integer FormFarmaceutica_Precision(){
				    return 0;
				}
				public String FormFarmaceutica_Default(){
				
					return null;
				
				}
				public String FormFarmaceutica_Comment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_Pattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_OriginalDbColumnName(){
				
					return "FormFarmaceutica_";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public BigDecimal ViaAdmin_Id_;

				public BigDecimal getViaAdmin_Id_ () {
					return this.ViaAdmin_Id_;
				}

				public Boolean ViaAdmin_Id_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_Id_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Id_Length(){
				    return null;
				}
				public Integer ViaAdmin_Id_Precision(){
				    return null;
				}
				public String ViaAdmin_Id_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Id_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Id_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_Id_OriginalDbColumnName(){
				
					return "ViaAdmin_Id_";
				
				}

				
			    public BigDecimal CatFarmacologica_Id;

				public BigDecimal getCatFarmacologica_Id () {
					return this.CatFarmacologica_Id;
				}

				public Boolean CatFarmacologica_IdIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_IdIsKey(){
				    return false;
				}
				public Integer CatFarmacologica_IdLength(){
				    return null;
				}
				public Integer CatFarmacologica_IdPrecision(){
				    return null;
				}
				public String CatFarmacologica_IdDefault(){
				
					return null;
				
				}
				public String CatFarmacologica_IdComment(){
				
				    return "";
				
				}
				public String CatFarmacologica_IdPattern(){
				
					return "";
				
				}
				public String CatFarmacologica_IdOriginalDbColumnName(){
				
					return "CatFarmacologica_Id";
				
				}

				
			    public BigDecimal Sustancia_Activa_Id_;

				public BigDecimal getSustancia_Activa_Id_ () {
					return this.Sustancia_Activa_Id_;
				}

				public Boolean Sustancia_Activa_Id_IsNullable(){
				    return true;
				}
				public Boolean Sustancia_Activa_Id_IsKey(){
				    return false;
				}
				public Integer Sustancia_Activa_Id_Length(){
				    return null;
				}
				public Integer Sustancia_Activa_Id_Precision(){
				    return null;
				}
				public String Sustancia_Activa_Id_Default(){
				
					return null;
				
				}
				public String Sustancia_Activa_Id_Comment(){
				
				    return "";
				
				}
				public String Sustancia_Activa_Id_Pattern(){
				
					return "";
				
				}
				public String Sustancia_Activa_Id_OriginalDbColumnName(){
				
					return "Sustancia_Activa_Id_";
				
				}

				
			    public String CatFarmacologica_Id_;

				public String getCatFarmacologica_Id_ () {
					return this.CatFarmacologica_Id_;
				}

				public Boolean CatFarmacologica_Id_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_Id_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Id_Length(){
				    return null;
				}
				public Integer CatFarmacologica_Id_Precision(){
				    return null;
				}
				public String CatFarmacologica_Id_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Id_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Id_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_Id_OriginalDbColumnName(){
				
					return "CatFarmacologica_Id_";
				
				}

				
			    public BigDecimal Generico_Id_;

				public BigDecimal getGenerico_Id_ () {
					return this.Generico_Id_;
				}

				public Boolean Generico_Id_IsNullable(){
				    return true;
				}
				public Boolean Generico_Id_IsKey(){
				    return false;
				}
				public Integer Generico_Id_Length(){
				    return null;
				}
				public Integer Generico_Id_Precision(){
				    return null;
				}
				public String Generico_Id_Default(){
				
					return null;
				
				}
				public String Generico_Id_Comment(){
				
				    return "";
				
				}
				public String Generico_Id_Pattern(){
				
					return "";
				
				}
				public String Generico_Id_OriginalDbColumnName(){
				
					return "Generico_Id_";
				
				}

				
			    public BigDecimal FormFarmaceutica_Id;

				public BigDecimal getFormFarmaceutica_Id () {
					return this.FormFarmaceutica_Id;
				}

				public Boolean FormFarmaceutica_IdIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_IdIsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_IdLength(){
				    return null;
				}
				public Integer FormFarmaceutica_IdPrecision(){
				    return null;
				}
				public String FormFarmaceutica_IdDefault(){
				
					return null;
				
				}
				public String FormFarmaceutica_IdComment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_IdPattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_IdOriginalDbColumnName(){
				
					return "FormFarmaceutica_Id";
				
				}

				
			    public String FormFarmaceutica_Ids_;

				public String getFormFarmaceutica_Ids_ () {
					return this.FormFarmaceutica_Ids_;
				}

				public Boolean FormFarmaceutica_Ids_IsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_Ids_IsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_Ids_Length(){
				    return null;
				}
				public Integer FormFarmaceutica_Ids_Precision(){
				    return null;
				}
				public String FormFarmaceutica_Ids_Default(){
				
					return null;
				
				}
				public String FormFarmaceutica_Ids_Comment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_Ids_Pattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_Ids_OriginalDbColumnName(){
				
					return "FormFarmaceutica_Ids_";
				
				}

				
			    public String Id_;

				public String getId_ () {
					return this.Id_;
				}

				public Boolean Id_IsNullable(){
				    return true;
				}
				public Boolean Id_IsKey(){
				    return false;
				}
				public Integer Id_Length(){
				    return null;
				}
				public Integer Id_Precision(){
				    return null;
				}
				public String Id_Default(){
				
					return null;
				
				}
				public String Id_Comment(){
				
				    return "";
				
				}
				public String Id_Pattern(){
				
					return "";
				
				}
				public String Id_OriginalDbColumnName(){
				
					return "Id_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
					this.CodAtc_ = readString(dis);
					
					this.ViaAdmin_ = readString(dis);
					
					this.CatFarmacologica_ = readString(dis);
					
					this.FormFarmaceutica_ = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.CatFarmacologica_Id_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
						this.FormFarmaceutica_Id = (BigDecimal) dis.readObject();
					
					this.FormFarmaceutica_Ids_ = readString(dis);
					
					this.Id_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
					this.CodAtc_ = readString(dis);
					
					this.ViaAdmin_ = readString(dis);
					
					this.CatFarmacologica_ = readString(dis);
					
					this.FormFarmaceutica_ = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.CatFarmacologica_Id_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
						this.FormFarmaceutica_Id = (BigDecimal) dis.readObject();
					
					this.FormFarmaceutica_Ids_ = readString(dis);
					
					this.Id_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// String
				
						writeString(this.CodAtc_,dos);
					
					// String
				
						writeString(this.ViaAdmin_,dos);
					
					// String
				
						writeString(this.CatFarmacologica_,dos);
					
					// String
				
						writeString(this.FormFarmaceutica_,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CatFarmacologica_Id);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.CatFarmacologica_Id_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Generico_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FormFarmaceutica_Id);
					
					// String
				
						writeString(this.FormFarmaceutica_Ids_,dos);
					
					// String
				
						writeString(this.Id_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// String
				
						writeString(this.CodAtc_,dos);
					
					// String
				
						writeString(this.ViaAdmin_,dos);
					
					// String
				
						writeString(this.CatFarmacologica_,dos);
					
					// String
				
						writeString(this.FormFarmaceutica_,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CatFarmacologica_Id);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.CatFarmacologica_Id_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Generico_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FormFarmaceutica_Id);
					
					// String
				
						writeString(this.FormFarmaceutica_Ids_,dos);
					
					// String
				
						writeString(this.Id_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Insert="+_Insert);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico_="+NGenerico_);
		sb.append(",Concentracion_="+Concentracion_);
		sb.append(",CodAtc_="+CodAtc_);
		sb.append(",ViaAdmin_="+ViaAdmin_);
		sb.append(",CatFarmacologica_="+CatFarmacologica_);
		sb.append(",FormFarmaceutica_="+FormFarmaceutica_);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",ViaAdmin_Id_="+String.valueOf(ViaAdmin_Id_));
		sb.append(",CatFarmacologica_Id="+String.valueOf(CatFarmacologica_Id));
		sb.append(",Sustancia_Activa_Id_="+String.valueOf(Sustancia_Activa_Id_));
		sb.append(",CatFarmacologica_Id_="+CatFarmacologica_Id_);
		sb.append(",Generico_Id_="+String.valueOf(Generico_Id_));
		sb.append(",FormFarmaceutica_Id="+String.valueOf(FormFarmaceutica_Id));
		sb.append(",FormFarmaceutica_Ids_="+FormFarmaceutica_Ids_);
		sb.append(",Id_="+Id_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(next_4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 50;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 50;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return null;
				}
				public Integer _MessagePrecision(){
				    return null;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico_;

				public String getNGenerico_ () {
					return this.NGenerico_;
				}

				public Boolean NGenerico_IsNullable(){
				    return true;
				}
				public Boolean NGenerico_IsKey(){
				    return false;
				}
				public Integer NGenerico_Length(){
				    return 350;
				}
				public Integer NGenerico_Precision(){
				    return 0;
				}
				public String NGenerico_Default(){
				
					return null;
				
				}
				public String NGenerico_Comment(){
				
				    return "";
				
				}
				public String NGenerico_Pattern(){
				
					return "";
				
				}
				public String NGenerico_OriginalDbColumnName(){
				
					return "NGenerico_";
				
				}

				
			    public String Concentracion_;

				public String getConcentracion_ () {
					return this.Concentracion_;
				}

				public Boolean Concentracion_IsNullable(){
				    return true;
				}
				public Boolean Concentracion_IsKey(){
				    return false;
				}
				public Integer Concentracion_Length(){
				    return 200;
				}
				public Integer Concentracion_Precision(){
				    return 0;
				}
				public String Concentracion_Default(){
				
					return null;
				
				}
				public String Concentracion_Comment(){
				
				    return "";
				
				}
				public String Concentracion_Pattern(){
				
					return "";
				
				}
				public String Concentracion_OriginalDbColumnName(){
				
					return "Concentracion_";
				
				}

				
			    public String CodAtc_;

				public String getCodAtc_ () {
					return this.CodAtc_;
				}

				public Boolean CodAtc_IsNullable(){
				    return true;
				}
				public Boolean CodAtc_IsKey(){
				    return false;
				}
				public Integer CodAtc_Length(){
				    return 50;
				}
				public Integer CodAtc_Precision(){
				    return 0;
				}
				public String CodAtc_Default(){
				
					return null;
				
				}
				public String CodAtc_Comment(){
				
				    return "";
				
				}
				public String CodAtc_Pattern(){
				
					return "";
				
				}
				public String CodAtc_OriginalDbColumnName(){
				
					return "CodAtc_";
				
				}

				
			    public String ViaAdmin_;

				public String getViaAdmin_ () {
					return this.ViaAdmin_;
				}

				public Boolean ViaAdmin_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Length(){
				    return 50;
				}
				public Integer ViaAdmin_Precision(){
				    return 0;
				}
				public String ViaAdmin_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_OriginalDbColumnName(){
				
					return "ViaAdmin_";
				
				}

				
			    public String CatFarmacologica_;

				public String getCatFarmacologica_ () {
					return this.CatFarmacologica_;
				}

				public Boolean CatFarmacologica_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Length(){
				    return 50;
				}
				public Integer CatFarmacologica_Precision(){
				    return 0;
				}
				public String CatFarmacologica_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_OriginalDbColumnName(){
				
					return "CatFarmacologica_";
				
				}

				
			    public String FormFarmaceutica_;

				public String getFormFarmaceutica_ () {
					return this.FormFarmaceutica_;
				}

				public Boolean FormFarmaceutica_IsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_IsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_Length(){
				    return 200;
				}
				public Integer FormFarmaceutica_Precision(){
				    return 0;
				}
				public String FormFarmaceutica_Default(){
				
					return null;
				
				}
				public String FormFarmaceutica_Comment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_Pattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_OriginalDbColumnName(){
				
					return "FormFarmaceutica_";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public BigDecimal ViaAdmin_Id_;

				public BigDecimal getViaAdmin_Id_ () {
					return this.ViaAdmin_Id_;
				}

				public Boolean ViaAdmin_Id_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_Id_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Id_Length(){
				    return null;
				}
				public Integer ViaAdmin_Id_Precision(){
				    return null;
				}
				public String ViaAdmin_Id_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Id_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Id_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_Id_OriginalDbColumnName(){
				
					return "ViaAdmin_Id_";
				
				}

				
			    public BigDecimal CatFarmacologica_Id;

				public BigDecimal getCatFarmacologica_Id () {
					return this.CatFarmacologica_Id;
				}

				public Boolean CatFarmacologica_IdIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_IdIsKey(){
				    return false;
				}
				public Integer CatFarmacologica_IdLength(){
				    return null;
				}
				public Integer CatFarmacologica_IdPrecision(){
				    return null;
				}
				public String CatFarmacologica_IdDefault(){
				
					return null;
				
				}
				public String CatFarmacologica_IdComment(){
				
				    return "";
				
				}
				public String CatFarmacologica_IdPattern(){
				
					return "";
				
				}
				public String CatFarmacologica_IdOriginalDbColumnName(){
				
					return "CatFarmacologica_Id";
				
				}

				
			    public BigDecimal Sustancia_Activa_Id_;

				public BigDecimal getSustancia_Activa_Id_ () {
					return this.Sustancia_Activa_Id_;
				}

				public Boolean Sustancia_Activa_Id_IsNullable(){
				    return true;
				}
				public Boolean Sustancia_Activa_Id_IsKey(){
				    return false;
				}
				public Integer Sustancia_Activa_Id_Length(){
				    return null;
				}
				public Integer Sustancia_Activa_Id_Precision(){
				    return null;
				}
				public String Sustancia_Activa_Id_Default(){
				
					return null;
				
				}
				public String Sustancia_Activa_Id_Comment(){
				
				    return "";
				
				}
				public String Sustancia_Activa_Id_Pattern(){
				
					return "";
				
				}
				public String Sustancia_Activa_Id_OriginalDbColumnName(){
				
					return "Sustancia_Activa_Id_";
				
				}

				
			    public String CatFarmacologica_Id_;

				public String getCatFarmacologica_Id_ () {
					return this.CatFarmacologica_Id_;
				}

				public Boolean CatFarmacologica_Id_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_Id_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Id_Length(){
				    return null;
				}
				public Integer CatFarmacologica_Id_Precision(){
				    return null;
				}
				public String CatFarmacologica_Id_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Id_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Id_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_Id_OriginalDbColumnName(){
				
					return "CatFarmacologica_Id_";
				
				}

				
			    public BigDecimal Generico_Id_;

				public BigDecimal getGenerico_Id_ () {
					return this.Generico_Id_;
				}

				public Boolean Generico_Id_IsNullable(){
				    return true;
				}
				public Boolean Generico_Id_IsKey(){
				    return false;
				}
				public Integer Generico_Id_Length(){
				    return null;
				}
				public Integer Generico_Id_Precision(){
				    return null;
				}
				public String Generico_Id_Default(){
				
					return null;
				
				}
				public String Generico_Id_Comment(){
				
				    return "";
				
				}
				public String Generico_Id_Pattern(){
				
					return "";
				
				}
				public String Generico_Id_OriginalDbColumnName(){
				
					return "Generico_Id_";
				
				}

				
			    public BigDecimal FormFarmaceutica_Id;

				public BigDecimal getFormFarmaceutica_Id () {
					return this.FormFarmaceutica_Id;
				}

				public Boolean FormFarmaceutica_IdIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_IdIsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_IdLength(){
				    return null;
				}
				public Integer FormFarmaceutica_IdPrecision(){
				    return null;
				}
				public String FormFarmaceutica_IdDefault(){
				
					return null;
				
				}
				public String FormFarmaceutica_IdComment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_IdPattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_IdOriginalDbColumnName(){
				
					return "FormFarmaceutica_Id";
				
				}

				
			    public String FormFarmaceuticas_Ids_;

				public String getFormFarmaceuticas_Ids_ () {
					return this.FormFarmaceuticas_Ids_;
				}

				public Boolean FormFarmaceuticas_Ids_IsNullable(){
				    return true;
				}
				public Boolean FormFarmaceuticas_Ids_IsKey(){
				    return false;
				}
				public Integer FormFarmaceuticas_Ids_Length(){
				    return null;
				}
				public Integer FormFarmaceuticas_Ids_Precision(){
				    return null;
				}
				public String FormFarmaceuticas_Ids_Default(){
				
					return null;
				
				}
				public String FormFarmaceuticas_Ids_Comment(){
				
				    return "";
				
				}
				public String FormFarmaceuticas_Ids_Pattern(){
				
					return "";
				
				}
				public String FormFarmaceuticas_Ids_OriginalDbColumnName(){
				
					return "FormFarmaceuticas_Ids_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
					this.CodAtc_ = readString(dis);
					
					this.ViaAdmin_ = readString(dis);
					
					this.CatFarmacologica_ = readString(dis);
					
					this.FormFarmaceutica_ = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.CatFarmacologica_Id_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
						this.FormFarmaceutica_Id = (BigDecimal) dis.readObject();
					
					this.FormFarmaceuticas_Ids_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
					this.CodAtc_ = readString(dis);
					
					this.ViaAdmin_ = readString(dis);
					
					this.CatFarmacologica_ = readString(dis);
					
					this.FormFarmaceutica_ = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.CatFarmacologica_Id_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
						this.FormFarmaceutica_Id = (BigDecimal) dis.readObject();
					
					this.FormFarmaceuticas_Ids_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// String
				
						writeString(this.CodAtc_,dos);
					
					// String
				
						writeString(this.ViaAdmin_,dos);
					
					// String
				
						writeString(this.CatFarmacologica_,dos);
					
					// String
				
						writeString(this.FormFarmaceutica_,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CatFarmacologica_Id);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.CatFarmacologica_Id_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Generico_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FormFarmaceutica_Id);
					
					// String
				
						writeString(this.FormFarmaceuticas_Ids_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// String
				
						writeString(this.CodAtc_,dos);
					
					// String
				
						writeString(this.ViaAdmin_,dos);
					
					// String
				
						writeString(this.CatFarmacologica_,dos);
					
					// String
				
						writeString(this.FormFarmaceutica_,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CatFarmacologica_Id);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.CatFarmacologica_Id_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Generico_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FormFarmaceutica_Id);
					
					// String
				
						writeString(this.FormFarmaceuticas_Ids_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Insert="+_Insert);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico_="+NGenerico_);
		sb.append(",Concentracion_="+Concentracion_);
		sb.append(",CodAtc_="+CodAtc_);
		sb.append(",ViaAdmin_="+ViaAdmin_);
		sb.append(",CatFarmacologica_="+CatFarmacologica_);
		sb.append(",FormFarmaceutica_="+FormFarmaceutica_);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",ViaAdmin_Id_="+String.valueOf(ViaAdmin_Id_));
		sb.append(",CatFarmacologica_Id="+String.valueOf(CatFarmacologica_Id));
		sb.append(",Sustancia_Activa_Id_="+String.valueOf(Sustancia_Activa_Id_));
		sb.append(",CatFarmacologica_Id_="+CatFarmacologica_Id_);
		sb.append(",Generico_Id_="+String.valueOf(Generico_Id_));
		sb.append(",FormFarmaceutica_Id="+String.valueOf(FormFarmaceutica_Id));
		sb.append(",FormFarmaceuticas_Ids_="+FormFarmaceuticas_Ids_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class next_3Struct implements routines.system.IPersistableRow<next_3Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 50;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 50;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return null;
				}
				public Integer _MessagePrecision(){
				    return null;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico_;

				public String getNGenerico_ () {
					return this.NGenerico_;
				}

				public Boolean NGenerico_IsNullable(){
				    return true;
				}
				public Boolean NGenerico_IsKey(){
				    return false;
				}
				public Integer NGenerico_Length(){
				    return 350;
				}
				public Integer NGenerico_Precision(){
				    return 0;
				}
				public String NGenerico_Default(){
				
					return null;
				
				}
				public String NGenerico_Comment(){
				
				    return "";
				
				}
				public String NGenerico_Pattern(){
				
					return "";
				
				}
				public String NGenerico_OriginalDbColumnName(){
				
					return "NGenerico_";
				
				}

				
			    public String Concentracion_;

				public String getConcentracion_ () {
					return this.Concentracion_;
				}

				public Boolean Concentracion_IsNullable(){
				    return true;
				}
				public Boolean Concentracion_IsKey(){
				    return false;
				}
				public Integer Concentracion_Length(){
				    return 200;
				}
				public Integer Concentracion_Precision(){
				    return 0;
				}
				public String Concentracion_Default(){
				
					return null;
				
				}
				public String Concentracion_Comment(){
				
				    return "";
				
				}
				public String Concentracion_Pattern(){
				
					return "";
				
				}
				public String Concentracion_OriginalDbColumnName(){
				
					return "Concentracion_";
				
				}

				
			    public String CodAtc_;

				public String getCodAtc_ () {
					return this.CodAtc_;
				}

				public Boolean CodAtc_IsNullable(){
				    return true;
				}
				public Boolean CodAtc_IsKey(){
				    return false;
				}
				public Integer CodAtc_Length(){
				    return 50;
				}
				public Integer CodAtc_Precision(){
				    return 0;
				}
				public String CodAtc_Default(){
				
					return null;
				
				}
				public String CodAtc_Comment(){
				
				    return "";
				
				}
				public String CodAtc_Pattern(){
				
					return "";
				
				}
				public String CodAtc_OriginalDbColumnName(){
				
					return "CodAtc_";
				
				}

				
			    public String ViaAdmin_;

				public String getViaAdmin_ () {
					return this.ViaAdmin_;
				}

				public Boolean ViaAdmin_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Length(){
				    return 50;
				}
				public Integer ViaAdmin_Precision(){
				    return 0;
				}
				public String ViaAdmin_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_OriginalDbColumnName(){
				
					return "ViaAdmin_";
				
				}

				
			    public String CatFarmacologica_;

				public String getCatFarmacologica_ () {
					return this.CatFarmacologica_;
				}

				public Boolean CatFarmacologica_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Length(){
				    return 50;
				}
				public Integer CatFarmacologica_Precision(){
				    return 0;
				}
				public String CatFarmacologica_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_OriginalDbColumnName(){
				
					return "CatFarmacologica_";
				
				}

				
			    public String FormFarmaceutica_;

				public String getFormFarmaceutica_ () {
					return this.FormFarmaceutica_;
				}

				public Boolean FormFarmaceutica_IsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_IsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_Length(){
				    return 200;
				}
				public Integer FormFarmaceutica_Precision(){
				    return 0;
				}
				public String FormFarmaceutica_Default(){
				
					return null;
				
				}
				public String FormFarmaceutica_Comment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_Pattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_OriginalDbColumnName(){
				
					return "FormFarmaceutica_";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public BigDecimal ViaAdmin_Id_;

				public BigDecimal getViaAdmin_Id_ () {
					return this.ViaAdmin_Id_;
				}

				public Boolean ViaAdmin_Id_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_Id_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Id_Length(){
				    return null;
				}
				public Integer ViaAdmin_Id_Precision(){
				    return null;
				}
				public String ViaAdmin_Id_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Id_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Id_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_Id_OriginalDbColumnName(){
				
					return "ViaAdmin_Id_";
				
				}

				
			    public BigDecimal CatFarmacologica_Id;

				public BigDecimal getCatFarmacologica_Id () {
					return this.CatFarmacologica_Id;
				}

				public Boolean CatFarmacologica_IdIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_IdIsKey(){
				    return false;
				}
				public Integer CatFarmacologica_IdLength(){
				    return null;
				}
				public Integer CatFarmacologica_IdPrecision(){
				    return null;
				}
				public String CatFarmacologica_IdDefault(){
				
					return null;
				
				}
				public String CatFarmacologica_IdComment(){
				
				    return "";
				
				}
				public String CatFarmacologica_IdPattern(){
				
					return "";
				
				}
				public String CatFarmacologica_IdOriginalDbColumnName(){
				
					return "CatFarmacologica_Id";
				
				}

				
			    public BigDecimal Sustancia_Activa_Id_;

				public BigDecimal getSustancia_Activa_Id_ () {
					return this.Sustancia_Activa_Id_;
				}

				public Boolean Sustancia_Activa_Id_IsNullable(){
				    return true;
				}
				public Boolean Sustancia_Activa_Id_IsKey(){
				    return false;
				}
				public Integer Sustancia_Activa_Id_Length(){
				    return null;
				}
				public Integer Sustancia_Activa_Id_Precision(){
				    return null;
				}
				public String Sustancia_Activa_Id_Default(){
				
					return null;
				
				}
				public String Sustancia_Activa_Id_Comment(){
				
				    return "";
				
				}
				public String Sustancia_Activa_Id_Pattern(){
				
					return "";
				
				}
				public String Sustancia_Activa_Id_OriginalDbColumnName(){
				
					return "Sustancia_Activa_Id_";
				
				}

				
			    public String CatFarmacologica_Id_;

				public String getCatFarmacologica_Id_ () {
					return this.CatFarmacologica_Id_;
				}

				public Boolean CatFarmacologica_Id_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_Id_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Id_Length(){
				    return null;
				}
				public Integer CatFarmacologica_Id_Precision(){
				    return null;
				}
				public String CatFarmacologica_Id_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Id_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Id_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_Id_OriginalDbColumnName(){
				
					return "CatFarmacologica_Id_";
				
				}

				
			    public BigDecimal Generico_Id_;

				public BigDecimal getGenerico_Id_ () {
					return this.Generico_Id_;
				}

				public Boolean Generico_Id_IsNullable(){
				    return true;
				}
				public Boolean Generico_Id_IsKey(){
				    return false;
				}
				public Integer Generico_Id_Length(){
				    return null;
				}
				public Integer Generico_Id_Precision(){
				    return null;
				}
				public String Generico_Id_Default(){
				
					return null;
				
				}
				public String Generico_Id_Comment(){
				
				    return "";
				
				}
				public String Generico_Id_Pattern(){
				
					return "";
				
				}
				public String Generico_Id_OriginalDbColumnName(){
				
					return "Generico_Id_";
				
				}

				
			    public BigDecimal FormFarmaceutica_Id;

				public BigDecimal getFormFarmaceutica_Id () {
					return this.FormFarmaceutica_Id;
				}

				public Boolean FormFarmaceutica_IdIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_IdIsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_IdLength(){
				    return null;
				}
				public Integer FormFarmaceutica_IdPrecision(){
				    return null;
				}
				public String FormFarmaceutica_IdDefault(){
				
					return null;
				
				}
				public String FormFarmaceutica_IdComment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_IdPattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_IdOriginalDbColumnName(){
				
					return "FormFarmaceutica_Id";
				
				}

				
			    public String FormFarmaceuticas_Ids_;

				public String getFormFarmaceuticas_Ids_ () {
					return this.FormFarmaceuticas_Ids_;
				}

				public Boolean FormFarmaceuticas_Ids_IsNullable(){
				    return true;
				}
				public Boolean FormFarmaceuticas_Ids_IsKey(){
				    return false;
				}
				public Integer FormFarmaceuticas_Ids_Length(){
				    return null;
				}
				public Integer FormFarmaceuticas_Ids_Precision(){
				    return null;
				}
				public String FormFarmaceuticas_Ids_Default(){
				
					return null;
				
				}
				public String FormFarmaceuticas_Ids_Comment(){
				
				    return "";
				
				}
				public String FormFarmaceuticas_Ids_Pattern(){
				
					return "";
				
				}
				public String FormFarmaceuticas_Ids_OriginalDbColumnName(){
				
					return "FormFarmaceuticas_Ids_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
					this.CodAtc_ = readString(dis);
					
					this.ViaAdmin_ = readString(dis);
					
					this.CatFarmacologica_ = readString(dis);
					
					this.FormFarmaceutica_ = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.CatFarmacologica_Id_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
						this.FormFarmaceutica_Id = (BigDecimal) dis.readObject();
					
					this.FormFarmaceuticas_Ids_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
					this.CodAtc_ = readString(dis);
					
					this.ViaAdmin_ = readString(dis);
					
					this.CatFarmacologica_ = readString(dis);
					
					this.FormFarmaceutica_ = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.CatFarmacologica_Id_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
						this.FormFarmaceutica_Id = (BigDecimal) dis.readObject();
					
					this.FormFarmaceuticas_Ids_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// String
				
						writeString(this.CodAtc_,dos);
					
					// String
				
						writeString(this.ViaAdmin_,dos);
					
					// String
				
						writeString(this.CatFarmacologica_,dos);
					
					// String
				
						writeString(this.FormFarmaceutica_,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CatFarmacologica_Id);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.CatFarmacologica_Id_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Generico_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FormFarmaceutica_Id);
					
					// String
				
						writeString(this.FormFarmaceuticas_Ids_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// String
				
						writeString(this.CodAtc_,dos);
					
					// String
				
						writeString(this.ViaAdmin_,dos);
					
					// String
				
						writeString(this.CatFarmacologica_,dos);
					
					// String
				
						writeString(this.FormFarmaceutica_,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CatFarmacologica_Id);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.CatFarmacologica_Id_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Generico_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FormFarmaceutica_Id);
					
					// String
				
						writeString(this.FormFarmaceuticas_Ids_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Insert="+_Insert);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico_="+NGenerico_);
		sb.append(",Concentracion_="+Concentracion_);
		sb.append(",CodAtc_="+CodAtc_);
		sb.append(",ViaAdmin_="+ViaAdmin_);
		sb.append(",CatFarmacologica_="+CatFarmacologica_);
		sb.append(",FormFarmaceutica_="+FormFarmaceutica_);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",ViaAdmin_Id_="+String.valueOf(ViaAdmin_Id_));
		sb.append(",CatFarmacologica_Id="+String.valueOf(CatFarmacologica_Id));
		sb.append(",Sustancia_Activa_Id_="+String.valueOf(Sustancia_Activa_Id_));
		sb.append(",CatFarmacologica_Id_="+CatFarmacologica_Id_);
		sb.append(",Generico_Id_="+String.valueOf(Generico_Id_));
		sb.append(",FormFarmaceutica_Id="+String.valueOf(FormFarmaceutica_Id));
		sb.append(",FormFarmaceuticas_Ids_="+FormFarmaceuticas_Ids_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(next_3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 50;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 50;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return null;
				}
				public Integer _MessagePrecision(){
				    return null;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 350;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "";
				
				}
				public String NGenericoPattern(){
				
					return "";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 200;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "";
				
				}
				public String ConcentracionPattern(){
				
					return "";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String CodAtc;

				public String getCodAtc () {
					return this.CodAtc;
				}

				public Boolean CodAtcIsNullable(){
				    return true;
				}
				public Boolean CodAtcIsKey(){
				    return false;
				}
				public Integer CodAtcLength(){
				    return 50;
				}
				public Integer CodAtcPrecision(){
				    return 0;
				}
				public String CodAtcDefault(){
				
					return null;
				
				}
				public String CodAtcComment(){
				
				    return "";
				
				}
				public String CodAtcPattern(){
				
					return "";
				
				}
				public String CodAtcOriginalDbColumnName(){
				
					return "CodAtc";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 50;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "";
				
				}
				public String ViaAdminPattern(){
				
					return "";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String CatFarmacologica;

				public String getCatFarmacologica () {
					return this.CatFarmacologica;
				}

				public Boolean CatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologicaIsKey(){
				    return false;
				}
				public Integer CatFarmacologicaLength(){
				    return 50;
				}
				public Integer CatFarmacologicaPrecision(){
				    return 0;
				}
				public String CatFarmacologicaDefault(){
				
					return null;
				
				}
				public String CatFarmacologicaComment(){
				
				    return "";
				
				}
				public String CatFarmacologicaPattern(){
				
					return "";
				
				}
				public String CatFarmacologicaOriginalDbColumnName(){
				
					return "CatFarmacologica";
				
				}

				
			    public String FormFarmaceutica;

				public String getFormFarmaceutica () {
					return this.FormFarmaceutica;
				}

				public Boolean FormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FormFarmaceuticaLength(){
				    return 200;
				}
				public Integer FormFarmaceuticaPrecision(){
				    return 0;
				}
				public String FormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String FormFarmaceuticaPattern(){
				
					return "";
				
				}
				public String FormFarmaceuticaOriginalDbColumnName(){
				
					return "FormFarmaceutica";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public BigDecimal ViaAdmin_Id_;

				public BigDecimal getViaAdmin_Id_ () {
					return this.ViaAdmin_Id_;
				}

				public Boolean ViaAdmin_Id_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_Id_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Id_Length(){
				    return null;
				}
				public Integer ViaAdmin_Id_Precision(){
				    return null;
				}
				public String ViaAdmin_Id_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Id_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Id_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_Id_OriginalDbColumnName(){
				
					return "ViaAdmin_Id_";
				
				}

				
			    public BigDecimal CatFarmacologica_Id_;

				public BigDecimal getCatFarmacologica_Id_ () {
					return this.CatFarmacologica_Id_;
				}

				public Boolean CatFarmacologica_Id_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_Id_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Id_Length(){
				    return null;
				}
				public Integer CatFarmacologica_Id_Precision(){
				    return null;
				}
				public String CatFarmacologica_Id_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Id_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Id_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_Id_OriginalDbColumnName(){
				
					return "CatFarmacologica_Id_";
				
				}

				
			    public BigDecimal Sustancia_Activa_Id_;

				public BigDecimal getSustancia_Activa_Id_ () {
					return this.Sustancia_Activa_Id_;
				}

				public Boolean Sustancia_Activa_Id_IsNullable(){
				    return true;
				}
				public Boolean Sustancia_Activa_Id_IsKey(){
				    return false;
				}
				public Integer Sustancia_Activa_Id_Length(){
				    return null;
				}
				public Integer Sustancia_Activa_Id_Precision(){
				    return null;
				}
				public String Sustancia_Activa_Id_Default(){
				
					return null;
				
				}
				public String Sustancia_Activa_Id_Comment(){
				
				    return "";
				
				}
				public String Sustancia_Activa_Id_Pattern(){
				
					return "";
				
				}
				public String Sustancia_Activa_Id_OriginalDbColumnName(){
				
					return "Sustancia_Activa_Id_";
				
				}

				
			    public String Descripcion_;

				public String getDescripcion_ () {
					return this.Descripcion_;
				}

				public Boolean Descripcion_IsNullable(){
				    return true;
				}
				public Boolean Descripcion_IsKey(){
				    return false;
				}
				public Integer Descripcion_Length(){
				    return null;
				}
				public Integer Descripcion_Precision(){
				    return null;
				}
				public String Descripcion_Default(){
				
					return null;
				
				}
				public String Descripcion_Comment(){
				
				    return "";
				
				}
				public String Descripcion_Pattern(){
				
					return "";
				
				}
				public String Descripcion_OriginalDbColumnName(){
				
					return "Descripcion_";
				
				}

				
			    public String Concentracion_;

				public String getConcentracion_ () {
					return this.Concentracion_;
				}

				public Boolean Concentracion_IsNullable(){
				    return true;
				}
				public Boolean Concentracion_IsKey(){
				    return false;
				}
				public Integer Concentracion_Length(){
				    return null;
				}
				public Integer Concentracion_Precision(){
				    return null;
				}
				public String Concentracion_Default(){
				
					return null;
				
				}
				public String Concentracion_Comment(){
				
				    return "";
				
				}
				public String Concentracion_Pattern(){
				
					return "";
				
				}
				public String Concentracion_OriginalDbColumnName(){
				
					return "Concentracion_";
				
				}

				
			    public BigDecimal Generico_Id_;

				public BigDecimal getGenerico_Id_ () {
					return this.Generico_Id_;
				}

				public Boolean Generico_Id_IsNullable(){
				    return true;
				}
				public Boolean Generico_Id_IsKey(){
				    return false;
				}
				public Integer Generico_Id_Length(){
				    return null;
				}
				public Integer Generico_Id_Precision(){
				    return null;
				}
				public String Generico_Id_Default(){
				
					return null;
				
				}
				public String Generico_Id_Comment(){
				
				    return "";
				
				}
				public String Generico_Id_Pattern(){
				
					return "";
				
				}
				public String Generico_Id_OriginalDbColumnName(){
				
					return "Generico_Id_";
				
				}

				
			    public BigDecimal FormFarmaceutica_Id;

				public BigDecimal getFormFarmaceutica_Id () {
					return this.FormFarmaceutica_Id;
				}

				public Boolean FormFarmaceutica_IdIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_IdIsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_IdLength(){
				    return null;
				}
				public Integer FormFarmaceutica_IdPrecision(){
				    return null;
				}
				public String FormFarmaceutica_IdDefault(){
				
					return null;
				
				}
				public String FormFarmaceutica_IdComment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_IdPattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_IdOriginalDbColumnName(){
				
					return "FormFarmaceutica_Id";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id_ = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.Descripcion_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
						this.FormFarmaceutica_Id = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id_ = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.Descripcion_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
						this.FormFarmaceutica_Id = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CatFarmacologica_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.Descripcion_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Generico_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FormFarmaceutica_Id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CatFarmacologica_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.Descripcion_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Generico_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FormFarmaceutica_Id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Insert="+_Insert);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",CodAtc="+CodAtc);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",CatFarmacologica="+CatFarmacologica);
		sb.append(",FormFarmaceutica="+FormFarmaceutica);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",ViaAdmin_Id_="+String.valueOf(ViaAdmin_Id_));
		sb.append(",CatFarmacologica_Id_="+String.valueOf(CatFarmacologica_Id_));
		sb.append(",Sustancia_Activa_Id_="+String.valueOf(Sustancia_Activa_Id_));
		sb.append(",Descripcion_="+Descripcion_);
		sb.append(",Concentracion_="+Concentracion_);
		sb.append(",Generico_Id_="+String.valueOf(Generico_Id_));
		sb.append(",FormFarmaceutica_Id="+String.valueOf(FormFarmaceutica_Id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row39Struct implements routines.system.IPersistableRow<row39Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 50;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 50;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return null;
				}
				public Integer _MessagePrecision(){
				    return null;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 350;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "";
				
				}
				public String NGenericoPattern(){
				
					return "";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 200;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "";
				
				}
				public String ConcentracionPattern(){
				
					return "";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String CodAtc;

				public String getCodAtc () {
					return this.CodAtc;
				}

				public Boolean CodAtcIsNullable(){
				    return true;
				}
				public Boolean CodAtcIsKey(){
				    return false;
				}
				public Integer CodAtcLength(){
				    return 50;
				}
				public Integer CodAtcPrecision(){
				    return 0;
				}
				public String CodAtcDefault(){
				
					return null;
				
				}
				public String CodAtcComment(){
				
				    return "";
				
				}
				public String CodAtcPattern(){
				
					return "";
				
				}
				public String CodAtcOriginalDbColumnName(){
				
					return "CodAtc";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 50;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "";
				
				}
				public String ViaAdminPattern(){
				
					return "";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String CatFarmacologica;

				public String getCatFarmacologica () {
					return this.CatFarmacologica;
				}

				public Boolean CatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologicaIsKey(){
				    return false;
				}
				public Integer CatFarmacologicaLength(){
				    return 50;
				}
				public Integer CatFarmacologicaPrecision(){
				    return 0;
				}
				public String CatFarmacologicaDefault(){
				
					return null;
				
				}
				public String CatFarmacologicaComment(){
				
				    return "";
				
				}
				public String CatFarmacologicaPattern(){
				
					return "";
				
				}
				public String CatFarmacologicaOriginalDbColumnName(){
				
					return "CatFarmacologica";
				
				}

				
			    public String FormFarmaceutica;

				public String getFormFarmaceutica () {
					return this.FormFarmaceutica;
				}

				public Boolean FormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FormFarmaceuticaLength(){
				    return 200;
				}
				public Integer FormFarmaceuticaPrecision(){
				    return 0;
				}
				public String FormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String FormFarmaceuticaPattern(){
				
					return "";
				
				}
				public String FormFarmaceuticaOriginalDbColumnName(){
				
					return "FormFarmaceutica";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public BigDecimal ViaAdmin_Id_;

				public BigDecimal getViaAdmin_Id_ () {
					return this.ViaAdmin_Id_;
				}

				public Boolean ViaAdmin_Id_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_Id_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Id_Length(){
				    return null;
				}
				public Integer ViaAdmin_Id_Precision(){
				    return null;
				}
				public String ViaAdmin_Id_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Id_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Id_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_Id_OriginalDbColumnName(){
				
					return "ViaAdmin_Id_";
				
				}

				
			    public BigDecimal CatFarmacologica_Id_;

				public BigDecimal getCatFarmacologica_Id_ () {
					return this.CatFarmacologica_Id_;
				}

				public Boolean CatFarmacologica_Id_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_Id_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Id_Length(){
				    return null;
				}
				public Integer CatFarmacologica_Id_Precision(){
				    return null;
				}
				public String CatFarmacologica_Id_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Id_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Id_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_Id_OriginalDbColumnName(){
				
					return "CatFarmacologica_Id_";
				
				}

				
			    public BigDecimal Sustancia_Activa_Id_;

				public BigDecimal getSustancia_Activa_Id_ () {
					return this.Sustancia_Activa_Id_;
				}

				public Boolean Sustancia_Activa_Id_IsNullable(){
				    return true;
				}
				public Boolean Sustancia_Activa_Id_IsKey(){
				    return false;
				}
				public Integer Sustancia_Activa_Id_Length(){
				    return null;
				}
				public Integer Sustancia_Activa_Id_Precision(){
				    return null;
				}
				public String Sustancia_Activa_Id_Default(){
				
					return null;
				
				}
				public String Sustancia_Activa_Id_Comment(){
				
				    return "";
				
				}
				public String Sustancia_Activa_Id_Pattern(){
				
					return "";
				
				}
				public String Sustancia_Activa_Id_OriginalDbColumnName(){
				
					return "Sustancia_Activa_Id_";
				
				}

				
			    public String Descripcion_;

				public String getDescripcion_ () {
					return this.Descripcion_;
				}

				public Boolean Descripcion_IsNullable(){
				    return true;
				}
				public Boolean Descripcion_IsKey(){
				    return false;
				}
				public Integer Descripcion_Length(){
				    return null;
				}
				public Integer Descripcion_Precision(){
				    return null;
				}
				public String Descripcion_Default(){
				
					return null;
				
				}
				public String Descripcion_Comment(){
				
				    return "";
				
				}
				public String Descripcion_Pattern(){
				
					return "";
				
				}
				public String Descripcion_OriginalDbColumnName(){
				
					return "Descripcion_";
				
				}

				
			    public String Concentracion_;

				public String getConcentracion_ () {
					return this.Concentracion_;
				}

				public Boolean Concentracion_IsNullable(){
				    return true;
				}
				public Boolean Concentracion_IsKey(){
				    return false;
				}
				public Integer Concentracion_Length(){
				    return null;
				}
				public Integer Concentracion_Precision(){
				    return null;
				}
				public String Concentracion_Default(){
				
					return null;
				
				}
				public String Concentracion_Comment(){
				
				    return "";
				
				}
				public String Concentracion_Pattern(){
				
					return "";
				
				}
				public String Concentracion_OriginalDbColumnName(){
				
					return "Concentracion_";
				
				}

				
			    public BigDecimal Generico_Id_;

				public BigDecimal getGenerico_Id_ () {
					return this.Generico_Id_;
				}

				public Boolean Generico_Id_IsNullable(){
				    return true;
				}
				public Boolean Generico_Id_IsKey(){
				    return false;
				}
				public Integer Generico_Id_Length(){
				    return null;
				}
				public Integer Generico_Id_Precision(){
				    return null;
				}
				public String Generico_Id_Default(){
				
					return null;
				
				}
				public String Generico_Id_Comment(){
				
				    return "";
				
				}
				public String Generico_Id_Pattern(){
				
					return "";
				
				}
				public String Generico_Id_OriginalDbColumnName(){
				
					return "Generico_Id_";
				
				}

				
			    public BigDecimal FormFarmaceutica_Id;

				public BigDecimal getFormFarmaceutica_Id () {
					return this.FormFarmaceutica_Id;
				}

				public Boolean FormFarmaceutica_IdIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceutica_IdIsKey(){
				    return false;
				}
				public Integer FormFarmaceutica_IdLength(){
				    return null;
				}
				public Integer FormFarmaceutica_IdPrecision(){
				    return null;
				}
				public String FormFarmaceutica_IdDefault(){
				
					return null;
				
				}
				public String FormFarmaceutica_IdComment(){
				
				    return "";
				
				}
				public String FormFarmaceutica_IdPattern(){
				
					return "";
				
				}
				public String FormFarmaceutica_IdOriginalDbColumnName(){
				
					return "FormFarmaceutica_Id";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id_ = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.Descripcion_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
						this.FormFarmaceutica_Id = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id_ = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.Descripcion_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
						this.FormFarmaceutica_Id = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CatFarmacologica_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.Descripcion_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Generico_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FormFarmaceutica_Id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CatFarmacologica_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.Descripcion_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Generico_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FormFarmaceutica_Id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Insert="+_Insert);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",CodAtc="+CodAtc);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",CatFarmacologica="+CatFarmacologica);
		sb.append(",FormFarmaceutica="+FormFarmaceutica);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",ViaAdmin_Id_="+String.valueOf(ViaAdmin_Id_));
		sb.append(",CatFarmacologica_Id_="+String.valueOf(CatFarmacologica_Id_));
		sb.append(",Sustancia_Activa_Id_="+String.valueOf(Sustancia_Activa_Id_));
		sb.append(",Descripcion_="+Descripcion_);
		sb.append(",Concentracion_="+Concentracion_);
		sb.append(",Generico_Id_="+String.valueOf(Generico_Id_));
		sb.append(",FormFarmaceutica_Id="+String.valueOf(FormFarmaceutica_Id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row39Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 50;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 50;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return null;
				}
				public Integer _MessagePrecision(){
				    return null;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 300;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "";
				
				}
				public String NGenericoPattern(){
				
					return "";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 200;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "";
				
				}
				public String ConcentracionPattern(){
				
					return "";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String CodAtc;

				public String getCodAtc () {
					return this.CodAtc;
				}

				public Boolean CodAtcIsNullable(){
				    return true;
				}
				public Boolean CodAtcIsKey(){
				    return false;
				}
				public Integer CodAtcLength(){
				    return 50;
				}
				public Integer CodAtcPrecision(){
				    return 0;
				}
				public String CodAtcDefault(){
				
					return null;
				
				}
				public String CodAtcComment(){
				
				    return "";
				
				}
				public String CodAtcPattern(){
				
					return "";
				
				}
				public String CodAtcOriginalDbColumnName(){
				
					return "CodAtc";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 50;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "";
				
				}
				public String ViaAdminPattern(){
				
					return "";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String CatFarmacologica;

				public String getCatFarmacologica () {
					return this.CatFarmacologica;
				}

				public Boolean CatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologicaIsKey(){
				    return false;
				}
				public Integer CatFarmacologicaLength(){
				    return 50;
				}
				public Integer CatFarmacologicaPrecision(){
				    return 0;
				}
				public String CatFarmacologicaDefault(){
				
					return null;
				
				}
				public String CatFarmacologicaComment(){
				
				    return "";
				
				}
				public String CatFarmacologicaPattern(){
				
					return "";
				
				}
				public String CatFarmacologicaOriginalDbColumnName(){
				
					return "CatFarmacologica";
				
				}

				
			    public String FormFarmaceutica;

				public String getFormFarmaceutica () {
					return this.FormFarmaceutica;
				}

				public Boolean FormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FormFarmaceuticaLength(){
				    return 200;
				}
				public Integer FormFarmaceuticaPrecision(){
				    return 0;
				}
				public String FormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String FormFarmaceuticaPattern(){
				
					return "";
				
				}
				public String FormFarmaceuticaOriginalDbColumnName(){
				
					return "FormFarmaceutica";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public BigDecimal ViaAdmin_Id_;

				public BigDecimal getViaAdmin_Id_ () {
					return this.ViaAdmin_Id_;
				}

				public Boolean ViaAdmin_Id_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_Id_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Id_Length(){
				    return null;
				}
				public Integer ViaAdmin_Id_Precision(){
				    return null;
				}
				public String ViaAdmin_Id_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Id_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Id_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_Id_OriginalDbColumnName(){
				
					return "ViaAdmin_Id_";
				
				}

				
			    public BigDecimal CatFarmacologica_Id_;

				public BigDecimal getCatFarmacologica_Id_ () {
					return this.CatFarmacologica_Id_;
				}

				public Boolean CatFarmacologica_Id_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_Id_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Id_Length(){
				    return null;
				}
				public Integer CatFarmacologica_Id_Precision(){
				    return null;
				}
				public String CatFarmacologica_Id_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Id_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Id_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_Id_OriginalDbColumnName(){
				
					return "CatFarmacologica_Id_";
				
				}

				
			    public BigDecimal Sustancia_Activa_Id_;

				public BigDecimal getSustancia_Activa_Id_ () {
					return this.Sustancia_Activa_Id_;
				}

				public Boolean Sustancia_Activa_Id_IsNullable(){
				    return true;
				}
				public Boolean Sustancia_Activa_Id_IsKey(){
				    return false;
				}
				public Integer Sustancia_Activa_Id_Length(){
				    return null;
				}
				public Integer Sustancia_Activa_Id_Precision(){
				    return null;
				}
				public String Sustancia_Activa_Id_Default(){
				
					return null;
				
				}
				public String Sustancia_Activa_Id_Comment(){
				
				    return "";
				
				}
				public String Sustancia_Activa_Id_Pattern(){
				
					return "";
				
				}
				public String Sustancia_Activa_Id_OriginalDbColumnName(){
				
					return "Sustancia_Activa_Id_";
				
				}

				
			    public String Descripcion_;

				public String getDescripcion_ () {
					return this.Descripcion_;
				}

				public Boolean Descripcion_IsNullable(){
				    return true;
				}
				public Boolean Descripcion_IsKey(){
				    return false;
				}
				public Integer Descripcion_Length(){
				    return null;
				}
				public Integer Descripcion_Precision(){
				    return null;
				}
				public String Descripcion_Default(){
				
					return null;
				
				}
				public String Descripcion_Comment(){
				
				    return "";
				
				}
				public String Descripcion_Pattern(){
				
					return "";
				
				}
				public String Descripcion_OriginalDbColumnName(){
				
					return "Descripcion_";
				
				}

				
			    public String Concentracion_;

				public String getConcentracion_ () {
					return this.Concentracion_;
				}

				public Boolean Concentracion_IsNullable(){
				    return true;
				}
				public Boolean Concentracion_IsKey(){
				    return false;
				}
				public Integer Concentracion_Length(){
				    return null;
				}
				public Integer Concentracion_Precision(){
				    return null;
				}
				public String Concentracion_Default(){
				
					return null;
				
				}
				public String Concentracion_Comment(){
				
				    return "";
				
				}
				public String Concentracion_Pattern(){
				
					return "";
				
				}
				public String Concentracion_OriginalDbColumnName(){
				
					return "Concentracion_";
				
				}

				
			    public BigDecimal Generico_Id_;

				public BigDecimal getGenerico_Id_ () {
					return this.Generico_Id_;
				}

				public Boolean Generico_Id_IsNullable(){
				    return true;
				}
				public Boolean Generico_Id_IsKey(){
				    return false;
				}
				public Integer Generico_Id_Length(){
				    return null;
				}
				public Integer Generico_Id_Precision(){
				    return null;
				}
				public String Generico_Id_Default(){
				
					return null;
				
				}
				public String Generico_Id_Comment(){
				
				    return "";
				
				}
				public String Generico_Id_Pattern(){
				
					return "";
				
				}
				public String Generico_Id_OriginalDbColumnName(){
				
					return "Generico_Id_";
				
				}

				
			    public String Respuesta_;

				public String getRespuesta_ () {
					return this.Respuesta_;
				}

				public Boolean Respuesta_IsNullable(){
				    return true;
				}
				public Boolean Respuesta_IsKey(){
				    return false;
				}
				public Integer Respuesta_Length(){
				    return null;
				}
				public Integer Respuesta_Precision(){
				    return null;
				}
				public String Respuesta_Default(){
				
					return null;
				
				}
				public String Respuesta_Comment(){
				
				    return "";
				
				}
				public String Respuesta_Pattern(){
				
					return "";
				
				}
				public String Respuesta_OriginalDbColumnName(){
				
					return "Respuesta_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id_ = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.Descripcion_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
					this.Respuesta_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id_ = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.Descripcion_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
					this.Respuesta_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CatFarmacologica_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.Descripcion_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Generico_Id_);
					
					// String
				
						writeString(this.Respuesta_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CatFarmacologica_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.Descripcion_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Generico_Id_);
					
					// String
				
						writeString(this.Respuesta_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Insert="+_Insert);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",CodAtc="+CodAtc);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",CatFarmacologica="+CatFarmacologica);
		sb.append(",FormFarmaceutica="+FormFarmaceutica);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",ViaAdmin_Id_="+String.valueOf(ViaAdmin_Id_));
		sb.append(",CatFarmacologica_Id_="+String.valueOf(CatFarmacologica_Id_));
		sb.append(",Sustancia_Activa_Id_="+String.valueOf(Sustancia_Activa_Id_));
		sb.append(",Descripcion_="+Descripcion_);
		sb.append(",Concentracion_="+Concentracion_);
		sb.append(",Generico_Id_="+String.valueOf(Generico_Id_));
		sb.append(",Respuesta_="+Respuesta_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 50;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 50;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return null;
				}
				public Integer _MessagePrecision(){
				    return null;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 300;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "";
				
				}
				public String NGenericoPattern(){
				
					return "";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 200;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "";
				
				}
				public String ConcentracionPattern(){
				
					return "";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String CodAtc;

				public String getCodAtc () {
					return this.CodAtc;
				}

				public Boolean CodAtcIsNullable(){
				    return true;
				}
				public Boolean CodAtcIsKey(){
				    return false;
				}
				public Integer CodAtcLength(){
				    return 50;
				}
				public Integer CodAtcPrecision(){
				    return 0;
				}
				public String CodAtcDefault(){
				
					return null;
				
				}
				public String CodAtcComment(){
				
				    return "";
				
				}
				public String CodAtcPattern(){
				
					return "";
				
				}
				public String CodAtcOriginalDbColumnName(){
				
					return "CodAtc";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 50;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "";
				
				}
				public String ViaAdminPattern(){
				
					return "";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String CatFarmacologica;

				public String getCatFarmacologica () {
					return this.CatFarmacologica;
				}

				public Boolean CatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologicaIsKey(){
				    return false;
				}
				public Integer CatFarmacologicaLength(){
				    return 50;
				}
				public Integer CatFarmacologicaPrecision(){
				    return 0;
				}
				public String CatFarmacologicaDefault(){
				
					return null;
				
				}
				public String CatFarmacologicaComment(){
				
				    return "";
				
				}
				public String CatFarmacologicaPattern(){
				
					return "";
				
				}
				public String CatFarmacologicaOriginalDbColumnName(){
				
					return "CatFarmacologica";
				
				}

				
			    public String FormFarmaceutica;

				public String getFormFarmaceutica () {
					return this.FormFarmaceutica;
				}

				public Boolean FormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FormFarmaceuticaLength(){
				    return 200;
				}
				public Integer FormFarmaceuticaPrecision(){
				    return 0;
				}
				public String FormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String FormFarmaceuticaPattern(){
				
					return "";
				
				}
				public String FormFarmaceuticaOriginalDbColumnName(){
				
					return "FormFarmaceutica";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public BigDecimal ViaAdmin_Id_;

				public BigDecimal getViaAdmin_Id_ () {
					return this.ViaAdmin_Id_;
				}

				public Boolean ViaAdmin_Id_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_Id_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Id_Length(){
				    return null;
				}
				public Integer ViaAdmin_Id_Precision(){
				    return null;
				}
				public String ViaAdmin_Id_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Id_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Id_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_Id_OriginalDbColumnName(){
				
					return "ViaAdmin_Id_";
				
				}

				
			    public BigDecimal CatFarmacologica_Id_;

				public BigDecimal getCatFarmacologica_Id_ () {
					return this.CatFarmacologica_Id_;
				}

				public Boolean CatFarmacologica_Id_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_Id_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Id_Length(){
				    return null;
				}
				public Integer CatFarmacologica_Id_Precision(){
				    return null;
				}
				public String CatFarmacologica_Id_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Id_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Id_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_Id_OriginalDbColumnName(){
				
					return "CatFarmacologica_Id_";
				
				}

				
			    public BigDecimal Sustancia_Activa_Id_;

				public BigDecimal getSustancia_Activa_Id_ () {
					return this.Sustancia_Activa_Id_;
				}

				public Boolean Sustancia_Activa_Id_IsNullable(){
				    return true;
				}
				public Boolean Sustancia_Activa_Id_IsKey(){
				    return false;
				}
				public Integer Sustancia_Activa_Id_Length(){
				    return null;
				}
				public Integer Sustancia_Activa_Id_Precision(){
				    return null;
				}
				public String Sustancia_Activa_Id_Default(){
				
					return null;
				
				}
				public String Sustancia_Activa_Id_Comment(){
				
				    return "";
				
				}
				public String Sustancia_Activa_Id_Pattern(){
				
					return "";
				
				}
				public String Sustancia_Activa_Id_OriginalDbColumnName(){
				
					return "Sustancia_Activa_Id_";
				
				}

				
			    public String Descripcion_;

				public String getDescripcion_ () {
					return this.Descripcion_;
				}

				public Boolean Descripcion_IsNullable(){
				    return true;
				}
				public Boolean Descripcion_IsKey(){
				    return false;
				}
				public Integer Descripcion_Length(){
				    return null;
				}
				public Integer Descripcion_Precision(){
				    return null;
				}
				public String Descripcion_Default(){
				
					return null;
				
				}
				public String Descripcion_Comment(){
				
				    return "";
				
				}
				public String Descripcion_Pattern(){
				
					return "";
				
				}
				public String Descripcion_OriginalDbColumnName(){
				
					return "Descripcion_";
				
				}

				
			    public String Concentracion_;

				public String getConcentracion_ () {
					return this.Concentracion_;
				}

				public Boolean Concentracion_IsNullable(){
				    return true;
				}
				public Boolean Concentracion_IsKey(){
				    return false;
				}
				public Integer Concentracion_Length(){
				    return null;
				}
				public Integer Concentracion_Precision(){
				    return null;
				}
				public String Concentracion_Default(){
				
					return null;
				
				}
				public String Concentracion_Comment(){
				
				    return "";
				
				}
				public String Concentracion_Pattern(){
				
					return "";
				
				}
				public String Concentracion_OriginalDbColumnName(){
				
					return "Concentracion_";
				
				}

				
			    public BigDecimal Generico_Id_;

				public BigDecimal getGenerico_Id_ () {
					return this.Generico_Id_;
				}

				public Boolean Generico_Id_IsNullable(){
				    return true;
				}
				public Boolean Generico_Id_IsKey(){
				    return false;
				}
				public Integer Generico_Id_Length(){
				    return null;
				}
				public Integer Generico_Id_Precision(){
				    return null;
				}
				public String Generico_Id_Default(){
				
					return null;
				
				}
				public String Generico_Id_Comment(){
				
				    return "";
				
				}
				public String Generico_Id_Pattern(){
				
					return "";
				
				}
				public String Generico_Id_OriginalDbColumnName(){
				
					return "Generico_Id_";
				
				}

				
			    public String Respuesta_;

				public String getRespuesta_ () {
					return this.Respuesta_;
				}

				public Boolean Respuesta_IsNullable(){
				    return true;
				}
				public Boolean Respuesta_IsKey(){
				    return false;
				}
				public Integer Respuesta_Length(){
				    return null;
				}
				public Integer Respuesta_Precision(){
				    return null;
				}
				public String Respuesta_Default(){
				
					return null;
				
				}
				public String Respuesta_Comment(){
				
				    return "";
				
				}
				public String Respuesta_Pattern(){
				
					return "";
				
				}
				public String Respuesta_OriginalDbColumnName(){
				
					return "Respuesta_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id_ = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.Descripcion_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
					this.Respuesta_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id_ = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.Descripcion_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
					this.Respuesta_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CatFarmacologica_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.Descripcion_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Generico_Id_);
					
					// String
				
						writeString(this.Respuesta_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CatFarmacologica_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.Descripcion_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Generico_Id_);
					
					// String
				
						writeString(this.Respuesta_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Insert="+_Insert);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",CodAtc="+CodAtc);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",CatFarmacologica="+CatFarmacologica);
		sb.append(",FormFarmaceutica="+FormFarmaceutica);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",ViaAdmin_Id_="+String.valueOf(ViaAdmin_Id_));
		sb.append(",CatFarmacologica_Id_="+String.valueOf(CatFarmacologica_Id_));
		sb.append(",Sustancia_Activa_Id_="+String.valueOf(Sustancia_Activa_Id_));
		sb.append(",Descripcion_="+Descripcion_);
		sb.append(",Concentracion_="+Concentracion_);
		sb.append(",Generico_Id_="+String.valueOf(Generico_Id_));
		sb.append(",Respuesta_="+Respuesta_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 50;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 50;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return null;
				}
				public Integer _MessagePrecision(){
				    return null;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 350;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "";
				
				}
				public String NGenericoPattern(){
				
					return "";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 200;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "";
				
				}
				public String ConcentracionPattern(){
				
					return "";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String CodAtc;

				public String getCodAtc () {
					return this.CodAtc;
				}

				public Boolean CodAtcIsNullable(){
				    return true;
				}
				public Boolean CodAtcIsKey(){
				    return false;
				}
				public Integer CodAtcLength(){
				    return 50;
				}
				public Integer CodAtcPrecision(){
				    return 0;
				}
				public String CodAtcDefault(){
				
					return null;
				
				}
				public String CodAtcComment(){
				
				    return "";
				
				}
				public String CodAtcPattern(){
				
					return "";
				
				}
				public String CodAtcOriginalDbColumnName(){
				
					return "CodAtc";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 50;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "";
				
				}
				public String ViaAdminPattern(){
				
					return "";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String CatFarmacologica;

				public String getCatFarmacologica () {
					return this.CatFarmacologica;
				}

				public Boolean CatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologicaIsKey(){
				    return false;
				}
				public Integer CatFarmacologicaLength(){
				    return 50;
				}
				public Integer CatFarmacologicaPrecision(){
				    return 0;
				}
				public String CatFarmacologicaDefault(){
				
					return null;
				
				}
				public String CatFarmacologicaComment(){
				
				    return "";
				
				}
				public String CatFarmacologicaPattern(){
				
					return "";
				
				}
				public String CatFarmacologicaOriginalDbColumnName(){
				
					return "CatFarmacologica";
				
				}

				
			    public String FormFarmaceutica;

				public String getFormFarmaceutica () {
					return this.FormFarmaceutica;
				}

				public Boolean FormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FormFarmaceuticaLength(){
				    return 200;
				}
				public Integer FormFarmaceuticaPrecision(){
				    return 0;
				}
				public String FormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String FormFarmaceuticaPattern(){
				
					return "";
				
				}
				public String FormFarmaceuticaOriginalDbColumnName(){
				
					return "FormFarmaceutica";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public BigDecimal ViaAdmin_Id_;

				public BigDecimal getViaAdmin_Id_ () {
					return this.ViaAdmin_Id_;
				}

				public Boolean ViaAdmin_Id_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_Id_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Id_Length(){
				    return null;
				}
				public Integer ViaAdmin_Id_Precision(){
				    return null;
				}
				public String ViaAdmin_Id_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Id_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Id_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_Id_OriginalDbColumnName(){
				
					return "ViaAdmin_Id_";
				
				}

				
			    public BigDecimal CatFarmacologica_Id_;

				public BigDecimal getCatFarmacologica_Id_ () {
					return this.CatFarmacologica_Id_;
				}

				public Boolean CatFarmacologica_Id_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_Id_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Id_Length(){
				    return null;
				}
				public Integer CatFarmacologica_Id_Precision(){
				    return null;
				}
				public String CatFarmacologica_Id_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Id_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Id_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_Id_OriginalDbColumnName(){
				
					return "CatFarmacologica_Id_";
				
				}

				
			    public BigDecimal Sustancia_Activa_Id_;

				public BigDecimal getSustancia_Activa_Id_ () {
					return this.Sustancia_Activa_Id_;
				}

				public Boolean Sustancia_Activa_Id_IsNullable(){
				    return true;
				}
				public Boolean Sustancia_Activa_Id_IsKey(){
				    return false;
				}
				public Integer Sustancia_Activa_Id_Length(){
				    return null;
				}
				public Integer Sustancia_Activa_Id_Precision(){
				    return null;
				}
				public String Sustancia_Activa_Id_Default(){
				
					return null;
				
				}
				public String Sustancia_Activa_Id_Comment(){
				
				    return "";
				
				}
				public String Sustancia_Activa_Id_Pattern(){
				
					return "";
				
				}
				public String Sustancia_Activa_Id_OriginalDbColumnName(){
				
					return "Sustancia_Activa_Id_";
				
				}

				
			    public String Descripcion_;

				public String getDescripcion_ () {
					return this.Descripcion_;
				}

				public Boolean Descripcion_IsNullable(){
				    return true;
				}
				public Boolean Descripcion_IsKey(){
				    return false;
				}
				public Integer Descripcion_Length(){
				    return null;
				}
				public Integer Descripcion_Precision(){
				    return null;
				}
				public String Descripcion_Default(){
				
					return null;
				
				}
				public String Descripcion_Comment(){
				
				    return "";
				
				}
				public String Descripcion_Pattern(){
				
					return "";
				
				}
				public String Descripcion_OriginalDbColumnName(){
				
					return "Descripcion_";
				
				}

				
			    public String Concentracion_;

				public String getConcentracion_ () {
					return this.Concentracion_;
				}

				public Boolean Concentracion_IsNullable(){
				    return true;
				}
				public Boolean Concentracion_IsKey(){
				    return false;
				}
				public Integer Concentracion_Length(){
				    return null;
				}
				public Integer Concentracion_Precision(){
				    return null;
				}
				public String Concentracion_Default(){
				
					return null;
				
				}
				public String Concentracion_Comment(){
				
				    return "";
				
				}
				public String Concentracion_Pattern(){
				
					return "";
				
				}
				public String Concentracion_OriginalDbColumnName(){
				
					return "Concentracion_";
				
				}

				
			    public BigDecimal Generico_Id_;

				public BigDecimal getGenerico_Id_ () {
					return this.Generico_Id_;
				}

				public Boolean Generico_Id_IsNullable(){
				    return true;
				}
				public Boolean Generico_Id_IsKey(){
				    return false;
				}
				public Integer Generico_Id_Length(){
				    return null;
				}
				public Integer Generico_Id_Precision(){
				    return null;
				}
				public String Generico_Id_Default(){
				
					return null;
				
				}
				public String Generico_Id_Comment(){
				
				    return "";
				
				}
				public String Generico_Id_Pattern(){
				
					return "";
				
				}
				public String Generico_Id_OriginalDbColumnName(){
				
					return "Generico_Id_";
				
				}

				
			    public String Respuesta_;

				public String getRespuesta_ () {
					return this.Respuesta_;
				}

				public Boolean Respuesta_IsNullable(){
				    return true;
				}
				public Boolean Respuesta_IsKey(){
				    return false;
				}
				public Integer Respuesta_Length(){
				    return null;
				}
				public Integer Respuesta_Precision(){
				    return null;
				}
				public String Respuesta_Default(){
				
					return null;
				
				}
				public String Respuesta_Comment(){
				
				    return "";
				
				}
				public String Respuesta_Pattern(){
				
					return "";
				
				}
				public String Respuesta_OriginalDbColumnName(){
				
					return "Respuesta_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id_ = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.Descripcion_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
					this.Respuesta_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id_ = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.Descripcion_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
					this.Respuesta_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CatFarmacologica_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.Descripcion_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Generico_Id_);
					
					// String
				
						writeString(this.Respuesta_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CatFarmacologica_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.Descripcion_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Generico_Id_);
					
					// String
				
						writeString(this.Respuesta_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Insert="+_Insert);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",CodAtc="+CodAtc);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",CatFarmacologica="+CatFarmacologica);
		sb.append(",FormFarmaceutica="+FormFarmaceutica);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",ViaAdmin_Id_="+String.valueOf(ViaAdmin_Id_));
		sb.append(",CatFarmacologica_Id_="+String.valueOf(CatFarmacologica_Id_));
		sb.append(",Sustancia_Activa_Id_="+String.valueOf(Sustancia_Activa_Id_));
		sb.append(",Descripcion_="+Descripcion_);
		sb.append(",Concentracion_="+Concentracion_);
		sb.append(",Generico_Id_="+String.valueOf(Generico_Id_));
		sb.append(",Respuesta_="+Respuesta_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 50;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 50;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return null;
				}
				public Integer _MessagePrecision(){
				    return null;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 350;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "";
				
				}
				public String NGenericoPattern(){
				
					return "";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 200;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "";
				
				}
				public String ConcentracionPattern(){
				
					return "";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String CodAtc;

				public String getCodAtc () {
					return this.CodAtc;
				}

				public Boolean CodAtcIsNullable(){
				    return true;
				}
				public Boolean CodAtcIsKey(){
				    return false;
				}
				public Integer CodAtcLength(){
				    return 50;
				}
				public Integer CodAtcPrecision(){
				    return 0;
				}
				public String CodAtcDefault(){
				
					return null;
				
				}
				public String CodAtcComment(){
				
				    return "";
				
				}
				public String CodAtcPattern(){
				
					return "";
				
				}
				public String CodAtcOriginalDbColumnName(){
				
					return "CodAtc";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 50;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "";
				
				}
				public String ViaAdminPattern(){
				
					return "";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String CatFarmacologica;

				public String getCatFarmacologica () {
					return this.CatFarmacologica;
				}

				public Boolean CatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologicaIsKey(){
				    return false;
				}
				public Integer CatFarmacologicaLength(){
				    return 50;
				}
				public Integer CatFarmacologicaPrecision(){
				    return 0;
				}
				public String CatFarmacologicaDefault(){
				
					return null;
				
				}
				public String CatFarmacologicaComment(){
				
				    return "";
				
				}
				public String CatFarmacologicaPattern(){
				
					return "";
				
				}
				public String CatFarmacologicaOriginalDbColumnName(){
				
					return "CatFarmacologica";
				
				}

				
			    public String FormFarmaceutica;

				public String getFormFarmaceutica () {
					return this.FormFarmaceutica;
				}

				public Boolean FormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FormFarmaceuticaLength(){
				    return 200;
				}
				public Integer FormFarmaceuticaPrecision(){
				    return 0;
				}
				public String FormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String FormFarmaceuticaPattern(){
				
					return "";
				
				}
				public String FormFarmaceuticaOriginalDbColumnName(){
				
					return "FormFarmaceutica";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public BigDecimal ViaAdmin_Id_;

				public BigDecimal getViaAdmin_Id_ () {
					return this.ViaAdmin_Id_;
				}

				public Boolean ViaAdmin_Id_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_Id_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Id_Length(){
				    return null;
				}
				public Integer ViaAdmin_Id_Precision(){
				    return null;
				}
				public String ViaAdmin_Id_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Id_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Id_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_Id_OriginalDbColumnName(){
				
					return "ViaAdmin_Id_";
				
				}

				
			    public BigDecimal CatFarmacologica_Id_;

				public BigDecimal getCatFarmacologica_Id_ () {
					return this.CatFarmacologica_Id_;
				}

				public Boolean CatFarmacologica_Id_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_Id_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Id_Length(){
				    return null;
				}
				public Integer CatFarmacologica_Id_Precision(){
				    return null;
				}
				public String CatFarmacologica_Id_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Id_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Id_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_Id_OriginalDbColumnName(){
				
					return "CatFarmacologica_Id_";
				
				}

				
			    public BigDecimal Sustancia_Activa_Id_;

				public BigDecimal getSustancia_Activa_Id_ () {
					return this.Sustancia_Activa_Id_;
				}

				public Boolean Sustancia_Activa_Id_IsNullable(){
				    return true;
				}
				public Boolean Sustancia_Activa_Id_IsKey(){
				    return false;
				}
				public Integer Sustancia_Activa_Id_Length(){
				    return null;
				}
				public Integer Sustancia_Activa_Id_Precision(){
				    return null;
				}
				public String Sustancia_Activa_Id_Default(){
				
					return null;
				
				}
				public String Sustancia_Activa_Id_Comment(){
				
				    return "";
				
				}
				public String Sustancia_Activa_Id_Pattern(){
				
					return "";
				
				}
				public String Sustancia_Activa_Id_OriginalDbColumnName(){
				
					return "Sustancia_Activa_Id_";
				
				}

				
			    public String Descripcion_;

				public String getDescripcion_ () {
					return this.Descripcion_;
				}

				public Boolean Descripcion_IsNullable(){
				    return true;
				}
				public Boolean Descripcion_IsKey(){
				    return false;
				}
				public Integer Descripcion_Length(){
				    return null;
				}
				public Integer Descripcion_Precision(){
				    return null;
				}
				public String Descripcion_Default(){
				
					return null;
				
				}
				public String Descripcion_Comment(){
				
				    return "";
				
				}
				public String Descripcion_Pattern(){
				
					return "";
				
				}
				public String Descripcion_OriginalDbColumnName(){
				
					return "Descripcion_";
				
				}

				
			    public String Concentracion_;

				public String getConcentracion_ () {
					return this.Concentracion_;
				}

				public Boolean Concentracion_IsNullable(){
				    return true;
				}
				public Boolean Concentracion_IsKey(){
				    return false;
				}
				public Integer Concentracion_Length(){
				    return null;
				}
				public Integer Concentracion_Precision(){
				    return null;
				}
				public String Concentracion_Default(){
				
					return null;
				
				}
				public String Concentracion_Comment(){
				
				    return "";
				
				}
				public String Concentracion_Pattern(){
				
					return "";
				
				}
				public String Concentracion_OriginalDbColumnName(){
				
					return "Concentracion_";
				
				}

				
			    public BigDecimal Generico_Id_;

				public BigDecimal getGenerico_Id_ () {
					return this.Generico_Id_;
				}

				public Boolean Generico_Id_IsNullable(){
				    return true;
				}
				public Boolean Generico_Id_IsKey(){
				    return false;
				}
				public Integer Generico_Id_Length(){
				    return null;
				}
				public Integer Generico_Id_Precision(){
				    return null;
				}
				public String Generico_Id_Default(){
				
					return null;
				
				}
				public String Generico_Id_Comment(){
				
				    return "";
				
				}
				public String Generico_Id_Pattern(){
				
					return "";
				
				}
				public String Generico_Id_OriginalDbColumnName(){
				
					return "Generico_Id_";
				
				}

				
			    public String Respuesta_;

				public String getRespuesta_ () {
					return this.Respuesta_;
				}

				public Boolean Respuesta_IsNullable(){
				    return true;
				}
				public Boolean Respuesta_IsKey(){
				    return false;
				}
				public Integer Respuesta_Length(){
				    return null;
				}
				public Integer Respuesta_Precision(){
				    return null;
				}
				public String Respuesta_Default(){
				
					return null;
				
				}
				public String Respuesta_Comment(){
				
				    return "";
				
				}
				public String Respuesta_Pattern(){
				
					return "";
				
				}
				public String Respuesta_OriginalDbColumnName(){
				
					return "Respuesta_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id_ = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.Descripcion_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
					this.Respuesta_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id_ = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.Descripcion_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
					this.Respuesta_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CatFarmacologica_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.Descripcion_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Generico_Id_);
					
					// String
				
						writeString(this.Respuesta_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CatFarmacologica_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.Descripcion_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Generico_Id_);
					
					// String
				
						writeString(this.Respuesta_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Insert="+_Insert);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",CodAtc="+CodAtc);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",CatFarmacologica="+CatFarmacologica);
		sb.append(",FormFarmaceutica="+FormFarmaceutica);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",ViaAdmin_Id_="+String.valueOf(ViaAdmin_Id_));
		sb.append(",CatFarmacologica_Id_="+String.valueOf(CatFarmacologica_Id_));
		sb.append(",Sustancia_Activa_Id_="+String.valueOf(Sustancia_Activa_Id_));
		sb.append(",Descripcion_="+Descripcion_);
		sb.append(",Concentracion_="+Concentracion_);
		sb.append(",Generico_Id_="+String.valueOf(Generico_Id_));
		sb.append(",Respuesta_="+Respuesta_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfoutViaAdminStruct implements routines.system.IPersistableRow<copyOfoutViaAdminStruct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 50;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 50;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return null;
				}
				public Integer _MessagePrecision(){
				    return null;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 350;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "";
				
				}
				public String NGenericoPattern(){
				
					return "";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 200;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "";
				
				}
				public String ConcentracionPattern(){
				
					return "";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String CodAtc;

				public String getCodAtc () {
					return this.CodAtc;
				}

				public Boolean CodAtcIsNullable(){
				    return true;
				}
				public Boolean CodAtcIsKey(){
				    return false;
				}
				public Integer CodAtcLength(){
				    return 50;
				}
				public Integer CodAtcPrecision(){
				    return 0;
				}
				public String CodAtcDefault(){
				
					return null;
				
				}
				public String CodAtcComment(){
				
				    return "";
				
				}
				public String CodAtcPattern(){
				
					return "";
				
				}
				public String CodAtcOriginalDbColumnName(){
				
					return "CodAtc";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 50;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "";
				
				}
				public String ViaAdminPattern(){
				
					return "";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String CatFarmacologica;

				public String getCatFarmacologica () {
					return this.CatFarmacologica;
				}

				public Boolean CatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologicaIsKey(){
				    return false;
				}
				public Integer CatFarmacologicaLength(){
				    return 50;
				}
				public Integer CatFarmacologicaPrecision(){
				    return 0;
				}
				public String CatFarmacologicaDefault(){
				
					return null;
				
				}
				public String CatFarmacologicaComment(){
				
				    return "";
				
				}
				public String CatFarmacologicaPattern(){
				
					return "";
				
				}
				public String CatFarmacologicaOriginalDbColumnName(){
				
					return "CatFarmacologica";
				
				}

				
			    public String FormFarmaceutica;

				public String getFormFarmaceutica () {
					return this.FormFarmaceutica;
				}

				public Boolean FormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FormFarmaceuticaLength(){
				    return 200;
				}
				public Integer FormFarmaceuticaPrecision(){
				    return 0;
				}
				public String FormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String FormFarmaceuticaPattern(){
				
					return "";
				
				}
				public String FormFarmaceuticaOriginalDbColumnName(){
				
					return "FormFarmaceutica";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public BigDecimal ViaAdmin_Id_;

				public BigDecimal getViaAdmin_Id_ () {
					return this.ViaAdmin_Id_;
				}

				public Boolean ViaAdmin_Id_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_Id_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Id_Length(){
				    return null;
				}
				public Integer ViaAdmin_Id_Precision(){
				    return null;
				}
				public String ViaAdmin_Id_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Id_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Id_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_Id_OriginalDbColumnName(){
				
					return "ViaAdmin_Id_";
				
				}

				
			    public BigDecimal CatFarmacologica_Id_;

				public BigDecimal getCatFarmacologica_Id_ () {
					return this.CatFarmacologica_Id_;
				}

				public Boolean CatFarmacologica_Id_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_Id_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Id_Length(){
				    return null;
				}
				public Integer CatFarmacologica_Id_Precision(){
				    return null;
				}
				public String CatFarmacologica_Id_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Id_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Id_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_Id_OriginalDbColumnName(){
				
					return "CatFarmacologica_Id_";
				
				}

				
			    public BigDecimal Sustancia_Activa_Id_;

				public BigDecimal getSustancia_Activa_Id_ () {
					return this.Sustancia_Activa_Id_;
				}

				public Boolean Sustancia_Activa_Id_IsNullable(){
				    return true;
				}
				public Boolean Sustancia_Activa_Id_IsKey(){
				    return false;
				}
				public Integer Sustancia_Activa_Id_Length(){
				    return null;
				}
				public Integer Sustancia_Activa_Id_Precision(){
				    return null;
				}
				public String Sustancia_Activa_Id_Default(){
				
					return null;
				
				}
				public String Sustancia_Activa_Id_Comment(){
				
				    return "";
				
				}
				public String Sustancia_Activa_Id_Pattern(){
				
					return "";
				
				}
				public String Sustancia_Activa_Id_OriginalDbColumnName(){
				
					return "Sustancia_Activa_Id_";
				
				}

				
			    public String Descripcion_;

				public String getDescripcion_ () {
					return this.Descripcion_;
				}

				public Boolean Descripcion_IsNullable(){
				    return true;
				}
				public Boolean Descripcion_IsKey(){
				    return false;
				}
				public Integer Descripcion_Length(){
				    return null;
				}
				public Integer Descripcion_Precision(){
				    return null;
				}
				public String Descripcion_Default(){
				
					return null;
				
				}
				public String Descripcion_Comment(){
				
				    return "";
				
				}
				public String Descripcion_Pattern(){
				
					return "";
				
				}
				public String Descripcion_OriginalDbColumnName(){
				
					return "Descripcion_";
				
				}

				
			    public String Concentracion_;

				public String getConcentracion_ () {
					return this.Concentracion_;
				}

				public Boolean Concentracion_IsNullable(){
				    return true;
				}
				public Boolean Concentracion_IsKey(){
				    return false;
				}
				public Integer Concentracion_Length(){
				    return null;
				}
				public Integer Concentracion_Precision(){
				    return null;
				}
				public String Concentracion_Default(){
				
					return null;
				
				}
				public String Concentracion_Comment(){
				
				    return "";
				
				}
				public String Concentracion_Pattern(){
				
					return "";
				
				}
				public String Concentracion_OriginalDbColumnName(){
				
					return "Concentracion_";
				
				}

				
			    public BigDecimal Generico_Id_;

				public BigDecimal getGenerico_Id_ () {
					return this.Generico_Id_;
				}

				public Boolean Generico_Id_IsNullable(){
				    return true;
				}
				public Boolean Generico_Id_IsKey(){
				    return false;
				}
				public Integer Generico_Id_Length(){
				    return null;
				}
				public Integer Generico_Id_Precision(){
				    return null;
				}
				public String Generico_Id_Default(){
				
					return null;
				
				}
				public String Generico_Id_Comment(){
				
				    return "";
				
				}
				public String Generico_Id_Pattern(){
				
					return "";
				
				}
				public String Generico_Id_OriginalDbColumnName(){
				
					return "Generico_Id_";
				
				}

				
			    public String Respuesta_;

				public String getRespuesta_ () {
					return this.Respuesta_;
				}

				public Boolean Respuesta_IsNullable(){
				    return true;
				}
				public Boolean Respuesta_IsKey(){
				    return false;
				}
				public Integer Respuesta_Length(){
				    return null;
				}
				public Integer Respuesta_Precision(){
				    return null;
				}
				public String Respuesta_Default(){
				
					return null;
				
				}
				public String Respuesta_Comment(){
				
				    return "";
				
				}
				public String Respuesta_Pattern(){
				
					return "";
				
				}
				public String Respuesta_OriginalDbColumnName(){
				
					return "Respuesta_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id_ = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.Descripcion_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
					this.Respuesta_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id_ = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
					this.Descripcion_ = readString(dis);
					
					this.Concentracion_ = readString(dis);
					
						this.Generico_Id_ = (BigDecimal) dis.readObject();
					
					this.Respuesta_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CatFarmacologica_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.Descripcion_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Generico_Id_);
					
					// String
				
						writeString(this.Respuesta_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CatFarmacologica_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sustancia_Activa_Id_);
					
					// String
				
						writeString(this.Descripcion_,dos);
					
					// String
				
						writeString(this.Concentracion_,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Generico_Id_);
					
					// String
				
						writeString(this.Respuesta_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Insert="+_Insert);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",CodAtc="+CodAtc);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",CatFarmacologica="+CatFarmacologica);
		sb.append(",FormFarmaceutica="+FormFarmaceutica);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",ViaAdmin_Id_="+String.valueOf(ViaAdmin_Id_));
		sb.append(",CatFarmacologica_Id_="+String.valueOf(CatFarmacologica_Id_));
		sb.append(",Sustancia_Activa_Id_="+String.valueOf(Sustancia_Activa_Id_));
		sb.append(",Descripcion_="+Descripcion_);
		sb.append(",Concentracion_="+Concentracion_);
		sb.append(",Generico_Id_="+String.valueOf(Generico_Id_));
		sb.append(",Respuesta_="+Respuesta_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfoutViaAdminStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 50;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 50;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return null;
				}
				public Integer _MessagePrecision(){
				    return null;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 350;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "";
				
				}
				public String NGenericoPattern(){
				
					return "";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 200;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "";
				
				}
				public String ConcentracionPattern(){
				
					return "";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String CodAtc;

				public String getCodAtc () {
					return this.CodAtc;
				}

				public Boolean CodAtcIsNullable(){
				    return true;
				}
				public Boolean CodAtcIsKey(){
				    return false;
				}
				public Integer CodAtcLength(){
				    return 50;
				}
				public Integer CodAtcPrecision(){
				    return 0;
				}
				public String CodAtcDefault(){
				
					return null;
				
				}
				public String CodAtcComment(){
				
				    return "";
				
				}
				public String CodAtcPattern(){
				
					return "";
				
				}
				public String CodAtcOriginalDbColumnName(){
				
					return "CodAtc";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 50;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "";
				
				}
				public String ViaAdminPattern(){
				
					return "";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String CatFarmacologica;

				public String getCatFarmacologica () {
					return this.CatFarmacologica;
				}

				public Boolean CatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologicaIsKey(){
				    return false;
				}
				public Integer CatFarmacologicaLength(){
				    return 50;
				}
				public Integer CatFarmacologicaPrecision(){
				    return 0;
				}
				public String CatFarmacologicaDefault(){
				
					return null;
				
				}
				public String CatFarmacologicaComment(){
				
				    return "";
				
				}
				public String CatFarmacologicaPattern(){
				
					return "";
				
				}
				public String CatFarmacologicaOriginalDbColumnName(){
				
					return "CatFarmacologica";
				
				}

				
			    public String FormFarmaceutica;

				public String getFormFarmaceutica () {
					return this.FormFarmaceutica;
				}

				public Boolean FormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FormFarmaceuticaLength(){
				    return 200;
				}
				public Integer FormFarmaceuticaPrecision(){
				    return 0;
				}
				public String FormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String FormFarmaceuticaPattern(){
				
					return "";
				
				}
				public String FormFarmaceuticaOriginalDbColumnName(){
				
					return "FormFarmaceutica";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public Integer Cantidad;

				public Integer getCantidad () {
					return this.Cantidad;
				}

				public Boolean CantidadIsNullable(){
				    return true;
				}
				public Boolean CantidadIsKey(){
				    return false;
				}
				public Integer CantidadLength(){
				    return null;
				}
				public Integer CantidadPrecision(){
				    return null;
				}
				public String CantidadDefault(){
				
					return null;
				
				}
				public String CantidadComment(){
				
				    return "";
				
				}
				public String CantidadPattern(){
				
					return "";
				
				}
				public String CantidadOriginalDbColumnName(){
				
					return "Cantidad";
				
				}

				
			    public BigDecimal ViaAdmin_Id_;

				public BigDecimal getViaAdmin_Id_ () {
					return this.ViaAdmin_Id_;
				}

				public Boolean ViaAdmin_Id_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_Id_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Id_Length(){
				    return null;
				}
				public Integer ViaAdmin_Id_Precision(){
				    return null;
				}
				public String ViaAdmin_Id_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Id_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Id_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_Id_OriginalDbColumnName(){
				
					return "ViaAdmin_Id_";
				
				}

				
			    public BigDecimal CatFarmacologica_Id_;

				public BigDecimal getCatFarmacologica_Id_ () {
					return this.CatFarmacologica_Id_;
				}

				public Boolean CatFarmacologica_Id_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_Id_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Id_Length(){
				    return null;
				}
				public Integer CatFarmacologica_Id_Precision(){
				    return null;
				}
				public String CatFarmacologica_Id_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Id_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Id_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_Id_OriginalDbColumnName(){
				
					return "CatFarmacologica_Id_";
				
				}

				
			    public BigDecimal Sustancia_Activa_Id_;

				public BigDecimal getSustancia_Activa_Id_ () {
					return this.Sustancia_Activa_Id_;
				}

				public Boolean Sustancia_Activa_Id_IsNullable(){
				    return true;
				}
				public Boolean Sustancia_Activa_Id_IsKey(){
				    return false;
				}
				public Integer Sustancia_Activa_Id_Length(){
				    return null;
				}
				public Integer Sustancia_Activa_Id_Precision(){
				    return null;
				}
				public String Sustancia_Activa_Id_Default(){
				
					return null;
				
				}
				public String Sustancia_Activa_Id_Comment(){
				
				    return "";
				
				}
				public String Sustancia_Activa_Id_Pattern(){
				
					return "";
				
				}
				public String Sustancia_Activa_Id_OriginalDbColumnName(){
				
					return "Sustancia_Activa_Id_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.Cantidad = readInteger(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id_ = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.Cantidad = readInteger(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id_ = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// Integer
				
						writeInteger(this.Cantidad,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CatFarmacologica_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sustancia_Activa_Id_);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// Integer
				
						writeInteger(this.Cantidad,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CatFarmacologica_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sustancia_Activa_Id_);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Insert="+_Insert);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",CodAtc="+CodAtc);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",CatFarmacologica="+CatFarmacologica);
		sb.append(",FormFarmaceutica="+FormFarmaceutica);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",Cantidad="+String.valueOf(Cantidad));
		sb.append(",ViaAdmin_Id_="+String.valueOf(ViaAdmin_Id_));
		sb.append(",CatFarmacologica_Id_="+String.valueOf(CatFarmacologica_Id_));
		sb.append(",Sustancia_Activa_Id_="+String.valueOf(Sustancia_Activa_Id_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row38Struct implements routines.system.IPersistableRow<row38Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 50;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 50;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return null;
				}
				public Integer _MessagePrecision(){
				    return null;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 350;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "";
				
				}
				public String NGenericoPattern(){
				
					return "";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 200;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "";
				
				}
				public String ConcentracionPattern(){
				
					return "";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String CodAtc;

				public String getCodAtc () {
					return this.CodAtc;
				}

				public Boolean CodAtcIsNullable(){
				    return true;
				}
				public Boolean CodAtcIsKey(){
				    return false;
				}
				public Integer CodAtcLength(){
				    return 50;
				}
				public Integer CodAtcPrecision(){
				    return 0;
				}
				public String CodAtcDefault(){
				
					return null;
				
				}
				public String CodAtcComment(){
				
				    return "";
				
				}
				public String CodAtcPattern(){
				
					return "";
				
				}
				public String CodAtcOriginalDbColumnName(){
				
					return "CodAtc";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 50;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "";
				
				}
				public String ViaAdminPattern(){
				
					return "";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String CatFarmacologica;

				public String getCatFarmacologica () {
					return this.CatFarmacologica;
				}

				public Boolean CatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologicaIsKey(){
				    return false;
				}
				public Integer CatFarmacologicaLength(){
				    return 50;
				}
				public Integer CatFarmacologicaPrecision(){
				    return 0;
				}
				public String CatFarmacologicaDefault(){
				
					return null;
				
				}
				public String CatFarmacologicaComment(){
				
				    return "";
				
				}
				public String CatFarmacologicaPattern(){
				
					return "";
				
				}
				public String CatFarmacologicaOriginalDbColumnName(){
				
					return "CatFarmacologica";
				
				}

				
			    public String FormFarmaceutica;

				public String getFormFarmaceutica () {
					return this.FormFarmaceutica;
				}

				public Boolean FormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FormFarmaceuticaLength(){
				    return 200;
				}
				public Integer FormFarmaceuticaPrecision(){
				    return 0;
				}
				public String FormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String FormFarmaceuticaPattern(){
				
					return "";
				
				}
				public String FormFarmaceuticaOriginalDbColumnName(){
				
					return "FormFarmaceutica";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public Integer Cantidad;

				public Integer getCantidad () {
					return this.Cantidad;
				}

				public Boolean CantidadIsNullable(){
				    return true;
				}
				public Boolean CantidadIsKey(){
				    return false;
				}
				public Integer CantidadLength(){
				    return null;
				}
				public Integer CantidadPrecision(){
				    return null;
				}
				public String CantidadDefault(){
				
					return null;
				
				}
				public String CantidadComment(){
				
				    return "";
				
				}
				public String CantidadPattern(){
				
					return "";
				
				}
				public String CantidadOriginalDbColumnName(){
				
					return "Cantidad";
				
				}

				
			    public BigDecimal ViaAdmin_Id_;

				public BigDecimal getViaAdmin_Id_ () {
					return this.ViaAdmin_Id_;
				}

				public Boolean ViaAdmin_Id_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_Id_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Id_Length(){
				    return null;
				}
				public Integer ViaAdmin_Id_Precision(){
				    return null;
				}
				public String ViaAdmin_Id_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Id_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Id_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_Id_OriginalDbColumnName(){
				
					return "ViaAdmin_Id_";
				
				}

				
			    public BigDecimal CatFarmacologica_Id_;

				public BigDecimal getCatFarmacologica_Id_ () {
					return this.CatFarmacologica_Id_;
				}

				public Boolean CatFarmacologica_Id_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_Id_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Id_Length(){
				    return null;
				}
				public Integer CatFarmacologica_Id_Precision(){
				    return null;
				}
				public String CatFarmacologica_Id_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Id_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Id_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_Id_OriginalDbColumnName(){
				
					return "CatFarmacologica_Id_";
				
				}

				
			    public BigDecimal Sustancia_Activa_Id_;

				public BigDecimal getSustancia_Activa_Id_ () {
					return this.Sustancia_Activa_Id_;
				}

				public Boolean Sustancia_Activa_Id_IsNullable(){
				    return true;
				}
				public Boolean Sustancia_Activa_Id_IsKey(){
				    return false;
				}
				public Integer Sustancia_Activa_Id_Length(){
				    return null;
				}
				public Integer Sustancia_Activa_Id_Precision(){
				    return null;
				}
				public String Sustancia_Activa_Id_Default(){
				
					return null;
				
				}
				public String Sustancia_Activa_Id_Comment(){
				
				    return "";
				
				}
				public String Sustancia_Activa_Id_Pattern(){
				
					return "";
				
				}
				public String Sustancia_Activa_Id_OriginalDbColumnName(){
				
					return "Sustancia_Activa_Id_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.Cantidad = readInteger(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id_ = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.Cantidad = readInteger(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id_ = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// Integer
				
						writeInteger(this.Cantidad,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CatFarmacologica_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sustancia_Activa_Id_);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// Integer
				
						writeInteger(this.Cantidad,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CatFarmacologica_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sustancia_Activa_Id_);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Insert="+_Insert);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",CodAtc="+CodAtc);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",CatFarmacologica="+CatFarmacologica);
		sb.append(",FormFarmaceutica="+FormFarmaceutica);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",Cantidad="+String.valueOf(Cantidad));
		sb.append(",ViaAdmin_Id_="+String.valueOf(ViaAdmin_Id_));
		sb.append(",CatFarmacologica_Id_="+String.valueOf(CatFarmacologica_Id_));
		sb.append(",Sustancia_Activa_Id_="+String.valueOf(Sustancia_Activa_Id_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row38Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row37Struct implements routines.system.IPersistableRow<row37Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 50;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 50;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return null;
				}
				public Integer _MessagePrecision(){
				    return null;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 350;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "";
				
				}
				public String NGenericoPattern(){
				
					return "";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 200;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "";
				
				}
				public String ConcentracionPattern(){
				
					return "";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String CodAtc;

				public String getCodAtc () {
					return this.CodAtc;
				}

				public Boolean CodAtcIsNullable(){
				    return true;
				}
				public Boolean CodAtcIsKey(){
				    return false;
				}
				public Integer CodAtcLength(){
				    return 50;
				}
				public Integer CodAtcPrecision(){
				    return 0;
				}
				public String CodAtcDefault(){
				
					return null;
				
				}
				public String CodAtcComment(){
				
				    return "";
				
				}
				public String CodAtcPattern(){
				
					return "";
				
				}
				public String CodAtcOriginalDbColumnName(){
				
					return "CodAtc";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 50;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "";
				
				}
				public String ViaAdminPattern(){
				
					return "";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String CatFarmacologica;

				public String getCatFarmacologica () {
					return this.CatFarmacologica;
				}

				public Boolean CatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologicaIsKey(){
				    return false;
				}
				public Integer CatFarmacologicaLength(){
				    return 50;
				}
				public Integer CatFarmacologicaPrecision(){
				    return 0;
				}
				public String CatFarmacologicaDefault(){
				
					return null;
				
				}
				public String CatFarmacologicaComment(){
				
				    return "";
				
				}
				public String CatFarmacologicaPattern(){
				
					return "";
				
				}
				public String CatFarmacologicaOriginalDbColumnName(){
				
					return "CatFarmacologica";
				
				}

				
			    public String FormFarmaceutica;

				public String getFormFarmaceutica () {
					return this.FormFarmaceutica;
				}

				public Boolean FormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FormFarmaceuticaLength(){
				    return 200;
				}
				public Integer FormFarmaceuticaPrecision(){
				    return 0;
				}
				public String FormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String FormFarmaceuticaPattern(){
				
					return "";
				
				}
				public String FormFarmaceuticaOriginalDbColumnName(){
				
					return "FormFarmaceutica";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public BigDecimal ViaAdmin_Id_;

				public BigDecimal getViaAdmin_Id_ () {
					return this.ViaAdmin_Id_;
				}

				public Boolean ViaAdmin_Id_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_Id_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Id_Length(){
				    return null;
				}
				public Integer ViaAdmin_Id_Precision(){
				    return null;
				}
				public String ViaAdmin_Id_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Id_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Id_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_Id_OriginalDbColumnName(){
				
					return "ViaAdmin_Id_";
				
				}

				
			    public BigDecimal CatFarmacologica_Id_;

				public BigDecimal getCatFarmacologica_Id_ () {
					return this.CatFarmacologica_Id_;
				}

				public Boolean CatFarmacologica_Id_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_Id_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Id_Length(){
				    return null;
				}
				public Integer CatFarmacologica_Id_Precision(){
				    return null;
				}
				public String CatFarmacologica_Id_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Id_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Id_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_Id_OriginalDbColumnName(){
				
					return "CatFarmacologica_Id_";
				
				}

				
			    public BigDecimal Sustancia_Activa_Id_;

				public BigDecimal getSustancia_Activa_Id_ () {
					return this.Sustancia_Activa_Id_;
				}

				public Boolean Sustancia_Activa_Id_IsNullable(){
				    return true;
				}
				public Boolean Sustancia_Activa_Id_IsKey(){
				    return false;
				}
				public Integer Sustancia_Activa_Id_Length(){
				    return null;
				}
				public Integer Sustancia_Activa_Id_Precision(){
				    return null;
				}
				public String Sustancia_Activa_Id_Default(){
				
					return null;
				
				}
				public String Sustancia_Activa_Id_Comment(){
				
				    return "";
				
				}
				public String Sustancia_Activa_Id_Pattern(){
				
					return "";
				
				}
				public String Sustancia_Activa_Id_OriginalDbColumnName(){
				
					return "Sustancia_Activa_Id_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id_ = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id_ = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CatFarmacologica_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sustancia_Activa_Id_);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CatFarmacologica_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sustancia_Activa_Id_);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Insert="+_Insert);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",CodAtc="+CodAtc);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",CatFarmacologica="+CatFarmacologica);
		sb.append(",FormFarmaceutica="+FormFarmaceutica);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",ViaAdmin_Id_="+String.valueOf(ViaAdmin_Id_));
		sb.append(",CatFarmacologica_Id_="+String.valueOf(CatFarmacologica_Id_));
		sb.append(",Sustancia_Activa_Id_="+String.valueOf(Sustancia_Activa_Id_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row37Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 50;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 50;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return null;
				}
				public Integer _MessagePrecision(){
				    return null;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 350;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "";
				
				}
				public String NGenericoPattern(){
				
					return "";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 200;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "";
				
				}
				public String ConcentracionPattern(){
				
					return "";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String CodAtc;

				public String getCodAtc () {
					return this.CodAtc;
				}

				public Boolean CodAtcIsNullable(){
				    return true;
				}
				public Boolean CodAtcIsKey(){
				    return false;
				}
				public Integer CodAtcLength(){
				    return 50;
				}
				public Integer CodAtcPrecision(){
				    return 0;
				}
				public String CodAtcDefault(){
				
					return null;
				
				}
				public String CodAtcComment(){
				
				    return "";
				
				}
				public String CodAtcPattern(){
				
					return "";
				
				}
				public String CodAtcOriginalDbColumnName(){
				
					return "CodAtc";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 50;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "";
				
				}
				public String ViaAdminPattern(){
				
					return "";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String CatFarmacologica;

				public String getCatFarmacologica () {
					return this.CatFarmacologica;
				}

				public Boolean CatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologicaIsKey(){
				    return false;
				}
				public Integer CatFarmacologicaLength(){
				    return 50;
				}
				public Integer CatFarmacologicaPrecision(){
				    return 0;
				}
				public String CatFarmacologicaDefault(){
				
					return null;
				
				}
				public String CatFarmacologicaComment(){
				
				    return "";
				
				}
				public String CatFarmacologicaPattern(){
				
					return "";
				
				}
				public String CatFarmacologicaOriginalDbColumnName(){
				
					return "CatFarmacologica";
				
				}

				
			    public String FormFarmaceutica;

				public String getFormFarmaceutica () {
					return this.FormFarmaceutica;
				}

				public Boolean FormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FormFarmaceuticaLength(){
				    return 200;
				}
				public Integer FormFarmaceuticaPrecision(){
				    return 0;
				}
				public String FormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String FormFarmaceuticaPattern(){
				
					return "";
				
				}
				public String FormFarmaceuticaOriginalDbColumnName(){
				
					return "FormFarmaceutica";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public BigDecimal ViaAdmin_Id_;

				public BigDecimal getViaAdmin_Id_ () {
					return this.ViaAdmin_Id_;
				}

				public Boolean ViaAdmin_Id_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_Id_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Id_Length(){
				    return null;
				}
				public Integer ViaAdmin_Id_Precision(){
				    return null;
				}
				public String ViaAdmin_Id_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Id_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Id_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_Id_OriginalDbColumnName(){
				
					return "ViaAdmin_Id_";
				
				}

				
			    public BigDecimal CatFarmacologica_Id_;

				public BigDecimal getCatFarmacologica_Id_ () {
					return this.CatFarmacologica_Id_;
				}

				public Boolean CatFarmacologica_Id_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_Id_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Id_Length(){
				    return null;
				}
				public Integer CatFarmacologica_Id_Precision(){
				    return null;
				}
				public String CatFarmacologica_Id_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Id_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Id_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_Id_OriginalDbColumnName(){
				
					return "CatFarmacologica_Id_";
				
				}

				
			    public BigDecimal Sustancia_Activa_Id_;

				public BigDecimal getSustancia_Activa_Id_ () {
					return this.Sustancia_Activa_Id_;
				}

				public Boolean Sustancia_Activa_Id_IsNullable(){
				    return true;
				}
				public Boolean Sustancia_Activa_Id_IsKey(){
				    return false;
				}
				public Integer Sustancia_Activa_Id_Length(){
				    return null;
				}
				public Integer Sustancia_Activa_Id_Precision(){
				    return null;
				}
				public String Sustancia_Activa_Id_Default(){
				
					return null;
				
				}
				public String Sustancia_Activa_Id_Comment(){
				
				    return "";
				
				}
				public String Sustancia_Activa_Id_Pattern(){
				
					return "";
				
				}
				public String Sustancia_Activa_Id_OriginalDbColumnName(){
				
					return "Sustancia_Activa_Id_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id_ = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Insert = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id_ = (BigDecimal) dis.readObject();
					
						this.Sustancia_Activa_Id_ = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CatFarmacologica_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Sustancia_Activa_Id_);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CatFarmacologica_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Sustancia_Activa_Id_);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Insert="+_Insert);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",CodAtc="+CodAtc);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",CatFarmacologica="+CatFarmacologica);
		sb.append(",FormFarmaceutica="+FormFarmaceutica);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",ViaAdmin_Id_="+String.valueOf(ViaAdmin_Id_));
		sb.append(",CatFarmacologica_Id_="+String.valueOf(CatFarmacologica_Id_));
		sb.append(",Sustancia_Activa_Id_="+String.valueOf(Sustancia_Activa_Id_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 50;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 50;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return null;
				}
				public Integer _MessagePrecision(){
				    return null;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 350;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "";
				
				}
				public String NGenericoPattern(){
				
					return "";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 200;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "";
				
				}
				public String ConcentracionPattern(){
				
					return "";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String CodAtc;

				public String getCodAtc () {
					return this.CodAtc;
				}

				public Boolean CodAtcIsNullable(){
				    return true;
				}
				public Boolean CodAtcIsKey(){
				    return false;
				}
				public Integer CodAtcLength(){
				    return 50;
				}
				public Integer CodAtcPrecision(){
				    return 0;
				}
				public String CodAtcDefault(){
				
					return null;
				
				}
				public String CodAtcComment(){
				
				    return "";
				
				}
				public String CodAtcPattern(){
				
					return "";
				
				}
				public String CodAtcOriginalDbColumnName(){
				
					return "CodAtc";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 50;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "";
				
				}
				public String ViaAdminPattern(){
				
					return "";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String CatFarmacologica;

				public String getCatFarmacologica () {
					return this.CatFarmacologica;
				}

				public Boolean CatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologicaIsKey(){
				    return false;
				}
				public Integer CatFarmacologicaLength(){
				    return 50;
				}
				public Integer CatFarmacologicaPrecision(){
				    return 0;
				}
				public String CatFarmacologicaDefault(){
				
					return null;
				
				}
				public String CatFarmacologicaComment(){
				
				    return "";
				
				}
				public String CatFarmacologicaPattern(){
				
					return "";
				
				}
				public String CatFarmacologicaOriginalDbColumnName(){
				
					return "CatFarmacologica";
				
				}

				
			    public String FormFarmaceutica;

				public String getFormFarmaceutica () {
					return this.FormFarmaceutica;
				}

				public Boolean FormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FormFarmaceuticaLength(){
				    return 200;
				}
				public Integer FormFarmaceuticaPrecision(){
				    return 0;
				}
				public String FormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String FormFarmaceuticaPattern(){
				
					return "";
				
				}
				public String FormFarmaceuticaOriginalDbColumnName(){
				
					return "FormFarmaceutica";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				
			    public BigDecimal ViaAdmin_Id_;

				public BigDecimal getViaAdmin_Id_ () {
					return this.ViaAdmin_Id_;
				}

				public Boolean ViaAdmin_Id_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_Id_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Id_Length(){
				    return null;
				}
				public Integer ViaAdmin_Id_Precision(){
				    return null;
				}
				public String ViaAdmin_Id_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Id_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Id_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_Id_OriginalDbColumnName(){
				
					return "ViaAdmin_Id_";
				
				}

				
			    public BigDecimal CatFarmacologica_Id_;

				public BigDecimal getCatFarmacologica_Id_ () {
					return this.CatFarmacologica_Id_;
				}

				public Boolean CatFarmacologica_Id_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_Id_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Id_Length(){
				    return null;
				}
				public Integer CatFarmacologica_Id_Precision(){
				    return null;
				}
				public String CatFarmacologica_Id_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Id_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Id_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_Id_OriginalDbColumnName(){
				
					return "CatFarmacologica_Id_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
					this._Insert = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id_ = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
					this._Insert = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id_ = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CatFarmacologica_Id_);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CatFarmacologica_Id_);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",CodAtc="+CodAtc);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",CatFarmacologica="+CatFarmacologica);
		sb.append(",FormFarmaceutica="+FormFarmaceutica);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",_Insert="+_Insert);
		sb.append(",ViaAdmin_Id_="+String.valueOf(ViaAdmin_Id_));
		sb.append(",CatFarmacologica_Id_="+String.valueOf(CatFarmacologica_Id_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class outViaAdminStruct implements routines.system.IPersistableRow<outViaAdminStruct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 50;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 50;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return 150;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return 0;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return null;
				}
				public Integer Estado_Precision(){
				    return null;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return null;
				}
				public Integer _MessagePrecision(){
				    return null;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 350;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "";
				
				}
				public String NGenericoPattern(){
				
					return "";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 200;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "";
				
				}
				public String ConcentracionPattern(){
				
					return "";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String CodAtc;

				public String getCodAtc () {
					return this.CodAtc;
				}

				public Boolean CodAtcIsNullable(){
				    return true;
				}
				public Boolean CodAtcIsKey(){
				    return false;
				}
				public Integer CodAtcLength(){
				    return 50;
				}
				public Integer CodAtcPrecision(){
				    return 0;
				}
				public String CodAtcDefault(){
				
					return null;
				
				}
				public String CodAtcComment(){
				
				    return "";
				
				}
				public String CodAtcPattern(){
				
					return "";
				
				}
				public String CodAtcOriginalDbColumnName(){
				
					return "CodAtc";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 50;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "";
				
				}
				public String ViaAdminPattern(){
				
					return "";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String CatFarmacologica;

				public String getCatFarmacologica () {
					return this.CatFarmacologica;
				}

				public Boolean CatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologicaIsKey(){
				    return false;
				}
				public Integer CatFarmacologicaLength(){
				    return 50;
				}
				public Integer CatFarmacologicaPrecision(){
				    return 0;
				}
				public String CatFarmacologicaDefault(){
				
					return null;
				
				}
				public String CatFarmacologicaComment(){
				
				    return "";
				
				}
				public String CatFarmacologicaPattern(){
				
					return "";
				
				}
				public String CatFarmacologicaOriginalDbColumnName(){
				
					return "CatFarmacologica";
				
				}

				
			    public String FormFarmaceutica;

				public String getFormFarmaceutica () {
					return this.FormFarmaceutica;
				}

				public Boolean FormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FormFarmaceuticaLength(){
				    return 200;
				}
				public Integer FormFarmaceuticaPrecision(){
				    return 0;
				}
				public String FormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String FormFarmaceuticaPattern(){
				
					return "";
				
				}
				public String FormFarmaceuticaOriginalDbColumnName(){
				
					return "FormFarmaceutica";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return 150;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return 0;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				
			    public BigDecimal ViaAdmin_Id_;

				public BigDecimal getViaAdmin_Id_ () {
					return this.ViaAdmin_Id_;
				}

				public Boolean ViaAdmin_Id_IsNullable(){
				    return true;
				}
				public Boolean ViaAdmin_Id_IsKey(){
				    return false;
				}
				public Integer ViaAdmin_Id_Length(){
				    return null;
				}
				public Integer ViaAdmin_Id_Precision(){
				    return null;
				}
				public String ViaAdmin_Id_Default(){
				
					return null;
				
				}
				public String ViaAdmin_Id_Comment(){
				
				    return "";
				
				}
				public String ViaAdmin_Id_Pattern(){
				
					return "";
				
				}
				public String ViaAdmin_Id_OriginalDbColumnName(){
				
					return "ViaAdmin_Id_";
				
				}

				
			    public BigDecimal CatFarmacologica_Id_;

				public BigDecimal getCatFarmacologica_Id_ () {
					return this.CatFarmacologica_Id_;
				}

				public Boolean CatFarmacologica_Id_IsNullable(){
				    return true;
				}
				public Boolean CatFarmacologica_Id_IsKey(){
				    return false;
				}
				public Integer CatFarmacologica_Id_Length(){
				    return null;
				}
				public Integer CatFarmacologica_Id_Precision(){
				    return null;
				}
				public String CatFarmacologica_Id_Default(){
				
					return null;
				
				}
				public String CatFarmacologica_Id_Comment(){
				
				    return "";
				
				}
				public String CatFarmacologica_Id_Pattern(){
				
					return "";
				
				}
				public String CatFarmacologica_Id_OriginalDbColumnName(){
				
					return "CatFarmacologica_Id_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
					this._Insert = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id_ = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
					this._Insert = readString(dis);
					
						this.ViaAdmin_Id_ = (BigDecimal) dis.readObject();
					
						this.CatFarmacologica_Id_ = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CatFarmacologica_Id_);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ViaAdmin_Id_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CatFarmacologica_Id_);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",CodAtc="+CodAtc);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",CatFarmacologica="+CatFarmacologica);
		sb.append(",FormFarmaceutica="+FormFarmaceutica);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",_Insert="+_Insert);
		sb.append(",ViaAdmin_Id_="+String.valueOf(ViaAdmin_Id_));
		sb.append(",CatFarmacologica_Id_="+String.valueOf(CatFarmacologica_Id_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outViaAdminStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 200;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 200;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 200;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return null;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return null;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return 50;
				}
				public Integer Estado_Precision(){
				    return 0;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return 200;
				}
				public Integer _MessagePrecision(){
				    return 0;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 350;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "";
				
				}
				public String NGenericoPattern(){
				
					return "";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 200;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "";
				
				}
				public String ConcentracionPattern(){
				
					return "";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String CodAtc;

				public String getCodAtc () {
					return this.CodAtc;
				}

				public Boolean CodAtcIsNullable(){
				    return true;
				}
				public Boolean CodAtcIsKey(){
				    return false;
				}
				public Integer CodAtcLength(){
				    return 50;
				}
				public Integer CodAtcPrecision(){
				    return 0;
				}
				public String CodAtcDefault(){
				
					return null;
				
				}
				public String CodAtcComment(){
				
				    return "";
				
				}
				public String CodAtcPattern(){
				
					return "";
				
				}
				public String CodAtcOriginalDbColumnName(){
				
					return "CodAtc";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 200;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "";
				
				}
				public String ViaAdminPattern(){
				
					return "";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String CatFarmacologica;

				public String getCatFarmacologica () {
					return this.CatFarmacologica;
				}

				public Boolean CatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologicaIsKey(){
				    return false;
				}
				public Integer CatFarmacologicaLength(){
				    return 200;
				}
				public Integer CatFarmacologicaPrecision(){
				    return 0;
				}
				public String CatFarmacologicaDefault(){
				
					return null;
				
				}
				public String CatFarmacologicaComment(){
				
				    return "";
				
				}
				public String CatFarmacologicaPattern(){
				
					return "";
				
				}
				public String CatFarmacologicaOriginalDbColumnName(){
				
					return "CatFarmacologica";
				
				}

				
			    public String FormFarmaceutica;

				public String getFormFarmaceutica () {
					return this.FormFarmaceutica;
				}

				public Boolean FormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FormFarmaceuticaLength(){
				    return 200;
				}
				public Integer FormFarmaceuticaPrecision(){
				    return 0;
				}
				public String FormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String FormFarmaceuticaPattern(){
				
					return "";
				
				}
				public String FormFarmaceuticaOriginalDbColumnName(){
				
					return "FormFarmaceutica";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return null;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return null;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
					this._Insert = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
					this._Insert = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",CodAtc="+CodAtc);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",CatFarmacologica="+CatFarmacologica);
		sb.append(",FormFarmaceutica="+FormFarmaceutica);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",_Insert="+_Insert);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row42Struct implements routines.system.IPersistableRow<row42Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 500;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 200;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 200;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return null;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return null;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return 50;
				}
				public Integer Estado_Precision(){
				    return 0;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return 200;
				}
				public Integer _MessagePrecision(){
				    return 0;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 350;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "";
				
				}
				public String NGenericoPattern(){
				
					return "";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 500;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "";
				
				}
				public String ConcentracionPattern(){
				
					return "";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String CodAtc;

				public String getCodAtc () {
					return this.CodAtc;
				}

				public Boolean CodAtcIsNullable(){
				    return true;
				}
				public Boolean CodAtcIsKey(){
				    return false;
				}
				public Integer CodAtcLength(){
				    return 50;
				}
				public Integer CodAtcPrecision(){
				    return 0;
				}
				public String CodAtcDefault(){
				
					return null;
				
				}
				public String CodAtcComment(){
				
				    return "";
				
				}
				public String CodAtcPattern(){
				
					return "";
				
				}
				public String CodAtcOriginalDbColumnName(){
				
					return "CodAtc";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 200;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "";
				
				}
				public String ViaAdminPattern(){
				
					return "";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String CatFarmacologica;

				public String getCatFarmacologica () {
					return this.CatFarmacologica;
				}

				public Boolean CatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologicaIsKey(){
				    return false;
				}
				public Integer CatFarmacologicaLength(){
				    return 200;
				}
				public Integer CatFarmacologicaPrecision(){
				    return 0;
				}
				public String CatFarmacologicaDefault(){
				
					return null;
				
				}
				public String CatFarmacologicaComment(){
				
				    return "";
				
				}
				public String CatFarmacologicaPattern(){
				
					return "";
				
				}
				public String CatFarmacologicaOriginalDbColumnName(){
				
					return "CatFarmacologica";
				
				}

				
			    public String FormFarmaceutica;

				public String getFormFarmaceutica () {
					return this.FormFarmaceutica;
				}

				public Boolean FormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FormFarmaceuticaLength(){
				    return 200;
				}
				public Integer FormFarmaceuticaPrecision(){
				    return 0;
				}
				public String FormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String FormFarmaceuticaPattern(){
				
					return "";
				
				}
				public String FormFarmaceuticaOriginalDbColumnName(){
				
					return "FormFarmaceutica";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return null;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return null;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
					this._Insert = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
					this._Insert = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",CodAtc="+CodAtc);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",CatFarmacologica="+CatFarmacologica);
		sb.append(",FormFarmaceutica="+FormFarmaceutica);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",_Insert="+_Insert);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row42Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_6Struct implements routines.system.IPersistableRow<after_tOracleInput_6Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String upNGenerico;

				public String getUpNGenerico () {
					return this.upNGenerico;
				}

				public Boolean upNGenericoIsNullable(){
				    return true;
				}
				public Boolean upNGenericoIsKey(){
				    return false;
				}
				public Integer upNGenericoLength(){
				    return 350;
				}
				public Integer upNGenericoPrecision(){
				    return 0;
				}
				public String upNGenericoDefault(){
				
					return null;
				
				}
				public String upNGenericoComment(){
				
				    return "";
				
				}
				public String upNGenericoPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upNGenericoOriginalDbColumnName(){
				
					return "upNGenerico";
				
				}

				
			    public String upConcentracion;

				public String getUpConcentracion () {
					return this.upConcentracion;
				}

				public Boolean upConcentracionIsNullable(){
				    return true;
				}
				public Boolean upConcentracionIsKey(){
				    return false;
				}
				public Integer upConcentracionLength(){
				    return 500;
				}
				public Integer upConcentracionPrecision(){
				    return 0;
				}
				public String upConcentracionDefault(){
				
					return null;
				
				}
				public String upConcentracionComment(){
				
				    return "";
				
				}
				public String upConcentracionPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upConcentracionOriginalDbColumnName(){
				
					return "upConcentracion";
				
				}

				
			    public String upCodAtc;

				public String getUpCodAtc () {
					return this.upCodAtc;
				}

				public Boolean upCodAtcIsNullable(){
				    return true;
				}
				public Boolean upCodAtcIsKey(){
				    return false;
				}
				public Integer upCodAtcLength(){
				    return 50;
				}
				public Integer upCodAtcPrecision(){
				    return 0;
				}
				public String upCodAtcDefault(){
				
					return null;
				
				}
				public String upCodAtcComment(){
				
				    return "";
				
				}
				public String upCodAtcPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCodAtcOriginalDbColumnName(){
				
					return "upCodAtc";
				
				}

				
			    public String upViaAdmin;

				public String getUpViaAdmin () {
					return this.upViaAdmin;
				}

				public Boolean upViaAdminIsNullable(){
				    return true;
				}
				public Boolean upViaAdminIsKey(){
				    return false;
				}
				public Integer upViaAdminLength(){
				    return 200;
				}
				public Integer upViaAdminPrecision(){
				    return 0;
				}
				public String upViaAdminDefault(){
				
					return null;
				
				}
				public String upViaAdminComment(){
				
				    return "";
				
				}
				public String upViaAdminPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upViaAdminOriginalDbColumnName(){
				
					return "upViaAdmin";
				
				}

				
			    public String upCatFarmacologica;

				public String getUpCatFarmacologica () {
					return this.upCatFarmacologica;
				}

				public Boolean upCatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean upCatFarmacologicaIsKey(){
				    return false;
				}
				public Integer upCatFarmacologicaLength(){
				    return 200;
				}
				public Integer upCatFarmacologicaPrecision(){
				    return 0;
				}
				public String upCatFarmacologicaDefault(){
				
					return null;
				
				}
				public String upCatFarmacologicaComment(){
				
				    return "";
				
				}
				public String upCatFarmacologicaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upCatFarmacologicaOriginalDbColumnName(){
				
					return "upCatFarmacologica";
				
				}

				
			    public String upFormFarmaceutica;

				public String getUpFormFarmaceutica () {
					return this.upFormFarmaceutica;
				}

				public Boolean upFormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean upFormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer upFormFarmaceuticaLength(){
				    return 200;
				}
				public Integer upFormFarmaceuticaPrecision(){
				    return 0;
				}
				public String upFormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String upFormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String upFormFarmaceuticaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String upFormFarmaceuticaOriginalDbColumnName(){
				
					return "upFormFarmaceutica";
				
				}

				
			    public String upIdentificadorUnico;

				public String getUpIdentificadorUnico () {
					return this.upIdentificadorUnico;
				}

				public Boolean upIdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean upIdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer upIdentificadorUnicoLength(){
				    return null;
				}
				public Integer upIdentificadorUnicoPrecision(){
				    return null;
				}
				public String upIdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String upIdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String upIdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String upIdentificadorUnicoOriginalDbColumnName(){
				
					return "upIdentificadorUnico";
				
				}

				
			    public String upSustanciaActiva;

				public String getUpSustanciaActiva () {
					return this.upSustanciaActiva;
				}

				public Boolean upSustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean upSustanciaActivaIsKey(){
				    return false;
				}
				public Integer upSustanciaActivaLength(){
				    return 500;
				}
				public Integer upSustanciaActivaPrecision(){
				    return 0;
				}
				public String upSustanciaActivaDefault(){
				
					return null;
				
				}
				public String upSustanciaActivaComment(){
				
				    return "";
				
				}
				public String upSustanciaActivaPattern(){
				
					return "";
				
				}
				public String upSustanciaActivaOriginalDbColumnName(){
				
					return "upSustanciaActiva";
				
				}

				
			    public String Estado_;

				public String getEstado_ () {
					return this.Estado_;
				}

				public Boolean Estado_IsNullable(){
				    return true;
				}
				public Boolean Estado_IsKey(){
				    return false;
				}
				public Integer Estado_Length(){
				    return 50;
				}
				public Integer Estado_Precision(){
				    return 0;
				}
				public String Estado_Default(){
				
					return null;
				
				}
				public String Estado_Comment(){
				
				    return "";
				
				}
				public String Estado_Pattern(){
				
					return "";
				
				}
				public String Estado_OriginalDbColumnName(){
				
					return "Estado_";
				
				}

				
			    public String _Message;

				public String get_Message () {
					return this._Message;
				}

				public Boolean _MessageIsNullable(){
				    return true;
				}
				public Boolean _MessageIsKey(){
				    return false;
				}
				public Integer _MessageLength(){
				    return 200;
				}
				public Integer _MessagePrecision(){
				    return 0;
				}
				public String _MessageDefault(){
				
					return null;
				
				}
				public String _MessageComment(){
				
				    return "";
				
				}
				public String _MessagePattern(){
				
					return "";
				
				}
				public String _MessageOriginalDbColumnName(){
				
					return "_Message";
				
				}

				
			    public String NGenerico;

				public String getNGenerico () {
					return this.NGenerico;
				}

				public Boolean NGenericoIsNullable(){
				    return true;
				}
				public Boolean NGenericoIsKey(){
				    return false;
				}
				public Integer NGenericoLength(){
				    return 350;
				}
				public Integer NGenericoPrecision(){
				    return 0;
				}
				public String NGenericoDefault(){
				
					return null;
				
				}
				public String NGenericoComment(){
				
				    return "";
				
				}
				public String NGenericoPattern(){
				
					return "";
				
				}
				public String NGenericoOriginalDbColumnName(){
				
					return "NGenerico";
				
				}

				
			    public String Concentracion;

				public String getConcentracion () {
					return this.Concentracion;
				}

				public Boolean ConcentracionIsNullable(){
				    return true;
				}
				public Boolean ConcentracionIsKey(){
				    return false;
				}
				public Integer ConcentracionLength(){
				    return 500;
				}
				public Integer ConcentracionPrecision(){
				    return 0;
				}
				public String ConcentracionDefault(){
				
					return null;
				
				}
				public String ConcentracionComment(){
				
				    return "";
				
				}
				public String ConcentracionPattern(){
				
					return "";
				
				}
				public String ConcentracionOriginalDbColumnName(){
				
					return "Concentracion";
				
				}

				
			    public String CodAtc;

				public String getCodAtc () {
					return this.CodAtc;
				}

				public Boolean CodAtcIsNullable(){
				    return true;
				}
				public Boolean CodAtcIsKey(){
				    return false;
				}
				public Integer CodAtcLength(){
				    return 50;
				}
				public Integer CodAtcPrecision(){
				    return 0;
				}
				public String CodAtcDefault(){
				
					return null;
				
				}
				public String CodAtcComment(){
				
				    return "";
				
				}
				public String CodAtcPattern(){
				
					return "";
				
				}
				public String CodAtcOriginalDbColumnName(){
				
					return "CodAtc";
				
				}

				
			    public String ViaAdmin;

				public String getViaAdmin () {
					return this.ViaAdmin;
				}

				public Boolean ViaAdminIsNullable(){
				    return true;
				}
				public Boolean ViaAdminIsKey(){
				    return false;
				}
				public Integer ViaAdminLength(){
				    return 200;
				}
				public Integer ViaAdminPrecision(){
				    return 0;
				}
				public String ViaAdminDefault(){
				
					return null;
				
				}
				public String ViaAdminComment(){
				
				    return "";
				
				}
				public String ViaAdminPattern(){
				
					return "";
				
				}
				public String ViaAdminOriginalDbColumnName(){
				
					return "ViaAdmin";
				
				}

				
			    public String CatFarmacologica;

				public String getCatFarmacologica () {
					return this.CatFarmacologica;
				}

				public Boolean CatFarmacologicaIsNullable(){
				    return true;
				}
				public Boolean CatFarmacologicaIsKey(){
				    return false;
				}
				public Integer CatFarmacologicaLength(){
				    return 200;
				}
				public Integer CatFarmacologicaPrecision(){
				    return 0;
				}
				public String CatFarmacologicaDefault(){
				
					return null;
				
				}
				public String CatFarmacologicaComment(){
				
				    return "";
				
				}
				public String CatFarmacologicaPattern(){
				
					return "";
				
				}
				public String CatFarmacologicaOriginalDbColumnName(){
				
					return "CatFarmacologica";
				
				}

				
			    public String FormFarmaceutica;

				public String getFormFarmaceutica () {
					return this.FormFarmaceutica;
				}

				public Boolean FormFarmaceuticaIsNullable(){
				    return true;
				}
				public Boolean FormFarmaceuticaIsKey(){
				    return false;
				}
				public Integer FormFarmaceuticaLength(){
				    return 200;
				}
				public Integer FormFarmaceuticaPrecision(){
				    return 0;
				}
				public String FormFarmaceuticaDefault(){
				
					return null;
				
				}
				public String FormFarmaceuticaComment(){
				
				    return "";
				
				}
				public String FormFarmaceuticaPattern(){
				
					return "";
				
				}
				public String FormFarmaceuticaOriginalDbColumnName(){
				
					return "FormFarmaceutica";
				
				}

				
			    public String IdentificadorUnico;

				public String getIdentificadorUnico () {
					return this.IdentificadorUnico;
				}

				public Boolean IdentificadorUnicoIsNullable(){
				    return true;
				}
				public Boolean IdentificadorUnicoIsKey(){
				    return false;
				}
				public Integer IdentificadorUnicoLength(){
				    return null;
				}
				public Integer IdentificadorUnicoPrecision(){
				    return null;
				}
				public String IdentificadorUnicoDefault(){
				
					return null;
				
				}
				public String IdentificadorUnicoComment(){
				
				    return "";
				
				}
				public String IdentificadorUnicoPattern(){
				
					return "";
				
				}
				public String IdentificadorUnicoOriginalDbColumnName(){
				
					return "IdentificadorUnico";
				
				}

				
			    public String SustanciaActiva;

				public String getSustanciaActiva () {
					return this.SustanciaActiva;
				}

				public Boolean SustanciaActivaIsNullable(){
				    return true;
				}
				public Boolean SustanciaActivaIsKey(){
				    return false;
				}
				public Integer SustanciaActivaLength(){
				    return 500;
				}
				public Integer SustanciaActivaPrecision(){
				    return 0;
				}
				public String SustanciaActivaDefault(){
				
					return null;
				
				}
				public String SustanciaActivaComment(){
				
				    return "";
				
				}
				public String SustanciaActivaPattern(){
				
					return "";
				
				}
				public String SustanciaActivaOriginalDbColumnName(){
				
					return "SustanciaActiva";
				
				}

				
			    public String _Insert;

				public String get_Insert () {
					return this._Insert;
				}

				public Boolean _InsertIsNullable(){
				    return true;
				}
				public Boolean _InsertIsKey(){
				    return false;
				}
				public Integer _InsertLength(){
				    return null;
				}
				public Integer _InsertPrecision(){
				    return null;
				}
				public String _InsertDefault(){
				
					return null;
				
				}
				public String _InsertComment(){
				
				    return "";
				
				}
				public String _InsertPattern(){
				
					return "";
				
				}
				public String _InsertOriginalDbColumnName(){
				
					return "_Insert";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
					this._Insert = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.upNGenerico = readString(dis);
					
					this.upConcentracion = readString(dis);
					
					this.upCodAtc = readString(dis);
					
					this.upViaAdmin = readString(dis);
					
					this.upCatFarmacologica = readString(dis);
					
					this.upFormFarmaceutica = readString(dis);
					
					this.upIdentificadorUnico = readString(dis);
					
					this.upSustanciaActiva = readString(dis);
					
					this.Estado_ = readString(dis);
					
					this._Message = readString(dis);
					
					this.NGenerico = readString(dis);
					
					this.Concentracion = readString(dis);
					
					this.CodAtc = readString(dis);
					
					this.ViaAdmin = readString(dis);
					
					this.CatFarmacologica = readString(dis);
					
					this.FormFarmaceutica = readString(dis);
					
					this.IdentificadorUnico = readString(dis);
					
					this.SustanciaActiva = readString(dis);
					
					this._Insert = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.upNGenerico,dos);
					
					// String
				
						writeString(this.upConcentracion,dos);
					
					// String
				
						writeString(this.upCodAtc,dos);
					
					// String
				
						writeString(this.upViaAdmin,dos);
					
					// String
				
						writeString(this.upCatFarmacologica,dos);
					
					// String
				
						writeString(this.upFormFarmaceutica,dos);
					
					// String
				
						writeString(this.upIdentificadorUnico,dos);
					
					// String
				
						writeString(this.upSustanciaActiva,dos);
					
					// String
				
						writeString(this.Estado_,dos);
					
					// String
				
						writeString(this._Message,dos);
					
					// String
				
						writeString(this.NGenerico,dos);
					
					// String
				
						writeString(this.Concentracion,dos);
					
					// String
				
						writeString(this.CodAtc,dos);
					
					// String
				
						writeString(this.ViaAdmin,dos);
					
					// String
				
						writeString(this.CatFarmacologica,dos);
					
					// String
				
						writeString(this.FormFarmaceutica,dos);
					
					// String
				
						writeString(this.IdentificadorUnico,dos);
					
					// String
				
						writeString(this.SustanciaActiva,dos);
					
					// String
				
						writeString(this._Insert,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("upNGenerico="+upNGenerico);
		sb.append(",upConcentracion="+upConcentracion);
		sb.append(",upCodAtc="+upCodAtc);
		sb.append(",upViaAdmin="+upViaAdmin);
		sb.append(",upCatFarmacologica="+upCatFarmacologica);
		sb.append(",upFormFarmaceutica="+upFormFarmaceutica);
		sb.append(",upIdentificadorUnico="+upIdentificadorUnico);
		sb.append(",upSustanciaActiva="+upSustanciaActiva);
		sb.append(",Estado_="+Estado_);
		sb.append(",_Message="+_Message);
		sb.append(",NGenerico="+NGenerico);
		sb.append(",Concentracion="+Concentracion);
		sb.append(",CodAtc="+CodAtc);
		sb.append(",ViaAdmin="+ViaAdmin);
		sb.append(",CatFarmacologica="+CatFarmacologica);
		sb.append(",FormFarmaceutica="+FormFarmaceutica);
		sb.append(",IdentificadorUnico="+IdentificadorUnico);
		sb.append(",SustanciaActiva="+SustanciaActiva);
		sb.append(",_Insert="+_Insert);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_2Process(globalMap);
		tOracleInput_5Process(globalMap);
		tOracleInput_3Process(globalMap);
		tOracleInput_1Process(globalMap);
		tOracleInput_9Process(globalMap);

		row42Struct row42 = new row42Struct();
row22Struct row22 = new row22Struct();
outViaAdminStruct outViaAdmin = new outViaAdminStruct();
row10Struct row10 = new row10Struct();
row11Struct row11 = new row11Struct();
row37Struct row37 = new row37Struct();
row38Struct row38 = new row38Struct();
row17Struct row17 = new row17Struct();
copyOfoutViaAdminStruct copyOfoutViaAdmin = new copyOfoutViaAdminStruct();
row12Struct row12 = new row12Struct();
row33Struct row33 = new row33Struct();
row24Struct row24 = new row24Struct();
row14Struct row14 = new row14Struct();
row39Struct row39 = new row39Struct();
row16Struct row16 = new row16Struct();
next_3Struct next_3 = new next_3Struct();
row18Struct row18 = new row18Struct();
next_4Struct next_4 = new next_4Struct();
row25Struct row25 = new row25Struct();
row27Struct row27 = new row27Struct();
row21Struct row21 = new row21Struct();
row23Struct row23 = new row23Struct();
next_6Struct next_6 = new next_6Struct();
row26Struct row26 = new row26Struct();
row19Struct row19 = new row19Struct();
next_7Struct next_7 = new next_7Struct();
row13Struct row13 = new row13Struct();





















	
	/**
	 * [tDenormalize_1_DenormalizeOut begin ] start
	 */

	

	
		
		ok_Hash.put("tDenormalize_1_DenormalizeOut", false);
		start_Hash.put("tDenormalize_1_DenormalizeOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"next_4");
					}
				
		int tos_count_tDenormalize_1_DenormalizeOut = 0;
		

class DenormalizeStructtDenormalize_1_DenormalizeOut {
StringBuilder upFormFarmaceutica = new StringBuilder();
StringBuilder FormFarmaceutica_ = new StringBuilder();
StringBuilder FormFarmaceutica_Ids_ = new StringBuilder();
StringBuilder Estado_ = new StringBuilder();
StringBuilder _Insert = new StringBuilder();
}
DenormalizeStructtDenormalize_1_DenormalizeOut denormalize_result_tDenormalize_1_DenormalizeOut = null;java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>>>>>>>>>>>>>> hash_upNGenerico_tDenormalize_1_DenormalizeOut = new java.util.HashMap<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>>>>>>>>>>>>>>();java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>>>>>>>>>>>>> hash_upConcentracion_tDenormalize_1_DenormalizeOut = null;java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>>>>>>>>>>>> hash_upCodAtc_tDenormalize_1_DenormalizeOut = null;java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>>>>>>>>>>> hash_upViaAdmin_tDenormalize_1_DenormalizeOut = null;java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>>>>>>>>>> hash_upCatFarmacologica_tDenormalize_1_DenormalizeOut = null;java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>>>>>>>>> hash_upIdentificadorUnico_tDenormalize_1_DenormalizeOut = null;java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>>>>>>>> hash_upSustanciaActiva_tDenormalize_1_DenormalizeOut = null;java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>>>>>>> hash__Message_tDenormalize_1_DenormalizeOut = null;java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>>>>>> hash_NGenerico__tDenormalize_1_DenormalizeOut = null;java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>>>>> hash_Concentracion__tDenormalize_1_DenormalizeOut = null;java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>>>> hash_CodAtc__tDenormalize_1_DenormalizeOut = null;java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>>> hash_ViaAdmin__tDenormalize_1_DenormalizeOut = null;java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>> hash_CatFarmacologica__tDenormalize_1_DenormalizeOut = null;java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>> hash_IdentificadorUnico_tDenormalize_1_DenormalizeOut = null;java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>> hash_SustanciaActiva_tDenormalize_1_DenormalizeOut = null;java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>> hash_ViaAdmin_Id__tDenormalize_1_DenormalizeOut = null;java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>> hash_CatFarmacologica_Id_tDenormalize_1_DenormalizeOut = null;java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>> hash_Sustancia_Activa_Id__tDenormalize_1_DenormalizeOut = null;java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>> hash_CatFarmacologica_Id__tDenormalize_1_DenormalizeOut = null;java.util.Map<BigDecimal,java.util.Map<BigDecimal,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>> hash_Generico_Id__tDenormalize_1_DenormalizeOut = null;java.util.Map<BigDecimal,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>> hash_FormFarmaceutica_Id_tDenormalize_1_DenormalizeOut = null;
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut> hash_Id__tDenormalize_1_DenormalizeOut = null;

 



/**
 * [tDenormalize_1_DenormalizeOut begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
next_4Struct next_4_tmp = new next_4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tJavaRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_4", false);
		start_Hash.put("tJavaRow_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"next_3");
					}
				
		int tos_count_tJavaRow_4 = 0;
		

int nb_line_tJavaRow_4 = 0;

 



/**
 * [tJavaRow_4 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
next_3Struct next_3_tmp = new next_3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tJoin_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJoin_1", false);
		start_Hash.put("tJoin_1", System.currentTimeMillis());
		
	
	currentComponent="tJoin_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row39");
					}
				
		int tos_count_tJoin_1 = 0;
		
    final java.util.Map<row15Struct, row15Struct> tHash_tJoin_1 = (java.util.Map<row15Struct, row15Struct>) globalMap.get("tHash_row15");
    
    class Util_tJoin_1
    {
        row15Struct lookupValue = null;
        row15Struct row15HashKey = new row15Struct(); 
        
        public boolean isJoined(row39Struct mainRow) {                        
           row15HashKey.NOMBRE = mainRow.upFormFarmaceutica;

			row15HashKey.hashCodeDirty = true;			             
            lookupValue = tHash_tJoin_1.get(row15HashKey);            
            if(lookupValue != null){
            	return true;
            }else{
            }  
            return false;
        }
    }
        
	Util_tJoin_1 util_tJoin_1 = new Util_tJoin_1();
        
    int nb_line_tJoin_1 = 0; 
 



/**
 * [tJoin_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tNormalize_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tNormalize_2", false);
		start_Hash.put("tNormalize_2", System.currentTimeMillis());
		
	
	currentComponent="tNormalize_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row24");
					}
				
		int tos_count_tNormalize_2 = 0;
		

	int lastNoEmptyIndex_tNormalize_2 = 0;
    int nb_line_tNormalize_2 = 0;
        String tmp_tNormalize_2 = null;
        StringBuilder currentRecord_tNormalize_2 = null;
        String [] normalizeRecord_tNormalize_2 = null;
        java.util.Set<String> recordSet_tNormalize_2 = new java.util.HashSet<String>();
        
				if ( ((String)",").length() == 0 ){
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				

 



/**
 * [tNormalize_2 begin ] stop
 */



	
	/**
	 * [tJavaRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_6", false);
		start_Hash.put("tJavaRow_6", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row33");
					}
				
		int tos_count_tJavaRow_6 = 0;
		

int nb_line_tJavaRow_6 = 0;

 



/**
 * [tJavaRow_6 begin ] stop
 */



	
	/**
	 * [tReplicate_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_2", false);
		start_Hash.put("tReplicate_2", System.currentTimeMillis());
		
	
	currentComponent="tReplicate_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tReplicate_2 = 0;
		

 



/**
 * [tReplicate_2 begin ] stop
 */



	
	/**
	 * [tOracleSP_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_2", false);
		start_Hash.put("tOracleSP_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfoutViaAdmin");
					}
				
		int tos_count_tOracleSP_2 = 0;
		

	java.sql.Connection connection_tOracleSP_2 = null;
	connection_tOracleSP_2 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_1");
	

java.sql.CallableStatement statement_tOracleSP_2 = connection_tOracleSP_2.prepareCall("{call " + "MED.GetGenericoRegistrado" + "(?,?,?,?,?,?,?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_2;
String tmpString_tOracleSP_2;

 



/**
 * [tOracleSP_2 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfoutViaAdminStruct copyOfoutViaAdmin_tmp = new copyOfoutViaAdminStruct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */



	
	/**
	 * [tJoin_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJoin_4", false);
		start_Hash.put("tJoin_4", System.currentTimeMillis());
		
	
	currentComponent="tJoin_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row38");
					}
				
		int tos_count_tJoin_4 = 0;
		
    final java.util.Map<row35Struct, row35Struct> tHash_tJoin_4 = (java.util.Map<row35Struct, row35Struct>) globalMap.get("tHash_row35");
    
    class Util_tJoin_4
    {
        row35Struct lookupValue = null;
        row35Struct row35HashKey = new row35Struct(); 
        
        public boolean isJoined(row38Struct mainRow) {                        
           row35HashKey.NOMBRE = mainRow.upSustanciaActiva;

			row35HashKey.hashCodeDirty = true;			             
            lookupValue = tHash_tJoin_4.get(row35HashKey);            
            if(lookupValue != null){
            	return true;
            }else{
            }  
            return false;
        }
    }
        
	Util_tJoin_4 util_tJoin_4 = new Util_tJoin_4();
        
    int nb_line_tJoin_4 = 0; 
 



/**
 * [tJoin_4 begin ] stop
 */



	
	/**
	 * [tJavaRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_10", false);
		start_Hash.put("tJavaRow_10", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row37");
					}
				
		int tos_count_tJavaRow_10 = 0;
		

int nb_line_tJavaRow_10 = 0;

 



/**
 * [tJavaRow_10 begin ] stop
 */



	
	/**
	 * [tNormalize_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tNormalize_1", false);
		start_Hash.put("tNormalize_1", System.currentTimeMillis());
		
	
	currentComponent="tNormalize_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tNormalize_1 = 0;
		

	int lastNoEmptyIndex_tNormalize_1 = 0;
    int nb_line_tNormalize_1 = 0;
        String tmp_tNormalize_1 = null;
        StringBuilder currentRecord_tNormalize_1 = null;
        String [] normalizeRecord_tNormalize_1 = null;
        java.util.Set<String> recordSet_tNormalize_1 = new java.util.HashSet<String>();
        
				if ( ((String)",").length() == 0 ){
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				

 



/**
 * [tNormalize_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_7", false);
		start_Hash.put("tJavaRow_7", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tJavaRow_7 = 0;
		

int nb_line_tJavaRow_7 = 0;

 



/**
 * [tJavaRow_7 begin ] stop
 */



	
	/**
	 * [tJoin_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJoin_3", false);
		start_Hash.put("tJoin_3", System.currentTimeMillis());
		
	
	currentComponent="tJoin_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"outViaAdmin");
					}
				
		int tos_count_tJoin_3 = 0;
		
    final java.util.Map<row9Struct, row9Struct> tHash_tJoin_3 = (java.util.Map<row9Struct, row9Struct>) globalMap.get("tHash_row9");
    
    class Util_tJoin_3
    {
        row9Struct lookupValue = null;
        row9Struct row9HashKey = new row9Struct(); 
        
        public boolean isJoined(outViaAdminStruct mainRow) {                        
           row9HashKey.NOMBRE = mainRow.upCatFarmacologica;

			row9HashKey.hashCodeDirty = true;			             
            lookupValue = tHash_tJoin_3.get(row9HashKey);            
            if(lookupValue != null){
            	return true;
            }else{
            }  
            return false;
        }
    }
        
	Util_tJoin_3 util_tJoin_3 = new Util_tJoin_3();
        
    int nb_line_tJoin_3 = 0; 
 



/**
 * [tJoin_3 begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
					globalMap.get( "tHash_Lookup_row7" ))
					;					
					
	

row7Struct row7HashKey = new row7Struct();
row7Struct row7Default = new row7Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
					globalMap.get( "tHash_Lookup_row8" ))
					;					
					
	

row8Struct row8HashKey = new row8Struct();
row8Struct row8Default = new row8Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
	BigDecimal var1;
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
outViaAdminStruct outViaAdmin_tmp = new outViaAdminStruct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */



	
	/**
	 * [tJavaRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_5", false);
		start_Hash.put("tJavaRow_5", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row42");
					}
				
		int tos_count_tJavaRow_5 = 0;
		

int nb_line_tJavaRow_5 = 0;

 



/**
 * [tJavaRow_5 begin ] stop
 */



	
	/**
	 * [tOracleInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_6", false);
		start_Hash.put("tOracleInput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_6";
	
	
		int tos_count_tOracleInput_6 = 0;
		
	


	
		    int nb_line_tOracleInput_6 = 0;
		    java.sql.Connection conn_tOracleInput_6 = null;
				conn_tOracleInput_6 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_6 = false;
				boolean isConnectionWrapped_tOracleInput_6 = !(conn_tOracleInput_6 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_6.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_6 = null;
                if (isConnectionWrapped_tOracleInput_6) {
					unwrappedOraConn_tOracleInput_6 = conn_tOracleInput_6.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_6 != null) {
                        isTimeZoneNull_tOracleInput_6 = (unwrappedOraConn_tOracleInput_6.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_6 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_6).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_6) {
					java.sql.Statement stmtGetTZ_tOracleInput_6 = conn_tOracleInput_6.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_6 = stmtGetTZ_tOracleInput_6.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_6 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_6.next()) {
						sessionTimezone_tOracleInput_6 = rsGetTZ_tOracleInput_6.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_6 && unwrappedOraConn_tOracleInput_6 != null) {
                        unwrappedOraConn_tOracleInput_6.setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_6).setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_6 = conn_tOracleInput_6.createStatement();

		    String dbquery_tOracleInput_6 = "SELECT G.UPNGENERICO,G.UPCONCENTRACION,G.UPCODATC,G.UPVIAADMIN,G.UPCATFARMACOLOGICA,UPPER(TRIM(MED.MayusculasSinAcentos"
+"(G.UPFORMFARMACEUTICA))),T.UPIDENTIFICADORUNICO,\nG.UPSUSTANCIAACTIVA,'Erróneo' AS ESTADO, 'El registro se encuentra dil"
+"igenciado mas de una vez en el formato' || ' ' || 'Cantidad' || ' ' ||G.CANTIDAD || ' veces' AS MESSAGE,G.NGENERICO, G.C"
+"ONCENTRACION, G.CODATC, G.VIAADMIN, G.CATFARMACOLOGICA,\nG.FORMFARMACEUTICA,T.IDENTIFICADORUNICO, T.SUSTANCIAACTIVA\nFRO"
+"M\n(SELECT UPNGENERICO,UPCONCENTRACION,UPCODATC,UPVIAADMIN,UPCATFARMACOLOGICA,UPFORMFARMACEUTICA,\nUPSUSTANCIAACTIVA,EST"
+"ADO,MESSAGE,NGENERICO, CONCENTRACION, CODATC, VIAADMIN, CATFARMACOLOGICA,\nFORMFARMACEUTICA, SUSTANCIAACTIVA, COUNT(*) A"
+"S CANTIDAD\nFROM MED_GENERICOS_TEMP\nGROUP BY UPNGENERICO,UPCONCENTRACION,UPCODATC,UPVIAADMIN,UPCATFARMACOLOGICA,UPFORMF"
+"ARMACEUTICA,\nUPSUSTANCIAACTIVA,ESTADO,MESSAGE,NGENERICO, CONCENTRACION, CODATC, VIAADMIN, CATFARMACOLOGICA, FORMFARMACE"
+"UTICA,\nSUSTANCIAACTIVA\nHAVING COUNT(*) > 1) G\nINNER JOIN (SELECT M.UPNGENERICO, M.UPCONCENTRACION, M.UPCODATC, M.UPVI"
+"AADMIN, M.UPCATFARMACOLOGICA, M.UPFORMFARMACEUTICA,M.UPIDENTIFICADORUNICO,\nM.UPSUSTANCIAACTIVA, M.ESTADO, M.MESSAGE, M."
+"NGENERICO, M.CONCENTRACION, M.CODATC, M.VIAADMIN, M.CATFARMACOLOGICA, M.FORMFARMACEUTICA,M.IDENTIFICADORUNICO, M.SUSTANC"
+"IAACTIVA\nFROM MED_GENERICOS_TEMP M) T ON T.UPNGENERICO = G.UPNGENERICO AND T.UPCONCENTRACION = G.UPCONCENTRACION AND T."
+"UPCODATC = G.UPCODATC AND T.UPVIAADMIN = G.UPVIAADMIN AND T.UPCATFARMACOLOGICA = G.UPCATFARMACOLOGICA AND T.UPFORMFARMAC"
+"EUTICA = G.UPFORMFARMACEUTICA\nAND T.UPSUSTANCIAACTIVA = G.UPSUSTANCIAACTIVA AND T.NGENERICO = G.NGENERICO AND T.CONCENT"
+"RACION = G.CONCENTRACION AND T.CODATC = G.CODATC\nAND T.VIAADMIN = G.VIAADMIN AND T.CATFARMACOLOGICA = G.CATFARMACOLOGIC"
+"A AND T.FORMFARMACEUTICA = G.FORMFARMACEUTICA AND T.SUSTANCIAACTIVA = G.SUSTANCIAACTIVA\nUNION ALL\nSELECT G.UPNGENERICO"
+",G.UPCONCENTRACION,G.UPCODATC,G.UPVIAADMIN,G.UPCATFARMACOLOGICA,G.UPFORMFARMACEUTICA,T.UPIDENTIFICADORUNICO,\nG.UPSUSTAN"
+"CIAACTIVA, G.ESTADO, G.MESSAGE, G.NGENERICO, G.CONCENTRACION, G.CODATC, G.VIAADMIN, G.CATFARMACOLOGICA, G.FORMFARMACEUTI"
+"CA, T.IDENTIFICADORUNICO,G.SUSTANCIAACTIVA\nFROM\n(SELECT UPNGENERICO,UPCONCENTRACION,UPCODATC,UPVIAADMIN,UPCATFARMACOLO"
+"GICA,UPFORMFARMACEUTICA,\nUPSUSTANCIAACTIVA,ESTADO,MESSAGE,NGENERICO, CONCENTRACION, CODATC, VIAADMIN, CATFARMACOLOGICA,"
+"\nFORMFARMACEUTICA, SUSTANCIAACTIVA, COUNT(*) AS CANTIDAD\nFROM MED_GENERICOS_TEMP\nGROUP BY UPNGENERICO,UPCONCENTRACION"
+",UPCODATC,UPVIAADMIN,UPCATFARMACOLOGICA,UPFORMFARMACEUTICA,\nUPSUSTANCIAACTIVA,ESTADO,MESSAGE,NGENERICO, CONCENTRACION, "
+"CODATC, VIAADMIN, CATFARMACOLOGICA, FORMFARMACEUTICA,\nSUSTANCIAACTIVA HAVING COUNT(*) = 1) G INNER JOIN (SELECT M.UPNGE"
+"NERICO, M.UPCONCENTRACION, M.UPCODATC, M.UPVIAADMIN, M.UPCATFARMACOLOGICA, M.UPFORMFARMACEUTICA,M.UPSUSTANCIAACTIVA, M.E"
+"STADO, M.MESSAGE, M.NGENERICO, M.CONCENTRACION, M.CODATC, M.VIAADMIN, M.CATFARMACOLOGICA,M.FORMFARMACEUTICA, M.SUSTANCIA"
+"ACTIVA, M.IDENTIFICADORUNICO, M.UPIDENTIFICADORUNICO\nFROM MED_GENERICOS_TEMP M) T ON T.UPNGENERICO = G.UPNGENERICO AND "
+"T.UPCONCENTRACION = G.UPCONCENTRACION AND T.UPCODATC = G.UPCODATC AND T.UPVIAADMIN = G.UPVIAADMIN AND T.UPCATFARMACOLOGI"
+"CA = G.UPCATFARMACOLOGICA AND T.UPFORMFARMACEUTICA = G.UPFORMFARMACEUTICA AND T.UPSUSTANCIAACTIVA = G.UPSUSTANCIAACTIVA "
+"AND T.NGENERICO = G.NGENERICO AND T.CONCENTRACION = G.CONCENTRACION AND T.CODATC = G.CODATC\nAND T.VIAADMIN = G.VIAADMIN"
+" AND T.CATFARMACOLOGICA = G.CATFARMACOLOGICA AND T.FORMFARMACEUTICA = G.FORMFARMACEUTICA AND T.SUSTANCIAACTIVA = G.SUSTA"
+"NCIAACTIVA";
		    

		    globalMap.put("tOracleInput_6_QUERY",dbquery_tOracleInput_6);

		    java.sql.ResultSet rs_tOracleInput_6 = null;

		    try {
		    	rs_tOracleInput_6 = stmt_tOracleInput_6.executeQuery(dbquery_tOracleInput_6);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_6 = rs_tOracleInput_6.getMetaData();
		    	int colQtyInRs_tOracleInput_6 = rsmd_tOracleInput_6.getColumnCount();

		    String tmpContent_tOracleInput_6 = null;
		    
		    
		    while (rs_tOracleInput_6.next()) {
		        nb_line_tOracleInput_6++;
		        
							if(colQtyInRs_tOracleInput_6 < 1) {
								row42.upNGenerico = null;
							} else {
	                         		
        	row42.upNGenerico = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 2) {
								row42.upConcentracion = null;
							} else {
	                         		
        	row42.upConcentracion = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 3) {
								row42.upCodAtc = null;
							} else {
	                         		
        	row42.upCodAtc = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 4) {
								row42.upViaAdmin = null;
							} else {
	                         		
        	row42.upViaAdmin = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 5) {
								row42.upCatFarmacologica = null;
							} else {
	                         		
        	row42.upCatFarmacologica = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 6) {
								row42.upFormFarmaceutica = null;
							} else {
	                         		
        	row42.upFormFarmaceutica = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 7) {
								row42.upIdentificadorUnico = null;
							} else {
	                         		
        	row42.upIdentificadorUnico = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 8) {
								row42.upSustanciaActiva = null;
							} else {
	                         		
        	row42.upSustanciaActiva = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 9) {
								row42.Estado_ = null;
							} else {
	                         		
        	row42.Estado_ = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 10) {
								row42._Message = null;
							} else {
	                         		
        	row42._Message = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 11) {
								row42.NGenerico = null;
							} else {
	                         		
        	row42.NGenerico = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 12) {
								row42.Concentracion = null;
							} else {
	                         		
        	row42.Concentracion = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 13) {
								row42.CodAtc = null;
							} else {
	                         		
        	row42.CodAtc = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 13, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 14) {
								row42.ViaAdmin = null;
							} else {
	                         		
        	row42.ViaAdmin = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 14, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 15) {
								row42.CatFarmacologica = null;
							} else {
	                         		
        	row42.CatFarmacologica = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 15, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 16) {
								row42.FormFarmaceutica = null;
							} else {
	                         		
        	row42.FormFarmaceutica = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 16, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 17) {
								row42.IdentificadorUnico = null;
							} else {
	                         		
        	row42.IdentificadorUnico = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 17, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 18) {
								row42.SustanciaActiva = null;
							} else {
	                         		
        	row42.SustanciaActiva = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 18, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 19) {
								row42._Insert = null;
							} else {
	                         		
        	row42._Insert = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 19, false);
		                    }
					




 



/**
 * [tOracleInput_6 begin ] stop
 */
	
	/**
	 * [tOracleInput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 


	tos_count_tOracleInput_6++;

/**
 * [tOracleInput_6 main ] stop
 */
	
	/**
	 * [tOracleInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_5 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row42"
						
						);
					}
					

    			//Code generate according to input schema and output schema
			  row22.upNGenerico = row42.upNGenerico;
			  row22.upConcentracion = row42.upConcentracion;
			  row22.upCodAtc = row42.upCodAtc;
			  row22.upViaAdmin = row42.upViaAdmin;
			  row22.upCatFarmacologica = row42.upCatFarmacologica;
			  row22.upFormFarmaceutica = row42.upFormFarmaceutica;
			  row22.upIdentificadorUnico = row42.upIdentificadorUnico;
			  row22.upSustanciaActiva = row42.upSustanciaActiva;
			  row22.Estado_ = row42.Estado_;
			  row22._Insert = row42._Insert;
			  row22._Message = row42._Message;
			  row22.NGenerico = row42.NGenerico;
			  row22.Concentracion = row42.Concentracion;
			  row22.CodAtc = row42.CodAtc;
			  row22.ViaAdmin = row42.ViaAdmin;
			  row22.CatFarmacologica = row42.CatFarmacologica;
			  row22.FormFarmaceutica = row42.FormFarmaceutica;
			  row22.IdentificadorUnico = row42.IdentificadorUnico;
			  row22.SustanciaActiva = row42.SustanciaActiva;


			  boolean required = false;

			  if (Utils.empty(row42.upNGenerico) == true)    { row22.upNGenerico = "(*)"; required = true;} 
			  if (Utils.empty(row42.NGenerico) == true)    { row22.NGenerico = "(*)"; required = true;} 
			  if (Utils.empty(row42.upConcentracion) == true){ row22.upConcentracion = row22.upConcentracion = "(*)"; required = true;} 
			  if (Utils.empty(row42.Concentracion) == true){ row22.Concentracion = "(*)"; required = true;} 
			  if (Utils.empty(row42.upCodAtc) == true)       { row22.upCodAtc = "(*)"; required = true;} 
			  if (Utils.empty(row42.CodAtc) == true)       { row22.CodAtc = "(*)"; required = true;} 
			  if (Utils.empty(row42.upViaAdmin) == true)     { row22.upViaAdmin = "(*)";  required = true;} 
			  if (Utils.empty(row42.ViaAdmin) == true)     { row22.ViaAdmin = "(*)";  required = true;} 
			  if (Utils.empty(row42.upCatFarmacologica) == true){ row22.upCatFarmacologica = "(*)"; required = true;} 
			  if (Utils.empty(row42.CatFarmacologica) == true){ row22.CatFarmacologica = "(*)"; required = true;} 
			  if (Utils.empty(row42.upFormFarmaceutica) == true){ row22.upFormFarmaceutica =  "(*)"; required = true;}
			  if (Utils.empty(row42.FormFarmaceutica) == true){ row22.FormFarmaceutica =  "(*)"; required = true;} 
			  if (Utils.empty(row42.upSustanciaActiva) == true)    { row22.upSustanciaActiva = "(*)"; required = true;} 
			  if (Utils.empty(row42.SustanciaActiva) == true)    { row22.SustanciaActiva = "(*)"; required = true;} 
			  if (Utils.empty(row42.upIdentificadorUnico) == true)    { row22.upIdentificadorUnico = "(*)"; required = true;} 
			  if (Utils.empty(row42.IdentificadorUnico) == true)    { row22.IdentificadorUnico = "(*)"; required = true;} 



			  /*
			  if (Utils.empty(row42.upNGenerico) == true)    { row22.upNGenerico = "(*)"; required = true;} 
			  if (Utils.empty(row42.upConcentracion) == true){ row22.upConcentracion = "(*)"; required = true;} 
			  //if (Utils.empty(row42.upCodAtc) == true)       { row22.upCodAtc = "(*)"; required = true;} 
			  if (Utils.empty(row42.upViaAdmin) == true)     { row22.upViaAdmin = "(*)"; required = true;} 
			  //if (Utils.empty(row42.upCatFarmacologica) == true){ row22.upCatFarmacologica = "(*)"; required = true;} 
			  if (Utils.empty(row42.FormFarmaceutica) == true){ row22.upFormFarmaceutica =  "(*)"; required = true;} */


			  if (required == true ){
			  	row22.Estado_ = "Erróneo";
			  	row22._Insert = "No";
			  	row22._Message = "Faltan campos obligatorios; \n";
			  }

			  /*if (row22.Cantidad >= 2){
			  	row22.Estado_ = "Erróneo";
			  	row22._Insert = "No";
			  	row22._Message = "El registro se encuentra diligenciado mas de una vez en el formato; \n" +"Cantidad:"+ row22.Cantidad;
			  }*/
			  
			  if (row22.NGenerico.contains("#¡VALOR!"))  
			  { 
			   row22.Estado_ = "Erróneo";
			   row22._Insert = "No";
			   row22._Message = "#¡VALOR! no es un nombre de un genérico";
			  }
			  
			  if (row22.Concentracion.contains("#¡VALOR!"))  
			  { 
			   row22.Estado_ = "Erróneo";
			   row22._Insert = "No";
			   row22._Message = "#¡VALOR! no es una concentración";
			  }
			  
			  if (row22.CodAtc.contains("#¡VALOR!"))  
			  { 
			   row22.Estado_ = "Erróneo";
			   row22._Insert = "No";
			   row22._Message = "#¡VALOR! no es una via de CodAtc";
			  } 
			  
			  if (row22.CatFarmacologica.contains("#¡VALOR!"))  
			  { 
			   row22.Estado_ = "Erróneo";
			   row22._Insert = "No";
			   row22._Message = "#¡VALOR! no es una categoría farmacológica";
			  } 
			  
			  if (row22.IdentificadorUnico.contains("#¡VALOR!"))  
			  { 
			   row22.Estado_ = "Erróneo";
			   row22._Insert = "No";
			   row22._Message = "#¡VALOR! no es un identificador único";
			  }
			  
			  if (row22.FormFarmaceutica.contains("#¡VALOR!"))  
			  { 
			   row22.Estado_ = "Erróneo";
			   row22._Insert = "No";
			   row22._Message = "#¡VALOR! no es una forma farmacéutica";
			  }
			  	
			  if (row22.SustanciaActiva.contains("#¡VALOR!"))  
			  { 
			   row22.Estado_ = "Erróneo";
			   row22._Insert = "No";
			   row22._Message = "#¡VALOR! no es una sustancia activa";
			  }
			  			  
			  if (row22.ViaAdmin.contains("#¡VALOR!"))  
			  { 
			   row22.Estado_ = "Erróneo";
			   row22._Insert = "No";
			   row22._Message = "#¡VALOR! no es una via de administración";
			  }

    nb_line_tJavaRow_5++;   

 


	tos_count_tJavaRow_5++;

/**
 * [tJavaRow_5 main ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row22"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
						row7Struct row7 = null;
					
						row8Struct row8 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_10 = false;
		boolean mainRowRejected_tMap_10 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row7" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow7 = false;
       		  	    	
       		  	    	
 							row7Struct row7ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_10) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_10 = false;
								
                        		    		    row7HashKey.NOMBRE = row22.upViaAdmin ;
                        		    		

								
		                        	row7HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row7.lookup( row7HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row7 != null && tHash_Lookup_row7.getCount(row7HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7' and it contains more one result from keys :  row7.NOMBRE = '" + row7HashKey.NOMBRE + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row7Struct fromLookup_row7 = null;
							row7 = row7Default;
										 
							
								 
							
							
								if (tHash_Lookup_row7 !=null && tHash_Lookup_row7.hasNext()) { // G 099
								
							
								
								fromLookup_row7 = tHash_Lookup_row7.next();

							
							
								} // G 099
							
							

							if(fromLookup_row7 != null) {
								row7 = fromLookup_row7;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row8" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow8 = false;
       		  	    	
       		  	    	
 							row8Struct row8ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_10) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_10 = false;
								
                        		    		    row8HashKey.SIGLA = row22.upViaAdmin ;
                        		    		

								
		                        	row8HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row8.lookup( row8HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row8 != null && tHash_Lookup_row8.getCount(row8HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.SIGLA = '" + row8HashKey.SIGLA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row8Struct fromLookup_row8 = null;
							row8 = row8Default;
										 
							
								 
							
							
								if (tHash_Lookup_row8 !=null && tHash_Lookup_row8.hasNext()) { // G 099
								
							
								
								fromLookup_row8 = tHash_Lookup_row8.next();

							
							
								} // G 099
							
							

							if(fromLookup_row8 != null) {
								row8 = fromLookup_row8;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;
Var.var1 = row7.ID != null? row7.ID: row8.ID !=null? row8.ID: null ;// ###############################
        // ###############################
        // # Output tables

outViaAdmin = null;


// # Output table : 'outViaAdmin'
outViaAdmin_tmp.upNGenerico = row22.upNGenerico ;
outViaAdmin_tmp.upConcentracion = row22.upConcentracion ;
outViaAdmin_tmp.upCodAtc = row22.upCodAtc ;
outViaAdmin_tmp.upViaAdmin = row22.upViaAdmin ;
outViaAdmin_tmp.upCatFarmacologica = row22.upCatFarmacologica.trim().toUpperCase() ;
outViaAdmin_tmp.upFormFarmaceutica = row22.upFormFarmaceutica ;
outViaAdmin_tmp.upIdentificadorUnico = row22.upIdentificadorUnico;
outViaAdmin_tmp.upSustanciaActiva = row22.upSustanciaActiva;
outViaAdmin_tmp.Estado_ = row22.Estado_ ;
outViaAdmin_tmp._Message = row22._Message ;
outViaAdmin_tmp.NGenerico = row22.NGenerico ;
outViaAdmin_tmp.Concentracion = row22.Concentracion ;
outViaAdmin_tmp.CodAtc = row22.CodAtc ;
outViaAdmin_tmp.ViaAdmin = row22.ViaAdmin ;
outViaAdmin_tmp.CatFarmacologica = row22.CatFarmacologica ;
outViaAdmin_tmp.FormFarmaceutica = row22.FormFarmaceutica ;
outViaAdmin_tmp.IdentificadorUnico = row22.IdentificadorUnico;
outViaAdmin_tmp.SustanciaActiva = row22.SustanciaActiva;
outViaAdmin_tmp._Insert = row22._Insert ;
outViaAdmin_tmp.ViaAdmin_Id_ = Var.var1 ;
outViaAdmin_tmp.CatFarmacologica_Id_ = null;
outViaAdmin = outViaAdmin_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "outViaAdmin"
if(outViaAdmin != null) { 



	
	/**
	 * [tJoin_3 main ] start
	 */

	

	
	
	currentComponent="tJoin_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"outViaAdmin"
						
						);
					}
					

			row10 = null;	
	
				row10 = new row10Struct();						
						row10.upNGenerico = outViaAdmin.upNGenerico;					
						row10.upConcentracion = outViaAdmin.upConcentracion;					
						row10.upCodAtc = outViaAdmin.upCodAtc;					
						row10.upViaAdmin = outViaAdmin.upViaAdmin;					
						row10.upCatFarmacologica = outViaAdmin.upCatFarmacologica;					
						row10.upFormFarmaceutica = outViaAdmin.upFormFarmaceutica;					
						row10.upIdentificadorUnico = outViaAdmin.upIdentificadorUnico;					
						row10.upSustanciaActiva = outViaAdmin.upSustanciaActiva;					
						row10.Estado_ = outViaAdmin.Estado_;					
						row10._Message = outViaAdmin._Message;					
						row10.NGenerico = outViaAdmin.NGenerico;					
						row10.Concentracion = outViaAdmin.Concentracion;					
						row10.CodAtc = outViaAdmin.CodAtc;					
						row10.ViaAdmin = outViaAdmin.ViaAdmin;					
						row10.CatFarmacologica = outViaAdmin.CatFarmacologica;					
						row10.FormFarmaceutica = outViaAdmin.FormFarmaceutica;					
						row10.IdentificadorUnico = outViaAdmin.IdentificadorUnico;					
						row10.SustanciaActiva = outViaAdmin.SustanciaActiva;					
						row10._Insert = outViaAdmin._Insert;					
						row10.ViaAdmin_Id_ = outViaAdmin.ViaAdmin_Id_;

			if(util_tJoin_3.isJoined(outViaAdmin)){ 			
								row10.CatFarmacologica_Id_ = util_tJoin_3.lookupValue.ID;
			} 
			
///////////////////////    			

 


	tos_count_tJoin_3++;

/**
 * [tJoin_3 main ] stop
 */
	
	/**
	 * [tJoin_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJoin_3";
	
	

 



/**
 * [tJoin_3 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tJavaRow_7 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					

    //Code generate according to input schema and output schema
row11.upNGenerico = row10.upNGenerico;
row11.upConcentracion = row10.upConcentracion;
row11.upCodAtc = row10.upCodAtc;
row11.upViaAdmin = row10.upViaAdmin;
row11.upCatFarmacologica = row10.upCatFarmacologica;
row11.upFormFarmaceutica = row10.upFormFarmaceutica;
row11.upIdentificadorUnico = row10.upIdentificadorUnico;
row11.upSustanciaActiva = row10.upSustanciaActiva;
row11.Estado_ = row10.Estado_;
row11._Insert = row10._Insert;
row11._Message = row10._Message;
row11.NGenerico = row10.NGenerico;
row11.Concentracion = row10.Concentracion;
row11.CodAtc = row10.CodAtc;
row11.ViaAdmin = row10.ViaAdmin;
row11.CatFarmacologica = row10.CatFarmacologica;
row11.FormFarmaceutica = row10.FormFarmaceutica;
row11.IdentificadorUnico = row10.IdentificadorUnico;
row11.SustanciaActiva = row10.SustanciaActiva;
row11.ViaAdmin_Id_ = row10.ViaAdmin_Id_;
row11.CatFarmacologica_Id_ = row10.CatFarmacologica_Id_;



/*System.out.println("Descripción: " + row10.upNGenerico);
System.out.println("Concentración: " + row10.upConcentracion);
System.out.println("Forma farmaceutica: " + row10.FormFarmaceutica);
System.out.println("Via admin id: " + row10.ViaAdmin_Id_);
System.out.println("Cat Farmacologica id: " + row10.CatFarmacologica_Id_);
System.out.println("CodAct: " + row10.CodAtc);*/

//Utils.empty(row10.ViaAdmin) == false

if( Utils.empty(row10.ViaAdmin) == false && row10.ViaAdmin_Id_ == null ) {
	row11.ViaAdmin_Id_ = BigDecimal.valueOf(0);
	//row11.upViaAdmin = row10.ViaAdmin + " | No registrada";
	row11._Message = row10.ViaAdmin + " ;" +"Via de administracion no registrada; \n"; 
	row11.Estado_ = "Erróneo";
	row11._Insert = "No";
}

if( Utils.empty(row10.CatFarmacologica) == false && row10.CatFarmacologica_Id_ == null ) {
	row11.CatFarmacologica_Id_ = BigDecimal.valueOf(0);
	row11.upCatFarmacologica = row10.CatFarmacologica + " | No registrada";
	row11._Message = row10.CatFarmacologica + " ;" +"Categoria farmacologica no registrada; \n"; 
	row11.Estado_ = "Erróneo";
	row11._Insert = "No";
}

    nb_line_tJavaRow_7++;   

 


	tos_count_tJavaRow_7++;

/**
 * [tJavaRow_7 main ] stop
 */
	
	/**
	 * [tJavaRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_begin ] stop
 */

	
	/**
	 * [tNormalize_1 main ] start
	 */

	

	
	
	currentComponent="tNormalize_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					

            normalizeRecord_tNormalize_1 = new String[1];
            if(row11.upSustanciaActiva != null) {
				if("".equals(row11.upSustanciaActiva)){
		        	normalizeRecord_tNormalize_1[0] = "";
		        }else{
	                
	                    	normalizeRecord_tNormalize_1 = row11.upSustanciaActiva.split(",");
	                        
                }           
            }
             		lastNoEmptyIndex_tNormalize_1=normalizeRecord_tNormalize_1.length;
	             	
	             		if(lastNoEmptyIndex_tNormalize_1 == 1 && "".equals(normalizeRecord_tNormalize_1[0])){
	             			lastNoEmptyIndex_tNormalize_1 = 0;
	             		}
	             	
            	
            	for(int i_tNormalize_1 = 0 ; i_tNormalize_1 < lastNoEmptyIndex_tNormalize_1 ; i_tNormalize_1++) {
		  			
		            	if(normalizeRecord_tNormalize_1[i_tNormalize_1]!=null){
		            		normalizeRecord_tNormalize_1[i_tNormalize_1]=normalizeRecord_tNormalize_1[i_tNormalize_1].trim();
		            	}
		            
	                currentRecord_tNormalize_1 = new StringBuilder();
	                nb_line_tNormalize_1++;               
	                
	                                	tmp_tNormalize_1 = row11.upNGenerico == null ? null : String.valueOf(row11.upNGenerico);
	                                
		                            if(tmp_tNormalize_1 != null){
		                                currentRecord_tNormalize_1.append(tmp_tNormalize_1 + tmp_tNormalize_1.length());
		                            }
	                            
	                                	tmp_tNormalize_1 = row11.upConcentracion == null ? null : String.valueOf(row11.upConcentracion);
	                                
		                            if(tmp_tNormalize_1 != null){
		                                currentRecord_tNormalize_1.append(tmp_tNormalize_1 + tmp_tNormalize_1.length());
		                            }
	                            
	                                	tmp_tNormalize_1 = row11.upCodAtc == null ? null : String.valueOf(row11.upCodAtc);
	                                
		                            if(tmp_tNormalize_1 != null){
		                                currentRecord_tNormalize_1.append(tmp_tNormalize_1 + tmp_tNormalize_1.length());
		                            }
	                            
	                                	tmp_tNormalize_1 = row11.upViaAdmin == null ? null : String.valueOf(row11.upViaAdmin);
	                                
		                            if(tmp_tNormalize_1 != null){
		                                currentRecord_tNormalize_1.append(tmp_tNormalize_1 + tmp_tNormalize_1.length());
		                            }
	                            
	                                	tmp_tNormalize_1 = row11.upCatFarmacologica == null ? null : String.valueOf(row11.upCatFarmacologica);
	                                
		                            if(tmp_tNormalize_1 != null){
		                                currentRecord_tNormalize_1.append(tmp_tNormalize_1 + tmp_tNormalize_1.length());
		                            }
	                            
	                                	tmp_tNormalize_1 = row11.upFormFarmaceutica == null ? null : String.valueOf(row11.upFormFarmaceutica);
	                                
		                            if(tmp_tNormalize_1 != null){
		                                currentRecord_tNormalize_1.append(tmp_tNormalize_1 + tmp_tNormalize_1.length());
		                            }
	                            
	                                	tmp_tNormalize_1 = row11.upIdentificadorUnico == null ? null : String.valueOf(row11.upIdentificadorUnico);
	                                
		                            if(tmp_tNormalize_1 != null){
		                                currentRecord_tNormalize_1.append(tmp_tNormalize_1 + tmp_tNormalize_1.length());
		                            }
	                            
		                            if(normalizeRecord_tNormalize_1[i_tNormalize_1] != null) {
		                                currentRecord_tNormalize_1.append(normalizeRecord_tNormalize_1[i_tNormalize_1] + normalizeRecord_tNormalize_1[i_tNormalize_1].length());
		                            }
	                            
	                                	tmp_tNormalize_1 = row11.Estado_ == null ? null : String.valueOf(row11.Estado_);
	                                
		                            if(tmp_tNormalize_1 != null){
		                                currentRecord_tNormalize_1.append(tmp_tNormalize_1 + tmp_tNormalize_1.length());
		                            }
	                            
	                                	tmp_tNormalize_1 = row11._Insert == null ? null : String.valueOf(row11._Insert);
	                                
		                            if(tmp_tNormalize_1 != null){
		                                currentRecord_tNormalize_1.append(tmp_tNormalize_1 + tmp_tNormalize_1.length());
		                            }
	                            
	                                	tmp_tNormalize_1 = row11._Message == null ? null : String.valueOf(row11._Message);
	                                
		                            if(tmp_tNormalize_1 != null){
		                                currentRecord_tNormalize_1.append(tmp_tNormalize_1 + tmp_tNormalize_1.length());
		                            }
	                            
	                                	tmp_tNormalize_1 = row11.NGenerico == null ? null : String.valueOf(row11.NGenerico);
	                                
		                            if(tmp_tNormalize_1 != null){
		                                currentRecord_tNormalize_1.append(tmp_tNormalize_1 + tmp_tNormalize_1.length());
		                            }
	                            
	                                	tmp_tNormalize_1 = row11.Concentracion == null ? null : String.valueOf(row11.Concentracion);
	                                
		                            if(tmp_tNormalize_1 != null){
		                                currentRecord_tNormalize_1.append(tmp_tNormalize_1 + tmp_tNormalize_1.length());
		                            }
	                            
	                                	tmp_tNormalize_1 = row11.CodAtc == null ? null : String.valueOf(row11.CodAtc);
	                                
		                            if(tmp_tNormalize_1 != null){
		                                currentRecord_tNormalize_1.append(tmp_tNormalize_1 + tmp_tNormalize_1.length());
		                            }
	                            
	                                	tmp_tNormalize_1 = row11.ViaAdmin == null ? null : String.valueOf(row11.ViaAdmin);
	                                
		                            if(tmp_tNormalize_1 != null){
		                                currentRecord_tNormalize_1.append(tmp_tNormalize_1 + tmp_tNormalize_1.length());
		                            }
	                            
	                                	tmp_tNormalize_1 = row11.CatFarmacologica == null ? null : String.valueOf(row11.CatFarmacologica);
	                                
		                            if(tmp_tNormalize_1 != null){
		                                currentRecord_tNormalize_1.append(tmp_tNormalize_1 + tmp_tNormalize_1.length());
		                            }
	                            
	                                	tmp_tNormalize_1 = row11.FormFarmaceutica == null ? null : String.valueOf(row11.FormFarmaceutica);
	                                
		                            if(tmp_tNormalize_1 != null){
		                                currentRecord_tNormalize_1.append(tmp_tNormalize_1 + tmp_tNormalize_1.length());
		                            }
	                            
	                                	tmp_tNormalize_1 = row11.IdentificadorUnico == null ? null : String.valueOf(row11.IdentificadorUnico);
	                                
		                            if(tmp_tNormalize_1 != null){
		                                currentRecord_tNormalize_1.append(tmp_tNormalize_1 + tmp_tNormalize_1.length());
		                            }
	                            
	                                	tmp_tNormalize_1 = row11.SustanciaActiva == null ? null : String.valueOf(row11.SustanciaActiva);
	                                
		                            if(tmp_tNormalize_1 != null){
		                                currentRecord_tNormalize_1.append(tmp_tNormalize_1 + tmp_tNormalize_1.length());
		                            }
	                            
	                                	tmp_tNormalize_1 = String.valueOf(row11.ViaAdmin_Id_);
	                                
		                            if(tmp_tNormalize_1 != null){
		                                currentRecord_tNormalize_1.append(tmp_tNormalize_1 + tmp_tNormalize_1.length());
		                            }
	                            
	                                	tmp_tNormalize_1 = String.valueOf(row11.CatFarmacologica_Id_);
	                                
		                            if(tmp_tNormalize_1 != null){
		                                currentRecord_tNormalize_1.append(tmp_tNormalize_1 + tmp_tNormalize_1.length());
		                            }
	                            
	                                	tmp_tNormalize_1 = String.valueOf(row11.Sustancia_Activa_Id_);
	                                
		                            if(tmp_tNormalize_1 != null){
		                                currentRecord_tNormalize_1.append(tmp_tNormalize_1 + tmp_tNormalize_1.length());
		                            }
	                            
		                    if(!recordSet_tNormalize_1.contains(currentRecord_tNormalize_1.toString())) {
		                        recordSet_tNormalize_1.add(currentRecord_tNormalize_1.toString());
		                    } else {
		                        continue;
		                    }                    
		                
	                        	row37.upNGenerico = row11.upNGenerico;
	                        
	                        	row37.upConcentracion = row11.upConcentracion;
	                        
	                        	row37.upCodAtc = row11.upCodAtc;
	                        
	                        	row37.upViaAdmin = row11.upViaAdmin;
	                        
	                        	row37.upCatFarmacologica = row11.upCatFarmacologica;
	                        
	                        	row37.upFormFarmaceutica = row11.upFormFarmaceutica;
	                        
	                        	row37.upIdentificadorUnico = row11.upIdentificadorUnico;
	                        
	                        	row37.upSustanciaActiva = normalizeRecord_tNormalize_1[i_tNormalize_1];
		                    
	                        	row37.Estado_ = row11.Estado_;
	                        
	                        	row37._Insert = row11._Insert;
	                        
	                        	row37._Message = row11._Message;
	                        
	                        	row37.NGenerico = row11.NGenerico;
	                        
	                        	row37.Concentracion = row11.Concentracion;
	                        
	                        	row37.CodAtc = row11.CodAtc;
	                        
	                        	row37.ViaAdmin = row11.ViaAdmin;
	                        
	                        	row37.CatFarmacologica = row11.CatFarmacologica;
	                        
	                        	row37.FormFarmaceutica = row11.FormFarmaceutica;
	                        
	                        	row37.IdentificadorUnico = row11.IdentificadorUnico;
	                        
	                        	row37.SustanciaActiva = row11.SustanciaActiva;
	                        
	                        	row37.ViaAdmin_Id_ = row11.ViaAdmin_Id_;
	                        
	                        	row37.CatFarmacologica_Id_ = row11.CatFarmacologica_Id_;
	                        
	                        	row37.Sustancia_Activa_Id_ = row11.Sustancia_Activa_Id_;
	                        

 


	tos_count_tNormalize_1++;

/**
 * [tNormalize_1 main ] stop
 */
	
	/**
	 * [tNormalize_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tNormalize_1";
	
	

 



/**
 * [tNormalize_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_10 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row37"
						
						);
					}
					

    //Code generate according to input schema and output schema
row38.upNGenerico = row37.upNGenerico;
row38.upConcentracion = row37.upConcentracion;
row38.upCodAtc = row37.upCodAtc;
row38.upViaAdmin = row37.upViaAdmin;
row38.upCatFarmacologica = row37.upCatFarmacologica;
row38.upFormFarmaceutica = row37.upFormFarmaceutica;
row38.upIdentificadorUnico = row37.upIdentificadorUnico;
row38.upSustanciaActiva = row37.upSustanciaActiva;
row38.Estado_ = row37.Estado_;
row38._Insert = row37._Insert;
row38._Message = row37._Message;
row38.NGenerico = row37.NGenerico;
row38.Concentracion = row37.Concentracion;
row38.CodAtc = row37.CodAtc;
row38.ViaAdmin = row37.ViaAdmin;
row38.CatFarmacologica = row37.CatFarmacologica;
row38.FormFarmaceutica = row37.FormFarmaceutica;
row38.IdentificadorUnico = row37.IdentificadorUnico;
row38.SustanciaActiva = row37.SustanciaActiva;
row38.ViaAdmin_Id_ = row37.ViaAdmin_Id_;
row38.CatFarmacologica_Id_ = row37.CatFarmacologica_Id_;

    nb_line_tJavaRow_10++;   

 


	tos_count_tJavaRow_10++;

/**
 * [tJavaRow_10 main ] stop
 */
	
	/**
	 * [tJavaRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

 



/**
 * [tJavaRow_10 process_data_begin ] stop
 */

	
	/**
	 * [tJoin_4 main ] start
	 */

	

	
	
	currentComponent="tJoin_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row38"
						
						);
					}
					

			row17 = null;	
	
				row17 = new row17Struct();						
						row17.upNGenerico = row38.upNGenerico;					
						row17.upConcentracion = row38.upConcentracion;					
						row17.upCodAtc = row38.upCodAtc;					
						row17.upViaAdmin = row38.upViaAdmin;					
						row17.upCatFarmacologica = row38.upCatFarmacologica;					
						row17.upFormFarmaceutica = row38.upFormFarmaceutica;					
						row17.upIdentificadorUnico = row38.upIdentificadorUnico;					
						row17.upSustanciaActiva = row38.upSustanciaActiva;					
						row17.Estado_ = row38.Estado_;					
						row17._Insert = row38._Insert;					
						row17._Message = row38._Message;					
						row17.NGenerico = row38.NGenerico;					
						row17.Concentracion = row38.Concentracion;					
						row17.CodAtc = row38.CodAtc;					
						row17.ViaAdmin = row38.ViaAdmin;					
						row17.CatFarmacologica = row38.CatFarmacologica;					
						row17.FormFarmaceutica = row38.FormFarmaceutica;					
						row17.IdentificadorUnico = row38.IdentificadorUnico;					
						row17.SustanciaActiva = row38.SustanciaActiva;					
						row17.Cantidad = row38.Cantidad;					
						row17.ViaAdmin_Id_ = row38.ViaAdmin_Id_;					
						row17.CatFarmacologica_Id_ = row38.CatFarmacologica_Id_;

			if(util_tJoin_4.isJoined(row38)){ 			
								row17.Sustancia_Activa_Id_ = util_tJoin_4.lookupValue.ID;
			} 
			
///////////////////////    			

 


	tos_count_tJoin_4++;

/**
 * [tJoin_4 main ] stop
 */
	
	/**
	 * [tJoin_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJoin_4";
	
	

 



/**
 * [tJoin_4 process_data_begin ] stop
 */
// Start of branch "row17"
if(row17 != null) { 



	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_11 = false;
		boolean mainRowRejected_tMap_11 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
        // ###############################
        // # Output tables

copyOfoutViaAdmin = null;


// # Output table : 'copyOfoutViaAdmin'
copyOfoutViaAdmin_tmp.upNGenerico = row17.upNGenerico ;
copyOfoutViaAdmin_tmp.upConcentracion = row17.upConcentracion ;
copyOfoutViaAdmin_tmp.upCodAtc = row17.upCodAtc ;
copyOfoutViaAdmin_tmp.upViaAdmin = row17.upViaAdmin ;
copyOfoutViaAdmin_tmp.upCatFarmacologica = row17.upCatFarmacologica.trim().toUpperCase() ;
copyOfoutViaAdmin_tmp.upFormFarmaceutica = row17.upFormFarmaceutica ;
copyOfoutViaAdmin_tmp.upIdentificadorUnico = row17.upIdentificadorUnico;
copyOfoutViaAdmin_tmp.upSustanciaActiva = row17.upSustanciaActiva;
copyOfoutViaAdmin_tmp.Estado_ = row17.Estado_ ;
copyOfoutViaAdmin_tmp._Insert = row17._Insert ;
copyOfoutViaAdmin_tmp._Message = row17._Message ;
copyOfoutViaAdmin_tmp.NGenerico = row17.NGenerico ;
copyOfoutViaAdmin_tmp.Concentracion = row17.Concentracion ;
copyOfoutViaAdmin_tmp.CodAtc = row17.CodAtc ;
copyOfoutViaAdmin_tmp.ViaAdmin = row17.ViaAdmin ;
copyOfoutViaAdmin_tmp.CatFarmacologica = row17.CatFarmacologica ;
copyOfoutViaAdmin_tmp.FormFarmaceutica = row17.FormFarmaceutica ;
copyOfoutViaAdmin_tmp.IdentificadorUnico = row17.IdentificadorUnico;
copyOfoutViaAdmin_tmp.SustanciaActiva = row17.SustanciaActiva;
copyOfoutViaAdmin_tmp.ViaAdmin_Id_ = row17.ViaAdmin_Id_;
copyOfoutViaAdmin_tmp.CatFarmacologica_Id_ = row17.CatFarmacologica_Id_;
copyOfoutViaAdmin_tmp.Sustancia_Activa_Id_ = row17.Sustancia_Activa_Id_;
copyOfoutViaAdmin_tmp.Descripcion_ = row17.upNGenerico;
copyOfoutViaAdmin_tmp.Concentracion_ = row17.upConcentracion;
copyOfoutViaAdmin_tmp.Generico_Id_ = null;
copyOfoutViaAdmin_tmp.Respuesta_ = null;
copyOfoutViaAdmin = copyOfoutViaAdmin_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "copyOfoutViaAdmin"
if(copyOfoutViaAdmin != null) { 



	
	/**
	 * [tOracleSP_2 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfoutViaAdmin"
						
						);
					}
					

			// code for the argument 1 (NGenerico) of type 'IN CLOB'
    					if (copyOfoutViaAdmin.NGenerico == null) {
    						statement_tOracleSP_2.setNull(1, java.sql.Types.VARCHAR);
    					} else {
    					
                        java.sql.Clob clob_tOracleSP_2 = connection_tOracleSP_2.createClob();
                        clob_tOracleSP_2.setString(1, copyOfoutViaAdmin.NGenerico);
                        statement_tOracleSP_2.setClob(1, clob_tOracleSP_2);
    					}
    					
			// code for the argument 2 (Concentracion_) of type 'IN CLOB'
    					if (copyOfoutViaAdmin.Concentracion_ == null) {
    						statement_tOracleSP_2.setNull(2, java.sql.Types.VARCHAR);
    					} else {
    					
                        java.sql.Clob clob_tOracleSP_2 = connection_tOracleSP_2.createClob();
                        clob_tOracleSP_2.setString(1, copyOfoutViaAdmin.Concentracion_);
                        statement_tOracleSP_2.setClob(2, clob_tOracleSP_2);
    					}
    					
			// code for the argument 3 (ViaAdmin_Id_) of type 'IN NUMERIC'
    					if (copyOfoutViaAdmin.ViaAdmin_Id_ == null) {
    						statement_tOracleSP_2.setNull(3, java.sql.Types.OTHER);
    					} else {
    					
                        statement_tOracleSP_2.setBigDecimal(3, copyOfoutViaAdmin.ViaAdmin_Id_);
    					}
    					
			// code for the argument 4 (CatFarmacologica_Id_) of type 'IN NUMERIC'
    					if (copyOfoutViaAdmin.CatFarmacologica_Id_ == null) {
    						statement_tOracleSP_2.setNull(4, java.sql.Types.OTHER);
    					} else {
    					
                        statement_tOracleSP_2.setBigDecimal(4, copyOfoutViaAdmin.CatFarmacologica_Id_);
    					}
    					
			// code for the argument 5 (CodAtc) of type 'IN CLOB'
    					if (copyOfoutViaAdmin.CodAtc == null) {
    						statement_tOracleSP_2.setNull(5, java.sql.Types.VARCHAR);
    					} else {
    					
                        java.sql.Clob clob_tOracleSP_2 = connection_tOracleSP_2.createClob();
                        clob_tOracleSP_2.setString(1, copyOfoutViaAdmin.CodAtc);
                        statement_tOracleSP_2.setClob(5, clob_tOracleSP_2);
    					}
    					
			// code for the argument 6 (IdentificadorUnico) of type 'IN CLOB'
    					if (copyOfoutViaAdmin.IdentificadorUnico == null) {
    						statement_tOracleSP_2.setNull(6, java.sql.Types.VARCHAR);
    					} else {
    					
                        java.sql.Clob clob_tOracleSP_2 = connection_tOracleSP_2.createClob();
                        clob_tOracleSP_2.setString(1, copyOfoutViaAdmin.IdentificadorUnico);
                        statement_tOracleSP_2.setClob(6, clob_tOracleSP_2);
    					}
    					
			// code for the argument 7 (Generico_Id_) of type 'OUT NUMERIC'
					statement_tOracleSP_2.registerOutParameter(7, java.sql.Types.NUMERIC);
			// code for the argument 8 (Estado_) of type 'OUT AUTOMAPPING'
					statement_tOracleSP_2.registerOutParameter(8, java.sql.Types.VARCHAR);
			// code for the argument 9 (Respuesta_) of type 'OUT AUTOMAPPING'
					statement_tOracleSP_2.registerOutParameter(9, java.sql.Types.VARCHAR);
		statement_tOracleSP_2.execute();
		
										row12.upNGenerico = copyOfoutViaAdmin.upNGenerico;
										
										row12.upConcentracion = copyOfoutViaAdmin.upConcentracion;
										
										row12.upCodAtc = copyOfoutViaAdmin.upCodAtc;
										
										row12.upViaAdmin = copyOfoutViaAdmin.upViaAdmin;
										
										row12.upCatFarmacologica = copyOfoutViaAdmin.upCatFarmacologica;
										
										row12.upFormFarmaceutica = copyOfoutViaAdmin.upFormFarmaceutica;
										
										row12.upIdentificadorUnico = copyOfoutViaAdmin.upIdentificadorUnico;
										
										row12.upSustanciaActiva = copyOfoutViaAdmin.upSustanciaActiva;
										
									row12.Estado_ = statement_tOracleSP_2.getString(8);
									
									if (statement_tOracleSP_2.wasNull()) {
										row12.Estado_ = null;
									}
									
										row12._Insert = copyOfoutViaAdmin._Insert;
										
										row12._Message = copyOfoutViaAdmin._Message;
										
								row12.NGenerico = copyOfoutViaAdmin.NGenerico;
								
										row12.Concentracion = copyOfoutViaAdmin.Concentracion;
										
								row12.CodAtc = copyOfoutViaAdmin.CodAtc;
								
										row12.ViaAdmin = copyOfoutViaAdmin.ViaAdmin;
										
										row12.CatFarmacologica = copyOfoutViaAdmin.CatFarmacologica;
										
										row12.FormFarmaceutica = copyOfoutViaAdmin.FormFarmaceutica;
										
								row12.IdentificadorUnico = copyOfoutViaAdmin.IdentificadorUnico;
								
										row12.SustanciaActiva = copyOfoutViaAdmin.SustanciaActiva;
										
								row12.ViaAdmin_Id_ = copyOfoutViaAdmin.ViaAdmin_Id_;
								
								row12.CatFarmacologica_Id_ = copyOfoutViaAdmin.CatFarmacologica_Id_;
								
										row12.Sustancia_Activa_Id_ = copyOfoutViaAdmin.Sustancia_Activa_Id_;
										
										row12.Descripcion_ = copyOfoutViaAdmin.Descripcion_;
										
								row12.Concentracion_ = copyOfoutViaAdmin.Concentracion_;
								
									row12.Generico_Id_ = statement_tOracleSP_2.getBigDecimal(7);
									
									if (statement_tOracleSP_2.wasNull()) {
										row12.Generico_Id_ = null;
									}
									
									row12.Respuesta_ = statement_tOracleSP_2.getString(9);
									
									if (statement_tOracleSP_2.wasNull()) {
										row12.Respuesta_ = null;
									}
									

 


	tos_count_tOracleSP_2++;

/**
 * [tOracleSP_2 main ] stop
 */
	
	/**
	 * [tOracleSP_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 process_data_begin ] stop
 */

	
	/**
	 * [tReplicate_2 main ] start
	 */

	

	
	
	currentComponent="tReplicate_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					


	row33 = new row33Struct();
						
	row33.upNGenerico = row12.upNGenerico;								
	row33.upConcentracion = row12.upConcentracion;								
	row33.upCodAtc = row12.upCodAtc;								
	row33.upViaAdmin = row12.upViaAdmin;								
	row33.upCatFarmacologica = row12.upCatFarmacologica;								
	row33.upFormFarmaceutica = row12.upFormFarmaceutica;								
	row33.upIdentificadorUnico = row12.upIdentificadorUnico;								
	row33.upSustanciaActiva = row12.upSustanciaActiva;								
	row33.Estado_ = row12.Estado_;								
	row33._Insert = row12._Insert;								
	row33._Message = row12._Message;								
	row33.NGenerico = row12.NGenerico;								
	row33.Concentracion = row12.Concentracion;								
	row33.CodAtc = row12.CodAtc;								
	row33.ViaAdmin = row12.ViaAdmin;								
	row33.CatFarmacologica = row12.CatFarmacologica;								
	row33.FormFarmaceutica = row12.FormFarmaceutica;								
	row33.IdentificadorUnico = row12.IdentificadorUnico;								
	row33.SustanciaActiva = row12.SustanciaActiva;								
	row33.ViaAdmin_Id_ = row12.ViaAdmin_Id_;								
	row33.CatFarmacologica_Id_ = row12.CatFarmacologica_Id_;								
	row33.Sustancia_Activa_Id_ = row12.Sustancia_Activa_Id_;								
	row33.Descripcion_ = row12.Descripcion_;								
	row33.Concentracion_ = row12.Concentracion_;								
	row33.Generico_Id_ = row12.Generico_Id_;								
	row33.Respuesta_ = row12.Respuesta_;			


 


	tos_count_tReplicate_2++;

/**
 * [tReplicate_2 main ] stop
 */
	
	/**
	 * [tReplicate_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplicate_2";
	
	

 



/**
 * [tReplicate_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_6 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row33"
						
						);
					}
					

    //Code generate according to input schema and output schema
row24.upNGenerico = row33.upNGenerico;
row24.upConcentracion = row33.upConcentracion;
row24.upCodAtc = row33.upCodAtc;
row24.upViaAdmin = row33.upViaAdmin;
row24.upCatFarmacologica = row33.upCatFarmacologica;
row24.upFormFarmaceutica = row33.upFormFarmaceutica;
row24.upIdentificadorUnico = row33.upIdentificadorUnico;
row24.upSustanciaActiva = row33.upSustanciaActiva;
row24.Estado_ = row33.Estado_;
row24._Insert = row33._Insert;
row24._Message = row33._Message;
row24.NGenerico = row33.NGenerico;
row24.Concentracion = row33.Concentracion;
row24.CodAtc = row33.CodAtc;
row24.ViaAdmin = row33.ViaAdmin;
row24.CatFarmacologica = row33.CatFarmacologica;
row24.FormFarmaceutica = row33.FormFarmaceutica;
row24.IdentificadorUnico = row33.IdentificadorUnico;
row24.SustanciaActiva = row33.SustanciaActiva;
row24.ViaAdmin_Id_ = row33.ViaAdmin_Id_;
row24.CatFarmacologica_Id_ = row33.CatFarmacologica_Id_;
row24.Sustancia_Activa_Id_ = row33.Sustancia_Activa_Id_;
row24.Descripcion_ = row33.Descripcion_;
row24.Concentracion_ = row33.Concentracion_;
row24.Generico_Id_ = row33.Generico_Id_;
row24.Respuesta_ = row33.Respuesta_;


//System.out.println("antes de " + row33.upFormFarmaceutica);

//if(Utils.empty(row33.Generico_Id_) == false){
/*if(row33.Generico_Id_ != null){
	row24._Insert = "No";
	if( row24.Estado_== null){
		row24.Estado_ = "Erróneo";
		row24._Message = "Generico ya registrado; \n";				
	}else{
		if( row24.Estado_.equals("Actualización")==true){
			row24._Message =row33.NGenerico + " " + "Generico actualizado con forma farmacéutica; \n";
		}else{
			row24._Message = row24.Respuesta_ + "; \n";				
		}		
	}
			
	//	
	/*if( row24.Estado_.equals("Actualización")==true){
		row24._Insert = "No";
		row24._Message = "Generico actualizado con forma farmacéutica; \n";
	}	
	else{
		if( row24.Estado_== null){
			row24.Estado_ = "Erróneo";
			row24._Insert = "No";
			row24._Message = "Generico ya registrado; \n";				
		}else{
			row24._Insert = "No";
			row24._Message = row24.Respuesta_ + "; \n";				
		}
	}
}*/

if(row33.Generico_Id_ != null)
  {
        row24.Estado_ = "Erróneo";
		row24._Message = "Generico ya registrado; \n";
  }

/*if(row33.Generico_Id_ != null){
	row24.Estado_ = "Erróneo";
	row24._Insert = "No";
	row24._Message = "Generico ya registrado; \n";
}*/

if(row24.upFormFarmaceutica.contains("(*)") == false){
	row24.upFormFarmaceutica = Utils.mayusculasSinAcentos(row33.FormFarmaceutica);
}

if(row24._Message != null){
	row24.Estado_ = "Erróneo";
}
    nb_line_tJavaRow_6++;   

 


	tos_count_tJavaRow_6++;

/**
 * [tJavaRow_6 main ] stop
 */
	
	/**
	 * [tJavaRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 process_data_begin ] stop
 */

	
	/**
	 * [tNormalize_2 main ] start
	 */

	

	
	
	currentComponent="tNormalize_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row24"
						
						);
					}
					

            normalizeRecord_tNormalize_2 = new String[1];
            if(row24.upFormFarmaceutica != null) {
				if("".equals(row24.upFormFarmaceutica)){
		        	normalizeRecord_tNormalize_2[0] = "";
		        }else{
	                
	                    	normalizeRecord_tNormalize_2 = row24.upFormFarmaceutica.split(",");
	                        
                }           
            }
             		lastNoEmptyIndex_tNormalize_2=normalizeRecord_tNormalize_2.length;
	             	
	             		if(lastNoEmptyIndex_tNormalize_2 == 1 && "".equals(normalizeRecord_tNormalize_2[0])){
	             			lastNoEmptyIndex_tNormalize_2 = 0;
	             		}
	             	
            	
            	for(int i_tNormalize_2 = 0 ; i_tNormalize_2 < lastNoEmptyIndex_tNormalize_2 ; i_tNormalize_2++) {
		  			
		            	if(normalizeRecord_tNormalize_2[i_tNormalize_2]!=null){
		            		normalizeRecord_tNormalize_2[i_tNormalize_2]=normalizeRecord_tNormalize_2[i_tNormalize_2].trim();
		            	}
		            
	                currentRecord_tNormalize_2 = new StringBuilder();
	                nb_line_tNormalize_2++;               
	                
	                                	tmp_tNormalize_2 = row24.upNGenerico == null ? null : String.valueOf(row24.upNGenerico);
	                                
		                            if(tmp_tNormalize_2 != null){
		                                currentRecord_tNormalize_2.append(tmp_tNormalize_2 + tmp_tNormalize_2.length());
		                            }
	                            
	                                	tmp_tNormalize_2 = row24.upConcentracion == null ? null : String.valueOf(row24.upConcentracion);
	                                
		                            if(tmp_tNormalize_2 != null){
		                                currentRecord_tNormalize_2.append(tmp_tNormalize_2 + tmp_tNormalize_2.length());
		                            }
	                            
	                                	tmp_tNormalize_2 = row24.upCodAtc == null ? null : String.valueOf(row24.upCodAtc);
	                                
		                            if(tmp_tNormalize_2 != null){
		                                currentRecord_tNormalize_2.append(tmp_tNormalize_2 + tmp_tNormalize_2.length());
		                            }
	                            
	                                	tmp_tNormalize_2 = row24.upViaAdmin == null ? null : String.valueOf(row24.upViaAdmin);
	                                
		                            if(tmp_tNormalize_2 != null){
		                                currentRecord_tNormalize_2.append(tmp_tNormalize_2 + tmp_tNormalize_2.length());
		                            }
	                            
	                                	tmp_tNormalize_2 = row24.upCatFarmacologica == null ? null : String.valueOf(row24.upCatFarmacologica);
	                                
		                            if(tmp_tNormalize_2 != null){
		                                currentRecord_tNormalize_2.append(tmp_tNormalize_2 + tmp_tNormalize_2.length());
		                            }
	                            
		                            if(normalizeRecord_tNormalize_2[i_tNormalize_2] != null) {
		                                currentRecord_tNormalize_2.append(normalizeRecord_tNormalize_2[i_tNormalize_2] + normalizeRecord_tNormalize_2[i_tNormalize_2].length());
		                            }
	                            
	                                	tmp_tNormalize_2 = row24.upIdentificadorUnico == null ? null : String.valueOf(row24.upIdentificadorUnico);
	                                
		                            if(tmp_tNormalize_2 != null){
		                                currentRecord_tNormalize_2.append(tmp_tNormalize_2 + tmp_tNormalize_2.length());
		                            }
	                            
	                                	tmp_tNormalize_2 = row24.upSustanciaActiva == null ? null : String.valueOf(row24.upSustanciaActiva);
	                                
		                            if(tmp_tNormalize_2 != null){
		                                currentRecord_tNormalize_2.append(tmp_tNormalize_2 + tmp_tNormalize_2.length());
		                            }
	                            
	                                	tmp_tNormalize_2 = row24.Estado_ == null ? null : String.valueOf(row24.Estado_);
	                                
		                            if(tmp_tNormalize_2 != null){
		                                currentRecord_tNormalize_2.append(tmp_tNormalize_2 + tmp_tNormalize_2.length());
		                            }
	                            
	                                	tmp_tNormalize_2 = row24._Insert == null ? null : String.valueOf(row24._Insert);
	                                
		                            if(tmp_tNormalize_2 != null){
		                                currentRecord_tNormalize_2.append(tmp_tNormalize_2 + tmp_tNormalize_2.length());
		                            }
	                            
	                                	tmp_tNormalize_2 = row24._Message == null ? null : String.valueOf(row24._Message);
	                                
		                            if(tmp_tNormalize_2 != null){
		                                currentRecord_tNormalize_2.append(tmp_tNormalize_2 + tmp_tNormalize_2.length());
		                            }
	                            
	                                	tmp_tNormalize_2 = row24.NGenerico == null ? null : String.valueOf(row24.NGenerico);
	                                
		                            if(tmp_tNormalize_2 != null){
		                                currentRecord_tNormalize_2.append(tmp_tNormalize_2 + tmp_tNormalize_2.length());
		                            }
	                            
	                                	tmp_tNormalize_2 = row24.Concentracion == null ? null : String.valueOf(row24.Concentracion);
	                                
		                            if(tmp_tNormalize_2 != null){
		                                currentRecord_tNormalize_2.append(tmp_tNormalize_2 + tmp_tNormalize_2.length());
		                            }
	                            
	                                	tmp_tNormalize_2 = row24.CodAtc == null ? null : String.valueOf(row24.CodAtc);
	                                
		                            if(tmp_tNormalize_2 != null){
		                                currentRecord_tNormalize_2.append(tmp_tNormalize_2 + tmp_tNormalize_2.length());
		                            }
	                            
	                                	tmp_tNormalize_2 = row24.ViaAdmin == null ? null : String.valueOf(row24.ViaAdmin);
	                                
		                            if(tmp_tNormalize_2 != null){
		                                currentRecord_tNormalize_2.append(tmp_tNormalize_2 + tmp_tNormalize_2.length());
		                            }
	                            
	                                	tmp_tNormalize_2 = row24.CatFarmacologica == null ? null : String.valueOf(row24.CatFarmacologica);
	                                
		                            if(tmp_tNormalize_2 != null){
		                                currentRecord_tNormalize_2.append(tmp_tNormalize_2 + tmp_tNormalize_2.length());
		                            }
	                            
	                                	tmp_tNormalize_2 = row24.FormFarmaceutica == null ? null : String.valueOf(row24.FormFarmaceutica);
	                                
		                            if(tmp_tNormalize_2 != null){
		                                currentRecord_tNormalize_2.append(tmp_tNormalize_2 + tmp_tNormalize_2.length());
		                            }
	                            
	                                	tmp_tNormalize_2 = row24.IdentificadorUnico == null ? null : String.valueOf(row24.IdentificadorUnico);
	                                
		                            if(tmp_tNormalize_2 != null){
		                                currentRecord_tNormalize_2.append(tmp_tNormalize_2 + tmp_tNormalize_2.length());
		                            }
	                            
	                                	tmp_tNormalize_2 = row24.SustanciaActiva == null ? null : String.valueOf(row24.SustanciaActiva);
	                                
		                            if(tmp_tNormalize_2 != null){
		                                currentRecord_tNormalize_2.append(tmp_tNormalize_2 + tmp_tNormalize_2.length());
		                            }
	                            
	                                	tmp_tNormalize_2 = String.valueOf(row24.ViaAdmin_Id_);
	                                
		                            if(tmp_tNormalize_2 != null){
		                                currentRecord_tNormalize_2.append(tmp_tNormalize_2 + tmp_tNormalize_2.length());
		                            }
	                            
	                                	tmp_tNormalize_2 = String.valueOf(row24.CatFarmacologica_Id_);
	                                
		                            if(tmp_tNormalize_2 != null){
		                                currentRecord_tNormalize_2.append(tmp_tNormalize_2 + tmp_tNormalize_2.length());
		                            }
	                            
	                                	tmp_tNormalize_2 = String.valueOf(row24.Sustancia_Activa_Id_);
	                                
		                            if(tmp_tNormalize_2 != null){
		                                currentRecord_tNormalize_2.append(tmp_tNormalize_2 + tmp_tNormalize_2.length());
		                            }
	                            
	                                	tmp_tNormalize_2 = row24.Descripcion_ == null ? null : String.valueOf(row24.Descripcion_);
	                                
		                            if(tmp_tNormalize_2 != null){
		                                currentRecord_tNormalize_2.append(tmp_tNormalize_2 + tmp_tNormalize_2.length());
		                            }
	                            
	                                	tmp_tNormalize_2 = row24.Concentracion_ == null ? null : String.valueOf(row24.Concentracion_);
	                                
		                            if(tmp_tNormalize_2 != null){
		                                currentRecord_tNormalize_2.append(tmp_tNormalize_2 + tmp_tNormalize_2.length());
		                            }
	                            
	                                	tmp_tNormalize_2 = String.valueOf(row24.Generico_Id_);
	                                
		                            if(tmp_tNormalize_2 != null){
		                                currentRecord_tNormalize_2.append(tmp_tNormalize_2 + tmp_tNormalize_2.length());
		                            }
	                            
	                                	tmp_tNormalize_2 = row24.Respuesta_ == null ? null : String.valueOf(row24.Respuesta_);
	                                
		                            if(tmp_tNormalize_2 != null){
		                                currentRecord_tNormalize_2.append(tmp_tNormalize_2 + tmp_tNormalize_2.length());
		                            }
	                            
		                    if(!recordSet_tNormalize_2.contains(currentRecord_tNormalize_2.toString())) {
		                        recordSet_tNormalize_2.add(currentRecord_tNormalize_2.toString());
		                    } else {
		                        continue;
		                    }                    
		                
	                        	row14.upNGenerico = row24.upNGenerico;
	                        
	                        	row14.upConcentracion = row24.upConcentracion;
	                        
	                        	row14.upCodAtc = row24.upCodAtc;
	                        
	                        	row14.upViaAdmin = row24.upViaAdmin;
	                        
	                        	row14.upCatFarmacologica = row24.upCatFarmacologica;
	                        
	                        	row14.upFormFarmaceutica = normalizeRecord_tNormalize_2[i_tNormalize_2];
		                    
	                        	row14.upIdentificadorUnico = row24.upIdentificadorUnico;
	                        
	                        	row14.upSustanciaActiva = row24.upSustanciaActiva;
	                        
	                        	row14.Estado_ = row24.Estado_;
	                        
	                        	row14._Insert = row24._Insert;
	                        
	                        	row14._Message = row24._Message;
	                        
	                        	row14.NGenerico = row24.NGenerico;
	                        
	                        	row14.Concentracion = row24.Concentracion;
	                        
	                        	row14.CodAtc = row24.CodAtc;
	                        
	                        	row14.ViaAdmin = row24.ViaAdmin;
	                        
	                        	row14.CatFarmacologica = row24.CatFarmacologica;
	                        
	                        	row14.FormFarmaceutica = row24.FormFarmaceutica;
	                        
	                        	row14.IdentificadorUnico = row24.IdentificadorUnico;
	                        
	                        	row14.SustanciaActiva = row24.SustanciaActiva;
	                        
	                        	row14.ViaAdmin_Id_ = row24.ViaAdmin_Id_;
	                        
	                        	row14.CatFarmacologica_Id_ = row24.CatFarmacologica_Id_;
	                        
	                        	row14.Sustancia_Activa_Id_ = row24.Sustancia_Activa_Id_;
	                        
	                        	row14.Descripcion_ = row24.Descripcion_;
	                        
	                        	row14.Concentracion_ = row24.Concentracion_;
	                        
	                        	row14.Generico_Id_ = row24.Generico_Id_;
	                        
	                        	row14.Respuesta_ = row24.Respuesta_;
	                        

 


	tos_count_tNormalize_2++;

/**
 * [tNormalize_2 main ] stop
 */
	
	/**
	 * [tNormalize_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tNormalize_2";
	
	

 



/**
 * [tNormalize_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					

    //Code generate according to input schema and output schema
row39.upNGenerico = row14.upNGenerico;
row39.upConcentracion = row14.upConcentracion;
row39.upCodAtc = row14.upCodAtc;
row39.upViaAdmin = row14.upViaAdmin;
row39.upCatFarmacologica = row14.upCatFarmacologica;
row39.upFormFarmaceutica = row14.upFormFarmaceutica;
row39.upIdentificadorUnico = row14.upIdentificadorUnico;
row39.upSustanciaActiva = row14.upSustanciaActiva;
row39.Estado_ = row14.Estado_;
row39._Insert = row14._Insert;
row39._Message = row14._Message;
row39.NGenerico = row14.NGenerico;
row39.Concentracion = row14.Concentracion;
row39.CodAtc = row14.CodAtc;
row39.ViaAdmin = row14.ViaAdmin;
row39.CatFarmacologica = row14.CatFarmacologica;
row39.FormFarmaceutica = row14.FormFarmaceutica;
row39.IdentificadorUnico = row14.IdentificadorUnico;
row39.SustanciaActiva = row14.SustanciaActiva;
row39.ViaAdmin_Id_ = row14.ViaAdmin_Id_;
row39.CatFarmacologica_Id_ = row14.CatFarmacologica_Id_;
row39.Sustancia_Activa_Id_ = row14.Sustancia_Activa_Id_;
row39.Descripcion_ = row14.Descripcion_;
row39.Concentracion_ = row14.Concentracion_;
row39.Generico_Id_ = row14.Generico_Id_;



//System.out.println("despues de " + row39.FormFarmaceutica);
    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */

	
	/**
	 * [tJoin_1 main ] start
	 */

	

	
	
	currentComponent="tJoin_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row39"
						
						);
					}
					

			row16 = null;	
	
				row16 = new row16Struct();						
						row16.upNGenerico = row39.upNGenerico;					
						row16.upConcentracion = row39.upConcentracion;					
						row16.upCodAtc = row39.upCodAtc;					
						row16.upViaAdmin = row39.upViaAdmin;					
						row16.upCatFarmacologica = row39.upCatFarmacologica;					
						row16.upFormFarmaceutica = row39.upFormFarmaceutica;					
						row16.upIdentificadorUnico = row39.upIdentificadorUnico;					
						row16.upSustanciaActiva = row39.upSustanciaActiva;					
						row16.Estado_ = row39.Estado_;					
						row16._Insert = row39._Insert;					
						row16._Message = row39._Message;					
						row16.NGenerico = row39.NGenerico;					
						row16.Concentracion = row39.Concentracion;					
						row16.CodAtc = row39.CodAtc;					
						row16.ViaAdmin = row39.ViaAdmin;					
						row16.CatFarmacologica = row39.CatFarmacologica;					
						row16.FormFarmaceutica = row39.FormFarmaceutica;					
						row16.IdentificadorUnico = row39.IdentificadorUnico;					
						row16.SustanciaActiva = row39.SustanciaActiva;					
						row16.ViaAdmin_Id_ = row39.ViaAdmin_Id_;					
						row16.CatFarmacologica_Id_ = row39.CatFarmacologica_Id_;					
						row16.Sustancia_Activa_Id_ = row39.Sustancia_Activa_Id_;					
						row16.Descripcion_ = row39.Descripcion_;					
						row16.Concentracion_ = row39.Concentracion_;					
						row16.Generico_Id_ = row39.Generico_Id_;

			if(util_tJoin_1.isJoined(row39)){ 			
								row16.FormFarmaceutica_Id = util_tJoin_1.lookupValue.ID;
			} 
			
///////////////////////    			

 


	tos_count_tJoin_1++;

/**
 * [tJoin_1 main ] stop
 */
	
	/**
	 * [tJoin_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJoin_1";
	
	

 



/**
 * [tJoin_1 process_data_begin ] stop
 */
// Start of branch "row16"
if(row16 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

next_3 = null;


// # Output table : 'next_3'
next_3_tmp.upNGenerico = row16.upNGenerico;
next_3_tmp.upConcentracion = row16.upConcentracion;
next_3_tmp.upCodAtc = row16.upCodAtc;
next_3_tmp.upViaAdmin = row16.upViaAdmin;
next_3_tmp.upCatFarmacologica = row16.upCatFarmacologica;
next_3_tmp.upFormFarmaceutica = row16.upFormFarmaceutica;
next_3_tmp.upIdentificadorUnico = row16.upIdentificadorUnico;
next_3_tmp.upSustanciaActiva = row16.upSustanciaActiva;
next_3_tmp.Estado_ = row16.Estado_;
next_3_tmp._Insert = row16._Insert;
next_3_tmp._Message = row16._Message;
next_3_tmp.NGenerico_ = row16.NGenerico;
next_3_tmp.Concentracion_ = row16.Concentracion;
next_3_tmp.CodAtc_ = row16.CodAtc;
next_3_tmp.ViaAdmin_ = row16.ViaAdmin;
next_3_tmp.CatFarmacologica_ = row16.CatFarmacologica;
next_3_tmp.FormFarmaceutica_ = row16.FormFarmaceutica;
next_3_tmp.IdentificadorUnico = row16.IdentificadorUnico;
next_3_tmp.SustanciaActiva = row16.SustanciaActiva;
next_3_tmp.ViaAdmin_Id_ = row16.ViaAdmin_Id_;
next_3_tmp.CatFarmacologica_Id = row16.CatFarmacologica_Id_;
next_3_tmp.Sustancia_Activa_Id_ = row16.Sustancia_Activa_Id_;
next_3_tmp.CatFarmacologica_Id_ = null;
next_3_tmp.Generico_Id_ = row16.Generico_Id_;
next_3_tmp.FormFarmaceutica_Id = row16.FormFarmaceutica_Id ;
next_3_tmp.FormFarmaceuticas_Ids_ = null;
next_3 = next_3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "next_3"
if(next_3 != null) { 



	
	/**
	 * [tJavaRow_4 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"next_3"
						
						);
					}
					

    //Code generate according to input schema and output schema
row18.upNGenerico = next_3.upNGenerico;
row18.upConcentracion = next_3.upConcentracion;
row18.upCodAtc = next_3.upCodAtc;
row18.upViaAdmin = next_3.upViaAdmin;
row18.upCatFarmacologica = next_3.upCatFarmacologica;
row18.upFormFarmaceutica = next_3.upFormFarmaceutica;
row18.upIdentificadorUnico = next_3.upIdentificadorUnico;
row18.upSustanciaActiva = next_3.upSustanciaActiva;
row18.Estado_ = next_3.Estado_;
row18._Insert = next_3._Insert;
row18._Message = next_3._Message;
row18.NGenerico_ = next_3.NGenerico_;
row18.Concentracion_ = next_3.Concentracion_;
row18.CodAtc_ = next_3.CodAtc_;
row18.ViaAdmin_ = next_3.ViaAdmin_;
row18.CatFarmacologica_ = next_3.CatFarmacologica_;
row18.FormFarmaceutica_ = next_3.FormFarmaceutica_;
row18.IdentificadorUnico = next_3.IdentificadorUnico;
row18.SustanciaActiva = next_3.SustanciaActiva;
row18.ViaAdmin_Id_ = next_3.ViaAdmin_Id_;
row18.CatFarmacologica_Id = next_3.CatFarmacologica_Id;
row18.CatFarmacologica_Id_ = next_3.CatFarmacologica_Id_;
row18.Sustancia_Activa_Id_ = next_3.Sustancia_Activa_Id_;
row18.Generico_Id_ = next_3.Generico_Id_;
row18.FormFarmaceutica_Id = next_3.FormFarmaceutica_Id;
row18.FormFarmaceuticas_Ids_ = next_3.FormFarmaceuticas_Ids_;
row18._Message = next_3._Message;



if(next_3.FormFarmaceutica_ != null && next_3.FormFarmaceutica_Id == null){
	//row18.upFormFarmaceutica = next_3.FormFarmaceutica_ + " | No Registrada";
	row18._Message = next_3.upFormFarmaceutica + " ;" +"Forma farmaceutica no registrada; \n"; 
	row18.Estado_ = "Erróneo";
	row18._Insert = "No";
}

if( next_3.Sustancia_Activa_Id_ == null){
	//row18.upSustanciaActiva = next_3.upSustanciaActiva + " | No Registrada";
	row18._Message = next_3.upSustanciaActiva + " ;" +"Sustancia activa no registrada; \n"; 
	row18.Estado_ = "Erróneo";
	row18._Insert = "No";
}

if(StringHandling.LEN(next_3.Concentracion_) > 500){
	//row18.upConcentracion = next_3.Concentracion_ + " | Supera el numero de caracteres permitidos (200)"; 
	row18._Message = next_3.Concentracion_ + " ;" +"La cadena de caracteres es mayor a la permitida (200); \n";
	row18.Estado_ = "Erróneo";
	row18._Insert = "No";
}

if(StringHandling.LEN(next_3.NGenerico_) > 350){
	//row18.upNGenerico = next_3.NGenerico_ + " | Caracteres maximos permitidos (350)";
	row18._Message = next_3.NGenerico_ + " ;" +"La cadena de caracteres es mayor a la permitida(350); \n"; 
	row18.Estado_ = "Erróneo";
	row18._Insert = "No";
}

if(StringHandling.LEN(next_3.CodAtc_) > 20){
	//row18.upCodAtc = next_3.CodAtc_ + " | Supera el numero de caracteres permitidos (20)";
	row18._Message = next_3.CodAtc_ + " ;" +"La cadena de caracteres es mayor a la permitida(20); \n"; 
	row18.Estado_ = "Erróneo";
	row18._Insert = "No";
}

if(StringHandling.LEN(next_3.IdentificadorUnico) > 20){
	//row18.upIdentificadorUnico = next_3.IdentificadorUnico + " | Supera el numero de caracteres permitidos (20)";
	row18._Message = next_3.IdentificadorUnico + " ;" +"La cadena de caracteres es mayor a la permitida(20); \n"; 
	row18.Estado_ = "Erróneo";
	row18._Insert = "No";
}


/*if( next_3.CatFarmacologica_Id != null ){ row18.CatFarmacologica_Id_ = next_3.CatFarmacologica_Id.toString(); }
else { row18.CatFarmacologica_Id_  = ""; }*/

if( next_3.FormFarmaceutica_Id != null ){ row18.FormFarmaceuticas_Ids_ = next_3.FormFarmaceutica_Id.toString(); }
else { row18.FormFarmaceuticas_Ids_  = ""; }

if( next_3.Concentracion_ != null ){ row18.Concentracion_ = next_3.Concentracion_.toString(); }
else { row18.Concentracion_  = ""; }
    nb_line_tJavaRow_4++;   

 


	tos_count_tJavaRow_4++;

/**
 * [tJavaRow_4 main ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

next_4 = null;


// # Output table : 'next_4'
next_4_tmp.upNGenerico = row18.upNGenerico ;
next_4_tmp.upConcentracion = row18.upConcentracion ;
next_4_tmp.upCodAtc = row18.upCodAtc ;
next_4_tmp.upViaAdmin = row18.upViaAdmin ;
next_4_tmp.upCatFarmacologica = row18.upCatFarmacologica ;
next_4_tmp.upFormFarmaceutica = row18.upFormFarmaceutica ;
next_4_tmp.upIdentificadorUnico = row18.upIdentificadorUnico;
next_4_tmp.upSustanciaActiva = row18.upSustanciaActiva;
next_4_tmp.Estado_ = row18.Estado_ ;
next_4_tmp._Insert = row18._Insert ;
next_4_tmp._Message = row18._Message ;
next_4_tmp.NGenerico_ = row18.NGenerico_ ;
next_4_tmp.Concentracion_ = row18.Concentracion_ ;
next_4_tmp.CodAtc_ = row18.CodAtc_ ;
next_4_tmp.ViaAdmin_ = row18.ViaAdmin_ ;
next_4_tmp.CatFarmacologica_ = row18.CatFarmacologica_ ;
next_4_tmp.FormFarmaceutica_ = row18.FormFarmaceutica_ ;
next_4_tmp.IdentificadorUnico = row18.IdentificadorUnico;
next_4_tmp.SustanciaActiva = row18.SustanciaActiva;
next_4_tmp.ViaAdmin_Id_ = row18.ViaAdmin_Id_ ;
next_4_tmp.CatFarmacologica_Id = row18.CatFarmacologica_Id ;
next_4_tmp.Sustancia_Activa_Id_ = row18.Sustancia_Activa_Id_;
next_4_tmp.CatFarmacologica_Id_ = row18.CatFarmacologica_Id_;
next_4_tmp.Generico_Id_ = row18.Generico_Id_ ;
next_4_tmp.FormFarmaceutica_Id = row18.FormFarmaceutica_Id;
next_4_tmp.FormFarmaceutica_Ids_ = row18.FormFarmaceuticas_Ids_ ;
next_4_tmp.Id_ = null;
next_4 = next_4_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "next_4"
if(next_4 != null) { 



	
	/**
	 * [tDenormalize_1_DenormalizeOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"next_4"
						
						);
					}
					

if(hash_upNGenerico_tDenormalize_1_DenormalizeOut.containsKey(next_4.upNGenerico)){
	hash_upConcentracion_tDenormalize_1_DenormalizeOut = hash_upNGenerico_tDenormalize_1_DenormalizeOut.get(next_4.upNGenerico);                    
}else{
	hash_upConcentracion_tDenormalize_1_DenormalizeOut = new java.util.HashMap<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>>>>>>>>>>>>>();
	hash_upNGenerico_tDenormalize_1_DenormalizeOut.put(next_4.upNGenerico,hash_upConcentracion_tDenormalize_1_DenormalizeOut);
}
if(hash_upConcentracion_tDenormalize_1_DenormalizeOut.containsKey(next_4.upConcentracion)){
	hash_upCodAtc_tDenormalize_1_DenormalizeOut = hash_upConcentracion_tDenormalize_1_DenormalizeOut.get(next_4.upConcentracion);                    
}else{
	hash_upCodAtc_tDenormalize_1_DenormalizeOut = new java.util.HashMap<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>>>>>>>>>>>>();
	hash_upConcentracion_tDenormalize_1_DenormalizeOut.put(next_4.upConcentracion,hash_upCodAtc_tDenormalize_1_DenormalizeOut);
}
if(hash_upCodAtc_tDenormalize_1_DenormalizeOut.containsKey(next_4.upCodAtc)){
	hash_upViaAdmin_tDenormalize_1_DenormalizeOut = hash_upCodAtc_tDenormalize_1_DenormalizeOut.get(next_4.upCodAtc);                    
}else{
	hash_upViaAdmin_tDenormalize_1_DenormalizeOut = new java.util.HashMap<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>>>>>>>>>>>();
	hash_upCodAtc_tDenormalize_1_DenormalizeOut.put(next_4.upCodAtc,hash_upViaAdmin_tDenormalize_1_DenormalizeOut);
}
if(hash_upViaAdmin_tDenormalize_1_DenormalizeOut.containsKey(next_4.upViaAdmin)){
	hash_upCatFarmacologica_tDenormalize_1_DenormalizeOut = hash_upViaAdmin_tDenormalize_1_DenormalizeOut.get(next_4.upViaAdmin);                    
}else{
	hash_upCatFarmacologica_tDenormalize_1_DenormalizeOut = new java.util.HashMap<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>>>>>>>>>>();
	hash_upViaAdmin_tDenormalize_1_DenormalizeOut.put(next_4.upViaAdmin,hash_upCatFarmacologica_tDenormalize_1_DenormalizeOut);
}
if(hash_upCatFarmacologica_tDenormalize_1_DenormalizeOut.containsKey(next_4.upCatFarmacologica)){
	hash_upIdentificadorUnico_tDenormalize_1_DenormalizeOut = hash_upCatFarmacologica_tDenormalize_1_DenormalizeOut.get(next_4.upCatFarmacologica);                    
}else{
	hash_upIdentificadorUnico_tDenormalize_1_DenormalizeOut = new java.util.HashMap<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>>>>>>>>>();
	hash_upCatFarmacologica_tDenormalize_1_DenormalizeOut.put(next_4.upCatFarmacologica,hash_upIdentificadorUnico_tDenormalize_1_DenormalizeOut);
}
if(hash_upIdentificadorUnico_tDenormalize_1_DenormalizeOut.containsKey(next_4.upIdentificadorUnico)){
	hash_upSustanciaActiva_tDenormalize_1_DenormalizeOut = hash_upIdentificadorUnico_tDenormalize_1_DenormalizeOut.get(next_4.upIdentificadorUnico);                    
}else{
	hash_upSustanciaActiva_tDenormalize_1_DenormalizeOut = new java.util.HashMap<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>>>>>>>>();
	hash_upIdentificadorUnico_tDenormalize_1_DenormalizeOut.put(next_4.upIdentificadorUnico,hash_upSustanciaActiva_tDenormalize_1_DenormalizeOut);
}
if(hash_upSustanciaActiva_tDenormalize_1_DenormalizeOut.containsKey(next_4.upSustanciaActiva)){
	hash__Message_tDenormalize_1_DenormalizeOut = hash_upSustanciaActiva_tDenormalize_1_DenormalizeOut.get(next_4.upSustanciaActiva);                    
}else{
	hash__Message_tDenormalize_1_DenormalizeOut = new java.util.HashMap<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>>>>>>>();
	hash_upSustanciaActiva_tDenormalize_1_DenormalizeOut.put(next_4.upSustanciaActiva,hash__Message_tDenormalize_1_DenormalizeOut);
}
if(hash__Message_tDenormalize_1_DenormalizeOut.containsKey(next_4._Message)){
	hash_NGenerico__tDenormalize_1_DenormalizeOut = hash__Message_tDenormalize_1_DenormalizeOut.get(next_4._Message);                    
}else{
	hash_NGenerico__tDenormalize_1_DenormalizeOut = new java.util.HashMap<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>>>>>>();
	hash__Message_tDenormalize_1_DenormalizeOut.put(next_4._Message,hash_NGenerico__tDenormalize_1_DenormalizeOut);
}
if(hash_NGenerico__tDenormalize_1_DenormalizeOut.containsKey(next_4.NGenerico_)){
	hash_Concentracion__tDenormalize_1_DenormalizeOut = hash_NGenerico__tDenormalize_1_DenormalizeOut.get(next_4.NGenerico_);                    
}else{
	hash_Concentracion__tDenormalize_1_DenormalizeOut = new java.util.HashMap<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>>>>>();
	hash_NGenerico__tDenormalize_1_DenormalizeOut.put(next_4.NGenerico_,hash_Concentracion__tDenormalize_1_DenormalizeOut);
}
if(hash_Concentracion__tDenormalize_1_DenormalizeOut.containsKey(next_4.Concentracion_)){
	hash_CodAtc__tDenormalize_1_DenormalizeOut = hash_Concentracion__tDenormalize_1_DenormalizeOut.get(next_4.Concentracion_);                    
}else{
	hash_CodAtc__tDenormalize_1_DenormalizeOut = new java.util.HashMap<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>>>>();
	hash_Concentracion__tDenormalize_1_DenormalizeOut.put(next_4.Concentracion_,hash_CodAtc__tDenormalize_1_DenormalizeOut);
}
if(hash_CodAtc__tDenormalize_1_DenormalizeOut.containsKey(next_4.CodAtc_)){
	hash_ViaAdmin__tDenormalize_1_DenormalizeOut = hash_CodAtc__tDenormalize_1_DenormalizeOut.get(next_4.CodAtc_);                    
}else{
	hash_ViaAdmin__tDenormalize_1_DenormalizeOut = new java.util.HashMap<String,java.util.Map<String,java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>>>();
	hash_CodAtc__tDenormalize_1_DenormalizeOut.put(next_4.CodAtc_,hash_ViaAdmin__tDenormalize_1_DenormalizeOut);
}
if(hash_ViaAdmin__tDenormalize_1_DenormalizeOut.containsKey(next_4.ViaAdmin_)){
	hash_CatFarmacologica__tDenormalize_1_DenormalizeOut = hash_ViaAdmin__tDenormalize_1_DenormalizeOut.get(next_4.ViaAdmin_);                    
}else{
	hash_CatFarmacologica__tDenormalize_1_DenormalizeOut = new java.util.HashMap<String,java.util.Map<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>>();
	hash_ViaAdmin__tDenormalize_1_DenormalizeOut.put(next_4.ViaAdmin_,hash_CatFarmacologica__tDenormalize_1_DenormalizeOut);
}
if(hash_CatFarmacologica__tDenormalize_1_DenormalizeOut.containsKey(next_4.CatFarmacologica_)){
	hash_IdentificadorUnico_tDenormalize_1_DenormalizeOut = hash_CatFarmacologica__tDenormalize_1_DenormalizeOut.get(next_4.CatFarmacologica_);                    
}else{
	hash_IdentificadorUnico_tDenormalize_1_DenormalizeOut = new java.util.HashMap<String,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>>();
	hash_CatFarmacologica__tDenormalize_1_DenormalizeOut.put(next_4.CatFarmacologica_,hash_IdentificadorUnico_tDenormalize_1_DenormalizeOut);
}
if(hash_IdentificadorUnico_tDenormalize_1_DenormalizeOut.containsKey(next_4.IdentificadorUnico)){
	hash_SustanciaActiva_tDenormalize_1_DenormalizeOut = hash_IdentificadorUnico_tDenormalize_1_DenormalizeOut.get(next_4.IdentificadorUnico);                    
}else{
	hash_SustanciaActiva_tDenormalize_1_DenormalizeOut = new java.util.HashMap<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>>();
	hash_IdentificadorUnico_tDenormalize_1_DenormalizeOut.put(next_4.IdentificadorUnico,hash_SustanciaActiva_tDenormalize_1_DenormalizeOut);
}
if(hash_SustanciaActiva_tDenormalize_1_DenormalizeOut.containsKey(next_4.SustanciaActiva)){
	hash_ViaAdmin_Id__tDenormalize_1_DenormalizeOut = hash_SustanciaActiva_tDenormalize_1_DenormalizeOut.get(next_4.SustanciaActiva);                    
}else{
	hash_ViaAdmin_Id__tDenormalize_1_DenormalizeOut = new java.util.HashMap<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>();
	hash_SustanciaActiva_tDenormalize_1_DenormalizeOut.put(next_4.SustanciaActiva,hash_ViaAdmin_Id__tDenormalize_1_DenormalizeOut);
}
if(hash_ViaAdmin_Id__tDenormalize_1_DenormalizeOut.containsKey(next_4.ViaAdmin_Id_)){
	hash_CatFarmacologica_Id_tDenormalize_1_DenormalizeOut = hash_ViaAdmin_Id__tDenormalize_1_DenormalizeOut.get(next_4.ViaAdmin_Id_);                    
}else{
	hash_CatFarmacologica_Id_tDenormalize_1_DenormalizeOut = new java.util.HashMap<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>();
	hash_ViaAdmin_Id__tDenormalize_1_DenormalizeOut.put(next_4.ViaAdmin_Id_,hash_CatFarmacologica_Id_tDenormalize_1_DenormalizeOut);
}
if(hash_CatFarmacologica_Id_tDenormalize_1_DenormalizeOut.containsKey(next_4.CatFarmacologica_Id)){
	hash_Sustancia_Activa_Id__tDenormalize_1_DenormalizeOut = hash_CatFarmacologica_Id_tDenormalize_1_DenormalizeOut.get(next_4.CatFarmacologica_Id);                    
}else{
	hash_Sustancia_Activa_Id__tDenormalize_1_DenormalizeOut = new java.util.HashMap<BigDecimal,java.util.Map<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>();
	hash_CatFarmacologica_Id_tDenormalize_1_DenormalizeOut.put(next_4.CatFarmacologica_Id,hash_Sustancia_Activa_Id__tDenormalize_1_DenormalizeOut);
}
if(hash_Sustancia_Activa_Id__tDenormalize_1_DenormalizeOut.containsKey(next_4.Sustancia_Activa_Id_)){
	hash_CatFarmacologica_Id__tDenormalize_1_DenormalizeOut = hash_Sustancia_Activa_Id__tDenormalize_1_DenormalizeOut.get(next_4.Sustancia_Activa_Id_);                    
}else{
	hash_CatFarmacologica_Id__tDenormalize_1_DenormalizeOut = new java.util.HashMap<String,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>();
	hash_Sustancia_Activa_Id__tDenormalize_1_DenormalizeOut.put(next_4.Sustancia_Activa_Id_,hash_CatFarmacologica_Id__tDenormalize_1_DenormalizeOut);
}
if(hash_CatFarmacologica_Id__tDenormalize_1_DenormalizeOut.containsKey(next_4.CatFarmacologica_Id_)){
	hash_Generico_Id__tDenormalize_1_DenormalizeOut = hash_CatFarmacologica_Id__tDenormalize_1_DenormalizeOut.get(next_4.CatFarmacologica_Id_);                    
}else{
	hash_Generico_Id__tDenormalize_1_DenormalizeOut = new java.util.HashMap<BigDecimal,java.util.Map<BigDecimal,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>();
	hash_CatFarmacologica_Id__tDenormalize_1_DenormalizeOut.put(next_4.CatFarmacologica_Id_,hash_Generico_Id__tDenormalize_1_DenormalizeOut);
}
if(hash_Generico_Id__tDenormalize_1_DenormalizeOut.containsKey(next_4.Generico_Id_)){
	hash_FormFarmaceutica_Id_tDenormalize_1_DenormalizeOut = hash_Generico_Id__tDenormalize_1_DenormalizeOut.get(next_4.Generico_Id_);                    
}else{
	hash_FormFarmaceutica_Id_tDenormalize_1_DenormalizeOut = new java.util.HashMap<BigDecimal,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>();
	hash_Generico_Id__tDenormalize_1_DenormalizeOut.put(next_4.Generico_Id_,hash_FormFarmaceutica_Id_tDenormalize_1_DenormalizeOut);
}
if(hash_FormFarmaceutica_Id_tDenormalize_1_DenormalizeOut.containsKey(next_4.FormFarmaceutica_Id)){
	hash_Id__tDenormalize_1_DenormalizeOut = hash_FormFarmaceutica_Id_tDenormalize_1_DenormalizeOut.get(next_4.FormFarmaceutica_Id);                    
}else{
	hash_Id__tDenormalize_1_DenormalizeOut = new java.util.HashMap<String, DenormalizeStructtDenormalize_1_DenormalizeOut>();
	hash_FormFarmaceutica_Id_tDenormalize_1_DenormalizeOut.put(next_4.FormFarmaceutica_Id,hash_Id__tDenormalize_1_DenormalizeOut);
}
if(hash_Id__tDenormalize_1_DenormalizeOut.containsKey(next_4.Id_)){
	denormalize_result_tDenormalize_1_DenormalizeOut = hash_Id__tDenormalize_1_DenormalizeOut.get(next_4.Id_);		
	denormalize_result_tDenormalize_1_DenormalizeOut.upFormFarmaceutica.append(",").append(next_4.upFormFarmaceutica);
					
	denormalize_result_tDenormalize_1_DenormalizeOut.FormFarmaceutica_.append(",").append(next_4.FormFarmaceutica_);
					
	denormalize_result_tDenormalize_1_DenormalizeOut.FormFarmaceutica_Ids_.append(",").append(next_4.FormFarmaceutica_Ids_);
					
	denormalize_result_tDenormalize_1_DenormalizeOut.Estado_.append(",").append(next_4.Estado_);
					
	denormalize_result_tDenormalize_1_DenormalizeOut._Insert.append(",").append(next_4._Insert);
			                  
}else{
	denormalize_result_tDenormalize_1_DenormalizeOut = new DenormalizeStructtDenormalize_1_DenormalizeOut();		
	denormalize_result_tDenormalize_1_DenormalizeOut.upFormFarmaceutica.append(next_4.upFormFarmaceutica);
					
	denormalize_result_tDenormalize_1_DenormalizeOut.FormFarmaceutica_.append(next_4.FormFarmaceutica_);
					
	denormalize_result_tDenormalize_1_DenormalizeOut.FormFarmaceutica_Ids_.append(next_4.FormFarmaceutica_Ids_);
					
	denormalize_result_tDenormalize_1_DenormalizeOut.Estado_.append(next_4.Estado_);
					
	denormalize_result_tDenormalize_1_DenormalizeOut._Insert.append(next_4._Insert);
			
	hash_Id__tDenormalize_1_DenormalizeOut.put(next_4.Id_, denormalize_result_tDenormalize_1_DenormalizeOut);
}

 


	tos_count_tDenormalize_1_DenormalizeOut++;

/**
 * [tDenormalize_1_DenormalizeOut main ] stop
 */
	
	/**
	 * [tDenormalize_1_DenormalizeOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_1_DenormalizeOut process_data_begin ] stop
 */
	
	/**
	 * [tDenormalize_1_DenormalizeOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_1_DenormalizeOut process_data_end ] stop
 */

} // End of branch "next_4"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_end ] stop
 */

} // End of branch "next_3"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "row16"




	
	/**
	 * [tJoin_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJoin_1";
	
	

 



/**
 * [tJoin_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */
		// end for
	}



	
	/**
	 * [tNormalize_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tNormalize_2";
	
	

 



/**
 * [tNormalize_2 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 process_data_end ] stop
 */



	
	/**
	 * [tReplicate_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplicate_2";
	
	

 



/**
 * [tReplicate_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleSP_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 process_data_end ] stop
 */

} // End of branch "copyOfoutViaAdmin"




	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 process_data_end ] stop
 */

} // End of branch "row17"




	
	/**
	 * [tJoin_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJoin_4";
	
	

 



/**
 * [tJoin_4 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

 



/**
 * [tJavaRow_10 process_data_end ] stop
 */
		// end for
	}



	
	/**
	 * [tNormalize_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tNormalize_1";
	
	

 



/**
 * [tNormalize_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tJoin_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJoin_3";
	
	

 



/**
 * [tJoin_3 process_data_end ] stop
 */

} // End of branch "outViaAdmin"




	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	

 



/**
 * [tMap_10 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

}
}finally{
	if (rs_tOracleInput_6 != null) {
		rs_tOracleInput_6.close();
	}
	if (stmt_tOracleInput_6 != null) {
		stmt_tOracleInput_6.close();
	}
}

globalMap.put("tOracleInput_6_NB_LINE",nb_line_tOracleInput_6);
 

ok_Hash.put("tOracleInput_6", true);
end_Hash.put("tOracleInput_6", System.currentTimeMillis());




/**
 * [tOracleInput_6 end ] stop
 */

	
	/**
	 * [tJavaRow_5 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

globalMap.put("tJavaRow_5_NB_LINE",nb_line_tJavaRow_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row42");
			  	}
			  	
 

ok_Hash.put("tJavaRow_5", true);
end_Hash.put("tJavaRow_5", System.currentTimeMillis());




/**
 * [tJavaRow_5 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row7 != null) {
						tHash_Lookup_row7.endGet();
					}
					globalMap.remove( "tHash_Lookup_row7" );

					
					
				
					if(tHash_Lookup_row8 != null) {
						tHash_Lookup_row8.endGet();
					}
					globalMap.remove( "tHash_Lookup_row8" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tJoin_3 end ] start
	 */

	

	
	
	currentComponent="tJoin_3";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"outViaAdmin");
			  	}
			  	
 

ok_Hash.put("tJoin_3", true);
end_Hash.put("tJoin_3", System.currentTimeMillis());




/**
 * [tJoin_3 end ] stop
 */

	
	/**
	 * [tJavaRow_7 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

globalMap.put("tJavaRow_7_NB_LINE",nb_line_tJavaRow_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tJavaRow_7", true);
end_Hash.put("tJavaRow_7", System.currentTimeMillis());




/**
 * [tJavaRow_7 end ] stop
 */

	
	/**
	 * [tNormalize_1 end ] start
	 */

	

	
	
	currentComponent="tNormalize_1";
	
	

    globalMap.put("tNormalize_1_NB_LINE", nb_line_tNormalize_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tNormalize_1", true);
end_Hash.put("tNormalize_1", System.currentTimeMillis());




/**
 * [tNormalize_1 end ] stop
 */

	
	/**
	 * [tJavaRow_10 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

globalMap.put("tJavaRow_10_NB_LINE",nb_line_tJavaRow_10);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row37");
			  	}
			  	
 

ok_Hash.put("tJavaRow_10", true);
end_Hash.put("tJavaRow_10", System.currentTimeMillis());




/**
 * [tJavaRow_10 end ] stop
 */

	
	/**
	 * [tJoin_4 end ] start
	 */

	

	
	
	currentComponent="tJoin_4";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row38");
			  	}
			  	
 

ok_Hash.put("tJoin_4", true);
end_Hash.put("tJoin_4", System.currentTimeMillis());




/**
 * [tJoin_4 end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tOracleSP_2 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	


	statement_tOracleSP_2.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfoutViaAdmin");
			  	}
			  	
 

ok_Hash.put("tOracleSP_2", true);
end_Hash.put("tOracleSP_2", System.currentTimeMillis());




/**
 * [tOracleSP_2 end ] stop
 */

	
	/**
	 * [tReplicate_2 end ] start
	 */

	

	
	
	currentComponent="tReplicate_2";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tReplicate_2", true);
end_Hash.put("tReplicate_2", System.currentTimeMillis());




/**
 * [tReplicate_2 end ] stop
 */

	
	/**
	 * [tJavaRow_6 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

globalMap.put("tJavaRow_6_NB_LINE",nb_line_tJavaRow_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row33");
			  	}
			  	
 

ok_Hash.put("tJavaRow_6", true);
end_Hash.put("tJavaRow_6", System.currentTimeMillis());




/**
 * [tJavaRow_6 end ] stop
 */

	
	/**
	 * [tNormalize_2 end ] start
	 */

	

	
	
	currentComponent="tNormalize_2";
	
	

    globalMap.put("tNormalize_2_NB_LINE", nb_line_tNormalize_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row24");
			  	}
			  	
 

ok_Hash.put("tNormalize_2", true);
end_Hash.put("tNormalize_2", System.currentTimeMillis());




/**
 * [tNormalize_2 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());




/**
 * [tJavaRow_3 end ] stop
 */

	
	/**
	 * [tJoin_1 end ] start
	 */

	

	
	
	currentComponent="tJoin_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row39");
			  	}
			  	
 

ok_Hash.put("tJoin_1", true);
end_Hash.put("tJoin_1", System.currentTimeMillis());




/**
 * [tJoin_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tJavaRow_4 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

globalMap.put("tJavaRow_4_NB_LINE",nb_line_tJavaRow_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"next_3");
			  	}
			  	
 

ok_Hash.put("tJavaRow_4", true);
end_Hash.put("tJavaRow_4", System.currentTimeMillis());




/**
 * [tJavaRow_4 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tDenormalize_1_DenormalizeOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	
java.util.List<OnRowsEndStructtDenormalize_1> result_list_tDenormalize_1_DenormalizeOut = new java.util.ArrayList<OnRowsEndStructtDenormalize_1>();
if (denormalize_result_tDenormalize_1_DenormalizeOut != null) {
//generate result begin
java.util.Iterator<String> upNGenerico_iterator_tDenormalize_1_DenormalizeOut = hash_upNGenerico_tDenormalize_1_DenormalizeOut.keySet().iterator();

while(upNGenerico_iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	String key_upNGenerico_tDenormalize_1_DenormalizeOut = upNGenerico_iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash_upConcentracion_tDenormalize_1_DenormalizeOut = hash_upNGenerico_tDenormalize_1_DenormalizeOut.get(key_upNGenerico_tDenormalize_1_DenormalizeOut);

java.util.Iterator<String> upConcentracion_iterator_tDenormalize_1_DenormalizeOut = hash_upConcentracion_tDenormalize_1_DenormalizeOut.keySet().iterator();

while(upConcentracion_iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	String key_upConcentracion_tDenormalize_1_DenormalizeOut = upConcentracion_iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash_upCodAtc_tDenormalize_1_DenormalizeOut = hash_upConcentracion_tDenormalize_1_DenormalizeOut.get(key_upConcentracion_tDenormalize_1_DenormalizeOut);

java.util.Iterator<String> upCodAtc_iterator_tDenormalize_1_DenormalizeOut = hash_upCodAtc_tDenormalize_1_DenormalizeOut.keySet().iterator();

while(upCodAtc_iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	String key_upCodAtc_tDenormalize_1_DenormalizeOut = upCodAtc_iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash_upViaAdmin_tDenormalize_1_DenormalizeOut = hash_upCodAtc_tDenormalize_1_DenormalizeOut.get(key_upCodAtc_tDenormalize_1_DenormalizeOut);

java.util.Iterator<String> upViaAdmin_iterator_tDenormalize_1_DenormalizeOut = hash_upViaAdmin_tDenormalize_1_DenormalizeOut.keySet().iterator();

while(upViaAdmin_iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	String key_upViaAdmin_tDenormalize_1_DenormalizeOut = upViaAdmin_iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash_upCatFarmacologica_tDenormalize_1_DenormalizeOut = hash_upViaAdmin_tDenormalize_1_DenormalizeOut.get(key_upViaAdmin_tDenormalize_1_DenormalizeOut);

java.util.Iterator<String> upCatFarmacologica_iterator_tDenormalize_1_DenormalizeOut = hash_upCatFarmacologica_tDenormalize_1_DenormalizeOut.keySet().iterator();

while(upCatFarmacologica_iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	String key_upCatFarmacologica_tDenormalize_1_DenormalizeOut = upCatFarmacologica_iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash_upIdentificadorUnico_tDenormalize_1_DenormalizeOut = hash_upCatFarmacologica_tDenormalize_1_DenormalizeOut.get(key_upCatFarmacologica_tDenormalize_1_DenormalizeOut);

java.util.Iterator<String> upIdentificadorUnico_iterator_tDenormalize_1_DenormalizeOut = hash_upIdentificadorUnico_tDenormalize_1_DenormalizeOut.keySet().iterator();

while(upIdentificadorUnico_iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	String key_upIdentificadorUnico_tDenormalize_1_DenormalizeOut = upIdentificadorUnico_iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash_upSustanciaActiva_tDenormalize_1_DenormalizeOut = hash_upIdentificadorUnico_tDenormalize_1_DenormalizeOut.get(key_upIdentificadorUnico_tDenormalize_1_DenormalizeOut);

java.util.Iterator<String> upSustanciaActiva_iterator_tDenormalize_1_DenormalizeOut = hash_upSustanciaActiva_tDenormalize_1_DenormalizeOut.keySet().iterator();

while(upSustanciaActiva_iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	String key_upSustanciaActiva_tDenormalize_1_DenormalizeOut = upSustanciaActiva_iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash__Message_tDenormalize_1_DenormalizeOut = hash_upSustanciaActiva_tDenormalize_1_DenormalizeOut.get(key_upSustanciaActiva_tDenormalize_1_DenormalizeOut);

java.util.Iterator<String> _Message_iterator_tDenormalize_1_DenormalizeOut = hash__Message_tDenormalize_1_DenormalizeOut.keySet().iterator();

while(_Message_iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	String key__Message_tDenormalize_1_DenormalizeOut = _Message_iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash_NGenerico__tDenormalize_1_DenormalizeOut = hash__Message_tDenormalize_1_DenormalizeOut.get(key__Message_tDenormalize_1_DenormalizeOut);

java.util.Iterator<String> NGenerico__iterator_tDenormalize_1_DenormalizeOut = hash_NGenerico__tDenormalize_1_DenormalizeOut.keySet().iterator();

while(NGenerico__iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	String key_NGenerico__tDenormalize_1_DenormalizeOut = NGenerico__iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash_Concentracion__tDenormalize_1_DenormalizeOut = hash_NGenerico__tDenormalize_1_DenormalizeOut.get(key_NGenerico__tDenormalize_1_DenormalizeOut);

java.util.Iterator<String> Concentracion__iterator_tDenormalize_1_DenormalizeOut = hash_Concentracion__tDenormalize_1_DenormalizeOut.keySet().iterator();

while(Concentracion__iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	String key_Concentracion__tDenormalize_1_DenormalizeOut = Concentracion__iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash_CodAtc__tDenormalize_1_DenormalizeOut = hash_Concentracion__tDenormalize_1_DenormalizeOut.get(key_Concentracion__tDenormalize_1_DenormalizeOut);

java.util.Iterator<String> CodAtc__iterator_tDenormalize_1_DenormalizeOut = hash_CodAtc__tDenormalize_1_DenormalizeOut.keySet().iterator();

while(CodAtc__iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	String key_CodAtc__tDenormalize_1_DenormalizeOut = CodAtc__iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash_ViaAdmin__tDenormalize_1_DenormalizeOut = hash_CodAtc__tDenormalize_1_DenormalizeOut.get(key_CodAtc__tDenormalize_1_DenormalizeOut);

java.util.Iterator<String> ViaAdmin__iterator_tDenormalize_1_DenormalizeOut = hash_ViaAdmin__tDenormalize_1_DenormalizeOut.keySet().iterator();

while(ViaAdmin__iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	String key_ViaAdmin__tDenormalize_1_DenormalizeOut = ViaAdmin__iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash_CatFarmacologica__tDenormalize_1_DenormalizeOut = hash_ViaAdmin__tDenormalize_1_DenormalizeOut.get(key_ViaAdmin__tDenormalize_1_DenormalizeOut);

java.util.Iterator<String> CatFarmacologica__iterator_tDenormalize_1_DenormalizeOut = hash_CatFarmacologica__tDenormalize_1_DenormalizeOut.keySet().iterator();

while(CatFarmacologica__iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	String key_CatFarmacologica__tDenormalize_1_DenormalizeOut = CatFarmacologica__iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash_IdentificadorUnico_tDenormalize_1_DenormalizeOut = hash_CatFarmacologica__tDenormalize_1_DenormalizeOut.get(key_CatFarmacologica__tDenormalize_1_DenormalizeOut);

java.util.Iterator<String> IdentificadorUnico_iterator_tDenormalize_1_DenormalizeOut = hash_IdentificadorUnico_tDenormalize_1_DenormalizeOut.keySet().iterator();

while(IdentificadorUnico_iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	String key_IdentificadorUnico_tDenormalize_1_DenormalizeOut = IdentificadorUnico_iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash_SustanciaActiva_tDenormalize_1_DenormalizeOut = hash_IdentificadorUnico_tDenormalize_1_DenormalizeOut.get(key_IdentificadorUnico_tDenormalize_1_DenormalizeOut);

java.util.Iterator<String> SustanciaActiva_iterator_tDenormalize_1_DenormalizeOut = hash_SustanciaActiva_tDenormalize_1_DenormalizeOut.keySet().iterator();

while(SustanciaActiva_iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	String key_SustanciaActiva_tDenormalize_1_DenormalizeOut = SustanciaActiva_iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash_ViaAdmin_Id__tDenormalize_1_DenormalizeOut = hash_SustanciaActiva_tDenormalize_1_DenormalizeOut.get(key_SustanciaActiva_tDenormalize_1_DenormalizeOut);

java.util.Iterator<BigDecimal> ViaAdmin_Id__iterator_tDenormalize_1_DenormalizeOut = hash_ViaAdmin_Id__tDenormalize_1_DenormalizeOut.keySet().iterator();

while(ViaAdmin_Id__iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	BigDecimal key_ViaAdmin_Id__tDenormalize_1_DenormalizeOut = ViaAdmin_Id__iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash_CatFarmacologica_Id_tDenormalize_1_DenormalizeOut = hash_ViaAdmin_Id__tDenormalize_1_DenormalizeOut.get(key_ViaAdmin_Id__tDenormalize_1_DenormalizeOut);

java.util.Iterator<BigDecimal> CatFarmacologica_Id_iterator_tDenormalize_1_DenormalizeOut = hash_CatFarmacologica_Id_tDenormalize_1_DenormalizeOut.keySet().iterator();

while(CatFarmacologica_Id_iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	BigDecimal key_CatFarmacologica_Id_tDenormalize_1_DenormalizeOut = CatFarmacologica_Id_iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash_Sustancia_Activa_Id__tDenormalize_1_DenormalizeOut = hash_CatFarmacologica_Id_tDenormalize_1_DenormalizeOut.get(key_CatFarmacologica_Id_tDenormalize_1_DenormalizeOut);

java.util.Iterator<BigDecimal> Sustancia_Activa_Id__iterator_tDenormalize_1_DenormalizeOut = hash_Sustancia_Activa_Id__tDenormalize_1_DenormalizeOut.keySet().iterator();

while(Sustancia_Activa_Id__iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	BigDecimal key_Sustancia_Activa_Id__tDenormalize_1_DenormalizeOut = Sustancia_Activa_Id__iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash_CatFarmacologica_Id__tDenormalize_1_DenormalizeOut = hash_Sustancia_Activa_Id__tDenormalize_1_DenormalizeOut.get(key_Sustancia_Activa_Id__tDenormalize_1_DenormalizeOut);

java.util.Iterator<String> CatFarmacologica_Id__iterator_tDenormalize_1_DenormalizeOut = hash_CatFarmacologica_Id__tDenormalize_1_DenormalizeOut.keySet().iterator();

while(CatFarmacologica_Id__iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	String key_CatFarmacologica_Id__tDenormalize_1_DenormalizeOut = CatFarmacologica_Id__iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash_Generico_Id__tDenormalize_1_DenormalizeOut = hash_CatFarmacologica_Id__tDenormalize_1_DenormalizeOut.get(key_CatFarmacologica_Id__tDenormalize_1_DenormalizeOut);

java.util.Iterator<BigDecimal> Generico_Id__iterator_tDenormalize_1_DenormalizeOut = hash_Generico_Id__tDenormalize_1_DenormalizeOut.keySet().iterator();

while(Generico_Id__iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	BigDecimal key_Generico_Id__tDenormalize_1_DenormalizeOut = Generico_Id__iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash_FormFarmaceutica_Id_tDenormalize_1_DenormalizeOut = hash_Generico_Id__tDenormalize_1_DenormalizeOut.get(key_Generico_Id__tDenormalize_1_DenormalizeOut);

java.util.Iterator<BigDecimal> FormFarmaceutica_Id_iterator_tDenormalize_1_DenormalizeOut = hash_FormFarmaceutica_Id_tDenormalize_1_DenormalizeOut.keySet().iterator();

while(FormFarmaceutica_Id_iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	BigDecimal key_FormFarmaceutica_Id_tDenormalize_1_DenormalizeOut = FormFarmaceutica_Id_iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash_Id__tDenormalize_1_DenormalizeOut = hash_FormFarmaceutica_Id_tDenormalize_1_DenormalizeOut.get(key_FormFarmaceutica_Id_tDenormalize_1_DenormalizeOut);

java.util.Iterator<String> Id__iterator_tDenormalize_1_DenormalizeOut = hash_Id__tDenormalize_1_DenormalizeOut.keySet().iterator();

while(Id__iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	String key_Id__tDenormalize_1_DenormalizeOut = Id__iterator_tDenormalize_1_DenormalizeOut.next();
	
	denormalize_result_tDenormalize_1_DenormalizeOut = hash_Id__tDenormalize_1_DenormalizeOut.get(key_Id__tDenormalize_1_DenormalizeOut);

	OnRowsEndStructtDenormalize_1 denormalize_row_tDenormalize_1_DenormalizeOut = new OnRowsEndStructtDenormalize_1();
                
	denormalize_row_tDenormalize_1_DenormalizeOut.upNGenerico = key_upNGenerico_tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.upConcentracion = key_upConcentracion_tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.upCodAtc = key_upCodAtc_tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.upViaAdmin = key_upViaAdmin_tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.upCatFarmacologica = key_upCatFarmacologica_tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.upIdentificadorUnico = key_upIdentificadorUnico_tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.upSustanciaActiva = key_upSustanciaActiva_tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut._Message = key__Message_tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.NGenerico_ = key_NGenerico__tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.Concentracion_ = key_Concentracion__tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.CodAtc_ = key_CodAtc__tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.ViaAdmin_ = key_ViaAdmin__tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.CatFarmacologica_ = key_CatFarmacologica__tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.IdentificadorUnico = key_IdentificadorUnico_tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.SustanciaActiva = key_SustanciaActiva_tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.ViaAdmin_Id_ = key_ViaAdmin_Id__tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.CatFarmacologica_Id = key_CatFarmacologica_Id_tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.Sustancia_Activa_Id_ = key_Sustancia_Activa_Id__tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.CatFarmacologica_Id_ = key_CatFarmacologica_Id__tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.Generico_Id_ = key_Generico_Id__tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.FormFarmaceutica_Id = key_FormFarmaceutica_Id_tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.Id_ = key_Id__tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.upFormFarmaceutica = denormalize_result_tDenormalize_1_DenormalizeOut.upFormFarmaceutica.toString();
	
	denormalize_row_tDenormalize_1_DenormalizeOut.FormFarmaceutica_ = denormalize_result_tDenormalize_1_DenormalizeOut.FormFarmaceutica_.toString();
	
	denormalize_row_tDenormalize_1_DenormalizeOut.FormFarmaceutica_Ids_ = denormalize_result_tDenormalize_1_DenormalizeOut.FormFarmaceutica_Ids_.toString();
	
	denormalize_row_tDenormalize_1_DenormalizeOut.Estado_ = denormalize_result_tDenormalize_1_DenormalizeOut.Estado_.toString();
	
	denormalize_row_tDenormalize_1_DenormalizeOut._Insert = denormalize_result_tDenormalize_1_DenormalizeOut._Insert.toString();
	
	//in the deepest end
	
	result_list_tDenormalize_1_DenormalizeOut.add(denormalize_row_tDenormalize_1_DenormalizeOut);

}

}

}

}

}

}

}

}

}

}

}

}

}

}

}

}

}

}

}

}

}

}

}
//generate result end
globalMap.put("tDenormalize_1", result_list_tDenormalize_1_DenormalizeOut);
globalMap.put("tDenormalize_1_DenormalizeOut_NB_LINE", result_list_tDenormalize_1_DenormalizeOut.size()); 

        


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"next_4");
			  	}
			  	
 

ok_Hash.put("tDenormalize_1_DenormalizeOut", true);
end_Hash.put("tDenormalize_1_DenormalizeOut", System.currentTimeMillis());




/**
 * [tDenormalize_1_DenormalizeOut end ] stop
 */




	
	/**
	 * [tSortRow_1_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortOut", false);
		start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tSortRow_1_SortOut = 0;
		


class Comparablerow21Struct extends row21Struct implements Comparable<Comparablerow21Struct> {
	
	public int compareTo(Comparablerow21Struct other) {

		if(this.upNGenerico == null && other.upNGenerico != null){
			return -1;
						
		}else if(this.upNGenerico != null && other.upNGenerico == null){
			return 1;
						
		}else if(this.upNGenerico != null && other.upNGenerico != null){
			if(!this.upNGenerico.equals(other.upNGenerico)){
				return this.upNGenerico.compareTo(other.upNGenerico);
			}
		}
		if(this.upConcentracion == null && other.upConcentracion != null){
			return -1;
						
		}else if(this.upConcentracion != null && other.upConcentracion == null){
			return 1;
						
		}else if(this.upConcentracion != null && other.upConcentracion != null){
			if(!this.upConcentracion.equals(other.upConcentracion)){
				return this.upConcentracion.compareTo(other.upConcentracion);
			}
		}
		return 0;
	}
}

java.util.List<Comparablerow21Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparablerow21Struct>();


 



/**
 * [tSortRow_1_SortOut begin ] stop
 */




	
	/**
	 * [tOracleSP_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_3", false);
		start_Hash.put("tOracleSP_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tOracleSP_3 = 0;
		

	java.sql.Connection connection_tOracleSP_3 = null;
	connection_tOracleSP_3 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_1");
	

java.sql.CallableStatement statement_tOracleSP_3 = connection_tOracleSP_3.prepareCall("{call " + "MED.InsGenericoCM" + "(?,?,?,?,?,?,?,?,?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_3;
String tmpString_tOracleSP_3;

 



/**
 * [tOracleSP_3 begin ] stop
 */



	
	/**
	 * [tFilterRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_2", false);
		start_Hash.put("tFilterRow_2", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tFilterRow_2 = 0;
		
    int nb_line_tFilterRow_2 = 0;
    int nb_line_ok_tFilterRow_2 = 0;
    int nb_line_reject_tFilterRow_2 = 0;

    class Operator_tFilterRow_2 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_2(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_2 begin ] stop
 */



	
	/**
	 * [tJavaRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_8", false);
		start_Hash.put("tJavaRow_8", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tJavaRow_8 = 0;
		

int nb_line_tJavaRow_8 = 0;

 



/**
 * [tJavaRow_8 begin ] stop
 */



	
	/**
	 * [tDenormalize_1_ArrayIn begin ] start
	 */

	

	
		
		ok_Hash.put("tDenormalize_1_ArrayIn", false);
		start_Hash.put("tDenormalize_1_ArrayIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	
		int tos_count_tDenormalize_1_ArrayIn = 0;
		

        
        int nb_line_tDenormalize_1_ArrayIn = 0;
        java.util.List<OnRowsEndStructtDenormalize_1> list_tDenormalize_1_ArrayIn = (java.util.List<OnRowsEndStructtDenormalize_1>)globalMap.get("tDenormalize_1");
        if(list_tDenormalize_1_ArrayIn == null) {
            list_tDenormalize_1_ArrayIn = new java.util.ArrayList<OnRowsEndStructtDenormalize_1>();
        }        
        for(OnRowsEndStructtDenormalize_1 row_tDenormalize_1_ArrayIn : list_tDenormalize_1_ArrayIn){
        					
    						row25.upNGenerico = row_tDenormalize_1_ArrayIn.upNGenerico;
    											
    						row25.upConcentracion = row_tDenormalize_1_ArrayIn.upConcentracion;
    											
    						row25.upCodAtc = row_tDenormalize_1_ArrayIn.upCodAtc;
    											
    						row25.upViaAdmin = row_tDenormalize_1_ArrayIn.upViaAdmin;
    											
    						row25.upCatFarmacologica = row_tDenormalize_1_ArrayIn.upCatFarmacologica;
    											
    						row25.upFormFarmaceutica = row_tDenormalize_1_ArrayIn.upFormFarmaceutica;
    											
    						row25.upIdentificadorUnico = row_tDenormalize_1_ArrayIn.upIdentificadorUnico;
    											
    						row25.upSustanciaActiva = row_tDenormalize_1_ArrayIn.upSustanciaActiva;
    											
    						row25.Estado_ = row_tDenormalize_1_ArrayIn.Estado_;
    											
    						row25._Insert = row_tDenormalize_1_ArrayIn._Insert;
    											
    						row25._Message = row_tDenormalize_1_ArrayIn._Message;
    											
    						row25.NGenerico_ = row_tDenormalize_1_ArrayIn.NGenerico_;
    											
    						row25.Concentracion_ = row_tDenormalize_1_ArrayIn.Concentracion_;
    											
    						row25.CodAtc_ = row_tDenormalize_1_ArrayIn.CodAtc_;
    											
    						row25.ViaAdmin_ = row_tDenormalize_1_ArrayIn.ViaAdmin_;
    											
    						row25.CatFarmacologica_ = row_tDenormalize_1_ArrayIn.CatFarmacologica_;
    											
    						row25.FormFarmaceutica_ = row_tDenormalize_1_ArrayIn.FormFarmaceutica_;
    											
    						row25.IdentificadorUnico = row_tDenormalize_1_ArrayIn.IdentificadorUnico;
    											
    						row25.SustanciaActiva = row_tDenormalize_1_ArrayIn.SustanciaActiva;
    											
    						row25.ViaAdmin_Id_ = row_tDenormalize_1_ArrayIn.ViaAdmin_Id_;
    											
    						row25.CatFarmacologica_Id = row_tDenormalize_1_ArrayIn.CatFarmacologica_Id;
    											
    						row25.Sustancia_Activa_Id_ = row_tDenormalize_1_ArrayIn.Sustancia_Activa_Id_;
    											
    						row25.CatFarmacologica_Id_ = row_tDenormalize_1_ArrayIn.CatFarmacologica_Id_;
    											
    						row25.Generico_Id_ = row_tDenormalize_1_ArrayIn.Generico_Id_;
    											
    						row25.FormFarmaceutica_Id = row_tDenormalize_1_ArrayIn.FormFarmaceutica_Id;
    											
    						row25.FormFarmaceutica_Ids_ = row_tDenormalize_1_ArrayIn.FormFarmaceutica_Ids_;
    											
    						row25.Id_ = row_tDenormalize_1_ArrayIn.Id_;
    						

 



/**
 * [tDenormalize_1_ArrayIn begin ] stop
 */
	
	/**
	 * [tDenormalize_1_ArrayIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	

 


	tos_count_tDenormalize_1_ArrayIn++;

/**
 * [tDenormalize_1_ArrayIn main ] stop
 */
	
	/**
	 * [tDenormalize_1_ArrayIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	

 



/**
 * [tDenormalize_1_ArrayIn process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_8 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row25"
						
						);
					}
					

    //Code generate according to input schema and output schema
row27.upNGenerico = row25.upNGenerico;
row27.upConcentracion = row25.upConcentracion;
row27.upCodAtc = row25.upCodAtc;
row27.upViaAdmin = row25.upViaAdmin;
row27.upCatFarmacologica = row25.upCatFarmacologica;
row27.upFormFarmaceutica = row25.upFormFarmaceutica;
row27.upIdentificadorUnico = row25.upIdentificadorUnico;
row27.upSustanciaActiva = row25.upSustanciaActiva;
row27.Estado_ = row25.Estado_;
row27._Insert = row25._Insert;
row27._Message = row25._Message;
row27.NGenerico_ = row25.NGenerico_;
row27.Concentracion_ = row25.Concentracion_;
row27.CodAtc_ = row25.CodAtc_;
row27.ViaAdmin_ = row25.ViaAdmin_;
row27.CatFarmacologica_ = row25.CatFarmacologica_;
row27.FormFarmaceutica_ = row25.FormFarmaceutica_;
row27.IdentificadorUnico = row25.IdentificadorUnico;
row27.SustanciaActiva = row25.SustanciaActiva;
row27.ViaAdmin_Id_ = row25.ViaAdmin_Id_;
row27.CatFarmacologica_Id = row25.CatFarmacologica_Id;
row27.Sustancia_Activa_Id_ = row25.Sustancia_Activa_Id_;
row27.CatFarmacologica_Id_ = row25.CatFarmacologica_Id_;
row27.Generico_Id_ = row25.Generico_Id_;
row27.FormFarmaceutica_Id = row25.FormFarmaceutica_Id;
row27.FormFarmaceutica_Ids_ = row25.FormFarmaceutica_Ids_;
row27.Id_ = row25.Id_;


if(row25.Estado_.contains("Erróneo") == true){ row27.Estado_ = "Erróneo";}
else { row27.Estado_ = ""; }


if(row25._Insert.contains("No") == true ){	row27._Insert = "No"; }
else {	row27._Insert = ""; }


    nb_line_tJavaRow_8++;   

 


	tos_count_tJavaRow_8++;

/**
 * [tJavaRow_8 main ] stop
 */
	
	/**
	 * [tJavaRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_2 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row27"
						
						);
					}
					

          row13 = null;
          row21 = null;
    Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("||");
            ope_tFilterRow_2.matches((row27.Estado_ == null? false : row27.Estado_.compareTo("Erróneo") == 0)
                           , "Estado_.compareTo(\"Erróneo\") == 0 failed");
            ope_tFilterRow_2.matches((row27._Insert == null? false : row27._Insert.compareTo("No") == 0)
                           , "_Insert.compareTo(\"No\") == 0 failed");
    
    if (ope_tFilterRow_2.getMatchFlag()) {
              if(row21 == null){ 
                row21 = new row21Struct();
              }
               row21.upNGenerico = row27.upNGenerico;
               row21.upConcentracion = row27.upConcentracion;
               row21.upCodAtc = row27.upCodAtc;
               row21.upViaAdmin = row27.upViaAdmin;
               row21.upCatFarmacologica = row27.upCatFarmacologica;
               row21.upFormFarmaceutica = row27.upFormFarmaceutica;
               row21.upIdentificadorUnico = row27.upIdentificadorUnico;
               row21.upSustanciaActiva = row27.upSustanciaActiva;
               row21.Estado_ = row27.Estado_;
               row21._Insert = row27._Insert;
               row21._Message = row27._Message;
               row21.NGenerico_ = row27.NGenerico_;
               row21.Concentracion_ = row27.Concentracion_;
               row21.CodAtc_ = row27.CodAtc_;
               row21.ViaAdmin_ = row27.ViaAdmin_;
               row21.CatFarmacologica_ = row27.CatFarmacologica_;
               row21.FormFarmaceutica_ = row27.FormFarmaceutica_;
               row21.IdentificadorUnico = row27.IdentificadorUnico;
               row21.SustanciaActiva = row27.SustanciaActiva;
               row21.ViaAdmin_Id_ = row27.ViaAdmin_Id_;
               row21.CatFarmacologica_Id = row27.CatFarmacologica_Id;
               row21.Sustancia_Activa_Id_ = row27.Sustancia_Activa_Id_;
               row21.CatFarmacologica_Id_ = row27.CatFarmacologica_Id_;
               row21.Generico_Id_ = row27.Generico_Id_;
               row21.FormFarmaceutica_Id = row27.FormFarmaceutica_Id;
               row21.FormFarmaceutica_Ids_ = row27.FormFarmaceutica_Ids_;
               row21.Id_ = row27.Id_;    
      nb_line_ok_tFilterRow_2++;
    } else {
            if (row13 == null){
              row13 = new row13Struct();
            }
                row13.upNGenerico = row27.upNGenerico;
                row13.upConcentracion = row27.upConcentracion;
                row13.upCodAtc = row27.upCodAtc;
                row13.upViaAdmin = row27.upViaAdmin;
                row13.upCatFarmacologica = row27.upCatFarmacologica;
                row13.upFormFarmaceutica = row27.upFormFarmaceutica;
                row13.upIdentificadorUnico = row27.upIdentificadorUnico;
                row13.upSustanciaActiva = row27.upSustanciaActiva;
                row13.Estado_ = row27.Estado_;
                row13._Insert = row27._Insert;
                row13._Message = row27._Message;
                row13.NGenerico_ = row27.NGenerico_;
                row13.Concentracion_ = row27.Concentracion_;
                row13.CodAtc_ = row27.CodAtc_;
                row13.ViaAdmin_ = row27.ViaAdmin_;
                row13.CatFarmacologica_ = row27.CatFarmacologica_;
                row13.FormFarmaceutica_ = row27.FormFarmaceutica_;
                row13.IdentificadorUnico = row27.IdentificadorUnico;
                row13.SustanciaActiva = row27.SustanciaActiva;
                row13.ViaAdmin_Id_ = row27.ViaAdmin_Id_;
                row13.CatFarmacologica_Id = row27.CatFarmacologica_Id;
                row13.Sustancia_Activa_Id_ = row27.Sustancia_Activa_Id_;
                row13.CatFarmacologica_Id_ = row27.CatFarmacologica_Id_;
                row13.Generico_Id_ = row27.Generico_Id_;
                row13.FormFarmaceutica_Id = row27.FormFarmaceutica_Id;
                row13.FormFarmaceutica_Ids_ = row27.FormFarmaceutica_Ids_;
                row13.Id_ = row27.Id_;
	            row13.errorMessage = ope_tFilterRow_2.getErrorMsg();
      nb_line_reject_tFilterRow_2++;
    }

nb_line_tFilterRow_2++;

 


	tos_count_tFilterRow_2++;

/**
 * [tFilterRow_2 main ] stop
 */
	
	/**
	 * [tFilterRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";
	
	

 



/**
 * [tFilterRow_2 process_data_begin ] stop
 */
// Start of branch "row21"
if(row21 != null) { 



	
	/**
	 * [tSortRow_1_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row21"
						
						);
					}
					



	Comparablerow21Struct arrayRowtSortRow_1_SortOut = new Comparablerow21Struct();

	arrayRowtSortRow_1_SortOut.upNGenerico = row21.upNGenerico;
	arrayRowtSortRow_1_SortOut.upConcentracion = row21.upConcentracion;
	arrayRowtSortRow_1_SortOut.upCodAtc = row21.upCodAtc;
	arrayRowtSortRow_1_SortOut.upViaAdmin = row21.upViaAdmin;
	arrayRowtSortRow_1_SortOut.upCatFarmacologica = row21.upCatFarmacologica;
	arrayRowtSortRow_1_SortOut.upFormFarmaceutica = row21.upFormFarmaceutica;
	arrayRowtSortRow_1_SortOut.upIdentificadorUnico = row21.upIdentificadorUnico;
	arrayRowtSortRow_1_SortOut.upSustanciaActiva = row21.upSustanciaActiva;
	arrayRowtSortRow_1_SortOut.Estado_ = row21.Estado_;
	arrayRowtSortRow_1_SortOut._Insert = row21._Insert;
	arrayRowtSortRow_1_SortOut._Message = row21._Message;
	arrayRowtSortRow_1_SortOut.NGenerico_ = row21.NGenerico_;
	arrayRowtSortRow_1_SortOut.Concentracion_ = row21.Concentracion_;
	arrayRowtSortRow_1_SortOut.CodAtc_ = row21.CodAtc_;
	arrayRowtSortRow_1_SortOut.ViaAdmin_ = row21.ViaAdmin_;
	arrayRowtSortRow_1_SortOut.CatFarmacologica_ = row21.CatFarmacologica_;
	arrayRowtSortRow_1_SortOut.FormFarmaceutica_ = row21.FormFarmaceutica_;
	arrayRowtSortRow_1_SortOut.IdentificadorUnico = row21.IdentificadorUnico;
	arrayRowtSortRow_1_SortOut.SustanciaActiva = row21.SustanciaActiva;
	arrayRowtSortRow_1_SortOut.ViaAdmin_Id_ = row21.ViaAdmin_Id_;
	arrayRowtSortRow_1_SortOut.CatFarmacologica_Id = row21.CatFarmacologica_Id;
	arrayRowtSortRow_1_SortOut.Sustancia_Activa_Id_ = row21.Sustancia_Activa_Id_;
	arrayRowtSortRow_1_SortOut.CatFarmacologica_Id_ = row21.CatFarmacologica_Id_;
	arrayRowtSortRow_1_SortOut.Generico_Id_ = row21.Generico_Id_;
	arrayRowtSortRow_1_SortOut.FormFarmaceutica_Id = row21.FormFarmaceutica_Id;
	arrayRowtSortRow_1_SortOut.FormFarmaceutica_Ids_ = row21.FormFarmaceutica_Ids_;
	arrayRowtSortRow_1_SortOut.Id_ = row21.Id_;	
	list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

 


	tos_count_tSortRow_1_SortOut++;

/**
 * [tSortRow_1_SortOut main ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	

 



/**
 * [tSortRow_1_SortOut process_data_begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	

 



/**
 * [tSortRow_1_SortOut process_data_end ] stop
 */

} // End of branch "row21"




// Start of branch "row13"
if(row13 != null) { 



	
	/**
	 * [tOracleSP_3 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					

			// code for the argument 1 (NGenerico_) of type 'IN CLOB'
    					if (row13.NGenerico_ == null) {
    						statement_tOracleSP_3.setNull(1, java.sql.Types.VARCHAR);
    					} else {
    					
                        java.sql.Clob clob_tOracleSP_3 = connection_tOracleSP_3.createClob();
                        clob_tOracleSP_3.setString(1, row13.NGenerico_);
                        statement_tOracleSP_3.setClob(1, clob_tOracleSP_3);
    					}
    					
			// code for the argument 2 (Concentracion_) of type 'IN CLOB'
    					if (row13.Concentracion_ == null) {
    						statement_tOracleSP_3.setNull(2, java.sql.Types.VARCHAR);
    					} else {
    					
                        java.sql.Clob clob_tOracleSP_3 = connection_tOracleSP_3.createClob();
                        clob_tOracleSP_3.setString(1, row13.Concentracion_);
                        statement_tOracleSP_3.setClob(2, clob_tOracleSP_3);
    					}
    					
			// code for the argument 3 (ViaAdmin_Id_) of type 'IN NUMERIC'
    					if (row13.ViaAdmin_Id_ == null) {
    						statement_tOracleSP_3.setNull(3, java.sql.Types.OTHER);
    					} else {
    					
                        statement_tOracleSP_3.setBigDecimal(3, row13.ViaAdmin_Id_);
    					}
    					
			// code for the argument 4 (CatFarmacologica_Id) of type 'IN NUMERIC'
    					if (row13.CatFarmacologica_Id == null) {
    						statement_tOracleSP_3.setNull(4, java.sql.Types.OTHER);
    					} else {
    					
                        statement_tOracleSP_3.setBigDecimal(4, row13.CatFarmacologica_Id);
    					}
    					
			// code for the argument 5 (CodAtc_) of type 'IN CLOB'
    					if (row13.CodAtc_ == null) {
    						statement_tOracleSP_3.setNull(5, java.sql.Types.VARCHAR);
    					} else {
    					
                        java.sql.Clob clob_tOracleSP_3 = connection_tOracleSP_3.createClob();
                        clob_tOracleSP_3.setString(1, row13.CodAtc_);
                        statement_tOracleSP_3.setClob(5, clob_tOracleSP_3);
    					}
    					
			// code for the argument 6 (FormFarmaceutica_Id) of type 'IN NUMERIC'
    					if (row13.FormFarmaceutica_Id == null) {
    						statement_tOracleSP_3.setNull(6, java.sql.Types.OTHER);
    					} else {
    					
                        statement_tOracleSP_3.setBigDecimal(6, row13.FormFarmaceutica_Id);
    					}
    					
			// code for the argument 7 (IdentificadorUnico) of type 'IN NUMERIC'
    					if (row13.IdentificadorUnico == null) {
    						statement_tOracleSP_3.setNull(7, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tOracleSP_3.setString(7, row13.IdentificadorUnico);
    					}
    					
			// code for the argument 8 (Sustancia_Activa_Id_) of type 'IN CLOB'
    					if (row13.Sustancia_Activa_Id_ == null) {
    						statement_tOracleSP_3.setNull(8, java.sql.Types.OTHER);
    					} else {
    					
                        statement_tOracleSP_3.setBigDecimal(8, row13.Sustancia_Activa_Id_);
    					}
    					
			// code for the argument 9 (Estado_) of type 'INOUT AUTOMAPPING'
    					if (row13.Estado_ == null) {
    						statement_tOracleSP_3.setNull(9, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tOracleSP_3.setString(9, row13.Estado_);
    					}
    					
					statement_tOracleSP_3.registerOutParameter(9, java.sql.Types.VARCHAR);
			// code for the argument 10 (_Message) of type 'OUT CLOB'
					statement_tOracleSP_3.registerOutParameter(10, java.sql.Types.CLOB);
			// code for the argument 11 (Id_) of type 'OUT NUMERIC'
					statement_tOracleSP_3.registerOutParameter(11, java.sql.Types.NUMERIC);
		statement_tOracleSP_3.execute();
		

 


	tos_count_tOracleSP_3++;

/**
 * [tOracleSP_3 main ] stop
 */
	
	/**
	 * [tOracleSP_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	

 



/**
 * [tOracleSP_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	

 



/**
 * [tOracleSP_3 process_data_end ] stop
 */

} // End of branch "row13"




	
	/**
	 * [tFilterRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";
	
	

 



/**
 * [tFilterRow_2 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 process_data_end ] stop
 */



	
	/**
	 * [tDenormalize_1_ArrayIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	

 



/**
 * [tDenormalize_1_ArrayIn process_data_end ] stop
 */
	
	/**
	 * [tDenormalize_1_ArrayIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	
	nb_line_tDenormalize_1_ArrayIn++;
}
globalMap.put("tDenormalize_1_ArrayIn_NB_LINE",nb_line_tDenormalize_1_ArrayIn);
 

ok_Hash.put("tDenormalize_1_ArrayIn", true);
end_Hash.put("tDenormalize_1_ArrayIn", System.currentTimeMillis());




/**
 * [tDenormalize_1_ArrayIn end ] stop
 */

	
	/**
	 * [tJavaRow_8 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

globalMap.put("tJavaRow_8_NB_LINE",nb_line_tJavaRow_8);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tJavaRow_8", true);
end_Hash.put("tJavaRow_8", System.currentTimeMillis());




/**
 * [tJavaRow_8 end ] stop
 */

	
	/**
	 * [tFilterRow_2 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";
	
	
    globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tFilterRow_2", true);
end_Hash.put("tFilterRow_2", System.currentTimeMillis());




/**
 * [tFilterRow_2 end ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	

row21Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut.toArray(new Comparablerow21Struct[0]);

java.util.Arrays.sort(array_tSortRow_1_SortOut);

globalMap.put("tSortRow_1",array_tSortRow_1_SortOut);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tSortRow_1_SortOut", true);
end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_1_SortOut end ] stop
 */






	
	/**
	 * [tOracleOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_2", false);
		start_Hash.put("tOracleOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"next_7");
					}
				
		int tos_count_tOracleOutput_2 = 0;
		






    
    int nb_line_tOracleOutput_2 = 0;
    int nb_line_update_tOracleOutput_2 = 0;
    int nb_line_inserted_tOracleOutput_2 = 0;
    int nb_line_deleted_tOracleOutput_2 = 0;
    int nb_line_rejected_tOracleOutput_2 = 0;

    int tmp_batchUpdateCount_tOracleOutput_2 = 0;

    int deletedCount_tOracleOutput_2=0;
    int updatedCount_tOracleOutput_2=0;
    int insertedCount_tOracleOutput_2=0;
    int rowsToCommitCount_tOracleOutput_2=0;
    int rejectedCount_tOracleOutput_2=0;

    boolean whetherReject_tOracleOutput_2 = false;

    java.sql.Connection conn_tOracleOutput_2 = null;

    //optional table
    String dbschema_tOracleOutput_2 = null;
    String tableName_tOracleOutput_2 = null;
        dbschema_tOracleOutput_2 = (String)globalMap.get("dbschema_tOracleConnection_1");
		
        conn_tOracleOutput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
        int count_tOracleOutput_2=0;

        if(dbschema_tOracleOutput_2 == null || dbschema_tOracleOutput_2.trim().length() == 0) {
            tableName_tOracleOutput_2 = ("MED_GENERICOS_TEMP_LOG");
        } else {
            tableName_tOracleOutput_2 = dbschema_tOracleOutput_2 + "." + ("MED_GENERICOS_TEMP_LOG");
        }
                                String tableNameForSearch_tOracleOutput_2= "" + ((String)"MED_GENERICOS_TEMP_LOG") + "";
String dbschemaForSearch_tOracleOutput_2= null;
if(dbschema_tOracleOutput_2== null || dbschema_tOracleOutput_2.trim().length() == 0) {
dbschemaForSearch_tOracleOutput_2= ((String)globalMap.get("username_tOracleConnection_1")).toUpperCase();
} else {
dbschemaForSearch_tOracleOutput_2= dbschema_tOracleOutput_2.toUpperCase();
}

                                java.sql.DatabaseMetaData dbMetaData_tOracleOutput_2 = conn_tOracleOutput_2.getMetaData();
                                if(tableNameForSearch_tOracleOutput_2.indexOf("\"")==-1){
                                    tableNameForSearch_tOracleOutput_2 = tableNameForSearch_tOracleOutput_2.toUpperCase();
                                }else{
                                    tableNameForSearch_tOracleOutput_2 = tableNameForSearch_tOracleOutput_2.replaceAll("\"","");
                                }
                                boolean whetherExist_tOracleOutput_2 = false;
                                try (java.sql.ResultSet rsTable_tOracleOutput_2 = dbMetaData_tOracleOutput_2.getTables(null, dbschemaForSearch_tOracleOutput_2, tableNameForSearch_tOracleOutput_2, new String[]{"TABLE"})) {
                                    if(rsTable_tOracleOutput_2.next()) {
                                        whetherExist_tOracleOutput_2 = true;
                                    }
                                }

                                if(!whetherExist_tOracleOutput_2) {
                                    try (java.sql.Statement stmtCreate_tOracleOutput_2 = conn_tOracleOutput_2.createStatement()) {
                                        stmtCreate_tOracleOutput_2.execute("CREATE TABLE " + tableName_tOracleOutput_2 + "(IDENTIFICADOR_UNICO VARCHAR2(100)  ,NOMBRE_GENERICO VARCHAR2(500)  ,CONCENTRACION VARCHAR2(500)  ,CODIGO_ATC VARCHAR2(200)  ,VIA_ADMINISTRACION VARCHAR2(200)  ,CATEGORIA_FARMACOLOGICA VARCHAR2(200)  ,FORMA_FARMACEUTICA VARCHAR2(500)  ,SUSTANCIA_ACTIVA VARCHAR2(500)  ,ESTADO VARCHAR2(50)  ,OBSERVACION VARCHAR2(500)  )");
                                    }
                                }
                String insert_tOracleOutput_2 = "INSERT INTO " + tableName_tOracleOutput_2 + " (IDENTIFICADOR_UNICO,NOMBRE_GENERICO,CONCENTRACION,CODIGO_ATC,VIA_ADMINISTRACION,CATEGORIA_FARMACOLOGICA,FORMA_FARMACEUTICA,SUSTANCIA_ACTIVA,ESTADO,OBSERVACION) VALUES (?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_2 = conn_tOracleOutput_2.prepareStatement(insert_tOracleOutput_2);
                        resourceMap.put("pstmt_tOracleOutput_2", pstmt_tOracleOutput_2);





 



/**
 * [tOracleOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
next_7Struct next_7_tmp = new next_7Struct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tReplicate_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_1", false);
		start_Hash.put("tReplicate_1", System.currentTimeMillis());
		
	
	currentComponent="tReplicate_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row26");
					}
				
		int tos_count_tReplicate_1 = 0;
		

 



/**
 * [tReplicate_1 begin ] stop
 */



	
	/**
	 * [tJavaFlex_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaFlex_1", false);
		start_Hash.put("tJavaFlex_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"next_6");
					}
				
		int tos_count_tJavaFlex_1 = 0;
		


// start part of your Java code
int count = 1;
      


 



/**
 * [tJavaFlex_1 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
next_6Struct next_6_tmp = new next_6Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortIn", false);
		start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	
		int tos_count_tSortRow_1_SortIn = 0;
		


row21Struct[] array_tSortRow_1_SortIn = (row21Struct[]) globalMap.remove("tSortRow_1");

int nb_line_tSortRow_1_SortIn = 0;

row21Struct current_tSortRow_1_SortIn = null;

for(int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++){
	current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
	row23.upNGenerico = current_tSortRow_1_SortIn.upNGenerico;
	row23.upConcentracion = current_tSortRow_1_SortIn.upConcentracion;
	row23.upCodAtc = current_tSortRow_1_SortIn.upCodAtc;
	row23.upViaAdmin = current_tSortRow_1_SortIn.upViaAdmin;
	row23.upCatFarmacologica = current_tSortRow_1_SortIn.upCatFarmacologica;
	row23.upFormFarmaceutica = current_tSortRow_1_SortIn.upFormFarmaceutica;
	row23.upIdentificadorUnico = current_tSortRow_1_SortIn.upIdentificadorUnico;
	row23.upSustanciaActiva = current_tSortRow_1_SortIn.upSustanciaActiva;
	row23.Estado_ = current_tSortRow_1_SortIn.Estado_;
	row23._Insert = current_tSortRow_1_SortIn._Insert;
	row23._Message = current_tSortRow_1_SortIn._Message;
	row23.NGenerico_ = current_tSortRow_1_SortIn.NGenerico_;
	row23.Concentracion_ = current_tSortRow_1_SortIn.Concentracion_;
	row23.CodAtc_ = current_tSortRow_1_SortIn.CodAtc_;
	row23.ViaAdmin_ = current_tSortRow_1_SortIn.ViaAdmin_;
	row23.CatFarmacologica_ = current_tSortRow_1_SortIn.CatFarmacologica_;
	row23.FormFarmaceutica_ = current_tSortRow_1_SortIn.FormFarmaceutica_;
	row23.IdentificadorUnico = current_tSortRow_1_SortIn.IdentificadorUnico;
	row23.SustanciaActiva = current_tSortRow_1_SortIn.SustanciaActiva;
	row23.ViaAdmin_Id_ = current_tSortRow_1_SortIn.ViaAdmin_Id_;
	row23.CatFarmacologica_Id = current_tSortRow_1_SortIn.CatFarmacologica_Id;
	row23.Sustancia_Activa_Id_ = current_tSortRow_1_SortIn.Sustancia_Activa_Id_;
	row23.CatFarmacologica_Id_ = current_tSortRow_1_SortIn.CatFarmacologica_Id_;
	row23.Generico_Id_ = current_tSortRow_1_SortIn.Generico_Id_;
	row23.FormFarmaceutica_Id = current_tSortRow_1_SortIn.FormFarmaceutica_Id;
	row23.FormFarmaceutica_Ids_ = current_tSortRow_1_SortIn.FormFarmaceutica_Ids_;
	row23.Id_ = current_tSortRow_1_SortIn.Id_;
	// increase number of line sorted
	nb_line_tSortRow_1_SortIn++;

 



/**
 * [tSortRow_1_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	

 


	tos_count_tSortRow_1_SortIn++;

/**
 * [tSortRow_1_SortIn main ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	

 



/**
 * [tSortRow_1_SortIn process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row23"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

next_6 = null;


// # Output table : 'next_6'
next_6_tmp.Item = null;
next_6_tmp.upNGenerico = row23.upNGenerico ;
next_6_tmp.upConcentracion = row23.upConcentracion ;
next_6_tmp.upCodAtc = row23.upCodAtc ;
next_6_tmp.upViaAdmin = row23.upViaAdmin ;
next_6_tmp.upCatFarmacologica = row23.upCatFarmacologica ;
next_6_tmp.upFormFarmaceutica = row23.upFormFarmaceutica ;
next_6_tmp.upIdentificadorUnico = row23.upIdentificadorUnico;
next_6_tmp.upSustanciaActiva = row23.upSustanciaActiva;
next_6_tmp.Estado_ = row23.Estado_ ;
next_6_tmp._Insert = row23._Insert ;
next_6_tmp._Message = row23._Message ;
next_6_tmp.NGenerico_ = row23.NGenerico_ ;
next_6_tmp.Concentracion_ = row23.Concentracion_ ;
next_6_tmp.CodAtc_ = row23.CodAtc_ ;
next_6_tmp.ViaAdmin_ = row23.ViaAdmin_ ;
next_6_tmp.CatFarmacologica_ = row23.CatFarmacologica_ ;
next_6_tmp.FormFarmaceutica_ = row23.FormFarmaceutica_ ;
next_6_tmp.IdentificadorUnico = row23.IdentificadorUnico;
next_6_tmp.SustanciaActiva = row23.SustanciaActiva;
next_6_tmp.ViaAdmin_Id_ = row23.ViaAdmin_Id_ ;
next_6_tmp.CatFarmacologica_Id = row23.CatFarmacologica_Id ;
next_6_tmp.Sustancia_Activa_Id_ = row23.Sustancia_Activa_Id_;
next_6_tmp.CatFarmacologica_Id_ = row23.CatFarmacologica_Id_ ;
next_6_tmp.Generico_Id_ = row23.Generico_Id_ ;
next_6_tmp.FormFarmaceutica_Ids_ = row23.FormFarmaceutica_Ids_ ;
next_6 = next_6_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "next_6"
if(next_6 != null) { 



	
	/**
	 * [tJavaFlex_1 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"next_6"
						
						);
					}
					


	        				row26.Item = next_6.Item;
	        				row26.upNGenerico = next_6.upNGenerico;
	        				row26.upConcentracion = next_6.upConcentracion;
	        				row26.upCodAtc = next_6.upCodAtc;
	        				row26.upViaAdmin = next_6.upViaAdmin;
	        				row26.upCatFarmacologica = next_6.upCatFarmacologica;
	        				row26.upFormFarmaceutica = next_6.upFormFarmaceutica;
	        				row26.upIdentificadorUnico = next_6.upIdentificadorUnico;
	        				row26.upSustanciaActiva = next_6.upSustanciaActiva;
	        				row26.Estado_ = next_6.Estado_;
	        				row26._Insert = next_6._Insert;
	        				row26._Message = next_6._Message;
	        				row26.NGenerico_ = next_6.NGenerico_;
	        				row26.Concentracion_ = next_6.Concentracion_;
	        				row26.CodAtc_ = next_6.CodAtc_;
	        				row26.ViaAdmin_ = next_6.ViaAdmin_;
	        				row26.CatFarmacologica_ = next_6.CatFarmacologica_;
	        				row26.FormFarmaceutica_ = next_6.FormFarmaceutica_;
	        				row26.IdentificadorUnico = next_6.IdentificadorUnico;
	        				row26.SustanciaActiva = next_6.SustanciaActiva;
	        				row26.ViaAdmin_Id_ = next_6.ViaAdmin_Id_;
	        				row26.CatFarmacologica_Id = next_6.CatFarmacologica_Id;
	        				row26.Sustancia_Activa_Id_ = next_6.Sustancia_Activa_Id_;
	        				row26.CatFarmacologica_Id_ = next_6.CatFarmacologica_Id_;
	        				row26.Generico_Id_ = next_6.Generico_Id_;
	        				row26.FormFarmaceutica_Ids_ = next_6.FormFarmaceutica_Ids_;

// here is the main part of the component,
// a piece of code executed in the row
// loop
row26.Item = count;
count +=1; 

 


	tos_count_tJavaFlex_1++;

/**
 * [tJavaFlex_1 main ] stop
 */
	
	/**
	 * [tJavaFlex_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";
	
	

 



/**
 * [tJavaFlex_1 process_data_begin ] stop
 */

	
	/**
	 * [tReplicate_1 main ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row26"
						
						);
					}
					


	row19 = new row19Struct();
						
	row19.Item = row26.Item;								
	row19.upNGenerico = row26.upNGenerico;								
	row19.upConcentracion = row26.upConcentracion;								
	row19.upCodAtc = row26.upCodAtc;								
	row19.upViaAdmin = row26.upViaAdmin;								
	row19.upCatFarmacologica = row26.upCatFarmacologica;								
	row19.upFormFarmaceutica = row26.upFormFarmaceutica;								
	row19.upIdentificadorUnico = row26.upIdentificadorUnico;								
	row19.upSustanciaActiva = row26.upSustanciaActiva;								
	row19.Estado_ = row26.Estado_;								
	row19._Insert = row26._Insert;								
	row19._Message = row26._Message;								
	row19.NGenerico_ = row26.NGenerico_;								
	row19.Concentracion_ = row26.Concentracion_;								
	row19.CodAtc_ = row26.CodAtc_;								
	row19.ViaAdmin_ = row26.ViaAdmin_;								
	row19.CatFarmacologica_ = row26.CatFarmacologica_;								
	row19.FormFarmaceutica_ = row26.FormFarmaceutica_;								
	row19.IdentificadorUnico = row26.IdentificadorUnico;								
	row19.SustanciaActiva = row26.SustanciaActiva;								
	row19.ViaAdmin_Id_ = row26.ViaAdmin_Id_;								
	row19.CatFarmacologica_Id = row26.CatFarmacologica_Id;								
	row19.Sustancia_Activa_Id_ = row26.Sustancia_Activa_Id_;								
	row19.CatFarmacologica_Id_ = row26.CatFarmacologica_Id_;								
	row19.Generico_Id_ = row26.Generico_Id_;								
	row19.FormFarmaceutica_Ids_ = row26.FormFarmaceutica_Ids_;			


 


	tos_count_tReplicate_1++;

/**
 * [tReplicate_1 main ] stop
 */
	
	/**
	 * [tReplicate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	

 



/**
 * [tReplicate_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row19"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_7 = false;
		boolean mainRowRejected_tMap_7 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

next_7 = null;


// # Output table : 'next_7'
next_7_tmp.IDENTIFICADOR_UNICO = row19.IdentificadorUnico;
next_7_tmp.NOMBRE_GENERICO = row19.upNGenerico ;
next_7_tmp.CONCENTRACION = row19.upConcentracion ;
next_7_tmp.CODIGO_ATC = row19.upCodAtc ;
next_7_tmp.VIA_ADMINISTRACION = row19.upViaAdmin ;
next_7_tmp.CATEGORIA_FARMACOLOGICA = row19.upCatFarmacologica ;
next_7_tmp.FORMA_FARMACEUTICA = row19.FormFarmaceutica_ ;
next_7_tmp.SUSTANCIA_ACTIVA = row19.SustanciaActiva;
next_7_tmp.ESTADO = row19.Estado_ ;
next_7_tmp.OBSERVACION = row19._Message ;
next_7 = next_7_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "next_7"
if(next_7 != null) { 



	
	/**
	 * [tOracleOutput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"next_7"
						
						);
					}
					



        whetherReject_tOracleOutput_2 = false;
                        if(next_7.IDENTIFICADOR_UNICO == null) {
pstmt_tOracleOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(1, next_7.IDENTIFICADOR_UNICO);
}

                        if(next_7.NOMBRE_GENERICO == null) {
pstmt_tOracleOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(2, next_7.NOMBRE_GENERICO);
}

                        if(next_7.CONCENTRACION == null) {
pstmt_tOracleOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(3, next_7.CONCENTRACION);
}

                        if(next_7.CODIGO_ATC == null) {
pstmt_tOracleOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(4, next_7.CODIGO_ATC);
}

                        if(next_7.VIA_ADMINISTRACION == null) {
pstmt_tOracleOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(5, next_7.VIA_ADMINISTRACION);
}

                        if(next_7.CATEGORIA_FARMACOLOGICA == null) {
pstmt_tOracleOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(6, next_7.CATEGORIA_FARMACOLOGICA);
}

                        if(next_7.FORMA_FARMACEUTICA == null) {
pstmt_tOracleOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(7, next_7.FORMA_FARMACEUTICA);
}

                        if(next_7.SUSTANCIA_ACTIVA == null) {
pstmt_tOracleOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(8, next_7.SUSTANCIA_ACTIVA);
}

                        if(next_7.ESTADO == null) {
pstmt_tOracleOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(9, next_7.ESTADO);
}

                        if(next_7.OBSERVACION == null) {
pstmt_tOracleOutput_2.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(10, next_7.OBSERVACION);
}

                try {
                    nb_line_tOracleOutput_2++;
                    int processedCount_tOracleOutput_2 = pstmt_tOracleOutput_2.executeUpdate();
                    insertedCount_tOracleOutput_2 += processedCount_tOracleOutput_2;
                    rowsToCommitCount_tOracleOutput_2 += processedCount_tOracleOutput_2;
                } catch(java.lang.Exception e_tOracleOutput_2) {
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
                    whetherReject_tOracleOutput_2 = true;
                            System.err.print(e_tOracleOutput_2.getMessage());
                }

 


	tos_count_tOracleOutput_2++;

/**
 * [tOracleOutput_2 main ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_end ] stop
 */

} // End of branch "next_7"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tReplicate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	

 



/**
 * [tReplicate_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaFlex_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";
	
	

 



/**
 * [tJavaFlex_1 process_data_end ] stop
 */

} // End of branch "next_6"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	

 



/**
 * [tSortRow_1_SortIn process_data_end ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	


}

globalMap.put("tSortRow_1_SortIn_NB_LINE",nb_line_tSortRow_1_SortIn);

 

ok_Hash.put("tSortRow_1_SortIn", true);
end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_1_SortIn end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tJavaFlex_1 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";
	
	


// end of the component, outside/closing the loop
if(count > 1 ){
	context.result = "1";
}

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"next_6");
			  	}
			  	
 

ok_Hash.put("tJavaFlex_1", true);
end_Hash.put("tJavaFlex_1", System.currentTimeMillis());




/**
 * [tJavaFlex_1 end ] stop
 */

	
	/**
	 * [tReplicate_1 end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row26");
			  	}
			  	
 

ok_Hash.put("tReplicate_1", true);
end_Hash.put("tReplicate_1", System.currentTimeMillis());




/**
 * [tReplicate_1 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tOracleOutput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
	



	
        if(pstmt_tOracleOutput_2 != null) {
			
				pstmt_tOracleOutput_2.close();
				resourceMap.remove("pstmt_tOracleOutput_2");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_2", true);

	
	nb_line_deleted_tOracleOutput_2=nb_line_deleted_tOracleOutput_2+ deletedCount_tOracleOutput_2;
	nb_line_update_tOracleOutput_2=nb_line_update_tOracleOutput_2 + updatedCount_tOracleOutput_2;
	nb_line_inserted_tOracleOutput_2=nb_line_inserted_tOracleOutput_2 + insertedCount_tOracleOutput_2;
	nb_line_rejected_tOracleOutput_2=nb_line_rejected_tOracleOutput_2 + rejectedCount_tOracleOutput_2;
	
        globalMap.put("tOracleOutput_2_NB_LINE",nb_line_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_UPDATED",nb_line_update_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_2);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"next_7");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_2", true);
end_Hash.put("tOracleOutput_2", System.currentTimeMillis());




/**
 * [tOracleOutput_2 end ] stop
 */






















	
	/**
	 * [tOracleSP_3 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	


	statement_tOracleSP_3.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tOracleSP_3", true);
end_Hash.put("tOracleSP_3", System.currentTimeMillis());




/**
 * [tOracleSP_3 end ] stop
 */


































































				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tSortRow_1_SortIn"
							globalMap.remove("tSortRow_1");
						
							//free memory for "tDenormalize_1_ArrayIn"
							globalMap.remove("tDenormalize_1");
						      	
					      			//free memory for "tJoin_1"
									globalMap.remove("tHash_row15");
				      			      	
					      			//free memory for "tJoin_4"
									globalMap.remove("tHash_row35");
				      			      	
					      			//free memory for "tJoin_3"
									globalMap.remove("tHash_row9");
				      			
					     			//free memory for "tMap_10"
					     			globalMap.remove("tHash_Lookup_row7"); 
				     			
					     			//free memory for "tMap_10"
					     			globalMap.remove("tHash_Lookup_row8"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 finally ] stop
 */

	
	/**
	 * [tJavaRow_5 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tJoin_3 finally ] start
	 */

	

	
	
	currentComponent="tJoin_3";
	
	

 



/**
 * [tJoin_3 finally ] stop
 */

	
	/**
	 * [tJavaRow_7 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 finally ] stop
 */

	
	/**
	 * [tNormalize_1 finally ] start
	 */

	

	
	
	currentComponent="tNormalize_1";
	
	

 



/**
 * [tNormalize_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_10 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

 



/**
 * [tJavaRow_10 finally ] stop
 */

	
	/**
	 * [tJoin_4 finally ] start
	 */

	

	
	
	currentComponent="tJoin_4";
	
	

 



/**
 * [tJoin_4 finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tOracleSP_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 finally ] stop
 */

	
	/**
	 * [tReplicate_2 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_2";
	
	

 



/**
 * [tReplicate_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_6 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 finally ] stop
 */

	
	/**
	 * [tNormalize_2 finally ] start
	 */

	

	
	
	currentComponent="tNormalize_2";
	
	

 



/**
 * [tNormalize_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 finally ] stop
 */

	
	/**
	 * [tJoin_1 finally ] start
	 */

	

	
	
	currentComponent="tJoin_1";
	
	

 



/**
 * [tJoin_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tDenormalize_1_DenormalizeOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_1_DenormalizeOut finally ] stop
 */

	
	/**
	 * [tDenormalize_1_ArrayIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	

 



/**
 * [tDenormalize_1_ArrayIn finally ] stop
 */

	
	/**
	 * [tJavaRow_8 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 finally ] stop
 */

	
	/**
	 * [tFilterRow_2 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";
	
	

 



/**
 * [tFilterRow_2 finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	

 



/**
 * [tSortRow_1_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	

 



/**
 * [tSortRow_1_SortIn finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tJavaFlex_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";
	
	

 



/**
 * [tJavaFlex_1 finally ] stop
 */

	
	/**
	 * [tReplicate_1 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	

 



/**
 * [tReplicate_1 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tOracleOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_2 = null;
                if ((pstmtToClose_tOracleOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_2")) != null) {
                    pstmtToClose_tOracleOutput_2.close();
                }
    }
 



/**
 * [tOracleOutput_2 finally ] stop
 */






















	
	/**
	 * [tOracleSP_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	

 



/**
 * [tOracleSP_3 finally ] stop
 */


































































				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 4000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 4000;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.NOMBRE == null) ? 0 : this.NOMBRE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.NOMBRE == null) {
							if (other.NOMBRE != null)
								return false;
						
						} else if (!this.NOMBRE.equals(other.NOMBRE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.NOMBRE = this.NOMBRE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
						this.SIGLA = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
						this.SIGLA = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
						writeString(this.SIGLA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						writeString(this.SIGLA, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.NOMBRE, other.NOMBRE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tAdvancedHash_row7 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row7", false);
		start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tAdvancedHash_row7 = 0;
		

			   		// connection name:row7
			   		// source node:tOracleInput_2 - inputs:(after_tOracleInput_6) outputs:(row7,row7) | target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
			   		// linked node: tMap_10 - inputs:(row22,row7,row8) outputs:(outViaAdmin)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row7Struct>getLookup(matchingModeEnum_row7);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row7 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				conn_tOracleInput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_2 = false;
				boolean isConnectionWrapped_tOracleInput_2 = !(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_2 = null;
                if (isConnectionWrapped_tOracleInput_2) {
					unwrappedOraConn_tOracleInput_2 = conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_2 != null) {
                        isTimeZoneNull_tOracleInput_2 = (unwrappedOraConn_tOracleInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_2 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_2) {
					java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_2.next()) {
						sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_2 && unwrappedOraConn_tOracleInput_2 != null) {
                        unwrappedOraConn_tOracleInput_2.setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement();

		    String dbquery_tOracleInput_2 = "SELECT \n  ID, \n  UPPER(TRIM(MED.MayusculasSinAcentos(NOMBRE))) AS NOMBRE, \n  UPPER(TRIM(MED.MayusculasSinAcentos(SIG"
+"LA))) AS SIGLA\nFROM MED_TVIADMIN\nWHERE ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row7.ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(1) != null) {
						row7.ID = rs_tOracleInput_2.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row7.NOMBRE = null;
							} else {
	                         		
        	row7.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 3) {
								row7.SIGLA = null;
							} else {
	                         		
        	row7.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 3, false);
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					


			   
			   

					row7Struct row7_HashRow = new row7Struct();
		   	   	   
				
				row7_HashRow.ID = row7.ID;
				
				row7_HashRow.NOMBRE = row7.NOMBRE;
				
				row7_HashRow.SIGLA = row7.SIGLA;
				
			tHash_Lookup_row7.put(row7_HashRow);
			
            




 


	tos_count_tAdvancedHash_row7++;

/**
 * [tAdvancedHash_row7 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());




/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

tHash_Lookup_row7.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row7", true);
end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());




/**
 * [tAdvancedHash_row7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 4000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 4000;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.SIGLA = this.SIGLA;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tAdvancedHash_row8 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row8", false);
		start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tAdvancedHash_row8 = 0;
		

			   		// connection name:row8
			   		// source node:tOracleInput_5 - inputs:(after_tOracleInput_6) outputs:(row8,row8) | target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
			   		// linked node: tMap_10 - inputs:(row22,row7,row8) outputs:(outViaAdmin)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row8Struct>getLookup(matchingModeEnum_row8);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row8 begin ] stop
 */



	
	/**
	 * [tOracleInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_5", false);
		start_Hash.put("tOracleInput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_5";
	
	
		int tos_count_tOracleInput_5 = 0;
		
	


	
		    int nb_line_tOracleInput_5 = 0;
		    java.sql.Connection conn_tOracleInput_5 = null;
				conn_tOracleInput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_5 = false;
				boolean isConnectionWrapped_tOracleInput_5 = !(conn_tOracleInput_5 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_5 = null;
                if (isConnectionWrapped_tOracleInput_5) {
					unwrappedOraConn_tOracleInput_5 = conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_5 != null) {
                        isTimeZoneNull_tOracleInput_5 = (unwrappedOraConn_tOracleInput_5.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_5 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_5).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_5) {
					java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_5 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_5.next()) {
						sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_5 && unwrappedOraConn_tOracleInput_5 != null) {
                        unwrappedOraConn_tOracleInput_5.setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_5).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5.createStatement();

		    String dbquery_tOracleInput_5 = "SELECT \n  ID, \n  UPPER(TRIM(MED.MayusculasSinAcentos(NOMBRE))) AS NOMBRE, \n  UPPER(TRIM(MED.MayusculasSinAcentos(SIG"
+"LA))) AS SIGLA\nFROM MED_TVIADMIN\nWHERE ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_5_QUERY",dbquery_tOracleInput_5);

		    java.sql.ResultSet rs_tOracleInput_5 = null;

		    try {
		    	rs_tOracleInput_5 = stmt_tOracleInput_5.executeQuery(dbquery_tOracleInput_5);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5.getMetaData();
		    	int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5.getColumnCount();

		    String tmpContent_tOracleInput_5 = null;
		    
		    
		    while (rs_tOracleInput_5.next()) {
		        nb_line_tOracleInput_5++;
		        
							if(colQtyInRs_tOracleInput_5 < 1) {
								row8.ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(1) != null) {
						row8.ID = rs_tOracleInput_5.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 2) {
								row8.NOMBRE = null;
							} else {
	                         		
        	row8.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 3) {
								row8.SIGLA = null;
							} else {
	                         		
        	row8.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 3, false);
		                    }
					




 



/**
 * [tOracleInput_5 begin ] stop
 */
	
	/**
	 * [tOracleInput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 


	tos_count_tOracleInput_5++;

/**
 * [tOracleInput_5 main ] stop
 */
	
	/**
	 * [tOracleInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					


			   
			   

					row8Struct row8_HashRow = new row8Struct();
		   	   	   
				
				row8_HashRow.ID = row8.ID;
				
				row8_HashRow.NOMBRE = row8.NOMBRE;
				
				row8_HashRow.SIGLA = row8.SIGLA;
				
			tHash_Lookup_row8.put(row8_HashRow);
			
            




 


	tos_count_tAdvancedHash_row8++;

/**
 * [tAdvancedHash_row8 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

}
}finally{
	if (rs_tOracleInput_5 != null) {
		rs_tOracleInput_5.close();
	}
	if (stmt_tOracleInput_5 != null) {
		stmt_tOracleInput_5.close();
	}
}

globalMap.put("tOracleInput_5_NB_LINE",nb_line_tOracleInput_5);
 

ok_Hash.put("tOracleInput_5", true);
end_Hash.put("tOracleInput_5", System.currentTimeMillis());




/**
 * [tOracleInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

tHash_Lookup_row8.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row8", true);
end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());




/**
 * [tAdvancedHash_row8 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableComparableLookupRow<row9Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 4000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.NOMBRE == null) ? 0 : this.NOMBRE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.NOMBRE == null) {
							if (other.NOMBRE != null)
								return false;
						
						} else if (!this.NOMBRE.equals(other.NOMBRE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.NOMBRE = this.NOMBRE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
       			    	this.ESTREGISTRO_ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
       			    	this.ESTREGISTRO_ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
       			    	oos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.NOMBRE, other.NOMBRE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tHash_row9 begin ] start
	 */

	

	
		
		ok_Hash.put("tHash_row9", false);
		start_Hash.put("tHash_row9", System.currentTimeMillis());
		
	
	currentComponent="tHash_row9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tHash_row9 = 0;
		

				java.util.Map<row9Struct, row9Struct> tHash_row9 = new java.util.LinkedHashMap<row9Struct, row9Struct>();
	            globalMap.put("tHash_row9", tHash_row9);
			
            

 



/**
 * [tHash_row9 begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				conn_tOracleInput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_3 = false;
				boolean isConnectionWrapped_tOracleInput_3 = !(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_3 = null;
                if (isConnectionWrapped_tOracleInput_3) {
					unwrappedOraConn_tOracleInput_3 = conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_3 != null) {
                        isTimeZoneNull_tOracleInput_3 = (unwrappedOraConn_tOracleInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_3 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_3) {
					java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_3.next()) {
						sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_3 && unwrappedOraConn_tOracleInput_3 != null) {
                        unwrappedOraConn_tOracleInput_3.setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement();

		    String dbquery_tOracleInput_3 = "SELECT \n  ID, \n  translate(UPPER(TRIM(NOMBRE)) , 'áéíóúÁÉÍÓÚ', 'aeiouAEIOU') AS NOMBRE\nFROM MED_CATFARMACOLOGICAS\nW"
+"HERE ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row9.ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(1) != null) {
						row9.ID = rs_tOracleInput_3.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 2) {
								row9.NOMBRE = null;
							} else {
	                         		
        	row9.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 3) {
								row9.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(3) != null) {
						row9.ESTREGISTRO_ID = rs_tOracleInput_3.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tHash_row9 main ] start
	 */

	

	
	
	currentComponent="tHash_row9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

row9Struct row9_HashRow = new row9Struct();

					row9_HashRow.ID = row9.ID;
					row9_HashRow.NOMBRE = row9.NOMBRE;
					row9_HashRow.ESTREGISTRO_ID = row9.ESTREGISTRO_ID;
tHash_row9.put(row9_HashRow, row9_HashRow);


 


	tos_count_tHash_row9++;

/**
 * [tHash_row9 main ] stop
 */
	
	/**
	 * [tHash_row9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHash_row9";
	
	

 



/**
 * [tHash_row9 process_data_begin ] stop
 */
	
	/**
	 * [tHash_row9 process_data_end ] start
	 */

	

	
	
	currentComponent="tHash_row9";
	
	

 



/**
 * [tHash_row9 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tHash_row9 end ] start
	 */

	

	
	
	currentComponent="tHash_row9";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tHash_row9", true);
end_Hash.put("tHash_row9", System.currentTimeMillis());




/**
 * [tHash_row9 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tHash_row9 finally ] start
	 */

	

	
	
	currentComponent="tHash_row9";
	
	

 



/**
 * [tHash_row9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row35Struct implements routines.system.IPersistableComparableLookupRow<row35Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 4000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return 4000;
				}
				public Integer DESCRIPCIONPrecision(){
				    return 0;
				}
				public String DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.NOMBRE == null) ? 0 : this.NOMBRE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row35Struct other = (row35Struct) obj;
		
						if (this.NOMBRE == null) {
							if (other.NOMBRE != null)
								return false;
						
						} else if (!this.NOMBRE.equals(other.NOMBRE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row35Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.DESCRIPCION = this.DESCRIPCION;
	            
	}

	public void copyKeysDataTo(row35Struct other) {

		other.NOMBRE = this.NOMBRE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
						this.DESCRIPCION = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
						this.DESCRIPCION = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
						writeString(this.DESCRIPCION, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						writeString(this.DESCRIPCION, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",DESCRIPCION="+DESCRIPCION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.NOMBRE, other.NOMBRE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row35Struct row35 = new row35Struct();




	
	/**
	 * [tHash_row35 begin ] start
	 */

	

	
		
		ok_Hash.put("tHash_row35", false);
		start_Hash.put("tHash_row35", System.currentTimeMillis());
		
	
	currentComponent="tHash_row35";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row35");
					}
				
		int tos_count_tHash_row35 = 0;
		

				java.util.Map<row35Struct, row35Struct> tHash_row35 = new java.util.LinkedHashMap<row35Struct, row35Struct>();
	            globalMap.put("tHash_row35", tHash_row35);
			
            

 



/**
 * [tHash_row35 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
                if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_1 != null) {
                        isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
                        unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement();

		    String dbquery_tOracleInput_1 = "SELECT \n  ID, \n  UPPER(TRIM(MED.MayusculasSinAcentos(NOMBRE))) AS NOMBRE, \n  UPPER(TRIM(MED.MayusculasSinAcentos(DES"
+"CRIPCION))) AS DESCRIPCION\nFROM MED_PRINCIPIOSACTIVOS\nWHERE ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row35.ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row35.ID = rs_tOracleInput_1.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row35.NOMBRE = null;
							} else {
	                         		
        	row35.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 3) {
								row35.DESCRIPCION = null;
							} else {
	                         		
        	row35.DESCRIPCION = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 3, false);
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tHash_row35 main ] start
	 */

	

	
	
	currentComponent="tHash_row35";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row35"
						
						);
					}
					

row35Struct row35_HashRow = new row35Struct();

					row35_HashRow.ID = row35.ID;
					row35_HashRow.NOMBRE = row35.NOMBRE;
					row35_HashRow.DESCRIPCION = row35.DESCRIPCION;
tHash_row35.put(row35_HashRow, row35_HashRow);


 


	tos_count_tHash_row35++;

/**
 * [tHash_row35 main ] stop
 */
	
	/**
	 * [tHash_row35 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHash_row35";
	
	

 



/**
 * [tHash_row35 process_data_begin ] stop
 */
	
	/**
	 * [tHash_row35 process_data_end ] start
	 */

	

	
	
	currentComponent="tHash_row35";
	
	

 



/**
 * [tHash_row35 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tHash_row35 end ] start
	 */

	

	
	
	currentComponent="tHash_row35";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row35");
			  	}
			  	
 

ok_Hash.put("tHash_row35", true);
end_Hash.put("tHash_row35", System.currentTimeMillis());




/**
 * [tHash_row35 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tHash_row35 finally ] start
	 */

	

	
	
	currentComponent="tHash_row35";
	
	

 



/**
 * [tHash_row35 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableComparableLookupRow<row15Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 4000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return 4000;
				}
				public Integer DESCRIPCIONPrecision(){
				    return 0;
				}
				public String DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.NOMBRE == null) ? 0 : this.NOMBRE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row15Struct other = (row15Struct) obj;
		
						if (this.NOMBRE == null) {
							if (other.NOMBRE != null)
								return false;
						
						} else if (!this.NOMBRE.equals(other.NOMBRE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row15Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.DESCRIPCION = this.DESCRIPCION;
	            
	}

	public void copyKeysDataTo(row15Struct other) {

		other.NOMBRE = this.NOMBRE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
						this.DESCRIPCION = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
						this.DESCRIPCION = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
						writeString(this.DESCRIPCION, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						writeString(this.DESCRIPCION, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",DESCRIPCION="+DESCRIPCION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.NOMBRE, other.NOMBRE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();




	
	/**
	 * [tHash_row15 begin ] start
	 */

	

	
		
		ok_Hash.put("tHash_row15", false);
		start_Hash.put("tHash_row15", System.currentTimeMillis());
		
	
	currentComponent="tHash_row15";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tHash_row15 = 0;
		

				java.util.Map<row15Struct, row15Struct> tHash_row15 = new java.util.LinkedHashMap<row15Struct, row15Struct>();
	            globalMap.put("tHash_row15", tHash_row15);
			
            

 



/**
 * [tHash_row15 begin ] stop
 */



	
	/**
	 * [tOracleInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_9", false);
		start_Hash.put("tOracleInput_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_9";
	
	
		int tos_count_tOracleInput_9 = 0;
		
	


	
		    int nb_line_tOracleInput_9 = 0;
		    java.sql.Connection conn_tOracleInput_9 = null;
				conn_tOracleInput_9 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_9 = false;
				boolean isConnectionWrapped_tOracleInput_9 = !(conn_tOracleInput_9 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_9.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_9 = null;
                if (isConnectionWrapped_tOracleInput_9) {
					unwrappedOraConn_tOracleInput_9 = conn_tOracleInput_9.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_9 != null) {
                        isTimeZoneNull_tOracleInput_9 = (unwrappedOraConn_tOracleInput_9.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_9 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_9).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_9) {
					java.sql.Statement stmtGetTZ_tOracleInput_9 = conn_tOracleInput_9.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_9 = stmtGetTZ_tOracleInput_9.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_9 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_9.next()) {
						sessionTimezone_tOracleInput_9 = rsGetTZ_tOracleInput_9.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_9 && unwrappedOraConn_tOracleInput_9 != null) {
                        unwrappedOraConn_tOracleInput_9.setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_9).setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_9 = conn_tOracleInput_9.createStatement();

		    String dbquery_tOracleInput_9 = "SELECT \n  ID, \n  UPPER(TRIM(MED.MayusculasSinAcentos(NOMBRE))) AS NOMBRE, \n  UPPER(TRIM(MED.MayusculasSinAcentos(SIG"
+"LA))) AS SIGLA\nFROM MED_TFORMASFARMACEUTICAS\nWHERE ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_9_QUERY",dbquery_tOracleInput_9);

		    java.sql.ResultSet rs_tOracleInput_9 = null;

		    try {
		    	rs_tOracleInput_9 = stmt_tOracleInput_9.executeQuery(dbquery_tOracleInput_9);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_9 = rs_tOracleInput_9.getMetaData();
		    	int colQtyInRs_tOracleInput_9 = rsmd_tOracleInput_9.getColumnCount();

		    String tmpContent_tOracleInput_9 = null;
		    
		    
		    while (rs_tOracleInput_9.next()) {
		        nb_line_tOracleInput_9++;
		        
							if(colQtyInRs_tOracleInput_9 < 1) {
								row15.ID = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(1) != null) {
						row15.ID = rs_tOracleInput_9.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 2) {
								row15.NOMBRE = null;
							} else {
	                         		
        	row15.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_9, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_9 < 3) {
								row15.DESCRIPCION = null;
							} else {
	                         		
        	row15.DESCRIPCION = routines.system.JDBCUtil.getString(rs_tOracleInput_9, 3, false);
		                    }
					




 



/**
 * [tOracleInput_9 begin ] stop
 */
	
	/**
	 * [tOracleInput_9 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 


	tos_count_tOracleInput_9++;

/**
 * [tOracleInput_9 main ] stop
 */
	
	/**
	 * [tOracleInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tHash_row15 main ] start
	 */

	

	
	
	currentComponent="tHash_row15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					

row15Struct row15_HashRow = new row15Struct();

					row15_HashRow.ID = row15.ID;
					row15_HashRow.NOMBRE = row15.NOMBRE;
					row15_HashRow.DESCRIPCION = row15.DESCRIPCION;
tHash_row15.put(row15_HashRow, row15_HashRow);


 


	tos_count_tHash_row15++;

/**
 * [tHash_row15 main ] stop
 */
	
	/**
	 * [tHash_row15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHash_row15";
	
	

 



/**
 * [tHash_row15 process_data_begin ] stop
 */
	
	/**
	 * [tHash_row15 process_data_end ] start
	 */

	

	
	
	currentComponent="tHash_row15";
	
	

 



/**
 * [tHash_row15 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_9 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

}
}finally{
	if (rs_tOracleInput_9 != null) {
		rs_tOracleInput_9.close();
	}
	if (stmt_tOracleInput_9 != null) {
		stmt_tOracleInput_9.close();
	}
}

globalMap.put("tOracleInput_9_NB_LINE",nb_line_tOracleInput_9);
 

ok_Hash.put("tOracleInput_9", true);
end_Hash.put("tOracleInput_9", System.currentTimeMillis());




/**
 * [tOracleInput_9 end ] stop
 */

	
	/**
	 * [tHash_row15 end ] start
	 */

	

	
	
	currentComponent="tHash_row15";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tHash_row15", true);
end_Hash.put("tHash_row15", System.currentTimeMillis());




/**
 * [tHash_row15 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 finally ] stop
 */

	
	/**
	 * [tHash_row15 finally ] start
	 */

	

	
	
	currentComponent="tHash_row15";
	
	

 



/**
 * [tHash_row15 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 1);
	}
	


public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tJava_3Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";
	
	
		int tos_count_tJava_3 = 0;
		


context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");



 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);



/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return null;
				}
				public Integer HostPrecision(){
				    return null;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return null;
				}
				public Integer PortPrecision(){
				    return null;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return null;
				}
				public Integer SidPrecision(){
				    return null;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return null;
				}
				public Integer ServiceNamePrecision(){
				    return null;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return null;
				}
				public Integer SchemaPrecision(){
				    return null;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return null;
				}
				public Integer UserPrecision(){
				    return null;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return null;
				}
				public Integer PasswordPrecision(){
				    return null;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String PathStorage;

				public String getPathStorage () {
					return this.PathStorage;
				}

				public Boolean PathStorageIsNullable(){
				    return true;
				}
				public Boolean PathStorageIsKey(){
				    return false;
				}
				public Integer PathStorageLength(){
				    return null;
				}
				public Integer PathStoragePrecision(){
				    return null;
				}
				public String PathStorageDefault(){
				
					return null;
				
				}
				public String PathStorageComment(){
				
				    return "";
				
				}
				public String PathStoragePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PathStorageOriginalDbColumnName(){
				
					return "PathStorage";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return null;
				}
				public Integer SMTPHostPrecision(){
				    return null;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return null;
				}
				public Integer SMTPPortPrecision(){
				    return null;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return null;
				}
				public Integer UsernameMailPrecision(){
				    return null;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return null;
				}
				public Integer PasswordMailPrecision(){
				    return null;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				
			    public String MailTo;

				public String getMailTo () {
					return this.MailTo;
				}

				public Boolean MailToIsNullable(){
				    return true;
				}
				public Boolean MailToIsKey(){
				    return false;
				}
				public Integer MailToLength(){
				    return null;
				}
				public Integer MailToPrecision(){
				    return null;
				}
				public String MailToDefault(){
				
					return null;
				
				}
				public String MailToComment(){
				
				    return "";
				
				}
				public String MailToPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MailToOriginalDbColumnName(){
				
					return "MailTo";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
					this.MailTo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
					this.MailTo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
					// String
				
						writeString(this.MailTo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
					// String
				
						writeString(this.MailTo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",PathStorage="+PathStorage);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
		sb.append(",MailTo="+MailTo);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class NameSpaceTool_tFileInputXML_1 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_1{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getStringValue().isEmpty();
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_1 = true;
org.dom4j.Document doc_tFileInputXML_1 = null;
java.io.Closeable toClose_tFileInputXML_1 = null;
try{
	if(filename_tFileInputXML_1 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream)filename_tFileInputXML_1;
		toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(inputStream_tFileInputXML_1);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_1)),"UTF-8");
		toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
		org.xml.sax.InputSource in_tFileInputXML_1= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_1);
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(in_tFileInputXML_1);
	}
}catch(java.lang.Exception e){
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_1 = false;
} finally {
	if(toClose_tFileInputXML_1!=null) {
		toClose_tFileInputXML_1.close();
	}
}
if(isValidFile_tFileInputXML_1){
NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1.createXPath(nsTool_tFileInputXML_1.addDefaultNSPrefix("/connectionStrings"));  
x_tFileInputXML_1.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_1.selectNodes(doc_tFileInputXML_1);	
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
String str_tFileInputXML_1 = "";
org.dom4j.Node node_tFileInputXML_1 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_1=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_1{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Host","/connectionStrings"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Port","/connectionStrings"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Sid","/connectionStrings"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("ServiceName","/connectionStrings"));
	xpath_3.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(3,xpath_3);
			
	org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Schema","/connectionStrings"));
	xpath_4.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(4,xpath_4);
			
	org.dom4j.XPath xpath_5 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("User","/connectionStrings"));
	xpath_5.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(5,xpath_5);
			
	org.dom4j.XPath xpath_6 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Password","/connectionStrings"));
	xpath_6.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(6,xpath_6);
			
	org.dom4j.XPath xpath_7 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PathStorage","/connectionStrings"));
	xpath_7.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(7,xpath_7);
			
	org.dom4j.XPath xpath_8 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPHost","/connectionStrings"));
	xpath_8.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(8,xpath_8);
			
	org.dom4j.XPath xpath_9 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPPort","/connectionStrings"));
	xpath_9.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(9,xpath_9);
			
	org.dom4j.XPath xpath_10 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("UsernameMail","/connectionStrings"));
	xpath_10.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(10,xpath_10);
			
	org.dom4j.XPath xpath_11 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PasswordMail","/connectionStrings"));
	xpath_11.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(11,xpath_11);
			
	org.dom4j.XPath xpath_12 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("MailTo","/connectionStrings"));
	xpath_12.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(12,xpath_12);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_1 xPathUtil_tFileInputXML_1 = new XPathUtil_tFileInputXML_1();
	xPathUtil_tFileInputXML_1.initXPaths(xpaths_tFileInputXML_1, nsTool_tFileInputXML_1, xmlNameSpaceMap_tFileInputXML_1);
for (org.dom4j.Node temp_tFileInputXML_1: nodeList_tFileInputXML_1) {
	if (nb_line_tFileInputXML_1>=50) {
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row1 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row1 = new row1Struct();
	try{
    Object obj0_tFileInputXML_1 = xpaths_tFileInputXML_1.get(0).evaluate(temp_tFileInputXML_1);
    if(obj0_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj0_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_1 instanceof String || obj0_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj0_tFileInputXML_1);
    } else if(obj0_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Host =null;
									}else{
		row1.Host = str_tFileInputXML_1;
	}
    Object obj1_tFileInputXML_1 = xpaths_tFileInputXML_1.get(1).evaluate(temp_tFileInputXML_1);
    if(obj1_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj1_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj1_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_1 instanceof String || obj1_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj1_tFileInputXML_1);
    } else if(obj1_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Port =null;
									}else{
		row1.Port = str_tFileInputXML_1;
	}
    Object obj2_tFileInputXML_1 = xpaths_tFileInputXML_1.get(2).evaluate(temp_tFileInputXML_1);
    if(obj2_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj2_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj2_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_1 instanceof String || obj2_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj2_tFileInputXML_1);
    } else if(obj2_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Sid =null;
									}else{
		row1.Sid = str_tFileInputXML_1;
	}
    Object obj3_tFileInputXML_1 = xpaths_tFileInputXML_1.get(3).evaluate(temp_tFileInputXML_1);
    if(obj3_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj3_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj3_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj3_tFileInputXML_1 instanceof String || obj3_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj3_tFileInputXML_1);
    } else if(obj3_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj3_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.ServiceName =null;
									}else{
		row1.ServiceName = str_tFileInputXML_1;
	}
    Object obj4_tFileInputXML_1 = xpaths_tFileInputXML_1.get(4).evaluate(temp_tFileInputXML_1);
    if(obj4_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj4_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj4_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj4_tFileInputXML_1 instanceof String || obj4_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj4_tFileInputXML_1);
    } else if(obj4_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj4_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Schema =null;
									}else{
		row1.Schema = str_tFileInputXML_1;
	}
    Object obj5_tFileInputXML_1 = xpaths_tFileInputXML_1.get(5).evaluate(temp_tFileInputXML_1);
    if(obj5_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj5_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj5_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj5_tFileInputXML_1 instanceof String || obj5_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj5_tFileInputXML_1);
    } else if(obj5_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj5_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.User =null;
									}else{
		row1.User = str_tFileInputXML_1;
	}
    Object obj6_tFileInputXML_1 = xpaths_tFileInputXML_1.get(6).evaluate(temp_tFileInputXML_1);
    if(obj6_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj6_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj6_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj6_tFileInputXML_1 instanceof String || obj6_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj6_tFileInputXML_1);
    } else if(obj6_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj6_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Password =null;
									}else{
		row1.Password = str_tFileInputXML_1;
	}
    Object obj7_tFileInputXML_1 = xpaths_tFileInputXML_1.get(7).evaluate(temp_tFileInputXML_1);
    if(obj7_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj7_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj7_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj7_tFileInputXML_1 instanceof String || obj7_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj7_tFileInputXML_1);
    } else if(obj7_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj7_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.PathStorage =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.PathStorage ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.PathStorage =null;
									}else{
		row1.PathStorage = str_tFileInputXML_1;
	}
    Object obj8_tFileInputXML_1 = xpaths_tFileInputXML_1.get(8).evaluate(temp_tFileInputXML_1);
    if(obj8_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj8_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj8_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj8_tFileInputXML_1 instanceof String || obj8_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj8_tFileInputXML_1);
    } else if(obj8_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj8_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPHost =null;
									}else{
		row1.SMTPHost = str_tFileInputXML_1;
	}
    Object obj9_tFileInputXML_1 = xpaths_tFileInputXML_1.get(9).evaluate(temp_tFileInputXML_1);
    if(obj9_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj9_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj9_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj9_tFileInputXML_1 instanceof String || obj9_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj9_tFileInputXML_1);
    } else if(obj9_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj9_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPPort =null;
									}else{
		row1.SMTPPort = str_tFileInputXML_1;
	}
    Object obj10_tFileInputXML_1 = xpaths_tFileInputXML_1.get(10).evaluate(temp_tFileInputXML_1);
    if(obj10_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj10_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj10_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj10_tFileInputXML_1 instanceof String || obj10_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj10_tFileInputXML_1);
    } else if(obj10_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj10_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.UsernameMail =null;
									}else{
		row1.UsernameMail = str_tFileInputXML_1;
	}
    Object obj11_tFileInputXML_1 = xpaths_tFileInputXML_1.get(11).evaluate(temp_tFileInputXML_1);
    if(obj11_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj11_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj11_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj11_tFileInputXML_1 instanceof String || obj11_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj11_tFileInputXML_1);
    } else if(obj11_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj11_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.PasswordMail =null;
									}else{
		row1.PasswordMail = str_tFileInputXML_1;
	}
    Object obj12_tFileInputXML_1 = xpaths_tFileInputXML_1.get(12).evaluate(temp_tFileInputXML_1);
    if(obj12_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj12_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj12_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj12_tFileInputXML_1 instanceof String || obj12_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj12_tFileInputXML_1);
    } else if(obj12_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj12_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.MailTo =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.MailTo ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.MailTo =null;
									}else{
		row1.MailTo = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row1 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

    context.db_origen_Server = row1.Host;
context.db_origen_Port = row1.Port;
context.db_origen_ServiceName = row1.ServiceName;
context.db_origen_Login = row1.User;
context.db_origen_Password = row1.Password;
context.db_origen_Schema = row1.Schema;

globalMap.put("archivo_salida",new java.io.ByteArrayOutputStream());


    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


}
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.db_origen_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.db_origen_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.db_origen_Server);
        globalMap.put("port_" + "tOracleConnection_1",context.db_origen_Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.db_origen_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.db_origen_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.db_origen_Login);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());




/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleConnection_1:OnSubjobOk1", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tOracleRow_1Process(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleConnection_1:OnSubjobOk2", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tOracleRow_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row44Struct implements routines.system.IPersistableRow<row44Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String Result;

				public String getResult () {
					return this.Result;
				}

				public Boolean ResultIsNullable(){
				    return true;
				}
				public Boolean ResultIsKey(){
				    return false;
				}
				public Integer ResultLength(){
				    return null;
				}
				public Integer ResultPrecision(){
				    return null;
				}
				public String ResultDefault(){
				
					return null;
				
				}
				public String ResultComment(){
				
				    return "";
				
				}
				public String ResultPattern(){
				
					return "";
				
				}
				public String ResultOriginalDbColumnName(){
				
					return "Result";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.Result = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.Result = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Result,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Result,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Result="+Result);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row44Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row44Struct row44 = new row44Struct();




	
	/**
	 * [tBufferOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_1", false);
		start_Hash.put("tBufferOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row44");
					}
				
		int tos_count_tBufferOutput_1 = 0;
		

 



/**
 * [tBufferOutput_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";
	
	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row44.Result = "2";
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tBufferOutput_1 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row44"
						
						);
					}
					



String[] row_tBufferOutput_1=new String[]{"",};		
	    if(row44.Result != null){
	        
	            row_tBufferOutput_1[0] = row44.Result;
	                        			    
	    }else{
	    	row_tBufferOutput_1[0] = null;
	    }
	globalBuffer.add(row_tBufferOutput_1);	
	
 


	tos_count_tBufferOutput_1++;

/**
 * [tBufferOutput_1 main ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

 



/**
 * [tBufferOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

 



/**
 * [tBufferOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tBufferOutput_1 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row44");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_1", true);
end_Hash.put("tBufferOutput_1", System.currentTimeMillis());




/**
 * [tBufferOutput_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tBufferOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

 



/**
 * [tBufferOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_1", false);
		start_Hash.put("tOracleRow_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_1";
	
	
		int tos_count_tOracleRow_1 = 0;
		

	java.sql.Connection conn_tOracleRow_1 = null;
	String query_tOracleRow_1 = "";
	boolean whetherReject_tOracleRow_1 = false;
	int count_tOracleRow_1 = 0;
				conn_tOracleRow_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
			
        resourceMap.put("conn_tOracleRow_1", conn_tOracleRow_1);
        java.sql.Statement stmt_tOracleRow_1 = conn_tOracleRow_1.createStatement();
        resourceMap.put("stmt_tOracleRow_1", stmt_tOracleRow_1);

 



/**
 * [tOracleRow_1 begin ] stop
 */
	
	/**
	 * [tOracleRow_1 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

query_tOracleRow_1 = "TRUNCATE TABLE MED_GENERICOS_TEMP";
whetherReject_tOracleRow_1 = false;
globalMap.put("tOracleRow_1_QUERY",query_tOracleRow_1);
try {
		stmt_tOracleRow_1.execute(query_tOracleRow_1);
		
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_1_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	

 


	tos_count_tOracleRow_1++;

/**
 * [tOracleRow_1 main ] stop
 */
	
	/**
	 * [tOracleRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

 



/**
 * [tOracleRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

 



/**
 * [tOracleRow_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleRow_1 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

	globalMap.put("tOracleRow_1_NB_LINE", count_tOracleRow_1);
        stmt_tOracleRow_1.close();
        resourceMap.remove("stmt_tOracleRow_1");
    resourceMap.put("statementClosed_tOracleRow_1", true);
    resourceMap.put("finish_tOracleRow_1", true);

 

ok_Hash.put("tOracleRow_1", true);
end_Hash.put("tOracleRow_1", System.currentTimeMillis());




/**
 * [tOracleRow_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleRow_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

    if (resourceMap.get("statementClosed_tOracleRow_1") == null) {
            java.sql.Statement stmtToClose_tOracleRow_1 = null;
            if ((stmtToClose_tOracleRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_1")) != null) {
                stmtToClose_tOracleRow_1.close();
            }
    }
 



/**
 * [tOracleRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleRow_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleRow_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_2", false);
		start_Hash.put("tOracleRow_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_2";
	
	
		int tos_count_tOracleRow_2 = 0;
		

	java.sql.Connection conn_tOracleRow_2 = null;
	String query_tOracleRow_2 = "";
	boolean whetherReject_tOracleRow_2 = false;
	int count_tOracleRow_2 = 0;
				conn_tOracleRow_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
			
        resourceMap.put("conn_tOracleRow_2", conn_tOracleRow_2);
        java.sql.Statement stmt_tOracleRow_2 = conn_tOracleRow_2.createStatement();
        resourceMap.put("stmt_tOracleRow_2", stmt_tOracleRow_2);

 



/**
 * [tOracleRow_2 begin ] stop
 */
	
	/**
	 * [tOracleRow_2 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

query_tOracleRow_2 = "TRUNCATE TABLE MED_GENERICOS_TEMP_LOG";
whetherReject_tOracleRow_2 = false;
globalMap.put("tOracleRow_2_QUERY",query_tOracleRow_2);
try {
		stmt_tOracleRow_2.execute(query_tOracleRow_2);
		
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_2_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_2 = true;
		
				System.err.print(e.getMessage());
				
	}
	

 


	tos_count_tOracleRow_2++;

/**
 * [tOracleRow_2 main ] stop
 */
	
	/**
	 * [tOracleRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

 



/**
 * [tOracleRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

 



/**
 * [tOracleRow_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleRow_2 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

	globalMap.put("tOracleRow_2_NB_LINE", count_tOracleRow_2);
        stmt_tOracleRow_2.close();
        resourceMap.remove("stmt_tOracleRow_2");
    resourceMap.put("statementClosed_tOracleRow_2", true);
    resourceMap.put("finish_tOracleRow_2", true);

 

ok_Hash.put("tOracleRow_2", true);
end_Hash.put("tOracleRow_2", System.currentTimeMillis());




/**
 * [tOracleRow_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleRow_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

    if (resourceMap.get("statementClosed_tOracleRow_2") == null) {
            java.sql.Statement stmtToClose_tOracleRow_2 = null;
            if ((stmtToClose_tOracleRow_2 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_2")) != null) {
                stmtToClose_tOracleRow_2.close();
            }
    }
 



/**
 * [tOracleRow_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleRow_2_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tOracleInput_11Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row41Struct implements routines.system.IPersistableRow<row41Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String IDENTIFICADOR_UNICO;

				public String getIDENTIFICADOR_UNICO () {
					return this.IDENTIFICADOR_UNICO;
				}

				public Boolean IDENTIFICADOR_UNICOIsNullable(){
				    return true;
				}
				public Boolean IDENTIFICADOR_UNICOIsKey(){
				    return false;
				}
				public Integer IDENTIFICADOR_UNICOLength(){
				    return null;
				}
				public Integer IDENTIFICADOR_UNICOPrecision(){
				    return null;
				}
				public String IDENTIFICADOR_UNICODefault(){
				
					return null;
				
				}
				public String IDENTIFICADOR_UNICOComment(){
				
				    return "";
				
				}
				public String IDENTIFICADOR_UNICOPattern(){
				
					return "";
				
				}
				public String IDENTIFICADOR_UNICOOriginalDbColumnName(){
				
					return "IDENTIFICADOR_UNICO";
				
				}

				
			    public String OBSERVACION;

				public String getOBSERVACION () {
					return this.OBSERVACION;
				}

				public Boolean OBSERVACIONIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONIsKey(){
				    return false;
				}
				public Integer OBSERVACIONLength(){
				    return null;
				}
				public Integer OBSERVACIONPrecision(){
				    return null;
				}
				public String OBSERVACIONDefault(){
				
					return null;
				
				}
				public String OBSERVACIONComment(){
				
				    return "";
				
				}
				public String OBSERVACIONPattern(){
				
					return "";
				
				}
				public String OBSERVACIONOriginalDbColumnName(){
				
					return "OBSERVACION";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.IDENTIFICADOR_UNICO = readString(dis);
					
					this.OBSERVACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.IDENTIFICADOR_UNICO = readString(dis);
					
					this.OBSERVACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.IDENTIFICADOR_UNICO,dos);
					
					// String
				
						writeString(this.OBSERVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.IDENTIFICADOR_UNICO,dos);
					
					// String
				
						writeString(this.OBSERVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IDENTIFICADOR_UNICO="+IDENTIFICADOR_UNICO);
		sb.append(",OBSERVACION="+OBSERVACION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row41Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row41Struct row41 = new row41Struct();




	
	/**
	 * [tFileOutputExcel_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_3", false);
		start_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row41");
					}
				
		int tos_count_tFileOutputExcel_3 = 0;
		


		
		int columnIndex_tFileOutputExcel_3 = 0;
		boolean headerIsInserted_tFileOutputExcel_3 = false;
		
		
		int nb_line_tFileOutputExcel_3 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_3 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_3.setUseSharedStringTable(false);
		
    xlsxTool_tFileOutputExcel_3.setTruncateExceedingCharacters(false);
		xlsxTool_tFileOutputExcel_3.setSheet("Medicamentos Genericos");
		xlsxTool_tFileOutputExcel_3.setAppend(false,false, false);
		xlsxTool_tFileOutputExcel_3.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_3.setXY(false,0,0,false);
		
		xlsxTool_tFileOutputExcel_3.prepareStream();
		
		xlsxTool_tFileOutputExcel_3.setFont("");
		
		if (xlsxTool_tFileOutputExcel_3.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_3.addRow();
		
		xlsxTool_tFileOutputExcel_3.addCellValue("IDENTIFICADOR_UNICO");
		
		xlsxTool_tFileOutputExcel_3.addCellValue("OBSERVACION");
		
		nb_line_tFileOutputExcel_3++;
		headerIsInserted_tFileOutputExcel_3 = true;
		
	}
		

 



/**
 * [tFileOutputExcel_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_11", false);
		start_Hash.put("tOracleInput_11", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_11";
	
	
		int tos_count_tOracleInput_11 = 0;
		
	


	
		    int nb_line_tOracleInput_11 = 0;
		    java.sql.Connection conn_tOracleInput_11 = null;
				conn_tOracleInput_11 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_11 = false;
				boolean isConnectionWrapped_tOracleInput_11 = !(conn_tOracleInput_11 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_11.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_11 = null;
                if (isConnectionWrapped_tOracleInput_11) {
					unwrappedOraConn_tOracleInput_11 = conn_tOracleInput_11.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_11 != null) {
                        isTimeZoneNull_tOracleInput_11 = (unwrappedOraConn_tOracleInput_11.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_11 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_11).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_11) {
					java.sql.Statement stmtGetTZ_tOracleInput_11 = conn_tOracleInput_11.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_11 = stmtGetTZ_tOracleInput_11.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_11 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_11.next()) {
						sessionTimezone_tOracleInput_11 = rsGetTZ_tOracleInput_11.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_11 && unwrappedOraConn_tOracleInput_11 != null) {
                        unwrappedOraConn_tOracleInput_11.setSessionTimeZone(sessionTimezone_tOracleInput_11);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_11).setSessionTimeZone(sessionTimezone_tOracleInput_11);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_11 = conn_tOracleInput_11.createStatement();

		    String dbquery_tOracleInput_11 = "SELECT MLG.IDENTIFICADOR_UNICO, \nLISTAGG (MLG.OBSERVACION, '') WITHIN GROUP (ORDER BY MLG.OBSERVACION) AS OBSERVACIONE"
+"S\nFROM  \n(SELECT DISTINCT IDENTIFICADOR_UNICO, OBSERVACION\n FROM MED_GENERICOS_TEMP_LOG)MLG\nGROUP BY MLG.IDENTIFICAD"
+"OR_UNICO";
		    

		    globalMap.put("tOracleInput_11_QUERY",dbquery_tOracleInput_11);

		    java.sql.ResultSet rs_tOracleInput_11 = null;

		    try {
		    	rs_tOracleInput_11 = stmt_tOracleInput_11.executeQuery(dbquery_tOracleInput_11);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_11 = rs_tOracleInput_11.getMetaData();
		    	int colQtyInRs_tOracleInput_11 = rsmd_tOracleInput_11.getColumnCount();

		    String tmpContent_tOracleInput_11 = null;
		    
		    
		    while (rs_tOracleInput_11.next()) {
		        nb_line_tOracleInput_11++;
		        
							if(colQtyInRs_tOracleInput_11 < 1) {
								row41.IDENTIFICADOR_UNICO = null;
							} else {
	                         		
        	row41.IDENTIFICADOR_UNICO = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 2) {
								row41.OBSERVACION = null;
							} else {
	                         		
        	row41.OBSERVACION = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 2, false);
		                    }
					




 



/**
 * [tOracleInput_11 begin ] stop
 */
	
	/**
	 * [tOracleInput_11 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 


	tos_count_tOracleInput_11++;

/**
 * [tOracleInput_11 main ] stop
 */
	
	/**
	 * [tOracleInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row41"
						
						);
					}
					

				xlsxTool_tFileOutputExcel_3.addRow();
									   				
	    				if(row41.IDENTIFICADOR_UNICO != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row41.IDENTIFICADOR_UNICO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row41.OBSERVACION != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row41.OBSERVACION));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_3++;
				
 


	tos_count_tFileOutputExcel_3++;

/**
 * [tFileOutputExcel_3 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";
	
	

 



/**
 * [tFileOutputExcel_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";
	
	

 



/**
 * [tFileOutputExcel_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_11 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

}
}finally{
	if (rs_tOracleInput_11 != null) {
		rs_tOracleInput_11.close();
	}
	if (stmt_tOracleInput_11 != null) {
		stmt_tOracleInput_11.close();
	}
}

globalMap.put("tOracleInput_11_NB_LINE",nb_line_tOracleInput_11);
 

ok_Hash.put("tOracleInput_11", true);
end_Hash.put("tOracleInput_11", System.currentTimeMillis());




/**
 * [tOracleInput_11 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";
	
	

							columnIndex_tFileOutputExcel_3 = 0;
						
					xlsxTool_tFileOutputExcel_3.setColAutoSize(columnIndex_tFileOutputExcel_3);
	
							columnIndex_tFileOutputExcel_3 = 1;
						
					xlsxTool_tFileOutputExcel_3.setColAutoSize(columnIndex_tFileOutputExcel_3);
	
	
	
	
			xlsxTool_tFileOutputExcel_3.writeExcel((java.io.OutputStream)globalMap.get("archivo_salida"));
	
		if(headerIsInserted_tFileOutputExcel_3 && nb_line_tFileOutputExcel_3 > 0){
			nb_line_tFileOutputExcel_3 = nb_line_tFileOutputExcel_3 -1;
		}
		globalMap.put("tFileOutputExcel_3_NB_LINE",nb_line_tFileOutputExcel_3);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row41");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_3", true);
end_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tFileOutputExcel_3 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_11:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tJava_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_11 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";
	
	

 



/**
 * [tFileOutputExcel_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class logCargaStruct implements routines.system.IPersistableRow<logCargaStruct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal Id_;

				public BigDecimal getId_ () {
					return this.Id_;
				}

				public Boolean Id_IsNullable(){
				    return false;
				}
				public Boolean Id_IsKey(){
				    return true;
				}
				public Integer Id_Length(){
				    return 0;
				}
				public Integer Id_Precision(){
				    return null;
				}
				public String Id_Default(){
				
					return "SALUDSIS\".\"ISEQ$$_108067\".nextval";
				
				}
				public String Id_Comment(){
				
				    return "PK - Llave primaria";
				
				}
				public String Id_Pattern(){
				
					return "";
				
				}
				public String Id_OriginalDbColumnName(){
				
					return "Id_";
				
				}

				
			    public Object Log_;

				public Object getLog_ () {
					return this.Log_;
				}

				public Boolean Log_IsNullable(){
				    return true;
				}
				public Boolean Log_IsKey(){
				    return false;
				}
				public Integer Log_Length(){
				    return 4000;
				}
				public Integer Log_Precision(){
				    return 0;
				}
				public String Log_Default(){
				
					return null;
				
				}
				public String Log_Comment(){
				
				    return "Descripcion del log de errores";
				
				}
				public String Log_Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String Log_OriginalDbColumnName(){
				
					return "Log_";
				
				}

				
			    public String Extension_;

				public String getExtension_ () {
					return this.Extension_;
				}

				public Boolean Extension_IsNullable(){
				    return true;
				}
				public Boolean Extension_IsKey(){
				    return false;
				}
				public Integer Extension_Length(){
				    return null;
				}
				public Integer Extension_Precision(){
				    return null;
				}
				public String Extension_Default(){
				
					return null;
				
				}
				public String Extension_Comment(){
				
				    return "";
				
				}
				public String Extension_Pattern(){
				
					return "";
				
				}
				public String Extension_OriginalDbColumnName(){
				
					return "Extension_";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Id_ == null) ? 0 : this.Id_.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final logCargaStruct other = (logCargaStruct) obj;
		
						if (this.Id_ == null) {
							if (other.Id_ != null)
								return false;
						
						} else if (!this.Id_.equals(other.Id_))
						
							return false;
					

		return true;
    }

	public void copyDataTo(logCargaStruct other) {

		other.Id_ = this.Id_;
	            other.Log_ = this.Log_;
	            other.Extension_ = this.Extension_;
	            
	}

	public void copyKeysDataTo(logCargaStruct other) {

		other.Id_ = this.Id_;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
						this.Id_ = (BigDecimal) dis.readObject();
					
						this.Log_ = (Object) dis.readObject();
					
					this.Extension_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
						this.Id_ = (BigDecimal) dis.readObject();
					
						this.Log_ = (Object) dis.readObject();
					
					this.Extension_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.Id_);
					
					// Object
				
       			    	dos.writeObject(this.Log_);
					
					// String
				
						writeString(this.Extension_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.Id_);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.Log_);
					
					// String
				
						writeString(this.Extension_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id_="+String.valueOf(Id_));
		sb.append(",Log_="+String.valueOf(Log_));
		sb.append(",Extension_="+Extension_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(logCargaStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Id_, other.Id_);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row43Struct implements routines.system.IPersistableRow<row43Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String NO_DATA;

				public String getNO_DATA () {
					return this.NO_DATA;
				}

				public Boolean NO_DATAIsNullable(){
				    return false;
				}
				public Boolean NO_DATAIsKey(){
				    return false;
				}
				public Integer NO_DATALength(){
				    return null;
				}
				public Integer NO_DATAPrecision(){
				    return null;
				}
				public String NO_DATADefault(){
				
					return null;
				
				}
				public String NO_DATAComment(){
				
				    return "";
				
				}
				public String NO_DATAPattern(){
				
					return "";
				
				}
				public String NO_DATAOriginalDbColumnName(){
				
					return "NO_DATA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.NO_DATA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.NO_DATA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NO_DATA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NO_DATA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NO_DATA="+NO_DATA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row43Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row43Struct row43 = new row43Struct();
logCargaStruct logCarga = new logCargaStruct();





	
	/**
	 * [tOracleSP_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_4", false);
		start_Hash.put("tOracleSP_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"logCarga");
					}
				
		int tos_count_tOracleSP_4 = 0;
		

	java.sql.Connection connection_tOracleSP_4 = null;
	connection_tOracleSP_4 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_1");
	

java.sql.CallableStatement statement_tOracleSP_4 = connection_tOracleSP_4.prepareCall("{call " + "MED.UpdLogCargaMasiva" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_4;
String tmpString_tOracleSP_4;

 



/**
 * [tOracleSP_4 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row43");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
logCargaStruct logCarga_tmp = new logCargaStruct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


context.Salida = globalMap.get("archivo_salida");
//System.out.println(context.Salida);
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row43"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_8 = false;
		boolean mainRowRejected_tMap_8 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

logCarga = null;


// # Output table : 'logCarga'
logCarga_tmp.Id_ = context.carga_id ;
logCarga_tmp.Log_ = ((ByteArrayOutputStream)context.Salida).toByteArray(); ;
logCarga_tmp.Extension_ = "xlsx";
logCarga = logCarga_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "logCarga"
if(logCarga != null) { 



	
	/**
	 * [tOracleSP_4 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"logCarga"
						
						);
					}
					

			// code for the argument 1 (Id_) of type 'IN AUTOMAPPING'
                        statement_tOracleSP_4.setBigDecimal(1, logCarga.Id_);
			// code for the argument 2 (Log_) of type 'IN AUTOMAPPING'
    					if (logCarga.Log_ == null) {
    						statement_tOracleSP_4.setNull(2, java.sql.Types.OTHER);
    					} else {
    					
                        statement_tOracleSP_4.setObject(2, logCarga.Log_);
    					}
    					
			// code for the argument 3 (Extension_) of type 'IN AUTOMAPPING'
    					if (logCarga.Extension_ == null) {
    						statement_tOracleSP_4.setNull(3, java.sql.Types.VARCHAR);
    					} else {
    					
                        statement_tOracleSP_4.setString(3, logCarga.Extension_);
    					}
    					
		statement_tOracleSP_4.execute();
		

 


	tos_count_tOracleSP_4++;

/**
 * [tOracleSP_4 main ] stop
 */
	
	/**
	 * [tOracleSP_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_4";
	
	

 



/**
 * [tOracleSP_4 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_4";
	
	

 



/**
 * [tOracleSP_4 process_data_end ] stop
 */

} // End of branch "logCarga"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row43");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tOracleSP_4 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_4";
	
	


	statement_tOracleSP_4.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"logCarga");
			  	}
			  	
 

ok_Hash.put("tOracleSP_4", true);
end_Hash.put("tOracleSP_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tOracleClose_1Process(globalMap);



/**
 * [tOracleSP_4 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tFixedFlowInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tOracleSP_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_4";
	
	

 



/**
 * [tOracleSP_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());




/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	


public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String Result;

				public String getResult () {
					return this.Result;
				}

				public Boolean ResultIsNullable(){
				    return true;
				}
				public Boolean ResultIsKey(){
				    return false;
				}
				public Integer ResultLength(){
				    return null;
				}
				public Integer ResultPrecision(){
				    return null;
				}
				public String ResultDefault(){
				
					return null;
				
				}
				public String ResultComment(){
				
				    return "";
				
				}
				public String ResultPattern(){
				
					return "";
				
				}
				public String ResultOriginalDbColumnName(){
				
					return "Result";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.Result = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.Result = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Result,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Result,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Result="+Result);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row36Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row36Struct row36 = new row36Struct();




	
	/**
	 * [tBufferOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_2", false);
		start_Hash.put("tBufferOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row36");
					}
				
		int tos_count_tBufferOutput_2 = 0;
		

 



/**
 * [tBufferOutput_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_2", false);
		start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_2";
	
	
		int tos_count_tFixedFlowInput_2 = 0;
		

	    for (int i_tFixedFlowInput_2 = 0 ; i_tFixedFlowInput_2 < 1 ; i_tFixedFlowInput_2++) {
	                	            	
    	            		row36.Result = context.result;
    	            	

 



/**
 * [tFixedFlowInput_2 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 


	tos_count_tFixedFlowInput_2++;

/**
 * [tFixedFlowInput_2 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tBufferOutput_2 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row36"
						
						);
					}
					



String[] row_tBufferOutput_2=new String[]{"",};		
	    if(row36.Result != null){
	        
	            row_tBufferOutput_2[0] = row36.Result;
	                        			    
	    }else{
	    	row_tBufferOutput_2[0] = null;
	    }
	globalBuffer.add(row_tBufferOutput_2);	
	
 


	tos_count_tBufferOutput_2++;

/**
 * [tBufferOutput_2 main ] stop
 */
	
	/**
	 * [tBufferOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

 



/**
 * [tBufferOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tBufferOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

 



/**
 * [tBufferOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

        }
        globalMap.put("tFixedFlowInput_2_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_2", true);
end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());




/**
 * [tFixedFlowInput_2 end ] stop
 */

	
	/**
	 * [tBufferOutput_2 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row36");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_2", true);
end_Hash.put("tBufferOutput_2", System.currentTimeMillis());




/**
 * [tBufferOutput_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_2 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 finally ] stop
 */

	
	/**
	 * [tBufferOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

 



/**
 * [tBufferOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


context.HORA_FINAL = TalendDate.getDate("HH:mm:ss");

 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tFixedFlowInput_3Process(globalMap);



/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public String FECHA_EJECUCION;

				public String getFECHA_EJECUCION () {
					return this.FECHA_EJECUCION;
				}

				public Boolean FECHA_EJECUCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_EJECUCIONIsKey(){
				    return false;
				}
				public Integer FECHA_EJECUCIONLength(){
				    return null;
				}
				public Integer FECHA_EJECUCIONPrecision(){
				    return null;
				}
				public String FECHA_EJECUCIONDefault(){
				
					return null;
				
				}
				public String FECHA_EJECUCIONComment(){
				
				    return "";
				
				}
				public String FECHA_EJECUCIONPattern(){
				
					return "";
				
				}
				public String FECHA_EJECUCIONOriginalDbColumnName(){
				
					return "FECHA_EJECUCION";
				
				}

				
			    public String HORA_INICIO;

				public String getHORA_INICIO () {
					return this.HORA_INICIO;
				}

				public Boolean HORA_INICIOIsNullable(){
				    return true;
				}
				public Boolean HORA_INICIOIsKey(){
				    return false;
				}
				public Integer HORA_INICIOLength(){
				    return null;
				}
				public Integer HORA_INICIOPrecision(){
				    return null;
				}
				public String HORA_INICIODefault(){
				
					return null;
				
				}
				public String HORA_INICIOComment(){
				
				    return "";
				
				}
				public String HORA_INICIOPattern(){
				
					return "";
				
				}
				public String HORA_INICIOOriginalDbColumnName(){
				
					return "HORA_INICIO";
				
				}

				
			    public String HORA_FINAL;

				public String getHORA_FINAL () {
					return this.HORA_FINAL;
				}

				public Boolean HORA_FINALIsNullable(){
				    return true;
				}
				public Boolean HORA_FINALIsKey(){
				    return false;
				}
				public Integer HORA_FINALLength(){
				    return null;
				}
				public Integer HORA_FINALPrecision(){
				    return null;
				}
				public String HORA_FINALDefault(){
				
					return null;
				
				}
				public String HORA_FINALComment(){
				
				    return "";
				
				}
				public String HORA_FINALPattern(){
				
					return "";
				
				}
				public String HORA_FINALOriginalDbColumnName(){
				
					return "HORA_FINAL";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String JOBS;

				public String getJOBS () {
					return this.JOBS;
				}

				public Boolean JOBSIsNullable(){
				    return true;
				}
				public Boolean JOBSIsKey(){
				    return false;
				}
				public Integer JOBSLength(){
				    return null;
				}
				public Integer JOBSPrecision(){
				    return null;
				}
				public String JOBSDefault(){
				
					return null;
				
				}
				public String JOBSComment(){
				
				    return "";
				
				}
				public String JOBSPattern(){
				
					return "";
				
				}
				public String JOBSOriginalDbColumnName(){
				
					return "JOBS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FECHA_EJECUCION="+FECHA_EJECUCION);
		sb.append(",HORA_INICIO="+HORA_INICIO);
		sb.append(",HORA_FINAL="+HORA_FINAL);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",JOBS="+JOBS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row32Struct row32 = new row32Struct();




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.LOGS_EXECUTION)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("FECHA_EJECUCION");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("HORA_INICIO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("HORA_FINAL");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ESTADO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("JOBS");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_3", false);
		start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_3";
	
	
		int tos_count_tFixedFlowInput_3 = 0;
		

	    for (int i_tFixedFlowInput_3 = 0 ; i_tFixedFlowInput_3 < 1 ; i_tFixedFlowInput_3++) {
	                	            	
    	            		row32.FECHA_EJECUCION = context.FECHA_EJECUCION;
    	            	        	            	
    	            		row32.HORA_INICIO = context.HORA_INICIO;
    	            	        	            	
    	            		row32.HORA_FINAL = context.HORA_FINAL;
    	            	        	            	
    	            		row32.ESTADO = context.ESTADO_EXEC;
    	            	        	            	
    	            		row32.JOBS = "CargaGenericos";
    	            	

 



/**
 * [tFixedFlowInput_3 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 


	tos_count_tFixedFlowInput_3++;

/**
 * [tFixedFlowInput_3 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row32"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row32.FECHA_EJECUCION != null) {
                        sb_tFileOutputDelimited_1.append(
                            row32.FECHA_EJECUCION
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row32.HORA_INICIO != null) {
                        sb_tFileOutputDelimited_1.append(
                            row32.HORA_INICIO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row32.HORA_FINAL != null) {
                        sb_tFileOutputDelimited_1.append(
                            row32.HORA_FINAL
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row32.ESTADO != null) {
                        sb_tFileOutputDelimited_1.append(
                            row32.ESTADO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row32.JOBS != null) {
                        sb_tFileOutputDelimited_1.append(
                            row32.JOBS
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

        }
        globalMap.put("tFixedFlowInput_3_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_3", true);
end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());




/**
 * [tFixedFlowInput_3 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_3 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class mailStruct implements routines.system.IPersistableRow<mailStruct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(mailStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class salidaStruct implements routines.system.IPersistableRow<salidaStruct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(salidaStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row45Struct implements routines.system.IPersistableRow<row45Struct> {
    final static byte[] commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];
    static byte[] commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length) {
				if(length < 1024 && commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos.length == 0) {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[1024];
				} else {
   					commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length);
			strReturn = new String(commonByteArray_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_MED_CARGAR_MEDICAMENTOS_GENERICOS_CargaMedicamentosGenericos) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row45Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row45Struct row45 = new row45Struct();
salidaStruct salida = new salidaStruct();
salidaStruct mail = salida;
row20Struct row20 = new row20Struct();







	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tJava_4 = 0;
		


context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.ESTADO_EXEC = "Interrumpido";


 



/**
 * [tJava_4 begin ] stop
 */



	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"mail");
					}
				
		int tos_count_tRunJob_1 = 0;
		
class DealChildJobLibrary_tRunJob_1 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new java.io.ObjectInputStream(new java.io.FileInputStream(crcMapPath)) {
				@Override
				public Class<?> resolveClass(java.io.ObjectStreamClass desc) throws java.io.IOException, ClassNotFoundException {
					if(!"java.util.HashMap".equals(desc.getName())) {
						throw new java.io.InvalidClassException("Unauthorized deserialization attempt : " + desc.getName());
					}
					return super.resolveClass(desc);
				}
			};
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

	class JVMArgumentHelper_tRunJob_1 {
		
		
		
		private void addClasspath(java.util.List<String> target_argument_list, String job_origin_classpath) {
			
			String extra_classpath = null;
			String path_separator = System.getProperty("path.separator");
			if (path_separator != null && path_separator.length() > 1) {
				throw new RuntimeException("path separator should be single character");
			}
			
			if(extra_classpath!=null && !extra_classpath.isEmpty()) {
				if(extra_classpath.endsWith(path_separator)) {
					target_argument_list.add(extra_classpath+job_origin_classpath);
				} else if(extra_classpath.contains(path_separator)) {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				} else if(extra_classpath.endsWith(":")) {
					target_argument_list.add(extra_classpath.replace(":", path_separator)+job_origin_classpath);
				} else if(extra_classpath.endsWith(";")) {
					target_argument_list.add(extra_classpath.replace(";", path_separator)+job_origin_classpath);
				} else if(extra_classpath.contains(":")) {
					target_argument_list.add(concatStr(extra_classpath.replace(":", path_separator), path_separator, job_origin_classpath));
				} else if(extra_classpath.contains(";")) {
					target_argument_list.add(concatStr(extra_classpath.replace(";", path_separator), path_separator, job_origin_classpath));
				} else {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				}
				return;
			}
			
			target_argument_list.add(job_origin_classpath);
		}
		
		private String concatStr(String s1, String s2, String s3) {
			java.lang.StringBuilder strB = new java.lang.StringBuilder();
			strB.append(s1).append(s2).append(s3);
			return strB.toString();
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			addArgumentsTo(target_argument_list, argument_from_child, false);
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child, boolean isCP) {
			if(isCP) {
				addClasspath(target_argument_list, argument_from_child);
				return;
			}
		
			
			
			
			target_argument_list.add(argument_from_child);
			
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_1 jvm_argument_helper_tRunJob_1 = new JVMArgumentHelper_tRunJob_1();
	
	String audit_jar_path_tRunJob_1 = System.getProperty("classpath.extended");
	

 



/**
 * [tRunJob_1 begin ] stop
 */



	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"salida");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.LOGS_ERROR)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("moment");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("pid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("root_pid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("father_pid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("project");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("job");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("context");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("priority");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("type");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("origin");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("message");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("code");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row45");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
	String var1;
	String var2;
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
salidaStruct salida_tmp = new salidaStruct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row45.type = lcm.getType();
		row45.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row45.priority = lcm.getPriority();
		row45.message = lcm.getMessage();
		row45.code = lcm.getCode();
		
		row45.moment = java.util.Calendar.getInstance().getTime();
	
    	row45.pid = pid;
		row45.root_pid = rootPid;
		row45.father_pid = fatherPid;
	
    	row45.project = projectName;
    	row45.job = jobName;
    	row45.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row45"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_9 = false;
		boolean mainRowRejected_tMap_9 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;
Var.var1 = context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY"); ;
Var.var2 = context.ESTADO_EXEC = "Interrumpido";;// ###############################
        // ###############################
        // # Output tables

salida = null;


// # Output table : 'salida'
salida_tmp.moment = row45.moment;
salida_tmp.pid = row45.pid;
salida_tmp.root_pid = row45.root_pid;
salida_tmp.father_pid = row45.father_pid;
salida_tmp.project = row45.project;
salida_tmp.job = row45.job;
salida_tmp.context = row45.context;
salida_tmp.priority = row45.priority;
salida_tmp.type = row45.type;
salida_tmp.origin = row45.origin;
salida_tmp.message = row45.message;
salida_tmp.code = row45.code;
salida = salida_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "salida"
if(salida != null) { 



	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"salida"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(salida.moment != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(salida.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(salida.pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            salida.pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(salida.root_pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            salida.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(salida.father_pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            salida.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(salida.project != null) {
                        sb_tFileOutputDelimited_2.append(
                            salida.project
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(salida.job != null) {
                        sb_tFileOutputDelimited_2.append(
                            salida.job
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(salida.context != null) {
                        sb_tFileOutputDelimited_2.append(
                            salida.context
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(salida.priority != null) {
                        sb_tFileOutputDelimited_2.append(
                            salida.priority
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(salida.type != null) {
                        sb_tFileOutputDelimited_2.append(
                            salida.type
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(salida.origin != null) {
                        sb_tFileOutputDelimited_2.append(
                            salida.origin
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(salida.message != null) {
                        sb_tFileOutputDelimited_2.append(
                            salida.message
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(salida.code != null) {
                        sb_tFileOutputDelimited_2.append(
                            salida.code
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 
     mail = salida;


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */

	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"mail"
						
						);
					}
					
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
			
			String osName_tRunJob_1 = System.getProperty("os.name");
			if (osName_tRunJob_1 != null && osName_tRunJob_1.toLowerCase(java.util.Locale.US).startsWith("win")){
				
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
              					String classpath_tRunJob_1_5 = ".;../lib/routines.jar;../lib/log4j-slf4j-impl-2.17.1.jar;../lib/log4j-api-2.17.1.jar;../lib/log4j-core-2.17.1.jar;../lib/activation-1.1.jar;../lib/jakarta.mail-1.6.7.jar;../lib/xpathutil-1.0.0.jar;../lib/slf4j-api-1.7.34.jar;../lib/crypto-utils-7.1.16.jar;../lib/jboss-marshalling-2.0.12.Final.jar;../lib/dom4j-2.1.3.jar;../lib/jaxen-1.1.6.jar;mail_1_3.jar;";
              					
              					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
	        					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5), true);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "med_cargar_medicamentos_genericos.mail_1_3.Mail");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
		      					String classpath_tRunJob_1_5 = ".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/log4j-slf4j-impl-2.17.1.jar:$ROOT_PATH/../lib/log4j-api-2.17.1.jar:$ROOT_PATH/../lib/log4j-core-2.17.1.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/jakarta.mail-1.6.7.jar:$ROOT_PATH/../lib/xpathutil-1.0.0.jar:$ROOT_PATH/../lib/slf4j-api-1.7.34.jar:$ROOT_PATH/../lib/crypto-utils-7.1.16.jar:$ROOT_PATH/../lib/jboss-marshalling-2.0.12.Final.jar:$ROOT_PATH/../lib/dom4j-2.1.3.jar:$ROOT_PATH/../lib/jaxen-1.1.6.jar:$ROOT_PATH/mail_1_3.jar:";
		      					
		      					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5).replace("$ROOT_PATH",System.getProperty("user.dir")), true);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "med_cargar_medicamentos_genericos.mail_1_3.Mail");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "$@");
		      				
			}

			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = mail.moment;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param moment=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param moment=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param moment=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("moment", obj_tRunJob_1);
	
		obj_tRunJob_1 = mail.project;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param project=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param project=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param project=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("project", obj_tRunJob_1);
	
		obj_tRunJob_1 = mail.job;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param job=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param job=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param job=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("job", obj_tRunJob_1);
	
		obj_tRunJob_1 = mail.context;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param context=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param context=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param context=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("context", obj_tRunJob_1);
	
		obj_tRunJob_1 = mail.origin;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param origin=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param origin=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param origin=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("origin", obj_tRunJob_1);
	
		obj_tRunJob_1 = mail.message;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param message=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param message=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param message=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("message", obj_tRunJob_1);
	
		obj_tRunJob_1 = mail.pid;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param pid=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param pid=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param pid=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("pid", obj_tRunJob_1);
	
	
				class ConsoleHelper_tRunJob_1 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_1 consoleHelper_tRunJob_1 = new ConsoleHelper_tRunJob_1();

		Runtime runtime_tRunJob_1 = Runtime.getRuntime();
		Process ps_tRunJob_1 = null;
		
		//0 indicates normal termination
        int result_tRunJob_1;
        StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
        try {
            ps_tRunJob_1 = runtime_tRunJob_1.exec((String[])paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

            Thread normal_tRunJob_1 = consoleHelper_tRunJob_1.getNormalThread(ps_tRunJob_1);
            normal_tRunJob_1.start();

            Thread error_tRunJob_1 = consoleHelper_tRunJob_1.getErrorThread(ps_tRunJob_1, errorMsg_tRunJob_1);
            error_tRunJob_1.start();

            result_tRunJob_1 = ps_tRunJob_1.waitFor();
            normal_tRunJob_1.join();
            error_tRunJob_1.join();
        } catch (ThreadDeath tde) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",tde.getMessage());
            ps_tRunJob_1.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_1_CHILD_RETURN_CODE",result_tRunJob_1);
		if(result_tRunJob_1 != 0){
   			globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_1.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_1 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_1.toString());
			
  		}

		

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */

	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row20"
						
						);
					}
					

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_end ] stop
 */



	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */

} // End of branch "salida"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row45");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"salida");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */

	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"mail");
			  	}
			  	
 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */

	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());




/**
 * [tJava_4 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */

	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
	
 



/**
 * [tRunJob_1 finally ] stop
 */

	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final CargaMedicamentosGenericos CargaMedicamentosGenericosClass = new CargaMedicamentosGenericos();

        int exitCode = CargaMedicamentosGenericosClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = (String[][])globalBuffer.toArray(new String[globalBuffer.size()][]);

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        		hastBufferOutput = true;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = CargaMedicamentosGenericos.class.getClassLoader().getResourceAsStream("med_cargar_medicamentos_genericos/cargamedicamentosgenericos_3_7/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = CargaMedicamentosGenericos.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("db_origen_AdditionalParams", "id_String");
                        if(context.getStringValue("db_origen_AdditionalParams") == null) {
                            context.db_origen_AdditionalParams = null;
                        } else {
                            context.db_origen_AdditionalParams=(String) context.getProperty("db_origen_AdditionalParams");
                        }
                        context.setContextType("db_origen_Login", "id_String");
                        if(context.getStringValue("db_origen_Login") == null) {
                            context.db_origen_Login = null;
                        } else {
                            context.db_origen_Login=(String) context.getProperty("db_origen_Login");
                        }
                        context.setContextType("db_origen_Password", "id_String");
                        if(context.getStringValue("db_origen_Password") == null) {
                            context.db_origen_Password = null;
                        } else {
                            context.db_origen_Password=(String) context.getProperty("db_origen_Password");
                        }
                        context.setContextType("db_origen_Port", "id_String");
                        if(context.getStringValue("db_origen_Port") == null) {
                            context.db_origen_Port = null;
                        } else {
                            context.db_origen_Port=(String) context.getProperty("db_origen_Port");
                        }
                        context.setContextType("db_origen_Schema", "id_String");
                        if(context.getStringValue("db_origen_Schema") == null) {
                            context.db_origen_Schema = null;
                        } else {
                            context.db_origen_Schema=(String) context.getProperty("db_origen_Schema");
                        }
                        context.setContextType("db_origen_Server", "id_String");
                        if(context.getStringValue("db_origen_Server") == null) {
                            context.db_origen_Server = null;
                        } else {
                            context.db_origen_Server=(String) context.getProperty("db_origen_Server");
                        }
                        context.setContextType("db_origen_ServiceName", "id_String");
                        if(context.getStringValue("db_origen_ServiceName") == null) {
                            context.db_origen_ServiceName = null;
                        } else {
                            context.db_origen_ServiceName=(String) context.getProperty("db_origen_ServiceName");
                        }
                        context.setContextType("ERROR", "id_String");
                        if(context.getStringValue("ERROR") == null) {
                            context.ERROR = null;
                        } else {
                            context.ERROR=(String) context.getProperty("ERROR");
                        }
                        context.setContextType("ESTADO", "id_String");
                        if(context.getStringValue("ESTADO") == null) {
                            context.ESTADO = null;
                        } else {
                            context.ESTADO=(String) context.getProperty("ESTADO");
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                        context.setContextType("carga_id", "id_BigDecimal");
                        if(context.getStringValue("carga_id") == null) {
                            context.carga_id = null;
                        } else {
                            try{
                                context.carga_id=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("carga_id"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "carga_id", e.getMessage()));
                                context.carga_id=null;
                            }
                        }
                        context.setContextType("Contenido", "id_Object");
                        if(context.getStringValue("Contenido") == null) {
                            context.Contenido = null;
                        } else {
                            context.Contenido=(Object) context.getProperty("Contenido");
                        }
                        context.setContextType("result", "id_String");
                        if(context.getStringValue("result") == null) {
                            context.result = null;
                        } else {
                            context.result=(String) context.getProperty("result");
                        }
                        context.setContextType("Salida", "id_Object");
                        if(context.getStringValue("Salida") == null) {
                            context.Salida = null;
                        } else {
                            context.Salida=(Object) context.getProperty("Salida");
                        }
                        context.setContextType("TContenido", "id_String");
                        if(context.getStringValue("TContenido") == null) {
                            context.TContenido = null;
                        } else {
                            context.TContenido=(String) context.getProperty("TContenido");
                        }
                        context.setContextType("Autoincremental", "id_Integer");
                        if(context.getStringValue("Autoincremental") == null) {
                            context.Autoincremental = null;
                        } else {
                            try{
                                context.Autoincremental=routines.system.ParserUtils.parseTo_Integer (context.getProperty("Autoincremental"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "Autoincremental", e.getMessage()));
                                context.Autoincremental=null;
                            }
                        }
                        context.setContextType("nombre", "id_String");
                        if(context.getStringValue("nombre") == null) {
                            context.nombre = null;
                        } else {
                            context.nombre=(String) context.getProperty("nombre");
                        }
                        context.setContextType("IsValid", "id_Boolean");
                        if(context.getStringValue("IsValid") == null) {
                            context.IsValid = null;
                        } else {
                            try{
                                context.IsValid=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("IsValid"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "IsValid", e.getMessage()));
                                context.IsValid=null;
                            }
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("db_origen_AdditionalParams")) {
                context.db_origen_AdditionalParams = (String) parentContextMap.get("db_origen_AdditionalParams");
            }if (parentContextMap.containsKey("db_origen_Login")) {
                context.db_origen_Login = (String) parentContextMap.get("db_origen_Login");
            }if (parentContextMap.containsKey("db_origen_Password")) {
                context.db_origen_Password = (String) parentContextMap.get("db_origen_Password");
            }if (parentContextMap.containsKey("db_origen_Port")) {
                context.db_origen_Port = (String) parentContextMap.get("db_origen_Port");
            }if (parentContextMap.containsKey("db_origen_Schema")) {
                context.db_origen_Schema = (String) parentContextMap.get("db_origen_Schema");
            }if (parentContextMap.containsKey("db_origen_Server")) {
                context.db_origen_Server = (String) parentContextMap.get("db_origen_Server");
            }if (parentContextMap.containsKey("db_origen_ServiceName")) {
                context.db_origen_ServiceName = (String) parentContextMap.get("db_origen_ServiceName");
            }if (parentContextMap.containsKey("ERROR")) {
                context.ERROR = (String) parentContextMap.get("ERROR");
            }if (parentContextMap.containsKey("ESTADO")) {
                context.ESTADO = (String) parentContextMap.get("ESTADO");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }if (parentContextMap.containsKey("carga_id")) {
                context.carga_id = (BigDecimal) parentContextMap.get("carga_id");
            }if (parentContextMap.containsKey("Contenido")) {
                context.Contenido = (Object) parentContextMap.get("Contenido");
            }if (parentContextMap.containsKey("result")) {
                context.result = (String) parentContextMap.get("result");
            }if (parentContextMap.containsKey("Salida")) {
                context.Salida = (Object) parentContextMap.get("Salida");
            }if (parentContextMap.containsKey("TContenido")) {
                context.TContenido = (String) parentContextMap.get("TContenido");
            }if (parentContextMap.containsKey("Autoincremental")) {
                context.Autoincremental = (Integer) parentContextMap.get("Autoincremental");
            }if (parentContextMap.containsKey("nombre")) {
                context.nombre = (String) parentContextMap.get("nombre");
            }if (parentContextMap.containsKey("IsValid")) {
                context.IsValid = (Boolean) parentContextMap.get("IsValid");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tOracleInput_7Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tOracleInput_7) {
globalMap.put("tOracleInput_7_SUBPROCESS_STATE", -1);

e_tOracleInput_7.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : CargaMedicamentosGenericos");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1791409 characters generated by Talend Open Studio for ESB 
 *     on the October 28, 2024, 2:48:19 PM COT
 ************************************************************************************************/