// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package afi_cargue_masivo.carguemasivo_0_1;

import routines.MyRoutineDemo;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.MYDEMO;
import routines.Relational;
import routines.Mathematical;
import routines.ExtraerBlob;
import routines.RestarFechas;
import routines.Numeric;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.ConvertBlob;
import routines.TEST;
import routines.StringHandling;
import routines.TalendDate;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_25
	//import java.util.List;

	//the import part of tJavaRow_16
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;

	//the import part of tJavaRow_4
	//import java.util.List;

	//the import part of tJavaRow_5
	//import java.util.List;

	//the import part of tJavaRow_27
	//import java.util.List;

	//the import part of tJavaRow_24
	//import java.util.List;

	//the import part of tJavaRow_17
	//import java.util.List;

	//the import part of tJavaRow_23
	//import java.util.List;

	//the import part of tJavaRow_26
	//import java.util.List;

	//the import part of tJavaRow_6
	//import java.util.List;

	//the import part of tJavaRow_14
	//import java.util.List;

	//the import part of tJavaRow_8
	//import java.util.List;

	//the import part of tJavaRow_7
	//import java.util.List;

	//the import part of tJavaRow_9
	//import java.util.List;

	//the import part of tJavaRow_10
	//import java.util.List;

	//the import part of tJavaRow_13
	//import java.util.List;

	//the import part of tJavaRow_11
	//import java.util.List;

	//the import part of tJavaRow_12
	//import java.util.List;

	//the import part of tJavaRow_18
	//import java.util.List;

	//the import part of tJavaRow_19
	//import java.util.List;

	//the import part of tJavaRow_21
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJavaRow_28
	//import java.util.List;

	//the import part of tJavaRow_20
	//import java.util.List;

	//the import part of tJavaRow_22
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: carguemasivo Purpose: ETL para la carga masiva de afiliados incluye validacion personas y afiliados<br>
 * Description:  <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status 
 */
public class carguemasivo implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(contenido != null){
				
					this.setProperty("contenido", contenido.toString());
				
			}
			
			if(vprocesos_id != null){
				
					this.setProperty("vprocesos_id", vprocesos_id.toString());
				
			}
			
			if(mensaje != null){
				
					this.setProperty("mensaje", mensaje.toString());
				
			}
			
			if(cregistros != null){
				
					this.setProperty("cregistros", cregistros.toString());
				
			}
			
			if(varchivos_id != null){
				
					this.setProperty("varchivos_id", varchivos_id.toString());
				
			}
			
			if(vrespuesta != null){
				
					this.setProperty("vrespuesta", vrespuesta.toString());
				
			}
			
			if(vfinicio != null){
				
					String pattern_vfinicio = "yyyy-MM-dd HH:mm:ss";
					String value_vfinicio = "";
					String[] parts_vfinicio = value_vfinicio.split(";");
					if(parts_vfinicio.length > 1){
						pattern_vfinicio = parts_vfinicio[0];
						this.setProperty("vfinicio", pattern_vfinicio + ";" + FormatterUtils.format_Date(vfinicio, pattern_vfinicio));
					}else{
						this.setProperty("vfinicio", FormatterUtils.format_Date(vfinicio, pattern_vfinicio));
					}
				
			}
			
			if(vindsal != null){
				
					this.setProperty("vindsal", vindsal.toString());
				
			}
			
			if(vestado != null){
				
					this.setProperty("vestado", vestado.toString());
				
			}
			
			if(numregexitoso != null){
				
					this.setProperty("numregexitoso", numregexitoso.toString());
				
			}
			
			if(vtarchivos_id != null){
				
					this.setProperty("vtarchivos_id", vtarchivos_id.toString());
				
			}
			
			if(vusuarios_id != null){
				
					this.setProperty("vusuarios_id", vusuarios_id.toString());
				
			}
			
			if(vnombre != null){
				
					this.setProperty("vnombre", vnombre.toString());
				
			}
			
			if(regafiliados != null){
				
					this.setProperty("regafiliados", regafiliados.toString());
				
			}
			
			if(regestructura != null){
				
					this.setProperty("regestructura", regestructura.toString());
				
			}
			
			if(regduplicados != null){
				
					this.setProperty("regduplicados", regduplicados.toString());
				
			}
			
			if(regpersonas != null){
				
					this.setProperty("regpersonas", regpersonas.toString());
				
			}
			
			if(schema != null){
				
					this.setProperty("schema", schema.toString());
				
			}
			
			if(sid != null){
				
					this.setProperty("sid", sid.toString());
				
			}
			
			if(bdpwd != null){
				
					this.setProperty("bdpwd", bdpwd.toString());
				
			}
			
			if(vmsg_error != null){
				
					this.setProperty("vmsg_error", vmsg_error.toString());
				
			}
			
			if(port != null){
				
					this.setProperty("port", port.toString());
				
			}
			
			if(host != null){
				
					this.setProperty("host", host.toString());
				
			}
			
			if(bduser != null){
				
					this.setProperty("bduser", bduser.toString());
				
			}
			
			if(estadoexc != null){
				
					this.setProperty("estadoexc", estadoexc.toString());
				
			}
			
			if(logerror != null){
				
					this.setProperty("logerror", logerror.toString());
				
			}
			
			if(db_origen_Server != null){
				
					this.setProperty("db_origen_Server", db_origen_Server.toString());
				
			}
			
			if(db_origen_Login != null){
				
					this.setProperty("db_origen_Login", db_origen_Login.toString());
				
			}
			
			if(db_origen_ServiceName != null){
				
					this.setProperty("db_origen_ServiceName", db_origen_ServiceName.toString());
				
			}
			
			if(db_origen_Schema != null){
				
					this.setProperty("db_origen_Schema", db_origen_Schema.toString());
				
			}
			
			if(db_origen_Password != null){
				
					this.setProperty("db_origen_Password", db_origen_Password.toString());
				
			}
			
			if(db_origen_AdditionalParams != null){
				
					this.setProperty("db_origen_AdditionalParams", db_origen_AdditionalParams.toString());
				
			}
			
			if(db_origen_Port != null){
				
					this.setProperty("db_origen_Port", db_origen_Port.toString());
				
			}
			
			if(afiarchivos_id != null){
				
					this.setProperty("afiarchivos_id", afiarchivos_id.toString());
				
			}
			
			if(ACTUALIZACION_TOTAL != null){
				
					this.setProperty("ACTUALIZACION_TOTAL", ACTUALIZACION_TOTAL.toString());
				
			}
			
			if(FECHA_TERMINACION != null){
				
					this.setProperty("FECHA_TERMINACION", FECHA_TERMINACION.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(LOGS_STAT != null){
				
					this.setProperty("LOGS_STAT", LOGS_STAT.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(FANTERIOR != null){
				
					this.setProperty("FANTERIOR", FANTERIOR.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(ESTADO != null){
				
					this.setProperty("ESTADO", ESTADO.toString());
				
			}
			
			if(BODEGA != null){
				
					this.setProperty("BODEGA", BODEGA.toString());
				
			}
			
			if(RutaSistema != null){
				
					this.setProperty("RutaSistema", RutaSistema.toString());
				
			}
			
			if(ID_SOLICITUD != null){
				
					this.setProperty("ID_SOLICITUD", ID_SOLICITUD.toString());
				
			}
			
			if(LAST_DAYS != null){
				
					this.setProperty("LAST_DAYS", LAST_DAYS.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(ERROR != null){
				
					this.setProperty("ERROR", ERROR.toString());
				
			}
			
			if(CONDITION != null){
				
					this.setProperty("CONDITION", CONDITION.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
			if(cantidad_archivos != null){
				
					this.setProperty("cantidad_archivos", cantidad_archivos.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public Object contenido;
public Object getContenido(){
	return this.contenido;
}
public Integer vprocesos_id;
public Integer getVprocesos_id(){
	return this.vprocesos_id;
}
public String mensaje;
public String getMensaje(){
	return this.mensaje;
}
public Integer cregistros;
public Integer getCregistros(){
	return this.cregistros;
}
public Integer varchivos_id;
public Integer getVarchivos_id(){
	return this.varchivos_id;
}
public String vrespuesta;
public String getVrespuesta(){
	return this.vrespuesta;
}
public java.util.Date vfinicio;
public java.util.Date getVfinicio(){
	return this.vfinicio;
}
public Integer vindsal;
public Integer getVindsal(){
	return this.vindsal;
}
public Integer vestado;
public Integer getVestado(){
	return this.vestado;
}
public Integer numregexitoso;
public Integer getNumregexitoso(){
	return this.numregexitoso;
}
public Integer vtarchivos_id;
public Integer getVtarchivos_id(){
	return this.vtarchivos_id;
}
public Integer vusuarios_id;
public Integer getVusuarios_id(){
	return this.vusuarios_id;
}
public String vnombre;
public String getVnombre(){
	return this.vnombre;
}
public Integer regafiliados;
public Integer getRegafiliados(){
	return this.regafiliados;
}
public Integer regestructura;
public Integer getRegestructura(){
	return this.regestructura;
}
public Integer regduplicados;
public Integer getRegduplicados(){
	return this.regduplicados;
}
public Integer regpersonas;
public Integer getRegpersonas(){
	return this.regpersonas;
}
public String schema;
public String getSchema(){
	return this.schema;
}
public String sid;
public String getSid(){
	return this.sid;
}
public String bdpwd;
public String getBdpwd(){
	return this.bdpwd;
}
public String vmsg_error;
public String getVmsg_error(){
	return this.vmsg_error;
}
public String port;
public String getPort(){
	return this.port;
}
public String host;
public String getHost(){
	return this.host;
}
public String bduser;
public String getBduser(){
	return this.bduser;
}
public String estadoexc;
public String getEstadoexc(){
	return this.estadoexc;
}
public String logerror;
public String getLogerror(){
	return this.logerror;
}
public String db_origen_Server;
public String getDb_origen_Server(){
	return this.db_origen_Server;
}
public String db_origen_Login;
public String getDb_origen_Login(){
	return this.db_origen_Login;
}
public String db_origen_ServiceName;
public String getDb_origen_ServiceName(){
	return this.db_origen_ServiceName;
}
public String db_origen_Schema;
public String getDb_origen_Schema(){
	return this.db_origen_Schema;
}
public java.lang.String db_origen_Password;
public java.lang.String getDb_origen_Password(){
	return this.db_origen_Password;
}
public String db_origen_AdditionalParams;
public String getDb_origen_AdditionalParams(){
	return this.db_origen_AdditionalParams;
}
public String db_origen_Port;
public String getDb_origen_Port(){
	return this.db_origen_Port;
}
public Integer afiarchivos_id;
public Integer getAfiarchivos_id(){
	return this.afiarchivos_id;
}
public Boolean ACTUALIZACION_TOTAL;
public Boolean getACTUALIZACION_TOTAL(){
	return this.ACTUALIZACION_TOTAL;
}
public String FECHA_TERMINACION;
public String getFECHA_TERMINACION(){
	return this.FECHA_TERMINACION;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String LOGS_STAT;
public String getLOGS_STAT(){
	return this.LOGS_STAT;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public String FANTERIOR;
public String getFANTERIOR(){
	return this.FANTERIOR;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public String ESTADO;
public String getESTADO(){
	return this.ESTADO;
}
public String BODEGA;
public String getBODEGA(){
	return this.BODEGA;
}
public String RutaSistema;
public String getRutaSistema(){
	return this.RutaSistema;
}
public Integer ID_SOLICITUD;
public Integer getID_SOLICITUD(){
	return this.ID_SOLICITUD;
}
public Integer LAST_DAYS;
public Integer getLAST_DAYS(){
	return this.LAST_DAYS;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String ERROR;
public String getERROR(){
	return this.ERROR;
}
public String CONDITION;
public String getCONDITION(){
	return this.CONDITION;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
public Integer cantidad_archivos;
public Integer getCantidad_archivos(){
	return this.cantidad_archivos;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "carguemasivo";
	private final String projectName = "AFI_CARGUE_MASIVO";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				carguemasivo.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(carguemasivo.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExist_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileExist_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								errorCode = null;
								tFixedFlowInput_20Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tOracleConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_23_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError2", 0, "error");
								}
							
							
								errorCode = null;
								tFixedFlowInput_24Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tFixedFlowInput_23_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleRow_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputPositional_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleCommit_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileExist_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_20_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_23_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleRow_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_18_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_18_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_24_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_19_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_19_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_21_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_22_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tFileExist_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public void tFileExist_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileExist_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileExist_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExist_1", false);
		start_Hash.put("tFileExist_1", System.currentTimeMillis());
		
	
	currentComponent="tFileExist_1";
	
	
		int tos_count_tFileExist_1 = 0;
		

 



/**
 * [tFileExist_1 begin ] stop
 */
	
	/**
	 * [tFileExist_1 main ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	



java.io.File file_tFileExist_1 = new java.io.File(context.ORIGEN);
if (!file_tFileExist_1.exists()) {
    globalMap.put("tFileExist_1_EXISTS",false);
}else{
	globalMap.put("tFileExist_1_EXISTS",true);
}

globalMap.put("tFileExist_1_FILENAME",context.ORIGEN);


 


	tos_count_tFileExist_1++;

/**
 * [tFileExist_1 main ] stop
 */
	
	/**
	 * [tFileExist_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	

 



/**
 * [tFileExist_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileExist_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	

 



/**
 * [tFileExist_1 process_data_end ] stop
 */
	
	/**
	 * [tFileExist_1 end ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	

 

ok_Hash.put("tFileExist_1", true);
end_Hash.put("tFileExist_1", System.currentTimeMillis());

   			if (((Boolean)globalMap.get("tFileExist_1_EXISTS"))) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If27", 0, "true");
					}
				tFileInputXML_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If27", 0, "false");
					}   	 
   				}
   			if (!((Boolean)globalMap.get("tFileExist_1_EXISTS"))) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If28", 0, "true");
					}
				tFixedFlowInput_19Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If28", 0, "false");
					}   	 
   				}



/**
 * [tFileExist_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileExist_1 finally ] start
	 */

	

	
	
	currentComponent="tFileExist_1";
	
	

 



/**
 * [tFileExist_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileExist_1_SUBPROCESS_STATE", 1);
	}
	


public static class row75Struct implements routines.system.IPersistableRow<row75Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return true;
				}
				public Integer HostLength(){
				    return 13;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return true;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return true;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 16;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 12;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 12;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 3;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Host == null) ? 0 : this.Host.hashCode());
					
						result = prime * result + ((this.Port == null) ? 0 : this.Port.hashCode());
					
						result = prime * result + ((this.Sid == null) ? 0 : this.Sid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row75Struct other = (row75Struct) obj;
		
						if (this.Host == null) {
							if (other.Host != null)
								return false;
						
						} else if (!this.Host.equals(other.Host))
						
							return false;
					
						if (this.Port == null) {
							if (other.Port != null)
								return false;
						
						} else if (!this.Port.equals(other.Port))
						
							return false;
					
						if (this.Sid == null) {
							if (other.Sid != null)
								return false;
						
						} else if (!this.Sid.equals(other.Sid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row75Struct other) {

		other.Host = this.Host;
	            other.Port = this.Port;
	            other.Sid = this.Sid;
	            other.ServiceName = this.ServiceName;
	            other.Schema = this.Schema;
	            other.User = this.User;
	            other.Password = this.Password;
	            other.SMTPHost = this.SMTPHost;
	            other.SMTPPort = this.SMTPPort;
	            other.UsernameMail = this.UsernameMail;
	            other.PasswordMail = this.PasswordMail;
	            
	}

	public void copyKeysDataTo(row75Struct other) {

		other.Host = this.Host;
	            	other.Port = this.Port;
	            	other.Sid = this.Sid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row75Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Host, other.Host);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Port, other.Port);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Sid, other.Sid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row75Struct row75 = new row75Struct();




	
	/**
	 * [tJavaRow_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_25", false);
		start_Hash.put("tJavaRow_25", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_25";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row75");
					}
				
		int tos_count_tJavaRow_25 = 0;
		

int nb_line_tJavaRow_25 = 0;

 



/**
 * [tJavaRow_25 begin ] stop
 */



	
	/**
	 * [tFileInputXML_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_2", false);
		start_Hash.put("tFileInputXML_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_2";
	
	
		int tos_count_tFileInputXML_2 = 0;
		

	

int nb_line_tFileInputXML_2 = 0;

	String os_tFileInputXML_2 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_2=false;
	if(os_tFileInputXML_2.indexOf("windows") > -1 || os_tFileInputXML_2.indexOf("nt") > -1){
		isWindows_tFileInputXML_2=true;
	}
class NameSpaceTool_tFileInputXML_2 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_2{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getStringValue().isEmpty();
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_2 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_2 = null;
try {
	filename_tFileInputXML_2 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
	
	throw(e);
	
}
if(filename_tFileInputXML_2 != null && filename_tFileInputXML_2 instanceof String && filename_tFileInputXML_2.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_2){
		filename_tFileInputXML_2 = filename_tFileInputXML_2.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_2 = true;
org.dom4j.Document doc_tFileInputXML_2 = null;
java.io.Closeable toClose_tFileInputXML_2 = null;
try{
	if(filename_tFileInputXML_2 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_2 = (java.io.InputStream)filename_tFileInputXML_2;
		toClose_tFileInputXML_2 = inputStream_tFileInputXML_2;
		doc_tFileInputXML_2 = reader_tFileInputXML_2.read(inputStream_tFileInputXML_2);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_2 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_2)),"UTF-8");
		toClose_tFileInputXML_2 = unicodeReader_tFileInputXML_2;
		org.xml.sax.InputSource in_tFileInputXML_2= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_2);
		doc_tFileInputXML_2 = reader_tFileInputXML_2.read(in_tFileInputXML_2);
	}
}catch(java.lang.Exception e){
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
	throw(e);
} finally {
	if(toClose_tFileInputXML_2!=null) {
		toClose_tFileInputXML_2.close();
	}
}
if(isValidFile_tFileInputXML_2){
NameSpaceTool_tFileInputXML_2 nsTool_tFileInputXML_2 = new NameSpaceTool_tFileInputXML_2();
nsTool_tFileInputXML_2.countNSMap(doc_tFileInputXML_2.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_2 = nsTool_tFileInputXML_2.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_2 = doc_tFileInputXML_2.createXPath(nsTool_tFileInputXML_2.addDefaultNSPrefix("/connectionStrings"));  
x_tFileInputXML_2.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_2); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_2.selectNodes(doc_tFileInputXML_2);	
XML_API_tFileInputXML_2 xml_api_tFileInputXML_2 = new XML_API_tFileInputXML_2();
String str_tFileInputXML_2 = "";
org.dom4j.Node node_tFileInputXML_2 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_2=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_2{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_2 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Host","/connectionStrings"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Port","/connectionStrings"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Sid","/connectionStrings"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("ServiceName","/connectionStrings"));
	xpath_3.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(3,xpath_3);
			
	org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Schema","/connectionStrings"));
	xpath_4.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(4,xpath_4);
			
	org.dom4j.XPath xpath_5 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("User","/connectionStrings"));
	xpath_5.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(5,xpath_5);
			
	org.dom4j.XPath xpath_6 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Password","/connectionStrings"));
	xpath_6.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(6,xpath_6);
			
	org.dom4j.XPath xpath_7 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPHost","/connectionStrings"));
	xpath_7.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(7,xpath_7);
			
	org.dom4j.XPath xpath_8 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPPort","/connectionStrings"));
	xpath_8.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(8,xpath_8);
			
	org.dom4j.XPath xpath_9 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("UsernameMail","/connectionStrings"));
	xpath_9.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(9,xpath_9);
			
	org.dom4j.XPath xpath_10 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PasswordMail","/connectionStrings"));
	xpath_10.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(10,xpath_10);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_2 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_2 xPathUtil_tFileInputXML_2 = new XPathUtil_tFileInputXML_2();
	xPathUtil_tFileInputXML_2.initXPaths(xpaths_tFileInputXML_2, nsTool_tFileInputXML_2, xmlNameSpaceMap_tFileInputXML_2);
for (org.dom4j.Node temp_tFileInputXML_2: nodeList_tFileInputXML_2) {
	if (nb_line_tFileInputXML_2>=50) {
	
		break;
	}
		nb_line_tFileInputXML_2++;
		
	row75 = null;			
	boolean whetherReject_tFileInputXML_2 = false;
	row75 = new row75Struct();
	try{
    Object obj0_tFileInputXML_2 = xpaths_tFileInputXML_2.get(0).evaluate(temp_tFileInputXML_2);
    if(obj0_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj0_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj0_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_2 instanceof String || obj0_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj0_tFileInputXML_2);
    } else if(obj0_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row75.Host =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row75.Host ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row75.Host =null;
									}else{
		row75.Host = str_tFileInputXML_2;
	}
    Object obj1_tFileInputXML_2 = xpaths_tFileInputXML_2.get(1).evaluate(temp_tFileInputXML_2);
    if(obj1_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj1_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj1_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_2 instanceof String || obj1_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj1_tFileInputXML_2);
    } else if(obj1_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row75.Port =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row75.Port ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row75.Port =null;
									}else{
		row75.Port = str_tFileInputXML_2;
	}
    Object obj2_tFileInputXML_2 = xpaths_tFileInputXML_2.get(2).evaluate(temp_tFileInputXML_2);
    if(obj2_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj2_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj2_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_2 instanceof String || obj2_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj2_tFileInputXML_2);
    } else if(obj2_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row75.Sid =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row75.Sid ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row75.Sid =null;
									}else{
		row75.Sid = str_tFileInputXML_2;
	}
    Object obj3_tFileInputXML_2 = xpaths_tFileInputXML_2.get(3).evaluate(temp_tFileInputXML_2);
    if(obj3_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj3_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj3_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj3_tFileInputXML_2 instanceof String || obj3_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj3_tFileInputXML_2);
    } else if(obj3_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj3_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row75.ServiceName =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row75.ServiceName ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row75.ServiceName =null;
									}else{
		row75.ServiceName = str_tFileInputXML_2;
	}
    Object obj4_tFileInputXML_2 = xpaths_tFileInputXML_2.get(4).evaluate(temp_tFileInputXML_2);
    if(obj4_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj4_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj4_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj4_tFileInputXML_2 instanceof String || obj4_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj4_tFileInputXML_2);
    } else if(obj4_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj4_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row75.Schema =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row75.Schema ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row75.Schema =null;
									}else{
		row75.Schema = str_tFileInputXML_2;
	}
    Object obj5_tFileInputXML_2 = xpaths_tFileInputXML_2.get(5).evaluate(temp_tFileInputXML_2);
    if(obj5_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj5_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj5_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj5_tFileInputXML_2 instanceof String || obj5_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj5_tFileInputXML_2);
    } else if(obj5_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj5_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row75.User =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row75.User ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row75.User =null;
									}else{
		row75.User = str_tFileInputXML_2;
	}
    Object obj6_tFileInputXML_2 = xpaths_tFileInputXML_2.get(6).evaluate(temp_tFileInputXML_2);
    if(obj6_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj6_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj6_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj6_tFileInputXML_2 instanceof String || obj6_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj6_tFileInputXML_2);
    } else if(obj6_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj6_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row75.Password =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row75.Password ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row75.Password =null;
									}else{
		row75.Password = str_tFileInputXML_2;
	}
    Object obj7_tFileInputXML_2 = xpaths_tFileInputXML_2.get(7).evaluate(temp_tFileInputXML_2);
    if(obj7_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj7_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj7_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj7_tFileInputXML_2 instanceof String || obj7_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj7_tFileInputXML_2);
    } else if(obj7_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj7_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row75.SMTPHost =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row75.SMTPHost ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row75.SMTPHost =null;
									}else{
		row75.SMTPHost = str_tFileInputXML_2;
	}
    Object obj8_tFileInputXML_2 = xpaths_tFileInputXML_2.get(8).evaluate(temp_tFileInputXML_2);
    if(obj8_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj8_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj8_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj8_tFileInputXML_2 instanceof String || obj8_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj8_tFileInputXML_2);
    } else if(obj8_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj8_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row75.SMTPPort =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row75.SMTPPort ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row75.SMTPPort =null;
									}else{
		row75.SMTPPort = str_tFileInputXML_2;
	}
    Object obj9_tFileInputXML_2 = xpaths_tFileInputXML_2.get(9).evaluate(temp_tFileInputXML_2);
    if(obj9_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj9_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj9_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj9_tFileInputXML_2 instanceof String || obj9_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj9_tFileInputXML_2);
    } else if(obj9_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj9_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row75.UsernameMail =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row75.UsernameMail ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row75.UsernameMail =null;
									}else{
		row75.UsernameMail = str_tFileInputXML_2;
	}
    Object obj10_tFileInputXML_2 = xpaths_tFileInputXML_2.get(10).evaluate(temp_tFileInputXML_2);
    if(obj10_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj10_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj10_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj10_tFileInputXML_2 instanceof String || obj10_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj10_tFileInputXML_2);
    } else if(obj10_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj10_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row75.PasswordMail =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row75.PasswordMail ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row75.PasswordMail =null;
									}else{
		row75.PasswordMail = str_tFileInputXML_2;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_2 = true;
            throw(e);
    }
			
			

 



/**
 * [tFileInputXML_2 begin ] stop
 */
	
	/**
	 * [tFileInputXML_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 


	tos_count_tFileInputXML_2++;

/**
 * [tFileInputXML_2 main ] stop
 */
	
	/**
	 * [tFileInputXML_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_begin ] stop
 */
// Start of branch "row75"
if(row75 != null) { 



	
	/**
	 * [tJavaRow_25 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_25";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row75"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.db_origen_Server = row75.Host;
context.db_origen_Port = row75.Port;
//context.db_origen_Sid = row75.Sid;
context.db_origen_Login = row75.User;
context.db_origen_Password = row75.Password;
context.db_origen_ServiceName = row75.ServiceName;
context.vnombre = "";
context.numregexitoso = 0;
//context.db_origen_Schema = row75.Schema;

//System.out.println(context.db_origen_ServiceName);
    nb_line_tJavaRow_25++;   

 


	tos_count_tJavaRow_25++;

/**
 * [tJavaRow_25 main ] stop
 */
	
	/**
	 * [tJavaRow_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_25";
	
	

 



/**
 * [tJavaRow_25 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_25";
	
	

 



/**
 * [tJavaRow_25 process_data_end ] stop
 */

} // End of branch "row75"




	
	/**
	 * [tFileInputXML_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	


}
	}
	globalMap.put("tFileInputXML_2_NB_LINE",nb_line_tFileInputXML_2);

	

 

ok_Hash.put("tFileInputXML_2", true);
end_Hash.put("tFileInputXML_2", System.currentTimeMillis());




/**
 * [tFileInputXML_2 end ] stop
 */

	
	/**
	 * [tJavaRow_25 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_25";
	
	

globalMap.put("tJavaRow_25_NB_LINE",nb_line_tJavaRow_25);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row75");
			  	}
			  	
 

ok_Hash.put("tJavaRow_25", true);
end_Hash.put("tJavaRow_25", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk14", 0, "ok");
				}
				tOracleConnection_2Process(globalMap);



/**
 * [tJavaRow_25 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_25 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_25";
	
	

 



/**
 * [tJavaRow_25 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_2", false);
		start_Hash.put("tOracleConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_2";
	
	
		int tos_count_tOracleConnection_2 = 0;
		
	

	
        String url_tOracleConnection_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_2", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_2 = context.db_origen_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_2 = context.db_origen_Password; 
		String dbPwd_tOracleConnection_2 = decryptedPassword_tOracleConnection_2;
	
	
	java.sql.Connection conn_tOracleConnection_2 = null;
	
		
			String driverClass_tOracleConnection_2 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_2 = java.lang.Class.forName(driverClass_tOracleConnection_2);
			globalMap.put("driverClass_tOracleConnection_2", driverClass_tOracleConnection_2);
		
			java.util.Properties atnParamsPrope_tOracleConnection_2 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_2.put("user",dbUser_tOracleConnection_2);
			    atnParamsPrope_tOracleConnection_2.put("password",dbPwd_tOracleConnection_2);
			if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                atnParamsPrope_tOracleConnection_2.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_2 = java.sql.DriverManager.getConnection(url_tOracleConnection_2, atnParamsPrope_tOracleConnection_2);

		globalMap.put("conn_tOracleConnection_2", conn_tOracleConnection_2);
	if (null != conn_tOracleConnection_2) {
		
			conn_tOracleConnection_2.setAutoCommit(false);
	}
        globalMap.put("host_" + "tOracleConnection_2",context.db_origen_Server);
        globalMap.put("port_" + "tOracleConnection_2",context.db_origen_Port);
        globalMap.put("dbname_" + "tOracleConnection_2",context.db_origen_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_2", context.db_origen_Schema);
	globalMap.put("username_" + "tOracleConnection_2",context.db_origen_Login);
	globalMap.put("password_" + "tOracleConnection_2",dbPwd_tOracleConnection_2);

 



/**
 * [tOracleConnection_2 begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 


	tos_count_tOracleConnection_2++;

/**
 * [tOracleConnection_2 main ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_2 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 

ok_Hash.put("tOracleConnection_2", true);
end_Hash.put("tOracleConnection_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tOracleInput_9Process(globalMap);



/**
 * [tOracleConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 1);
	}
	


public static class row66_0Struct implements routines.system.IPersistableRow<row66_0Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String HOST;

				public String getHOST () {
					return this.HOST;
				}

				public Boolean HOSTIsNullable(){
				    return true;
				}
				public Boolean HOSTIsKey(){
				    return false;
				}
				public Integer HOSTLength(){
				    return null;
				}
				public Integer HOSTPrecision(){
				    return null;
				}
				public String HOSTDefault(){
				
					return null;
				
				}
				public String HOSTComment(){
				
				    return "";
				
				}
				public String HOSTPattern(){
				
					return "";
				
				}
				public String HOSTOriginalDbColumnName(){
				
					return "HOST";
				
				}

				
			    public String PUERTO;

				public String getPUERTO () {
					return this.PUERTO;
				}

				public Boolean PUERTOIsNullable(){
				    return true;
				}
				public Boolean PUERTOIsKey(){
				    return false;
				}
				public Integer PUERTOLength(){
				    return null;
				}
				public Integer PUERTOPrecision(){
				    return null;
				}
				public String PUERTODefault(){
				
					return null;
				
				}
				public String PUERTOComment(){
				
				    return "";
				
				}
				public String PUERTOPattern(){
				
					return "";
				
				}
				public String PUERTOOriginalDbColumnName(){
				
					return "PUERTO";
				
				}

				
			    public Integer ID_ARCHIVO;

				public Integer getID_ARCHIVO () {
					return this.ID_ARCHIVO;
				}

				public Boolean ID_ARCHIVOIsNullable(){
				    return true;
				}
				public Boolean ID_ARCHIVOIsKey(){
				    return false;
				}
				public Integer ID_ARCHIVOLength(){
				    return null;
				}
				public Integer ID_ARCHIVOPrecision(){
				    return null;
				}
				public String ID_ARCHIVODefault(){
				
					return null;
				
				}
				public String ID_ARCHIVOComment(){
				
				    return "";
				
				}
				public String ID_ARCHIVOPattern(){
				
					return "";
				
				}
				public String ID_ARCHIVOOriginalDbColumnName(){
				
					return "ID_ARCHIVO";
				
				}

				
			    public String RESPUESTA;

				public String getRESPUESTA () {
					return this.RESPUESTA;
				}

				public Boolean RESPUESTAIsNullable(){
				    return true;
				}
				public Boolean RESPUESTAIsKey(){
				    return false;
				}
				public Integer RESPUESTALength(){
				    return null;
				}
				public Integer RESPUESTAPrecision(){
				    return null;
				}
				public String RESPUESTADefault(){
				
					return null;
				
				}
				public String RESPUESTAComment(){
				
				    return "";
				
				}
				public String RESPUESTAPattern(){
				
					return "";
				
				}
				public String RESPUESTAOriginalDbColumnName(){
				
					return "RESPUESTA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.HOST = readString(dis);
					
					this.PUERTO = readString(dis);
					
						this.ID_ARCHIVO = readInteger(dis);
					
					this.RESPUESTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.HOST = readString(dis);
					
					this.PUERTO = readString(dis);
					
						this.ID_ARCHIVO = readInteger(dis);
					
					this.RESPUESTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.HOST,dos);
					
					// String
				
						writeString(this.PUERTO,dos);
					
					// Integer
				
						writeInteger(this.ID_ARCHIVO,dos);
					
					// String
				
						writeString(this.RESPUESTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.HOST,dos);
					
					// String
				
						writeString(this.PUERTO,dos);
					
					// Integer
				
						writeInteger(this.ID_ARCHIVO,dos);
					
					// String
				
						writeString(this.RESPUESTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("HOST="+HOST);
		sb.append(",PUERTO="+PUERTO);
		sb.append(",ID_ARCHIVO="+String.valueOf(ID_ARCHIVO));
		sb.append(",RESPUESTA="+RESPUESTA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row66_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row66Struct implements routines.system.IPersistableRow<row66Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String HOST;

				public String getHOST () {
					return this.HOST;
				}

				public Boolean HOSTIsNullable(){
				    return true;
				}
				public Boolean HOSTIsKey(){
				    return false;
				}
				public Integer HOSTLength(){
				    return null;
				}
				public Integer HOSTPrecision(){
				    return null;
				}
				public String HOSTDefault(){
				
					return null;
				
				}
				public String HOSTComment(){
				
				    return "";
				
				}
				public String HOSTPattern(){
				
					return "";
				
				}
				public String HOSTOriginalDbColumnName(){
				
					return "HOST";
				
				}

				
			    public String PUERTO;

				public String getPUERTO () {
					return this.PUERTO;
				}

				public Boolean PUERTOIsNullable(){
				    return true;
				}
				public Boolean PUERTOIsKey(){
				    return false;
				}
				public Integer PUERTOLength(){
				    return null;
				}
				public Integer PUERTOPrecision(){
				    return null;
				}
				public String PUERTODefault(){
				
					return null;
				
				}
				public String PUERTOComment(){
				
				    return "";
				
				}
				public String PUERTOPattern(){
				
					return "";
				
				}
				public String PUERTOOriginalDbColumnName(){
				
					return "PUERTO";
				
				}

				
			    public Integer ID_ARCHIVO;

				public Integer getID_ARCHIVO () {
					return this.ID_ARCHIVO;
				}

				public Boolean ID_ARCHIVOIsNullable(){
				    return true;
				}
				public Boolean ID_ARCHIVOIsKey(){
				    return false;
				}
				public Integer ID_ARCHIVOLength(){
				    return null;
				}
				public Integer ID_ARCHIVOPrecision(){
				    return null;
				}
				public String ID_ARCHIVODefault(){
				
					return null;
				
				}
				public String ID_ARCHIVOComment(){
				
				    return "";
				
				}
				public String ID_ARCHIVOPattern(){
				
					return "";
				
				}
				public String ID_ARCHIVOOriginalDbColumnName(){
				
					return "ID_ARCHIVO";
				
				}

				
			    public String RESPUESTA;

				public String getRESPUESTA () {
					return this.RESPUESTA;
				}

				public Boolean RESPUESTAIsNullable(){
				    return true;
				}
				public Boolean RESPUESTAIsKey(){
				    return false;
				}
				public Integer RESPUESTALength(){
				    return null;
				}
				public Integer RESPUESTAPrecision(){
				    return null;
				}
				public String RESPUESTADefault(){
				
					return null;
				
				}
				public String RESPUESTAComment(){
				
				    return "";
				
				}
				public String RESPUESTAPattern(){
				
					return "";
				
				}
				public String RESPUESTAOriginalDbColumnName(){
				
					return "RESPUESTA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.HOST = readString(dis);
					
					this.PUERTO = readString(dis);
					
						this.ID_ARCHIVO = readInteger(dis);
					
					this.RESPUESTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.HOST = readString(dis);
					
					this.PUERTO = readString(dis);
					
						this.ID_ARCHIVO = readInteger(dis);
					
					this.RESPUESTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.HOST,dos);
					
					// String
				
						writeString(this.PUERTO,dos);
					
					// Integer
				
						writeInteger(this.ID_ARCHIVO,dos);
					
					// String
				
						writeString(this.RESPUESTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.HOST,dos);
					
					// String
				
						writeString(this.PUERTO,dos);
					
					// Integer
				
						writeInteger(this.ID_ARCHIVO,dos);
					
					// String
				
						writeString(this.RESPUESTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("HOST="+HOST);
		sb.append(",PUERTO="+PUERTO);
		sb.append(",ID_ARCHIVO="+String.valueOf(ID_ARCHIVO));
		sb.append(",RESPUESTA="+RESPUESTA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row66Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_20_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row66Struct row66 = new row66Struct();
row66Struct row66_0 = row66;





	
	/**
	 * [tDie_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_7", false);
		start_Hash.put("tDie_7", System.currentTimeMillis());
		
	
	currentComponent="tDie_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row66_0");
					}
				
		int tos_count_tDie_7 = 0;
		

 



/**
 * [tDie_7 begin ] stop
 */



	
	/**
	 * [tBufferOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_7", false);
		start_Hash.put("tBufferOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row66");
					}
				
		int tos_count_tBufferOutput_7 = 0;
		

 



/**
 * [tBufferOutput_7 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_20", false);
		start_Hash.put("tFixedFlowInput_20", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_20";
	
	
		int tos_count_tFixedFlowInput_20 = 0;
		

	    for (int i_tFixedFlowInput_20 = 0 ; i_tFixedFlowInput_20 < 1 ; i_tFixedFlowInput_20++) {
	                	            	
    	            		row66.HOST = context.host;
    	            	        	            	
    	            		row66.PUERTO = context.port;
    	            	        	            	
    	            		row66.ID_ARCHIVO = context.afiarchivos_id;
    	            	        	            	
    	            		row66.RESPUESTA = "ERROR: Conexion a la base de datos no establecida";
    	            	

 



/**
 * [tFixedFlowInput_20 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_20 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_20";
	
	

 


	tos_count_tFixedFlowInput_20++;

/**
 * [tFixedFlowInput_20 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_20";
	
	

 



/**
 * [tFixedFlowInput_20 process_data_begin ] stop
 */

	
	/**
	 * [tBufferOutput_7 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row66"
						
						);
					}
					



String[] row_tBufferOutput_7=new String[]{"","","","",};		
	    if(row66.HOST != null){
	        
	            row_tBufferOutput_7[0] = row66.HOST;
	                        			    
	    }else{
	    	row_tBufferOutput_7[0] = null;
	    }
	    if(row66.PUERTO != null){
	        
	            row_tBufferOutput_7[1] = row66.PUERTO;
	                        			    
	    }else{
	    	row_tBufferOutput_7[1] = null;
	    }
	    if(row66.ID_ARCHIVO != null){
	        
	            row_tBufferOutput_7[2] = String.valueOf(row66.ID_ARCHIVO);
	                        			    
	    }else{
	    	row_tBufferOutput_7[2] = null;
	    }
	    if(row66.RESPUESTA != null){
	        
	            row_tBufferOutput_7[3] = row66.RESPUESTA;
	                        			    
	    }else{
	    	row_tBufferOutput_7[3] = null;
	    }
	globalBuffer.add(row_tBufferOutput_7);	
	
 
     row66_0 = row66;


	tos_count_tBufferOutput_7++;

/**
 * [tBufferOutput_7 main ] stop
 */
	
	/**
	 * [tBufferOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_7";
	
	

 



/**
 * [tBufferOutput_7 process_data_begin ] stop
 */

	
	/**
	 * [tDie_7 main ] start
	 */

	

	
	
	currentComponent="tDie_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row66_0"
						
						);
					}
					

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_7", 5, "ERROR: Conexion a la base de datos no establecida", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_7_DIE_PRIORITY", 5);
	System.err.println("ERROR: Conexion a la base de datos no establecida");
	
	globalMap.put("tDie_7_DIE_MESSAGE", "ERROR: Conexion a la base de datos no establecida");
	globalMap.put("tDie_7_DIE_MESSAGES", "ERROR: Conexion a la base de datos no establecida");
	
	} catch (Exception | Error e_tDie_7) {
	    globalMap.put("tDie_7_ERROR_MESSAGE",e_tDie_7.getMessage());
		logIgnoredError(String.format("tDie_7 - tDie failed to log message due to internal error: %s", e_tDie_7), e_tDie_7);
	}
	
	currentComponent = "tDie_7";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_7_DIE_CODE", errorCode);        

    
	if(true){	
		TDieException e_tDie_7 = new TDieException();

		

		throw e_tDie_7;
	}

 


	tos_count_tDie_7++;

/**
 * [tDie_7 main ] stop
 */
	
	/**
	 * [tDie_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_7";
	
	

 



/**
 * [tDie_7 process_data_begin ] stop
 */
	
	/**
	 * [tDie_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_7";
	
	

 



/**
 * [tDie_7 process_data_end ] stop
 */



	
	/**
	 * [tBufferOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_7";
	
	

 



/**
 * [tBufferOutput_7 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_20";
	
	

 



/**
 * [tFixedFlowInput_20 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_20 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_20";
	
	

        }
        globalMap.put("tFixedFlowInput_20_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_20", true);
end_Hash.put("tFixedFlowInput_20", System.currentTimeMillis());




/**
 * [tFixedFlowInput_20 end ] stop
 */

	
	/**
	 * [tBufferOutput_7 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_7";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row66");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_7", true);
end_Hash.put("tBufferOutput_7", System.currentTimeMillis());




/**
 * [tBufferOutput_7 end ] stop
 */

	
	/**
	 * [tDie_7 end ] start
	 */

	

	
	
	currentComponent="tDie_7";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row66_0");
			  	}
			  	
 

ok_Hash.put("tDie_7", true);
end_Hash.put("tDie_7", System.currentTimeMillis());




/**
 * [tDie_7 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_20 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_20";
	
	

 



/**
 * [tFixedFlowInput_20 finally ] stop
 */

	
	/**
	 * [tBufferOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_7";
	
	

 



/**
 * [tBufferOutput_7 finally ] stop
 */

	
	/**
	 * [tDie_7 finally ] start
	 */

	

	
	
	currentComponent="tDie_7";
	
	

 



/**
 * [tDie_7 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_20_SUBPROCESS_STATE", 1);
	}
	


public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer REGISTROS;

				public Integer getREGISTROS () {
					return this.REGISTROS;
				}

				public Boolean REGISTROSIsNullable(){
				    return true;
				}
				public Boolean REGISTROSIsKey(){
				    return false;
				}
				public Integer REGISTROSLength(){
				    return 0;
				}
				public Integer REGISTROSPrecision(){
				    return 0;
				}
				public String REGISTROSDefault(){
				
					return "";
				
				}
				public String REGISTROSComment(){
				
				    return "";
				
				}
				public String REGISTROSPattern(){
				
					return "";
				
				}
				public String REGISTROSOriginalDbColumnName(){
				
					return "REGISTROS";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.REGISTROS = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.REGISTROS = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.REGISTROS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.REGISTROS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("REGISTROS="+String.valueOf(REGISTROS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row32Struct row32 = new row32Struct();




	
	/**
	 * [tJavaRow_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_16", false);
		start_Hash.put("tJavaRow_16", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_16";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tJavaRow_16 = 0;
		

int nb_line_tJavaRow_16 = 0;

 



/**
 * [tJavaRow_16 begin ] stop
 */



	
	/**
	 * [tOracleInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_9", false);
		start_Hash.put("tOracleInput_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_9";
	
	
		int tos_count_tOracleInput_9 = 0;
		
	


	
		    int nb_line_tOracleInput_9 = 0;
		    java.sql.Connection conn_tOracleInput_9 = null;
				conn_tOracleInput_9 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_9 = false;
				boolean isConnectionWrapped_tOracleInput_9 = !(conn_tOracleInput_9 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_9.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_9 = null;
                if (isConnectionWrapped_tOracleInput_9) {
					unwrappedOraConn_tOracleInput_9 = conn_tOracleInput_9.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_9 != null) {
                        isTimeZoneNull_tOracleInput_9 = (unwrappedOraConn_tOracleInput_9.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_9 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_9).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_9) {
					java.sql.Statement stmtGetTZ_tOracleInput_9 = conn_tOracleInput_9.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_9 = stmtGetTZ_tOracleInput_9.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_9 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_9.next()) {
						sessionTimezone_tOracleInput_9 = rsGetTZ_tOracleInput_9.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_9 && unwrappedOraConn_tOracleInput_9 != null) {
                        unwrappedOraConn_tOracleInput_9.setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_9).setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_9 = conn_tOracleInput_9.createStatement();

		    String dbquery_tOracleInput_9 = "select count(1) registros\n  from afi_archivos aa\n   inner join afi_tarchivos at on (aa.tarchivos_id = at.id)\n  where"
+" at.codigo = 7\n    and aa.estado = 2\n    and aa.extension = 'txt'\n    and aa.id = 	" + context.afiarchivos_id;
		    

		    globalMap.put("tOracleInput_9_QUERY",dbquery_tOracleInput_9);

		    java.sql.ResultSet rs_tOracleInput_9 = null;

		    try {
		    	rs_tOracleInput_9 = stmt_tOracleInput_9.executeQuery(dbquery_tOracleInput_9);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_9 = rs_tOracleInput_9.getMetaData();
		    	int colQtyInRs_tOracleInput_9 = rsmd_tOracleInput_9.getColumnCount();

		    String tmpContent_tOracleInput_9 = null;
		    
		    
		    while (rs_tOracleInput_9.next()) {
		        nb_line_tOracleInput_9++;
		        
							if(colQtyInRs_tOracleInput_9 < 1) {
								row32.REGISTROS = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(1) != null) {
						row32.REGISTROS = rs_tOracleInput_9.getInt(1);
					} else {
				
						row32.REGISTROS = null;
					}
		                    }
					




 



/**
 * [tOracleInput_9 begin ] stop
 */
	
	/**
	 * [tOracleInput_9 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 


	tos_count_tOracleInput_9++;

/**
 * [tOracleInput_9 main ] stop
 */
	
	/**
	 * [tOracleInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_16 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_16";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row32"
						
						);
					}
					

    //Code generate according to input schema and output schema

//Code generate according to input schema and output schema
context.cregistros = 0;
context.cantidad_archivos = row32.REGISTROS;
context.vtarchivos_id = 7;
context.vfinicio = TalendDate.getCurrentDate();

    nb_line_tJavaRow_16++;   

 


	tos_count_tJavaRow_16++;

/**
 * [tJavaRow_16 main ] stop
 */
	
	/**
	 * [tJavaRow_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_16";
	
	

 



/**
 * [tJavaRow_16 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_16";
	
	

 



/**
 * [tJavaRow_16 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_9 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

}
}finally{
	if (rs_tOracleInput_9 != null) {
		rs_tOracleInput_9.close();
	}
	if (stmt_tOracleInput_9 != null) {
		stmt_tOracleInput_9.close();
	}
}

globalMap.put("tOracleInput_9_NB_LINE",nb_line_tOracleInput_9);
 

ok_Hash.put("tOracleInput_9", true);
end_Hash.put("tOracleInput_9", System.currentTimeMillis());




/**
 * [tOracleInput_9 end ] stop
 */

	
	/**
	 * [tJavaRow_16 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_16";
	
	

globalMap.put("tJavaRow_16_NB_LINE",nb_line_tJavaRow_16);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tJavaRow_16", true);
end_Hash.put("tJavaRow_16", System.currentTimeMillis());

   			if (context.cantidad_archivos > 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If4", 0, "true");
					}
				tFixedFlowInput_23Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If4", 0, "false");
					}   	 
   				}
   			if (context.cantidad_archivos == 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				tFixedFlowInput_11Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_16 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 finally ] stop
 */

	
	/**
	 * [tJavaRow_16 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_16";
	
	

 



/**
 * [tJavaRow_16 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row79Struct implements routines.system.IPersistableRow<row79Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer archivos_id_;

				public Integer getArchivos_id_ () {
					return this.archivos_id_;
				}

				public Boolean archivos_id_IsNullable(){
				    return true;
				}
				public Boolean archivos_id_IsKey(){
				    return false;
				}
				public Integer archivos_id_Length(){
				    return null;
				}
				public Integer archivos_id_Precision(){
				    return null;
				}
				public String archivos_id_Default(){
				
					return null;
				
				}
				public String archivos_id_Comment(){
				
				    return "";
				
				}
				public String archivos_id_Pattern(){
				
					return "";
				
				}
				public String archivos_id_OriginalDbColumnName(){
				
					return "archivos_id_";
				
				}

				
			    public Integer estado_;

				public Integer getEstado_ () {
					return this.estado_;
				}

				public Boolean estado_IsNullable(){
				    return true;
				}
				public Boolean estado_IsKey(){
				    return false;
				}
				public Integer estado_Length(){
				    return null;
				}
				public Integer estado_Precision(){
				    return null;
				}
				public String estado_Default(){
				
					return null;
				
				}
				public String estado_Comment(){
				
				    return "";
				
				}
				public String estado_Pattern(){
				
					return "";
				
				}
				public String estado_OriginalDbColumnName(){
				
					return "estado_";
				
				}

				
			    public java.util.Date finicio_;

				public java.util.Date getFinicio_ () {
					return this.finicio_;
				}

				public Boolean finicio_IsNullable(){
				    return true;
				}
				public Boolean finicio_IsKey(){
				    return false;
				}
				public Integer finicio_Length(){
				    return null;
				}
				public Integer finicio_Precision(){
				    return null;
				}
				public String finicio_Default(){
				
					return null;
				
				}
				public String finicio_Comment(){
				
				    return "";
				
				}
				public String finicio_Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String finicio_OriginalDbColumnName(){
				
					return "finicio_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("archivos_id_="+String.valueOf(archivos_id_));
		sb.append(",estado_="+String.valueOf(estado_));
		sb.append(",finicio_="+String.valueOf(finicio_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row79Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_23Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_23_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row79Struct row79 = new row79Struct();




	
	/**
	 * [tOracleSP_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_12", false);
		start_Hash.put("tOracleSP_12", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row79");
					}
				
		int tos_count_tOracleSP_12 = 0;
		

	java.sql.Connection connection_tOracleSP_12 = null;
	connection_tOracleSP_12 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_2");
	

java.sql.CallableStatement statement_tOracleSP_12 = connection_tOracleSP_12.prepareCall("{call " + "cms2.updestadoarchivo" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_12;
String tmpString_tOracleSP_12;

 



/**
 * [tOracleSP_12 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_23", false);
		start_Hash.put("tFixedFlowInput_23", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_23";
	
	
		int tos_count_tFixedFlowInput_23 = 0;
		

	    for (int i_tFixedFlowInput_23 = 0 ; i_tFixedFlowInput_23 < 1 ; i_tFixedFlowInput_23++) {
	                	            	
    	            		row79.archivos_id_ = context.afiarchivos_id;
    	            	        	            	
    	            		row79.estado_ = 5;
    	            	        	            	
    	            		row79.finicio_ = context.vfinicio;
    	            	

 



/**
 * [tFixedFlowInput_23 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_23 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_23";
	
	

 


	tos_count_tFixedFlowInput_23++;

/**
 * [tFixedFlowInput_23 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_23";
	
	

 



/**
 * [tFixedFlowInput_23 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_12 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row79"
						
						);
					}
					

			// code for the argument 1 (archivos_id_) of type 'IN AUTOMAPPING'
    					if (row79.archivos_id_ == null) {
    						statement_tOracleSP_12.setNull(1, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_12.setInt(1, row79.archivos_id_);
    					}
    					
			// code for the argument 2 (estado_) of type 'IN AUTOMAPPING'
    					if (row79.estado_ == null) {
    						statement_tOracleSP_12.setNull(2, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_12.setInt(2, row79.estado_);
    					}
    					
			// code for the argument 3 (finicio_) of type 'IN TIMESTAMP'
    					if (row79.finicio_ == null) {
    						statement_tOracleSP_12.setNull(3, java.sql.Types.DATE);
    					} else {
    					
    					statement_tOracleSP_12.setTimestamp(3, new java.sql.Timestamp(row79.finicio_.getTime()));
    					
    					}
    					
		statement_tOracleSP_12.execute();
		

 


	tos_count_tOracleSP_12++;

/**
 * [tOracleSP_12 main ] stop
 */
	
	/**
	 * [tOracleSP_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_12";
	
	

 



/**
 * [tOracleSP_12 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_12";
	
	

 



/**
 * [tOracleSP_12 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_23";
	
	

 



/**
 * [tFixedFlowInput_23 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_23 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_23";
	
	

        }
        globalMap.put("tFixedFlowInput_23_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_23", true);
end_Hash.put("tFixedFlowInput_23", System.currentTimeMillis());




/**
 * [tFixedFlowInput_23 end ] stop
 */

	
	/**
	 * [tOracleSP_12 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_12";
	
	


	statement_tOracleSP_12.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row79");
			  	}
			  	
 

ok_Hash.put("tOracleSP_12", true);
end_Hash.put("tOracleSP_12", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tOracleRow_1Process(globalMap);



/**
 * [tOracleSP_12 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_23 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_23";
	
	

 



/**
 * [tFixedFlowInput_23 finally ] stop
 */

	
	/**
	 * [tOracleSP_12 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_12";
	
	

 



/**
 * [tOracleSP_12 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_23_SUBPROCESS_STATE", 1);
	}
	


public void tOracleRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_1", false);
		start_Hash.put("tOracleRow_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_1";
	
	
		int tos_count_tOracleRow_1 = 0;
		

	java.sql.Connection conn_tOracleRow_1 = null;
	String query_tOracleRow_1 = "";
	boolean whetherReject_tOracleRow_1 = false;
	int count_tOracleRow_1 = 0;
				conn_tOracleRow_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
			
        resourceMap.put("conn_tOracleRow_1", conn_tOracleRow_1);
        java.sql.Statement stmt_tOracleRow_1 = conn_tOracleRow_1.createStatement();
        resourceMap.put("stmt_tOracleRow_1", stmt_tOracleRow_1);

 



/**
 * [tOracleRow_1 begin ] stop
 */
	
	/**
	 * [tOracleRow_1 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

query_tOracleRow_1 = "truncate table tst_archivo";
whetherReject_tOracleRow_1 = false;
globalMap.put("tOracleRow_1_QUERY",query_tOracleRow_1);
try {
		stmt_tOracleRow_1.execute(query_tOracleRow_1);
		
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_1_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tOracleRow_1) {
		
	}
	

 


	tos_count_tOracleRow_1++;

/**
 * [tOracleRow_1 main ] stop
 */
	
	/**
	 * [tOracleRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

 



/**
 * [tOracleRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

 



/**
 * [tOracleRow_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleRow_1 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

	globalMap.put("tOracleRow_1_NB_LINE", count_tOracleRow_1);
        stmt_tOracleRow_1.close();
        resourceMap.remove("stmt_tOracleRow_1");
    resourceMap.put("statementClosed_tOracleRow_1", true);
    resourceMap.put("finish_tOracleRow_1", true);

 

ok_Hash.put("tOracleRow_1", true);
end_Hash.put("tOracleRow_1", System.currentTimeMillis());




/**
 * [tOracleRow_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleRow_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tOracleInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleRow_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

    if (resourceMap.get("statementClosed_tOracleRow_1") == null) {
            java.sql.Statement stmtToClose_tOracleRow_1 = null;
            if ((stmtToClose_tOracleRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_1")) != null) {
                stmtToClose_tOracleRow_1.close();
            }
    }
 



/**
 * [tOracleRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleRow_1_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String ARCHIVO;

				public String getARCHIVO () {
					return this.ARCHIVO;
				}

				public Boolean ARCHIVOIsNullable(){
				    return false;
				}
				public Boolean ARCHIVOIsKey(){
				    return false;
				}
				public Integer ARCHIVOLength(){
				    return 100;
				}
				public Integer ARCHIVOPrecision(){
				    return 0;
				}
				public String ARCHIVODefault(){
				
					return null;
				
				}
				public String ARCHIVOComment(){
				
				    return "";
				
				}
				public String ARCHIVOPattern(){
				
					return "";
				
				}
				public String ARCHIVOOriginalDbColumnName(){
				
					return "ARCHIVO";
				
				}

				
			    public String EXTENSION;

				public String getEXTENSION () {
					return this.EXTENSION;
				}

				public Boolean EXTENSIONIsNullable(){
				    return true;
				}
				public Boolean EXTENSIONIsKey(){
				    return false;
				}
				public Integer EXTENSIONLength(){
				    return 5;
				}
				public Integer EXTENSIONPrecision(){
				    return 0;
				}
				public String EXTENSIONDefault(){
				
					return null;
				
				}
				public String EXTENSIONComment(){
				
				    return "";
				
				}
				public String EXTENSIONPattern(){
				
					return "";
				
				}
				public String EXTENSIONOriginalDbColumnName(){
				
					return "EXTENSION";
				
				}

				
			    public Object CONTENIDO;

				public Object getCONTENIDO () {
					return this.CONTENIDO;
				}

				public Boolean CONTENIDOIsNullable(){
				    return true;
				}
				public Boolean CONTENIDOIsKey(){
				    return false;
				}
				public Integer CONTENIDOLength(){
				    return null;
				}
				public Integer CONTENIDOPrecision(){
				    return 0;
				}
				public String CONTENIDODefault(){
				
					return "";
				
				}
				public String CONTENIDOComment(){
				
				    return "";
				
				}
				public String CONTENIDOPattern(){
				
					return "";
				
				}
				public String CONTENIDOOriginalDbColumnName(){
				
					return "CONTENIDO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.ARCHIVO = readString(dis);
					
					this.EXTENSION = readString(dis);
					
						this.CONTENIDO = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.ARCHIVO = readString(dis);
					
					this.EXTENSION = readString(dis);
					
						this.CONTENIDO = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// Object
				
       			    	dos.writeObject(this.CONTENIDO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// String
				
						writeString(this.EXTENSION,dos);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTENIDO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ARCHIVO="+ARCHIVO);
		sb.append(",EXTENSION="+EXTENSION);
		sb.append(",CONTENIDO="+String.valueOf(CONTENIDO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
                if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_1 != null) {
                        isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
                        unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement();

		    String dbquery_tOracleInput_1 = "select archivo, extension, contenido\nfrom afi_archivos aa\ninner join afi_tarchivos at on (aa.tarchivos_id = at.id)\nw"
+"here at.codigo = 7\nand aa.extension = 'txt'\nand aa.estado = 6\nand aa.id =" + context.afiarchivos_id;
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row1.ARCHIVO = null;
							} else {
	                         		
        	row1.ARCHIVO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row1.EXTENSION = null;
							} else {
	                         		
        	row1.EXTENSION = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 3) {
								row1.CONTENIDO = null;
							} else {
		                          
				Object tmpObj_3_tOracleInput_1 = rs_tOracleInput_1.getObject(3);
				if(tmpObj_3_tOracleInput_1 != null) {
					row1.CONTENIDO = tmpObj_3_tOracleInput_1;
				} else {
						row1.CONTENIDO = null;
				}
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

    //Code generate according to input schema and output schema
/*output_row.ARCHIVO = row1.ARCHIVO;
output_row.EXTENSION = row1.EXTENSION;
output_row.CONTENIDO = row1.CONTENIDO;*/
context.contenido = ((java.sql.Blob)row1.CONTENIDO).getBinaryStream();

    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

   			if (context.contenido == null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If21", 0, "true");
					}
				tFixedFlowInput_16Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If21", 0, "false");
					}   	 
   				}
   			if (context.contenido != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tFileInputDelimited_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tOracleRow_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row59Struct implements routines.system.IPersistableRow<row59Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer archivos_id_;

				public Integer getArchivos_id_ () {
					return this.archivos_id_;
				}

				public Boolean archivos_id_IsNullable(){
				    return true;
				}
				public Boolean archivos_id_IsKey(){
				    return false;
				}
				public Integer archivos_id_Length(){
				    return null;
				}
				public Integer archivos_id_Precision(){
				    return null;
				}
				public String archivos_id_Default(){
				
					return null;
				
				}
				public String archivos_id_Comment(){
				
				    return "";
				
				}
				public String archivos_id_Pattern(){
				
					return "";
				
				}
				public String archivos_id_OriginalDbColumnName(){
				
					return "archivos_id_";
				
				}

				
			    public Integer estado_;

				public Integer getEstado_ () {
					return this.estado_;
				}

				public Boolean estado_IsNullable(){
				    return true;
				}
				public Boolean estado_IsKey(){
				    return false;
				}
				public Integer estado_Length(){
				    return null;
				}
				public Integer estado_Precision(){
				    return null;
				}
				public String estado_Default(){
				
					return null;
				
				}
				public String estado_Comment(){
				
				    return "";
				
				}
				public String estado_Pattern(){
				
					return "";
				
				}
				public String estado_OriginalDbColumnName(){
				
					return "estado_";
				
				}

				
			    public java.util.Date finicio_;

				public java.util.Date getFinicio_ () {
					return this.finicio_;
				}

				public Boolean finicio_IsNullable(){
				    return true;
				}
				public Boolean finicio_IsKey(){
				    return false;
				}
				public Integer finicio_Length(){
				    return null;
				}
				public Integer finicio_Precision(){
				    return null;
				}
				public String finicio_Default(){
				
					return null;
				
				}
				public String finicio_Comment(){
				
				    return "";
				
				}
				public String finicio_Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String finicio_OriginalDbColumnName(){
				
					return "finicio_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("archivos_id_="+String.valueOf(archivos_id_));
		sb.append(",estado_="+String.valueOf(estado_));
		sb.append(",finicio_="+String.valueOf(finicio_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row59Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row59Struct row59 = new row59Struct();




	
	/**
	 * [tOracleSP_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_9", false);
		start_Hash.put("tOracleSP_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row59");
					}
				
		int tos_count_tOracleSP_9 = 0;
		

	java.sql.Connection connection_tOracleSP_9 = null;
	connection_tOracleSP_9 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_2");
	

java.sql.CallableStatement statement_tOracleSP_9 = connection_tOracleSP_9.prepareCall("{call " + "cms2.updestadoarchivo" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_9;
String tmpString_tOracleSP_9;

 



/**
 * [tOracleSP_9 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_16", false);
		start_Hash.put("tFixedFlowInput_16", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_16";
	
	
		int tos_count_tFixedFlowInput_16 = 0;
		

	    for (int i_tFixedFlowInput_16 = 0 ; i_tFixedFlowInput_16 < 1 ; i_tFixedFlowInput_16++) {
	                	            	
    	            		row59.archivos_id_ = context.afiarchivos_id;
    	            	        	            	
    	            		row59.estado_ = 7;
    	            	        	            	
    	            		row59.finicio_ = context.vfinicio;
    	            	

 



/**
 * [tFixedFlowInput_16 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_16 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_16";
	
	

 


	tos_count_tFixedFlowInput_16++;

/**
 * [tFixedFlowInput_16 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_16";
	
	

 



/**
 * [tFixedFlowInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_9 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row59"
						
						);
					}
					

			// code for the argument 1 (archivos_id_) of type 'IN AUTOMAPPING'
    					if (row59.archivos_id_ == null) {
    						statement_tOracleSP_9.setNull(1, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_9.setInt(1, row59.archivos_id_);
    					}
    					
			// code for the argument 2 (estado_) of type 'IN AUTOMAPPING'
    					if (row59.estado_ == null) {
    						statement_tOracleSP_9.setNull(2, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_9.setInt(2, row59.estado_);
    					}
    					
			// code for the argument 3 (finicio_) of type 'IN TIMESTAMP'
    					if (row59.finicio_ == null) {
    						statement_tOracleSP_9.setNull(3, java.sql.Types.DATE);
    					} else {
    					
    					statement_tOracleSP_9.setTimestamp(3, new java.sql.Timestamp(row59.finicio_.getTime()));
    					
    					}
    					
		statement_tOracleSP_9.execute();
		

 


	tos_count_tOracleSP_9++;

/**
 * [tOracleSP_9 main ] stop
 */
	
	/**
	 * [tOracleSP_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_9";
	
	

 



/**
 * [tOracleSP_9 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_9";
	
	

 



/**
 * [tOracleSP_9 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_16";
	
	

 



/**
 * [tFixedFlowInput_16 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_16 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_16";
	
	

        }
        globalMap.put("tFixedFlowInput_16_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_16", true);
end_Hash.put("tFixedFlowInput_16", System.currentTimeMillis());




/**
 * [tFixedFlowInput_16 end ] stop
 */

	
	/**
	 * [tOracleSP_9 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_9";
	
	


	statement_tOracleSP_9.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row59");
			  	}
			  	
 

ok_Hash.put("tOracleSP_9", true);
end_Hash.put("tOracleSP_9", System.currentTimeMillis());

   			if (context.contenido == null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If23", 0, "true");
					}
				tFixedFlowInput_17Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If23", 0, "false");
					}   	 
   				}



/**
 * [tOracleSP_9 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_16 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_16";
	
	

 



/**
 * [tFixedFlowInput_16 finally ] stop
 */

	
	/**
	 * [tOracleSP_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_9";
	
	

 



/**
 * [tOracleSP_9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_16_SUBPROCESS_STATE", 1);
	}
	


public static class row61Struct implements routines.system.IPersistableRow<row61Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String respuesta;

				public String getRespuesta () {
					return this.respuesta;
				}

				public Boolean respuestaIsNullable(){
				    return true;
				}
				public Boolean respuestaIsKey(){
				    return false;
				}
				public Integer respuestaLength(){
				    return null;
				}
				public Integer respuestaPrecision(){
				    return null;
				}
				public String respuestaDefault(){
				
					return null;
				
				}
				public String respuestaComment(){
				
				    return "";
				
				}
				public String respuestaPattern(){
				
					return "";
				
				}
				public String respuestaOriginalDbColumnName(){
				
					return "respuesta";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("respuesta="+respuesta);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row61Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row60Struct implements routines.system.IPersistableRow<row60Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String respuesta;

				public String getRespuesta () {
					return this.respuesta;
				}

				public Boolean respuestaIsNullable(){
				    return true;
				}
				public Boolean respuestaIsKey(){
				    return false;
				}
				public Integer respuestaLength(){
				    return null;
				}
				public Integer respuestaPrecision(){
				    return null;
				}
				public String respuestaDefault(){
				
					return null;
				
				}
				public String respuestaComment(){
				
				    return "";
				
				}
				public String respuestaPattern(){
				
					return "";
				
				}
				public String respuestaOriginalDbColumnName(){
				
					return "respuesta";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("respuesta="+respuesta);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row60Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row60Struct row60 = new row60Struct();
row60Struct row61 = row60;





	
	/**
	 * [tDie_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_4", false);
		start_Hash.put("tDie_4", System.currentTimeMillis());
		
	
	currentComponent="tDie_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row61");
					}
				
		int tos_count_tDie_4 = 0;
		

 



/**
 * [tDie_4 begin ] stop
 */



	
	/**
	 * [tBufferOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_4", false);
		start_Hash.put("tBufferOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row60");
					}
				
		int tos_count_tBufferOutput_4 = 0;
		

 



/**
 * [tBufferOutput_4 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_17", false);
		start_Hash.put("tFixedFlowInput_17", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_17";
	
	
		int tos_count_tFixedFlowInput_17 = 0;
		

	    for (int i_tFixedFlowInput_17 = 0 ; i_tFixedFlowInput_17 < 1 ; i_tFixedFlowInput_17++) {
	                	            	
    	            		row60.respuesta = "ERROR: El archivo se encuentra vacío";
    	            	

 



/**
 * [tFixedFlowInput_17 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_17 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_17";
	
	

 


	tos_count_tFixedFlowInput_17++;

/**
 * [tFixedFlowInput_17 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_17";
	
	

 



/**
 * [tFixedFlowInput_17 process_data_begin ] stop
 */

	
	/**
	 * [tBufferOutput_4 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row60"
						
						);
					}
					



String[] row_tBufferOutput_4=new String[]{"",};		
	    if(row60.respuesta != null){
	        
	            row_tBufferOutput_4[0] = row60.respuesta;
	                        			    
	    }else{
	    	row_tBufferOutput_4[0] = null;
	    }
	globalBuffer.add(row_tBufferOutput_4);	
	
 
     row61 = row60;


	tos_count_tBufferOutput_4++;

/**
 * [tBufferOutput_4 main ] stop
 */
	
	/**
	 * [tBufferOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_4";
	
	

 



/**
 * [tBufferOutput_4 process_data_begin ] stop
 */

	
	/**
	 * [tDie_4 main ] start
	 */

	

	
	
	currentComponent="tDie_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row61"
						
						);
					}
					

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_4", 5, "ERROR: El archivo se encuentra vacío", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_4_DIE_PRIORITY", 5);
	System.err.println("ERROR: El archivo se encuentra vacío");
	
	globalMap.put("tDie_4_DIE_MESSAGE", "ERROR: El archivo se encuentra vacío");
	globalMap.put("tDie_4_DIE_MESSAGES", "ERROR: El archivo se encuentra vacío");
	
	} catch (Exception | Error e_tDie_4) {
	    globalMap.put("tDie_4_ERROR_MESSAGE",e_tDie_4.getMessage());
		logIgnoredError(String.format("tDie_4 - tDie failed to log message due to internal error: %s", e_tDie_4), e_tDie_4);
	}
	
	currentComponent = "tDie_4";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_4_DIE_CODE", errorCode);        

    
	if(true){	
		TDieException e_tDie_4 = new TDieException();

		

		throw e_tDie_4;
	}

 


	tos_count_tDie_4++;

/**
 * [tDie_4 main ] stop
 */
	
	/**
	 * [tDie_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_4";
	
	

 



/**
 * [tDie_4 process_data_begin ] stop
 */
	
	/**
	 * [tDie_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_4";
	
	

 



/**
 * [tDie_4 process_data_end ] stop
 */



	
	/**
	 * [tBufferOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_4";
	
	

 



/**
 * [tBufferOutput_4 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_17";
	
	

 



/**
 * [tFixedFlowInput_17 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_17 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_17";
	
	

        }
        globalMap.put("tFixedFlowInput_17_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_17", true);
end_Hash.put("tFixedFlowInput_17", System.currentTimeMillis());




/**
 * [tFixedFlowInput_17 end ] stop
 */

	
	/**
	 * [tBufferOutput_4 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_4";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row60");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_4", true);
end_Hash.put("tBufferOutput_4", System.currentTimeMillis());




/**
 * [tBufferOutput_4 end ] stop
 */

	
	/**
	 * [tDie_4 end ] start
	 */

	

	
	
	currentComponent="tDie_4";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row61");
			  	}
			  	
 

ok_Hash.put("tDie_4", true);
end_Hash.put("tDie_4", System.currentTimeMillis());




/**
 * [tDie_4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_17 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_17";
	
	

 



/**
 * [tFixedFlowInput_17 finally ] stop
 */

	
	/**
	 * [tBufferOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_4";
	
	

 



/**
 * [tBufferOutput_4 finally ] stop
 */

	
	/**
	 * [tDie_4 finally ] start
	 */

	

	
	
	currentComponent="tDie_4";
	
	

 



/**
 * [tDie_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_17_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return null;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return null;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return null;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return null;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return null;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return null;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return null;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return null;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String TIPO_DE_DOCUMENTO;

				public String getTIPO_DE_DOCUMENTO () {
					return this.TIPO_DE_DOCUMENTO;
				}

				public Boolean TIPO_DE_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPO_DE_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DE_DOCUMENTOLength(){
				    return null;
				}
				public Integer TIPO_DE_DOCUMENTOPrecision(){
				    return null;
				}
				public String TIPO_DE_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DE_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DE_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DE_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DE_DOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String SEXO;

				public String getSEXO () {
					return this.SEXO;
				}

				public Boolean SEXOIsNullable(){
				    return true;
				}
				public Boolean SEXOIsKey(){
				    return false;
				}
				public Integer SEXOLength(){
				    return null;
				}
				public Integer SEXOPrecision(){
				    return null;
				}
				public String SEXODefault(){
				
					return null;
				
				}
				public String SEXOComment(){
				
				    return "";
				
				}
				public String SEXOPattern(){
				
					return "";
				
				}
				public String SEXOOriginalDbColumnName(){
				
					return "SEXO";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return null;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return null;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String ESTADO_CIVIL;

				public String getESTADO_CIVIL () {
					return this.ESTADO_CIVIL;
				}

				public Boolean ESTADO_CIVILIsNullable(){
				    return true;
				}
				public Boolean ESTADO_CIVILIsKey(){
				    return false;
				}
				public Integer ESTADO_CIVILLength(){
				    return null;
				}
				public Integer ESTADO_CIVILPrecision(){
				    return null;
				}
				public String ESTADO_CIVILDefault(){
				
					return null;
				
				}
				public String ESTADO_CIVILComment(){
				
				    return "";
				
				}
				public String ESTADO_CIVILPattern(){
				
					return "";
				
				}
				public String ESTADO_CIVILOriginalDbColumnName(){
				
					return "ESTADO_CIVIL";
				
				}

				
			    public String DISCAPACIDAD;

				public String getDISCAPACIDAD () {
					return this.DISCAPACIDAD;
				}

				public Boolean DISCAPACIDADIsNullable(){
				    return true;
				}
				public Boolean DISCAPACIDADIsKey(){
				    return false;
				}
				public Integer DISCAPACIDADLength(){
				    return null;
				}
				public Integer DISCAPACIDADPrecision(){
				    return null;
				}
				public String DISCAPACIDADDefault(){
				
					return null;
				
				}
				public String DISCAPACIDADComment(){
				
				    return "";
				
				}
				public String DISCAPACIDADPattern(){
				
					return "";
				
				}
				public String DISCAPACIDADOriginalDbColumnName(){
				
					return "DISCAPACIDAD";
				
				}

				
			    public String DIRECCION;

				public String getDIRECCION () {
					return this.DIRECCION;
				}

				public Boolean DIRECCIONIsNullable(){
				    return true;
				}
				public Boolean DIRECCIONIsKey(){
				    return false;
				}
				public Integer DIRECCIONLength(){
				    return null;
				}
				public Integer DIRECCIONPrecision(){
				    return null;
				}
				public String DIRECCIONDefault(){
				
					return null;
				
				}
				public String DIRECCIONComment(){
				
				    return "";
				
				}
				public String DIRECCIONPattern(){
				
					return "";
				
				}
				public String DIRECCIONOriginalDbColumnName(){
				
					return "DIRECCION";
				
				}

				
			    public String TELEFONO;

				public String getTELEFONO () {
					return this.TELEFONO;
				}

				public Boolean TELEFONOIsNullable(){
				    return true;
				}
				public Boolean TELEFONOIsKey(){
				    return false;
				}
				public Integer TELEFONOLength(){
				    return null;
				}
				public Integer TELEFONOPrecision(){
				    return null;
				}
				public String TELEFONODefault(){
				
					return null;
				
				}
				public String TELEFONOComment(){
				
				    return "";
				
				}
				public String TELEFONOPattern(){
				
					return "";
				
				}
				public String TELEFONOOriginalDbColumnName(){
				
					return "TELEFONO";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return null;
				}
				public Integer CELULARPrecision(){
				    return null;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public String CORREO_ELECTRONICO;

				public String getCORREO_ELECTRONICO () {
					return this.CORREO_ELECTRONICO;
				}

				public Boolean CORREO_ELECTRONICOIsNullable(){
				    return true;
				}
				public Boolean CORREO_ELECTRONICOIsKey(){
				    return false;
				}
				public Integer CORREO_ELECTRONICOLength(){
				    return null;
				}
				public Integer CORREO_ELECTRONICOPrecision(){
				    return null;
				}
				public String CORREO_ELECTRONICODefault(){
				
					return null;
				
				}
				public String CORREO_ELECTRONICOComment(){
				
				    return "";
				
				}
				public String CORREO_ELECTRONICOPattern(){
				
					return "";
				
				}
				public String CORREO_ELECTRONICOOriginalDbColumnName(){
				
					return "CORREO_ELECTRONICO";
				
				}

				
			    public String ZRESIDENCIA;

				public String getZRESIDENCIA () {
					return this.ZRESIDENCIA;
				}

				public Boolean ZRESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean ZRESIDENCIAIsKey(){
				    return false;
				}
				public Integer ZRESIDENCIALength(){
				    return null;
				}
				public Integer ZRESIDENCIAPrecision(){
				    return null;
				}
				public String ZRESIDENCIADefault(){
				
					return null;
				
				}
				public String ZRESIDENCIAComment(){
				
				    return "";
				
				}
				public String ZRESIDENCIAPattern(){
				
					return "";
				
				}
				public String ZRESIDENCIAOriginalDbColumnName(){
				
					return "ZRESIDENCIA";
				
				}

				
			    public String PAIS_NACIMIENTO;

				public String getPAIS_NACIMIENTO () {
					return this.PAIS_NACIMIENTO;
				}

				public Boolean PAIS_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean PAIS_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer PAIS_NACIMIENTOLength(){
				    return null;
				}
				public Integer PAIS_NACIMIENTOPrecision(){
				    return null;
				}
				public String PAIS_NACIMIENTODefault(){
				
					return null;
				
				}
				public String PAIS_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String PAIS_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String PAIS_NACIMIENTOOriginalDbColumnName(){
				
					return "PAIS_NACIMIENTO";
				
				}

				
			    public String DEPARTAMENTO_NACIMIENTO;

				public String getDEPARTAMENTO_NACIMIENTO () {
					return this.DEPARTAMENTO_NACIMIENTO;
				}

				public Boolean DEPARTAMENTO_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean DEPARTAMENTO_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer DEPARTAMENTO_NACIMIENTOLength(){
				    return null;
				}
				public Integer DEPARTAMENTO_NACIMIENTOPrecision(){
				    return null;
				}
				public String DEPARTAMENTO_NACIMIENTODefault(){
				
					return null;
				
				}
				public String DEPARTAMENTO_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String DEPARTAMENTO_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String DEPARTAMENTO_NACIMIENTOOriginalDbColumnName(){
				
					return "DEPARTAMENTO_NACIMIENTO";
				
				}

				
			    public String MUNICIPIO_NACIMIENTO;

				public String getMUNICIPIO_NACIMIENTO () {
					return this.MUNICIPIO_NACIMIENTO;
				}

				public Boolean MUNICIPIO_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIO_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer MUNICIPIO_NACIMIENTOLength(){
				    return null;
				}
				public Integer MUNICIPIO_NACIMIENTOPrecision(){
				    return null;
				}
				public String MUNICIPIO_NACIMIENTODefault(){
				
					return null;
				
				}
				public String MUNICIPIO_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String MUNICIPIO_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String MUNICIPIO_NACIMIENTOOriginalDbColumnName(){
				
					return "MUNICIPIO_NACIMIENTO";
				
				}

				
			    public String PAIS_EXP_DOCUMENTO;

				public String getPAIS_EXP_DOCUMENTO () {
					return this.PAIS_EXP_DOCUMENTO;
				}

				public Boolean PAIS_EXP_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean PAIS_EXP_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer PAIS_EXP_DOCUMENTOLength(){
				    return null;
				}
				public Integer PAIS_EXP_DOCUMENTOPrecision(){
				    return null;
				}
				public String PAIS_EXP_DOCUMENTODefault(){
				
					return null;
				
				}
				public String PAIS_EXP_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String PAIS_EXP_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String PAIS_EXP_DOCUMENTOOriginalDbColumnName(){
				
					return "PAIS_EXP_DOCUMENTO";
				
				}

				
			    public String DEPTO_EXP_DOCUMENTO;

				public String getDEPTO_EXP_DOCUMENTO () {
					return this.DEPTO_EXP_DOCUMENTO;
				}

				public Boolean DEPTO_EXP_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DEPTO_EXP_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DEPTO_EXP_DOCUMENTOLength(){
				    return null;
				}
				public Integer DEPTO_EXP_DOCUMENTOPrecision(){
				    return null;
				}
				public String DEPTO_EXP_DOCUMENTODefault(){
				
					return null;
				
				}
				public String DEPTO_EXP_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DEPTO_EXP_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DEPTO_EXP_DOCUMENTOOriginalDbColumnName(){
				
					return "DEPTO_EXP_DOCUMENTO";
				
				}

				
			    public String MUNICIPIO_EXP_DOCUMENTO;

				public String getMUNICIPIO_EXP_DOCUMENTO () {
					return this.MUNICIPIO_EXP_DOCUMENTO;
				}

				public Boolean MUNICIPIO_EXP_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIO_EXP_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer MUNICIPIO_EXP_DOCUMENTOLength(){
				    return null;
				}
				public Integer MUNICIPIO_EXP_DOCUMENTOPrecision(){
				    return null;
				}
				public String MUNICIPIO_EXP_DOCUMENTODefault(){
				
					return null;
				
				}
				public String MUNICIPIO_EXP_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String MUNICIPIO_EXP_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String MUNICIPIO_EXP_DOCUMENTOOriginalDbColumnName(){
				
					return "MUNICIPIO_EXP_DOCUMENTO";
				
				}

				
			    public String FECHA_EXPEDICION_DOCUMENTO;

				public String getFECHA_EXPEDICION_DOCUMENTO () {
					return this.FECHA_EXPEDICION_DOCUMENTO;
				}

				public Boolean FECHA_EXPEDICION_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_EXPEDICION_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOLength(){
				    return null;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOPrecision(){
				    return null;
				}
				public String FECHA_EXPEDICION_DOCUMENTODefault(){
				
					return null;
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOOriginalDbColumnName(){
				
					return "FECHA_EXPEDICION_DOCUMENTO";
				
				}

				
			    public String PAIS_RESIDENCIA;

				public String getPAIS_RESIDENCIA () {
					return this.PAIS_RESIDENCIA;
				}

				public Boolean PAIS_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean PAIS_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer PAIS_RESIDENCIALength(){
				    return null;
				}
				public Integer PAIS_RESIDENCIAPrecision(){
				    return null;
				}
				public String PAIS_RESIDENCIADefault(){
				
					return null;
				
				}
				public String PAIS_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String PAIS_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String PAIS_RESIDENCIAOriginalDbColumnName(){
				
					return "PAIS_RESIDENCIA";
				
				}

				
			    public String DEPARTAMENTO_RESIDENCIA;

				public String getDEPARTAMENTO_RESIDENCIA () {
					return this.DEPARTAMENTO_RESIDENCIA;
				}

				public Boolean DEPARTAMENTO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean DEPARTAMENTO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer DEPARTAMENTO_RESIDENCIALength(){
				    return null;
				}
				public Integer DEPARTAMENTO_RESIDENCIAPrecision(){
				    return null;
				}
				public String DEPARTAMENTO_RESIDENCIADefault(){
				
					return null;
				
				}
				public String DEPARTAMENTO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String DEPARTAMENTO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String DEPARTAMENTO_RESIDENCIAOriginalDbColumnName(){
				
					return "DEPARTAMENTO_RESIDENCIA";
				
				}

				
			    public String MUNICIPIO_RESIDENCIA;

				public String getMUNICIPIO_RESIDENCIA () {
					return this.MUNICIPIO_RESIDENCIA;
				}

				public Boolean MUNICIPIO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer MUNICIPIO_RESIDENCIALength(){
				    return null;
				}
				public Integer MUNICIPIO_RESIDENCIAPrecision(){
				    return null;
				}
				public String MUNICIPIO_RESIDENCIADefault(){
				
					return null;
				
				}
				public String MUNICIPIO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String MUNICIPIO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String MUNICIPIO_RESIDENCIAOriginalDbColumnName(){
				
					return "MUNICIPIO_RESIDENCIA";
				
				}

				
			    public String LOCALIDAD_RESIDENCIA;

				public String getLOCALIDAD_RESIDENCIA () {
					return this.LOCALIDAD_RESIDENCIA;
				}

				public Boolean LOCALIDAD_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean LOCALIDAD_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer LOCALIDAD_RESIDENCIALength(){
				    return null;
				}
				public Integer LOCALIDAD_RESIDENCIAPrecision(){
				    return null;
				}
				public String LOCALIDAD_RESIDENCIADefault(){
				
					return null;
				
				}
				public String LOCALIDAD_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String LOCALIDAD_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String LOCALIDAD_RESIDENCIAOriginalDbColumnName(){
				
					return "LOCALIDAD_RESIDENCIA";
				
				}

				
			    public String GRUPO_SANGUINEO;

				public String getGRUPO_SANGUINEO () {
					return this.GRUPO_SANGUINEO;
				}

				public Boolean GRUPO_SANGUINEOIsNullable(){
				    return true;
				}
				public Boolean GRUPO_SANGUINEOIsKey(){
				    return false;
				}
				public Integer GRUPO_SANGUINEOLength(){
				    return null;
				}
				public Integer GRUPO_SANGUINEOPrecision(){
				    return null;
				}
				public String GRUPO_SANGUINEODefault(){
				
					return null;
				
				}
				public String GRUPO_SANGUINEOComment(){
				
				    return "";
				
				}
				public String GRUPO_SANGUINEOPattern(){
				
					return "";
				
				}
				public String GRUPO_SANGUINEOOriginalDbColumnName(){
				
					return "GRUPO_SANGUINEO";
				
				}

				
			    public String ESTATURA;

				public String getESTATURA () {
					return this.ESTATURA;
				}

				public Boolean ESTATURAIsNullable(){
				    return true;
				}
				public Boolean ESTATURAIsKey(){
				    return false;
				}
				public Integer ESTATURALength(){
				    return null;
				}
				public Integer ESTATURAPrecision(){
				    return null;
				}
				public String ESTATURADefault(){
				
					return null;
				
				}
				public String ESTATURAComment(){
				
				    return "";
				
				}
				public String ESTATURAPattern(){
				
					return "";
				
				}
				public String ESTATURAOriginalDbColumnName(){
				
					return "ESTATURA";
				
				}

				
			    public String OCUPACION;

				public String getOCUPACION () {
					return this.OCUPACION;
				}

				public Boolean OCUPACIONIsNullable(){
				    return true;
				}
				public Boolean OCUPACIONIsKey(){
				    return false;
				}
				public Integer OCUPACIONLength(){
				    return null;
				}
				public Integer OCUPACIONPrecision(){
				    return null;
				}
				public String OCUPACIONDefault(){
				
					return null;
				
				}
				public String OCUPACIONComment(){
				
				    return "";
				
				}
				public String OCUPACIONPattern(){
				
					return "";
				
				}
				public String OCUPACIONOriginalDbColumnName(){
				
					return "OCUPACION";
				
				}

				
			    public String FACTOR_RH;

				public String getFACTOR_RH () {
					return this.FACTOR_RH;
				}

				public Boolean FACTOR_RHIsNullable(){
				    return true;
				}
				public Boolean FACTOR_RHIsKey(){
				    return false;
				}
				public Integer FACTOR_RHLength(){
				    return null;
				}
				public Integer FACTOR_RHPrecision(){
				    return null;
				}
				public String FACTOR_RHDefault(){
				
					return null;
				
				}
				public String FACTOR_RHComment(){
				
				    return "";
				
				}
				public String FACTOR_RHPattern(){
				
					return "";
				
				}
				public String FACTOR_RHOriginalDbColumnName(){
				
					return "FACTOR_RH";
				
				}

				
			    public String GRUPO_ETNICO;

				public String getGRUPO_ETNICO () {
					return this.GRUPO_ETNICO;
				}

				public Boolean GRUPO_ETNICOIsNullable(){
				    return true;
				}
				public Boolean GRUPO_ETNICOIsKey(){
				    return false;
				}
				public Integer GRUPO_ETNICOLength(){
				    return null;
				}
				public Integer GRUPO_ETNICOPrecision(){
				    return null;
				}
				public String GRUPO_ETNICODefault(){
				
					return null;
				
				}
				public String GRUPO_ETNICOComment(){
				
				    return "";
				
				}
				public String GRUPO_ETNICOPattern(){
				
					return "";
				
				}
				public String GRUPO_ETNICOOriginalDbColumnName(){
				
					return "GRUPO_ETNICO";
				
				}

				
			    public String NSOCIOECONOMICO;

				public String getNSOCIOECONOMICO () {
					return this.NSOCIOECONOMICO;
				}

				public Boolean NSOCIOECONOMICOIsNullable(){
				    return true;
				}
				public Boolean NSOCIOECONOMICOIsKey(){
				    return false;
				}
				public Integer NSOCIOECONOMICOLength(){
				    return null;
				}
				public Integer NSOCIOECONOMICOPrecision(){
				    return null;
				}
				public String NSOCIOECONOMICODefault(){
				
					return null;
				
				}
				public String NSOCIOECONOMICOComment(){
				
				    return "";
				
				}
				public String NSOCIOECONOMICOPattern(){
				
					return "";
				
				}
				public String NSOCIOECONOMICOOriginalDbColumnName(){
				
					return "NSOCIOECONOMICO";
				
				}

				
			    public String TVIVIENDA;

				public String getTVIVIENDA () {
					return this.TVIVIENDA;
				}

				public Boolean TVIVIENDAIsNullable(){
				    return true;
				}
				public Boolean TVIVIENDAIsKey(){
				    return false;
				}
				public Integer TVIVIENDALength(){
				    return null;
				}
				public Integer TVIVIENDAPrecision(){
				    return null;
				}
				public String TVIVIENDADefault(){
				
					return null;
				
				}
				public String TVIVIENDAComment(){
				
				    return "";
				
				}
				public String TVIVIENDAPattern(){
				
					return "";
				
				}
				public String TVIVIENDAOriginalDbColumnName(){
				
					return "TVIVIENDA";
				
				}

				
			    public String NEDUCATIVOS;

				public String getNEDUCATIVOS () {
					return this.NEDUCATIVOS;
				}

				public Boolean NEDUCATIVOSIsNullable(){
				    return true;
				}
				public Boolean NEDUCATIVOSIsKey(){
				    return false;
				}
				public Integer NEDUCATIVOSLength(){
				    return null;
				}
				public Integer NEDUCATIVOSPrecision(){
				    return null;
				}
				public String NEDUCATIVOSDefault(){
				
					return null;
				
				}
				public String NEDUCATIVOSComment(){
				
				    return "";
				
				}
				public String NEDUCATIVOSPattern(){
				
					return "";
				
				}
				public String NEDUCATIVOSOriginalDbColumnName(){
				
					return "NEDUCATIVOS";
				
				}

				
			    public String CODIGO_ESTABLECIMIENTO;

				public String getCODIGO_ESTABLECIMIENTO () {
					return this.CODIGO_ESTABLECIMIENTO;
				}

				public Boolean CODIGO_ESTABLECIMIENTOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ESTABLECIMIENTOIsKey(){
				    return false;
				}
				public Integer CODIGO_ESTABLECIMIENTOLength(){
				    return null;
				}
				public Integer CODIGO_ESTABLECIMIENTOPrecision(){
				    return null;
				}
				public String CODIGO_ESTABLECIMIENTODefault(){
				
					return null;
				
				}
				public String CODIGO_ESTABLECIMIENTOComment(){
				
				    return "";
				
				}
				public String CODIGO_ESTABLECIMIENTOPattern(){
				
					return "";
				
				}
				public String CODIGO_ESTABLECIMIENTOOriginalDbColumnName(){
				
					return "CODIGO_ESTABLECIMIENTO";
				
				}

				
			    public String ESTABLECIMIENTO_ADSCRITO;

				public String getESTABLECIMIENTO_ADSCRITO () {
					return this.ESTABLECIMIENTO_ADSCRITO;
				}

				public Boolean ESTABLECIMIENTO_ADSCRITOIsNullable(){
				    return true;
				}
				public Boolean ESTABLECIMIENTO_ADSCRITOIsKey(){
				    return false;
				}
				public Integer ESTABLECIMIENTO_ADSCRITOLength(){
				    return null;
				}
				public Integer ESTABLECIMIENTO_ADSCRITOPrecision(){
				    return null;
				}
				public String ESTABLECIMIENTO_ADSCRITODefault(){
				
					return null;
				
				}
				public String ESTABLECIMIENTO_ADSCRITOComment(){
				
				    return "";
				
				}
				public String ESTABLECIMIENTO_ADSCRITOPattern(){
				
					return "";
				
				}
				public String ESTABLECIMIENTO_ADSCRITOOriginalDbColumnName(){
				
					return "ESTABLECIMIENTO_ADSCRITO";
				
				}

				
			    public String FECHA_DE_INGRESO;

				public String getFECHA_DE_INGRESO () {
					return this.FECHA_DE_INGRESO;
				}

				public Boolean FECHA_DE_INGRESOIsNullable(){
				    return true;
				}
				public Boolean FECHA_DE_INGRESOIsKey(){
				    return false;
				}
				public Integer FECHA_DE_INGRESOLength(){
				    return null;
				}
				public Integer FECHA_DE_INGRESOPrecision(){
				    return null;
				}
				public String FECHA_DE_INGRESODefault(){
				
					return null;
				
				}
				public String FECHA_DE_INGRESOComment(){
				
				    return "";
				
				}
				public String FECHA_DE_INGRESOPattern(){
				
					return "";
				
				}
				public String FECHA_DE_INGRESOOriginalDbColumnName(){
				
					return "FECHA_DE_INGRESO";
				
				}

				
			    public String ENTIDAD_APORTANTE;

				public String getENTIDAD_APORTANTE () {
					return this.ENTIDAD_APORTANTE;
				}

				public Boolean ENTIDAD_APORTANTEIsNullable(){
				    return true;
				}
				public Boolean ENTIDAD_APORTANTEIsKey(){
				    return false;
				}
				public Integer ENTIDAD_APORTANTELength(){
				    return null;
				}
				public Integer ENTIDAD_APORTANTEPrecision(){
				    return null;
				}
				public String ENTIDAD_APORTANTEDefault(){
				
					return null;
				
				}
				public String ENTIDAD_APORTANTEComment(){
				
				    return "";
				
				}
				public String ENTIDAD_APORTANTEPattern(){
				
					return "";
				
				}
				public String ENTIDAD_APORTANTEOriginalDbColumnName(){
				
					return "ENTIDAD_APORTANTE";
				
				}

				
			    public String CODIGO_GRDMILITAR;

				public String getCODIGO_GRDMILITAR () {
					return this.CODIGO_GRDMILITAR;
				}

				public Boolean CODIGO_GRDMILITARIsNullable(){
				    return true;
				}
				public Boolean CODIGO_GRDMILITARIsKey(){
				    return false;
				}
				public Integer CODIGO_GRDMILITARLength(){
				    return null;
				}
				public Integer CODIGO_GRDMILITARPrecision(){
				    return null;
				}
				public String CODIGO_GRDMILITARDefault(){
				
					return null;
				
				}
				public String CODIGO_GRDMILITARComment(){
				
				    return "";
				
				}
				public String CODIGO_GRDMILITARPattern(){
				
					return "";
				
				}
				public String CODIGO_GRDMILITAROriginalDbColumnName(){
				
					return "CODIGO_GRDMILITAR";
				
				}

				
			    public String SIGLA_GRDMILITAR;

				public String getSIGLA_GRDMILITAR () {
					return this.SIGLA_GRDMILITAR;
				}

				public Boolean SIGLA_GRDMILITARIsNullable(){
				    return true;
				}
				public Boolean SIGLA_GRDMILITARIsKey(){
				    return false;
				}
				public Integer SIGLA_GRDMILITARLength(){
				    return null;
				}
				public Integer SIGLA_GRDMILITARPrecision(){
				    return null;
				}
				public String SIGLA_GRDMILITARDefault(){
				
					return null;
				
				}
				public String SIGLA_GRDMILITARComment(){
				
				    return "";
				
				}
				public String SIGLA_GRDMILITARPattern(){
				
					return "";
				
				}
				public String SIGLA_GRDMILITAROriginalDbColumnName(){
				
					return "SIGLA_GRDMILITAR";
				
				}

				
			    public String FUERZA_MILITAR;

				public String getFUERZA_MILITAR () {
					return this.FUERZA_MILITAR;
				}

				public Boolean FUERZA_MILITARIsNullable(){
				    return true;
				}
				public Boolean FUERZA_MILITARIsKey(){
				    return false;
				}
				public Integer FUERZA_MILITARLength(){
				    return null;
				}
				public Integer FUERZA_MILITARPrecision(){
				    return null;
				}
				public String FUERZA_MILITARDefault(){
				
					return null;
				
				}
				public String FUERZA_MILITARComment(){
				
				    return "";
				
				}
				public String FUERZA_MILITARPattern(){
				
					return "";
				
				}
				public String FUERZA_MILITAROriginalDbColumnName(){
				
					return "FUERZA_MILITAR";
				
				}

				
			    public String CODIGO_UMILITAR;

				public String getCODIGO_UMILITAR () {
					return this.CODIGO_UMILITAR;
				}

				public Boolean CODIGO_UMILITARIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UMILITARIsKey(){
				    return false;
				}
				public Integer CODIGO_UMILITARLength(){
				    return null;
				}
				public Integer CODIGO_UMILITARPrecision(){
				    return null;
				}
				public String CODIGO_UMILITARDefault(){
				
					return null;
				
				}
				public String CODIGO_UMILITARComment(){
				
				    return "";
				
				}
				public String CODIGO_UMILITARPattern(){
				
					return "";
				
				}
				public String CODIGO_UMILITAROriginalDbColumnName(){
				
					return "CODIGO_UMILITAR";
				
				}

				
			    public String UNIDAD_MILITAR;

				public String getUNIDAD_MILITAR () {
					return this.UNIDAD_MILITAR;
				}

				public Boolean UNIDAD_MILITARIsNullable(){
				    return true;
				}
				public Boolean UNIDAD_MILITARIsKey(){
				    return false;
				}
				public Integer UNIDAD_MILITARLength(){
				    return null;
				}
				public Integer UNIDAD_MILITARPrecision(){
				    return null;
				}
				public String UNIDAD_MILITARDefault(){
				
					return null;
				
				}
				public String UNIDAD_MILITARComment(){
				
				    return "";
				
				}
				public String UNIDAD_MILITARPattern(){
				
					return "";
				
				}
				public String UNIDAD_MILITAROriginalDbColumnName(){
				
					return "UNIDAD_MILITAR";
				
				}

				
			    public String TIPO_DE_VINCULACION;

				public String getTIPO_DE_VINCULACION () {
					return this.TIPO_DE_VINCULACION;
				}

				public Boolean TIPO_DE_VINCULACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_DE_VINCULACIONIsKey(){
				    return false;
				}
				public Integer TIPO_DE_VINCULACIONLength(){
				    return null;
				}
				public Integer TIPO_DE_VINCULACIONPrecision(){
				    return null;
				}
				public String TIPO_DE_VINCULACIONDefault(){
				
					return null;
				
				}
				public String TIPO_DE_VINCULACIONComment(){
				
				    return "";
				
				}
				public String TIPO_DE_VINCULACIONPattern(){
				
					return "";
				
				}
				public String TIPO_DE_VINCULACIONOriginalDbColumnName(){
				
					return "TIPO_DE_VINCULACION";
				
				}

				
			    public String ESTADO_AFILIACION;

				public String getESTADO_AFILIACION () {
					return this.ESTADO_AFILIACION;
				}

				public Boolean ESTADO_AFILIACIONIsNullable(){
				    return true;
				}
				public Boolean ESTADO_AFILIACIONIsKey(){
				    return false;
				}
				public Integer ESTADO_AFILIACIONLength(){
				    return null;
				}
				public Integer ESTADO_AFILIACIONPrecision(){
				    return null;
				}
				public String ESTADO_AFILIACIONDefault(){
				
					return null;
				
				}
				public String ESTADO_AFILIACIONComment(){
				
				    return "";
				
				}
				public String ESTADO_AFILIACIONPattern(){
				
					return "";
				
				}
				public String ESTADO_AFILIACIONOriginalDbColumnName(){
				
					return "ESTADO_AFILIACION";
				
				}

				
			    public String MOTIVO_ESTADO;

				public String getMOTIVO_ESTADO () {
					return this.MOTIVO_ESTADO;
				}

				public Boolean MOTIVO_ESTADOIsNullable(){
				    return true;
				}
				public Boolean MOTIVO_ESTADOIsKey(){
				    return false;
				}
				public Integer MOTIVO_ESTADOLength(){
				    return null;
				}
				public Integer MOTIVO_ESTADOPrecision(){
				    return null;
				}
				public String MOTIVO_ESTADODefault(){
				
					return null;
				
				}
				public String MOTIVO_ESTADOComment(){
				
				    return "";
				
				}
				public String MOTIVO_ESTADOPattern(){
				
					return "";
				
				}
				public String MOTIVO_ESTADOOriginalDbColumnName(){
				
					return "MOTIVO_ESTADO";
				
				}

				
			    public String FECHA_ESTADO;

				public String getFECHA_ESTADO () {
					return this.FECHA_ESTADO;
				}

				public Boolean FECHA_ESTADOIsNullable(){
				    return true;
				}
				public Boolean FECHA_ESTADOIsKey(){
				    return false;
				}
				public Integer FECHA_ESTADOLength(){
				    return null;
				}
				public Integer FECHA_ESTADOPrecision(){
				    return null;
				}
				public String FECHA_ESTADODefault(){
				
					return null;
				
				}
				public String FECHA_ESTADOComment(){
				
				    return "";
				
				}
				public String FECHA_ESTADOPattern(){
				
					return "";
				
				}
				public String FECHA_ESTADOOriginalDbColumnName(){
				
					return "FECHA_ESTADO";
				
				}

				
			    public String FECHA_FIN_AFILIACION;

				public String getFECHA_FIN_AFILIACION () {
					return this.FECHA_FIN_AFILIACION;
				}

				public Boolean FECHA_FIN_AFILIACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_FIN_AFILIACIONIsKey(){
				    return false;
				}
				public Integer FECHA_FIN_AFILIACIONLength(){
				    return null;
				}
				public Integer FECHA_FIN_AFILIACIONPrecision(){
				    return null;
				}
				public String FECHA_FIN_AFILIACIONDefault(){
				
					return null;
				
				}
				public String FECHA_FIN_AFILIACIONComment(){
				
				    return "";
				
				}
				public String FECHA_FIN_AFILIACIONPattern(){
				
					return "";
				
				}
				public String FECHA_FIN_AFILIACIONOriginalDbColumnName(){
				
					return "FECHA_FIN_AFILIACION";
				
				}

				
			    public String FECHA_VINCULACION;

				public String getFECHA_VINCULACION () {
					return this.FECHA_VINCULACION;
				}

				public Boolean FECHA_VINCULACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_VINCULACIONIsKey(){
				    return false;
				}
				public Integer FECHA_VINCULACIONLength(){
				    return null;
				}
				public Integer FECHA_VINCULACIONPrecision(){
				    return null;
				}
				public String FECHA_VINCULACIONDefault(){
				
					return null;
				
				}
				public String FECHA_VINCULACIONComment(){
				
				    return "";
				
				}
				public String FECHA_VINCULACIONPattern(){
				
					return "";
				
				}
				public String FECHA_VINCULACIONOriginalDbColumnName(){
				
					return "FECHA_VINCULACION";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.TIPO_DE_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.SEXO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.ESTADO_CIVIL = readString(dis);
					
					this.DISCAPACIDAD = readString(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.CORREO_ELECTRONICO = readString(dis);
					
					this.ZRESIDENCIA = readString(dis);
					
					this.PAIS_NACIMIENTO = readString(dis);
					
					this.DEPARTAMENTO_NACIMIENTO = readString(dis);
					
					this.MUNICIPIO_NACIMIENTO = readString(dis);
					
					this.PAIS_EXP_DOCUMENTO = readString(dis);
					
					this.DEPTO_EXP_DOCUMENTO = readString(dis);
					
					this.MUNICIPIO_EXP_DOCUMENTO = readString(dis);
					
					this.FECHA_EXPEDICION_DOCUMENTO = readString(dis);
					
					this.PAIS_RESIDENCIA = readString(dis);
					
					this.DEPARTAMENTO_RESIDENCIA = readString(dis);
					
					this.MUNICIPIO_RESIDENCIA = readString(dis);
					
					this.LOCALIDAD_RESIDENCIA = readString(dis);
					
					this.GRUPO_SANGUINEO = readString(dis);
					
					this.ESTATURA = readString(dis);
					
					this.OCUPACION = readString(dis);
					
					this.FACTOR_RH = readString(dis);
					
					this.GRUPO_ETNICO = readString(dis);
					
					this.NSOCIOECONOMICO = readString(dis);
					
					this.TVIVIENDA = readString(dis);
					
					this.NEDUCATIVOS = readString(dis);
					
					this.CODIGO_ESTABLECIMIENTO = readString(dis);
					
					this.ESTABLECIMIENTO_ADSCRITO = readString(dis);
					
					this.FECHA_DE_INGRESO = readString(dis);
					
					this.ENTIDAD_APORTANTE = readString(dis);
					
					this.CODIGO_GRDMILITAR = readString(dis);
					
					this.SIGLA_GRDMILITAR = readString(dis);
					
					this.FUERZA_MILITAR = readString(dis);
					
					this.CODIGO_UMILITAR = readString(dis);
					
					this.UNIDAD_MILITAR = readString(dis);
					
					this.TIPO_DE_VINCULACION = readString(dis);
					
					this.ESTADO_AFILIACION = readString(dis);
					
					this.MOTIVO_ESTADO = readString(dis);
					
					this.FECHA_ESTADO = readString(dis);
					
					this.FECHA_FIN_AFILIACION = readString(dis);
					
					this.FECHA_VINCULACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.TIPO_DE_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.SEXO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.ESTADO_CIVIL = readString(dis);
					
					this.DISCAPACIDAD = readString(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.CORREO_ELECTRONICO = readString(dis);
					
					this.ZRESIDENCIA = readString(dis);
					
					this.PAIS_NACIMIENTO = readString(dis);
					
					this.DEPARTAMENTO_NACIMIENTO = readString(dis);
					
					this.MUNICIPIO_NACIMIENTO = readString(dis);
					
					this.PAIS_EXP_DOCUMENTO = readString(dis);
					
					this.DEPTO_EXP_DOCUMENTO = readString(dis);
					
					this.MUNICIPIO_EXP_DOCUMENTO = readString(dis);
					
					this.FECHA_EXPEDICION_DOCUMENTO = readString(dis);
					
					this.PAIS_RESIDENCIA = readString(dis);
					
					this.DEPARTAMENTO_RESIDENCIA = readString(dis);
					
					this.MUNICIPIO_RESIDENCIA = readString(dis);
					
					this.LOCALIDAD_RESIDENCIA = readString(dis);
					
					this.GRUPO_SANGUINEO = readString(dis);
					
					this.ESTATURA = readString(dis);
					
					this.OCUPACION = readString(dis);
					
					this.FACTOR_RH = readString(dis);
					
					this.GRUPO_ETNICO = readString(dis);
					
					this.NSOCIOECONOMICO = readString(dis);
					
					this.TVIVIENDA = readString(dis);
					
					this.NEDUCATIVOS = readString(dis);
					
					this.CODIGO_ESTABLECIMIENTO = readString(dis);
					
					this.ESTABLECIMIENTO_ADSCRITO = readString(dis);
					
					this.FECHA_DE_INGRESO = readString(dis);
					
					this.ENTIDAD_APORTANTE = readString(dis);
					
					this.CODIGO_GRDMILITAR = readString(dis);
					
					this.SIGLA_GRDMILITAR = readString(dis);
					
					this.FUERZA_MILITAR = readString(dis);
					
					this.CODIGO_UMILITAR = readString(dis);
					
					this.UNIDAD_MILITAR = readString(dis);
					
					this.TIPO_DE_VINCULACION = readString(dis);
					
					this.ESTADO_AFILIACION = readString(dis);
					
					this.MOTIVO_ESTADO = readString(dis);
					
					this.FECHA_ESTADO = readString(dis);
					
					this.FECHA_FIN_AFILIACION = readString(dis);
					
					this.FECHA_VINCULACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.TIPO_DE_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.ESTADO_CIVIL,dos);
					
					// String
				
						writeString(this.DISCAPACIDAD,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO,dos);
					
					// String
				
						writeString(this.ZRESIDENCIA,dos);
					
					// String
				
						writeString(this.PAIS_NACIMIENTO,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.PAIS_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DEPTO_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// String
				
						writeString(this.PAIS_RESIDENCIA,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MUNICIPIO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.LOCALIDAD_RESIDENCIA,dos);
					
					// String
				
						writeString(this.GRUPO_SANGUINEO,dos);
					
					// String
				
						writeString(this.ESTATURA,dos);
					
					// String
				
						writeString(this.OCUPACION,dos);
					
					// String
				
						writeString(this.FACTOR_RH,dos);
					
					// String
				
						writeString(this.GRUPO_ETNICO,dos);
					
					// String
				
						writeString(this.NSOCIOECONOMICO,dos);
					
					// String
				
						writeString(this.TVIVIENDA,dos);
					
					// String
				
						writeString(this.NEDUCATIVOS,dos);
					
					// String
				
						writeString(this.CODIGO_ESTABLECIMIENTO,dos);
					
					// String
				
						writeString(this.ESTABLECIMIENTO_ADSCRITO,dos);
					
					// String
				
						writeString(this.FECHA_DE_INGRESO,dos);
					
					// String
				
						writeString(this.ENTIDAD_APORTANTE,dos);
					
					// String
				
						writeString(this.CODIGO_GRDMILITAR,dos);
					
					// String
				
						writeString(this.SIGLA_GRDMILITAR,dos);
					
					// String
				
						writeString(this.FUERZA_MILITAR,dos);
					
					// String
				
						writeString(this.CODIGO_UMILITAR,dos);
					
					// String
				
						writeString(this.UNIDAD_MILITAR,dos);
					
					// String
				
						writeString(this.TIPO_DE_VINCULACION,dos);
					
					// String
				
						writeString(this.ESTADO_AFILIACION,dos);
					
					// String
				
						writeString(this.MOTIVO_ESTADO,dos);
					
					// String
				
						writeString(this.FECHA_ESTADO,dos);
					
					// String
				
						writeString(this.FECHA_FIN_AFILIACION,dos);
					
					// String
				
						writeString(this.FECHA_VINCULACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.TIPO_DE_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.ESTADO_CIVIL,dos);
					
					// String
				
						writeString(this.DISCAPACIDAD,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO,dos);
					
					// String
				
						writeString(this.ZRESIDENCIA,dos);
					
					// String
				
						writeString(this.PAIS_NACIMIENTO,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.PAIS_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DEPTO_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// String
				
						writeString(this.PAIS_RESIDENCIA,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MUNICIPIO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.LOCALIDAD_RESIDENCIA,dos);
					
					// String
				
						writeString(this.GRUPO_SANGUINEO,dos);
					
					// String
				
						writeString(this.ESTATURA,dos);
					
					// String
				
						writeString(this.OCUPACION,dos);
					
					// String
				
						writeString(this.FACTOR_RH,dos);
					
					// String
				
						writeString(this.GRUPO_ETNICO,dos);
					
					// String
				
						writeString(this.NSOCIOECONOMICO,dos);
					
					// String
				
						writeString(this.TVIVIENDA,dos);
					
					// String
				
						writeString(this.NEDUCATIVOS,dos);
					
					// String
				
						writeString(this.CODIGO_ESTABLECIMIENTO,dos);
					
					// String
				
						writeString(this.ESTABLECIMIENTO_ADSCRITO,dos);
					
					// String
				
						writeString(this.FECHA_DE_INGRESO,dos);
					
					// String
				
						writeString(this.ENTIDAD_APORTANTE,dos);
					
					// String
				
						writeString(this.CODIGO_GRDMILITAR,dos);
					
					// String
				
						writeString(this.SIGLA_GRDMILITAR,dos);
					
					// String
				
						writeString(this.FUERZA_MILITAR,dos);
					
					// String
				
						writeString(this.CODIGO_UMILITAR,dos);
					
					// String
				
						writeString(this.UNIDAD_MILITAR,dos);
					
					// String
				
						writeString(this.TIPO_DE_VINCULACION,dos);
					
					// String
				
						writeString(this.ESTADO_AFILIACION,dos);
					
					// String
				
						writeString(this.MOTIVO_ESTADO,dos);
					
					// String
				
						writeString(this.FECHA_ESTADO,dos);
					
					// String
				
						writeString(this.FECHA_FIN_AFILIACION,dos);
					
					// String
				
						writeString(this.FECHA_VINCULACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",TIPO_DE_DOCUMENTO="+TIPO_DE_DOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",SEXO="+SEXO);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",ESTADO_CIVIL="+ESTADO_CIVIL);
		sb.append(",DISCAPACIDAD="+DISCAPACIDAD);
		sb.append(",DIRECCION="+DIRECCION);
		sb.append(",TELEFONO="+TELEFONO);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",CORREO_ELECTRONICO="+CORREO_ELECTRONICO);
		sb.append(",ZRESIDENCIA="+ZRESIDENCIA);
		sb.append(",PAIS_NACIMIENTO="+PAIS_NACIMIENTO);
		sb.append(",DEPARTAMENTO_NACIMIENTO="+DEPARTAMENTO_NACIMIENTO);
		sb.append(",MUNICIPIO_NACIMIENTO="+MUNICIPIO_NACIMIENTO);
		sb.append(",PAIS_EXP_DOCUMENTO="+PAIS_EXP_DOCUMENTO);
		sb.append(",DEPTO_EXP_DOCUMENTO="+DEPTO_EXP_DOCUMENTO);
		sb.append(",MUNICIPIO_EXP_DOCUMENTO="+MUNICIPIO_EXP_DOCUMENTO);
		sb.append(",FECHA_EXPEDICION_DOCUMENTO="+FECHA_EXPEDICION_DOCUMENTO);
		sb.append(",PAIS_RESIDENCIA="+PAIS_RESIDENCIA);
		sb.append(",DEPARTAMENTO_RESIDENCIA="+DEPARTAMENTO_RESIDENCIA);
		sb.append(",MUNICIPIO_RESIDENCIA="+MUNICIPIO_RESIDENCIA);
		sb.append(",LOCALIDAD_RESIDENCIA="+LOCALIDAD_RESIDENCIA);
		sb.append(",GRUPO_SANGUINEO="+GRUPO_SANGUINEO);
		sb.append(",ESTATURA="+ESTATURA);
		sb.append(",OCUPACION="+OCUPACION);
		sb.append(",FACTOR_RH="+FACTOR_RH);
		sb.append(",GRUPO_ETNICO="+GRUPO_ETNICO);
		sb.append(",NSOCIOECONOMICO="+NSOCIOECONOMICO);
		sb.append(",TVIVIENDA="+TVIVIENDA);
		sb.append(",NEDUCATIVOS="+NEDUCATIVOS);
		sb.append(",CODIGO_ESTABLECIMIENTO="+CODIGO_ESTABLECIMIENTO);
		sb.append(",ESTABLECIMIENTO_ADSCRITO="+ESTABLECIMIENTO_ADSCRITO);
		sb.append(",FECHA_DE_INGRESO="+FECHA_DE_INGRESO);
		sb.append(",ENTIDAD_APORTANTE="+ENTIDAD_APORTANTE);
		sb.append(",CODIGO_GRDMILITAR="+CODIGO_GRDMILITAR);
		sb.append(",SIGLA_GRDMILITAR="+SIGLA_GRDMILITAR);
		sb.append(",FUERZA_MILITAR="+FUERZA_MILITAR);
		sb.append(",CODIGO_UMILITAR="+CODIGO_UMILITAR);
		sb.append(",UNIDAD_MILITAR="+UNIDAD_MILITAR);
		sb.append(",TIPO_DE_VINCULACION="+TIPO_DE_VINCULACION);
		sb.append(",ESTADO_AFILIACION="+ESTADO_AFILIACION);
		sb.append(",MOTIVO_ESTADO="+MOTIVO_ESTADO);
		sb.append(",FECHA_ESTADO="+FECHA_ESTADO);
		sb.append(",FECHA_FIN_AFILIACION="+FECHA_FIN_AFILIACION);
		sb.append(",FECHA_VINCULACION="+FECHA_VINCULACION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class crgInicialStruct implements routines.system.IPersistableRow<crgInicialStruct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return null;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return null;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return null;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return null;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return null;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return null;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return null;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return null;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String TIPO_DE_DOCUMENTO;

				public String getTIPO_DE_DOCUMENTO () {
					return this.TIPO_DE_DOCUMENTO;
				}

				public Boolean TIPO_DE_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPO_DE_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DE_DOCUMENTOLength(){
				    return null;
				}
				public Integer TIPO_DE_DOCUMENTOPrecision(){
				    return null;
				}
				public String TIPO_DE_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DE_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DE_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DE_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DE_DOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String SEXO;

				public String getSEXO () {
					return this.SEXO;
				}

				public Boolean SEXOIsNullable(){
				    return true;
				}
				public Boolean SEXOIsKey(){
				    return false;
				}
				public Integer SEXOLength(){
				    return null;
				}
				public Integer SEXOPrecision(){
				    return null;
				}
				public String SEXODefault(){
				
					return null;
				
				}
				public String SEXOComment(){
				
				    return "";
				
				}
				public String SEXOPattern(){
				
					return "";
				
				}
				public String SEXOOriginalDbColumnName(){
				
					return "SEXO";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return null;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return null;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String ESTADO_CIVIL;

				public String getESTADO_CIVIL () {
					return this.ESTADO_CIVIL;
				}

				public Boolean ESTADO_CIVILIsNullable(){
				    return true;
				}
				public Boolean ESTADO_CIVILIsKey(){
				    return false;
				}
				public Integer ESTADO_CIVILLength(){
				    return null;
				}
				public Integer ESTADO_CIVILPrecision(){
				    return null;
				}
				public String ESTADO_CIVILDefault(){
				
					return null;
				
				}
				public String ESTADO_CIVILComment(){
				
				    return "";
				
				}
				public String ESTADO_CIVILPattern(){
				
					return "";
				
				}
				public String ESTADO_CIVILOriginalDbColumnName(){
				
					return "ESTADO_CIVIL";
				
				}

				
			    public String DISCAPACIDAD;

				public String getDISCAPACIDAD () {
					return this.DISCAPACIDAD;
				}

				public Boolean DISCAPACIDADIsNullable(){
				    return true;
				}
				public Boolean DISCAPACIDADIsKey(){
				    return false;
				}
				public Integer DISCAPACIDADLength(){
				    return null;
				}
				public Integer DISCAPACIDADPrecision(){
				    return null;
				}
				public String DISCAPACIDADDefault(){
				
					return null;
				
				}
				public String DISCAPACIDADComment(){
				
				    return "";
				
				}
				public String DISCAPACIDADPattern(){
				
					return "";
				
				}
				public String DISCAPACIDADOriginalDbColumnName(){
				
					return "DISCAPACIDAD";
				
				}

				
			    public String DIRECCION;

				public String getDIRECCION () {
					return this.DIRECCION;
				}

				public Boolean DIRECCIONIsNullable(){
				    return true;
				}
				public Boolean DIRECCIONIsKey(){
				    return false;
				}
				public Integer DIRECCIONLength(){
				    return null;
				}
				public Integer DIRECCIONPrecision(){
				    return null;
				}
				public String DIRECCIONDefault(){
				
					return null;
				
				}
				public String DIRECCIONComment(){
				
				    return "";
				
				}
				public String DIRECCIONPattern(){
				
					return "";
				
				}
				public String DIRECCIONOriginalDbColumnName(){
				
					return "DIRECCION";
				
				}

				
			    public String TELEFONO;

				public String getTELEFONO () {
					return this.TELEFONO;
				}

				public Boolean TELEFONOIsNullable(){
				    return true;
				}
				public Boolean TELEFONOIsKey(){
				    return false;
				}
				public Integer TELEFONOLength(){
				    return null;
				}
				public Integer TELEFONOPrecision(){
				    return null;
				}
				public String TELEFONODefault(){
				
					return null;
				
				}
				public String TELEFONOComment(){
				
				    return "";
				
				}
				public String TELEFONOPattern(){
				
					return "";
				
				}
				public String TELEFONOOriginalDbColumnName(){
				
					return "TELEFONO";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return null;
				}
				public Integer CELULARPrecision(){
				    return null;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public String CORREO_ELECTRONICO;

				public String getCORREO_ELECTRONICO () {
					return this.CORREO_ELECTRONICO;
				}

				public Boolean CORREO_ELECTRONICOIsNullable(){
				    return true;
				}
				public Boolean CORREO_ELECTRONICOIsKey(){
				    return false;
				}
				public Integer CORREO_ELECTRONICOLength(){
				    return null;
				}
				public Integer CORREO_ELECTRONICOPrecision(){
				    return null;
				}
				public String CORREO_ELECTRONICODefault(){
				
					return null;
				
				}
				public String CORREO_ELECTRONICOComment(){
				
				    return "";
				
				}
				public String CORREO_ELECTRONICOPattern(){
				
					return "";
				
				}
				public String CORREO_ELECTRONICOOriginalDbColumnName(){
				
					return "CORREO_ELECTRONICO";
				
				}

				
			    public String ZRESIDENCIA;

				public String getZRESIDENCIA () {
					return this.ZRESIDENCIA;
				}

				public Boolean ZRESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean ZRESIDENCIAIsKey(){
				    return false;
				}
				public Integer ZRESIDENCIALength(){
				    return null;
				}
				public Integer ZRESIDENCIAPrecision(){
				    return null;
				}
				public String ZRESIDENCIADefault(){
				
					return null;
				
				}
				public String ZRESIDENCIAComment(){
				
				    return "";
				
				}
				public String ZRESIDENCIAPattern(){
				
					return "";
				
				}
				public String ZRESIDENCIAOriginalDbColumnName(){
				
					return "ZRESIDENCIA";
				
				}

				
			    public String PAIS_NACIMIENTO;

				public String getPAIS_NACIMIENTO () {
					return this.PAIS_NACIMIENTO;
				}

				public Boolean PAIS_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean PAIS_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer PAIS_NACIMIENTOLength(){
				    return null;
				}
				public Integer PAIS_NACIMIENTOPrecision(){
				    return null;
				}
				public String PAIS_NACIMIENTODefault(){
				
					return null;
				
				}
				public String PAIS_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String PAIS_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String PAIS_NACIMIENTOOriginalDbColumnName(){
				
					return "PAIS_NACIMIENTO";
				
				}

				
			    public String DEPARTAMENTO_NACIMIENTO;

				public String getDEPARTAMENTO_NACIMIENTO () {
					return this.DEPARTAMENTO_NACIMIENTO;
				}

				public Boolean DEPARTAMENTO_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean DEPARTAMENTO_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer DEPARTAMENTO_NACIMIENTOLength(){
				    return null;
				}
				public Integer DEPARTAMENTO_NACIMIENTOPrecision(){
				    return null;
				}
				public String DEPARTAMENTO_NACIMIENTODefault(){
				
					return null;
				
				}
				public String DEPARTAMENTO_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String DEPARTAMENTO_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String DEPARTAMENTO_NACIMIENTOOriginalDbColumnName(){
				
					return "DEPARTAMENTO_NACIMIENTO";
				
				}

				
			    public String MUNICIPIO_NACIMIENTO;

				public String getMUNICIPIO_NACIMIENTO () {
					return this.MUNICIPIO_NACIMIENTO;
				}

				public Boolean MUNICIPIO_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIO_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer MUNICIPIO_NACIMIENTOLength(){
				    return null;
				}
				public Integer MUNICIPIO_NACIMIENTOPrecision(){
				    return null;
				}
				public String MUNICIPIO_NACIMIENTODefault(){
				
					return null;
				
				}
				public String MUNICIPIO_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String MUNICIPIO_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String MUNICIPIO_NACIMIENTOOriginalDbColumnName(){
				
					return "MUNICIPIO_NACIMIENTO";
				
				}

				
			    public String PAIS_EXP_DOCUMENTO;

				public String getPAIS_EXP_DOCUMENTO () {
					return this.PAIS_EXP_DOCUMENTO;
				}

				public Boolean PAIS_EXP_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean PAIS_EXP_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer PAIS_EXP_DOCUMENTOLength(){
				    return null;
				}
				public Integer PAIS_EXP_DOCUMENTOPrecision(){
				    return null;
				}
				public String PAIS_EXP_DOCUMENTODefault(){
				
					return null;
				
				}
				public String PAIS_EXP_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String PAIS_EXP_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String PAIS_EXP_DOCUMENTOOriginalDbColumnName(){
				
					return "PAIS_EXP_DOCUMENTO";
				
				}

				
			    public String DEPTO_EXP_DOCUMENTO;

				public String getDEPTO_EXP_DOCUMENTO () {
					return this.DEPTO_EXP_DOCUMENTO;
				}

				public Boolean DEPTO_EXP_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DEPTO_EXP_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DEPTO_EXP_DOCUMENTOLength(){
				    return null;
				}
				public Integer DEPTO_EXP_DOCUMENTOPrecision(){
				    return null;
				}
				public String DEPTO_EXP_DOCUMENTODefault(){
				
					return null;
				
				}
				public String DEPTO_EXP_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DEPTO_EXP_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DEPTO_EXP_DOCUMENTOOriginalDbColumnName(){
				
					return "DEPTO_EXP_DOCUMENTO";
				
				}

				
			    public String MUNICIPIO_EXP_DOCUMENTO;

				public String getMUNICIPIO_EXP_DOCUMENTO () {
					return this.MUNICIPIO_EXP_DOCUMENTO;
				}

				public Boolean MUNICIPIO_EXP_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIO_EXP_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer MUNICIPIO_EXP_DOCUMENTOLength(){
				    return null;
				}
				public Integer MUNICIPIO_EXP_DOCUMENTOPrecision(){
				    return null;
				}
				public String MUNICIPIO_EXP_DOCUMENTODefault(){
				
					return null;
				
				}
				public String MUNICIPIO_EXP_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String MUNICIPIO_EXP_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String MUNICIPIO_EXP_DOCUMENTOOriginalDbColumnName(){
				
					return "MUNICIPIO_EXP_DOCUMENTO";
				
				}

				
			    public String FECHA_EXPEDICION_DOCUMENTO;

				public String getFECHA_EXPEDICION_DOCUMENTO () {
					return this.FECHA_EXPEDICION_DOCUMENTO;
				}

				public Boolean FECHA_EXPEDICION_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_EXPEDICION_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOLength(){
				    return null;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOPrecision(){
				    return null;
				}
				public String FECHA_EXPEDICION_DOCUMENTODefault(){
				
					return null;
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOOriginalDbColumnName(){
				
					return "FECHA_EXPEDICION_DOCUMENTO";
				
				}

				
			    public String PAIS_RESIDENCIA;

				public String getPAIS_RESIDENCIA () {
					return this.PAIS_RESIDENCIA;
				}

				public Boolean PAIS_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean PAIS_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer PAIS_RESIDENCIALength(){
				    return null;
				}
				public Integer PAIS_RESIDENCIAPrecision(){
				    return null;
				}
				public String PAIS_RESIDENCIADefault(){
				
					return null;
				
				}
				public String PAIS_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String PAIS_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String PAIS_RESIDENCIAOriginalDbColumnName(){
				
					return "PAIS_RESIDENCIA";
				
				}

				
			    public String DEPARTAMENTO_RESIDENCIA;

				public String getDEPARTAMENTO_RESIDENCIA () {
					return this.DEPARTAMENTO_RESIDENCIA;
				}

				public Boolean DEPARTAMENTO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean DEPARTAMENTO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer DEPARTAMENTO_RESIDENCIALength(){
				    return null;
				}
				public Integer DEPARTAMENTO_RESIDENCIAPrecision(){
				    return null;
				}
				public String DEPARTAMENTO_RESIDENCIADefault(){
				
					return null;
				
				}
				public String DEPARTAMENTO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String DEPARTAMENTO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String DEPARTAMENTO_RESIDENCIAOriginalDbColumnName(){
				
					return "DEPARTAMENTO_RESIDENCIA";
				
				}

				
			    public String MUNICIPIO_RESIDENCIA;

				public String getMUNICIPIO_RESIDENCIA () {
					return this.MUNICIPIO_RESIDENCIA;
				}

				public Boolean MUNICIPIO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer MUNICIPIO_RESIDENCIALength(){
				    return null;
				}
				public Integer MUNICIPIO_RESIDENCIAPrecision(){
				    return null;
				}
				public String MUNICIPIO_RESIDENCIADefault(){
				
					return null;
				
				}
				public String MUNICIPIO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String MUNICIPIO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String MUNICIPIO_RESIDENCIAOriginalDbColumnName(){
				
					return "MUNICIPIO_RESIDENCIA";
				
				}

				
			    public String LOCALIDAD_RESIDENCIA;

				public String getLOCALIDAD_RESIDENCIA () {
					return this.LOCALIDAD_RESIDENCIA;
				}

				public Boolean LOCALIDAD_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean LOCALIDAD_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer LOCALIDAD_RESIDENCIALength(){
				    return null;
				}
				public Integer LOCALIDAD_RESIDENCIAPrecision(){
				    return null;
				}
				public String LOCALIDAD_RESIDENCIADefault(){
				
					return null;
				
				}
				public String LOCALIDAD_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String LOCALIDAD_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String LOCALIDAD_RESIDENCIAOriginalDbColumnName(){
				
					return "LOCALIDAD_RESIDENCIA";
				
				}

				
			    public String GRUPO_SANGUINEO;

				public String getGRUPO_SANGUINEO () {
					return this.GRUPO_SANGUINEO;
				}

				public Boolean GRUPO_SANGUINEOIsNullable(){
				    return true;
				}
				public Boolean GRUPO_SANGUINEOIsKey(){
				    return false;
				}
				public Integer GRUPO_SANGUINEOLength(){
				    return null;
				}
				public Integer GRUPO_SANGUINEOPrecision(){
				    return null;
				}
				public String GRUPO_SANGUINEODefault(){
				
					return null;
				
				}
				public String GRUPO_SANGUINEOComment(){
				
				    return "";
				
				}
				public String GRUPO_SANGUINEOPattern(){
				
					return "";
				
				}
				public String GRUPO_SANGUINEOOriginalDbColumnName(){
				
					return "GRUPO_SANGUINEO";
				
				}

				
			    public String ESTATURA;

				public String getESTATURA () {
					return this.ESTATURA;
				}

				public Boolean ESTATURAIsNullable(){
				    return true;
				}
				public Boolean ESTATURAIsKey(){
				    return false;
				}
				public Integer ESTATURALength(){
				    return null;
				}
				public Integer ESTATURAPrecision(){
				    return null;
				}
				public String ESTATURADefault(){
				
					return null;
				
				}
				public String ESTATURAComment(){
				
				    return "";
				
				}
				public String ESTATURAPattern(){
				
					return "";
				
				}
				public String ESTATURAOriginalDbColumnName(){
				
					return "ESTATURA";
				
				}

				
			    public String OCUPACION;

				public String getOCUPACION () {
					return this.OCUPACION;
				}

				public Boolean OCUPACIONIsNullable(){
				    return true;
				}
				public Boolean OCUPACIONIsKey(){
				    return false;
				}
				public Integer OCUPACIONLength(){
				    return null;
				}
				public Integer OCUPACIONPrecision(){
				    return null;
				}
				public String OCUPACIONDefault(){
				
					return null;
				
				}
				public String OCUPACIONComment(){
				
				    return "";
				
				}
				public String OCUPACIONPattern(){
				
					return "";
				
				}
				public String OCUPACIONOriginalDbColumnName(){
				
					return "OCUPACION";
				
				}

				
			    public String FACTOR_RH;

				public String getFACTOR_RH () {
					return this.FACTOR_RH;
				}

				public Boolean FACTOR_RHIsNullable(){
				    return true;
				}
				public Boolean FACTOR_RHIsKey(){
				    return false;
				}
				public Integer FACTOR_RHLength(){
				    return null;
				}
				public Integer FACTOR_RHPrecision(){
				    return null;
				}
				public String FACTOR_RHDefault(){
				
					return null;
				
				}
				public String FACTOR_RHComment(){
				
				    return "";
				
				}
				public String FACTOR_RHPattern(){
				
					return "";
				
				}
				public String FACTOR_RHOriginalDbColumnName(){
				
					return "FACTOR_RH";
				
				}

				
			    public String GRUPO_ETNICO;

				public String getGRUPO_ETNICO () {
					return this.GRUPO_ETNICO;
				}

				public Boolean GRUPO_ETNICOIsNullable(){
				    return true;
				}
				public Boolean GRUPO_ETNICOIsKey(){
				    return false;
				}
				public Integer GRUPO_ETNICOLength(){
				    return null;
				}
				public Integer GRUPO_ETNICOPrecision(){
				    return null;
				}
				public String GRUPO_ETNICODefault(){
				
					return null;
				
				}
				public String GRUPO_ETNICOComment(){
				
				    return "";
				
				}
				public String GRUPO_ETNICOPattern(){
				
					return "";
				
				}
				public String GRUPO_ETNICOOriginalDbColumnName(){
				
					return "GRUPO_ETNICO";
				
				}

				
			    public String NSOCIOECONOMICO;

				public String getNSOCIOECONOMICO () {
					return this.NSOCIOECONOMICO;
				}

				public Boolean NSOCIOECONOMICOIsNullable(){
				    return true;
				}
				public Boolean NSOCIOECONOMICOIsKey(){
				    return false;
				}
				public Integer NSOCIOECONOMICOLength(){
				    return null;
				}
				public Integer NSOCIOECONOMICOPrecision(){
				    return null;
				}
				public String NSOCIOECONOMICODefault(){
				
					return null;
				
				}
				public String NSOCIOECONOMICOComment(){
				
				    return "";
				
				}
				public String NSOCIOECONOMICOPattern(){
				
					return "";
				
				}
				public String NSOCIOECONOMICOOriginalDbColumnName(){
				
					return "NSOCIOECONOMICO";
				
				}

				
			    public String TVIVIENDA;

				public String getTVIVIENDA () {
					return this.TVIVIENDA;
				}

				public Boolean TVIVIENDAIsNullable(){
				    return true;
				}
				public Boolean TVIVIENDAIsKey(){
				    return false;
				}
				public Integer TVIVIENDALength(){
				    return null;
				}
				public Integer TVIVIENDAPrecision(){
				    return null;
				}
				public String TVIVIENDADefault(){
				
					return null;
				
				}
				public String TVIVIENDAComment(){
				
				    return "";
				
				}
				public String TVIVIENDAPattern(){
				
					return "";
				
				}
				public String TVIVIENDAOriginalDbColumnName(){
				
					return "TVIVIENDA";
				
				}

				
			    public String NEDUCATIVOS;

				public String getNEDUCATIVOS () {
					return this.NEDUCATIVOS;
				}

				public Boolean NEDUCATIVOSIsNullable(){
				    return true;
				}
				public Boolean NEDUCATIVOSIsKey(){
				    return false;
				}
				public Integer NEDUCATIVOSLength(){
				    return null;
				}
				public Integer NEDUCATIVOSPrecision(){
				    return null;
				}
				public String NEDUCATIVOSDefault(){
				
					return null;
				
				}
				public String NEDUCATIVOSComment(){
				
				    return "";
				
				}
				public String NEDUCATIVOSPattern(){
				
					return "";
				
				}
				public String NEDUCATIVOSOriginalDbColumnName(){
				
					return "NEDUCATIVOS";
				
				}

				
			    public String CODIGO_ESTABLECIMIENTO;

				public String getCODIGO_ESTABLECIMIENTO () {
					return this.CODIGO_ESTABLECIMIENTO;
				}

				public Boolean CODIGO_ESTABLECIMIENTOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ESTABLECIMIENTOIsKey(){
				    return false;
				}
				public Integer CODIGO_ESTABLECIMIENTOLength(){
				    return null;
				}
				public Integer CODIGO_ESTABLECIMIENTOPrecision(){
				    return null;
				}
				public String CODIGO_ESTABLECIMIENTODefault(){
				
					return null;
				
				}
				public String CODIGO_ESTABLECIMIENTOComment(){
				
				    return "";
				
				}
				public String CODIGO_ESTABLECIMIENTOPattern(){
				
					return "";
				
				}
				public String CODIGO_ESTABLECIMIENTOOriginalDbColumnName(){
				
					return "CODIGO_ESTABLECIMIENTO";
				
				}

				
			    public String ESTABLECIMIENTO_ADSCRITO;

				public String getESTABLECIMIENTO_ADSCRITO () {
					return this.ESTABLECIMIENTO_ADSCRITO;
				}

				public Boolean ESTABLECIMIENTO_ADSCRITOIsNullable(){
				    return true;
				}
				public Boolean ESTABLECIMIENTO_ADSCRITOIsKey(){
				    return false;
				}
				public Integer ESTABLECIMIENTO_ADSCRITOLength(){
				    return null;
				}
				public Integer ESTABLECIMIENTO_ADSCRITOPrecision(){
				    return null;
				}
				public String ESTABLECIMIENTO_ADSCRITODefault(){
				
					return null;
				
				}
				public String ESTABLECIMIENTO_ADSCRITOComment(){
				
				    return "";
				
				}
				public String ESTABLECIMIENTO_ADSCRITOPattern(){
				
					return "";
				
				}
				public String ESTABLECIMIENTO_ADSCRITOOriginalDbColumnName(){
				
					return "ESTABLECIMIENTO_ADSCRITO";
				
				}

				
			    public String FECHA_DE_INGRESO;

				public String getFECHA_DE_INGRESO () {
					return this.FECHA_DE_INGRESO;
				}

				public Boolean FECHA_DE_INGRESOIsNullable(){
				    return true;
				}
				public Boolean FECHA_DE_INGRESOIsKey(){
				    return false;
				}
				public Integer FECHA_DE_INGRESOLength(){
				    return null;
				}
				public Integer FECHA_DE_INGRESOPrecision(){
				    return null;
				}
				public String FECHA_DE_INGRESODefault(){
				
					return null;
				
				}
				public String FECHA_DE_INGRESOComment(){
				
				    return "";
				
				}
				public String FECHA_DE_INGRESOPattern(){
				
					return "";
				
				}
				public String FECHA_DE_INGRESOOriginalDbColumnName(){
				
					return "FECHA_DE_INGRESO";
				
				}

				
			    public String ENTIDAD_APORTANTE;

				public String getENTIDAD_APORTANTE () {
					return this.ENTIDAD_APORTANTE;
				}

				public Boolean ENTIDAD_APORTANTEIsNullable(){
				    return true;
				}
				public Boolean ENTIDAD_APORTANTEIsKey(){
				    return false;
				}
				public Integer ENTIDAD_APORTANTELength(){
				    return null;
				}
				public Integer ENTIDAD_APORTANTEPrecision(){
				    return null;
				}
				public String ENTIDAD_APORTANTEDefault(){
				
					return null;
				
				}
				public String ENTIDAD_APORTANTEComment(){
				
				    return "";
				
				}
				public String ENTIDAD_APORTANTEPattern(){
				
					return "";
				
				}
				public String ENTIDAD_APORTANTEOriginalDbColumnName(){
				
					return "ENTIDAD_APORTANTE";
				
				}

				
			    public String CODIGO_GRDMILITAR;

				public String getCODIGO_GRDMILITAR () {
					return this.CODIGO_GRDMILITAR;
				}

				public Boolean CODIGO_GRDMILITARIsNullable(){
				    return true;
				}
				public Boolean CODIGO_GRDMILITARIsKey(){
				    return false;
				}
				public Integer CODIGO_GRDMILITARLength(){
				    return null;
				}
				public Integer CODIGO_GRDMILITARPrecision(){
				    return null;
				}
				public String CODIGO_GRDMILITARDefault(){
				
					return null;
				
				}
				public String CODIGO_GRDMILITARComment(){
				
				    return "";
				
				}
				public String CODIGO_GRDMILITARPattern(){
				
					return "";
				
				}
				public String CODIGO_GRDMILITAROriginalDbColumnName(){
				
					return "CODIGO_GRDMILITAR";
				
				}

				
			    public String SIGLA_GRDMILITAR;

				public String getSIGLA_GRDMILITAR () {
					return this.SIGLA_GRDMILITAR;
				}

				public Boolean SIGLA_GRDMILITARIsNullable(){
				    return true;
				}
				public Boolean SIGLA_GRDMILITARIsKey(){
				    return false;
				}
				public Integer SIGLA_GRDMILITARLength(){
				    return null;
				}
				public Integer SIGLA_GRDMILITARPrecision(){
				    return null;
				}
				public String SIGLA_GRDMILITARDefault(){
				
					return null;
				
				}
				public String SIGLA_GRDMILITARComment(){
				
				    return "";
				
				}
				public String SIGLA_GRDMILITARPattern(){
				
					return "";
				
				}
				public String SIGLA_GRDMILITAROriginalDbColumnName(){
				
					return "SIGLA_GRDMILITAR";
				
				}

				
			    public String FUERZA_MILITAR;

				public String getFUERZA_MILITAR () {
					return this.FUERZA_MILITAR;
				}

				public Boolean FUERZA_MILITARIsNullable(){
				    return true;
				}
				public Boolean FUERZA_MILITARIsKey(){
				    return false;
				}
				public Integer FUERZA_MILITARLength(){
				    return null;
				}
				public Integer FUERZA_MILITARPrecision(){
				    return null;
				}
				public String FUERZA_MILITARDefault(){
				
					return null;
				
				}
				public String FUERZA_MILITARComment(){
				
				    return "";
				
				}
				public String FUERZA_MILITARPattern(){
				
					return "";
				
				}
				public String FUERZA_MILITAROriginalDbColumnName(){
				
					return "FUERZA_MILITAR";
				
				}

				
			    public String CODIGO_UMILITAR;

				public String getCODIGO_UMILITAR () {
					return this.CODIGO_UMILITAR;
				}

				public Boolean CODIGO_UMILITARIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UMILITARIsKey(){
				    return false;
				}
				public Integer CODIGO_UMILITARLength(){
				    return null;
				}
				public Integer CODIGO_UMILITARPrecision(){
				    return null;
				}
				public String CODIGO_UMILITARDefault(){
				
					return null;
				
				}
				public String CODIGO_UMILITARComment(){
				
				    return "";
				
				}
				public String CODIGO_UMILITARPattern(){
				
					return "";
				
				}
				public String CODIGO_UMILITAROriginalDbColumnName(){
				
					return "CODIGO_UMILITAR";
				
				}

				
			    public String UNIDAD_MILITAR;

				public String getUNIDAD_MILITAR () {
					return this.UNIDAD_MILITAR;
				}

				public Boolean UNIDAD_MILITARIsNullable(){
				    return true;
				}
				public Boolean UNIDAD_MILITARIsKey(){
				    return false;
				}
				public Integer UNIDAD_MILITARLength(){
				    return null;
				}
				public Integer UNIDAD_MILITARPrecision(){
				    return null;
				}
				public String UNIDAD_MILITARDefault(){
				
					return null;
				
				}
				public String UNIDAD_MILITARComment(){
				
				    return "";
				
				}
				public String UNIDAD_MILITARPattern(){
				
					return "";
				
				}
				public String UNIDAD_MILITAROriginalDbColumnName(){
				
					return "UNIDAD_MILITAR";
				
				}

				
			    public String TIPO_DE_VINCULACION;

				public String getTIPO_DE_VINCULACION () {
					return this.TIPO_DE_VINCULACION;
				}

				public Boolean TIPO_DE_VINCULACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_DE_VINCULACIONIsKey(){
				    return false;
				}
				public Integer TIPO_DE_VINCULACIONLength(){
				    return null;
				}
				public Integer TIPO_DE_VINCULACIONPrecision(){
				    return null;
				}
				public String TIPO_DE_VINCULACIONDefault(){
				
					return null;
				
				}
				public String TIPO_DE_VINCULACIONComment(){
				
				    return "";
				
				}
				public String TIPO_DE_VINCULACIONPattern(){
				
					return "";
				
				}
				public String TIPO_DE_VINCULACIONOriginalDbColumnName(){
				
					return "TIPO_DE_VINCULACION";
				
				}

				
			    public String ESTADO_AFILIACION;

				public String getESTADO_AFILIACION () {
					return this.ESTADO_AFILIACION;
				}

				public Boolean ESTADO_AFILIACIONIsNullable(){
				    return true;
				}
				public Boolean ESTADO_AFILIACIONIsKey(){
				    return false;
				}
				public Integer ESTADO_AFILIACIONLength(){
				    return null;
				}
				public Integer ESTADO_AFILIACIONPrecision(){
				    return null;
				}
				public String ESTADO_AFILIACIONDefault(){
				
					return null;
				
				}
				public String ESTADO_AFILIACIONComment(){
				
				    return "";
				
				}
				public String ESTADO_AFILIACIONPattern(){
				
					return "";
				
				}
				public String ESTADO_AFILIACIONOriginalDbColumnName(){
				
					return "ESTADO_AFILIACION";
				
				}

				
			    public String MOTIVO_ESTADO;

				public String getMOTIVO_ESTADO () {
					return this.MOTIVO_ESTADO;
				}

				public Boolean MOTIVO_ESTADOIsNullable(){
				    return true;
				}
				public Boolean MOTIVO_ESTADOIsKey(){
				    return false;
				}
				public Integer MOTIVO_ESTADOLength(){
				    return null;
				}
				public Integer MOTIVO_ESTADOPrecision(){
				    return null;
				}
				public String MOTIVO_ESTADODefault(){
				
					return null;
				
				}
				public String MOTIVO_ESTADOComment(){
				
				    return "";
				
				}
				public String MOTIVO_ESTADOPattern(){
				
					return "";
				
				}
				public String MOTIVO_ESTADOOriginalDbColumnName(){
				
					return "MOTIVO_ESTADO";
				
				}

				
			    public String FECHA_ESTADO;

				public String getFECHA_ESTADO () {
					return this.FECHA_ESTADO;
				}

				public Boolean FECHA_ESTADOIsNullable(){
				    return true;
				}
				public Boolean FECHA_ESTADOIsKey(){
				    return false;
				}
				public Integer FECHA_ESTADOLength(){
				    return null;
				}
				public Integer FECHA_ESTADOPrecision(){
				    return null;
				}
				public String FECHA_ESTADODefault(){
				
					return null;
				
				}
				public String FECHA_ESTADOComment(){
				
				    return "";
				
				}
				public String FECHA_ESTADOPattern(){
				
					return "";
				
				}
				public String FECHA_ESTADOOriginalDbColumnName(){
				
					return "FECHA_ESTADO";
				
				}

				
			    public String FECHA_FIN_AFILIACION;

				public String getFECHA_FIN_AFILIACION () {
					return this.FECHA_FIN_AFILIACION;
				}

				public Boolean FECHA_FIN_AFILIACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_FIN_AFILIACIONIsKey(){
				    return false;
				}
				public Integer FECHA_FIN_AFILIACIONLength(){
				    return null;
				}
				public Integer FECHA_FIN_AFILIACIONPrecision(){
				    return null;
				}
				public String FECHA_FIN_AFILIACIONDefault(){
				
					return null;
				
				}
				public String FECHA_FIN_AFILIACIONComment(){
				
				    return "";
				
				}
				public String FECHA_FIN_AFILIACIONPattern(){
				
					return "";
				
				}
				public String FECHA_FIN_AFILIACIONOriginalDbColumnName(){
				
					return "FECHA_FIN_AFILIACION";
				
				}

				
			    public String FECHA_VINCULACION;

				public String getFECHA_VINCULACION () {
					return this.FECHA_VINCULACION;
				}

				public Boolean FECHA_VINCULACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_VINCULACIONIsKey(){
				    return false;
				}
				public Integer FECHA_VINCULACIONLength(){
				    return null;
				}
				public Integer FECHA_VINCULACIONPrecision(){
				    return null;
				}
				public String FECHA_VINCULACIONDefault(){
				
					return null;
				
				}
				public String FECHA_VINCULACIONComment(){
				
				    return "";
				
				}
				public String FECHA_VINCULACIONPattern(){
				
					return "";
				
				}
				public String FECHA_VINCULACIONOriginalDbColumnName(){
				
					return "FECHA_VINCULACION";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.TIPO_DE_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.SEXO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.ESTADO_CIVIL = readString(dis);
					
					this.DISCAPACIDAD = readString(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.CORREO_ELECTRONICO = readString(dis);
					
					this.ZRESIDENCIA = readString(dis);
					
					this.PAIS_NACIMIENTO = readString(dis);
					
					this.DEPARTAMENTO_NACIMIENTO = readString(dis);
					
					this.MUNICIPIO_NACIMIENTO = readString(dis);
					
					this.PAIS_EXP_DOCUMENTO = readString(dis);
					
					this.DEPTO_EXP_DOCUMENTO = readString(dis);
					
					this.MUNICIPIO_EXP_DOCUMENTO = readString(dis);
					
					this.FECHA_EXPEDICION_DOCUMENTO = readString(dis);
					
					this.PAIS_RESIDENCIA = readString(dis);
					
					this.DEPARTAMENTO_RESIDENCIA = readString(dis);
					
					this.MUNICIPIO_RESIDENCIA = readString(dis);
					
					this.LOCALIDAD_RESIDENCIA = readString(dis);
					
					this.GRUPO_SANGUINEO = readString(dis);
					
					this.ESTATURA = readString(dis);
					
					this.OCUPACION = readString(dis);
					
					this.FACTOR_RH = readString(dis);
					
					this.GRUPO_ETNICO = readString(dis);
					
					this.NSOCIOECONOMICO = readString(dis);
					
					this.TVIVIENDA = readString(dis);
					
					this.NEDUCATIVOS = readString(dis);
					
					this.CODIGO_ESTABLECIMIENTO = readString(dis);
					
					this.ESTABLECIMIENTO_ADSCRITO = readString(dis);
					
					this.FECHA_DE_INGRESO = readString(dis);
					
					this.ENTIDAD_APORTANTE = readString(dis);
					
					this.CODIGO_GRDMILITAR = readString(dis);
					
					this.SIGLA_GRDMILITAR = readString(dis);
					
					this.FUERZA_MILITAR = readString(dis);
					
					this.CODIGO_UMILITAR = readString(dis);
					
					this.UNIDAD_MILITAR = readString(dis);
					
					this.TIPO_DE_VINCULACION = readString(dis);
					
					this.ESTADO_AFILIACION = readString(dis);
					
					this.MOTIVO_ESTADO = readString(dis);
					
					this.FECHA_ESTADO = readString(dis);
					
					this.FECHA_FIN_AFILIACION = readString(dis);
					
					this.FECHA_VINCULACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.TIPO_DE_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.SEXO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.ESTADO_CIVIL = readString(dis);
					
					this.DISCAPACIDAD = readString(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.CORREO_ELECTRONICO = readString(dis);
					
					this.ZRESIDENCIA = readString(dis);
					
					this.PAIS_NACIMIENTO = readString(dis);
					
					this.DEPARTAMENTO_NACIMIENTO = readString(dis);
					
					this.MUNICIPIO_NACIMIENTO = readString(dis);
					
					this.PAIS_EXP_DOCUMENTO = readString(dis);
					
					this.DEPTO_EXP_DOCUMENTO = readString(dis);
					
					this.MUNICIPIO_EXP_DOCUMENTO = readString(dis);
					
					this.FECHA_EXPEDICION_DOCUMENTO = readString(dis);
					
					this.PAIS_RESIDENCIA = readString(dis);
					
					this.DEPARTAMENTO_RESIDENCIA = readString(dis);
					
					this.MUNICIPIO_RESIDENCIA = readString(dis);
					
					this.LOCALIDAD_RESIDENCIA = readString(dis);
					
					this.GRUPO_SANGUINEO = readString(dis);
					
					this.ESTATURA = readString(dis);
					
					this.OCUPACION = readString(dis);
					
					this.FACTOR_RH = readString(dis);
					
					this.GRUPO_ETNICO = readString(dis);
					
					this.NSOCIOECONOMICO = readString(dis);
					
					this.TVIVIENDA = readString(dis);
					
					this.NEDUCATIVOS = readString(dis);
					
					this.CODIGO_ESTABLECIMIENTO = readString(dis);
					
					this.ESTABLECIMIENTO_ADSCRITO = readString(dis);
					
					this.FECHA_DE_INGRESO = readString(dis);
					
					this.ENTIDAD_APORTANTE = readString(dis);
					
					this.CODIGO_GRDMILITAR = readString(dis);
					
					this.SIGLA_GRDMILITAR = readString(dis);
					
					this.FUERZA_MILITAR = readString(dis);
					
					this.CODIGO_UMILITAR = readString(dis);
					
					this.UNIDAD_MILITAR = readString(dis);
					
					this.TIPO_DE_VINCULACION = readString(dis);
					
					this.ESTADO_AFILIACION = readString(dis);
					
					this.MOTIVO_ESTADO = readString(dis);
					
					this.FECHA_ESTADO = readString(dis);
					
					this.FECHA_FIN_AFILIACION = readString(dis);
					
					this.FECHA_VINCULACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.TIPO_DE_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.ESTADO_CIVIL,dos);
					
					// String
				
						writeString(this.DISCAPACIDAD,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO,dos);
					
					// String
				
						writeString(this.ZRESIDENCIA,dos);
					
					// String
				
						writeString(this.PAIS_NACIMIENTO,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.PAIS_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DEPTO_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// String
				
						writeString(this.PAIS_RESIDENCIA,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MUNICIPIO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.LOCALIDAD_RESIDENCIA,dos);
					
					// String
				
						writeString(this.GRUPO_SANGUINEO,dos);
					
					// String
				
						writeString(this.ESTATURA,dos);
					
					// String
				
						writeString(this.OCUPACION,dos);
					
					// String
				
						writeString(this.FACTOR_RH,dos);
					
					// String
				
						writeString(this.GRUPO_ETNICO,dos);
					
					// String
				
						writeString(this.NSOCIOECONOMICO,dos);
					
					// String
				
						writeString(this.TVIVIENDA,dos);
					
					// String
				
						writeString(this.NEDUCATIVOS,dos);
					
					// String
				
						writeString(this.CODIGO_ESTABLECIMIENTO,dos);
					
					// String
				
						writeString(this.ESTABLECIMIENTO_ADSCRITO,dos);
					
					// String
				
						writeString(this.FECHA_DE_INGRESO,dos);
					
					// String
				
						writeString(this.ENTIDAD_APORTANTE,dos);
					
					// String
				
						writeString(this.CODIGO_GRDMILITAR,dos);
					
					// String
				
						writeString(this.SIGLA_GRDMILITAR,dos);
					
					// String
				
						writeString(this.FUERZA_MILITAR,dos);
					
					// String
				
						writeString(this.CODIGO_UMILITAR,dos);
					
					// String
				
						writeString(this.UNIDAD_MILITAR,dos);
					
					// String
				
						writeString(this.TIPO_DE_VINCULACION,dos);
					
					// String
				
						writeString(this.ESTADO_AFILIACION,dos);
					
					// String
				
						writeString(this.MOTIVO_ESTADO,dos);
					
					// String
				
						writeString(this.FECHA_ESTADO,dos);
					
					// String
				
						writeString(this.FECHA_FIN_AFILIACION,dos);
					
					// String
				
						writeString(this.FECHA_VINCULACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.TIPO_DE_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.ESTADO_CIVIL,dos);
					
					// String
				
						writeString(this.DISCAPACIDAD,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO,dos);
					
					// String
				
						writeString(this.ZRESIDENCIA,dos);
					
					// String
				
						writeString(this.PAIS_NACIMIENTO,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO_NACIMIENTO,dos);
					
					// String
				
						writeString(this.PAIS_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DEPTO_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.MUNICIPIO_EXP_DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// String
				
						writeString(this.PAIS_RESIDENCIA,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MUNICIPIO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.LOCALIDAD_RESIDENCIA,dos);
					
					// String
				
						writeString(this.GRUPO_SANGUINEO,dos);
					
					// String
				
						writeString(this.ESTATURA,dos);
					
					// String
				
						writeString(this.OCUPACION,dos);
					
					// String
				
						writeString(this.FACTOR_RH,dos);
					
					// String
				
						writeString(this.GRUPO_ETNICO,dos);
					
					// String
				
						writeString(this.NSOCIOECONOMICO,dos);
					
					// String
				
						writeString(this.TVIVIENDA,dos);
					
					// String
				
						writeString(this.NEDUCATIVOS,dos);
					
					// String
				
						writeString(this.CODIGO_ESTABLECIMIENTO,dos);
					
					// String
				
						writeString(this.ESTABLECIMIENTO_ADSCRITO,dos);
					
					// String
				
						writeString(this.FECHA_DE_INGRESO,dos);
					
					// String
				
						writeString(this.ENTIDAD_APORTANTE,dos);
					
					// String
				
						writeString(this.CODIGO_GRDMILITAR,dos);
					
					// String
				
						writeString(this.SIGLA_GRDMILITAR,dos);
					
					// String
				
						writeString(this.FUERZA_MILITAR,dos);
					
					// String
				
						writeString(this.CODIGO_UMILITAR,dos);
					
					// String
				
						writeString(this.UNIDAD_MILITAR,dos);
					
					// String
				
						writeString(this.TIPO_DE_VINCULACION,dos);
					
					// String
				
						writeString(this.ESTADO_AFILIACION,dos);
					
					// String
				
						writeString(this.MOTIVO_ESTADO,dos);
					
					// String
				
						writeString(this.FECHA_ESTADO,dos);
					
					// String
				
						writeString(this.FECHA_FIN_AFILIACION,dos);
					
					// String
				
						writeString(this.FECHA_VINCULACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",TIPO_DE_DOCUMENTO="+TIPO_DE_DOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",SEXO="+SEXO);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",ESTADO_CIVIL="+ESTADO_CIVIL);
		sb.append(",DISCAPACIDAD="+DISCAPACIDAD);
		sb.append(",DIRECCION="+DIRECCION);
		sb.append(",TELEFONO="+TELEFONO);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",CORREO_ELECTRONICO="+CORREO_ELECTRONICO);
		sb.append(",ZRESIDENCIA="+ZRESIDENCIA);
		sb.append(",PAIS_NACIMIENTO="+PAIS_NACIMIENTO);
		sb.append(",DEPARTAMENTO_NACIMIENTO="+DEPARTAMENTO_NACIMIENTO);
		sb.append(",MUNICIPIO_NACIMIENTO="+MUNICIPIO_NACIMIENTO);
		sb.append(",PAIS_EXP_DOCUMENTO="+PAIS_EXP_DOCUMENTO);
		sb.append(",DEPTO_EXP_DOCUMENTO="+DEPTO_EXP_DOCUMENTO);
		sb.append(",MUNICIPIO_EXP_DOCUMENTO="+MUNICIPIO_EXP_DOCUMENTO);
		sb.append(",FECHA_EXPEDICION_DOCUMENTO="+FECHA_EXPEDICION_DOCUMENTO);
		sb.append(",PAIS_RESIDENCIA="+PAIS_RESIDENCIA);
		sb.append(",DEPARTAMENTO_RESIDENCIA="+DEPARTAMENTO_RESIDENCIA);
		sb.append(",MUNICIPIO_RESIDENCIA="+MUNICIPIO_RESIDENCIA);
		sb.append(",LOCALIDAD_RESIDENCIA="+LOCALIDAD_RESIDENCIA);
		sb.append(",GRUPO_SANGUINEO="+GRUPO_SANGUINEO);
		sb.append(",ESTATURA="+ESTATURA);
		sb.append(",OCUPACION="+OCUPACION);
		sb.append(",FACTOR_RH="+FACTOR_RH);
		sb.append(",GRUPO_ETNICO="+GRUPO_ETNICO);
		sb.append(",NSOCIOECONOMICO="+NSOCIOECONOMICO);
		sb.append(",TVIVIENDA="+TVIVIENDA);
		sb.append(",NEDUCATIVOS="+NEDUCATIVOS);
		sb.append(",CODIGO_ESTABLECIMIENTO="+CODIGO_ESTABLECIMIENTO);
		sb.append(",ESTABLECIMIENTO_ADSCRITO="+ESTABLECIMIENTO_ADSCRITO);
		sb.append(",FECHA_DE_INGRESO="+FECHA_DE_INGRESO);
		sb.append(",ENTIDAD_APORTANTE="+ENTIDAD_APORTANTE);
		sb.append(",CODIGO_GRDMILITAR="+CODIGO_GRDMILITAR);
		sb.append(",SIGLA_GRDMILITAR="+SIGLA_GRDMILITAR);
		sb.append(",FUERZA_MILITAR="+FUERZA_MILITAR);
		sb.append(",CODIGO_UMILITAR="+CODIGO_UMILITAR);
		sb.append(",UNIDAD_MILITAR="+UNIDAD_MILITAR);
		sb.append(",TIPO_DE_VINCULACION="+TIPO_DE_VINCULACION);
		sb.append(",ESTADO_AFILIACION="+ESTADO_AFILIACION);
		sb.append(",MOTIVO_ESTADO="+MOTIVO_ESTADO);
		sb.append(",FECHA_ESTADO="+FECHA_ESTADO);
		sb.append(",FECHA_FIN_AFILIACION="+FECHA_FIN_AFILIACION);
		sb.append(",FECHA_VINCULACION="+FECHA_VINCULACION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(crgInicialStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return null;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return null;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return null;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return null;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return null;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return null;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return null;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return null;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String TIPO_DE_DOCUMENTO;

				public String getTIPO_DE_DOCUMENTO () {
					return this.TIPO_DE_DOCUMENTO;
				}

				public Boolean TIPO_DE_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TIPO_DE_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer TIPO_DE_DOCUMENTOLength(){
				    return null;
				}
				public Integer TIPO_DE_DOCUMENTOPrecision(){
				    return null;
				}
				public String TIPO_DE_DOCUMENTODefault(){
				
					return null;
				
				}
				public String TIPO_DE_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String TIPO_DE_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String TIPO_DE_DOCUMENTOOriginalDbColumnName(){
				
					return "TIPO_DE_DOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String SEXO;

				public String getSEXO () {
					return this.SEXO;
				}

				public Boolean SEXOIsNullable(){
				    return true;
				}
				public Boolean SEXOIsKey(){
				    return false;
				}
				public Integer SEXOLength(){
				    return null;
				}
				public Integer SEXOPrecision(){
				    return null;
				}
				public String SEXODefault(){
				
					return null;
				
				}
				public String SEXOComment(){
				
				    return "";
				
				}
				public String SEXOPattern(){
				
					return "";
				
				}
				public String SEXOOriginalDbColumnName(){
				
					return "SEXO";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return null;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return null;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String ESTADO_CIVIL;

				public String getESTADO_CIVIL () {
					return this.ESTADO_CIVIL;
				}

				public Boolean ESTADO_CIVILIsNullable(){
				    return true;
				}
				public Boolean ESTADO_CIVILIsKey(){
				    return false;
				}
				public Integer ESTADO_CIVILLength(){
				    return null;
				}
				public Integer ESTADO_CIVILPrecision(){
				    return null;
				}
				public String ESTADO_CIVILDefault(){
				
					return null;
				
				}
				public String ESTADO_CIVILComment(){
				
				    return "";
				
				}
				public String ESTADO_CIVILPattern(){
				
					return "";
				
				}
				public String ESTADO_CIVILOriginalDbColumnName(){
				
					return "ESTADO_CIVIL";
				
				}

				
			    public String DISCAPACIDAD;

				public String getDISCAPACIDAD () {
					return this.DISCAPACIDAD;
				}

				public Boolean DISCAPACIDADIsNullable(){
				    return true;
				}
				public Boolean DISCAPACIDADIsKey(){
				    return false;
				}
				public Integer DISCAPACIDADLength(){
				    return null;
				}
				public Integer DISCAPACIDADPrecision(){
				    return null;
				}
				public String DISCAPACIDADDefault(){
				
					return null;
				
				}
				public String DISCAPACIDADComment(){
				
				    return "";
				
				}
				public String DISCAPACIDADPattern(){
				
					return "";
				
				}
				public String DISCAPACIDADOriginalDbColumnName(){
				
					return "DISCAPACIDAD";
				
				}

				
			    public String DIRECCION;

				public String getDIRECCION () {
					return this.DIRECCION;
				}

				public Boolean DIRECCIONIsNullable(){
				    return true;
				}
				public Boolean DIRECCIONIsKey(){
				    return false;
				}
				public Integer DIRECCIONLength(){
				    return null;
				}
				public Integer DIRECCIONPrecision(){
				    return null;
				}
				public String DIRECCIONDefault(){
				
					return null;
				
				}
				public String DIRECCIONComment(){
				
				    return "";
				
				}
				public String DIRECCIONPattern(){
				
					return "";
				
				}
				public String DIRECCIONOriginalDbColumnName(){
				
					return "DIRECCION";
				
				}

				
			    public String TELEFONO;

				public String getTELEFONO () {
					return this.TELEFONO;
				}

				public Boolean TELEFONOIsNullable(){
				    return true;
				}
				public Boolean TELEFONOIsKey(){
				    return false;
				}
				public Integer TELEFONOLength(){
				    return null;
				}
				public Integer TELEFONOPrecision(){
				    return null;
				}
				public String TELEFONODefault(){
				
					return null;
				
				}
				public String TELEFONOComment(){
				
				    return "";
				
				}
				public String TELEFONOPattern(){
				
					return "";
				
				}
				public String TELEFONOOriginalDbColumnName(){
				
					return "TELEFONO";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return null;
				}
				public Integer CELULARPrecision(){
				    return null;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public String CORREO_ELECTRONICO;

				public String getCORREO_ELECTRONICO () {
					return this.CORREO_ELECTRONICO;
				}

				public Boolean CORREO_ELECTRONICOIsNullable(){
				    return true;
				}
				public Boolean CORREO_ELECTRONICOIsKey(){
				    return false;
				}
				public Integer CORREO_ELECTRONICOLength(){
				    return null;
				}
				public Integer CORREO_ELECTRONICOPrecision(){
				    return null;
				}
				public String CORREO_ELECTRONICODefault(){
				
					return null;
				
				}
				public String CORREO_ELECTRONICOComment(){
				
				    return "";
				
				}
				public String CORREO_ELECTRONICOPattern(){
				
					return "";
				
				}
				public String CORREO_ELECTRONICOOriginalDbColumnName(){
				
					return "CORREO_ELECTRONICO";
				
				}

				
			    public String ZRESIDENCIA;

				public String getZRESIDENCIA () {
					return this.ZRESIDENCIA;
				}

				public Boolean ZRESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean ZRESIDENCIAIsKey(){
				    return false;
				}
				public Integer ZRESIDENCIALength(){
				    return null;
				}
				public Integer ZRESIDENCIAPrecision(){
				    return null;
				}
				public String ZRESIDENCIADefault(){
				
					return null;
				
				}
				public String ZRESIDENCIAComment(){
				
				    return "";
				
				}
				public String ZRESIDENCIAPattern(){
				
					return "";
				
				}
				public String ZRESIDENCIAOriginalDbColumnName(){
				
					return "ZRESIDENCIA";
				
				}

				
			    public String COD_PAIS_NAC;

				public String getCOD_PAIS_NAC () {
					return this.COD_PAIS_NAC;
				}

				public Boolean COD_PAIS_NACIsNullable(){
				    return true;
				}
				public Boolean COD_PAIS_NACIsKey(){
				    return false;
				}
				public Integer COD_PAIS_NACLength(){
				    return null;
				}
				public Integer COD_PAIS_NACPrecision(){
				    return null;
				}
				public String COD_PAIS_NACDefault(){
				
					return null;
				
				}
				public String COD_PAIS_NACComment(){
				
				    return "";
				
				}
				public String COD_PAIS_NACPattern(){
				
					return "";
				
				}
				public String COD_PAIS_NACOriginalDbColumnName(){
				
					return "COD_PAIS_NAC";
				
				}

				
			    public String COD_DEPARTAMENTO_NAC;

				public String getCOD_DEPARTAMENTO_NAC () {
					return this.COD_DEPARTAMENTO_NAC;
				}

				public Boolean COD_DEPARTAMENTO_NACIsNullable(){
				    return true;
				}
				public Boolean COD_DEPARTAMENTO_NACIsKey(){
				    return false;
				}
				public Integer COD_DEPARTAMENTO_NACLength(){
				    return null;
				}
				public Integer COD_DEPARTAMENTO_NACPrecision(){
				    return null;
				}
				public String COD_DEPARTAMENTO_NACDefault(){
				
					return null;
				
				}
				public String COD_DEPARTAMENTO_NACComment(){
				
				    return "";
				
				}
				public String COD_DEPARTAMENTO_NACPattern(){
				
					return "";
				
				}
				public String COD_DEPARTAMENTO_NACOriginalDbColumnName(){
				
					return "COD_DEPARTAMENTO_NAC";
				
				}

				
			    public String COD_MCIPIO_NAC;

				public String getCOD_MCIPIO_NAC () {
					return this.COD_MCIPIO_NAC;
				}

				public Boolean COD_MCIPIO_NACIsNullable(){
				    return true;
				}
				public Boolean COD_MCIPIO_NACIsKey(){
				    return false;
				}
				public Integer COD_MCIPIO_NACLength(){
				    return null;
				}
				public Integer COD_MCIPIO_NACPrecision(){
				    return null;
				}
				public String COD_MCIPIO_NACDefault(){
				
					return null;
				
				}
				public String COD_MCIPIO_NACComment(){
				
				    return "";
				
				}
				public String COD_MCIPIO_NACPattern(){
				
					return "";
				
				}
				public String COD_MCIPIO_NACOriginalDbColumnName(){
				
					return "COD_MCIPIO_NAC";
				
				}

				
			    public String COD_PAIS_EXP;

				public String getCOD_PAIS_EXP () {
					return this.COD_PAIS_EXP;
				}

				public Boolean COD_PAIS_EXPIsNullable(){
				    return true;
				}
				public Boolean COD_PAIS_EXPIsKey(){
				    return false;
				}
				public Integer COD_PAIS_EXPLength(){
				    return null;
				}
				public Integer COD_PAIS_EXPPrecision(){
				    return null;
				}
				public String COD_PAIS_EXPDefault(){
				
					return null;
				
				}
				public String COD_PAIS_EXPComment(){
				
				    return "";
				
				}
				public String COD_PAIS_EXPPattern(){
				
					return "";
				
				}
				public String COD_PAIS_EXPOriginalDbColumnName(){
				
					return "COD_PAIS_EXP";
				
				}

				
			    public String COD_DEPTO_EXP;

				public String getCOD_DEPTO_EXP () {
					return this.COD_DEPTO_EXP;
				}

				public Boolean COD_DEPTO_EXPIsNullable(){
				    return true;
				}
				public Boolean COD_DEPTO_EXPIsKey(){
				    return false;
				}
				public Integer COD_DEPTO_EXPLength(){
				    return null;
				}
				public Integer COD_DEPTO_EXPPrecision(){
				    return null;
				}
				public String COD_DEPTO_EXPDefault(){
				
					return null;
				
				}
				public String COD_DEPTO_EXPComment(){
				
				    return "";
				
				}
				public String COD_DEPTO_EXPPattern(){
				
					return "";
				
				}
				public String COD_DEPTO_EXPOriginalDbColumnName(){
				
					return "COD_DEPTO_EXP";
				
				}

				
			    public String COD_MCIPIO_EXP;

				public String getCOD_MCIPIO_EXP () {
					return this.COD_MCIPIO_EXP;
				}

				public Boolean COD_MCIPIO_EXPIsNullable(){
				    return true;
				}
				public Boolean COD_MCIPIO_EXPIsKey(){
				    return false;
				}
				public Integer COD_MCIPIO_EXPLength(){
				    return null;
				}
				public Integer COD_MCIPIO_EXPPrecision(){
				    return null;
				}
				public String COD_MCIPIO_EXPDefault(){
				
					return null;
				
				}
				public String COD_MCIPIO_EXPComment(){
				
				    return "";
				
				}
				public String COD_MCIPIO_EXPPattern(){
				
					return "";
				
				}
				public String COD_MCIPIO_EXPOriginalDbColumnName(){
				
					return "COD_MCIPIO_EXP";
				
				}

				
			    public String FECHA_EXPEDICION_DOCUMENTO;

				public String getFECHA_EXPEDICION_DOCUMENTO () {
					return this.FECHA_EXPEDICION_DOCUMENTO;
				}

				public Boolean FECHA_EXPEDICION_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_EXPEDICION_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOLength(){
				    return null;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOPrecision(){
				    return null;
				}
				public String FECHA_EXPEDICION_DOCUMENTODefault(){
				
					return null;
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOOriginalDbColumnName(){
				
					return "FECHA_EXPEDICION_DOCUMENTO";
				
				}

				
			    public String PAIS_RESIDENCIA;

				public String getPAIS_RESIDENCIA () {
					return this.PAIS_RESIDENCIA;
				}

				public Boolean PAIS_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean PAIS_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer PAIS_RESIDENCIALength(){
				    return null;
				}
				public Integer PAIS_RESIDENCIAPrecision(){
				    return null;
				}
				public String PAIS_RESIDENCIADefault(){
				
					return null;
				
				}
				public String PAIS_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String PAIS_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String PAIS_RESIDENCIAOriginalDbColumnName(){
				
					return "PAIS_RESIDENCIA";
				
				}

				
			    public String DEPARTAMENTO_RESIDENCIA;

				public String getDEPARTAMENTO_RESIDENCIA () {
					return this.DEPARTAMENTO_RESIDENCIA;
				}

				public Boolean DEPARTAMENTO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean DEPARTAMENTO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer DEPARTAMENTO_RESIDENCIALength(){
				    return null;
				}
				public Integer DEPARTAMENTO_RESIDENCIAPrecision(){
				    return null;
				}
				public String DEPARTAMENTO_RESIDENCIADefault(){
				
					return null;
				
				}
				public String DEPARTAMENTO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String DEPARTAMENTO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String DEPARTAMENTO_RESIDENCIAOriginalDbColumnName(){
				
					return "DEPARTAMENTO_RESIDENCIA";
				
				}

				
			    public String MUNICIPIO_RESIDENCIA;

				public String getMUNICIPIO_RESIDENCIA () {
					return this.MUNICIPIO_RESIDENCIA;
				}

				public Boolean MUNICIPIO_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean MUNICIPIO_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer MUNICIPIO_RESIDENCIALength(){
				    return null;
				}
				public Integer MUNICIPIO_RESIDENCIAPrecision(){
				    return null;
				}
				public String MUNICIPIO_RESIDENCIADefault(){
				
					return null;
				
				}
				public String MUNICIPIO_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String MUNICIPIO_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String MUNICIPIO_RESIDENCIAOriginalDbColumnName(){
				
					return "MUNICIPIO_RESIDENCIA";
				
				}

				
			    public String LOCALIDAD_RESIDENCIA;

				public String getLOCALIDAD_RESIDENCIA () {
					return this.LOCALIDAD_RESIDENCIA;
				}

				public Boolean LOCALIDAD_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean LOCALIDAD_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer LOCALIDAD_RESIDENCIALength(){
				    return null;
				}
				public Integer LOCALIDAD_RESIDENCIAPrecision(){
				    return null;
				}
				public String LOCALIDAD_RESIDENCIADefault(){
				
					return null;
				
				}
				public String LOCALIDAD_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String LOCALIDAD_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String LOCALIDAD_RESIDENCIAOriginalDbColumnName(){
				
					return "LOCALIDAD_RESIDENCIA";
				
				}

				
			    public String GRUPO_SANGUINEO;

				public String getGRUPO_SANGUINEO () {
					return this.GRUPO_SANGUINEO;
				}

				public Boolean GRUPO_SANGUINEOIsNullable(){
				    return true;
				}
				public Boolean GRUPO_SANGUINEOIsKey(){
				    return false;
				}
				public Integer GRUPO_SANGUINEOLength(){
				    return null;
				}
				public Integer GRUPO_SANGUINEOPrecision(){
				    return null;
				}
				public String GRUPO_SANGUINEODefault(){
				
					return null;
				
				}
				public String GRUPO_SANGUINEOComment(){
				
				    return "";
				
				}
				public String GRUPO_SANGUINEOPattern(){
				
					return "";
				
				}
				public String GRUPO_SANGUINEOOriginalDbColumnName(){
				
					return "GRUPO_SANGUINEO";
				
				}

				
			    public String ESTATURA;

				public String getESTATURA () {
					return this.ESTATURA;
				}

				public Boolean ESTATURAIsNullable(){
				    return true;
				}
				public Boolean ESTATURAIsKey(){
				    return false;
				}
				public Integer ESTATURALength(){
				    return null;
				}
				public Integer ESTATURAPrecision(){
				    return null;
				}
				public String ESTATURADefault(){
				
					return null;
				
				}
				public String ESTATURAComment(){
				
				    return "";
				
				}
				public String ESTATURAPattern(){
				
					return "";
				
				}
				public String ESTATURAOriginalDbColumnName(){
				
					return "ESTATURA";
				
				}

				
			    public String OCUPACION;

				public String getOCUPACION () {
					return this.OCUPACION;
				}

				public Boolean OCUPACIONIsNullable(){
				    return true;
				}
				public Boolean OCUPACIONIsKey(){
				    return false;
				}
				public Integer OCUPACIONLength(){
				    return null;
				}
				public Integer OCUPACIONPrecision(){
				    return null;
				}
				public String OCUPACIONDefault(){
				
					return null;
				
				}
				public String OCUPACIONComment(){
				
				    return "";
				
				}
				public String OCUPACIONPattern(){
				
					return "";
				
				}
				public String OCUPACIONOriginalDbColumnName(){
				
					return "OCUPACION";
				
				}

				
			    public String FACTOR_RH;

				public String getFACTOR_RH () {
					return this.FACTOR_RH;
				}

				public Boolean FACTOR_RHIsNullable(){
				    return true;
				}
				public Boolean FACTOR_RHIsKey(){
				    return false;
				}
				public Integer FACTOR_RHLength(){
				    return null;
				}
				public Integer FACTOR_RHPrecision(){
				    return null;
				}
				public String FACTOR_RHDefault(){
				
					return null;
				
				}
				public String FACTOR_RHComment(){
				
				    return "";
				
				}
				public String FACTOR_RHPattern(){
				
					return "";
				
				}
				public String FACTOR_RHOriginalDbColumnName(){
				
					return "FACTOR_RH";
				
				}

				
			    public String GRUPO_ETNICO;

				public String getGRUPO_ETNICO () {
					return this.GRUPO_ETNICO;
				}

				public Boolean GRUPO_ETNICOIsNullable(){
				    return true;
				}
				public Boolean GRUPO_ETNICOIsKey(){
				    return false;
				}
				public Integer GRUPO_ETNICOLength(){
				    return null;
				}
				public Integer GRUPO_ETNICOPrecision(){
				    return null;
				}
				public String GRUPO_ETNICODefault(){
				
					return null;
				
				}
				public String GRUPO_ETNICOComment(){
				
				    return "";
				
				}
				public String GRUPO_ETNICOPattern(){
				
					return "";
				
				}
				public String GRUPO_ETNICOOriginalDbColumnName(){
				
					return "GRUPO_ETNICO";
				
				}

				
			    public String NSOCIOECONOMICO;

				public String getNSOCIOECONOMICO () {
					return this.NSOCIOECONOMICO;
				}

				public Boolean NSOCIOECONOMICOIsNullable(){
				    return true;
				}
				public Boolean NSOCIOECONOMICOIsKey(){
				    return false;
				}
				public Integer NSOCIOECONOMICOLength(){
				    return null;
				}
				public Integer NSOCIOECONOMICOPrecision(){
				    return null;
				}
				public String NSOCIOECONOMICODefault(){
				
					return null;
				
				}
				public String NSOCIOECONOMICOComment(){
				
				    return "";
				
				}
				public String NSOCIOECONOMICOPattern(){
				
					return "";
				
				}
				public String NSOCIOECONOMICOOriginalDbColumnName(){
				
					return "NSOCIOECONOMICO";
				
				}

				
			    public String TVIVIENDA;

				public String getTVIVIENDA () {
					return this.TVIVIENDA;
				}

				public Boolean TVIVIENDAIsNullable(){
				    return true;
				}
				public Boolean TVIVIENDAIsKey(){
				    return false;
				}
				public Integer TVIVIENDALength(){
				    return null;
				}
				public Integer TVIVIENDAPrecision(){
				    return null;
				}
				public String TVIVIENDADefault(){
				
					return null;
				
				}
				public String TVIVIENDAComment(){
				
				    return "";
				
				}
				public String TVIVIENDAPattern(){
				
					return "";
				
				}
				public String TVIVIENDAOriginalDbColumnName(){
				
					return "TVIVIENDA";
				
				}

				
			    public String NEDUCATIVOS;

				public String getNEDUCATIVOS () {
					return this.NEDUCATIVOS;
				}

				public Boolean NEDUCATIVOSIsNullable(){
				    return true;
				}
				public Boolean NEDUCATIVOSIsKey(){
				    return false;
				}
				public Integer NEDUCATIVOSLength(){
				    return null;
				}
				public Integer NEDUCATIVOSPrecision(){
				    return null;
				}
				public String NEDUCATIVOSDefault(){
				
					return null;
				
				}
				public String NEDUCATIVOSComment(){
				
				    return "";
				
				}
				public String NEDUCATIVOSPattern(){
				
					return "";
				
				}
				public String NEDUCATIVOSOriginalDbColumnName(){
				
					return "NEDUCATIVOS";
				
				}

				
			    public String CODIGO_ESTABLECIMIENTO;

				public String getCODIGO_ESTABLECIMIENTO () {
					return this.CODIGO_ESTABLECIMIENTO;
				}

				public Boolean CODIGO_ESTABLECIMIENTOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_ESTABLECIMIENTOIsKey(){
				    return false;
				}
				public Integer CODIGO_ESTABLECIMIENTOLength(){
				    return null;
				}
				public Integer CODIGO_ESTABLECIMIENTOPrecision(){
				    return null;
				}
				public String CODIGO_ESTABLECIMIENTODefault(){
				
					return null;
				
				}
				public String CODIGO_ESTABLECIMIENTOComment(){
				
				    return "";
				
				}
				public String CODIGO_ESTABLECIMIENTOPattern(){
				
					return "";
				
				}
				public String CODIGO_ESTABLECIMIENTOOriginalDbColumnName(){
				
					return "CODIGO_ESTABLECIMIENTO";
				
				}

				
			    public String ESTABLECIMIENTO_ADSCRITO;

				public String getESTABLECIMIENTO_ADSCRITO () {
					return this.ESTABLECIMIENTO_ADSCRITO;
				}

				public Boolean ESTABLECIMIENTO_ADSCRITOIsNullable(){
				    return true;
				}
				public Boolean ESTABLECIMIENTO_ADSCRITOIsKey(){
				    return false;
				}
				public Integer ESTABLECIMIENTO_ADSCRITOLength(){
				    return null;
				}
				public Integer ESTABLECIMIENTO_ADSCRITOPrecision(){
				    return null;
				}
				public String ESTABLECIMIENTO_ADSCRITODefault(){
				
					return null;
				
				}
				public String ESTABLECIMIENTO_ADSCRITOComment(){
				
				    return "";
				
				}
				public String ESTABLECIMIENTO_ADSCRITOPattern(){
				
					return "";
				
				}
				public String ESTABLECIMIENTO_ADSCRITOOriginalDbColumnName(){
				
					return "ESTABLECIMIENTO_ADSCRITO";
				
				}

				
			    public String FECHA_DE_INGRESO;

				public String getFECHA_DE_INGRESO () {
					return this.FECHA_DE_INGRESO;
				}

				public Boolean FECHA_DE_INGRESOIsNullable(){
				    return true;
				}
				public Boolean FECHA_DE_INGRESOIsKey(){
				    return false;
				}
				public Integer FECHA_DE_INGRESOLength(){
				    return null;
				}
				public Integer FECHA_DE_INGRESOPrecision(){
				    return null;
				}
				public String FECHA_DE_INGRESODefault(){
				
					return null;
				
				}
				public String FECHA_DE_INGRESOComment(){
				
				    return "";
				
				}
				public String FECHA_DE_INGRESOPattern(){
				
					return "";
				
				}
				public String FECHA_DE_INGRESOOriginalDbColumnName(){
				
					return "FECHA_DE_INGRESO";
				
				}

				
			    public String ENTIDAD_APORTANTE;

				public String getENTIDAD_APORTANTE () {
					return this.ENTIDAD_APORTANTE;
				}

				public Boolean ENTIDAD_APORTANTEIsNullable(){
				    return true;
				}
				public Boolean ENTIDAD_APORTANTEIsKey(){
				    return false;
				}
				public Integer ENTIDAD_APORTANTELength(){
				    return null;
				}
				public Integer ENTIDAD_APORTANTEPrecision(){
				    return null;
				}
				public String ENTIDAD_APORTANTEDefault(){
				
					return null;
				
				}
				public String ENTIDAD_APORTANTEComment(){
				
				    return "";
				
				}
				public String ENTIDAD_APORTANTEPattern(){
				
					return "";
				
				}
				public String ENTIDAD_APORTANTEOriginalDbColumnName(){
				
					return "ENTIDAD_APORTANTE";
				
				}

				
			    public String CODIGO_GRDMILITAR;

				public String getCODIGO_GRDMILITAR () {
					return this.CODIGO_GRDMILITAR;
				}

				public Boolean CODIGO_GRDMILITARIsNullable(){
				    return true;
				}
				public Boolean CODIGO_GRDMILITARIsKey(){
				    return false;
				}
				public Integer CODIGO_GRDMILITARLength(){
				    return null;
				}
				public Integer CODIGO_GRDMILITARPrecision(){
				    return null;
				}
				public String CODIGO_GRDMILITARDefault(){
				
					return null;
				
				}
				public String CODIGO_GRDMILITARComment(){
				
				    return "";
				
				}
				public String CODIGO_GRDMILITARPattern(){
				
					return "";
				
				}
				public String CODIGO_GRDMILITAROriginalDbColumnName(){
				
					return "CODIGO_GRDMILITAR";
				
				}

				
			    public String SIGLA_GRDMILITAR;

				public String getSIGLA_GRDMILITAR () {
					return this.SIGLA_GRDMILITAR;
				}

				public Boolean SIGLA_GRDMILITARIsNullable(){
				    return true;
				}
				public Boolean SIGLA_GRDMILITARIsKey(){
				    return false;
				}
				public Integer SIGLA_GRDMILITARLength(){
				    return null;
				}
				public Integer SIGLA_GRDMILITARPrecision(){
				    return null;
				}
				public String SIGLA_GRDMILITARDefault(){
				
					return null;
				
				}
				public String SIGLA_GRDMILITARComment(){
				
				    return "";
				
				}
				public String SIGLA_GRDMILITARPattern(){
				
					return "";
				
				}
				public String SIGLA_GRDMILITAROriginalDbColumnName(){
				
					return "SIGLA_GRDMILITAR";
				
				}

				
			    public String FUERZA_MILITAR;

				public String getFUERZA_MILITAR () {
					return this.FUERZA_MILITAR;
				}

				public Boolean FUERZA_MILITARIsNullable(){
				    return true;
				}
				public Boolean FUERZA_MILITARIsKey(){
				    return false;
				}
				public Integer FUERZA_MILITARLength(){
				    return null;
				}
				public Integer FUERZA_MILITARPrecision(){
				    return null;
				}
				public String FUERZA_MILITARDefault(){
				
					return null;
				
				}
				public String FUERZA_MILITARComment(){
				
				    return "";
				
				}
				public String FUERZA_MILITARPattern(){
				
					return "";
				
				}
				public String FUERZA_MILITAROriginalDbColumnName(){
				
					return "FUERZA_MILITAR";
				
				}

				
			    public String CODIGO_UMILITAR;

				public String getCODIGO_UMILITAR () {
					return this.CODIGO_UMILITAR;
				}

				public Boolean CODIGO_UMILITARIsNullable(){
				    return true;
				}
				public Boolean CODIGO_UMILITARIsKey(){
				    return false;
				}
				public Integer CODIGO_UMILITARLength(){
				    return null;
				}
				public Integer CODIGO_UMILITARPrecision(){
				    return null;
				}
				public String CODIGO_UMILITARDefault(){
				
					return null;
				
				}
				public String CODIGO_UMILITARComment(){
				
				    return "";
				
				}
				public String CODIGO_UMILITARPattern(){
				
					return "";
				
				}
				public String CODIGO_UMILITAROriginalDbColumnName(){
				
					return "CODIGO_UMILITAR";
				
				}

				
			    public String UNIDAD_MILITAR;

				public String getUNIDAD_MILITAR () {
					return this.UNIDAD_MILITAR;
				}

				public Boolean UNIDAD_MILITARIsNullable(){
				    return true;
				}
				public Boolean UNIDAD_MILITARIsKey(){
				    return false;
				}
				public Integer UNIDAD_MILITARLength(){
				    return null;
				}
				public Integer UNIDAD_MILITARPrecision(){
				    return null;
				}
				public String UNIDAD_MILITARDefault(){
				
					return null;
				
				}
				public String UNIDAD_MILITARComment(){
				
				    return "";
				
				}
				public String UNIDAD_MILITARPattern(){
				
					return "";
				
				}
				public String UNIDAD_MILITAROriginalDbColumnName(){
				
					return "UNIDAD_MILITAR";
				
				}

				
			    public String TIPO_DE_VINCULACION;

				public String getTIPO_DE_VINCULACION () {
					return this.TIPO_DE_VINCULACION;
				}

				public Boolean TIPO_DE_VINCULACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_DE_VINCULACIONIsKey(){
				    return false;
				}
				public Integer TIPO_DE_VINCULACIONLength(){
				    return null;
				}
				public Integer TIPO_DE_VINCULACIONPrecision(){
				    return null;
				}
				public String TIPO_DE_VINCULACIONDefault(){
				
					return null;
				
				}
				public String TIPO_DE_VINCULACIONComment(){
				
				    return "";
				
				}
				public String TIPO_DE_VINCULACIONPattern(){
				
					return "";
				
				}
				public String TIPO_DE_VINCULACIONOriginalDbColumnName(){
				
					return "TIPO_DE_VINCULACION";
				
				}

				
			    public String ESTADO_AFILIACION;

				public String getESTADO_AFILIACION () {
					return this.ESTADO_AFILIACION;
				}

				public Boolean ESTADO_AFILIACIONIsNullable(){
				    return true;
				}
				public Boolean ESTADO_AFILIACIONIsKey(){
				    return false;
				}
				public Integer ESTADO_AFILIACIONLength(){
				    return null;
				}
				public Integer ESTADO_AFILIACIONPrecision(){
				    return null;
				}
				public String ESTADO_AFILIACIONDefault(){
				
					return null;
				
				}
				public String ESTADO_AFILIACIONComment(){
				
				    return "";
				
				}
				public String ESTADO_AFILIACIONPattern(){
				
					return "";
				
				}
				public String ESTADO_AFILIACIONOriginalDbColumnName(){
				
					return "ESTADO_AFILIACION";
				
				}

				
			    public String MOTIVO_ESTADO;

				public String getMOTIVO_ESTADO () {
					return this.MOTIVO_ESTADO;
				}

				public Boolean MOTIVO_ESTADOIsNullable(){
				    return true;
				}
				public Boolean MOTIVO_ESTADOIsKey(){
				    return false;
				}
				public Integer MOTIVO_ESTADOLength(){
				    return null;
				}
				public Integer MOTIVO_ESTADOPrecision(){
				    return null;
				}
				public String MOTIVO_ESTADODefault(){
				
					return null;
				
				}
				public String MOTIVO_ESTADOComment(){
				
				    return "";
				
				}
				public String MOTIVO_ESTADOPattern(){
				
					return "";
				
				}
				public String MOTIVO_ESTADOOriginalDbColumnName(){
				
					return "MOTIVO_ESTADO";
				
				}

				
			    public String FECHA_ESTADO;

				public String getFECHA_ESTADO () {
					return this.FECHA_ESTADO;
				}

				public Boolean FECHA_ESTADOIsNullable(){
				    return true;
				}
				public Boolean FECHA_ESTADOIsKey(){
				    return false;
				}
				public Integer FECHA_ESTADOLength(){
				    return null;
				}
				public Integer FECHA_ESTADOPrecision(){
				    return null;
				}
				public String FECHA_ESTADODefault(){
				
					return null;
				
				}
				public String FECHA_ESTADOComment(){
				
				    return "";
				
				}
				public String FECHA_ESTADOPattern(){
				
					return "";
				
				}
				public String FECHA_ESTADOOriginalDbColumnName(){
				
					return "FECHA_ESTADO";
				
				}

				
			    public String FECHA_FIN_AFILIACION;

				public String getFECHA_FIN_AFILIACION () {
					return this.FECHA_FIN_AFILIACION;
				}

				public Boolean FECHA_FIN_AFILIACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_FIN_AFILIACIONIsKey(){
				    return false;
				}
				public Integer FECHA_FIN_AFILIACIONLength(){
				    return null;
				}
				public Integer FECHA_FIN_AFILIACIONPrecision(){
				    return null;
				}
				public String FECHA_FIN_AFILIACIONDefault(){
				
					return null;
				
				}
				public String FECHA_FIN_AFILIACIONComment(){
				
				    return "";
				
				}
				public String FECHA_FIN_AFILIACIONPattern(){
				
					return "";
				
				}
				public String FECHA_FIN_AFILIACIONOriginalDbColumnName(){
				
					return "FECHA_FIN_AFILIACION";
				
				}

				
			    public String FECHA_VINCULACION;

				public String getFECHA_VINCULACION () {
					return this.FECHA_VINCULACION;
				}

				public Boolean FECHA_VINCULACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_VINCULACIONIsKey(){
				    return false;
				}
				public Integer FECHA_VINCULACIONLength(){
				    return null;
				}
				public Integer FECHA_VINCULACIONPrecision(){
				    return null;
				}
				public String FECHA_VINCULACIONDefault(){
				
					return null;
				
				}
				public String FECHA_VINCULACIONComment(){
				
				    return "";
				
				}
				public String FECHA_VINCULACIONPattern(){
				
					return "";
				
				}
				public String FECHA_VINCULACIONOriginalDbColumnName(){
				
					return "FECHA_VINCULACION";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.TIPO_DE_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.SEXO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.ESTADO_CIVIL = readString(dis);
					
					this.DISCAPACIDAD = readString(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.CORREO_ELECTRONICO = readString(dis);
					
					this.ZRESIDENCIA = readString(dis);
					
					this.COD_PAIS_NAC = readString(dis);
					
					this.COD_DEPARTAMENTO_NAC = readString(dis);
					
					this.COD_MCIPIO_NAC = readString(dis);
					
					this.COD_PAIS_EXP = readString(dis);
					
					this.COD_DEPTO_EXP = readString(dis);
					
					this.COD_MCIPIO_EXP = readString(dis);
					
					this.FECHA_EXPEDICION_DOCUMENTO = readString(dis);
					
					this.PAIS_RESIDENCIA = readString(dis);
					
					this.DEPARTAMENTO_RESIDENCIA = readString(dis);
					
					this.MUNICIPIO_RESIDENCIA = readString(dis);
					
					this.LOCALIDAD_RESIDENCIA = readString(dis);
					
					this.GRUPO_SANGUINEO = readString(dis);
					
					this.ESTATURA = readString(dis);
					
					this.OCUPACION = readString(dis);
					
					this.FACTOR_RH = readString(dis);
					
					this.GRUPO_ETNICO = readString(dis);
					
					this.NSOCIOECONOMICO = readString(dis);
					
					this.TVIVIENDA = readString(dis);
					
					this.NEDUCATIVOS = readString(dis);
					
					this.CODIGO_ESTABLECIMIENTO = readString(dis);
					
					this.ESTABLECIMIENTO_ADSCRITO = readString(dis);
					
					this.FECHA_DE_INGRESO = readString(dis);
					
					this.ENTIDAD_APORTANTE = readString(dis);
					
					this.CODIGO_GRDMILITAR = readString(dis);
					
					this.SIGLA_GRDMILITAR = readString(dis);
					
					this.FUERZA_MILITAR = readString(dis);
					
					this.CODIGO_UMILITAR = readString(dis);
					
					this.UNIDAD_MILITAR = readString(dis);
					
					this.TIPO_DE_VINCULACION = readString(dis);
					
					this.ESTADO_AFILIACION = readString(dis);
					
					this.MOTIVO_ESTADO = readString(dis);
					
					this.FECHA_ESTADO = readString(dis);
					
					this.FECHA_FIN_AFILIACION = readString(dis);
					
					this.FECHA_VINCULACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.TIPO_DE_DOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.SEXO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.ESTADO_CIVIL = readString(dis);
					
					this.DISCAPACIDAD = readString(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.CORREO_ELECTRONICO = readString(dis);
					
					this.ZRESIDENCIA = readString(dis);
					
					this.COD_PAIS_NAC = readString(dis);
					
					this.COD_DEPARTAMENTO_NAC = readString(dis);
					
					this.COD_MCIPIO_NAC = readString(dis);
					
					this.COD_PAIS_EXP = readString(dis);
					
					this.COD_DEPTO_EXP = readString(dis);
					
					this.COD_MCIPIO_EXP = readString(dis);
					
					this.FECHA_EXPEDICION_DOCUMENTO = readString(dis);
					
					this.PAIS_RESIDENCIA = readString(dis);
					
					this.DEPARTAMENTO_RESIDENCIA = readString(dis);
					
					this.MUNICIPIO_RESIDENCIA = readString(dis);
					
					this.LOCALIDAD_RESIDENCIA = readString(dis);
					
					this.GRUPO_SANGUINEO = readString(dis);
					
					this.ESTATURA = readString(dis);
					
					this.OCUPACION = readString(dis);
					
					this.FACTOR_RH = readString(dis);
					
					this.GRUPO_ETNICO = readString(dis);
					
					this.NSOCIOECONOMICO = readString(dis);
					
					this.TVIVIENDA = readString(dis);
					
					this.NEDUCATIVOS = readString(dis);
					
					this.CODIGO_ESTABLECIMIENTO = readString(dis);
					
					this.ESTABLECIMIENTO_ADSCRITO = readString(dis);
					
					this.FECHA_DE_INGRESO = readString(dis);
					
					this.ENTIDAD_APORTANTE = readString(dis);
					
					this.CODIGO_GRDMILITAR = readString(dis);
					
					this.SIGLA_GRDMILITAR = readString(dis);
					
					this.FUERZA_MILITAR = readString(dis);
					
					this.CODIGO_UMILITAR = readString(dis);
					
					this.UNIDAD_MILITAR = readString(dis);
					
					this.TIPO_DE_VINCULACION = readString(dis);
					
					this.ESTADO_AFILIACION = readString(dis);
					
					this.MOTIVO_ESTADO = readString(dis);
					
					this.FECHA_ESTADO = readString(dis);
					
					this.FECHA_FIN_AFILIACION = readString(dis);
					
					this.FECHA_VINCULACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.TIPO_DE_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.ESTADO_CIVIL,dos);
					
					// String
				
						writeString(this.DISCAPACIDAD,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO,dos);
					
					// String
				
						writeString(this.ZRESIDENCIA,dos);
					
					// String
				
						writeString(this.COD_PAIS_NAC,dos);
					
					// String
				
						writeString(this.COD_DEPARTAMENTO_NAC,dos);
					
					// String
				
						writeString(this.COD_MCIPIO_NAC,dos);
					
					// String
				
						writeString(this.COD_PAIS_EXP,dos);
					
					// String
				
						writeString(this.COD_DEPTO_EXP,dos);
					
					// String
				
						writeString(this.COD_MCIPIO_EXP,dos);
					
					// String
				
						writeString(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// String
				
						writeString(this.PAIS_RESIDENCIA,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MUNICIPIO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.LOCALIDAD_RESIDENCIA,dos);
					
					// String
				
						writeString(this.GRUPO_SANGUINEO,dos);
					
					// String
				
						writeString(this.ESTATURA,dos);
					
					// String
				
						writeString(this.OCUPACION,dos);
					
					// String
				
						writeString(this.FACTOR_RH,dos);
					
					// String
				
						writeString(this.GRUPO_ETNICO,dos);
					
					// String
				
						writeString(this.NSOCIOECONOMICO,dos);
					
					// String
				
						writeString(this.TVIVIENDA,dos);
					
					// String
				
						writeString(this.NEDUCATIVOS,dos);
					
					// String
				
						writeString(this.CODIGO_ESTABLECIMIENTO,dos);
					
					// String
				
						writeString(this.ESTABLECIMIENTO_ADSCRITO,dos);
					
					// String
				
						writeString(this.FECHA_DE_INGRESO,dos);
					
					// String
				
						writeString(this.ENTIDAD_APORTANTE,dos);
					
					// String
				
						writeString(this.CODIGO_GRDMILITAR,dos);
					
					// String
				
						writeString(this.SIGLA_GRDMILITAR,dos);
					
					// String
				
						writeString(this.FUERZA_MILITAR,dos);
					
					// String
				
						writeString(this.CODIGO_UMILITAR,dos);
					
					// String
				
						writeString(this.UNIDAD_MILITAR,dos);
					
					// String
				
						writeString(this.TIPO_DE_VINCULACION,dos);
					
					// String
				
						writeString(this.ESTADO_AFILIACION,dos);
					
					// String
				
						writeString(this.MOTIVO_ESTADO,dos);
					
					// String
				
						writeString(this.FECHA_ESTADO,dos);
					
					// String
				
						writeString(this.FECHA_FIN_AFILIACION,dos);
					
					// String
				
						writeString(this.FECHA_VINCULACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.TIPO_DE_DOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.SEXO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.ESTADO_CIVIL,dos);
					
					// String
				
						writeString(this.DISCAPACIDAD,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO,dos);
					
					// String
				
						writeString(this.ZRESIDENCIA,dos);
					
					// String
				
						writeString(this.COD_PAIS_NAC,dos);
					
					// String
				
						writeString(this.COD_DEPARTAMENTO_NAC,dos);
					
					// String
				
						writeString(this.COD_MCIPIO_NAC,dos);
					
					// String
				
						writeString(this.COD_PAIS_EXP,dos);
					
					// String
				
						writeString(this.COD_DEPTO_EXP,dos);
					
					// String
				
						writeString(this.COD_MCIPIO_EXP,dos);
					
					// String
				
						writeString(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// String
				
						writeString(this.PAIS_RESIDENCIA,dos);
					
					// String
				
						writeString(this.DEPARTAMENTO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.MUNICIPIO_RESIDENCIA,dos);
					
					// String
				
						writeString(this.LOCALIDAD_RESIDENCIA,dos);
					
					// String
				
						writeString(this.GRUPO_SANGUINEO,dos);
					
					// String
				
						writeString(this.ESTATURA,dos);
					
					// String
				
						writeString(this.OCUPACION,dos);
					
					// String
				
						writeString(this.FACTOR_RH,dos);
					
					// String
				
						writeString(this.GRUPO_ETNICO,dos);
					
					// String
				
						writeString(this.NSOCIOECONOMICO,dos);
					
					// String
				
						writeString(this.TVIVIENDA,dos);
					
					// String
				
						writeString(this.NEDUCATIVOS,dos);
					
					// String
				
						writeString(this.CODIGO_ESTABLECIMIENTO,dos);
					
					// String
				
						writeString(this.ESTABLECIMIENTO_ADSCRITO,dos);
					
					// String
				
						writeString(this.FECHA_DE_INGRESO,dos);
					
					// String
				
						writeString(this.ENTIDAD_APORTANTE,dos);
					
					// String
				
						writeString(this.CODIGO_GRDMILITAR,dos);
					
					// String
				
						writeString(this.SIGLA_GRDMILITAR,dos);
					
					// String
				
						writeString(this.FUERZA_MILITAR,dos);
					
					// String
				
						writeString(this.CODIGO_UMILITAR,dos);
					
					// String
				
						writeString(this.UNIDAD_MILITAR,dos);
					
					// String
				
						writeString(this.TIPO_DE_VINCULACION,dos);
					
					// String
				
						writeString(this.ESTADO_AFILIACION,dos);
					
					// String
				
						writeString(this.MOTIVO_ESTADO,dos);
					
					// String
				
						writeString(this.FECHA_ESTADO,dos);
					
					// String
				
						writeString(this.FECHA_FIN_AFILIACION,dos);
					
					// String
				
						writeString(this.FECHA_VINCULACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",TIPO_DE_DOCUMENTO="+TIPO_DE_DOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",SEXO="+SEXO);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",ESTADO_CIVIL="+ESTADO_CIVIL);
		sb.append(",DISCAPACIDAD="+DISCAPACIDAD);
		sb.append(",DIRECCION="+DIRECCION);
		sb.append(",TELEFONO="+TELEFONO);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",CORREO_ELECTRONICO="+CORREO_ELECTRONICO);
		sb.append(",ZRESIDENCIA="+ZRESIDENCIA);
		sb.append(",COD_PAIS_NAC="+COD_PAIS_NAC);
		sb.append(",COD_DEPARTAMENTO_NAC="+COD_DEPARTAMENTO_NAC);
		sb.append(",COD_MCIPIO_NAC="+COD_MCIPIO_NAC);
		sb.append(",COD_PAIS_EXP="+COD_PAIS_EXP);
		sb.append(",COD_DEPTO_EXP="+COD_DEPTO_EXP);
		sb.append(",COD_MCIPIO_EXP="+COD_MCIPIO_EXP);
		sb.append(",FECHA_EXPEDICION_DOCUMENTO="+FECHA_EXPEDICION_DOCUMENTO);
		sb.append(",PAIS_RESIDENCIA="+PAIS_RESIDENCIA);
		sb.append(",DEPARTAMENTO_RESIDENCIA="+DEPARTAMENTO_RESIDENCIA);
		sb.append(",MUNICIPIO_RESIDENCIA="+MUNICIPIO_RESIDENCIA);
		sb.append(",LOCALIDAD_RESIDENCIA="+LOCALIDAD_RESIDENCIA);
		sb.append(",GRUPO_SANGUINEO="+GRUPO_SANGUINEO);
		sb.append(",ESTATURA="+ESTATURA);
		sb.append(",OCUPACION="+OCUPACION);
		sb.append(",FACTOR_RH="+FACTOR_RH);
		sb.append(",GRUPO_ETNICO="+GRUPO_ETNICO);
		sb.append(",NSOCIOECONOMICO="+NSOCIOECONOMICO);
		sb.append(",TVIVIENDA="+TVIVIENDA);
		sb.append(",NEDUCATIVOS="+NEDUCATIVOS);
		sb.append(",CODIGO_ESTABLECIMIENTO="+CODIGO_ESTABLECIMIENTO);
		sb.append(",ESTABLECIMIENTO_ADSCRITO="+ESTABLECIMIENTO_ADSCRITO);
		sb.append(",FECHA_DE_INGRESO="+FECHA_DE_INGRESO);
		sb.append(",ENTIDAD_APORTANTE="+ENTIDAD_APORTANTE);
		sb.append(",CODIGO_GRDMILITAR="+CODIGO_GRDMILITAR);
		sb.append(",SIGLA_GRDMILITAR="+SIGLA_GRDMILITAR);
		sb.append(",FUERZA_MILITAR="+FUERZA_MILITAR);
		sb.append(",CODIGO_UMILITAR="+CODIGO_UMILITAR);
		sb.append(",UNIDAD_MILITAR="+UNIDAD_MILITAR);
		sb.append(",TIPO_DE_VINCULACION="+TIPO_DE_VINCULACION);
		sb.append(",ESTADO_AFILIACION="+ESTADO_AFILIACION);
		sb.append(",MOTIVO_ESTADO="+MOTIVO_ESTADO);
		sb.append(",FECHA_ESTADO="+FECHA_ESTADO);
		sb.append(",FECHA_FIN_AFILIACION="+FECHA_FIN_AFILIACION);
		sb.append(",FECHA_VINCULACION="+FECHA_VINCULACION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
crgInicialStruct crgInicial = new crgInicialStruct();
row6Struct row6 = new row6Struct();






	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
        dbschema_tOracleOutput_1 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("TST_ARCHIVO");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("TST_ARCHIVO");
        }
            int rsTruncCountNumber_tOracleOutput_1 = 0;
            try(java.sql.Statement stmtTruncCount_tOracleOutput_1 = conn_tOracleOutput_1.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tOracleOutput_1 = stmtTruncCount_tOracleOutput_1.executeQuery("SELECT COUNT(1) FROM " + tableName_tOracleOutput_1 + "")) {
                    if(rsTruncCount_tOracleOutput_1.next()) {
                        rsTruncCountNumber_tOracleOutput_1 = rsTruncCount_tOracleOutput_1.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tOracleOutput_1 = conn_tOracleOutput_1.createStatement()) {
                stmtTrunc_tOracleOutput_1.executeUpdate("TRUNCATE TABLE " + tableName_tOracleOutput_1 + "");
                deletedCount_tOracleOutput_1 += rsTruncCountNumber_tOracleOutput_1;
            }
                String insert_tOracleOutput_1 = "INSERT INTO " + tableName_tOracleOutput_1 + " (PRIMER_NOMBRE,SEGUNDO_NOMBRE,PRIMER_APELLIDO,SEGUNDO_APELLIDO,TIPO_DE_DOCUMENTO,DOCUMENTO,SEXO,FECHA_NACIMIENTO,ESTADO_CIVIL,DISCAPACIDAD,DIRECCION,TELEFONO,CELULAR,CORREO_ELECTRONICO,ZRESIDENCIA,PAIS_NACIMIENTO,DEPARTAMENTO_NACIMIENTO,MUNICIPIO_NACIMIENTO,PAIS_EXP_DOCUMENTO,DEPTO_EXP_DOCUMENTO,MUNICIPIO_EXP_DOCUMENTO,FECHA_EXPEDICION_DOCUMENTO,PAIS_RESIDENCIA,DEPARTAMENTO_RESIDENCIA,MUNICIPIO_RESIDENCIA,LOCALIDAD_RESIDENCIA,GRUPO_SANGUINEO,ESTATURA,OCUPACION,FACTOR_RH,GRUPO_ETNICO,NSOCIOECONOMICO,TVIVIENDA,NEDUCATIVOS,CODIGO_ESTABLECIMIENTO,ESTABLECIMIENTO_ADSCRITO,FECHA_DE_INGRESO,ENTIDAD_APORTANTE,CODIGO_GRDMILITAR,SIGLA_GRDMILITAR,FUERZA_MILITAR,CODIGO_UMILITAR,UNIDAD_MILITAR,TIPO_DE_VINCULACION,ESTADO_AFILIACION,MOTIVO_ESTADO,FECHA_ESTADO,FECHA_FIN_AFILIACION,FECHA_VINCULACION) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(insert_tOracleOutput_1);
                        resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"crgInicial");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	String FECHA_NACIMIENTO;
	String FECHA_DE_INGRESO;
	String FECHA_ESTADO;
	String FECHA_FIN_AFILIACION;
	String FECHA_VINCULACION;
	String FECHA_EXP_DOCUMENTO;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
crgInicialStruct crgInicial_tmp = new crgInicialStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";
	
	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = (java.io.InputStream)context.contenido;
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited((java.io.InputStream)context.contenido, "ISO-8859-1",";","\n",true,0,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row2 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row2 = new row2Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							row2.PRIMER_NOMBRE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row2.SEGUNDO_NOMBRE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
							row2.PRIMER_APELLIDO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
							row2.SEGUNDO_APELLIDO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
							row2.TIPO_DE_DOCUMENTO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
							row2.DOCUMENTO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
							row2.SEXO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
							row2.FECHA_NACIMIENTO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
							row2.ESTADO_CIVIL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
							row2.DISCAPACIDAD = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
							row2.DIRECCION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 11;
					
							row2.TELEFONO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 12;
					
							row2.CELULAR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 13;
					
							row2.CORREO_ELECTRONICO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 14;
					
							row2.ZRESIDENCIA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 15;
					
							row2.COD_PAIS_NAC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 16;
					
							row2.COD_DEPARTAMENTO_NAC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 17;
					
							row2.COD_MCIPIO_NAC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 18;
					
							row2.COD_PAIS_EXP = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 19;
					
							row2.COD_DEPTO_EXP = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 20;
					
							row2.COD_MCIPIO_EXP = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 21;
					
							row2.FECHA_EXPEDICION_DOCUMENTO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 22;
					
							row2.PAIS_RESIDENCIA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 23;
					
							row2.DEPARTAMENTO_RESIDENCIA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 24;
					
							row2.MUNICIPIO_RESIDENCIA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 25;
					
							row2.LOCALIDAD_RESIDENCIA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 26;
					
							row2.GRUPO_SANGUINEO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 27;
					
							row2.ESTATURA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 28;
					
							row2.OCUPACION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 29;
					
							row2.FACTOR_RH = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 30;
					
							row2.GRUPO_ETNICO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 31;
					
							row2.NSOCIOECONOMICO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 32;
					
							row2.TVIVIENDA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 33;
					
							row2.NEDUCATIVOS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 34;
					
							row2.CODIGO_ESTABLECIMIENTO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 35;
					
							row2.ESTABLECIMIENTO_ADSCRITO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 36;
					
							row2.FECHA_DE_INGRESO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 37;
					
							row2.ENTIDAD_APORTANTE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 38;
					
							row2.CODIGO_GRDMILITAR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 39;
					
							row2.SIGLA_GRDMILITAR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 40;
					
							row2.FUERZA_MILITAR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 41;
					
							row2.CODIGO_UMILITAR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 42;
					
							row2.UNIDAD_MILITAR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 43;
					
							row2.TIPO_DE_VINCULACION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 44;
					
							row2.ESTADO_AFILIACION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 45;
					
							row2.MOTIVO_ESTADO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 46;
					
							row2.FECHA_ESTADO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 47;
					
							row2.FECHA_FIN_AFILIACION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 48;
					
							row2.FECHA_VINCULACION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row2 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.FECHA_NACIMIENTO = row2.FECHA_NACIMIENTO!=null?
(TalendDate.isDate(row2.FECHA_NACIMIENTO ,"dd/MM/yyyy")==true?
row2.FECHA_NACIMIENTO:"Invalida"):null ;
Var.FECHA_DE_INGRESO = row2.FECHA_DE_INGRESO!=null?
(TalendDate.isDate(row2.FECHA_DE_INGRESO ,"dd/MM/yyyy")==true?
row2.FECHA_DE_INGRESO:"Invalida"):null ;
Var.FECHA_ESTADO = row2.FECHA_ESTADO!=null?
(TalendDate.isDate(row2.FECHA_ESTADO ,"dd/MM/yyyy")==true?
row2.FECHA_ESTADO:"Invalida"):null ;
Var.FECHA_FIN_AFILIACION = row2.FECHA_FIN_AFILIACION!=null?
(TalendDate.isDate(row2.FECHA_FIN_AFILIACION ,"dd/MM/yyyy")==true?
row2.FECHA_FIN_AFILIACION:"Invalida"):null ;
Var.FECHA_VINCULACION = row2.FECHA_VINCULACION!=null?
(TalendDate.isDate(row2.FECHA_VINCULACION ,"dd/MM/yyyy")==true?
row2.FECHA_VINCULACION:"Invalida"):null ;
Var.FECHA_EXP_DOCUMENTO = row2.FECHA_EXPEDICION_DOCUMENTO!=null?
(TalendDate.isDate(row2.FECHA_EXPEDICION_DOCUMENTO ,"dd/MM/yyyy")==true?
row2.FECHA_EXPEDICION_DOCUMENTO:"Invalida"):null ;// ###############################
        // ###############################
        // # Output tables

crgInicial = null;


// # Output table : 'crgInicial'
// # Filter conditions 
if( 

row2.PRIMER_NOMBRE != "PRIMER_NOMBRE"

 ) {
crgInicial_tmp.PRIMER_NOMBRE = row2.PRIMER_NOMBRE ;
crgInicial_tmp.SEGUNDO_NOMBRE = row2.SEGUNDO_NOMBRE ;
crgInicial_tmp.PRIMER_APELLIDO = row2.PRIMER_APELLIDO ;
crgInicial_tmp.SEGUNDO_APELLIDO = row2.SEGUNDO_APELLIDO ;
crgInicial_tmp.TIPO_DE_DOCUMENTO = row2.TIPO_DE_DOCUMENTO ;
crgInicial_tmp.DOCUMENTO = row2.DOCUMENTO ;
crgInicial_tmp.SEXO = row2.SEXO ;
crgInicial_tmp.FECHA_NACIMIENTO = Var.FECHA_NACIMIENTO ;
crgInicial_tmp.ESTADO_CIVIL = row2.ESTADO_CIVIL ;
crgInicial_tmp.DISCAPACIDAD = row2.DISCAPACIDAD ;
crgInicial_tmp.DIRECCION = row2.DIRECCION ;
crgInicial_tmp.TELEFONO = row2.TELEFONO ;
crgInicial_tmp.CELULAR = row2.CELULAR ;
crgInicial_tmp.CORREO_ELECTRONICO = row2.CORREO_ELECTRONICO ;
crgInicial_tmp.ZRESIDENCIA = row2.ZRESIDENCIA ;
crgInicial_tmp.PAIS_NACIMIENTO = row2.COD_PAIS_NAC ;
crgInicial_tmp.DEPARTAMENTO_NACIMIENTO = row2.COD_DEPARTAMENTO_NAC ;
crgInicial_tmp.MUNICIPIO_NACIMIENTO = row2.COD_MCIPIO_NAC ;
crgInicial_tmp.PAIS_EXP_DOCUMENTO = row2.COD_PAIS_EXP ;
crgInicial_tmp.DEPTO_EXP_DOCUMENTO = row2.COD_DEPTO_EXP ;
crgInicial_tmp.MUNICIPIO_EXP_DOCUMENTO = row2.COD_MCIPIO_EXP ;
crgInicial_tmp.FECHA_EXPEDICION_DOCUMENTO = Var.FECHA_EXP_DOCUMENTO ;
crgInicial_tmp.PAIS_RESIDENCIA = row2.PAIS_RESIDENCIA ;
crgInicial_tmp.DEPARTAMENTO_RESIDENCIA = row2.DEPARTAMENTO_RESIDENCIA ;
crgInicial_tmp.MUNICIPIO_RESIDENCIA = row2.MUNICIPIO_RESIDENCIA ;
crgInicial_tmp.LOCALIDAD_RESIDENCIA = row2.LOCALIDAD_RESIDENCIA ;
crgInicial_tmp.GRUPO_SANGUINEO = row2.GRUPO_SANGUINEO ;
crgInicial_tmp.ESTATURA = row2.ESTATURA ;
crgInicial_tmp.OCUPACION = row2.OCUPACION ;
crgInicial_tmp.FACTOR_RH = row2.FACTOR_RH ;
crgInicial_tmp.GRUPO_ETNICO = row2.GRUPO_ETNICO ;
crgInicial_tmp.NSOCIOECONOMICO = row2.NSOCIOECONOMICO ;
crgInicial_tmp.TVIVIENDA = row2.TVIVIENDA ;
crgInicial_tmp.NEDUCATIVOS = row2.NEDUCATIVOS ;
crgInicial_tmp.CODIGO_ESTABLECIMIENTO = row2.CODIGO_ESTABLECIMIENTO ;
crgInicial_tmp.ESTABLECIMIENTO_ADSCRITO = row2.ESTABLECIMIENTO_ADSCRITO ;
crgInicial_tmp.FECHA_DE_INGRESO = Var.FECHA_DE_INGRESO ;
crgInicial_tmp.ENTIDAD_APORTANTE = row2.ENTIDAD_APORTANTE ;
crgInicial_tmp.CODIGO_GRDMILITAR = row2.CODIGO_GRDMILITAR ;
crgInicial_tmp.SIGLA_GRDMILITAR = row2.SIGLA_GRDMILITAR ;
crgInicial_tmp.FUERZA_MILITAR = row2.FUERZA_MILITAR ;
crgInicial_tmp.CODIGO_UMILITAR = row2.CODIGO_UMILITAR ;
crgInicial_tmp.UNIDAD_MILITAR = row2.UNIDAD_MILITAR ;
crgInicial_tmp.TIPO_DE_VINCULACION = row2.TIPO_DE_VINCULACION ;
crgInicial_tmp.ESTADO_AFILIACION = row2.ESTADO_AFILIACION ;
crgInicial_tmp.MOTIVO_ESTADO = row2.MOTIVO_ESTADO ;
crgInicial_tmp.FECHA_ESTADO = Var.FECHA_ESTADO ;
crgInicial_tmp.FECHA_FIN_AFILIACION = Var.FECHA_FIN_AFILIACION ;
crgInicial_tmp.FECHA_VINCULACION = Var.FECHA_VINCULACION ;
crgInicial = crgInicial_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "crgInicial"
if(crgInicial != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"crgInicial"
						
						);
					}
					

    //Code generate according to input schema and output schema
if (crgInicial.PRIMER_NOMBRE != "PRIMER_NOMBRE"){
row6.PRIMER_NOMBRE = crgInicial.PRIMER_NOMBRE;
row6.SEGUNDO_NOMBRE = crgInicial.SEGUNDO_NOMBRE;
row6.PRIMER_APELLIDO = crgInicial.PRIMER_APELLIDO;
row6.SEGUNDO_APELLIDO = crgInicial.SEGUNDO_APELLIDO;
row6.TIPO_DE_DOCUMENTO = crgInicial.TIPO_DE_DOCUMENTO;
row6.DOCUMENTO = crgInicial.DOCUMENTO;
row6.SEXO = crgInicial.SEXO;
row6.FECHA_NACIMIENTO = crgInicial.FECHA_NACIMIENTO;
row6.ESTADO_CIVIL = crgInicial.ESTADO_CIVIL;
row6.DISCAPACIDAD = crgInicial.DISCAPACIDAD;
row6.DIRECCION = crgInicial.DIRECCION;
row6.TELEFONO = crgInicial.TELEFONO;
row6.CELULAR = crgInicial.CELULAR;
row6.CORREO_ELECTRONICO = crgInicial.CORREO_ELECTRONICO;
row6.ZRESIDENCIA = crgInicial.ZRESIDENCIA;
row6.PAIS_NACIMIENTO = crgInicial.PAIS_NACIMIENTO;
row6.DEPARTAMENTO_NACIMIENTO = crgInicial.DEPARTAMENTO_NACIMIENTO;
row6.MUNICIPIO_NACIMIENTO = crgInicial.MUNICIPIO_NACIMIENTO;
row6.PAIS_EXP_DOCUMENTO = crgInicial.PAIS_EXP_DOCUMENTO;
row6.DEPTO_EXP_DOCUMENTO = crgInicial.DEPTO_EXP_DOCUMENTO;
row6.MUNICIPIO_EXP_DOCUMENTO = crgInicial.MUNICIPIO_EXP_DOCUMENTO;
row6.FECHA_EXPEDICION_DOCUMENTO = crgInicial.FECHA_EXPEDICION_DOCUMENTO;
row6.PAIS_RESIDENCIA = crgInicial.PAIS_RESIDENCIA;
row6.DEPARTAMENTO_RESIDENCIA = crgInicial.DEPARTAMENTO_RESIDENCIA;
row6.MUNICIPIO_RESIDENCIA = crgInicial.MUNICIPIO_RESIDENCIA;
row6.LOCALIDAD_RESIDENCIA = crgInicial.LOCALIDAD_RESIDENCIA;
row6.GRUPO_SANGUINEO = crgInicial.GRUPO_SANGUINEO;
row6.ESTATURA = crgInicial.ESTATURA;
row6.OCUPACION = crgInicial.OCUPACION;
row6.FACTOR_RH = crgInicial.FACTOR_RH;
row6.GRUPO_ETNICO = crgInicial.GRUPO_ETNICO;
row6.NSOCIOECONOMICO = crgInicial.NSOCIOECONOMICO;
row6.TVIVIENDA = crgInicial.TVIVIENDA;
row6.NEDUCATIVOS = crgInicial.NEDUCATIVOS;
row6.CODIGO_ESTABLECIMIENTO = crgInicial.CODIGO_ESTABLECIMIENTO;
row6.ESTABLECIMIENTO_ADSCRITO = crgInicial.ESTABLECIMIENTO_ADSCRITO;
row6.FECHA_DE_INGRESO = crgInicial.FECHA_DE_INGRESO;
row6.ENTIDAD_APORTANTE = crgInicial.ENTIDAD_APORTANTE;
row6.CODIGO_GRDMILITAR = crgInicial.CODIGO_GRDMILITAR;
row6.SIGLA_GRDMILITAR = crgInicial.SIGLA_GRDMILITAR;
row6.FUERZA_MILITAR = crgInicial.FUERZA_MILITAR;
row6.CODIGO_UMILITAR = crgInicial.CODIGO_UMILITAR;
row6.UNIDAD_MILITAR = crgInicial.UNIDAD_MILITAR;
row6.TIPO_DE_VINCULACION = crgInicial.TIPO_DE_VINCULACION;
row6.ESTADO_AFILIACION = crgInicial.ESTADO_AFILIACION;
row6.MOTIVO_ESTADO = crgInicial.MOTIVO_ESTADO;
row6.FECHA_ESTADO = crgInicial.FECHA_ESTADO;
row6.FECHA_FIN_AFILIACION = crgInicial.FECHA_FIN_AFILIACION;
row6.FECHA_VINCULACION = crgInicial.FECHA_VINCULACION;

context.cregistros = context.cregistros + 1;
}
else
{
context.mensaje= "LOL";
}

    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					



        whetherReject_tOracleOutput_1 = false;
                        if(row6.PRIMER_NOMBRE == null) {
pstmt_tOracleOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(1, row6.PRIMER_NOMBRE);
}

                        if(row6.SEGUNDO_NOMBRE == null) {
pstmt_tOracleOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(2, row6.SEGUNDO_NOMBRE);
}

                        if(row6.PRIMER_APELLIDO == null) {
pstmt_tOracleOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(3, row6.PRIMER_APELLIDO);
}

                        if(row6.SEGUNDO_APELLIDO == null) {
pstmt_tOracleOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(4, row6.SEGUNDO_APELLIDO);
}

                        if(row6.TIPO_DE_DOCUMENTO == null) {
pstmt_tOracleOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(5, row6.TIPO_DE_DOCUMENTO);
}

                        if(row6.DOCUMENTO == null) {
pstmt_tOracleOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(6, row6.DOCUMENTO);
}

                        if(row6.SEXO == null) {
pstmt_tOracleOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(7, row6.SEXO);
}

                        if(row6.FECHA_NACIMIENTO == null) {
pstmt_tOracleOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(8, row6.FECHA_NACIMIENTO);
}

                        if(row6.ESTADO_CIVIL == null) {
pstmt_tOracleOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(9, row6.ESTADO_CIVIL);
}

                        if(row6.DISCAPACIDAD == null) {
pstmt_tOracleOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(10, row6.DISCAPACIDAD);
}

                        if(row6.DIRECCION == null) {
pstmt_tOracleOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(11, row6.DIRECCION);
}

                        if(row6.TELEFONO == null) {
pstmt_tOracleOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(12, row6.TELEFONO);
}

                        if(row6.CELULAR == null) {
pstmt_tOracleOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(13, row6.CELULAR);
}

                        if(row6.CORREO_ELECTRONICO == null) {
pstmt_tOracleOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(14, row6.CORREO_ELECTRONICO);
}

                        if(row6.ZRESIDENCIA == null) {
pstmt_tOracleOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(15, row6.ZRESIDENCIA);
}

                        if(row6.PAIS_NACIMIENTO == null) {
pstmt_tOracleOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(16, row6.PAIS_NACIMIENTO);
}

                        if(row6.DEPARTAMENTO_NACIMIENTO == null) {
pstmt_tOracleOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(17, row6.DEPARTAMENTO_NACIMIENTO);
}

                        if(row6.MUNICIPIO_NACIMIENTO == null) {
pstmt_tOracleOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(18, row6.MUNICIPIO_NACIMIENTO);
}

                        if(row6.PAIS_EXP_DOCUMENTO == null) {
pstmt_tOracleOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(19, row6.PAIS_EXP_DOCUMENTO);
}

                        if(row6.DEPTO_EXP_DOCUMENTO == null) {
pstmt_tOracleOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(20, row6.DEPTO_EXP_DOCUMENTO);
}

                        if(row6.MUNICIPIO_EXP_DOCUMENTO == null) {
pstmt_tOracleOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(21, row6.MUNICIPIO_EXP_DOCUMENTO);
}

                        if(row6.FECHA_EXPEDICION_DOCUMENTO == null) {
pstmt_tOracleOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(22, row6.FECHA_EXPEDICION_DOCUMENTO);
}

                        if(row6.PAIS_RESIDENCIA == null) {
pstmt_tOracleOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(23, row6.PAIS_RESIDENCIA);
}

                        if(row6.DEPARTAMENTO_RESIDENCIA == null) {
pstmt_tOracleOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(24, row6.DEPARTAMENTO_RESIDENCIA);
}

                        if(row6.MUNICIPIO_RESIDENCIA == null) {
pstmt_tOracleOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(25, row6.MUNICIPIO_RESIDENCIA);
}

                        if(row6.LOCALIDAD_RESIDENCIA == null) {
pstmt_tOracleOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(26, row6.LOCALIDAD_RESIDENCIA);
}

                        if(row6.GRUPO_SANGUINEO == null) {
pstmt_tOracleOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(27, row6.GRUPO_SANGUINEO);
}

                        if(row6.ESTATURA == null) {
pstmt_tOracleOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(28, row6.ESTATURA);
}

                        if(row6.OCUPACION == null) {
pstmt_tOracleOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(29, row6.OCUPACION);
}

                        if(row6.FACTOR_RH == null) {
pstmt_tOracleOutput_1.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(30, row6.FACTOR_RH);
}

                        if(row6.GRUPO_ETNICO == null) {
pstmt_tOracleOutput_1.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(31, row6.GRUPO_ETNICO);
}

                        if(row6.NSOCIOECONOMICO == null) {
pstmt_tOracleOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(32, row6.NSOCIOECONOMICO);
}

                        if(row6.TVIVIENDA == null) {
pstmt_tOracleOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(33, row6.TVIVIENDA);
}

                        if(row6.NEDUCATIVOS == null) {
pstmt_tOracleOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(34, row6.NEDUCATIVOS);
}

                        if(row6.CODIGO_ESTABLECIMIENTO == null) {
pstmt_tOracleOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(35, row6.CODIGO_ESTABLECIMIENTO);
}

                        if(row6.ESTABLECIMIENTO_ADSCRITO == null) {
pstmt_tOracleOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(36, row6.ESTABLECIMIENTO_ADSCRITO);
}

                        if(row6.FECHA_DE_INGRESO == null) {
pstmt_tOracleOutput_1.setNull(37, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(37, row6.FECHA_DE_INGRESO);
}

                        if(row6.ENTIDAD_APORTANTE == null) {
pstmt_tOracleOutput_1.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(38, row6.ENTIDAD_APORTANTE);
}

                        if(row6.CODIGO_GRDMILITAR == null) {
pstmt_tOracleOutput_1.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(39, row6.CODIGO_GRDMILITAR);
}

                        if(row6.SIGLA_GRDMILITAR == null) {
pstmt_tOracleOutput_1.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(40, row6.SIGLA_GRDMILITAR);
}

                        if(row6.FUERZA_MILITAR == null) {
pstmt_tOracleOutput_1.setNull(41, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(41, row6.FUERZA_MILITAR);
}

                        if(row6.CODIGO_UMILITAR == null) {
pstmt_tOracleOutput_1.setNull(42, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(42, row6.CODIGO_UMILITAR);
}

                        if(row6.UNIDAD_MILITAR == null) {
pstmt_tOracleOutput_1.setNull(43, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(43, row6.UNIDAD_MILITAR);
}

                        if(row6.TIPO_DE_VINCULACION == null) {
pstmt_tOracleOutput_1.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(44, row6.TIPO_DE_VINCULACION);
}

                        if(row6.ESTADO_AFILIACION == null) {
pstmt_tOracleOutput_1.setNull(45, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(45, row6.ESTADO_AFILIACION);
}

                        if(row6.MOTIVO_ESTADO == null) {
pstmt_tOracleOutput_1.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(46, row6.MOTIVO_ESTADO);
}

                        if(row6.FECHA_ESTADO == null) {
pstmt_tOracleOutput_1.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(47, row6.FECHA_ESTADO);
}

                        if(row6.FECHA_FIN_AFILIACION == null) {
pstmt_tOracleOutput_1.setNull(48, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(48, row6.FECHA_FIN_AFILIACION);
}

                        if(row6.FECHA_VINCULACION == null) {
pstmt_tOracleOutput_1.setNull(49, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(49, row6.FECHA_VINCULACION);
}

                try {
                    nb_line_tOracleOutput_1++;
                    int processedCount_tOracleOutput_1 = pstmt_tOracleOutput_1.executeUpdate();
                    insertedCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    rowsToCommitCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                } catch(java.lang.Exception e_tOracleOutput_1) {
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
                    whetherReject_tOracleOutput_1 = true;
                            System.err.print(e_tOracleOutput_1.getMessage());
                }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */

} // End of branch "crgInicial"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	



            }
            }finally{
                if(!((Object)((java.io.InputStream)context.contenido) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"crgInicial");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */

	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(pstmt_tOracleOutput_1 != null) {
			
				pstmt_tOracleOutput_1.close();
				resourceMap.remove("pstmt_tOracleOutput_1");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());




/**
 * [tOracleOutput_1 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tJava_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */

	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


String foo = "bar";
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());

   			if (((Integer)globalMap.get("tFileInputDelimited_1_NB_LINE")) <= 1) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				tFixedFlowInput_12Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}
   			if (((Integer)globalMap.get("tFileInputDelimited_1_NB_LINE")) > 1) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If20", 0, "true");
					}
				tFixedFlowInput_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If20", 0, "false");
					}   	 
   				}



/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class row51Struct implements routines.system.IPersistableRow<row51Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer archivos_id_;

				public Integer getArchivos_id_ () {
					return this.archivos_id_;
				}

				public Boolean archivos_id_IsNullable(){
				    return true;
				}
				public Boolean archivos_id_IsKey(){
				    return false;
				}
				public Integer archivos_id_Length(){
				    return null;
				}
				public Integer archivos_id_Precision(){
				    return null;
				}
				public String archivos_id_Default(){
				
					return null;
				
				}
				public String archivos_id_Comment(){
				
				    return "";
				
				}
				public String archivos_id_Pattern(){
				
					return "";
				
				}
				public String archivos_id_OriginalDbColumnName(){
				
					return "archivos_id_";
				
				}

				
			    public Integer estado_;

				public Integer getEstado_ () {
					return this.estado_;
				}

				public Boolean estado_IsNullable(){
				    return true;
				}
				public Boolean estado_IsKey(){
				    return false;
				}
				public Integer estado_Length(){
				    return null;
				}
				public Integer estado_Precision(){
				    return null;
				}
				public String estado_Default(){
				
					return null;
				
				}
				public String estado_Comment(){
				
				    return "";
				
				}
				public String estado_Pattern(){
				
					return "";
				
				}
				public String estado_OriginalDbColumnName(){
				
					return "estado_";
				
				}

				
			    public java.util.Date finicio_;

				public java.util.Date getFinicio_ () {
					return this.finicio_;
				}

				public Boolean finicio_IsNullable(){
				    return true;
				}
				public Boolean finicio_IsKey(){
				    return false;
				}
				public Integer finicio_Length(){
				    return null;
				}
				public Integer finicio_Precision(){
				    return null;
				}
				public String finicio_Default(){
				
					return null;
				
				}
				public String finicio_Comment(){
				
				    return "";
				
				}
				public String finicio_Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String finicio_OriginalDbColumnName(){
				
					return "finicio_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("archivos_id_="+String.valueOf(archivos_id_));
		sb.append(",estado_="+String.valueOf(estado_));
		sb.append(",finicio_="+String.valueOf(finicio_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row51Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row51Struct row51 = new row51Struct();




	
	/**
	 * [tOracleSP_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_8", false);
		start_Hash.put("tOracleSP_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row51");
					}
				
		int tos_count_tOracleSP_8 = 0;
		

	java.sql.Connection connection_tOracleSP_8 = null;
	connection_tOracleSP_8 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_2");
	

java.sql.CallableStatement statement_tOracleSP_8 = connection_tOracleSP_8.prepareCall("{call " + "cms2.updestadoarchivo" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_8;
String tmpString_tOracleSP_8;

 



/**
 * [tOracleSP_8 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_12", false);
		start_Hash.put("tFixedFlowInput_12", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_12";
	
	
		int tos_count_tFixedFlowInput_12 = 0;
		

	    for (int i_tFixedFlowInput_12 = 0 ; i_tFixedFlowInput_12 < 1 ; i_tFixedFlowInput_12++) {
	                	            	
    	            		row51.archivos_id_ = context.afiarchivos_id;
    	            	        	            	
    	            		row51.estado_ = 8;
    	            	        	            	
    	            		row51.finicio_ = context.vfinicio;
    	            	

 



/**
 * [tFixedFlowInput_12 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_12 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_12";
	
	

 


	tos_count_tFixedFlowInput_12++;

/**
 * [tFixedFlowInput_12 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_12";
	
	

 



/**
 * [tFixedFlowInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_8 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row51"
						
						);
					}
					

			// code for the argument 1 (archivos_id_) of type 'IN AUTOMAPPING'
    					if (row51.archivos_id_ == null) {
    						statement_tOracleSP_8.setNull(1, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_8.setInt(1, row51.archivos_id_);
    					}
    					
			// code for the argument 2 (estado_) of type 'IN AUTOMAPPING'
    					if (row51.estado_ == null) {
    						statement_tOracleSP_8.setNull(2, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_8.setInt(2, row51.estado_);
    					}
    					
			// code for the argument 3 (finicio_) of type 'IN TIMESTAMP'
    					if (row51.finicio_ == null) {
    						statement_tOracleSP_8.setNull(3, java.sql.Types.DATE);
    					} else {
    					
    					statement_tOracleSP_8.setTimestamp(3, new java.sql.Timestamp(row51.finicio_.getTime()));
    					
    					}
    					
		statement_tOracleSP_8.execute();
		

 


	tos_count_tOracleSP_8++;

/**
 * [tOracleSP_8 main ] stop
 */
	
	/**
	 * [tOracleSP_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_8";
	
	

 



/**
 * [tOracleSP_8 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_8";
	
	

 



/**
 * [tOracleSP_8 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_12";
	
	

 



/**
 * [tFixedFlowInput_12 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_12 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_12";
	
	

        }
        globalMap.put("tFixedFlowInput_12_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_12", true);
end_Hash.put("tFixedFlowInput_12", System.currentTimeMillis());




/**
 * [tFixedFlowInput_12 end ] stop
 */

	
	/**
	 * [tOracleSP_8 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_8";
	
	


	statement_tOracleSP_8.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row51");
			  	}
			  	
 

ok_Hash.put("tOracleSP_8", true);
end_Hash.put("tOracleSP_8", System.currentTimeMillis());

   			if (context.cregistros <= 1) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If5", 0, "true");
					}
				tFixedFlowInput_4Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If5", 0, "false");
					}   	 
   				}



/**
 * [tOracleSP_8 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_12 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_12";
	
	

 



/**
 * [tFixedFlowInput_12 finally ] stop
 */

	
	/**
	 * [tOracleSP_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_8";
	
	

 



/**
 * [tOracleSP_8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class row37Struct implements routines.system.IPersistableRow<row37Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String respuesta;

				public String getRespuesta () {
					return this.respuesta;
				}

				public Boolean respuestaIsNullable(){
				    return true;
				}
				public Boolean respuestaIsKey(){
				    return false;
				}
				public Integer respuestaLength(){
				    return null;
				}
				public Integer respuestaPrecision(){
				    return null;
				}
				public String respuestaDefault(){
				
					return null;
				
				}
				public String respuestaComment(){
				
				    return "";
				
				}
				public String respuestaPattern(){
				
					return "";
				
				}
				public String respuestaOriginalDbColumnName(){
				
					return "respuesta";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("respuesta="+respuesta);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row37Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String respuesta;

				public String getRespuesta () {
					return this.respuesta;
				}

				public Boolean respuestaIsNullable(){
				    return true;
				}
				public Boolean respuestaIsKey(){
				    return false;
				}
				public Integer respuestaLength(){
				    return null;
				}
				public Integer respuestaPrecision(){
				    return null;
				}
				public String respuestaDefault(){
				
					return null;
				
				}
				public String respuestaComment(){
				
				    return "";
				
				}
				public String respuestaPattern(){
				
					return "";
				
				}
				public String respuestaOriginalDbColumnName(){
				
					return "respuesta";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("respuesta="+respuesta);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row36Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row36Struct row36 = new row36Struct();
row36Struct row37 = row36;





	
	/**
	 * [tDie_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_2", false);
		start_Hash.put("tDie_2", System.currentTimeMillis());
		
	
	currentComponent="tDie_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row37");
					}
				
		int tos_count_tDie_2 = 0;
		

 



/**
 * [tDie_2 begin ] stop
 */



	
	/**
	 * [tBufferOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_2", false);
		start_Hash.put("tBufferOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row36");
					}
				
		int tos_count_tBufferOutput_2 = 0;
		

 



/**
 * [tBufferOutput_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_4", false);
		start_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_4";
	
	
		int tos_count_tFixedFlowInput_4 = 0;
		

	    for (int i_tFixedFlowInput_4 = 0 ; i_tFixedFlowInput_4 < 1 ; i_tFixedFlowInput_4++) {
	                	            	
    	            		row36.respuesta = "ERROR: No hay registros por procesar";
    	            	

 



/**
 * [tFixedFlowInput_4 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 


	tos_count_tFixedFlowInput_4++;

/**
 * [tFixedFlowInput_4 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tBufferOutput_2 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row36"
						
						);
					}
					



String[] row_tBufferOutput_2=new String[]{"",};		
	    if(row36.respuesta != null){
	        
	            row_tBufferOutput_2[0] = row36.respuesta;
	                        			    
	    }else{
	    	row_tBufferOutput_2[0] = null;
	    }
	globalBuffer.add(row_tBufferOutput_2);	
	
 
     row37 = row36;


	tos_count_tBufferOutput_2++;

/**
 * [tBufferOutput_2 main ] stop
 */
	
	/**
	 * [tBufferOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

 



/**
 * [tBufferOutput_2 process_data_begin ] stop
 */

	
	/**
	 * [tDie_2 main ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row37"
						
						);
					}
					

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_2", 5, "ERROR: No hay registros por procesar", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_2_DIE_PRIORITY", 5);
	System.err.println("ERROR: No hay registros por procesar");
	
	globalMap.put("tDie_2_DIE_MESSAGE", "ERROR: No hay registros por procesar");
	globalMap.put("tDie_2_DIE_MESSAGES", "ERROR: No hay registros por procesar");
	
	} catch (Exception | Error e_tDie_2) {
	    globalMap.put("tDie_2_ERROR_MESSAGE",e_tDie_2.getMessage());
		logIgnoredError(String.format("tDie_2 - tDie failed to log message due to internal error: %s", e_tDie_2), e_tDie_2);
	}
	
	currentComponent = "tDie_2";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_2_DIE_CODE", errorCode);        

    
	if(true){	
		TDieException e_tDie_2 = new TDieException();

		

		throw e_tDie_2;
	}

 


	tos_count_tDie_2++;

/**
 * [tDie_2 main ] stop
 */
	
	/**
	 * [tDie_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

 



/**
 * [tDie_2 process_data_begin ] stop
 */
	
	/**
	 * [tDie_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

 



/**
 * [tDie_2 process_data_end ] stop
 */



	
	/**
	 * [tBufferOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

 



/**
 * [tBufferOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

        }
        globalMap.put("tFixedFlowInput_4_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_4", true);
end_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());




/**
 * [tFixedFlowInput_4 end ] stop
 */

	
	/**
	 * [tBufferOutput_2 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row36");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_2", true);
end_Hash.put("tBufferOutput_2", System.currentTimeMillis());




/**
 * [tBufferOutput_2 end ] stop
 */

	
	/**
	 * [tDie_2 end ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row37");
			  	}
			  	
 

ok_Hash.put("tDie_2", true);
end_Hash.put("tDie_2", System.currentTimeMillis());




/**
 * [tDie_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_4 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 finally ] stop
 */

	
	/**
	 * [tBufferOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";
	
	

 



/**
 * [tBufferOutput_2 finally ] stop
 */

	
	/**
	 * [tDie_2 finally ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

 



/**
 * [tDie_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer procesos_id;

				public Integer getProcesos_id () {
					return this.procesos_id;
				}

				public Boolean procesos_idIsNullable(){
				    return true;
				}
				public Boolean procesos_idIsKey(){
				    return false;
				}
				public Integer procesos_idLength(){
				    return null;
				}
				public Integer procesos_idPrecision(){
				    return null;
				}
				public String procesos_idDefault(){
				
					return null;
				
				}
				public String procesos_idComment(){
				
				    return "";
				
				}
				public String procesos_idPattern(){
				
					return "";
				
				}
				public String procesos_idOriginalDbColumnName(){
				
					return "procesos_id";
				
				}

				
			    public Integer usuarios_id;

				public Integer getUsuarios_id () {
					return this.usuarios_id;
				}

				public Boolean usuarios_idIsNullable(){
				    return true;
				}
				public Boolean usuarios_idIsKey(){
				    return false;
				}
				public Integer usuarios_idLength(){
				    return null;
				}
				public Integer usuarios_idPrecision(){
				    return null;
				}
				public String usuarios_idDefault(){
				
					return null;
				
				}
				public String usuarios_idComment(){
				
				    return "";
				
				}
				public String usuarios_idPattern(){
				
					return "";
				
				}
				public String usuarios_idOriginalDbColumnName(){
				
					return "usuarios_id";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.procesos_id = readInteger(dis);
					
						this.usuarios_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.procesos_id = readInteger(dis);
					
						this.usuarios_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.procesos_id,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.procesos_id,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("procesos_id="+String.valueOf(procesos_id));
		sb.append(",usuarios_id="+String.valueOf(usuarios_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer procesos_id_;

				public Integer getProcesos_id_ () {
					return this.procesos_id_;
				}

				public Boolean procesos_id_IsNullable(){
				    return true;
				}
				public Boolean procesos_id_IsKey(){
				    return false;
				}
				public Integer procesos_id_Length(){
				    return null;
				}
				public Integer procesos_id_Precision(){
				    return null;
				}
				public String procesos_id_Default(){
				
					return null;
				
				}
				public String procesos_id_Comment(){
				
				    return "";
				
				}
				public String procesos_id_Pattern(){
				
					return "";
				
				}
				public String procesos_id_OriginalDbColumnName(){
				
					return "procesos_id_";
				
				}

				
			    public Integer usuarios_id_;

				public Integer getUsuarios_id_ () {
					return this.usuarios_id_;
				}

				public Boolean usuarios_id_IsNullable(){
				    return true;
				}
				public Boolean usuarios_id_IsKey(){
				    return false;
				}
				public Integer usuarios_id_Length(){
				    return null;
				}
				public Integer usuarios_id_Precision(){
				    return null;
				}
				public String usuarios_id_Default(){
				
					return null;
				
				}
				public String usuarios_id_Comment(){
				
				    return "";
				
				}
				public String usuarios_id_Pattern(){
				
					return "";
				
				}
				public String usuarios_id_OriginalDbColumnName(){
				
					return "usuarios_id_";
				
				}

				
			    public Integer archivos_id_;

				public Integer getArchivos_id_ () {
					return this.archivos_id_;
				}

				public Boolean archivos_id_IsNullable(){
				    return true;
				}
				public Boolean archivos_id_IsKey(){
				    return false;
				}
				public Integer archivos_id_Length(){
				    return null;
				}
				public Integer archivos_id_Precision(){
				    return null;
				}
				public String archivos_id_Default(){
				
					return null;
				
				}
				public String archivos_id_Comment(){
				
				    return "";
				
				}
				public String archivos_id_Pattern(){
				
					return "";
				
				}
				public String archivos_id_OriginalDbColumnName(){
				
					return "archivos_id_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.procesos_id_ = readInteger(dis);
					
						this.usuarios_id_ = readInteger(dis);
					
						this.archivos_id_ = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.procesos_id_ = readInteger(dis);
					
						this.usuarios_id_ = readInteger(dis);
					
						this.archivos_id_ = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.procesos_id_,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id_,dos);
					
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.procesos_id_,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id_,dos);
					
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("procesos_id_="+String.valueOf(procesos_id_));
		sb.append(",usuarios_id_="+String.valueOf(usuarios_id_));
		sb.append(",archivos_id_="+String.valueOf(archivos_id_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer procesos_id_;

				public Integer getProcesos_id_ () {
					return this.procesos_id_;
				}

				public Boolean procesos_id_IsNullable(){
				    return true;
				}
				public Boolean procesos_id_IsKey(){
				    return false;
				}
				public Integer procesos_id_Length(){
				    return null;
				}
				public Integer procesos_id_Precision(){
				    return null;
				}
				public String procesos_id_Default(){
				
					return null;
				
				}
				public String procesos_id_Comment(){
				
				    return "";
				
				}
				public String procesos_id_Pattern(){
				
					return "";
				
				}
				public String procesos_id_OriginalDbColumnName(){
				
					return "procesos_id_";
				
				}

				
			    public Integer usuarios_id_;

				public Integer getUsuarios_id_ () {
					return this.usuarios_id_;
				}

				public Boolean usuarios_id_IsNullable(){
				    return true;
				}
				public Boolean usuarios_id_IsKey(){
				    return false;
				}
				public Integer usuarios_id_Length(){
				    return null;
				}
				public Integer usuarios_id_Precision(){
				    return null;
				}
				public String usuarios_id_Default(){
				
					return null;
				
				}
				public String usuarios_id_Comment(){
				
				    return "";
				
				}
				public String usuarios_id_Pattern(){
				
					return "";
				
				}
				public String usuarios_id_OriginalDbColumnName(){
				
					return "usuarios_id_";
				
				}

				
			    public Integer archivos_id_;

				public Integer getArchivos_id_ () {
					return this.archivos_id_;
				}

				public Boolean archivos_id_IsNullable(){
				    return true;
				}
				public Boolean archivos_id_IsKey(){
				    return false;
				}
				public Integer archivos_id_Length(){
				    return null;
				}
				public Integer archivos_id_Precision(){
				    return null;
				}
				public String archivos_id_Default(){
				
					return null;
				
				}
				public String archivos_id_Comment(){
				
				    return "";
				
				}
				public String archivos_id_Pattern(){
				
					return "";
				
				}
				public String archivos_id_OriginalDbColumnName(){
				
					return "archivos_id_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.procesos_id_ = readInteger(dis);
					
						this.usuarios_id_ = readInteger(dis);
					
						this.archivos_id_ = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.procesos_id_ = readInteger(dis);
					
						this.usuarios_id_ = readInteger(dis);
					
						this.archivos_id_ = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.procesos_id_,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id_,dos);
					
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.procesos_id_,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id_,dos);
					
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("procesos_id_="+String.valueOf(procesos_id_));
		sb.append(",usuarios_id_="+String.valueOf(usuarios_id_));
		sb.append(",archivos_id_="+String.valueOf(archivos_id_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row23Struct row23 = new row23Struct();
row21Struct row21 = new row21Struct();
row35Struct row35 = new row35Struct();






	
	/**
	 * [tOracleRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_2", false);
		start_Hash.put("tOracleRow_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row35");
					}
				
		int tos_count_tOracleRow_2 = 0;
		

	java.sql.Connection conn_tOracleRow_2 = null;
	String query_tOracleRow_2 = "";
	boolean whetherReject_tOracleRow_2 = false;
	int count_tOracleRow_2 = 0;
				conn_tOracleRow_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
			
        resourceMap.put("conn_tOracleRow_2", conn_tOracleRow_2);
        java.sql.Statement stmt_tOracleRow_2 = conn_tOracleRow_2.createStatement();
        resourceMap.put("stmt_tOracleRow_2", stmt_tOracleRow_2);

 



/**
 * [tOracleRow_2 begin ] stop
 */



	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tOracleSP_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_1", false);
		start_Hash.put("tOracleSP_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tOracleSP_1 = 0;
		

	java.sql.Connection connection_tOracleSP_1 = null;
	connection_tOracleSP_1 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_2");
	

java.sql.CallableStatement statement_tOracleSP_1 = connection_tOracleSP_1.prepareCall("{call " + "cms2.insafiprocesos" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_1;
String tmpString_tOracleSP_1;

 



/**
 * [tOracleSP_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";
	
	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row23.procesos_id_ = null;        	            	
    	            	        	            	
    	            		row23.usuarios_id_ = null;        	            	
    	            	        	            	
    	            		row23.archivos_id_ = context.afiarchivos_id;
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_1 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row23"
						
						);
					}
					

			// code for the argument 1 (procesos_id_) of type 'OUT AUTOMAPPING'
					statement_tOracleSP_1.registerOutParameter(1, java.sql.Types.INTEGER);
			// code for the argument 2 (usuarios_id_) of type 'OUT AUTOMAPPING'
					statement_tOracleSP_1.registerOutParameter(2, java.sql.Types.INTEGER);
			// code for the argument 3 (archivos_id_) of type 'IN AUTOMAPPING'
    					if (row23.archivos_id_ == null) {
    						statement_tOracleSP_1.setNull(3, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_1.setInt(3, row23.archivos_id_);
    					}
    					
		statement_tOracleSP_1.execute();
		
									row21.procesos_id_ = statement_tOracleSP_1.getInt(1);
									
									if (statement_tOracleSP_1.wasNull()) {
										row21.procesos_id_ = null;
									}
									
									row21.usuarios_id_ = statement_tOracleSP_1.getInt(2);
									
									if (statement_tOracleSP_1.wasNull()) {
										row21.usuarios_id_ = null;
									}
									
								row21.archivos_id_ = row23.archivos_id_;
								

 


	tos_count_tOracleSP_1++;

/**
 * [tOracleSP_1 main ] stop
 */
	
	/**
	 * [tOracleSP_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row21"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.vprocesos_id = row21.procesos_id_;
context.vusuarios_id = row21.usuarios_id_;


    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */

	
	/**
	 * [tOracleRow_2 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row35"
						
						);
					}
					

query_tOracleRow_2 = "truncate table tst_carguemasivo";
whetherReject_tOracleRow_2 = false;
globalMap.put("tOracleRow_2_QUERY",query_tOracleRow_2);
try {
		stmt_tOracleRow_2.execute(query_tOracleRow_2);
		
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_2_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_2 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tOracleRow_2) {
		
	}
	

 


	tos_count_tOracleRow_2++;

/**
 * [tOracleRow_2 main ] stop
 */
	
	/**
	 * [tOracleRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

 



/**
 * [tOracleRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

 



/**
 * [tOracleRow_2 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleSP_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tOracleSP_1 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	


	statement_tOracleSP_1.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tOracleSP_1", true);
end_Hash.put("tOracleSP_1", System.currentTimeMillis());




/**
 * [tOracleSP_1 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());




/**
 * [tJavaRow_3 end ] stop
 */

	
	/**
	 * [tOracleRow_2 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

	globalMap.put("tOracleRow_2_NB_LINE", count_tOracleRow_2);
        stmt_tOracleRow_2.close();
        resourceMap.remove("stmt_tOracleRow_2");
    resourceMap.put("statementClosed_tOracleRow_2", true);
    resourceMap.put("finish_tOracleRow_2", true);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row35");
			  	}
			  	
 

ok_Hash.put("tOracleRow_2", true);
end_Hash.put("tOracleRow_2", System.currentTimeMillis());

   			if (context.vprocesos_id > 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If14", 0, "true");
					}
				tFixedFlowInput_6Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If14", 0, "false");
					}   	 
   				}



/**
 * [tOracleRow_2 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tOracleSP_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 finally ] stop
 */

	
	/**
	 * [tOracleRow_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

    if (resourceMap.get("statementClosed_tOracleRow_2") == null) {
            java.sql.Statement stmtToClose_tOracleRow_2 = null;
            if ((stmtToClose_tOracleRow_2 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_2")) != null) {
                stmtToClose_tOracleRow_2.close();
            }
    }
 



/**
 * [tOracleRow_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row42Struct implements routines.system.IPersistableRow<row42Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer archivos_id_;

				public Integer getArchivos_id_ () {
					return this.archivos_id_;
				}

				public Boolean archivos_id_IsNullable(){
				    return true;
				}
				public Boolean archivos_id_IsKey(){
				    return false;
				}
				public Integer archivos_id_Length(){
				    return null;
				}
				public Integer archivos_id_Precision(){
				    return null;
				}
				public String archivos_id_Default(){
				
					return null;
				
				}
				public String archivos_id_Comment(){
				
				    return "";
				
				}
				public String archivos_id_Pattern(){
				
					return "";
				
				}
				public String archivos_id_OriginalDbColumnName(){
				
					return "archivos_id_";
				
				}

				
			    public Integer estado_;

				public Integer getEstado_ () {
					return this.estado_;
				}

				public Boolean estado_IsNullable(){
				    return true;
				}
				public Boolean estado_IsKey(){
				    return false;
				}
				public Integer estado_Length(){
				    return null;
				}
				public Integer estado_Precision(){
				    return null;
				}
				public String estado_Default(){
				
					return null;
				
				}
				public String estado_Comment(){
				
				    return "";
				
				}
				public String estado_Pattern(){
				
					return "";
				
				}
				public String estado_OriginalDbColumnName(){
				
					return "estado_";
				
				}

				
			    public java.util.Date finicio_;

				public java.util.Date getFinicio_ () {
					return this.finicio_;
				}

				public Boolean finicio_IsNullable(){
				    return true;
				}
				public Boolean finicio_IsKey(){
				    return false;
				}
				public Integer finicio_Length(){
				    return null;
				}
				public Integer finicio_Precision(){
				    return null;
				}
				public String finicio_Default(){
				
					return null;
				
				}
				public String finicio_Comment(){
				
				    return "";
				
				}
				public String finicio_Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String finicio_OriginalDbColumnName(){
				
					return "finicio_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("archivos_id_="+String.valueOf(archivos_id_));
		sb.append(",estado_="+String.valueOf(estado_));
		sb.append(",finicio_="+String.valueOf(finicio_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row42Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row42Struct row42 = new row42Struct();




	
	/**
	 * [tOracleSP_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_3", false);
		start_Hash.put("tOracleSP_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row42");
					}
				
		int tos_count_tOracleSP_3 = 0;
		

	java.sql.Connection connection_tOracleSP_3 = null;
	connection_tOracleSP_3 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_2");
	

java.sql.CallableStatement statement_tOracleSP_3 = connection_tOracleSP_3.prepareCall("{call " + "cms2.updestadoarchivo" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_3;
String tmpString_tOracleSP_3;

 



/**
 * [tOracleSP_3 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_6", false);
		start_Hash.put("tFixedFlowInput_6", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_6";
	
	
		int tos_count_tFixedFlowInput_6 = 0;
		

	    for (int i_tFixedFlowInput_6 = 0 ; i_tFixedFlowInput_6 < 1 ; i_tFixedFlowInput_6++) {
	                	            	
    	            		row42.archivos_id_ = context.afiarchivos_id;
    	            	        	            	
    	            		row42.estado_ = 5;
    	            	        	            	
    	            		row42.finicio_ = context.vfinicio;
    	            	

 



/**
 * [tFixedFlowInput_6 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_6 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 


	tos_count_tFixedFlowInput_6++;

/**
 * [tFixedFlowInput_6 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 



/**
 * [tFixedFlowInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_3 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row42"
						
						);
					}
					

			// code for the argument 1 (archivos_id_) of type 'IN AUTOMAPPING'
    					if (row42.archivos_id_ == null) {
    						statement_tOracleSP_3.setNull(1, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_3.setInt(1, row42.archivos_id_);
    					}
    					
			// code for the argument 2 (estado_) of type 'IN AUTOMAPPING'
    					if (row42.estado_ == null) {
    						statement_tOracleSP_3.setNull(2, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_3.setInt(2, row42.estado_);
    					}
    					
			// code for the argument 3 (finicio_) of type 'IN TIMESTAMP'
    					if (row42.finicio_ == null) {
    						statement_tOracleSP_3.setNull(3, java.sql.Types.DATE);
    					} else {
    					
    					statement_tOracleSP_3.setTimestamp(3, new java.sql.Timestamp(row42.finicio_.getTime()));
    					
    					}
    					
		statement_tOracleSP_3.execute();
		

 


	tos_count_tOracleSP_3++;

/**
 * [tOracleSP_3 main ] stop
 */
	
	/**
	 * [tOracleSP_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	

 



/**
 * [tOracleSP_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	

 



/**
 * [tOracleSP_3 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 



/**
 * [tFixedFlowInput_6 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_6 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

        }
        globalMap.put("tFixedFlowInput_6_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_6", true);
end_Hash.put("tFixedFlowInput_6", System.currentTimeMillis());




/**
 * [tFixedFlowInput_6 end ] stop
 */

	
	/**
	 * [tOracleSP_3 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	


	statement_tOracleSP_3.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row42");
			  	}
			  	
 

ok_Hash.put("tOracleSP_3", true);
end_Hash.put("tOracleSP_3", System.currentTimeMillis());




/**
 * [tOracleSP_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_6 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 



/**
 * [tFixedFlowInput_6 finally ] stop
 */

	
	/**
	 * [tOracleSP_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	

 



/**
 * [tOracleSP_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_6_SUBPROCESS_STATE", 1);
	}
	


public void tOracleRow_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleRow_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_3", false);
		start_Hash.put("tOracleRow_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_3";
	
	
		int tos_count_tOracleRow_3 = 0;
		

	java.sql.Connection conn_tOracleRow_3 = null;
	String query_tOracleRow_3 = "";
	boolean whetherReject_tOracleRow_3 = false;
	int count_tOracleRow_3 = 0;
				conn_tOracleRow_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
			
        resourceMap.put("conn_tOracleRow_3", conn_tOracleRow_3);
        java.sql.Statement stmt_tOracleRow_3 = conn_tOracleRow_3.createStatement();
        resourceMap.put("stmt_tOracleRow_3", stmt_tOracleRow_3);

 



/**
 * [tOracleRow_3 begin ] stop
 */
	
	/**
	 * [tOracleRow_3 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_3";
	
	

query_tOracleRow_3 = "truncate table tst_errcmasivo";
whetherReject_tOracleRow_3 = false;
globalMap.put("tOracleRow_3_QUERY",query_tOracleRow_3);
try {
		stmt_tOracleRow_3.execute(query_tOracleRow_3);
		
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_3_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_3 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tOracleRow_3) {
		
	}
	

 


	tos_count_tOracleRow_3++;

/**
 * [tOracleRow_3 main ] stop
 */
	
	/**
	 * [tOracleRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_3";
	
	

 



/**
 * [tOracleRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_3";
	
	

 



/**
 * [tOracleRow_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleRow_3 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_3";
	
	

	globalMap.put("tOracleRow_3_NB_LINE", count_tOracleRow_3);
        stmt_tOracleRow_3.close();
        resourceMap.remove("stmt_tOracleRow_3");
    resourceMap.put("statementClosed_tOracleRow_3", true);
    resourceMap.put("finish_tOracleRow_3", true);

 

ok_Hash.put("tOracleRow_3", true);
end_Hash.put("tOracleRow_3", System.currentTimeMillis());




/**
 * [tOracleRow_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleRow_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tOracleInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleRow_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_3";
	
	

    if (resourceMap.get("statementClosed_tOracleRow_3") == null) {
            java.sql.Statement stmtToClose_tOracleRow_3 = null;
            if ((stmtToClose_tOracleRow_3 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_3")) != null) {
                stmtToClose_tOracleRow_3.close();
            }
    }
 



/**
 * [tOracleRow_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleRow_3_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 20;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class archmasivoStruct implements routines.system.IPersistableRow<archmasivoStruct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 20;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 20;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 20;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 20;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public int TDOCUMENTOS_ID;

				public int getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 5;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 20;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer SEXOS_ID;

				public Integer getSEXOS_ID () {
					return this.SEXOS_ID;
				}

				public Boolean SEXOS_IDIsNullable(){
				    return true;
				}
				public Boolean SEXOS_IDIsKey(){
				    return false;
				}
				public Integer SEXOS_IDLength(){
				    return 0;
				}
				public Integer SEXOS_IDPrecision(){
				    return null;
				}
				public String SEXOS_IDDefault(){
				
					return "";
				
				}
				public String SEXOS_IDComment(){
				
				    return "";
				
				}
				public String SEXOS_IDPattern(){
				
					return "";
				
				}
				public String SEXOS_IDOriginalDbColumnName(){
				
					return "SEXOS_ID";
				
				}

				
			    public java.util.Date FECHA_NACIMIENTO;

				public java.util.Date getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 0;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public Integer ESTCIVILES_ID;

				public Integer getESTCIVILES_ID () {
					return this.ESTCIVILES_ID;
				}

				public Boolean ESTCIVILES_IDIsNullable(){
				    return true;
				}
				public Boolean ESTCIVILES_IDIsKey(){
				    return false;
				}
				public Integer ESTCIVILES_IDLength(){
				    return 0;
				}
				public Integer ESTCIVILES_IDPrecision(){
				    return null;
				}
				public String ESTCIVILES_IDDefault(){
				
					return "";
				
				}
				public String ESTCIVILES_IDComment(){
				
				    return "";
				
				}
				public String ESTCIVILES_IDPattern(){
				
					return "";
				
				}
				public String ESTCIVILES_IDOriginalDbColumnName(){
				
					return "ESTCIVILES_ID";
				
				}

				
			    public Integer TDISCAPACIDADES_ID;

				public Integer getTDISCAPACIDADES_ID () {
					return this.TDISCAPACIDADES_ID;
				}

				public Boolean TDISCAPACIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean TDISCAPACIDADES_IDIsKey(){
				    return false;
				}
				public Integer TDISCAPACIDADES_IDLength(){
				    return 0;
				}
				public Integer TDISCAPACIDADES_IDPrecision(){
				    return null;
				}
				public String TDISCAPACIDADES_IDDefault(){
				
					return "";
				
				}
				public String TDISCAPACIDADES_IDComment(){
				
				    return "";
				
				}
				public String TDISCAPACIDADES_IDPattern(){
				
					return "";
				
				}
				public String TDISCAPACIDADES_IDOriginalDbColumnName(){
				
					return "TDISCAPACIDADES_ID";
				
				}

				
			    public String DIRECCION;

				public String getDIRECCION () {
					return this.DIRECCION;
				}

				public Boolean DIRECCIONIsNullable(){
				    return true;
				}
				public Boolean DIRECCIONIsKey(){
				    return false;
				}
				public Integer DIRECCIONLength(){
				    return 20;
				}
				public Integer DIRECCIONPrecision(){
				    return 0;
				}
				public String DIRECCIONDefault(){
				
					return null;
				
				}
				public String DIRECCIONComment(){
				
				    return "";
				
				}
				public String DIRECCIONPattern(){
				
					return "";
				
				}
				public String DIRECCIONOriginalDbColumnName(){
				
					return "DIRECCION";
				
				}

				
			    public String TELEFONO;

				public String getTELEFONO () {
					return this.TELEFONO;
				}

				public Boolean TELEFONOIsNullable(){
				    return true;
				}
				public Boolean TELEFONOIsKey(){
				    return false;
				}
				public Integer TELEFONOLength(){
				    return 20;
				}
				public Integer TELEFONOPrecision(){
				    return 0;
				}
				public String TELEFONODefault(){
				
					return null;
				
				}
				public String TELEFONOComment(){
				
				    return "";
				
				}
				public String TELEFONOPattern(){
				
					return "";
				
				}
				public String TELEFONOOriginalDbColumnName(){
				
					return "TELEFONO";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return 20;
				}
				public Integer CELULARPrecision(){
				    return 0;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public String CORREO_ELECTRONICO;

				public String getCORREO_ELECTRONICO () {
					return this.CORREO_ELECTRONICO;
				}

				public Boolean CORREO_ELECTRONICOIsNullable(){
				    return true;
				}
				public Boolean CORREO_ELECTRONICOIsKey(){
				    return false;
				}
				public Integer CORREO_ELECTRONICOLength(){
				    return 20;
				}
				public Integer CORREO_ELECTRONICOPrecision(){
				    return 0;
				}
				public String CORREO_ELECTRONICODefault(){
				
					return null;
				
				}
				public String CORREO_ELECTRONICOComment(){
				
				    return "";
				
				}
				public String CORREO_ELECTRONICOPattern(){
				
					return "";
				
				}
				public String CORREO_ELECTRONICOOriginalDbColumnName(){
				
					return "CORREO_ELECTRONICO";
				
				}

				
			    public Integer ZRESIDENCIAS;

				public Integer getZRESIDENCIAS () {
					return this.ZRESIDENCIAS;
				}

				public Boolean ZRESIDENCIASIsNullable(){
				    return true;
				}
				public Boolean ZRESIDENCIASIsKey(){
				    return false;
				}
				public Integer ZRESIDENCIASLength(){
				    return 0;
				}
				public Integer ZRESIDENCIASPrecision(){
				    return null;
				}
				public String ZRESIDENCIASDefault(){
				
					return "";
				
				}
				public String ZRESIDENCIASComment(){
				
				    return "";
				
				}
				public String ZRESIDENCIASPattern(){
				
					return "";
				
				}
				public String ZRESIDENCIASOriginalDbColumnName(){
				
					return "ZRESIDENCIAS";
				
				}

				
			    public java.util.Date FECHA_EXPEDICION_DOCUMENTO;

				public java.util.Date getFECHA_EXPEDICION_DOCUMENTO () {
					return this.FECHA_EXPEDICION_DOCUMENTO;
				}

				public Boolean FECHA_EXPEDICION_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_EXPEDICION_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOLength(){
				    return null;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOPrecision(){
				    return null;
				}
				public String FECHA_EXPEDICION_DOCUMENTODefault(){
				
					return null;
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOOriginalDbColumnName(){
				
					return "FECHA_EXPEDICION_DOCUMENTO";
				
				}

				
			    public Integer LUGAR_EXP_DOC;

				public Integer getLUGAR_EXP_DOC () {
					return this.LUGAR_EXP_DOC;
				}

				public Boolean LUGAR_EXP_DOCIsNullable(){
				    return true;
				}
				public Boolean LUGAR_EXP_DOCIsKey(){
				    return false;
				}
				public Integer LUGAR_EXP_DOCLength(){
				    return null;
				}
				public Integer LUGAR_EXP_DOCPrecision(){
				    return null;
				}
				public String LUGAR_EXP_DOCDefault(){
				
					return null;
				
				}
				public String LUGAR_EXP_DOCComment(){
				
				    return "";
				
				}
				public String LUGAR_EXP_DOCPattern(){
				
					return "";
				
				}
				public String LUGAR_EXP_DOCOriginalDbColumnName(){
				
					return "LUGAR_EXP_DOC";
				
				}

				
			    public Integer LUGAR_NACIMIENTO;

				public Integer getLUGAR_NACIMIENTO () {
					return this.LUGAR_NACIMIENTO;
				}

				public Boolean LUGAR_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean LUGAR_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer LUGAR_NACIMIENTOLength(){
				    return null;
				}
				public Integer LUGAR_NACIMIENTOPrecision(){
				    return null;
				}
				public String LUGAR_NACIMIENTODefault(){
				
					return null;
				
				}
				public String LUGAR_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String LUGAR_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String LUGAR_NACIMIENTOOriginalDbColumnName(){
				
					return "LUGAR_NACIMIENTO";
				
				}

				
			    public Integer LUGAR_RESIDENCIA;

				public Integer getLUGAR_RESIDENCIA () {
					return this.LUGAR_RESIDENCIA;
				}

				public Boolean LUGAR_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean LUGAR_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer LUGAR_RESIDENCIALength(){
				    return 0;
				}
				public Integer LUGAR_RESIDENCIAPrecision(){
				    return null;
				}
				public String LUGAR_RESIDENCIADefault(){
				
					return "";
				
				}
				public String LUGAR_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String LUGAR_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String LUGAR_RESIDENCIAOriginalDbColumnName(){
				
					return "LUGAR_RESIDENCIA";
				
				}

				
			    public Integer LOCALIDADES_ID;

				public Integer getLOCALIDADES_ID () {
					return this.LOCALIDADES_ID;
				}

				public Boolean LOCALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean LOCALIDADES_IDIsKey(){
				    return false;
				}
				public Integer LOCALIDADES_IDLength(){
				    return 40;
				}
				public Integer LOCALIDADES_IDPrecision(){
				    return 0;
				}
				public String LOCALIDADES_IDDefault(){
				
					return null;
				
				}
				public String LOCALIDADES_IDComment(){
				
				    return "";
				
				}
				public String LOCALIDADES_IDPattern(){
				
					return "";
				
				}
				public String LOCALIDADES_IDOriginalDbColumnName(){
				
					return "LOCALIDADES_ID";
				
				}

				
			    public Integer GSANGUINEOS_ID;

				public Integer getGSANGUINEOS_ID () {
					return this.GSANGUINEOS_ID;
				}

				public Boolean GSANGUINEOS_IDIsNullable(){
				    return true;
				}
				public Boolean GSANGUINEOS_IDIsKey(){
				    return false;
				}
				public Integer GSANGUINEOS_IDLength(){
				    return 0;
				}
				public Integer GSANGUINEOS_IDPrecision(){
				    return null;
				}
				public String GSANGUINEOS_IDDefault(){
				
					return "";
				
				}
				public String GSANGUINEOS_IDComment(){
				
				    return "";
				
				}
				public String GSANGUINEOS_IDPattern(){
				
					return "";
				
				}
				public String GSANGUINEOS_IDOriginalDbColumnName(){
				
					return "GSANGUINEOS_ID";
				
				}

				
			    public BigDecimal ESTATURA;

				public BigDecimal getESTATURA () {
					return this.ESTATURA;
				}

				public Boolean ESTATURAIsNullable(){
				    return true;
				}
				public Boolean ESTATURAIsKey(){
				    return false;
				}
				public Integer ESTATURALength(){
				    return 20;
				}
				public Integer ESTATURAPrecision(){
				    return 0;
				}
				public String ESTATURADefault(){
				
					return null;
				
				}
				public String ESTATURAComment(){
				
				    return "";
				
				}
				public String ESTATURAPattern(){
				
					return "";
				
				}
				public String ESTATURAOriginalDbColumnName(){
				
					return "ESTATURA";
				
				}

				
			    public Integer OCUPACIONES_ID;

				public Integer getOCUPACIONES_ID () {
					return this.OCUPACIONES_ID;
				}

				public Boolean OCUPACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean OCUPACIONES_IDIsKey(){
				    return false;
				}
				public Integer OCUPACIONES_IDLength(){
				    return 0;
				}
				public Integer OCUPACIONES_IDPrecision(){
				    return null;
				}
				public String OCUPACIONES_IDDefault(){
				
					return "";
				
				}
				public String OCUPACIONES_IDComment(){
				
				    return "";
				
				}
				public String OCUPACIONES_IDPattern(){
				
					return "";
				
				}
				public String OCUPACIONES_IDOriginalDbColumnName(){
				
					return "OCUPACIONES_ID";
				
				}

				
			    public Integer ETNICAS_ID;

				public Integer getETNICAS_ID () {
					return this.ETNICAS_ID;
				}

				public Boolean ETNICAS_IDIsNullable(){
				    return true;
				}
				public Boolean ETNICAS_IDIsKey(){
				    return false;
				}
				public Integer ETNICAS_IDLength(){
				    return 0;
				}
				public Integer ETNICAS_IDPrecision(){
				    return null;
				}
				public String ETNICAS_IDDefault(){
				
					return "";
				
				}
				public String ETNICAS_IDComment(){
				
				    return "";
				
				}
				public String ETNICAS_IDPattern(){
				
					return "";
				
				}
				public String ETNICAS_IDOriginalDbColumnName(){
				
					return "ETNICAS_ID";
				
				}

				
			    public Integer NSOCIOECONOMICOS_ID;

				public Integer getNSOCIOECONOMICOS_ID () {
					return this.NSOCIOECONOMICOS_ID;
				}

				public Boolean NSOCIOECONOMICOS_IDIsNullable(){
				    return true;
				}
				public Boolean NSOCIOECONOMICOS_IDIsKey(){
				    return false;
				}
				public Integer NSOCIOECONOMICOS_IDLength(){
				    return 0;
				}
				public Integer NSOCIOECONOMICOS_IDPrecision(){
				    return null;
				}
				public String NSOCIOECONOMICOS_IDDefault(){
				
					return "";
				
				}
				public String NSOCIOECONOMICOS_IDComment(){
				
				    return "";
				
				}
				public String NSOCIOECONOMICOS_IDPattern(){
				
					return "";
				
				}
				public String NSOCIOECONOMICOS_IDOriginalDbColumnName(){
				
					return "NSOCIOECONOMICOS_ID";
				
				}

				
			    public Integer TVIVIENDA_ID;

				public Integer getTVIVIENDA_ID () {
					return this.TVIVIENDA_ID;
				}

				public Boolean TVIVIENDA_IDIsNullable(){
				    return true;
				}
				public Boolean TVIVIENDA_IDIsKey(){
				    return false;
				}
				public Integer TVIVIENDA_IDLength(){
				    return 0;
				}
				public Integer TVIVIENDA_IDPrecision(){
				    return null;
				}
				public String TVIVIENDA_IDDefault(){
				
					return "";
				
				}
				public String TVIVIENDA_IDComment(){
				
				    return "";
				
				}
				public String TVIVIENDA_IDPattern(){
				
					return "";
				
				}
				public String TVIVIENDA_IDOriginalDbColumnName(){
				
					return "TVIVIENDA_ID";
				
				}

				
			    public Integer NEDUCATIVOS_ID;

				public Integer getNEDUCATIVOS_ID () {
					return this.NEDUCATIVOS_ID;
				}

				public Boolean NEDUCATIVOS_IDIsNullable(){
				    return true;
				}
				public Boolean NEDUCATIVOS_IDIsKey(){
				    return false;
				}
				public Integer NEDUCATIVOS_IDLength(){
				    return 0;
				}
				public Integer NEDUCATIVOS_IDPrecision(){
				    return null;
				}
				public String NEDUCATIVOS_IDDefault(){
				
					return "";
				
				}
				public String NEDUCATIVOS_IDComment(){
				
				    return "";
				
				}
				public String NEDUCATIVOS_IDPattern(){
				
					return "";
				
				}
				public String NEDUCATIVOS_IDOriginalDbColumnName(){
				
					return "NEDUCATIVOS_ID";
				
				}

				
			    public Integer ESMADSCRITO;

				public Integer getESMADSCRITO () {
					return this.ESMADSCRITO;
				}

				public Boolean ESMADSCRITOIsNullable(){
				    return true;
				}
				public Boolean ESMADSCRITOIsKey(){
				    return false;
				}
				public Integer ESMADSCRITOLength(){
				    return 0;
				}
				public Integer ESMADSCRITOPrecision(){
				    return null;
				}
				public String ESMADSCRITODefault(){
				
					return "";
				
				}
				public String ESMADSCRITOComment(){
				
				    return "";
				
				}
				public String ESMADSCRITOPattern(){
				
					return "";
				
				}
				public String ESMADSCRITOOriginalDbColumnName(){
				
					return "ESMADSCRITO";
				
				}

				
			    public java.util.Date FECHAI;

				public java.util.Date getFECHAI () {
					return this.FECHAI;
				}

				public Boolean FECHAIIsNullable(){
				    return true;
				}
				public Boolean FECHAIIsKey(){
				    return false;
				}
				public Integer FECHAILength(){
				    return 0;
				}
				public Integer FECHAIPrecision(){
				    return 0;
				}
				public String FECHAIDefault(){
				
					return null;
				
				}
				public String FECHAIComment(){
				
				    return "";
				
				}
				public String FECHAIPattern(){
				
					return "";
				
				}
				public String FECHAIOriginalDbColumnName(){
				
					return "FECHAI";
				
				}

				
			    public Integer PARENTESCOS_ID;

				public Integer getPARENTESCOS_ID () {
					return this.PARENTESCOS_ID;
				}

				public Boolean PARENTESCOS_IDIsNullable(){
				    return true;
				}
				public Boolean PARENTESCOS_IDIsKey(){
				    return false;
				}
				public Integer PARENTESCOS_IDLength(){
				    return 0;
				}
				public Integer PARENTESCOS_IDPrecision(){
				    return null;
				}
				public String PARENTESCOS_IDDefault(){
				
					return "";
				
				}
				public String PARENTESCOS_IDComment(){
				
				    return "";
				
				}
				public String PARENTESCOS_IDPattern(){
				
					return "";
				
				}
				public String PARENTESCOS_IDOriginalDbColumnName(){
				
					return "PARENTESCOS_ID";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 34;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public java.util.Date FECHA_CADUCIDAD;

				public java.util.Date getFECHA_CADUCIDAD () {
					return this.FECHA_CADUCIDAD;
				}

				public Boolean FECHA_CADUCIDADIsNullable(){
				    return true;
				}
				public Boolean FECHA_CADUCIDADIsKey(){
				    return false;
				}
				public Integer FECHA_CADUCIDADLength(){
				    return 0;
				}
				public Integer FECHA_CADUCIDADPrecision(){
				    return 0;
				}
				public String FECHA_CADUCIDADDefault(){
				
					return null;
				
				}
				public String FECHA_CADUCIDADComment(){
				
				    return "";
				
				}
				public String FECHA_CADUCIDADPattern(){
				
					return "";
				
				}
				public String FECHA_CADUCIDADOriginalDbColumnName(){
				
					return "FECHA_CADUCIDAD";
				
				}

				
			    public String PLANAFILIACIONES_ID;

				public String getPLANAFILIACIONES_ID () {
					return this.PLANAFILIACIONES_ID;
				}

				public Boolean PLANAFILIACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean PLANAFILIACIONES_IDIsKey(){
				    return false;
				}
				public Integer PLANAFILIACIONES_IDLength(){
				    return 0;
				}
				public Integer PLANAFILIACIONES_IDPrecision(){
				    return 0;
				}
				public String PLANAFILIACIONES_IDDefault(){
				
					return null;
				
				}
				public String PLANAFILIACIONES_IDComment(){
				
				    return "";
				
				}
				public String PLANAFILIACIONES_IDPattern(){
				
					return "";
				
				}
				public String PLANAFILIACIONES_IDOriginalDbColumnName(){
				
					return "PLANAFILIACIONES_ID";
				
				}

				
			    public Integer ENTAPORTANTES_ID;

				public Integer getENTAPORTANTES_ID () {
					return this.ENTAPORTANTES_ID;
				}

				public Boolean ENTAPORTANTES_IDIsNullable(){
				    return true;
				}
				public Boolean ENTAPORTANTES_IDIsKey(){
				    return false;
				}
				public Integer ENTAPORTANTES_IDLength(){
				    return 0;
				}
				public Integer ENTAPORTANTES_IDPrecision(){
				    return null;
				}
				public String ENTAPORTANTES_IDDefault(){
				
					return "";
				
				}
				public String ENTAPORTANTES_IDComment(){
				
				    return "";
				
				}
				public String ENTAPORTANTES_IDPattern(){
				
					return "";
				
				}
				public String ENTAPORTANTES_IDOriginalDbColumnName(){
				
					return "ENTAPORTANTES_ID";
				
				}

				
			    public Integer GRDMILITARES_ID;

				public Integer getGRDMILITARES_ID () {
					return this.GRDMILITARES_ID;
				}

				public Boolean GRDMILITARES_IDIsNullable(){
				    return true;
				}
				public Boolean GRDMILITARES_IDIsKey(){
				    return false;
				}
				public Integer GRDMILITARES_IDLength(){
				    return 0;
				}
				public Integer GRDMILITARES_IDPrecision(){
				    return null;
				}
				public String GRDMILITARES_IDDefault(){
				
					return "";
				
				}
				public String GRDMILITARES_IDComment(){
				
				    return "";
				
				}
				public String GRDMILITARES_IDPattern(){
				
					return "";
				
				}
				public String GRDMILITARES_IDOriginalDbColumnName(){
				
					return "GRDMILITARES_ID";
				
				}

				
			    public Integer FUERZAS_ID;

				public Integer getFUERZAS_ID () {
					return this.FUERZAS_ID;
				}

				public Boolean FUERZAS_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZAS_IDIsKey(){
				    return false;
				}
				public Integer FUERZAS_IDLength(){
				    return 0;
				}
				public Integer FUERZAS_IDPrecision(){
				    return null;
				}
				public String FUERZAS_IDDefault(){
				
					return "";
				
				}
				public String FUERZAS_IDComment(){
				
				    return "";
				
				}
				public String FUERZAS_IDPattern(){
				
					return "";
				
				}
				public String FUERZAS_IDOriginalDbColumnName(){
				
					return "FUERZAS_ID";
				
				}

				
			    public Integer UMILITARES_ID;

				public Integer getUMILITARES_ID () {
					return this.UMILITARES_ID;
				}

				public Boolean UMILITARES_IDIsNullable(){
				    return true;
				}
				public Boolean UMILITARES_IDIsKey(){
				    return false;
				}
				public Integer UMILITARES_IDLength(){
				    return 0;
				}
				public Integer UMILITARES_IDPrecision(){
				    return null;
				}
				public String UMILITARES_IDDefault(){
				
					return "";
				
				}
				public String UMILITARES_IDComment(){
				
				    return "";
				
				}
				public String UMILITARES_IDPattern(){
				
					return "";
				
				}
				public String UMILITARES_IDOriginalDbColumnName(){
				
					return "UMILITARES_ID";
				
				}

				
			    public Integer PRINCIPAL;

				public Integer getPRINCIPAL () {
					return this.PRINCIPAL;
				}

				public Boolean PRINCIPALIsNullable(){
				    return true;
				}
				public Boolean PRINCIPALIsKey(){
				    return false;
				}
				public Integer PRINCIPALLength(){
				    return 0;
				}
				public Integer PRINCIPALPrecision(){
				    return null;
				}
				public String PRINCIPALDefault(){
				
					return "";
				
				}
				public String PRINCIPALComment(){
				
				    return "";
				
				}
				public String PRINCIPALPattern(){
				
					return "";
				
				}
				public String PRINCIPALOriginalDbColumnName(){
				
					return "PRINCIPAL";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 100;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public Integer TVINCULACIONES_ID;

				public Integer getTVINCULACIONES_ID () {
					return this.TVINCULACIONES_ID;
				}

				public Boolean TVINCULACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean TVINCULACIONES_IDIsKey(){
				    return false;
				}
				public Integer TVINCULACIONES_IDLength(){
				    return 0;
				}
				public Integer TVINCULACIONES_IDPrecision(){
				    return null;
				}
				public String TVINCULACIONES_IDDefault(){
				
					return "";
				
				}
				public String TVINCULACIONES_IDComment(){
				
				    return "";
				
				}
				public String TVINCULACIONES_IDPattern(){
				
					return "";
				
				}
				public String TVINCULACIONES_IDOriginalDbColumnName(){
				
					return "TVINCULACIONES_ID";
				
				}

				
			    public java.util.Date FECHA_INGRESO;

				public java.util.Date getFECHA_INGRESO () {
					return this.FECHA_INGRESO;
				}

				public Boolean FECHA_INGRESOIsNullable(){
				    return true;
				}
				public Boolean FECHA_INGRESOIsKey(){
				    return false;
				}
				public Integer FECHA_INGRESOLength(){
				    return 0;
				}
				public Integer FECHA_INGRESOPrecision(){
				    return 0;
				}
				public String FECHA_INGRESODefault(){
				
					return null;
				
				}
				public String FECHA_INGRESOComment(){
				
				    return "";
				
				}
				public String FECHA_INGRESOPattern(){
				
					return "";
				
				}
				public String FECHA_INGRESOOriginalDbColumnName(){
				
					return "FECHA_INGRESO";
				
				}

				
			    public Integer ESTADOS_ID;

				public Integer getESTADOS_ID () {
					return this.ESTADOS_ID;
				}

				public Boolean ESTADOS_IDIsNullable(){
				    return true;
				}
				public Boolean ESTADOS_IDIsKey(){
				    return false;
				}
				public Integer ESTADOS_IDLength(){
				    return 0;
				}
				public Integer ESTADOS_IDPrecision(){
				    return null;
				}
				public String ESTADOS_IDDefault(){
				
					return "";
				
				}
				public String ESTADOS_IDComment(){
				
				    return "";
				
				}
				public String ESTADOS_IDPattern(){
				
					return "";
				
				}
				public String ESTADOS_IDOriginalDbColumnName(){
				
					return "ESTADOS_ID";
				
				}

				
			    public Integer USUARIOS_ID;

				public Integer getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public Integer MOTIVOSESTADO_ID;

				public Integer getMOTIVOSESTADO_ID () {
					return this.MOTIVOSESTADO_ID;
				}

				public Boolean MOTIVOSESTADO_IDIsNullable(){
				    return true;
				}
				public Boolean MOTIVOSESTADO_IDIsKey(){
				    return false;
				}
				public Integer MOTIVOSESTADO_IDLength(){
				    return 0;
				}
				public Integer MOTIVOSESTADO_IDPrecision(){
				    return null;
				}
				public String MOTIVOSESTADO_IDDefault(){
				
					return "";
				
				}
				public String MOTIVOSESTADO_IDComment(){
				
				    return "";
				
				}
				public String MOTIVOSESTADO_IDPattern(){
				
					return "";
				
				}
				public String MOTIVOSESTADO_IDOriginalDbColumnName(){
				
					return "MOTIVOSESTADO_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 250;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public Integer RNOVEDADES_ID;

				public Integer getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return true;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 0;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return null;
				}
				public String RNOVEDADES_IDDefault(){
				
					return "";
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public Integer VANTERIOR;

				public Integer getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 0;
				}
				public Integer VANTERIORPrecision(){
				    return null;
				}
				public String VANTERIORDefault(){
				
					return "";
				
				}
				public String VANTERIORComment(){
				
				    return "";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public Integer VACTUAL;

				public Integer getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 0;
				}
				public Integer VACTUALPrecision(){
				    return null;
				}
				public String VACTUALDefault(){
				
					return "";
				
				}
				public String VACTUALComment(){
				
				    return "";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				
			    public int PROCESOS_ID;

				public int getPROCESOS_ID () {
					return this.PROCESOS_ID;
				}

				public Boolean PROCESOS_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOS_IDIsKey(){
				    return false;
				}
				public Integer PROCESOS_IDLength(){
				    return null;
				}
				public Integer PROCESOS_IDPrecision(){
				    return null;
				}
				public String PROCESOS_IDDefault(){
				
					return "";
				
				}
				public String PROCESOS_IDComment(){
				
				    return "";
				
				}
				public String PROCESOS_IDPattern(){
				
					return "";
				
				}
				public String PROCESOS_IDOriginalDbColumnName(){
				
					return "PROCESOS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
			        this.TDOCUMENTOS_ID = dis.readInt();
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.SEXOS_ID = readInteger(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
						this.ESTCIVILES_ID = readInteger(dis);
					
						this.TDISCAPACIDADES_ID = readInteger(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.CORREO_ELECTRONICO = readString(dis);
					
						this.ZRESIDENCIAS = readInteger(dis);
					
					this.FECHA_EXPEDICION_DOCUMENTO = readDate(dis);
					
						this.LUGAR_EXP_DOC = readInteger(dis);
					
						this.LUGAR_NACIMIENTO = readInteger(dis);
					
						this.LUGAR_RESIDENCIA = readInteger(dis);
					
						this.LOCALIDADES_ID = readInteger(dis);
					
						this.GSANGUINEOS_ID = readInteger(dis);
					
						this.ESTATURA = (BigDecimal) dis.readObject();
					
						this.OCUPACIONES_ID = readInteger(dis);
					
						this.ETNICAS_ID = readInteger(dis);
					
						this.NSOCIOECONOMICOS_ID = readInteger(dis);
					
						this.TVIVIENDA_ID = readInteger(dis);
					
						this.NEDUCATIVOS_ID = readInteger(dis);
					
						this.ESMADSCRITO = readInteger(dis);
					
					this.FECHAI = readDate(dis);
					
						this.PARENTESCOS_ID = readInteger(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.FECHA_CADUCIDAD = readDate(dis);
					
					this.PLANAFILIACIONES_ID = readString(dis);
					
						this.ENTAPORTANTES_ID = readInteger(dis);
					
						this.GRDMILITARES_ID = readInteger(dis);
					
						this.FUERZAS_ID = readInteger(dis);
					
						this.UMILITARES_ID = readInteger(dis);
					
						this.PRINCIPAL = readInteger(dis);
					
					this.ESTADO = readString(dis);
					
						this.TVINCULACIONES_ID = readInteger(dis);
					
					this.FECHA_INGRESO = readDate(dis);
					
						this.ESTADOS_ID = readInteger(dis);
					
						this.USUARIOS_ID = readInteger(dis);
					
						this.MOTIVOSESTADO_ID = readInteger(dis);
					
					this.FECHA = readDate(dis);
					
					this.MOTIVO = readString(dis);
					
						this.RNOVEDADES_ID = readInteger(dis);
					
						this.VANTERIOR = readInteger(dis);
					
						this.VACTUAL = readInteger(dis);
					
			        this.PROCESOS_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
			        this.TDOCUMENTOS_ID = dis.readInt();
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.SEXOS_ID = readInteger(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
						this.ESTCIVILES_ID = readInteger(dis);
					
						this.TDISCAPACIDADES_ID = readInteger(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.CORREO_ELECTRONICO = readString(dis);
					
						this.ZRESIDENCIAS = readInteger(dis);
					
					this.FECHA_EXPEDICION_DOCUMENTO = readDate(dis);
					
						this.LUGAR_EXP_DOC = readInteger(dis);
					
						this.LUGAR_NACIMIENTO = readInteger(dis);
					
						this.LUGAR_RESIDENCIA = readInteger(dis);
					
						this.LOCALIDADES_ID = readInteger(dis);
					
						this.GSANGUINEOS_ID = readInteger(dis);
					
						this.ESTATURA = (BigDecimal) dis.readObject();
					
						this.OCUPACIONES_ID = readInteger(dis);
					
						this.ETNICAS_ID = readInteger(dis);
					
						this.NSOCIOECONOMICOS_ID = readInteger(dis);
					
						this.TVIVIENDA_ID = readInteger(dis);
					
						this.NEDUCATIVOS_ID = readInteger(dis);
					
						this.ESMADSCRITO = readInteger(dis);
					
					this.FECHAI = readDate(dis);
					
						this.PARENTESCOS_ID = readInteger(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.FECHA_CADUCIDAD = readDate(dis);
					
					this.PLANAFILIACIONES_ID = readString(dis);
					
						this.ENTAPORTANTES_ID = readInteger(dis);
					
						this.GRDMILITARES_ID = readInteger(dis);
					
						this.FUERZAS_ID = readInteger(dis);
					
						this.UMILITARES_ID = readInteger(dis);
					
						this.PRINCIPAL = readInteger(dis);
					
					this.ESTADO = readString(dis);
					
						this.TVINCULACIONES_ID = readInteger(dis);
					
					this.FECHA_INGRESO = readDate(dis);
					
						this.ESTADOS_ID = readInteger(dis);
					
						this.USUARIOS_ID = readInteger(dis);
					
						this.MOTIVOSESTADO_ID = readInteger(dis);
					
					this.FECHA = readDate(dis);
					
					this.MOTIVO = readString(dis);
					
						this.RNOVEDADES_ID = readInteger(dis);
					
						this.VANTERIOR = readInteger(dis);
					
						this.VACTUAL = readInteger(dis);
					
			        this.PROCESOS_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// int
				
		            	dos.writeInt(this.TDOCUMENTOS_ID);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.SEXOS_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.ESTCIVILES_ID,dos);
					
					// Integer
				
						writeInteger(this.TDISCAPACIDADES_ID,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO,dos);
					
					// Integer
				
						writeInteger(this.ZRESIDENCIAS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_EXP_DOC,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_RESIDENCIA,dos);
					
					// Integer
				
						writeInteger(this.LOCALIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.GSANGUINEOS_ID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTATURA);
					
					// Integer
				
						writeInteger(this.OCUPACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.ETNICAS_ID,dos);
					
					// Integer
				
						writeInteger(this.NSOCIOECONOMICOS_ID,dos);
					
					// Integer
				
						writeInteger(this.TVIVIENDA_ID,dos);
					
					// Integer
				
						writeInteger(this.NEDUCATIVOS_ID,dos);
					
					// Integer
				
						writeInteger(this.ESMADSCRITO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAI,dos);
					
					// Integer
				
						writeInteger(this.PARENTESCOS_ID,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_CADUCIDAD,dos);
					
					// String
				
						writeString(this.PLANAFILIACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.ENTAPORTANTES_ID,dos);
					
					// Integer
				
						writeInteger(this.GRDMILITARES_ID,dos);
					
					// Integer
				
						writeInteger(this.FUERZAS_ID,dos);
					
					// Integer
				
						writeInteger(this.UMILITARES_ID,dos);
					
					// Integer
				
						writeInteger(this.PRINCIPAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// Integer
				
						writeInteger(this.TVINCULACIONES_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_INGRESO,dos);
					
					// Integer
				
						writeInteger(this.ESTADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// Integer
				
						writeInteger(this.MOTIVOSESTADO_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// Integer
				
						writeInteger(this.RNOVEDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.VANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.VACTUAL,dos);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// int
				
		            	dos.writeInt(this.TDOCUMENTOS_ID);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.SEXOS_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.ESTCIVILES_ID,dos);
					
					// Integer
				
						writeInteger(this.TDISCAPACIDADES_ID,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO,dos);
					
					// Integer
				
						writeInteger(this.ZRESIDENCIAS,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_EXP_DOC,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_RESIDENCIA,dos);
					
					// Integer
				
						writeInteger(this.LOCALIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.GSANGUINEOS_ID,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTATURA);
					
					// Integer
				
						writeInteger(this.OCUPACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.ETNICAS_ID,dos);
					
					// Integer
				
						writeInteger(this.NSOCIOECONOMICOS_ID,dos);
					
					// Integer
				
						writeInteger(this.TVIVIENDA_ID,dos);
					
					// Integer
				
						writeInteger(this.NEDUCATIVOS_ID,dos);
					
					// Integer
				
						writeInteger(this.ESMADSCRITO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAI,dos);
					
					// Integer
				
						writeInteger(this.PARENTESCOS_ID,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_CADUCIDAD,dos);
					
					// String
				
						writeString(this.PLANAFILIACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.ENTAPORTANTES_ID,dos);
					
					// Integer
				
						writeInteger(this.GRDMILITARES_ID,dos);
					
					// Integer
				
						writeInteger(this.FUERZAS_ID,dos);
					
					// Integer
				
						writeInteger(this.UMILITARES_ID,dos);
					
					// Integer
				
						writeInteger(this.PRINCIPAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// Integer
				
						writeInteger(this.TVINCULACIONES_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_INGRESO,dos);
					
					// Integer
				
						writeInteger(this.ESTADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// Integer
				
						writeInteger(this.MOTIVOSESTADO_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// Integer
				
						writeInteger(this.RNOVEDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.VANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.VACTUAL,dos);
					
					// int
				
		            	dos.writeInt(this.PROCESOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",SEXOS_ID="+String.valueOf(SEXOS_ID));
		sb.append(",FECHA_NACIMIENTO="+String.valueOf(FECHA_NACIMIENTO));
		sb.append(",ESTCIVILES_ID="+String.valueOf(ESTCIVILES_ID));
		sb.append(",TDISCAPACIDADES_ID="+String.valueOf(TDISCAPACIDADES_ID));
		sb.append(",DIRECCION="+DIRECCION);
		sb.append(",TELEFONO="+TELEFONO);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",CORREO_ELECTRONICO="+CORREO_ELECTRONICO);
		sb.append(",ZRESIDENCIAS="+String.valueOf(ZRESIDENCIAS));
		sb.append(",FECHA_EXPEDICION_DOCUMENTO="+String.valueOf(FECHA_EXPEDICION_DOCUMENTO));
		sb.append(",LUGAR_EXP_DOC="+String.valueOf(LUGAR_EXP_DOC));
		sb.append(",LUGAR_NACIMIENTO="+String.valueOf(LUGAR_NACIMIENTO));
		sb.append(",LUGAR_RESIDENCIA="+String.valueOf(LUGAR_RESIDENCIA));
		sb.append(",LOCALIDADES_ID="+String.valueOf(LOCALIDADES_ID));
		sb.append(",GSANGUINEOS_ID="+String.valueOf(GSANGUINEOS_ID));
		sb.append(",ESTATURA="+String.valueOf(ESTATURA));
		sb.append(",OCUPACIONES_ID="+String.valueOf(OCUPACIONES_ID));
		sb.append(",ETNICAS_ID="+String.valueOf(ETNICAS_ID));
		sb.append(",NSOCIOECONOMICOS_ID="+String.valueOf(NSOCIOECONOMICOS_ID));
		sb.append(",TVIVIENDA_ID="+String.valueOf(TVIVIENDA_ID));
		sb.append(",NEDUCATIVOS_ID="+String.valueOf(NEDUCATIVOS_ID));
		sb.append(",ESMADSCRITO="+String.valueOf(ESMADSCRITO));
		sb.append(",FECHAI="+String.valueOf(FECHAI));
		sb.append(",PARENTESCOS_ID="+String.valueOf(PARENTESCOS_ID));
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",FECHA_CADUCIDAD="+String.valueOf(FECHA_CADUCIDAD));
		sb.append(",PLANAFILIACIONES_ID="+PLANAFILIACIONES_ID);
		sb.append(",ENTAPORTANTES_ID="+String.valueOf(ENTAPORTANTES_ID));
		sb.append(",GRDMILITARES_ID="+String.valueOf(GRDMILITARES_ID));
		sb.append(",FUERZAS_ID="+String.valueOf(FUERZAS_ID));
		sb.append(",UMILITARES_ID="+String.valueOf(UMILITARES_ID));
		sb.append(",PRINCIPAL="+String.valueOf(PRINCIPAL));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",TVINCULACIONES_ID="+String.valueOf(TVINCULACIONES_ID));
		sb.append(",FECHA_INGRESO="+String.valueOf(FECHA_INGRESO));
		sb.append(",ESTADOS_ID="+String.valueOf(ESTADOS_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",MOTIVOSESTADO_ID="+String.valueOf(MOTIVOSESTADO_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",VANTERIOR="+String.valueOf(VANTERIOR));
		sb.append(",VACTUAL="+String.valueOf(VACTUAL));
		sb.append(",PROCESOS_ID="+String.valueOf(PROCESOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(archmasivoStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class valTdocumentos_idStruct implements routines.system.IPersistableRow<valTdocumentos_idStruct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 20;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 20;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 5;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 20;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				
			    public int SEXOS_ID;

				public int getSEXOS_ID () {
					return this.SEXOS_ID;
				}

				public Boolean SEXOS_IDIsNullable(){
				    return false;
				}
				public Boolean SEXOS_IDIsKey(){
				    return false;
				}
				public Integer SEXOS_IDLength(){
				    return null;
				}
				public Integer SEXOS_IDPrecision(){
				    return null;
				}
				public String SEXOS_IDDefault(){
				
					return "";
				
				}
				public String SEXOS_IDComment(){
				
				    return "";
				
				}
				public String SEXOS_IDPattern(){
				
					return "";
				
				}
				public String SEXOS_IDOriginalDbColumnName(){
				
					return "SEXOS_ID";
				
				}

				
			    public int ESTCIVILES_ID;

				public int getESTCIVILES_ID () {
					return this.ESTCIVILES_ID;
				}

				public Boolean ESTCIVILES_IDIsNullable(){
				    return false;
				}
				public Boolean ESTCIVILES_IDIsKey(){
				    return false;
				}
				public Integer ESTCIVILES_IDLength(){
				    return null;
				}
				public Integer ESTCIVILES_IDPrecision(){
				    return null;
				}
				public String ESTCIVILES_IDDefault(){
				
					return "";
				
				}
				public String ESTCIVILES_IDComment(){
				
				    return "";
				
				}
				public String ESTCIVILES_IDPattern(){
				
					return "";
				
				}
				public String ESTCIVILES_IDOriginalDbColumnName(){
				
					return "ESTCIVILES_ID";
				
				}

				
			    public int TDISCAPACIDADES_ID;

				public int getTDISCAPACIDADES_ID () {
					return this.TDISCAPACIDADES_ID;
				}

				public Boolean TDISCAPACIDADES_IDIsNullable(){
				    return false;
				}
				public Boolean TDISCAPACIDADES_IDIsKey(){
				    return false;
				}
				public Integer TDISCAPACIDADES_IDLength(){
				    return null;
				}
				public Integer TDISCAPACIDADES_IDPrecision(){
				    return null;
				}
				public String TDISCAPACIDADES_IDDefault(){
				
					return "";
				
				}
				public String TDISCAPACIDADES_IDComment(){
				
				    return "";
				
				}
				public String TDISCAPACIDADES_IDPattern(){
				
					return "";
				
				}
				public String TDISCAPACIDADES_IDOriginalDbColumnName(){
				
					return "TDISCAPACIDADES_ID";
				
				}

				
			    public int ZRESIDENCIAS;

				public int getZRESIDENCIAS () {
					return this.ZRESIDENCIAS;
				}

				public Boolean ZRESIDENCIASIsNullable(){
				    return false;
				}
				public Boolean ZRESIDENCIASIsKey(){
				    return false;
				}
				public Integer ZRESIDENCIASLength(){
				    return null;
				}
				public Integer ZRESIDENCIASPrecision(){
				    return null;
				}
				public String ZRESIDENCIASDefault(){
				
					return "";
				
				}
				public String ZRESIDENCIASComment(){
				
				    return "";
				
				}
				public String ZRESIDENCIASPattern(){
				
					return "";
				
				}
				public String ZRESIDENCIASOriginalDbColumnName(){
				
					return "ZRESIDENCIAS";
				
				}

				
			    public int LUGAR_RESIDENCIA;

				public int getLUGAR_RESIDENCIA () {
					return this.LUGAR_RESIDENCIA;
				}

				public Boolean LUGAR_RESIDENCIAIsNullable(){
				    return false;
				}
				public Boolean LUGAR_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer LUGAR_RESIDENCIALength(){
				    return null;
				}
				public Integer LUGAR_RESIDENCIAPrecision(){
				    return null;
				}
				public String LUGAR_RESIDENCIADefault(){
				
					return "";
				
				}
				public String LUGAR_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String LUGAR_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String LUGAR_RESIDENCIAOriginalDbColumnName(){
				
					return "LUGAR_RESIDENCIA";
				
				}

				
			    public int LOCALIDADES_ID;

				public int getLOCALIDADES_ID () {
					return this.LOCALIDADES_ID;
				}

				public Boolean LOCALIDADES_IDIsNullable(){
				    return false;
				}
				public Boolean LOCALIDADES_IDIsKey(){
				    return false;
				}
				public Integer LOCALIDADES_IDLength(){
				    return null;
				}
				public Integer LOCALIDADES_IDPrecision(){
				    return null;
				}
				public String LOCALIDADES_IDDefault(){
				
					return "";
				
				}
				public String LOCALIDADES_IDComment(){
				
				    return "";
				
				}
				public String LOCALIDADES_IDPattern(){
				
					return "";
				
				}
				public String LOCALIDADES_IDOriginalDbColumnName(){
				
					return "LOCALIDADES_ID";
				
				}

				
			    public int GSANGUINEOS_ID;

				public int getGSANGUINEOS_ID () {
					return this.GSANGUINEOS_ID;
				}

				public Boolean GSANGUINEOS_IDIsNullable(){
				    return false;
				}
				public Boolean GSANGUINEOS_IDIsKey(){
				    return false;
				}
				public Integer GSANGUINEOS_IDLength(){
				    return null;
				}
				public Integer GSANGUINEOS_IDPrecision(){
				    return null;
				}
				public String GSANGUINEOS_IDDefault(){
				
					return "";
				
				}
				public String GSANGUINEOS_IDComment(){
				
				    return "";
				
				}
				public String GSANGUINEOS_IDPattern(){
				
					return "";
				
				}
				public String GSANGUINEOS_IDOriginalDbColumnName(){
				
					return "GSANGUINEOS_ID";
				
				}

				
			    public int OCUPACIONES_ID;

				public int getOCUPACIONES_ID () {
					return this.OCUPACIONES_ID;
				}

				public Boolean OCUPACIONES_IDIsNullable(){
				    return false;
				}
				public Boolean OCUPACIONES_IDIsKey(){
				    return false;
				}
				public Integer OCUPACIONES_IDLength(){
				    return null;
				}
				public Integer OCUPACIONES_IDPrecision(){
				    return null;
				}
				public String OCUPACIONES_IDDefault(){
				
					return "";
				
				}
				public String OCUPACIONES_IDComment(){
				
				    return "";
				
				}
				public String OCUPACIONES_IDPattern(){
				
					return "";
				
				}
				public String OCUPACIONES_IDOriginalDbColumnName(){
				
					return "OCUPACIONES_ID";
				
				}

				
			    public int ETNICAS_ID;

				public int getETNICAS_ID () {
					return this.ETNICAS_ID;
				}

				public Boolean ETNICAS_IDIsNullable(){
				    return false;
				}
				public Boolean ETNICAS_IDIsKey(){
				    return false;
				}
				public Integer ETNICAS_IDLength(){
				    return null;
				}
				public Integer ETNICAS_IDPrecision(){
				    return null;
				}
				public String ETNICAS_IDDefault(){
				
					return "";
				
				}
				public String ETNICAS_IDComment(){
				
				    return "";
				
				}
				public String ETNICAS_IDPattern(){
				
					return "";
				
				}
				public String ETNICAS_IDOriginalDbColumnName(){
				
					return "ETNICAS_ID";
				
				}

				
			    public int NSOCIOECONOMICOS_ID;

				public int getNSOCIOECONOMICOS_ID () {
					return this.NSOCIOECONOMICOS_ID;
				}

				public Boolean NSOCIOECONOMICOS_IDIsNullable(){
				    return false;
				}
				public Boolean NSOCIOECONOMICOS_IDIsKey(){
				    return false;
				}
				public Integer NSOCIOECONOMICOS_IDLength(){
				    return null;
				}
				public Integer NSOCIOECONOMICOS_IDPrecision(){
				    return null;
				}
				public String NSOCIOECONOMICOS_IDDefault(){
				
					return "";
				
				}
				public String NSOCIOECONOMICOS_IDComment(){
				
				    return "";
				
				}
				public String NSOCIOECONOMICOS_IDPattern(){
				
					return "";
				
				}
				public String NSOCIOECONOMICOS_IDOriginalDbColumnName(){
				
					return "NSOCIOECONOMICOS_ID";
				
				}

				
			    public int TVIVIENDA_ID;

				public int getTVIVIENDA_ID () {
					return this.TVIVIENDA_ID;
				}

				public Boolean TVIVIENDA_IDIsNullable(){
				    return false;
				}
				public Boolean TVIVIENDA_IDIsKey(){
				    return false;
				}
				public Integer TVIVIENDA_IDLength(){
				    return null;
				}
				public Integer TVIVIENDA_IDPrecision(){
				    return null;
				}
				public String TVIVIENDA_IDDefault(){
				
					return "";
				
				}
				public String TVIVIENDA_IDComment(){
				
				    return "";
				
				}
				public String TVIVIENDA_IDPattern(){
				
					return "";
				
				}
				public String TVIVIENDA_IDOriginalDbColumnName(){
				
					return "TVIVIENDA_ID";
				
				}

				
			    public int NEDUCATIVOS_ID;

				public int getNEDUCATIVOS_ID () {
					return this.NEDUCATIVOS_ID;
				}

				public Boolean NEDUCATIVOS_IDIsNullable(){
				    return false;
				}
				public Boolean NEDUCATIVOS_IDIsKey(){
				    return false;
				}
				public Integer NEDUCATIVOS_IDLength(){
				    return null;
				}
				public Integer NEDUCATIVOS_IDPrecision(){
				    return null;
				}
				public String NEDUCATIVOS_IDDefault(){
				
					return "";
				
				}
				public String NEDUCATIVOS_IDComment(){
				
				    return "";
				
				}
				public String NEDUCATIVOS_IDPattern(){
				
					return "";
				
				}
				public String NEDUCATIVOS_IDOriginalDbColumnName(){
				
					return "NEDUCATIVOS_ID";
				
				}

				
			    public int ESMADSCRITO;

				public int getESMADSCRITO () {
					return this.ESMADSCRITO;
				}

				public Boolean ESMADSCRITOIsNullable(){
				    return false;
				}
				public Boolean ESMADSCRITOIsKey(){
				    return false;
				}
				public Integer ESMADSCRITOLength(){
				    return null;
				}
				public Integer ESMADSCRITOPrecision(){
				    return null;
				}
				public String ESMADSCRITODefault(){
				
					return "";
				
				}
				public String ESMADSCRITOComment(){
				
				    return "";
				
				}
				public String ESMADSCRITOPattern(){
				
					return "";
				
				}
				public String ESMADSCRITOOriginalDbColumnName(){
				
					return "ESMADSCRITO";
				
				}

				
			    public int ENTAPORTANTES_ID;

				public int getENTAPORTANTES_ID () {
					return this.ENTAPORTANTES_ID;
				}

				public Boolean ENTAPORTANTES_IDIsNullable(){
				    return false;
				}
				public Boolean ENTAPORTANTES_IDIsKey(){
				    return false;
				}
				public Integer ENTAPORTANTES_IDLength(){
				    return null;
				}
				public Integer ENTAPORTANTES_IDPrecision(){
				    return null;
				}
				public String ENTAPORTANTES_IDDefault(){
				
					return "";
				
				}
				public String ENTAPORTANTES_IDComment(){
				
				    return "";
				
				}
				public String ENTAPORTANTES_IDPattern(){
				
					return "";
				
				}
				public String ENTAPORTANTES_IDOriginalDbColumnName(){
				
					return "ENTAPORTANTES_ID";
				
				}

				
			    public int GRDMILITARES_ID;

				public int getGRDMILITARES_ID () {
					return this.GRDMILITARES_ID;
				}

				public Boolean GRDMILITARES_IDIsNullable(){
				    return false;
				}
				public Boolean GRDMILITARES_IDIsKey(){
				    return false;
				}
				public Integer GRDMILITARES_IDLength(){
				    return null;
				}
				public Integer GRDMILITARES_IDPrecision(){
				    return null;
				}
				public String GRDMILITARES_IDDefault(){
				
					return "";
				
				}
				public String GRDMILITARES_IDComment(){
				
				    return "";
				
				}
				public String GRDMILITARES_IDPattern(){
				
					return "";
				
				}
				public String GRDMILITARES_IDOriginalDbColumnName(){
				
					return "GRDMILITARES_ID";
				
				}

				
			    public int FUERZAS_ID;

				public int getFUERZAS_ID () {
					return this.FUERZAS_ID;
				}

				public Boolean FUERZAS_IDIsNullable(){
				    return false;
				}
				public Boolean FUERZAS_IDIsKey(){
				    return false;
				}
				public Integer FUERZAS_IDLength(){
				    return null;
				}
				public Integer FUERZAS_IDPrecision(){
				    return null;
				}
				public String FUERZAS_IDDefault(){
				
					return "";
				
				}
				public String FUERZAS_IDComment(){
				
				    return "";
				
				}
				public String FUERZAS_IDPattern(){
				
					return "";
				
				}
				public String FUERZAS_IDOriginalDbColumnName(){
				
					return "FUERZAS_ID";
				
				}

				
			    public int UMILITARES_ID;

				public int getUMILITARES_ID () {
					return this.UMILITARES_ID;
				}

				public Boolean UMILITARES_IDIsNullable(){
				    return false;
				}
				public Boolean UMILITARES_IDIsKey(){
				    return false;
				}
				public Integer UMILITARES_IDLength(){
				    return null;
				}
				public Integer UMILITARES_IDPrecision(){
				    return null;
				}
				public String UMILITARES_IDDefault(){
				
					return "";
				
				}
				public String UMILITARES_IDComment(){
				
				    return "";
				
				}
				public String UMILITARES_IDPattern(){
				
					return "";
				
				}
				public String UMILITARES_IDOriginalDbColumnName(){
				
					return "UMILITARES_ID";
				
				}

				
			    public int TVINCULACIONES_ID;

				public int getTVINCULACIONES_ID () {
					return this.TVINCULACIONES_ID;
				}

				public Boolean TVINCULACIONES_IDIsNullable(){
				    return false;
				}
				public Boolean TVINCULACIONES_IDIsKey(){
				    return false;
				}
				public Integer TVINCULACIONES_IDLength(){
				    return null;
				}
				public Integer TVINCULACIONES_IDPrecision(){
				    return null;
				}
				public String TVINCULACIONES_IDDefault(){
				
					return "";
				
				}
				public String TVINCULACIONES_IDComment(){
				
				    return "";
				
				}
				public String TVINCULACIONES_IDPattern(){
				
					return "";
				
				}
				public String TVINCULACIONES_IDOriginalDbColumnName(){
				
					return "TVINCULACIONES_ID";
				
				}

				
			    public int MOTIVOSESTADO_ID;

				public int getMOTIVOSESTADO_ID () {
					return this.MOTIVOSESTADO_ID;
				}

				public Boolean MOTIVOSESTADO_IDIsNullable(){
				    return false;
				}
				public Boolean MOTIVOSESTADO_IDIsKey(){
				    return false;
				}
				public Integer MOTIVOSESTADO_IDLength(){
				    return null;
				}
				public Integer MOTIVOSESTADO_IDPrecision(){
				    return null;
				}
				public String MOTIVOSESTADO_IDDefault(){
				
					return "";
				
				}
				public String MOTIVOSESTADO_IDComment(){
				
				    return "";
				
				}
				public String MOTIVOSESTADO_IDPattern(){
				
					return "";
				
				}
				public String MOTIVOSESTADO_IDOriginalDbColumnName(){
				
					return "MOTIVOSESTADO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.MENSAJE = readString(dis);
					
			        this.SEXOS_ID = dis.readInt();
					
			        this.ESTCIVILES_ID = dis.readInt();
					
			        this.TDISCAPACIDADES_ID = dis.readInt();
					
			        this.ZRESIDENCIAS = dis.readInt();
					
			        this.LUGAR_RESIDENCIA = dis.readInt();
					
			        this.LOCALIDADES_ID = dis.readInt();
					
			        this.GSANGUINEOS_ID = dis.readInt();
					
			        this.OCUPACIONES_ID = dis.readInt();
					
			        this.ETNICAS_ID = dis.readInt();
					
			        this.NSOCIOECONOMICOS_ID = dis.readInt();
					
			        this.TVIVIENDA_ID = dis.readInt();
					
			        this.NEDUCATIVOS_ID = dis.readInt();
					
			        this.ESMADSCRITO = dis.readInt();
					
			        this.ENTAPORTANTES_ID = dis.readInt();
					
			        this.GRDMILITARES_ID = dis.readInt();
					
			        this.FUERZAS_ID = dis.readInt();
					
			        this.UMILITARES_ID = dis.readInt();
					
			        this.TVINCULACIONES_ID = dis.readInt();
					
			        this.MOTIVOSESTADO_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.MENSAJE = readString(dis);
					
			        this.SEXOS_ID = dis.readInt();
					
			        this.ESTCIVILES_ID = dis.readInt();
					
			        this.TDISCAPACIDADES_ID = dis.readInt();
					
			        this.ZRESIDENCIAS = dis.readInt();
					
			        this.LUGAR_RESIDENCIA = dis.readInt();
					
			        this.LOCALIDADES_ID = dis.readInt();
					
			        this.GSANGUINEOS_ID = dis.readInt();
					
			        this.OCUPACIONES_ID = dis.readInt();
					
			        this.ETNICAS_ID = dis.readInt();
					
			        this.NSOCIOECONOMICOS_ID = dis.readInt();
					
			        this.TVIVIENDA_ID = dis.readInt();
					
			        this.NEDUCATIVOS_ID = dis.readInt();
					
			        this.ESMADSCRITO = dis.readInt();
					
			        this.ENTAPORTANTES_ID = dis.readInt();
					
			        this.GRDMILITARES_ID = dis.readInt();
					
			        this.FUERZAS_ID = dis.readInt();
					
			        this.UMILITARES_ID = dis.readInt();
					
			        this.TVINCULACIONES_ID = dis.readInt();
					
			        this.MOTIVOSESTADO_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
					// int
				
		            	dos.writeInt(this.SEXOS_ID);
					
					// int
				
		            	dos.writeInt(this.ESTCIVILES_ID);
					
					// int
				
		            	dos.writeInt(this.TDISCAPACIDADES_ID);
					
					// int
				
		            	dos.writeInt(this.ZRESIDENCIAS);
					
					// int
				
		            	dos.writeInt(this.LUGAR_RESIDENCIA);
					
					// int
				
		            	dos.writeInt(this.LOCALIDADES_ID);
					
					// int
				
		            	dos.writeInt(this.GSANGUINEOS_ID);
					
					// int
				
		            	dos.writeInt(this.OCUPACIONES_ID);
					
					// int
				
		            	dos.writeInt(this.ETNICAS_ID);
					
					// int
				
		            	dos.writeInt(this.NSOCIOECONOMICOS_ID);
					
					// int
				
		            	dos.writeInt(this.TVIVIENDA_ID);
					
					// int
				
		            	dos.writeInt(this.NEDUCATIVOS_ID);
					
					// int
				
		            	dos.writeInt(this.ESMADSCRITO);
					
					// int
				
		            	dos.writeInt(this.ENTAPORTANTES_ID);
					
					// int
				
		            	dos.writeInt(this.GRDMILITARES_ID);
					
					// int
				
		            	dos.writeInt(this.FUERZAS_ID);
					
					// int
				
		            	dos.writeInt(this.UMILITARES_ID);
					
					// int
				
		            	dos.writeInt(this.TVINCULACIONES_ID);
					
					// int
				
		            	dos.writeInt(this.MOTIVOSESTADO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
					// int
				
		            	dos.writeInt(this.SEXOS_ID);
					
					// int
				
		            	dos.writeInt(this.ESTCIVILES_ID);
					
					// int
				
		            	dos.writeInt(this.TDISCAPACIDADES_ID);
					
					// int
				
		            	dos.writeInt(this.ZRESIDENCIAS);
					
					// int
				
		            	dos.writeInt(this.LUGAR_RESIDENCIA);
					
					// int
				
		            	dos.writeInt(this.LOCALIDADES_ID);
					
					// int
				
		            	dos.writeInt(this.GSANGUINEOS_ID);
					
					// int
				
		            	dos.writeInt(this.OCUPACIONES_ID);
					
					// int
				
		            	dos.writeInt(this.ETNICAS_ID);
					
					// int
				
		            	dos.writeInt(this.NSOCIOECONOMICOS_ID);
					
					// int
				
		            	dos.writeInt(this.TVIVIENDA_ID);
					
					// int
				
		            	dos.writeInt(this.NEDUCATIVOS_ID);
					
					// int
				
		            	dos.writeInt(this.ESMADSCRITO);
					
					// int
				
		            	dos.writeInt(this.ENTAPORTANTES_ID);
					
					// int
				
		            	dos.writeInt(this.GRDMILITARES_ID);
					
					// int
				
		            	dos.writeInt(this.FUERZAS_ID);
					
					// int
				
		            	dos.writeInt(this.UMILITARES_ID);
					
					// int
				
		            	dos.writeInt(this.TVINCULACIONES_ID);
					
					// int
				
		            	dos.writeInt(this.MOTIVOSESTADO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",MENSAJE="+MENSAJE);
		sb.append(",SEXOS_ID="+String.valueOf(SEXOS_ID));
		sb.append(",ESTCIVILES_ID="+String.valueOf(ESTCIVILES_ID));
		sb.append(",TDISCAPACIDADES_ID="+String.valueOf(TDISCAPACIDADES_ID));
		sb.append(",ZRESIDENCIAS="+String.valueOf(ZRESIDENCIAS));
		sb.append(",LUGAR_RESIDENCIA="+String.valueOf(LUGAR_RESIDENCIA));
		sb.append(",LOCALIDADES_ID="+String.valueOf(LOCALIDADES_ID));
		sb.append(",GSANGUINEOS_ID="+String.valueOf(GSANGUINEOS_ID));
		sb.append(",OCUPACIONES_ID="+String.valueOf(OCUPACIONES_ID));
		sb.append(",ETNICAS_ID="+String.valueOf(ETNICAS_ID));
		sb.append(",NSOCIOECONOMICOS_ID="+String.valueOf(NSOCIOECONOMICOS_ID));
		sb.append(",TVIVIENDA_ID="+String.valueOf(TVIVIENDA_ID));
		sb.append(",NEDUCATIVOS_ID="+String.valueOf(NEDUCATIVOS_ID));
		sb.append(",ESMADSCRITO="+String.valueOf(ESMADSCRITO));
		sb.append(",ENTAPORTANTES_ID="+String.valueOf(ENTAPORTANTES_ID));
		sb.append(",GRDMILITARES_ID="+String.valueOf(GRDMILITARES_ID));
		sb.append(",FUERZAS_ID="+String.valueOf(FUERZAS_ID));
		sb.append(",UMILITARES_ID="+String.valueOf(UMILITARES_ID));
		sb.append(",TVINCULACIONES_ID="+String.valueOf(TVINCULACIONES_ID));
		sb.append(",MOTIVOSESTADO_ID="+String.valueOf(MOTIVOSESTADO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(valTdocumentos_idStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 20;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 20;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 20;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 20;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 5;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 20;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer SEXOS_ID;

				public Integer getSEXOS_ID () {
					return this.SEXOS_ID;
				}

				public Boolean SEXOS_IDIsNullable(){
				    return true;
				}
				public Boolean SEXOS_IDIsKey(){
				    return false;
				}
				public Integer SEXOS_IDLength(){
				    return 0;
				}
				public Integer SEXOS_IDPrecision(){
				    return null;
				}
				public String SEXOS_IDDefault(){
				
					return "";
				
				}
				public String SEXOS_IDComment(){
				
				    return "";
				
				}
				public String SEXOS_IDPattern(){
				
					return "";
				
				}
				public String SEXOS_IDOriginalDbColumnName(){
				
					return "SEXOS_ID";
				
				}

				
			    public java.util.Date FECHA_NACIMIENTO;

				public java.util.Date getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 0;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public Integer ESTCIVILES_ID;

				public Integer getESTCIVILES_ID () {
					return this.ESTCIVILES_ID;
				}

				public Boolean ESTCIVILES_IDIsNullable(){
				    return true;
				}
				public Boolean ESTCIVILES_IDIsKey(){
				    return false;
				}
				public Integer ESTCIVILES_IDLength(){
				    return 0;
				}
				public Integer ESTCIVILES_IDPrecision(){
				    return null;
				}
				public String ESTCIVILES_IDDefault(){
				
					return "";
				
				}
				public String ESTCIVILES_IDComment(){
				
				    return "";
				
				}
				public String ESTCIVILES_IDPattern(){
				
					return "";
				
				}
				public String ESTCIVILES_IDOriginalDbColumnName(){
				
					return "ESTCIVILES_ID";
				
				}

				
			    public Integer TDISCAPACIDADES_ID;

				public Integer getTDISCAPACIDADES_ID () {
					return this.TDISCAPACIDADES_ID;
				}

				public Boolean TDISCAPACIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean TDISCAPACIDADES_IDIsKey(){
				    return false;
				}
				public Integer TDISCAPACIDADES_IDLength(){
				    return 0;
				}
				public Integer TDISCAPACIDADES_IDPrecision(){
				    return null;
				}
				public String TDISCAPACIDADES_IDDefault(){
				
					return "";
				
				}
				public String TDISCAPACIDADES_IDComment(){
				
				    return "";
				
				}
				public String TDISCAPACIDADES_IDPattern(){
				
					return "";
				
				}
				public String TDISCAPACIDADES_IDOriginalDbColumnName(){
				
					return "TDISCAPACIDADES_ID";
				
				}

				
			    public String DIRECCION;

				public String getDIRECCION () {
					return this.DIRECCION;
				}

				public Boolean DIRECCIONIsNullable(){
				    return true;
				}
				public Boolean DIRECCIONIsKey(){
				    return false;
				}
				public Integer DIRECCIONLength(){
				    return 20;
				}
				public Integer DIRECCIONPrecision(){
				    return 0;
				}
				public String DIRECCIONDefault(){
				
					return null;
				
				}
				public String DIRECCIONComment(){
				
				    return "";
				
				}
				public String DIRECCIONPattern(){
				
					return "";
				
				}
				public String DIRECCIONOriginalDbColumnName(){
				
					return "DIRECCION";
				
				}

				
			    public String TELEFONO;

				public String getTELEFONO () {
					return this.TELEFONO;
				}

				public Boolean TELEFONOIsNullable(){
				    return true;
				}
				public Boolean TELEFONOIsKey(){
				    return false;
				}
				public Integer TELEFONOLength(){
				    return 20;
				}
				public Integer TELEFONOPrecision(){
				    return 0;
				}
				public String TELEFONODefault(){
				
					return null;
				
				}
				public String TELEFONOComment(){
				
				    return "";
				
				}
				public String TELEFONOPattern(){
				
					return "";
				
				}
				public String TELEFONOOriginalDbColumnName(){
				
					return "TELEFONO";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return 20;
				}
				public Integer CELULARPrecision(){
				    return 0;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public String CORREO_ELECTRONICO;

				public String getCORREO_ELECTRONICO () {
					return this.CORREO_ELECTRONICO;
				}

				public Boolean CORREO_ELECTRONICOIsNullable(){
				    return true;
				}
				public Boolean CORREO_ELECTRONICOIsKey(){
				    return false;
				}
				public Integer CORREO_ELECTRONICOLength(){
				    return 20;
				}
				public Integer CORREO_ELECTRONICOPrecision(){
				    return 0;
				}
				public String CORREO_ELECTRONICODefault(){
				
					return null;
				
				}
				public String CORREO_ELECTRONICOComment(){
				
				    return "";
				
				}
				public String CORREO_ELECTRONICOPattern(){
				
					return "";
				
				}
				public String CORREO_ELECTRONICOOriginalDbColumnName(){
				
					return "CORREO_ELECTRONICO";
				
				}

				
			    public Integer ZRESIDENCIAS;

				public Integer getZRESIDENCIAS () {
					return this.ZRESIDENCIAS;
				}

				public Boolean ZRESIDENCIASIsNullable(){
				    return true;
				}
				public Boolean ZRESIDENCIASIsKey(){
				    return false;
				}
				public Integer ZRESIDENCIASLength(){
				    return 0;
				}
				public Integer ZRESIDENCIASPrecision(){
				    return null;
				}
				public String ZRESIDENCIASDefault(){
				
					return "";
				
				}
				public String ZRESIDENCIASComment(){
				
				    return "";
				
				}
				public String ZRESIDENCIASPattern(){
				
					return "";
				
				}
				public String ZRESIDENCIASOriginalDbColumnName(){
				
					return "ZRESIDENCIAS";
				
				}

				
			    public Integer LUGAR_EXP_DOC;

				public Integer getLUGAR_EXP_DOC () {
					return this.LUGAR_EXP_DOC;
				}

				public Boolean LUGAR_EXP_DOCIsNullable(){
				    return true;
				}
				public Boolean LUGAR_EXP_DOCIsKey(){
				    return false;
				}
				public Integer LUGAR_EXP_DOCLength(){
				    return null;
				}
				public Integer LUGAR_EXP_DOCPrecision(){
				    return null;
				}
				public String LUGAR_EXP_DOCDefault(){
				
					return null;
				
				}
				public String LUGAR_EXP_DOCComment(){
				
				    return "";
				
				}
				public String LUGAR_EXP_DOCPattern(){
				
					return "";
				
				}
				public String LUGAR_EXP_DOCOriginalDbColumnName(){
				
					return "LUGAR_EXP_DOC";
				
				}

				
			    public java.util.Date FECHA_EXPEDICION_DOCUMENTO;

				public java.util.Date getFECHA_EXPEDICION_DOCUMENTO () {
					return this.FECHA_EXPEDICION_DOCUMENTO;
				}

				public Boolean FECHA_EXPEDICION_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_EXPEDICION_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOLength(){
				    return null;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOPrecision(){
				    return null;
				}
				public String FECHA_EXPEDICION_DOCUMENTODefault(){
				
					return null;
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOOriginalDbColumnName(){
				
					return "FECHA_EXPEDICION_DOCUMENTO";
				
				}

				
			    public Integer LUGAR_NACIMIENTO;

				public Integer getLUGAR_NACIMIENTO () {
					return this.LUGAR_NACIMIENTO;
				}

				public Boolean LUGAR_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean LUGAR_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer LUGAR_NACIMIENTOLength(){
				    return null;
				}
				public Integer LUGAR_NACIMIENTOPrecision(){
				    return null;
				}
				public String LUGAR_NACIMIENTODefault(){
				
					return null;
				
				}
				public String LUGAR_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String LUGAR_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String LUGAR_NACIMIENTOOriginalDbColumnName(){
				
					return "LUGAR_NACIMIENTO";
				
				}

				
			    public Integer LUGAR_RESIDENCIA;

				public Integer getLUGAR_RESIDENCIA () {
					return this.LUGAR_RESIDENCIA;
				}

				public Boolean LUGAR_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean LUGAR_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer LUGAR_RESIDENCIALength(){
				    return 0;
				}
				public Integer LUGAR_RESIDENCIAPrecision(){
				    return null;
				}
				public String LUGAR_RESIDENCIADefault(){
				
					return "";
				
				}
				public String LUGAR_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String LUGAR_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String LUGAR_RESIDENCIAOriginalDbColumnName(){
				
					return "LUGAR_RESIDENCIA";
				
				}

				
			    public Integer LOCALIDADES_ID;

				public Integer getLOCALIDADES_ID () {
					return this.LOCALIDADES_ID;
				}

				public Boolean LOCALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean LOCALIDADES_IDIsKey(){
				    return false;
				}
				public Integer LOCALIDADES_IDLength(){
				    return 0;
				}
				public Integer LOCALIDADES_IDPrecision(){
				    return 0;
				}
				public String LOCALIDADES_IDDefault(){
				
					return "";
				
				}
				public String LOCALIDADES_IDComment(){
				
				    return "";
				
				}
				public String LOCALIDADES_IDPattern(){
				
					return "";
				
				}
				public String LOCALIDADES_IDOriginalDbColumnName(){
				
					return "LOCALIDADES_ID";
				
				}

				
			    public Integer GSANGUINEOS_ID;

				public Integer getGSANGUINEOS_ID () {
					return this.GSANGUINEOS_ID;
				}

				public Boolean GSANGUINEOS_IDIsNullable(){
				    return true;
				}
				public Boolean GSANGUINEOS_IDIsKey(){
				    return false;
				}
				public Integer GSANGUINEOS_IDLength(){
				    return 0;
				}
				public Integer GSANGUINEOS_IDPrecision(){
				    return null;
				}
				public String GSANGUINEOS_IDDefault(){
				
					return "";
				
				}
				public String GSANGUINEOS_IDComment(){
				
				    return "";
				
				}
				public String GSANGUINEOS_IDPattern(){
				
					return "";
				
				}
				public String GSANGUINEOS_IDOriginalDbColumnName(){
				
					return "GSANGUINEOS_ID";
				
				}

				
			    public BigDecimal ESTATURA;

				public BigDecimal getESTATURA () {
					return this.ESTATURA;
				}

				public Boolean ESTATURAIsNullable(){
				    return true;
				}
				public Boolean ESTATURAIsKey(){
				    return false;
				}
				public Integer ESTATURALength(){
				    return 0;
				}
				public Integer ESTATURAPrecision(){
				    return 0;
				}
				public String ESTATURADefault(){
				
					return "";
				
				}
				public String ESTATURAComment(){
				
				    return "";
				
				}
				public String ESTATURAPattern(){
				
					return "";
				
				}
				public String ESTATURAOriginalDbColumnName(){
				
					return "ESTATURA";
				
				}

				
			    public Integer OCUPACIONES_ID;

				public Integer getOCUPACIONES_ID () {
					return this.OCUPACIONES_ID;
				}

				public Boolean OCUPACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean OCUPACIONES_IDIsKey(){
				    return false;
				}
				public Integer OCUPACIONES_IDLength(){
				    return 0;
				}
				public Integer OCUPACIONES_IDPrecision(){
				    return null;
				}
				public String OCUPACIONES_IDDefault(){
				
					return "";
				
				}
				public String OCUPACIONES_IDComment(){
				
				    return "";
				
				}
				public String OCUPACIONES_IDPattern(){
				
					return "";
				
				}
				public String OCUPACIONES_IDOriginalDbColumnName(){
				
					return "OCUPACIONES_ID";
				
				}

				
			    public Integer ETNICAS_ID;

				public Integer getETNICAS_ID () {
					return this.ETNICAS_ID;
				}

				public Boolean ETNICAS_IDIsNullable(){
				    return true;
				}
				public Boolean ETNICAS_IDIsKey(){
				    return false;
				}
				public Integer ETNICAS_IDLength(){
				    return 0;
				}
				public Integer ETNICAS_IDPrecision(){
				    return null;
				}
				public String ETNICAS_IDDefault(){
				
					return "";
				
				}
				public String ETNICAS_IDComment(){
				
				    return "";
				
				}
				public String ETNICAS_IDPattern(){
				
					return "";
				
				}
				public String ETNICAS_IDOriginalDbColumnName(){
				
					return "ETNICAS_ID";
				
				}

				
			    public Integer NSOCIOECONOMICOS_ID;

				public Integer getNSOCIOECONOMICOS_ID () {
					return this.NSOCIOECONOMICOS_ID;
				}

				public Boolean NSOCIOECONOMICOS_IDIsNullable(){
				    return true;
				}
				public Boolean NSOCIOECONOMICOS_IDIsKey(){
				    return false;
				}
				public Integer NSOCIOECONOMICOS_IDLength(){
				    return 0;
				}
				public Integer NSOCIOECONOMICOS_IDPrecision(){
				    return null;
				}
				public String NSOCIOECONOMICOS_IDDefault(){
				
					return "";
				
				}
				public String NSOCIOECONOMICOS_IDComment(){
				
				    return "";
				
				}
				public String NSOCIOECONOMICOS_IDPattern(){
				
					return "";
				
				}
				public String NSOCIOECONOMICOS_IDOriginalDbColumnName(){
				
					return "NSOCIOECONOMICOS_ID";
				
				}

				
			    public Integer TVIVIENDA_ID;

				public Integer getTVIVIENDA_ID () {
					return this.TVIVIENDA_ID;
				}

				public Boolean TVIVIENDA_IDIsNullable(){
				    return true;
				}
				public Boolean TVIVIENDA_IDIsKey(){
				    return false;
				}
				public Integer TVIVIENDA_IDLength(){
				    return 0;
				}
				public Integer TVIVIENDA_IDPrecision(){
				    return null;
				}
				public String TVIVIENDA_IDDefault(){
				
					return "";
				
				}
				public String TVIVIENDA_IDComment(){
				
				    return "";
				
				}
				public String TVIVIENDA_IDPattern(){
				
					return "";
				
				}
				public String TVIVIENDA_IDOriginalDbColumnName(){
				
					return "TVIVIENDA_ID";
				
				}

				
			    public Integer CODMCPIO;

				public Integer getCODMCPIO () {
					return this.CODMCPIO;
				}

				public Boolean CODMCPIOIsNullable(){
				    return true;
				}
				public Boolean CODMCPIOIsKey(){
				    return false;
				}
				public Integer CODMCPIOLength(){
				    return 0;
				}
				public Integer CODMCPIOPrecision(){
				    return 0;
				}
				public String CODMCPIODefault(){
				
					return "";
				
				}
				public String CODMCPIOComment(){
				
				    return "";
				
				}
				public String CODMCPIOPattern(){
				
					return "";
				
				}
				public String CODMCPIOOriginalDbColumnName(){
				
					return "CODMCPIO";
				
				}

				
			    public Integer NEDUCATIVOS_ID;

				public Integer getNEDUCATIVOS_ID () {
					return this.NEDUCATIVOS_ID;
				}

				public Boolean NEDUCATIVOS_IDIsNullable(){
				    return true;
				}
				public Boolean NEDUCATIVOS_IDIsKey(){
				    return false;
				}
				public Integer NEDUCATIVOS_IDLength(){
				    return 0;
				}
				public Integer NEDUCATIVOS_IDPrecision(){
				    return null;
				}
				public String NEDUCATIVOS_IDDefault(){
				
					return "";
				
				}
				public String NEDUCATIVOS_IDComment(){
				
				    return "";
				
				}
				public String NEDUCATIVOS_IDPattern(){
				
					return "";
				
				}
				public String NEDUCATIVOS_IDOriginalDbColumnName(){
				
					return "NEDUCATIVOS_ID";
				
				}

				
			    public Integer ESMADSCRITO;

				public Integer getESMADSCRITO () {
					return this.ESMADSCRITO;
				}

				public Boolean ESMADSCRITOIsNullable(){
				    return true;
				}
				public Boolean ESMADSCRITOIsKey(){
				    return false;
				}
				public Integer ESMADSCRITOLength(){
				    return 0;
				}
				public Integer ESMADSCRITOPrecision(){
				    return null;
				}
				public String ESMADSCRITODefault(){
				
					return "";
				
				}
				public String ESMADSCRITOComment(){
				
				    return "";
				
				}
				public String ESMADSCRITOPattern(){
				
					return "";
				
				}
				public String ESMADSCRITOOriginalDbColumnName(){
				
					return "ESMADSCRITO";
				
				}

				
			    public Integer PARENTESCOS_ID;

				public Integer getPARENTESCOS_ID () {
					return this.PARENTESCOS_ID;
				}

				public Boolean PARENTESCOS_IDIsNullable(){
				    return true;
				}
				public Boolean PARENTESCOS_IDIsKey(){
				    return false;
				}
				public Integer PARENTESCOS_IDLength(){
				    return 0;
				}
				public Integer PARENTESCOS_IDPrecision(){
				    return null;
				}
				public String PARENTESCOS_IDDefault(){
				
					return "";
				
				}
				public String PARENTESCOS_IDComment(){
				
				    return "";
				
				}
				public String PARENTESCOS_IDPattern(){
				
					return "";
				
				}
				public String PARENTESCOS_IDOriginalDbColumnName(){
				
					return "PARENTESCOS_ID";
				
				}

				
			    public java.util.Date FECHAI;

				public java.util.Date getFECHAI () {
					return this.FECHAI;
				}

				public Boolean FECHAIIsNullable(){
				    return true;
				}
				public Boolean FECHAIIsKey(){
				    return false;
				}
				public Integer FECHAILength(){
				    return 0;
				}
				public Integer FECHAIPrecision(){
				    return 0;
				}
				public String FECHAIDefault(){
				
					return null;
				
				}
				public String FECHAIComment(){
				
				    return "";
				
				}
				public String FECHAIPattern(){
				
					return "";
				
				}
				public String FECHAIOriginalDbColumnName(){
				
					return "FECHAI";
				
				}

				
			    public java.util.Date FECHA_CADUCIDAD;

				public java.util.Date getFECHA_CADUCIDAD () {
					return this.FECHA_CADUCIDAD;
				}

				public Boolean FECHA_CADUCIDADIsNullable(){
				    return true;
				}
				public Boolean FECHA_CADUCIDADIsKey(){
				    return false;
				}
				public Integer FECHA_CADUCIDADLength(){
				    return 0;
				}
				public Integer FECHA_CADUCIDADPrecision(){
				    return 0;
				}
				public String FECHA_CADUCIDADDefault(){
				
					return null;
				
				}
				public String FECHA_CADUCIDADComment(){
				
				    return "";
				
				}
				public String FECHA_CADUCIDADPattern(){
				
					return "";
				
				}
				public String FECHA_CADUCIDADOriginalDbColumnName(){
				
					return "FECHA_CADUCIDAD";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 34;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public String PLANAFILIACIONES_ID;

				public String getPLANAFILIACIONES_ID () {
					return this.PLANAFILIACIONES_ID;
				}

				public Boolean PLANAFILIACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean PLANAFILIACIONES_IDIsKey(){
				    return false;
				}
				public Integer PLANAFILIACIONES_IDLength(){
				    return 0;
				}
				public Integer PLANAFILIACIONES_IDPrecision(){
				    return 0;
				}
				public String PLANAFILIACIONES_IDDefault(){
				
					return null;
				
				}
				public String PLANAFILIACIONES_IDComment(){
				
				    return "";
				
				}
				public String PLANAFILIACIONES_IDPattern(){
				
					return "";
				
				}
				public String PLANAFILIACIONES_IDOriginalDbColumnName(){
				
					return "PLANAFILIACIONES_ID";
				
				}

				
			    public Integer ENTAPORTANTES_ID;

				public Integer getENTAPORTANTES_ID () {
					return this.ENTAPORTANTES_ID;
				}

				public Boolean ENTAPORTANTES_IDIsNullable(){
				    return true;
				}
				public Boolean ENTAPORTANTES_IDIsKey(){
				    return false;
				}
				public Integer ENTAPORTANTES_IDLength(){
				    return 0;
				}
				public Integer ENTAPORTANTES_IDPrecision(){
				    return null;
				}
				public String ENTAPORTANTES_IDDefault(){
				
					return "";
				
				}
				public String ENTAPORTANTES_IDComment(){
				
				    return "";
				
				}
				public String ENTAPORTANTES_IDPattern(){
				
					return "";
				
				}
				public String ENTAPORTANTES_IDOriginalDbColumnName(){
				
					return "ENTAPORTANTES_ID";
				
				}

				
			    public Integer GRDMILITARES_ID;

				public Integer getGRDMILITARES_ID () {
					return this.GRDMILITARES_ID;
				}

				public Boolean GRDMILITARES_IDIsNullable(){
				    return true;
				}
				public Boolean GRDMILITARES_IDIsKey(){
				    return false;
				}
				public Integer GRDMILITARES_IDLength(){
				    return 0;
				}
				public Integer GRDMILITARES_IDPrecision(){
				    return null;
				}
				public String GRDMILITARES_IDDefault(){
				
					return "";
				
				}
				public String GRDMILITARES_IDComment(){
				
				    return "";
				
				}
				public String GRDMILITARES_IDPattern(){
				
					return "";
				
				}
				public String GRDMILITARES_IDOriginalDbColumnName(){
				
					return "GRDMILITARES_ID";
				
				}

				
			    public Integer FUERZAS_ID;

				public Integer getFUERZAS_ID () {
					return this.FUERZAS_ID;
				}

				public Boolean FUERZAS_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZAS_IDIsKey(){
				    return false;
				}
				public Integer FUERZAS_IDLength(){
				    return 0;
				}
				public Integer FUERZAS_IDPrecision(){
				    return null;
				}
				public String FUERZAS_IDDefault(){
				
					return "";
				
				}
				public String FUERZAS_IDComment(){
				
				    return "";
				
				}
				public String FUERZAS_IDPattern(){
				
					return "";
				
				}
				public String FUERZAS_IDOriginalDbColumnName(){
				
					return "FUERZAS_ID";
				
				}

				
			    public Integer UMILITARES_ID;

				public Integer getUMILITARES_ID () {
					return this.UMILITARES_ID;
				}

				public Boolean UMILITARES_IDIsNullable(){
				    return true;
				}
				public Boolean UMILITARES_IDIsKey(){
				    return false;
				}
				public Integer UMILITARES_IDLength(){
				    return 0;
				}
				public Integer UMILITARES_IDPrecision(){
				    return null;
				}
				public String UMILITARES_IDDefault(){
				
					return "";
				
				}
				public String UMILITARES_IDComment(){
				
				    return "";
				
				}
				public String UMILITARES_IDPattern(){
				
					return "";
				
				}
				public String UMILITARES_IDOriginalDbColumnName(){
				
					return "UMILITARES_ID";
				
				}

				
			    public Integer PRINCIPAL;

				public Integer getPRINCIPAL () {
					return this.PRINCIPAL;
				}

				public Boolean PRINCIPALIsNullable(){
				    return true;
				}
				public Boolean PRINCIPALIsKey(){
				    return false;
				}
				public Integer PRINCIPALLength(){
				    return 0;
				}
				public Integer PRINCIPALPrecision(){
				    return null;
				}
				public String PRINCIPALDefault(){
				
					return "";
				
				}
				public String PRINCIPALComment(){
				
				    return "";
				
				}
				public String PRINCIPALPattern(){
				
					return "";
				
				}
				public String PRINCIPALOriginalDbColumnName(){
				
					return "PRINCIPAL";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 100;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public Integer TVINCULACIONES_ID;

				public Integer getTVINCULACIONES_ID () {
					return this.TVINCULACIONES_ID;
				}

				public Boolean TVINCULACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean TVINCULACIONES_IDIsKey(){
				    return false;
				}
				public Integer TVINCULACIONES_IDLength(){
				    return 0;
				}
				public Integer TVINCULACIONES_IDPrecision(){
				    return null;
				}
				public String TVINCULACIONES_IDDefault(){
				
					return "";
				
				}
				public String TVINCULACIONES_IDComment(){
				
				    return "";
				
				}
				public String TVINCULACIONES_IDPattern(){
				
					return "";
				
				}
				public String TVINCULACIONES_IDOriginalDbColumnName(){
				
					return "TVINCULACIONES_ID";
				
				}

				
			    public Integer ESTADOS_ID;

				public Integer getESTADOS_ID () {
					return this.ESTADOS_ID;
				}

				public Boolean ESTADOS_IDIsNullable(){
				    return true;
				}
				public Boolean ESTADOS_IDIsKey(){
				    return false;
				}
				public Integer ESTADOS_IDLength(){
				    return 0;
				}
				public Integer ESTADOS_IDPrecision(){
				    return null;
				}
				public String ESTADOS_IDDefault(){
				
					return "";
				
				}
				public String ESTADOS_IDComment(){
				
				    return "";
				
				}
				public String ESTADOS_IDPattern(){
				
					return "";
				
				}
				public String ESTADOS_IDOriginalDbColumnName(){
				
					return "ESTADOS_ID";
				
				}

				
			    public Integer USUARIOS_ID;

				public Integer getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public Integer MOTIVOSESTADO_ID;

				public Integer getMOTIVOSESTADO_ID () {
					return this.MOTIVOSESTADO_ID;
				}

				public Boolean MOTIVOSESTADO_IDIsNullable(){
				    return true;
				}
				public Boolean MOTIVOSESTADO_IDIsKey(){
				    return false;
				}
				public Integer MOTIVOSESTADO_IDLength(){
				    return 0;
				}
				public Integer MOTIVOSESTADO_IDPrecision(){
				    return null;
				}
				public String MOTIVOSESTADO_IDDefault(){
				
					return "";
				
				}
				public String MOTIVOSESTADO_IDComment(){
				
				    return "";
				
				}
				public String MOTIVOSESTADO_IDPattern(){
				
					return "";
				
				}
				public String MOTIVOSESTADO_IDOriginalDbColumnName(){
				
					return "MOTIVOSESTADO_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 250;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public Integer RNOVEDADES_ID;

				public Integer getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return true;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 0;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return null;
				}
				public String RNOVEDADES_IDDefault(){
				
					return "";
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public Integer VANTERIOR;

				public Integer getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 0;
				}
				public Integer VANTERIORPrecision(){
				    return null;
				}
				public String VANTERIORDefault(){
				
					return "";
				
				}
				public String VANTERIORComment(){
				
				    return "";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public Integer VACTUAL;

				public Integer getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 0;
				}
				public Integer VACTUALPrecision(){
				    return null;
				}
				public String VACTUALDefault(){
				
					return "";
				
				}
				public String VACTUALComment(){
				
				    return "";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.SEXOS_ID = readInteger(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
						this.ESTCIVILES_ID = readInteger(dis);
					
						this.TDISCAPACIDADES_ID = readInteger(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.CORREO_ELECTRONICO = readString(dis);
					
						this.ZRESIDENCIAS = readInteger(dis);
					
						this.LUGAR_EXP_DOC = readInteger(dis);
					
					this.FECHA_EXPEDICION_DOCUMENTO = readDate(dis);
					
						this.LUGAR_NACIMIENTO = readInteger(dis);
					
						this.LUGAR_RESIDENCIA = readInteger(dis);
					
						this.LOCALIDADES_ID = readInteger(dis);
					
						this.GSANGUINEOS_ID = readInteger(dis);
					
						this.ESTATURA = (BigDecimal) dis.readObject();
					
						this.OCUPACIONES_ID = readInteger(dis);
					
						this.ETNICAS_ID = readInteger(dis);
					
						this.NSOCIOECONOMICOS_ID = readInteger(dis);
					
						this.TVIVIENDA_ID = readInteger(dis);
					
						this.CODMCPIO = readInteger(dis);
					
						this.NEDUCATIVOS_ID = readInteger(dis);
					
						this.ESMADSCRITO = readInteger(dis);
					
						this.PARENTESCOS_ID = readInteger(dis);
					
					this.FECHAI = readDate(dis);
					
					this.FECHA_CADUCIDAD = readDate(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.PLANAFILIACIONES_ID = readString(dis);
					
						this.ENTAPORTANTES_ID = readInteger(dis);
					
						this.GRDMILITARES_ID = readInteger(dis);
					
						this.FUERZAS_ID = readInteger(dis);
					
						this.UMILITARES_ID = readInteger(dis);
					
						this.PRINCIPAL = readInteger(dis);
					
					this.ESTADO = readString(dis);
					
						this.TVINCULACIONES_ID = readInteger(dis);
					
						this.ESTADOS_ID = readInteger(dis);
					
						this.USUARIOS_ID = readInteger(dis);
					
						this.MOTIVOSESTADO_ID = readInteger(dis);
					
					this.MOTIVO = readString(dis);
					
						this.RNOVEDADES_ID = readInteger(dis);
					
						this.VANTERIOR = readInteger(dis);
					
						this.VACTUAL = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.SEXOS_ID = readInteger(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
						this.ESTCIVILES_ID = readInteger(dis);
					
						this.TDISCAPACIDADES_ID = readInteger(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.CORREO_ELECTRONICO = readString(dis);
					
						this.ZRESIDENCIAS = readInteger(dis);
					
						this.LUGAR_EXP_DOC = readInteger(dis);
					
					this.FECHA_EXPEDICION_DOCUMENTO = readDate(dis);
					
						this.LUGAR_NACIMIENTO = readInteger(dis);
					
						this.LUGAR_RESIDENCIA = readInteger(dis);
					
						this.LOCALIDADES_ID = readInteger(dis);
					
						this.GSANGUINEOS_ID = readInteger(dis);
					
						this.ESTATURA = (BigDecimal) dis.readObject();
					
						this.OCUPACIONES_ID = readInteger(dis);
					
						this.ETNICAS_ID = readInteger(dis);
					
						this.NSOCIOECONOMICOS_ID = readInteger(dis);
					
						this.TVIVIENDA_ID = readInteger(dis);
					
						this.CODMCPIO = readInteger(dis);
					
						this.NEDUCATIVOS_ID = readInteger(dis);
					
						this.ESMADSCRITO = readInteger(dis);
					
						this.PARENTESCOS_ID = readInteger(dis);
					
					this.FECHAI = readDate(dis);
					
					this.FECHA_CADUCIDAD = readDate(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.PLANAFILIACIONES_ID = readString(dis);
					
						this.ENTAPORTANTES_ID = readInteger(dis);
					
						this.GRDMILITARES_ID = readInteger(dis);
					
						this.FUERZAS_ID = readInteger(dis);
					
						this.UMILITARES_ID = readInteger(dis);
					
						this.PRINCIPAL = readInteger(dis);
					
					this.ESTADO = readString(dis);
					
						this.TVINCULACIONES_ID = readInteger(dis);
					
						this.ESTADOS_ID = readInteger(dis);
					
						this.USUARIOS_ID = readInteger(dis);
					
						this.MOTIVOSESTADO_ID = readInteger(dis);
					
					this.MOTIVO = readString(dis);
					
						this.RNOVEDADES_ID = readInteger(dis);
					
						this.VANTERIOR = readInteger(dis);
					
						this.VACTUAL = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.SEXOS_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.ESTCIVILES_ID,dos);
					
					// Integer
				
						writeInteger(this.TDISCAPACIDADES_ID,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO,dos);
					
					// Integer
				
						writeInteger(this.ZRESIDENCIAS,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_EXP_DOC,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_RESIDENCIA,dos);
					
					// Integer
				
						writeInteger(this.LOCALIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.GSANGUINEOS_ID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTATURA);
					
					// Integer
				
						writeInteger(this.OCUPACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.ETNICAS_ID,dos);
					
					// Integer
				
						writeInteger(this.NSOCIOECONOMICOS_ID,dos);
					
					// Integer
				
						writeInteger(this.TVIVIENDA_ID,dos);
					
					// Integer
				
						writeInteger(this.CODMCPIO,dos);
					
					// Integer
				
						writeInteger(this.NEDUCATIVOS_ID,dos);
					
					// Integer
				
						writeInteger(this.ESMADSCRITO,dos);
					
					// Integer
				
						writeInteger(this.PARENTESCOS_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAI,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_CADUCIDAD,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.PLANAFILIACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.ENTAPORTANTES_ID,dos);
					
					// Integer
				
						writeInteger(this.GRDMILITARES_ID,dos);
					
					// Integer
				
						writeInteger(this.FUERZAS_ID,dos);
					
					// Integer
				
						writeInteger(this.UMILITARES_ID,dos);
					
					// Integer
				
						writeInteger(this.PRINCIPAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// Integer
				
						writeInteger(this.TVINCULACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.ESTADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// Integer
				
						writeInteger(this.MOTIVOSESTADO_ID,dos);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// Integer
				
						writeInteger(this.RNOVEDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.VANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.VACTUAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.SEXOS_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.ESTCIVILES_ID,dos);
					
					// Integer
				
						writeInteger(this.TDISCAPACIDADES_ID,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO,dos);
					
					// Integer
				
						writeInteger(this.ZRESIDENCIAS,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_EXP_DOC,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_RESIDENCIA,dos);
					
					// Integer
				
						writeInteger(this.LOCALIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.GSANGUINEOS_ID,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTATURA);
					
					// Integer
				
						writeInteger(this.OCUPACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.ETNICAS_ID,dos);
					
					// Integer
				
						writeInteger(this.NSOCIOECONOMICOS_ID,dos);
					
					// Integer
				
						writeInteger(this.TVIVIENDA_ID,dos);
					
					// Integer
				
						writeInteger(this.CODMCPIO,dos);
					
					// Integer
				
						writeInteger(this.NEDUCATIVOS_ID,dos);
					
					// Integer
				
						writeInteger(this.ESMADSCRITO,dos);
					
					// Integer
				
						writeInteger(this.PARENTESCOS_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAI,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_CADUCIDAD,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.PLANAFILIACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.ENTAPORTANTES_ID,dos);
					
					// Integer
				
						writeInteger(this.GRDMILITARES_ID,dos);
					
					// Integer
				
						writeInteger(this.FUERZAS_ID,dos);
					
					// Integer
				
						writeInteger(this.UMILITARES_ID,dos);
					
					// Integer
				
						writeInteger(this.PRINCIPAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// Integer
				
						writeInteger(this.TVINCULACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.ESTADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// Integer
				
						writeInteger(this.MOTIVOSESTADO_ID,dos);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// Integer
				
						writeInteger(this.RNOVEDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.VANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.VACTUAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",SEXOS_ID="+String.valueOf(SEXOS_ID));
		sb.append(",FECHA_NACIMIENTO="+String.valueOf(FECHA_NACIMIENTO));
		sb.append(",ESTCIVILES_ID="+String.valueOf(ESTCIVILES_ID));
		sb.append(",TDISCAPACIDADES_ID="+String.valueOf(TDISCAPACIDADES_ID));
		sb.append(",DIRECCION="+DIRECCION);
		sb.append(",TELEFONO="+TELEFONO);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",CORREO_ELECTRONICO="+CORREO_ELECTRONICO);
		sb.append(",ZRESIDENCIAS="+String.valueOf(ZRESIDENCIAS));
		sb.append(",LUGAR_EXP_DOC="+String.valueOf(LUGAR_EXP_DOC));
		sb.append(",FECHA_EXPEDICION_DOCUMENTO="+String.valueOf(FECHA_EXPEDICION_DOCUMENTO));
		sb.append(",LUGAR_NACIMIENTO="+String.valueOf(LUGAR_NACIMIENTO));
		sb.append(",LUGAR_RESIDENCIA="+String.valueOf(LUGAR_RESIDENCIA));
		sb.append(",LOCALIDADES_ID="+String.valueOf(LOCALIDADES_ID));
		sb.append(",GSANGUINEOS_ID="+String.valueOf(GSANGUINEOS_ID));
		sb.append(",ESTATURA="+String.valueOf(ESTATURA));
		sb.append(",OCUPACIONES_ID="+String.valueOf(OCUPACIONES_ID));
		sb.append(",ETNICAS_ID="+String.valueOf(ETNICAS_ID));
		sb.append(",NSOCIOECONOMICOS_ID="+String.valueOf(NSOCIOECONOMICOS_ID));
		sb.append(",TVIVIENDA_ID="+String.valueOf(TVIVIENDA_ID));
		sb.append(",CODMCPIO="+String.valueOf(CODMCPIO));
		sb.append(",NEDUCATIVOS_ID="+String.valueOf(NEDUCATIVOS_ID));
		sb.append(",ESMADSCRITO="+String.valueOf(ESMADSCRITO));
		sb.append(",PARENTESCOS_ID="+String.valueOf(PARENTESCOS_ID));
		sb.append(",FECHAI="+String.valueOf(FECHAI));
		sb.append(",FECHA_CADUCIDAD="+String.valueOf(FECHA_CADUCIDAD));
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",PLANAFILIACIONES_ID="+PLANAFILIACIONES_ID);
		sb.append(",ENTAPORTANTES_ID="+String.valueOf(ENTAPORTANTES_ID));
		sb.append(",GRDMILITARES_ID="+String.valueOf(GRDMILITARES_ID));
		sb.append(",FUERZAS_ID="+String.valueOf(FUERZAS_ID));
		sb.append(",UMILITARES_ID="+String.valueOf(UMILITARES_ID));
		sb.append(",PRINCIPAL="+String.valueOf(PRINCIPAL));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",TVINCULACIONES_ID="+String.valueOf(TVINCULACIONES_ID));
		sb.append(",ESTADOS_ID="+String.valueOf(ESTADOS_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",MOTIVOSESTADO_ID="+String.valueOf(MOTIVOSESTADO_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",VANTERIOR="+String.valueOf(VANTERIOR));
		sb.append(",VACTUAL="+String.valueOf(VACTUAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 20;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 20;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 20;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 20;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 5;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 20;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer SEXOS_ID;

				public Integer getSEXOS_ID () {
					return this.SEXOS_ID;
				}

				public Boolean SEXOS_IDIsNullable(){
				    return true;
				}
				public Boolean SEXOS_IDIsKey(){
				    return false;
				}
				public Integer SEXOS_IDLength(){
				    return 0;
				}
				public Integer SEXOS_IDPrecision(){
				    return null;
				}
				public String SEXOS_IDDefault(){
				
					return "";
				
				}
				public String SEXOS_IDComment(){
				
				    return "";
				
				}
				public String SEXOS_IDPattern(){
				
					return "";
				
				}
				public String SEXOS_IDOriginalDbColumnName(){
				
					return "SEXOS_ID";
				
				}

				
			    public java.util.Date FECHA_NACIMIENTO;

				public java.util.Date getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 0;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public Integer ESTCIVILES_ID;

				public Integer getESTCIVILES_ID () {
					return this.ESTCIVILES_ID;
				}

				public Boolean ESTCIVILES_IDIsNullable(){
				    return true;
				}
				public Boolean ESTCIVILES_IDIsKey(){
				    return false;
				}
				public Integer ESTCIVILES_IDLength(){
				    return 0;
				}
				public Integer ESTCIVILES_IDPrecision(){
				    return null;
				}
				public String ESTCIVILES_IDDefault(){
				
					return "";
				
				}
				public String ESTCIVILES_IDComment(){
				
				    return "";
				
				}
				public String ESTCIVILES_IDPattern(){
				
					return "";
				
				}
				public String ESTCIVILES_IDOriginalDbColumnName(){
				
					return "ESTCIVILES_ID";
				
				}

				
			    public Integer TDISCAPACIDADES_ID;

				public Integer getTDISCAPACIDADES_ID () {
					return this.TDISCAPACIDADES_ID;
				}

				public Boolean TDISCAPACIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean TDISCAPACIDADES_IDIsKey(){
				    return false;
				}
				public Integer TDISCAPACIDADES_IDLength(){
				    return 0;
				}
				public Integer TDISCAPACIDADES_IDPrecision(){
				    return null;
				}
				public String TDISCAPACIDADES_IDDefault(){
				
					return "";
				
				}
				public String TDISCAPACIDADES_IDComment(){
				
				    return "";
				
				}
				public String TDISCAPACIDADES_IDPattern(){
				
					return "";
				
				}
				public String TDISCAPACIDADES_IDOriginalDbColumnName(){
				
					return "TDISCAPACIDADES_ID";
				
				}

				
			    public String DIRECCION;

				public String getDIRECCION () {
					return this.DIRECCION;
				}

				public Boolean DIRECCIONIsNullable(){
				    return true;
				}
				public Boolean DIRECCIONIsKey(){
				    return false;
				}
				public Integer DIRECCIONLength(){
				    return 20;
				}
				public Integer DIRECCIONPrecision(){
				    return 0;
				}
				public String DIRECCIONDefault(){
				
					return null;
				
				}
				public String DIRECCIONComment(){
				
				    return "";
				
				}
				public String DIRECCIONPattern(){
				
					return "";
				
				}
				public String DIRECCIONOriginalDbColumnName(){
				
					return "DIRECCION";
				
				}

				
			    public String TELEFONO;

				public String getTELEFONO () {
					return this.TELEFONO;
				}

				public Boolean TELEFONOIsNullable(){
				    return true;
				}
				public Boolean TELEFONOIsKey(){
				    return false;
				}
				public Integer TELEFONOLength(){
				    return 20;
				}
				public Integer TELEFONOPrecision(){
				    return 0;
				}
				public String TELEFONODefault(){
				
					return null;
				
				}
				public String TELEFONOComment(){
				
				    return "";
				
				}
				public String TELEFONOPattern(){
				
					return "";
				
				}
				public String TELEFONOOriginalDbColumnName(){
				
					return "TELEFONO";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return 20;
				}
				public Integer CELULARPrecision(){
				    return 0;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public String CORREO_ELECTRONICO;

				public String getCORREO_ELECTRONICO () {
					return this.CORREO_ELECTRONICO;
				}

				public Boolean CORREO_ELECTRONICOIsNullable(){
				    return true;
				}
				public Boolean CORREO_ELECTRONICOIsKey(){
				    return false;
				}
				public Integer CORREO_ELECTRONICOLength(){
				    return 20;
				}
				public Integer CORREO_ELECTRONICOPrecision(){
				    return 0;
				}
				public String CORREO_ELECTRONICODefault(){
				
					return null;
				
				}
				public String CORREO_ELECTRONICOComment(){
				
				    return "";
				
				}
				public String CORREO_ELECTRONICOPattern(){
				
					return "";
				
				}
				public String CORREO_ELECTRONICOOriginalDbColumnName(){
				
					return "CORREO_ELECTRONICO";
				
				}

				
			    public Integer ZRESIDENCIAS;

				public Integer getZRESIDENCIAS () {
					return this.ZRESIDENCIAS;
				}

				public Boolean ZRESIDENCIASIsNullable(){
				    return true;
				}
				public Boolean ZRESIDENCIASIsKey(){
				    return false;
				}
				public Integer ZRESIDENCIASLength(){
				    return 0;
				}
				public Integer ZRESIDENCIASPrecision(){
				    return null;
				}
				public String ZRESIDENCIASDefault(){
				
					return "";
				
				}
				public String ZRESIDENCIASComment(){
				
				    return "";
				
				}
				public String ZRESIDENCIASPattern(){
				
					return "";
				
				}
				public String ZRESIDENCIASOriginalDbColumnName(){
				
					return "ZRESIDENCIAS";
				
				}

				
			    public Integer LUGAR_EXP_DOC;

				public Integer getLUGAR_EXP_DOC () {
					return this.LUGAR_EXP_DOC;
				}

				public Boolean LUGAR_EXP_DOCIsNullable(){
				    return true;
				}
				public Boolean LUGAR_EXP_DOCIsKey(){
				    return false;
				}
				public Integer LUGAR_EXP_DOCLength(){
				    return null;
				}
				public Integer LUGAR_EXP_DOCPrecision(){
				    return null;
				}
				public String LUGAR_EXP_DOCDefault(){
				
					return null;
				
				}
				public String LUGAR_EXP_DOCComment(){
				
				    return "";
				
				}
				public String LUGAR_EXP_DOCPattern(){
				
					return "";
				
				}
				public String LUGAR_EXP_DOCOriginalDbColumnName(){
				
					return "LUGAR_EXP_DOC";
				
				}

				
			    public java.util.Date FECHA_EXPEDICION_DOCUMENTO;

				public java.util.Date getFECHA_EXPEDICION_DOCUMENTO () {
					return this.FECHA_EXPEDICION_DOCUMENTO;
				}

				public Boolean FECHA_EXPEDICION_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_EXPEDICION_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOLength(){
				    return null;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOPrecision(){
				    return null;
				}
				public String FECHA_EXPEDICION_DOCUMENTODefault(){
				
					return null;
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOOriginalDbColumnName(){
				
					return "FECHA_EXPEDICION_DOCUMENTO";
				
				}

				
			    public Integer LUGAR_NACIMIENTO;

				public Integer getLUGAR_NACIMIENTO () {
					return this.LUGAR_NACIMIENTO;
				}

				public Boolean LUGAR_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean LUGAR_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer LUGAR_NACIMIENTOLength(){
				    return null;
				}
				public Integer LUGAR_NACIMIENTOPrecision(){
				    return null;
				}
				public String LUGAR_NACIMIENTODefault(){
				
					return null;
				
				}
				public String LUGAR_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String LUGAR_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String LUGAR_NACIMIENTOOriginalDbColumnName(){
				
					return "LUGAR_NACIMIENTO";
				
				}

				
			    public Integer LUGAR_RESIDENCIA;

				public Integer getLUGAR_RESIDENCIA () {
					return this.LUGAR_RESIDENCIA;
				}

				public Boolean LUGAR_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean LUGAR_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer LUGAR_RESIDENCIALength(){
				    return 0;
				}
				public Integer LUGAR_RESIDENCIAPrecision(){
				    return null;
				}
				public String LUGAR_RESIDENCIADefault(){
				
					return "";
				
				}
				public String LUGAR_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String LUGAR_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String LUGAR_RESIDENCIAOriginalDbColumnName(){
				
					return "LUGAR_RESIDENCIA";
				
				}

				
			    public Integer LOCALIDADES_ID;

				public Integer getLOCALIDADES_ID () {
					return this.LOCALIDADES_ID;
				}

				public Boolean LOCALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean LOCALIDADES_IDIsKey(){
				    return false;
				}
				public Integer LOCALIDADES_IDLength(){
				    return 0;
				}
				public Integer LOCALIDADES_IDPrecision(){
				    return 0;
				}
				public String LOCALIDADES_IDDefault(){
				
					return "";
				
				}
				public String LOCALIDADES_IDComment(){
				
				    return "";
				
				}
				public String LOCALIDADES_IDPattern(){
				
					return "";
				
				}
				public String LOCALIDADES_IDOriginalDbColumnName(){
				
					return "LOCALIDADES_ID";
				
				}

				
			    public Integer GSANGUINEOS_ID;

				public Integer getGSANGUINEOS_ID () {
					return this.GSANGUINEOS_ID;
				}

				public Boolean GSANGUINEOS_IDIsNullable(){
				    return true;
				}
				public Boolean GSANGUINEOS_IDIsKey(){
				    return false;
				}
				public Integer GSANGUINEOS_IDLength(){
				    return 0;
				}
				public Integer GSANGUINEOS_IDPrecision(){
				    return null;
				}
				public String GSANGUINEOS_IDDefault(){
				
					return "";
				
				}
				public String GSANGUINEOS_IDComment(){
				
				    return "";
				
				}
				public String GSANGUINEOS_IDPattern(){
				
					return "";
				
				}
				public String GSANGUINEOS_IDOriginalDbColumnName(){
				
					return "GSANGUINEOS_ID";
				
				}

				
			    public BigDecimal ESTATURA;

				public BigDecimal getESTATURA () {
					return this.ESTATURA;
				}

				public Boolean ESTATURAIsNullable(){
				    return true;
				}
				public Boolean ESTATURAIsKey(){
				    return false;
				}
				public Integer ESTATURALength(){
				    return 0;
				}
				public Integer ESTATURAPrecision(){
				    return 0;
				}
				public String ESTATURADefault(){
				
					return "";
				
				}
				public String ESTATURAComment(){
				
				    return "";
				
				}
				public String ESTATURAPattern(){
				
					return "";
				
				}
				public String ESTATURAOriginalDbColumnName(){
				
					return "ESTATURA";
				
				}

				
			    public Integer OCUPACIONES_ID;

				public Integer getOCUPACIONES_ID () {
					return this.OCUPACIONES_ID;
				}

				public Boolean OCUPACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean OCUPACIONES_IDIsKey(){
				    return false;
				}
				public Integer OCUPACIONES_IDLength(){
				    return 0;
				}
				public Integer OCUPACIONES_IDPrecision(){
				    return null;
				}
				public String OCUPACIONES_IDDefault(){
				
					return "";
				
				}
				public String OCUPACIONES_IDComment(){
				
				    return "";
				
				}
				public String OCUPACIONES_IDPattern(){
				
					return "";
				
				}
				public String OCUPACIONES_IDOriginalDbColumnName(){
				
					return "OCUPACIONES_ID";
				
				}

				
			    public Integer ETNICAS_ID;

				public Integer getETNICAS_ID () {
					return this.ETNICAS_ID;
				}

				public Boolean ETNICAS_IDIsNullable(){
				    return true;
				}
				public Boolean ETNICAS_IDIsKey(){
				    return false;
				}
				public Integer ETNICAS_IDLength(){
				    return 0;
				}
				public Integer ETNICAS_IDPrecision(){
				    return null;
				}
				public String ETNICAS_IDDefault(){
				
					return "";
				
				}
				public String ETNICAS_IDComment(){
				
				    return "";
				
				}
				public String ETNICAS_IDPattern(){
				
					return "";
				
				}
				public String ETNICAS_IDOriginalDbColumnName(){
				
					return "ETNICAS_ID";
				
				}

				
			    public Integer NSOCIOECONOMICOS_ID;

				public Integer getNSOCIOECONOMICOS_ID () {
					return this.NSOCIOECONOMICOS_ID;
				}

				public Boolean NSOCIOECONOMICOS_IDIsNullable(){
				    return true;
				}
				public Boolean NSOCIOECONOMICOS_IDIsKey(){
				    return false;
				}
				public Integer NSOCIOECONOMICOS_IDLength(){
				    return 0;
				}
				public Integer NSOCIOECONOMICOS_IDPrecision(){
				    return null;
				}
				public String NSOCIOECONOMICOS_IDDefault(){
				
					return "";
				
				}
				public String NSOCIOECONOMICOS_IDComment(){
				
				    return "";
				
				}
				public String NSOCIOECONOMICOS_IDPattern(){
				
					return "";
				
				}
				public String NSOCIOECONOMICOS_IDOriginalDbColumnName(){
				
					return "NSOCIOECONOMICOS_ID";
				
				}

				
			    public Integer TVIVIENDA_ID;

				public Integer getTVIVIENDA_ID () {
					return this.TVIVIENDA_ID;
				}

				public Boolean TVIVIENDA_IDIsNullable(){
				    return true;
				}
				public Boolean TVIVIENDA_IDIsKey(){
				    return false;
				}
				public Integer TVIVIENDA_IDLength(){
				    return 0;
				}
				public Integer TVIVIENDA_IDPrecision(){
				    return null;
				}
				public String TVIVIENDA_IDDefault(){
				
					return "";
				
				}
				public String TVIVIENDA_IDComment(){
				
				    return "";
				
				}
				public String TVIVIENDA_IDPattern(){
				
					return "";
				
				}
				public String TVIVIENDA_IDOriginalDbColumnName(){
				
					return "TVIVIENDA_ID";
				
				}

				
			    public Integer CODMCPIO;

				public Integer getCODMCPIO () {
					return this.CODMCPIO;
				}

				public Boolean CODMCPIOIsNullable(){
				    return true;
				}
				public Boolean CODMCPIOIsKey(){
				    return false;
				}
				public Integer CODMCPIOLength(){
				    return 0;
				}
				public Integer CODMCPIOPrecision(){
				    return 0;
				}
				public String CODMCPIODefault(){
				
					return "";
				
				}
				public String CODMCPIOComment(){
				
				    return "";
				
				}
				public String CODMCPIOPattern(){
				
					return "";
				
				}
				public String CODMCPIOOriginalDbColumnName(){
				
					return "CODMCPIO";
				
				}

				
			    public Integer NEDUCATIVOS_ID;

				public Integer getNEDUCATIVOS_ID () {
					return this.NEDUCATIVOS_ID;
				}

				public Boolean NEDUCATIVOS_IDIsNullable(){
				    return true;
				}
				public Boolean NEDUCATIVOS_IDIsKey(){
				    return false;
				}
				public Integer NEDUCATIVOS_IDLength(){
				    return 0;
				}
				public Integer NEDUCATIVOS_IDPrecision(){
				    return null;
				}
				public String NEDUCATIVOS_IDDefault(){
				
					return "";
				
				}
				public String NEDUCATIVOS_IDComment(){
				
				    return "";
				
				}
				public String NEDUCATIVOS_IDPattern(){
				
					return "";
				
				}
				public String NEDUCATIVOS_IDOriginalDbColumnName(){
				
					return "NEDUCATIVOS_ID";
				
				}

				
			    public Integer ESMADSCRITO;

				public Integer getESMADSCRITO () {
					return this.ESMADSCRITO;
				}

				public Boolean ESMADSCRITOIsNullable(){
				    return true;
				}
				public Boolean ESMADSCRITOIsKey(){
				    return false;
				}
				public Integer ESMADSCRITOLength(){
				    return 0;
				}
				public Integer ESMADSCRITOPrecision(){
				    return null;
				}
				public String ESMADSCRITODefault(){
				
					return "";
				
				}
				public String ESMADSCRITOComment(){
				
				    return "";
				
				}
				public String ESMADSCRITOPattern(){
				
					return "";
				
				}
				public String ESMADSCRITOOriginalDbColumnName(){
				
					return "ESMADSCRITO";
				
				}

				
			    public Integer PARENTESCOS_ID;

				public Integer getPARENTESCOS_ID () {
					return this.PARENTESCOS_ID;
				}

				public Boolean PARENTESCOS_IDIsNullable(){
				    return true;
				}
				public Boolean PARENTESCOS_IDIsKey(){
				    return false;
				}
				public Integer PARENTESCOS_IDLength(){
				    return 0;
				}
				public Integer PARENTESCOS_IDPrecision(){
				    return null;
				}
				public String PARENTESCOS_IDDefault(){
				
					return "";
				
				}
				public String PARENTESCOS_IDComment(){
				
				    return "";
				
				}
				public String PARENTESCOS_IDPattern(){
				
					return "";
				
				}
				public String PARENTESCOS_IDOriginalDbColumnName(){
				
					return "PARENTESCOS_ID";
				
				}

				
			    public java.util.Date FECHAI;

				public java.util.Date getFECHAI () {
					return this.FECHAI;
				}

				public Boolean FECHAIIsNullable(){
				    return true;
				}
				public Boolean FECHAIIsKey(){
				    return false;
				}
				public Integer FECHAILength(){
				    return 0;
				}
				public Integer FECHAIPrecision(){
				    return 0;
				}
				public String FECHAIDefault(){
				
					return null;
				
				}
				public String FECHAIComment(){
				
				    return "";
				
				}
				public String FECHAIPattern(){
				
					return "";
				
				}
				public String FECHAIOriginalDbColumnName(){
				
					return "FECHAI";
				
				}

				
			    public java.util.Date FECHA_CADUCIDAD;

				public java.util.Date getFECHA_CADUCIDAD () {
					return this.FECHA_CADUCIDAD;
				}

				public Boolean FECHA_CADUCIDADIsNullable(){
				    return true;
				}
				public Boolean FECHA_CADUCIDADIsKey(){
				    return false;
				}
				public Integer FECHA_CADUCIDADLength(){
				    return 0;
				}
				public Integer FECHA_CADUCIDADPrecision(){
				    return 0;
				}
				public String FECHA_CADUCIDADDefault(){
				
					return null;
				
				}
				public String FECHA_CADUCIDADComment(){
				
				    return "";
				
				}
				public String FECHA_CADUCIDADPattern(){
				
					return "";
				
				}
				public String FECHA_CADUCIDADOriginalDbColumnName(){
				
					return "FECHA_CADUCIDAD";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 34;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public String PLANAFILIACIONES_ID;

				public String getPLANAFILIACIONES_ID () {
					return this.PLANAFILIACIONES_ID;
				}

				public Boolean PLANAFILIACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean PLANAFILIACIONES_IDIsKey(){
				    return false;
				}
				public Integer PLANAFILIACIONES_IDLength(){
				    return 0;
				}
				public Integer PLANAFILIACIONES_IDPrecision(){
				    return 0;
				}
				public String PLANAFILIACIONES_IDDefault(){
				
					return null;
				
				}
				public String PLANAFILIACIONES_IDComment(){
				
				    return "";
				
				}
				public String PLANAFILIACIONES_IDPattern(){
				
					return "";
				
				}
				public String PLANAFILIACIONES_IDOriginalDbColumnName(){
				
					return "PLANAFILIACIONES_ID";
				
				}

				
			    public Integer ENTAPORTANTES_ID;

				public Integer getENTAPORTANTES_ID () {
					return this.ENTAPORTANTES_ID;
				}

				public Boolean ENTAPORTANTES_IDIsNullable(){
				    return true;
				}
				public Boolean ENTAPORTANTES_IDIsKey(){
				    return false;
				}
				public Integer ENTAPORTANTES_IDLength(){
				    return 0;
				}
				public Integer ENTAPORTANTES_IDPrecision(){
				    return null;
				}
				public String ENTAPORTANTES_IDDefault(){
				
					return "";
				
				}
				public String ENTAPORTANTES_IDComment(){
				
				    return "";
				
				}
				public String ENTAPORTANTES_IDPattern(){
				
					return "";
				
				}
				public String ENTAPORTANTES_IDOriginalDbColumnName(){
				
					return "ENTAPORTANTES_ID";
				
				}

				
			    public Integer GRDMILITARES_ID;

				public Integer getGRDMILITARES_ID () {
					return this.GRDMILITARES_ID;
				}

				public Boolean GRDMILITARES_IDIsNullable(){
				    return true;
				}
				public Boolean GRDMILITARES_IDIsKey(){
				    return false;
				}
				public Integer GRDMILITARES_IDLength(){
				    return 0;
				}
				public Integer GRDMILITARES_IDPrecision(){
				    return null;
				}
				public String GRDMILITARES_IDDefault(){
				
					return "";
				
				}
				public String GRDMILITARES_IDComment(){
				
				    return "";
				
				}
				public String GRDMILITARES_IDPattern(){
				
					return "";
				
				}
				public String GRDMILITARES_IDOriginalDbColumnName(){
				
					return "GRDMILITARES_ID";
				
				}

				
			    public Integer FUERZAS_ID;

				public Integer getFUERZAS_ID () {
					return this.FUERZAS_ID;
				}

				public Boolean FUERZAS_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZAS_IDIsKey(){
				    return false;
				}
				public Integer FUERZAS_IDLength(){
				    return 0;
				}
				public Integer FUERZAS_IDPrecision(){
				    return null;
				}
				public String FUERZAS_IDDefault(){
				
					return "";
				
				}
				public String FUERZAS_IDComment(){
				
				    return "";
				
				}
				public String FUERZAS_IDPattern(){
				
					return "";
				
				}
				public String FUERZAS_IDOriginalDbColumnName(){
				
					return "FUERZAS_ID";
				
				}

				
			    public Integer UMILITARES_ID;

				public Integer getUMILITARES_ID () {
					return this.UMILITARES_ID;
				}

				public Boolean UMILITARES_IDIsNullable(){
				    return true;
				}
				public Boolean UMILITARES_IDIsKey(){
				    return false;
				}
				public Integer UMILITARES_IDLength(){
				    return 0;
				}
				public Integer UMILITARES_IDPrecision(){
				    return null;
				}
				public String UMILITARES_IDDefault(){
				
					return "";
				
				}
				public String UMILITARES_IDComment(){
				
				    return "";
				
				}
				public String UMILITARES_IDPattern(){
				
					return "";
				
				}
				public String UMILITARES_IDOriginalDbColumnName(){
				
					return "UMILITARES_ID";
				
				}

				
			    public Integer PRINCIPAL;

				public Integer getPRINCIPAL () {
					return this.PRINCIPAL;
				}

				public Boolean PRINCIPALIsNullable(){
				    return true;
				}
				public Boolean PRINCIPALIsKey(){
				    return false;
				}
				public Integer PRINCIPALLength(){
				    return 0;
				}
				public Integer PRINCIPALPrecision(){
				    return null;
				}
				public String PRINCIPALDefault(){
				
					return "";
				
				}
				public String PRINCIPALComment(){
				
				    return "";
				
				}
				public String PRINCIPALPattern(){
				
					return "";
				
				}
				public String PRINCIPALOriginalDbColumnName(){
				
					return "PRINCIPAL";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 100;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public Integer TVINCULACIONES_ID;

				public Integer getTVINCULACIONES_ID () {
					return this.TVINCULACIONES_ID;
				}

				public Boolean TVINCULACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean TVINCULACIONES_IDIsKey(){
				    return false;
				}
				public Integer TVINCULACIONES_IDLength(){
				    return 0;
				}
				public Integer TVINCULACIONES_IDPrecision(){
				    return null;
				}
				public String TVINCULACIONES_IDDefault(){
				
					return "";
				
				}
				public String TVINCULACIONES_IDComment(){
				
				    return "";
				
				}
				public String TVINCULACIONES_IDPattern(){
				
					return "";
				
				}
				public String TVINCULACIONES_IDOriginalDbColumnName(){
				
					return "TVINCULACIONES_ID";
				
				}

				
			    public Integer ESTADOS_ID;

				public Integer getESTADOS_ID () {
					return this.ESTADOS_ID;
				}

				public Boolean ESTADOS_IDIsNullable(){
				    return true;
				}
				public Boolean ESTADOS_IDIsKey(){
				    return false;
				}
				public Integer ESTADOS_IDLength(){
				    return 0;
				}
				public Integer ESTADOS_IDPrecision(){
				    return null;
				}
				public String ESTADOS_IDDefault(){
				
					return "";
				
				}
				public String ESTADOS_IDComment(){
				
				    return "";
				
				}
				public String ESTADOS_IDPattern(){
				
					return "";
				
				}
				public String ESTADOS_IDOriginalDbColumnName(){
				
					return "ESTADOS_ID";
				
				}

				
			    public Integer USUARIOS_ID;

				public Integer getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public Integer MOTIVOSESTADO_ID;

				public Integer getMOTIVOSESTADO_ID () {
					return this.MOTIVOSESTADO_ID;
				}

				public Boolean MOTIVOSESTADO_IDIsNullable(){
				    return true;
				}
				public Boolean MOTIVOSESTADO_IDIsKey(){
				    return false;
				}
				public Integer MOTIVOSESTADO_IDLength(){
				    return 0;
				}
				public Integer MOTIVOSESTADO_IDPrecision(){
				    return null;
				}
				public String MOTIVOSESTADO_IDDefault(){
				
					return "";
				
				}
				public String MOTIVOSESTADO_IDComment(){
				
				    return "";
				
				}
				public String MOTIVOSESTADO_IDPattern(){
				
					return "";
				
				}
				public String MOTIVOSESTADO_IDOriginalDbColumnName(){
				
					return "MOTIVOSESTADO_ID";
				
				}

				
			    public String MOTIVO;

				public String getMOTIVO () {
					return this.MOTIVO;
				}

				public Boolean MOTIVOIsNullable(){
				    return true;
				}
				public Boolean MOTIVOIsKey(){
				    return false;
				}
				public Integer MOTIVOLength(){
				    return 250;
				}
				public Integer MOTIVOPrecision(){
				    return 0;
				}
				public String MOTIVODefault(){
				
					return null;
				
				}
				public String MOTIVOComment(){
				
				    return "";
				
				}
				public String MOTIVOPattern(){
				
					return "";
				
				}
				public String MOTIVOOriginalDbColumnName(){
				
					return "MOTIVO";
				
				}

				
			    public Integer RNOVEDADES_ID;

				public Integer getRNOVEDADES_ID () {
					return this.RNOVEDADES_ID;
				}

				public Boolean RNOVEDADES_IDIsNullable(){
				    return true;
				}
				public Boolean RNOVEDADES_IDIsKey(){
				    return false;
				}
				public Integer RNOVEDADES_IDLength(){
				    return 0;
				}
				public Integer RNOVEDADES_IDPrecision(){
				    return null;
				}
				public String RNOVEDADES_IDDefault(){
				
					return "";
				
				}
				public String RNOVEDADES_IDComment(){
				
				    return "";
				
				}
				public String RNOVEDADES_IDPattern(){
				
					return "";
				
				}
				public String RNOVEDADES_IDOriginalDbColumnName(){
				
					return "RNOVEDADES_ID";
				
				}

				
			    public Integer VANTERIOR;

				public Integer getVANTERIOR () {
					return this.VANTERIOR;
				}

				public Boolean VANTERIORIsNullable(){
				    return true;
				}
				public Boolean VANTERIORIsKey(){
				    return false;
				}
				public Integer VANTERIORLength(){
				    return 0;
				}
				public Integer VANTERIORPrecision(){
				    return null;
				}
				public String VANTERIORDefault(){
				
					return "";
				
				}
				public String VANTERIORComment(){
				
				    return "";
				
				}
				public String VANTERIORPattern(){
				
					return "";
				
				}
				public String VANTERIOROriginalDbColumnName(){
				
					return "VANTERIOR";
				
				}

				
			    public Integer VACTUAL;

				public Integer getVACTUAL () {
					return this.VACTUAL;
				}

				public Boolean VACTUALIsNullable(){
				    return true;
				}
				public Boolean VACTUALIsKey(){
				    return false;
				}
				public Integer VACTUALLength(){
				    return 0;
				}
				public Integer VACTUALPrecision(){
				    return null;
				}
				public String VACTUALDefault(){
				
					return "";
				
				}
				public String VACTUALComment(){
				
				    return "";
				
				}
				public String VACTUALPattern(){
				
					return "";
				
				}
				public String VACTUALOriginalDbColumnName(){
				
					return "VACTUAL";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.SEXOS_ID = readInteger(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
						this.ESTCIVILES_ID = readInteger(dis);
					
						this.TDISCAPACIDADES_ID = readInteger(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.CORREO_ELECTRONICO = readString(dis);
					
						this.ZRESIDENCIAS = readInteger(dis);
					
						this.LUGAR_EXP_DOC = readInteger(dis);
					
					this.FECHA_EXPEDICION_DOCUMENTO = readDate(dis);
					
						this.LUGAR_NACIMIENTO = readInteger(dis);
					
						this.LUGAR_RESIDENCIA = readInteger(dis);
					
						this.LOCALIDADES_ID = readInteger(dis);
					
						this.GSANGUINEOS_ID = readInteger(dis);
					
						this.ESTATURA = (BigDecimal) dis.readObject();
					
						this.OCUPACIONES_ID = readInteger(dis);
					
						this.ETNICAS_ID = readInteger(dis);
					
						this.NSOCIOECONOMICOS_ID = readInteger(dis);
					
						this.TVIVIENDA_ID = readInteger(dis);
					
						this.CODMCPIO = readInteger(dis);
					
						this.NEDUCATIVOS_ID = readInteger(dis);
					
						this.ESMADSCRITO = readInteger(dis);
					
						this.PARENTESCOS_ID = readInteger(dis);
					
					this.FECHAI = readDate(dis);
					
					this.FECHA_CADUCIDAD = readDate(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.PLANAFILIACIONES_ID = readString(dis);
					
						this.ENTAPORTANTES_ID = readInteger(dis);
					
						this.GRDMILITARES_ID = readInteger(dis);
					
						this.FUERZAS_ID = readInteger(dis);
					
						this.UMILITARES_ID = readInteger(dis);
					
						this.PRINCIPAL = readInteger(dis);
					
					this.ESTADO = readString(dis);
					
						this.TVINCULACIONES_ID = readInteger(dis);
					
						this.ESTADOS_ID = readInteger(dis);
					
						this.USUARIOS_ID = readInteger(dis);
					
						this.MOTIVOSESTADO_ID = readInteger(dis);
					
					this.MOTIVO = readString(dis);
					
						this.RNOVEDADES_ID = readInteger(dis);
					
						this.VANTERIOR = readInteger(dis);
					
						this.VACTUAL = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.SEXOS_ID = readInteger(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
						this.ESTCIVILES_ID = readInteger(dis);
					
						this.TDISCAPACIDADES_ID = readInteger(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.CORREO_ELECTRONICO = readString(dis);
					
						this.ZRESIDENCIAS = readInteger(dis);
					
						this.LUGAR_EXP_DOC = readInteger(dis);
					
					this.FECHA_EXPEDICION_DOCUMENTO = readDate(dis);
					
						this.LUGAR_NACIMIENTO = readInteger(dis);
					
						this.LUGAR_RESIDENCIA = readInteger(dis);
					
						this.LOCALIDADES_ID = readInteger(dis);
					
						this.GSANGUINEOS_ID = readInteger(dis);
					
						this.ESTATURA = (BigDecimal) dis.readObject();
					
						this.OCUPACIONES_ID = readInteger(dis);
					
						this.ETNICAS_ID = readInteger(dis);
					
						this.NSOCIOECONOMICOS_ID = readInteger(dis);
					
						this.TVIVIENDA_ID = readInteger(dis);
					
						this.CODMCPIO = readInteger(dis);
					
						this.NEDUCATIVOS_ID = readInteger(dis);
					
						this.ESMADSCRITO = readInteger(dis);
					
						this.PARENTESCOS_ID = readInteger(dis);
					
					this.FECHAI = readDate(dis);
					
					this.FECHA_CADUCIDAD = readDate(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.PLANAFILIACIONES_ID = readString(dis);
					
						this.ENTAPORTANTES_ID = readInteger(dis);
					
						this.GRDMILITARES_ID = readInteger(dis);
					
						this.FUERZAS_ID = readInteger(dis);
					
						this.UMILITARES_ID = readInteger(dis);
					
						this.PRINCIPAL = readInteger(dis);
					
					this.ESTADO = readString(dis);
					
						this.TVINCULACIONES_ID = readInteger(dis);
					
						this.ESTADOS_ID = readInteger(dis);
					
						this.USUARIOS_ID = readInteger(dis);
					
						this.MOTIVOSESTADO_ID = readInteger(dis);
					
					this.MOTIVO = readString(dis);
					
						this.RNOVEDADES_ID = readInteger(dis);
					
						this.VANTERIOR = readInteger(dis);
					
						this.VACTUAL = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.SEXOS_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.ESTCIVILES_ID,dos);
					
					// Integer
				
						writeInteger(this.TDISCAPACIDADES_ID,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO,dos);
					
					// Integer
				
						writeInteger(this.ZRESIDENCIAS,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_EXP_DOC,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_RESIDENCIA,dos);
					
					// Integer
				
						writeInteger(this.LOCALIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.GSANGUINEOS_ID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTATURA);
					
					// Integer
				
						writeInteger(this.OCUPACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.ETNICAS_ID,dos);
					
					// Integer
				
						writeInteger(this.NSOCIOECONOMICOS_ID,dos);
					
					// Integer
				
						writeInteger(this.TVIVIENDA_ID,dos);
					
					// Integer
				
						writeInteger(this.CODMCPIO,dos);
					
					// Integer
				
						writeInteger(this.NEDUCATIVOS_ID,dos);
					
					// Integer
				
						writeInteger(this.ESMADSCRITO,dos);
					
					// Integer
				
						writeInteger(this.PARENTESCOS_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAI,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_CADUCIDAD,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.PLANAFILIACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.ENTAPORTANTES_ID,dos);
					
					// Integer
				
						writeInteger(this.GRDMILITARES_ID,dos);
					
					// Integer
				
						writeInteger(this.FUERZAS_ID,dos);
					
					// Integer
				
						writeInteger(this.UMILITARES_ID,dos);
					
					// Integer
				
						writeInteger(this.PRINCIPAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// Integer
				
						writeInteger(this.TVINCULACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.ESTADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// Integer
				
						writeInteger(this.MOTIVOSESTADO_ID,dos);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// Integer
				
						writeInteger(this.RNOVEDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.VANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.VACTUAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.SEXOS_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.ESTCIVILES_ID,dos);
					
					// Integer
				
						writeInteger(this.TDISCAPACIDADES_ID,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.CORREO_ELECTRONICO,dos);
					
					// Integer
				
						writeInteger(this.ZRESIDENCIAS,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_EXP_DOC,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_RESIDENCIA,dos);
					
					// Integer
				
						writeInteger(this.LOCALIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.GSANGUINEOS_ID,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTATURA);
					
					// Integer
				
						writeInteger(this.OCUPACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.ETNICAS_ID,dos);
					
					// Integer
				
						writeInteger(this.NSOCIOECONOMICOS_ID,dos);
					
					// Integer
				
						writeInteger(this.TVIVIENDA_ID,dos);
					
					// Integer
				
						writeInteger(this.CODMCPIO,dos);
					
					// Integer
				
						writeInteger(this.NEDUCATIVOS_ID,dos);
					
					// Integer
				
						writeInteger(this.ESMADSCRITO,dos);
					
					// Integer
				
						writeInteger(this.PARENTESCOS_ID,dos);
					
					// java.util.Date
				
						writeDate(this.FECHAI,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_CADUCIDAD,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.PLANAFILIACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.ENTAPORTANTES_ID,dos);
					
					// Integer
				
						writeInteger(this.GRDMILITARES_ID,dos);
					
					// Integer
				
						writeInteger(this.FUERZAS_ID,dos);
					
					// Integer
				
						writeInteger(this.UMILITARES_ID,dos);
					
					// Integer
				
						writeInteger(this.PRINCIPAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// Integer
				
						writeInteger(this.TVINCULACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.ESTADOS_ID,dos);
					
					// Integer
				
						writeInteger(this.USUARIOS_ID,dos);
					
					// Integer
				
						writeInteger(this.MOTIVOSESTADO_ID,dos);
					
					// String
				
						writeString(this.MOTIVO,dos);
					
					// Integer
				
						writeInteger(this.RNOVEDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.VANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.VACTUAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",SEXOS_ID="+String.valueOf(SEXOS_ID));
		sb.append(",FECHA_NACIMIENTO="+String.valueOf(FECHA_NACIMIENTO));
		sb.append(",ESTCIVILES_ID="+String.valueOf(ESTCIVILES_ID));
		sb.append(",TDISCAPACIDADES_ID="+String.valueOf(TDISCAPACIDADES_ID));
		sb.append(",DIRECCION="+DIRECCION);
		sb.append(",TELEFONO="+TELEFONO);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",CORREO_ELECTRONICO="+CORREO_ELECTRONICO);
		sb.append(",ZRESIDENCIAS="+String.valueOf(ZRESIDENCIAS));
		sb.append(",LUGAR_EXP_DOC="+String.valueOf(LUGAR_EXP_DOC));
		sb.append(",FECHA_EXPEDICION_DOCUMENTO="+String.valueOf(FECHA_EXPEDICION_DOCUMENTO));
		sb.append(",LUGAR_NACIMIENTO="+String.valueOf(LUGAR_NACIMIENTO));
		sb.append(",LUGAR_RESIDENCIA="+String.valueOf(LUGAR_RESIDENCIA));
		sb.append(",LOCALIDADES_ID="+String.valueOf(LOCALIDADES_ID));
		sb.append(",GSANGUINEOS_ID="+String.valueOf(GSANGUINEOS_ID));
		sb.append(",ESTATURA="+String.valueOf(ESTATURA));
		sb.append(",OCUPACIONES_ID="+String.valueOf(OCUPACIONES_ID));
		sb.append(",ETNICAS_ID="+String.valueOf(ETNICAS_ID));
		sb.append(",NSOCIOECONOMICOS_ID="+String.valueOf(NSOCIOECONOMICOS_ID));
		sb.append(",TVIVIENDA_ID="+String.valueOf(TVIVIENDA_ID));
		sb.append(",CODMCPIO="+String.valueOf(CODMCPIO));
		sb.append(",NEDUCATIVOS_ID="+String.valueOf(NEDUCATIVOS_ID));
		sb.append(",ESMADSCRITO="+String.valueOf(ESMADSCRITO));
		sb.append(",PARENTESCOS_ID="+String.valueOf(PARENTESCOS_ID));
		sb.append(",FECHAI="+String.valueOf(FECHAI));
		sb.append(",FECHA_CADUCIDAD="+String.valueOf(FECHA_CADUCIDAD));
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",PLANAFILIACIONES_ID="+PLANAFILIACIONES_ID);
		sb.append(",ENTAPORTANTES_ID="+String.valueOf(ENTAPORTANTES_ID));
		sb.append(",GRDMILITARES_ID="+String.valueOf(GRDMILITARES_ID));
		sb.append(",FUERZAS_ID="+String.valueOf(FUERZAS_ID));
		sb.append(",UMILITARES_ID="+String.valueOf(UMILITARES_ID));
		sb.append(",PRINCIPAL="+String.valueOf(PRINCIPAL));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",TVINCULACIONES_ID="+String.valueOf(TVINCULACIONES_ID));
		sb.append(",ESTADOS_ID="+String.valueOf(ESTADOS_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",MOTIVOSESTADO_ID="+String.valueOf(MOTIVOSESTADO_ID));
		sb.append(",MOTIVO="+MOTIVO);
		sb.append(",RNOVEDADES_ID="+String.valueOf(RNOVEDADES_ID));
		sb.append(",VANTERIOR="+String.valueOf(VANTERIOR));
		sb.append(",VACTUAL="+String.valueOf(VACTUAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
row5Struct row5 = new row5Struct();
archmasivoStruct archmasivo = new archmasivoStruct();
valTdocumentos_idStruct valTdocumentos_id = new valTdocumentos_idStruct();
row4Struct row4 = new row4Struct();






	
	/**
	 * [tOracleOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_3", false);
		start_Hash.put("tOracleOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"archmasivo");
					}
				
		int tos_count_tOracleOutput_3 = 0;
		






    
    int nb_line_tOracleOutput_3 = 0;
    int nb_line_update_tOracleOutput_3 = 0;
    int nb_line_inserted_tOracleOutput_3 = 0;
    int nb_line_deleted_tOracleOutput_3 = 0;
    int nb_line_rejected_tOracleOutput_3 = 0;

    int tmp_batchUpdateCount_tOracleOutput_3 = 0;

    int deletedCount_tOracleOutput_3=0;
    int updatedCount_tOracleOutput_3=0;
    int insertedCount_tOracleOutput_3=0;
    int rowsToCommitCount_tOracleOutput_3=0;
    int rejectedCount_tOracleOutput_3=0;

    boolean whetherReject_tOracleOutput_3 = false;

    java.sql.Connection conn_tOracleOutput_3 = null;

    //optional table
    String dbschema_tOracleOutput_3 = null;
    String tableName_tOracleOutput_3 = null;
        dbschema_tOracleOutput_3 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_3=0;

        if(dbschema_tOracleOutput_3 == null || dbschema_tOracleOutput_3.trim().length() == 0) {
            tableName_tOracleOutput_3 = ("TST_CARGUEMASIVO");
        } else {
            tableName_tOracleOutput_3 = dbschema_tOracleOutput_3 + "." + ("TST_CARGUEMASIVO");
        }
            try (java.sql.Statement stmtTruncCount_tOracleOutput_3 = conn_tOracleOutput_3.createStatement();
                java.sql.ResultSet rsTruncCount_tOracleOutput_3 = stmtTruncCount_tOracleOutput_3.executeQuery("SELECT COUNT(1) FROM " + tableName_tOracleOutput_3 + "");
                java.sql.Statement stmtTrunc_tOracleOutput_3 = conn_tOracleOutput_3.createStatement()) {
                stmtTrunc_tOracleOutput_3.executeUpdate("TRUNCATE TABLE " + tableName_tOracleOutput_3 + " REUSE STORAGE ");
                while(rsTruncCount_tOracleOutput_3.next()) {
                    deletedCount_tOracleOutput_3 += rsTruncCount_tOracleOutput_3.getInt(1);
                }
            }
                String insert_tOracleOutput_3 = "INSERT INTO " + tableName_tOracleOutput_3 + " (PRIMER_NOMBRE,SEGUNDO_NOMBRE,PRIMER_APELLIDO,SEGUNDO_APELLIDO,TDOCUMENTOS_ID,TDOCUMENTO,DOCUMENTO,SEXOS_ID,FECHA_NACIMIENTO,ESTCIVILES_ID,TDISCAPACIDADES_ID,DIRECCION,TELEFONO,CELULAR,CORREO_ELECTRONICO,ZRESIDENCIAS,FECHA_EXPEDICION_DOCUMENTO,LUGAR_EXP_DOC,LUGAR_NACIMIENTO,LUGAR_RESIDENCIA,LOCALIDADES_ID,GSANGUINEOS_ID,ESTATURA,OCUPACIONES_ID,ETNICAS_ID,NSOCIOECONOMICOS_ID,TVIVIENDA_ID,NEDUCATIVOS_ID,ESMADSCRITO,FECHAI,PARENTESCOS_ID,OBSERVACIONES,FECHA_CADUCIDAD,PLANAFILIACIONES_ID,ENTAPORTANTES_ID,GRDMILITARES_ID,FUERZAS_ID,UMILITARES_ID,PRINCIPAL,ESTADO,TVINCULACIONES_ID,FECHA_INGRESO,ESTADOS_ID,USUARIOS_ID,MOTIVOSESTADO_ID,FECHA,MOTIVO,RNOVEDADES_ID,VANTERIOR,VACTUAL,PROCESOS_ID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_3 = conn_tOracleOutput_3.prepareStatement(insert_tOracleOutput_3);
                        resourceMap.put("pstmt_tOracleOutput_3", pstmt_tOracleOutput_3);





 



/**
 * [tOracleOutput_3 begin ] stop
 */





	
	/**
	 * [tOracleOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_2", false);
		start_Hash.put("tOracleOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tOracleOutput_2 = 0;
		






    
    int nb_line_tOracleOutput_2 = 0;
    int nb_line_update_tOracleOutput_2 = 0;
    int nb_line_inserted_tOracleOutput_2 = 0;
    int nb_line_deleted_tOracleOutput_2 = 0;
    int nb_line_rejected_tOracleOutput_2 = 0;

    int tmp_batchUpdateCount_tOracleOutput_2 = 0;

    int deletedCount_tOracleOutput_2=0;
    int updatedCount_tOracleOutput_2=0;
    int insertedCount_tOracleOutput_2=0;
    int rowsToCommitCount_tOracleOutput_2=0;
    int rejectedCount_tOracleOutput_2=0;

    boolean whetherReject_tOracleOutput_2 = false;

    java.sql.Connection conn_tOracleOutput_2 = null;

    //optional table
    String dbschema_tOracleOutput_2 = null;
    String tableName_tOracleOutput_2 = null;
        dbschema_tOracleOutput_2 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_2=0;

        if(dbschema_tOracleOutput_2 == null || dbschema_tOracleOutput_2.trim().length() == 0) {
            tableName_tOracleOutput_2 = ("TST_ERRCMASIVO");
        } else {
            tableName_tOracleOutput_2 = dbschema_tOracleOutput_2 + "." + ("TST_ERRCMASIVO");
        }
                String insert_tOracleOutput_2 = "INSERT INTO " + tableName_tOracleOutput_2 + " (TDOCUMENTOS_ID,DOCUMENTO,MENSAJE) VALUES (?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_2 = conn_tOracleOutput_2.prepareStatement(insert_tOracleOutput_2);
                        resourceMap.put("pstmt_tOracleOutput_2", pstmt_tOracleOutput_2);





 



/**
 * [tOracleOutput_2 begin ] stop
 */



	
	/**
	 * [tJavaRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_5", false);
		start_Hash.put("tJavaRow_5", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"valTdocumentos_id");
					}
				
		int tos_count_tJavaRow_5 = 0;
		

int nb_line_tJavaRow_5 = 0;

 



/**
 * [tJavaRow_5 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
	int TDOCUMENTOS_ID;
	int SEXOS_ID;
	int ESTCIVILES_ID;
	int TDISCAPACIDADES_ID;
	int ZRESIDENCIAS;
	int LUGAR_RESIDENCIA;
	int LOCALIDADES_ID;
	int GSANGUINEOS_ID;
	int OCUPACIONES_ID;
	int ETNICAS_ID;
	int NSOCIOECONOMICOS_ID;
	int TVIVIENDA_ID;
	int NEDUCATIVOS_ID;
	int ESMADSCRITO;
	int ENTAPORTANTES_ID;
	int GRDMILITARES_ID;
	int FUERZAS_ID;
	int UMILITARES_ID;
	int TVINCULACIONES_ID;
	int MOTIVOSESTADO_ID;
	int procesos_id;
	int LUGAR_EXP_DOCUMENTO;
	int LUGAR_NACIMIENTO;
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
archmasivoStruct archmasivo_tmp = new archmasivoStruct();
valTdocumentos_idStruct valTdocumentos_id_tmp = new valTdocumentos_idStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tJavaRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_4", false);
		start_Hash.put("tJavaRow_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tJavaRow_4 = 0;
		

int nb_line_tJavaRow_4 = 0;

 



/**
 * [tJavaRow_4 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				conn_tOracleInput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_2 = false;
				boolean isConnectionWrapped_tOracleInput_2 = !(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_2 = null;
                if (isConnectionWrapped_tOracleInput_2) {
					unwrappedOraConn_tOracleInput_2 = conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_2 != null) {
                        isTimeZoneNull_tOracleInput_2 = (unwrappedOraConn_tOracleInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_2 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_2) {
					java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_2.next()) {
						sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_2 && unwrappedOraConn_tOracleInput_2 != null) {
                        unwrappedOraConn_tOracleInput_2.setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement();

		    String dbquery_tOracleInput_2 = "\nselect \n       ta.PRIMER_NOMBRE, \n	   ta.SEGUNDO_NOMBRE, \n	   ta.PRIMER_APELLIDO, \n	   ta.SEGUNDO_APELLIDO,\n    "
+"   gtd.ID tdocumentos_id, \n       gtd.SIGLA tdocumento , \n       ta.DOCUMENTO,\n       gs.ID sexos_id, \n       to_dat"
+"e(ta.FECHA_NACIMIENTO,'dd-mm-yyyy') fecha_nacimiento,\n       gec.ID estciviles_id, \n       gtdc.ID tdiscapacidades_id,"
+" \n       ta.DIRECCION, \n       ta.TELEFONO, \n       ta.CELULAR, \n       ta.CORREO_ELECTRONICO, \n       gzr.ID zresi"
+"dencias, \n       gd2.ID lugar_exp_documento,\n       to_date(ta.FECHA_EXPEDICION_DOCUMENTO ,'dd-mm-yyyy') fecha_exp_doc"
+"umento,\n       gd3.ID lugar_nacimiento,\n       gd.ID lugar_residencia, \n       to_number(decode(ta.MUNICIPIO_RESIDENC"
+"IA,11001,ta.LOCALIDAD_RESIDENCIA,decode(ta.LOCALIDAD_RESIDENCIA,null,0,gl.ID))) localidades_id,\n       ggs.ID gsanguine"
+"os_id, \n       to_number(replace(replace('1.70',',',''),'.',''))/100 estatura, \n       go.ID ocupaciones_id, \n       "
+"gte.ID etnicas_id, \n       gns.ID nsocioeconomicos_id, \n       gtv.ID tvivienda_id,\n       to_number(ta.MUNICIPIO_RES"
+"IDENCIA) codmcpio,\n       gne.ID neducativos_id, \n       gu.ID esmadscrito, \n       1 parentescos_id,\n       to_date"
+"(ta.FECHA_DE_INGRESO ,'dd-mm-yyyy hh24:mi:ss')  fechai, \n       to_date(ta.FECHA_FIN_AFILIACION ,'dd-mm-yyyy hh24:mi:ss"
+"') fecha_caducidad, \n       'Afiliado no Cotizante Carga Masiva' observaciones, \n       null planafiliaciones_id,\n   "
+"    gea.ID entaportantes_id, \n       ggm.ID grdmilitares_id, \n       gf.ID fuerzas_id,\n       gum.ID umilitares_id, "
+"\n       1 principal, \n       ae.NOMBRE estado, \n       atv.ID tvinculaciones_id, \n       ae.ID estados_id, \n       g"
+"us.ID usuarios_id, \n       ame.ID motivosestado_id,\n       ame.NOMBRE motivo,\n       arn.ID rnovedades_id, \n       0"
+" vanterior, \n       1 vactual\nfrom TST_ARCHIVO ta \n LEFT JOIN GEN_TDOCUMENTOS gtd on (ta.TIPO_DE_DOCUMENTO = gtd.SIGL"
+"A and gtd.ESTREGISTRO_ID = 1)\n LEFT JOIN GEN_SEXOS gs on (ta.SEXO = gs.SIGLA and gs.ESTREGISTRO_ID = 1)\n LEFT JOIN GEN"
+"_ESTCIVILES gec on (ta.ESTADO_CIVIL = gec.SIGLA and gec.ESTREGISTRO_ID = 1)\n LEFT JOIN GEN_TDISCAPACIDADES gtdc on (ta."
+"DISCAPACIDAD = gtdc.SIGLA and gtdc.ESTREGISTRO_ID = 1)\n LEFT JOIN GEN_ZRESIDENCIAS gzr on (ta.ZRESIDENCIA = gzr.SIGLA a"
+"nd gzr.ESTREGISTRO_ID = 1)\n LEFT JOIN GEN_DIVIPOLA gd on (ta.PAIS_RESIDENCIA = gd.CODPAIS\n                           a"
+"nd ta.DEPARTAMENTO_RESIDENCIA = gd.CODDEPTO \n                           and ta.MUNICIPIO_RESIDENCIA = gd.CODMCPIO and g"
+"d.ESTREGISTRO_ID = 1 AND gd.TCCPP = 'CABECERA MUNICIPAL (CM)')\n LEFT JOIN GEN_DIVIPOLA gd2 on (ta.PAIS_EXP_DOCUMENTO = "
+"gd2.CODPAIS\n                           and ta.DEPTO_EXP_DOCUMENTO = gd2.CODDEPTO \n                           and ta.MU"
+"NICIPIO_EXP_DOCUMENTO = gd2.CODMCPIO and gd2.ESTREGISTRO_ID = 1 AND gd2.TCCPP = 'CABECERA MUNICIPAL (CM)')\n LEFT JOIN G"
+"EN_DIVIPOLA gd3 on (ta.PAIS_NACIMIENTO = gd3.CODPAIS\n                           and ta.DEPARTAMENTO_NACIMIENTO = gd3.CO"
+"DDEPTO \n                           and ta.MUNICIPIO_NACIMIENTO = gd3.CODMCPIO and gd3.ESTREGISTRO_ID = 1 AND gd3.TCCPP "
+"= 'CABECERA MUNICIPAL (CM)')                           \n LEFT JOIN GEN_LOCALIDADES gl on (ta.LOCALIDAD_RESIDENCIA = gl."
+"CODLOCALIDAD and gl.ESTREGISTRO_ID = 1)\n LEFT JOIN GEN_GSANGUINEOS ggs on (ta.GRUPO_SANGUINEO ||ta.FACTOR_RH = ggs.NOMB"
+"RE and ggs.ESTREGISTRO_ID = 1)\n LEFT JOIN GEN_OCUPACIONES go on (ta.OCUPACION = go.SIGLA and go.ESTREGISTRO_ID = 1)\n L"
+"EFT JOIN GEN_ETNICAS gte on (ta.GRUPO_ETNICO  = gte.CODIGO and gte.ESTREGISTRO_ID = 1)\n LEFT JOIN GEN_NSOCIOECONOMICOS "
+"gns on (ta.NSOCIOECONOMICO = gns.NOMBRE and gns.ESTREGISTRO_ID = 1)\n LEFT JOIN GEN_TVIVIENDA gtv on (ta.TVIVIENDA = gtv"
+".SIGLA and gtv.ESTREGISTRO_ID = 1) \n LEFT JOIN GEN_NEDUCATIVOS gne on (ta.NEDUCATIVOS = gne.SIGLA and gne.ESTREGISTRO_I"
+"D = 1)\n LEFT JOIN GEN_UORG gu on (ta.CODIGO_ESTABLECIMIENTO  = gu.CODIGO and gu.ESTREGISTRO_ID = 1\n                   "
+"    and upper(replace(gu.NOMBRE,' ','')) like upper(replace(replace(replace(ta.ESTABLECIMIENTO_ADSCRITO, '', '%'),'', "
+"'%'),' ','')))\n LEFT JOIN GEN_ENTAPORTANTES  gea on (ta.ENTIDAD_APORTANTE = gea.DOCUMENTO and gea.ESTREGISTRO_ID = 1)  "
+"                     \n LEFT JOIN GEN_FUERZAS gf ON gf.SIGLA = ta.FUERZA_MILITAR AND gf.ESTREGISTRO_ID = 1 AND gf.ESTADO"
+" = 'Activo'\nLEFT JOIN GEN_GRDMILITARES ggm on (ta.CODIGO_GRDMILITAR = ggm.CODIGO and ta.SIGLA_GRDMILITAR = ggm.SIGLA an"
+"d ggm.ESTREGISTRO_ID = 1 AND ggm.FUERZA_ID = gf.ID)\n LEFT JOIN GEN_FUERZAS gf on (ta.FUERZA_MILITAR = gf.SIGLA and gf.E"
+"STREGISTRO_ID = 1)\n LEFT JOIN GEN_UMILITARES gum on (ta.CODIGO_UMILITAR = gum.CODIGO and gum.ESTREGISTRO_ID = 1 AND gum"
+".ESTADO = 'Activo' \n                                  and REPLACE(upper(replace(replace(replace(gum.NOMBRE, '', '%'),'"
+"', '%'),' ','')),'\"','') like REPLACE(upper(replace(replace(replace(ta.UNIDAD_MILITAR, '', '%'),'', '%'),' ','')),'"
+"\"',''))\n LEFT JOIN AFI_TVINCULACIONES atv on (ta.TIPO_DE_VINCULACION = atv.SIGLA and atv.ESTREGISTRO_ID = 1)\n LEFT JO"
+"IN AFI_ESTADOS ae on (ta.ESTADO_AFILIACION  = ae.SIGLA and ae.ESTREGISTRO_ID = 1)\n LEFT JOIN GEN_USUARIOS gus on (gus.U"
+"SUARIO = 'AFI_CARGUEMASIVO' and gus.ESTREGISTRO_ID = 1)\n LEFT JOIN AFI_MOTIVOSESTADO ame on (ta.MOTIVO_ESTADO  = ame.SI"
+"GLA  and ame.ESTREGISTRO_ID = 1)\n LEFT JOIN AFI_RNOVEDADES arn on (arn.CODIGO  = 'S05' and arn.ESTREGISTRO_ID = 1)\nwhe"
+"re ta.FECHA_NACIMIENTO != 'Invalida' \n    and FECHA_DE_INGRESO != 'Invalida' \n    and ta.FECHA_FIN_AFILIACION != 'Inva"
+"lida'\n    and ta.FECHA_EXPEDICION_DOCUMENTO != 'Invalida'\n    or (ta.FECHA_NACIMIENTO  is null or ta.FECHA_DE_INGRESO "
+" is null or ta.FECHA_FIN_AFILIACION  is NULL OR ta.FECHA_EXPEDICION_DOCUMENTO IS null)\n";
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row3.PRIMER_NOMBRE = null;
							} else {
	                         		
        	row3.PRIMER_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row3.SEGUNDO_NOMBRE = null;
							} else {
	                         		
        	row3.SEGUNDO_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 3) {
								row3.PRIMER_APELLIDO = null;
							} else {
	                         		
        	row3.PRIMER_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 4) {
								row3.SEGUNDO_APELLIDO = null;
							} else {
	                         		
        	row3.SEGUNDO_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 5) {
								row3.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(5) != null) {
						row3.TDOCUMENTOS_ID = rs_tOracleInput_2.getInt(5);
					} else {
				
						row3.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 6) {
								row3.TDOCUMENTO = null;
							} else {
	                         		
        	row3.TDOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 7) {
								row3.DOCUMENTO = null;
							} else {
	                         		
        	row3.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 8) {
								row3.SEXOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(8) != null) {
						row3.SEXOS_ID = rs_tOracleInput_2.getInt(8);
					} else {
				
						row3.SEXOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 9) {
								row3.FECHA_NACIMIENTO = null;
							} else {
										
			row3.FECHA_NACIMIENTO = routines.system.JDBCUtil.getDate(rs_tOracleInput_2, 9);
		                    }
							if(colQtyInRs_tOracleInput_2 < 10) {
								row3.ESTCIVILES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(10) != null) {
						row3.ESTCIVILES_ID = rs_tOracleInput_2.getInt(10);
					} else {
				
						row3.ESTCIVILES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 11) {
								row3.TDISCAPACIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(11) != null) {
						row3.TDISCAPACIDADES_ID = rs_tOracleInput_2.getInt(11);
					} else {
				
						row3.TDISCAPACIDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 12) {
								row3.DIRECCION = null;
							} else {
	                         		
        	row3.DIRECCION = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 13) {
								row3.TELEFONO = null;
							} else {
	                         		
        	row3.TELEFONO = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 13, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 14) {
								row3.CELULAR = null;
							} else {
	                         		
        	row3.CELULAR = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 14, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 15) {
								row3.CORREO_ELECTRONICO = null;
							} else {
	                         		
        	row3.CORREO_ELECTRONICO = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 15, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 16) {
								row3.ZRESIDENCIAS = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(16) != null) {
						row3.ZRESIDENCIAS = rs_tOracleInput_2.getInt(16);
					} else {
				
						row3.ZRESIDENCIAS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 17) {
								row3.LUGAR_EXP_DOC = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(17) != null) {
						row3.LUGAR_EXP_DOC = rs_tOracleInput_2.getInt(17);
					} else {
				
						row3.LUGAR_EXP_DOC = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 18) {
								row3.FECHA_EXPEDICION_DOCUMENTO = null;
							} else {
										
			row3.FECHA_EXPEDICION_DOCUMENTO = routines.system.JDBCUtil.getDate(rs_tOracleInput_2, 18);
		                    }
							if(colQtyInRs_tOracleInput_2 < 19) {
								row3.LUGAR_NACIMIENTO = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(19) != null) {
						row3.LUGAR_NACIMIENTO = rs_tOracleInput_2.getInt(19);
					} else {
				
						row3.LUGAR_NACIMIENTO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 20) {
								row3.LUGAR_RESIDENCIA = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(20) != null) {
						row3.LUGAR_RESIDENCIA = rs_tOracleInput_2.getInt(20);
					} else {
				
						row3.LUGAR_RESIDENCIA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 21) {
								row3.LOCALIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(21) != null) {
						row3.LOCALIDADES_ID = rs_tOracleInput_2.getInt(21);
					} else {
				
						row3.LOCALIDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 22) {
								row3.GSANGUINEOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(22) != null) {
						row3.GSANGUINEOS_ID = rs_tOracleInput_2.getInt(22);
					} else {
				
						row3.GSANGUINEOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 23) {
								row3.ESTATURA = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(23) != null) {
						row3.ESTATURA = rs_tOracleInput_2.getBigDecimal(23);
					} else {
				
						row3.ESTATURA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 24) {
								row3.OCUPACIONES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(24) != null) {
						row3.OCUPACIONES_ID = rs_tOracleInput_2.getInt(24);
					} else {
				
						row3.OCUPACIONES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 25) {
								row3.ETNICAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(25) != null) {
						row3.ETNICAS_ID = rs_tOracleInput_2.getInt(25);
					} else {
				
						row3.ETNICAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 26) {
								row3.NSOCIOECONOMICOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(26) != null) {
						row3.NSOCIOECONOMICOS_ID = rs_tOracleInput_2.getInt(26);
					} else {
				
						row3.NSOCIOECONOMICOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 27) {
								row3.TVIVIENDA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(27) != null) {
						row3.TVIVIENDA_ID = rs_tOracleInput_2.getInt(27);
					} else {
				
						row3.TVIVIENDA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 28) {
								row3.CODMCPIO = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(28) != null) {
						row3.CODMCPIO = rs_tOracleInput_2.getInt(28);
					} else {
				
						row3.CODMCPIO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 29) {
								row3.NEDUCATIVOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(29) != null) {
						row3.NEDUCATIVOS_ID = rs_tOracleInput_2.getInt(29);
					} else {
				
						row3.NEDUCATIVOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 30) {
								row3.ESMADSCRITO = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(30) != null) {
						row3.ESMADSCRITO = rs_tOracleInput_2.getInt(30);
					} else {
				
						row3.ESMADSCRITO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 31) {
								row3.PARENTESCOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(31) != null) {
						row3.PARENTESCOS_ID = rs_tOracleInput_2.getInt(31);
					} else {
				
						row3.PARENTESCOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 32) {
								row3.FECHAI = null;
							} else {
										
			row3.FECHAI = routines.system.JDBCUtil.getDate(rs_tOracleInput_2, 32);
		                    }
							if(colQtyInRs_tOracleInput_2 < 33) {
								row3.FECHA_CADUCIDAD = null;
							} else {
										
			row3.FECHA_CADUCIDAD = routines.system.JDBCUtil.getDate(rs_tOracleInput_2, 33);
		                    }
							if(colQtyInRs_tOracleInput_2 < 34) {
								row3.OBSERVACIONES = null;
							} else {
	                         		
        	row3.OBSERVACIONES = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 34, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 35) {
								row3.PLANAFILIACIONES_ID = null;
							} else {
	                         		
        	row3.PLANAFILIACIONES_ID = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 35, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 36) {
								row3.ENTAPORTANTES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(36) != null) {
						row3.ENTAPORTANTES_ID = rs_tOracleInput_2.getInt(36);
					} else {
				
						row3.ENTAPORTANTES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 37) {
								row3.GRDMILITARES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(37) != null) {
						row3.GRDMILITARES_ID = rs_tOracleInput_2.getInt(37);
					} else {
				
						row3.GRDMILITARES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 38) {
								row3.FUERZAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(38) != null) {
						row3.FUERZAS_ID = rs_tOracleInput_2.getInt(38);
					} else {
				
						row3.FUERZAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 39) {
								row3.UMILITARES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(39) != null) {
						row3.UMILITARES_ID = rs_tOracleInput_2.getInt(39);
					} else {
				
						row3.UMILITARES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 40) {
								row3.PRINCIPAL = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(40) != null) {
						row3.PRINCIPAL = rs_tOracleInput_2.getInt(40);
					} else {
				
						row3.PRINCIPAL = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 41) {
								row3.ESTADO = null;
							} else {
	                         		
        	row3.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 41, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 42) {
								row3.TVINCULACIONES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(42) != null) {
						row3.TVINCULACIONES_ID = rs_tOracleInput_2.getInt(42);
					} else {
				
						row3.TVINCULACIONES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 43) {
								row3.ESTADOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(43) != null) {
						row3.ESTADOS_ID = rs_tOracleInput_2.getInt(43);
					} else {
				
						row3.ESTADOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 44) {
								row3.USUARIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(44) != null) {
						row3.USUARIOS_ID = rs_tOracleInput_2.getInt(44);
					} else {
				
						row3.USUARIOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 45) {
								row3.MOTIVOSESTADO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(45) != null) {
						row3.MOTIVOSESTADO_ID = rs_tOracleInput_2.getInt(45);
					} else {
				
						row3.MOTIVOSESTADO_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 46) {
								row3.MOTIVO = null;
							} else {
	                         		
        	row3.MOTIVO = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 46, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 47) {
								row3.RNOVEDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(47) != null) {
						row3.RNOVEDADES_ID = rs_tOracleInput_2.getInt(47);
					} else {
				
						row3.RNOVEDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 48) {
								row3.VANTERIOR = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(48) != null) {
						row3.VANTERIOR = rs_tOracleInput_2.getInt(48);
					} else {
				
						row3.VANTERIOR = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 49) {
								row3.VACTUAL = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(49) != null) {
						row3.VACTUAL = rs_tOracleInput_2.getInt(49);
					} else {
				
						row3.VACTUAL = null;
					}
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_4 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

    //Code generate according to input schema and output schema
row5.PRIMER_NOMBRE = row3.PRIMER_NOMBRE;
row5.SEGUNDO_NOMBRE = row3.SEGUNDO_NOMBRE;
row5.PRIMER_APELLIDO = row3.PRIMER_APELLIDO;
row5.SEGUNDO_APELLIDO = row3.SEGUNDO_APELLIDO;
row5.TDOCUMENTOS_ID = row3.TDOCUMENTOS_ID;
row5.TDOCUMENTO = row3.TDOCUMENTO;
row5.DOCUMENTO = row3.DOCUMENTO;
row5.SEXOS_ID = row3.SEXOS_ID;
row5.FECHA_NACIMIENTO = row3.FECHA_NACIMIENTO;
row5.ESTCIVILES_ID = row3.ESTCIVILES_ID;
row5.TDISCAPACIDADES_ID = row3.TDISCAPACIDADES_ID;
row5.DIRECCION = row3.DIRECCION;
row5.TELEFONO = row3.TELEFONO;
row5.CELULAR = row3.CELULAR;
row5.CORREO_ELECTRONICO = row3.CORREO_ELECTRONICO;
row5.ZRESIDENCIAS = row3.ZRESIDENCIAS;
row5.LUGAR_EXP_DOC = row3.LUGAR_EXP_DOC;
row5.FECHA_EXPEDICION_DOCUMENTO = row3.FECHA_EXPEDICION_DOCUMENTO;
row5.LUGAR_NACIMIENTO = row3.LUGAR_NACIMIENTO;
row5.LUGAR_RESIDENCIA = row3.LUGAR_RESIDENCIA;
row5.LOCALIDADES_ID = row3.LOCALIDADES_ID;
row5.GSANGUINEOS_ID = row3.GSANGUINEOS_ID;
row5.ESTATURA = row3.ESTATURA;
row5.OCUPACIONES_ID = row3.OCUPACIONES_ID;
row5.ETNICAS_ID = row3.ETNICAS_ID;
row5.NSOCIOECONOMICOS_ID = row3.NSOCIOECONOMICOS_ID;
row5.TVIVIENDA_ID = row3.TVIVIENDA_ID;
row5.CODMCPIO = row3.CODMCPIO;
row5.NEDUCATIVOS_ID = row3.NEDUCATIVOS_ID;
row5.ESMADSCRITO = row3.ESMADSCRITO;
row5.PARENTESCOS_ID = row3.PARENTESCOS_ID;
row5.FECHAI = row3.FECHAI;
row5.FECHA_CADUCIDAD = row3.FECHA_CADUCIDAD;
row5.OBSERVACIONES = row3.OBSERVACIONES;
row5.PLANAFILIACIONES_ID = row3.PLANAFILIACIONES_ID;
row5.ENTAPORTANTES_ID = row3.ENTAPORTANTES_ID;
row5.GRDMILITARES_ID = row3.GRDMILITARES_ID;
row5.FUERZAS_ID = row3.FUERZAS_ID;
row5.UMILITARES_ID = row3.UMILITARES_ID;
row5.PRINCIPAL = row3.PRINCIPAL;
row5.ESTADO = row3.ESTADO;
row5.TVINCULACIONES_ID = row3.TVINCULACIONES_ID;
row5.ESTADOS_ID = row3.ESTADOS_ID;
row5.USUARIOS_ID = row3.USUARIOS_ID;
row5.MOTIVOSESTADO_ID = row3.MOTIVOSESTADO_ID;
row5.MOTIVO = row3.MOTIVO;
row5.RNOVEDADES_ID = row3.RNOVEDADES_ID;
row5.VANTERIOR = row3.VANTERIOR;
row5.VACTUAL = row3.VACTUAL;


//Code generate according to input schema and output schema
context.mensaje = null;

row5.SEGUNDO_NOMBRE = row3.SEGUNDO_NOMBRE;
row5.SEGUNDO_APELLIDO = row3.SEGUNDO_APELLIDO;
row5.TDOCUMENTOS_ID = row3.TDOCUMENTOS_ID;
row5.TDOCUMENTO = row3.TDOCUMENTO;
row5.DOCUMENTO = row3.DOCUMENTO;
row5.SEXOS_ID = row3.SEXOS_ID;
row5.FECHA_NACIMIENTO = row3.FECHA_NACIMIENTO;
row5.TDISCAPACIDADES_ID = row3.TDISCAPACIDADES_ID;
row5.DIRECCION = row3.DIRECCION;
row5.TELEFONO = row3.TELEFONO;
row5.CELULAR = row3.CELULAR;
row5.CORREO_ELECTRONICO = row3.CORREO_ELECTRONICO;
row5.ZRESIDENCIAS = row3.ZRESIDENCIAS;
row5.LUGAR_EXP_DOC = row3.LUGAR_EXP_DOC;
row5.FECHA_EXPEDICION_DOCUMENTO = row3.FECHA_EXPEDICION_DOCUMENTO;
row5.LUGAR_NACIMIENTO = row3.LUGAR_NACIMIENTO;
row5.LUGAR_RESIDENCIA = row3.LUGAR_RESIDENCIA;
row5.GSANGUINEOS_ID = row3.GSANGUINEOS_ID;
row5.ESTATURA = row3.ESTATURA;
row5.OCUPACIONES_ID = row3.OCUPACIONES_ID;
row5.ETNICAS_ID = row3.ETNICAS_ID;
row5.NSOCIOECONOMICOS_ID = row3.NSOCIOECONOMICOS_ID;
row5.TVIVIENDA_ID = row3.TVIVIENDA_ID;
row5.NEDUCATIVOS_ID = row3.NEDUCATIVOS_ID;
row5.ESMADSCRITO = row3.ESMADSCRITO;
row5.PARENTESCOS_ID = row3.PARENTESCOS_ID;
row5.FECHA_CADUCIDAD = row3.FECHA_CADUCIDAD;
row5.OBSERVACIONES = row3.OBSERVACIONES;
row5.PLANAFILIACIONES_ID = row3.PLANAFILIACIONES_ID;
row5.ENTAPORTANTES_ID = row3.ENTAPORTANTES_ID;
row5.GRDMILITARES_ID = row3.GRDMILITARES_ID;
row5.FUERZAS_ID = row3.FUERZAS_ID;
row5.UMILITARES_ID = row3.UMILITARES_ID;
row5.PRINCIPAL = row3.PRINCIPAL;
row5.ESTADO = row3.ESTADO;
row5.TVINCULACIONES_ID = row3.TVINCULACIONES_ID;
row5.ESTADOS_ID = row3.ESTADOS_ID;
row5.USUARIOS_ID = row3.USUARIOS_ID;
row5.MOTIVOSESTADO_ID = row3.MOTIVOSESTADO_ID;
row5.MOTIVO = row3.MOTIVO;
row5.RNOVEDADES_ID = row3.RNOVEDADES_ID;
row5.VANTERIOR = row3.VANTERIOR;
row5.VACTUAL = row3.VACTUAL;


// Validación primer_nombre, no puede estar vacío
if (row3.PRIMER_NOMBRE == null) 
{
	context.mensaje = "Primer nombre no puede estar vacío";
	row5.PRIMER_NOMBRE = row3.PRIMER_NOMBRE;
}
else
{
row5.PRIMER_NOMBRE = row3.PRIMER_NOMBRE;
}

// Validación primer_apellido, no puede estar vacío
if (row3.PRIMER_APELLIDO == null) 
{
	context.mensaje = "Primer apellido no puede estar vacío";
	row5.PRIMER_APELLIDO = row3.PRIMER_APELLIDO;
}
else
{
row5.PRIMER_APELLIDO = row3.PRIMER_APELLIDO;
}

// Validación fecha_ingreso, no puede estar vacío
if (row3.FECHAI == null) 
{
	context.mensaje = "Fecha de ingreso no puede estar vacía";
	row5.FECHAI = row3.FECHAI;
}
else
{
	row5.FECHAI = row3.FECHAI;
}

// Validación de localidad, solo debe ir cuando el municipio es Bogota
if (row3.CODMCPIO == null){
	context.mensaje = "Codigo Municipio no puede estar vacío";
	row5.CODMCPIO = row3.CODMCPIO;

}
else
{
 if (row3.CODMCPIO == 11001)
 {
  if (row3.LOCALIDADES_ID == null)
  {   
     context.mensaje = "La localidad no puede estar vacia";
     row5.LOCALIDADES_ID = -99;
  }
  else
  {
 	row5.LOCALIDADES_ID = row3.LOCALIDADES_ID;
  }
 }
 else
 {
  	row5.LOCALIDADES_ID = 0;
 } 
}
//Validación estado civil, no puede ser casado

if (row3.ESTCIVILES_ID == null){
	context.mensaje = "Estado civil no puede estar vacío";
	row5.ESTCIVILES_ID = row3.ESTCIVILES_ID;
}
else
{
 if (row3.ESTCIVILES_ID == 2)
 {
    context.mensaje = "Estado civil no permitido - CASADO";
    row5.ESTCIVILES_ID = -99;
 }
 else
 {
    row5.ESTCIVILES_ID = row3.ESTCIVILES_ID;
 }
}
    nb_line_tJavaRow_4++;   

 


	tos_count_tJavaRow_4++;

/**
 * [tJavaRow_4 main ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;
Var.TDOCUMENTOS_ID = row5.TDOCUMENTOS_ID ==null?0:row5.TDOCUMENTOS_ID; ;
Var.SEXOS_ID = row5.SEXOS_ID ==null?0:row5.SEXOS_ID; ;
Var.ESTCIVILES_ID = row5.ESTCIVILES_ID ==null?0:row5.ESTCIVILES_ID ;
Var.TDISCAPACIDADES_ID = row5.TDISCAPACIDADES_ID ==null?0:row5.TDISCAPACIDADES_ID ;
Var.ZRESIDENCIAS = row5.ZRESIDENCIAS ==null?0:row5.ZRESIDENCIAS ;
Var.LUGAR_RESIDENCIA = row5.LUGAR_RESIDENCIA ==null?0:row5.LUGAR_RESIDENCIA ;
Var.LOCALIDADES_ID = row5.LOCALIDADES_ID ==null?0:row5.LOCALIDADES_ID ;
Var.GSANGUINEOS_ID = row5.GSANGUINEOS_ID ==null?0:row5.GSANGUINEOS_ID ;
Var.OCUPACIONES_ID = row5.OCUPACIONES_ID ==null?0:row5.OCUPACIONES_ID ;
Var.ETNICAS_ID = row5.ETNICAS_ID ==null?0:row5.ETNICAS_ID ;
Var.NSOCIOECONOMICOS_ID = row5.NSOCIOECONOMICOS_ID ==null?0:row5.NSOCIOECONOMICOS_ID ;
Var.TVIVIENDA_ID = row5.TVIVIENDA_ID ==null?0:row5.TVIVIENDA_ID ;
Var.NEDUCATIVOS_ID = row5.NEDUCATIVOS_ID ==null?0:row5.NEDUCATIVOS_ID ;
Var.ESMADSCRITO = row5.ESMADSCRITO ==null?0:row5.ESMADSCRITO ;
Var.ENTAPORTANTES_ID = row5.ENTAPORTANTES_ID ==null?0:row5.ENTAPORTANTES_ID ;
Var.GRDMILITARES_ID = row5.GRDMILITARES_ID ==null?0:row5.GRDMILITARES_ID ;
Var.FUERZAS_ID = row5.FUERZAS_ID ==null?0:row5.FUERZAS_ID ;
Var.UMILITARES_ID = row5.UMILITARES_ID ==null?0:row5.UMILITARES_ID ;
Var.TVINCULACIONES_ID = row5.TVINCULACIONES_ID ==null?0:row5.TVINCULACIONES_ID ;
Var.MOTIVOSESTADO_ID = row5.MOTIVOSESTADO_ID ==null?0:row5.MOTIVOSESTADO_ID ;
Var.procesos_id = context.vprocesos_id ;
Var.LUGAR_EXP_DOCUMENTO = row5.LUGAR_EXP_DOC ==null?0:row5.LUGAR_EXP_DOC ;
Var.LUGAR_NACIMIENTO = row5.LUGAR_NACIMIENTO ==null?0:row5.LUGAR_NACIMIENTO ;// ###############################
        // ###############################
        // # Output tables

valTdocumentos_id = null;
archmasivo = null;

boolean rejected_tMap_2 = true;

// # Output table : 'valTdocumentos_id'
// # Filter conditions 
if( 

row5.PRIMER_NOMBRE == null || row5.PRIMER_APELLIDO==null ||Var.TDOCUMENTOS_ID ==0 ||  Var.SEXOS_ID ==0 || Var.ESTCIVILES_ID ==0 || Var.ESTCIVILES_ID ==-99 || Var.TDISCAPACIDADES_ID==0 ||Var.ZRESIDENCIAS ==0 || Var.LUGAR_RESIDENCIA  ==0 || Var.LOCALIDADES_ID == -99  || Var.GSANGUINEOS_ID  ==0 || Var.OCUPACIONES_ID  ==0 || Var.ETNICAS_ID  ==0 || Var.NSOCIOECONOMICOS_ID  ==0 || Var.TVIVIENDA_ID  ==0  || Var.NEDUCATIVOS_ID  ==0 || Var.ESMADSCRITO  ==0 || Var.ENTAPORTANTES_ID  ==0 || Var.GRDMILITARES_ID  ==0 || Var.FUERZAS_ID  ==0 || Var.UMILITARES_ID  ==0 || Var.TVINCULACIONES_ID  ==0  || Var.MOTIVOSESTADO_ID==0 || row5.FECHAI == null

 ) {
rejected_tMap_2 = false;
valTdocumentos_id_tmp.PRIMER_NOMBRE = row5.PRIMER_NOMBRE ;
valTdocumentos_id_tmp.PRIMER_APELLIDO = row5.PRIMER_APELLIDO ;
valTdocumentos_id_tmp.TDOCUMENTO = row5.TDOCUMENTO ;
valTdocumentos_id_tmp.DOCUMENTO = row5.DOCUMENTO ;
valTdocumentos_id_tmp.TDOCUMENTOS_ID = Var.TDOCUMENTOS_ID ;
valTdocumentos_id_tmp.MENSAJE = null;
valTdocumentos_id_tmp.SEXOS_ID = Var.SEXOS_ID ;
valTdocumentos_id_tmp.ESTCIVILES_ID = Var.ESTCIVILES_ID ;
valTdocumentos_id_tmp.TDISCAPACIDADES_ID = Var.TDISCAPACIDADES_ID ;
valTdocumentos_id_tmp.ZRESIDENCIAS = Var.ZRESIDENCIAS ;
valTdocumentos_id_tmp.LUGAR_RESIDENCIA = Var.LUGAR_RESIDENCIA ;
valTdocumentos_id_tmp.LOCALIDADES_ID = Var.LOCALIDADES_ID ;
valTdocumentos_id_tmp.GSANGUINEOS_ID = Var.GSANGUINEOS_ID ;
valTdocumentos_id_tmp.OCUPACIONES_ID = Var.OCUPACIONES_ID ;
valTdocumentos_id_tmp.ETNICAS_ID = Var.ETNICAS_ID ;
valTdocumentos_id_tmp.NSOCIOECONOMICOS_ID = Var.NSOCIOECONOMICOS_ID ;
valTdocumentos_id_tmp.TVIVIENDA_ID = Var.TVIVIENDA_ID ;
valTdocumentos_id_tmp.NEDUCATIVOS_ID = Var.NEDUCATIVOS_ID ;
valTdocumentos_id_tmp.ESMADSCRITO = Var.ESMADSCRITO ;
valTdocumentos_id_tmp.ENTAPORTANTES_ID = Var.ENTAPORTANTES_ID ;
valTdocumentos_id_tmp.GRDMILITARES_ID = Var.GRDMILITARES_ID ;
valTdocumentos_id_tmp.FUERZAS_ID = Var.FUERZAS_ID ;
valTdocumentos_id_tmp.UMILITARES_ID = Var.UMILITARES_ID  ;
valTdocumentos_id_tmp.TVINCULACIONES_ID = Var.TVINCULACIONES_ID ;
valTdocumentos_id_tmp.MOTIVOSESTADO_ID = Var.MOTIVOSESTADO_ID ;
valTdocumentos_id = valTdocumentos_id_tmp;
} // closing filter/reject
// ###### START REJECTS ##### 

// # Output reject table : 'archmasivo'
// # Filter conditions 
if( rejected_tMap_2 ) {
archmasivo_tmp.PRIMER_NOMBRE = row5.PRIMER_NOMBRE ;
archmasivo_tmp.SEGUNDO_NOMBRE = row5.SEGUNDO_NOMBRE ;
archmasivo_tmp.PRIMER_APELLIDO = row5.PRIMER_APELLIDO ;
archmasivo_tmp.SEGUNDO_APELLIDO = row5.SEGUNDO_APELLIDO ;
archmasivo_tmp.TDOCUMENTOS_ID = Var.TDOCUMENTOS_ID ;
archmasivo_tmp.TDOCUMENTO = row5.TDOCUMENTO ;
archmasivo_tmp.DOCUMENTO = row5.DOCUMENTO ;
archmasivo_tmp.SEXOS_ID = row5.SEXOS_ID ;
archmasivo_tmp.FECHA_NACIMIENTO = row5.FECHA_NACIMIENTO ;
archmasivo_tmp.ESTCIVILES_ID = row5.ESTCIVILES_ID ;
archmasivo_tmp.TDISCAPACIDADES_ID = row5.TDISCAPACIDADES_ID ;
archmasivo_tmp.DIRECCION = row5.DIRECCION ;
archmasivo_tmp.TELEFONO = row5.TELEFONO ;
archmasivo_tmp.CELULAR = row5.CELULAR ;
archmasivo_tmp.CORREO_ELECTRONICO = row5.CORREO_ELECTRONICO ;
archmasivo_tmp.ZRESIDENCIAS = row5.ZRESIDENCIAS ;
archmasivo_tmp.FECHA_EXPEDICION_DOCUMENTO = row5.FECHA_EXPEDICION_DOCUMENTO ;
archmasivo_tmp.LUGAR_EXP_DOC = Var.LUGAR_EXP_DOCUMENTO ;
archmasivo_tmp.LUGAR_NACIMIENTO = Var.LUGAR_NACIMIENTO ;
archmasivo_tmp.LUGAR_RESIDENCIA = row5.LUGAR_RESIDENCIA ;
archmasivo_tmp.LOCALIDADES_ID = row5.LOCALIDADES_ID ;
archmasivo_tmp.GSANGUINEOS_ID = row5.GSANGUINEOS_ID ;
archmasivo_tmp.ESTATURA = row5.ESTATURA ;
archmasivo_tmp.OCUPACIONES_ID = row5.OCUPACIONES_ID ;
archmasivo_tmp.ETNICAS_ID = row5.ETNICAS_ID ;
archmasivo_tmp.NSOCIOECONOMICOS_ID = row5.NSOCIOECONOMICOS_ID ;
archmasivo_tmp.TVIVIENDA_ID = row5.TVIVIENDA_ID ;
archmasivo_tmp.NEDUCATIVOS_ID = row5.NEDUCATIVOS_ID ;
archmasivo_tmp.ESMADSCRITO = row5.ESMADSCRITO ;
archmasivo_tmp.FECHAI = row5.FECHAI ;
archmasivo_tmp.PARENTESCOS_ID = row5.PARENTESCOS_ID ;
archmasivo_tmp.OBSERVACIONES = row5.OBSERVACIONES ;
archmasivo_tmp.FECHA_CADUCIDAD = row5.FECHA_CADUCIDAD ;
archmasivo_tmp.PLANAFILIACIONES_ID = row5.PLANAFILIACIONES_ID ;
archmasivo_tmp.ENTAPORTANTES_ID = row5.ENTAPORTANTES_ID ;
archmasivo_tmp.GRDMILITARES_ID = row5.GRDMILITARES_ID ;
archmasivo_tmp.FUERZAS_ID = row5.FUERZAS_ID ;
archmasivo_tmp.UMILITARES_ID = row5.UMILITARES_ID ;
archmasivo_tmp.PRINCIPAL = row5.PRINCIPAL ;
archmasivo_tmp.ESTADO = row5.ESTADO ;
archmasivo_tmp.TVINCULACIONES_ID = row5.TVINCULACIONES_ID ;
archmasivo_tmp.FECHA_INGRESO = row5.FECHAI ;
archmasivo_tmp.ESTADOS_ID = row5.ESTADOS_ID ;
archmasivo_tmp.USUARIOS_ID = row5.USUARIOS_ID ;
archmasivo_tmp.MOTIVOSESTADO_ID = row5.MOTIVOSESTADO_ID ;
archmasivo_tmp.FECHA = row5.FECHAI ;
archmasivo_tmp.MOTIVO = row5.MOTIVO ;
archmasivo_tmp.RNOVEDADES_ID = row5.RNOVEDADES_ID ;
archmasivo_tmp.VANTERIOR = row5.VANTERIOR ;
archmasivo_tmp.VACTUAL = row5.VACTUAL ;
archmasivo_tmp.PROCESOS_ID = Var.procesos_id ;
archmasivo = archmasivo_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "archmasivo"
if(archmasivo != null) { 



	
	/**
	 * [tOracleOutput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"archmasivo"
						
						);
					}
					



        whetherReject_tOracleOutput_3 = false;
                        if(archmasivo.PRIMER_NOMBRE == null) {
pstmt_tOracleOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(1, archmasivo.PRIMER_NOMBRE);
}

                        if(archmasivo.SEGUNDO_NOMBRE == null) {
pstmt_tOracleOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(2, archmasivo.SEGUNDO_NOMBRE);
}

                        if(archmasivo.PRIMER_APELLIDO == null) {
pstmt_tOracleOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(3, archmasivo.PRIMER_APELLIDO);
}

                        if(archmasivo.SEGUNDO_APELLIDO == null) {
pstmt_tOracleOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(4, archmasivo.SEGUNDO_APELLIDO);
}

                        pstmt_tOracleOutput_3.setInt(5, archmasivo.TDOCUMENTOS_ID);

                        if(archmasivo.TDOCUMENTO == null) {
pstmt_tOracleOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(6, archmasivo.TDOCUMENTO);
}

                        if(archmasivo.DOCUMENTO == null) {
pstmt_tOracleOutput_3.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(7, archmasivo.DOCUMENTO);
}

                        if(archmasivo.SEXOS_ID == null) {
pstmt_tOracleOutput_3.setNull(8, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(8, archmasivo.SEXOS_ID);
}

                        if(archmasivo.FECHA_NACIMIENTO != null) {
pstmt_tOracleOutput_3.setObject(9, new java.sql.Timestamp(archmasivo.FECHA_NACIMIENTO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_3.setNull(9, java.sql.Types.DATE);
}

                        if(archmasivo.ESTCIVILES_ID == null) {
pstmt_tOracleOutput_3.setNull(10, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(10, archmasivo.ESTCIVILES_ID);
}

                        if(archmasivo.TDISCAPACIDADES_ID == null) {
pstmt_tOracleOutput_3.setNull(11, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(11, archmasivo.TDISCAPACIDADES_ID);
}

                        if(archmasivo.DIRECCION == null) {
pstmt_tOracleOutput_3.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(12, archmasivo.DIRECCION);
}

                        if(archmasivo.TELEFONO == null) {
pstmt_tOracleOutput_3.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(13, archmasivo.TELEFONO);
}

                        if(archmasivo.CELULAR == null) {
pstmt_tOracleOutput_3.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(14, archmasivo.CELULAR);
}

                        if(archmasivo.CORREO_ELECTRONICO == null) {
pstmt_tOracleOutput_3.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(15, archmasivo.CORREO_ELECTRONICO);
}

                        if(archmasivo.ZRESIDENCIAS == null) {
pstmt_tOracleOutput_3.setNull(16, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(16, archmasivo.ZRESIDENCIAS);
}

                        if(archmasivo.FECHA_EXPEDICION_DOCUMENTO != null) {
pstmt_tOracleOutput_3.setObject(17, new java.sql.Timestamp(archmasivo.FECHA_EXPEDICION_DOCUMENTO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_3.setNull(17, java.sql.Types.DATE);
}

                        if(archmasivo.LUGAR_EXP_DOC == null) {
pstmt_tOracleOutput_3.setNull(18, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(18, archmasivo.LUGAR_EXP_DOC);
}

                        if(archmasivo.LUGAR_NACIMIENTO == null) {
pstmt_tOracleOutput_3.setNull(19, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(19, archmasivo.LUGAR_NACIMIENTO);
}

                        if(archmasivo.LUGAR_RESIDENCIA == null) {
pstmt_tOracleOutput_3.setNull(20, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(20, archmasivo.LUGAR_RESIDENCIA);
}

                        if(archmasivo.LOCALIDADES_ID == null) {
pstmt_tOracleOutput_3.setNull(21, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(21, archmasivo.LOCALIDADES_ID);
}

                        if(archmasivo.GSANGUINEOS_ID == null) {
pstmt_tOracleOutput_3.setNull(22, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(22, archmasivo.GSANGUINEOS_ID);
}

                        pstmt_tOracleOutput_3.setBigDecimal(23, archmasivo.ESTATURA);

                        if(archmasivo.OCUPACIONES_ID == null) {
pstmt_tOracleOutput_3.setNull(24, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(24, archmasivo.OCUPACIONES_ID);
}

                        if(archmasivo.ETNICAS_ID == null) {
pstmt_tOracleOutput_3.setNull(25, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(25, archmasivo.ETNICAS_ID);
}

                        if(archmasivo.NSOCIOECONOMICOS_ID == null) {
pstmt_tOracleOutput_3.setNull(26, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(26, archmasivo.NSOCIOECONOMICOS_ID);
}

                        if(archmasivo.TVIVIENDA_ID == null) {
pstmt_tOracleOutput_3.setNull(27, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(27, archmasivo.TVIVIENDA_ID);
}

                        if(archmasivo.NEDUCATIVOS_ID == null) {
pstmt_tOracleOutput_3.setNull(28, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(28, archmasivo.NEDUCATIVOS_ID);
}

                        if(archmasivo.ESMADSCRITO == null) {
pstmt_tOracleOutput_3.setNull(29, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(29, archmasivo.ESMADSCRITO);
}

                        if(archmasivo.FECHAI != null) {
pstmt_tOracleOutput_3.setObject(30, new java.sql.Timestamp(archmasivo.FECHAI.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_3.setNull(30, java.sql.Types.DATE);
}

                        if(archmasivo.PARENTESCOS_ID == null) {
pstmt_tOracleOutput_3.setNull(31, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(31, archmasivo.PARENTESCOS_ID);
}

                        if(archmasivo.OBSERVACIONES == null) {
pstmt_tOracleOutput_3.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(32, archmasivo.OBSERVACIONES);
}

                        if(archmasivo.FECHA_CADUCIDAD != null) {
pstmt_tOracleOutput_3.setObject(33, new java.sql.Timestamp(archmasivo.FECHA_CADUCIDAD.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_3.setNull(33, java.sql.Types.DATE);
}

                        if(archmasivo.PLANAFILIACIONES_ID == null) {
pstmt_tOracleOutput_3.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(34, archmasivo.PLANAFILIACIONES_ID);
}

                        if(archmasivo.ENTAPORTANTES_ID == null) {
pstmt_tOracleOutput_3.setNull(35, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(35, archmasivo.ENTAPORTANTES_ID);
}

                        if(archmasivo.GRDMILITARES_ID == null) {
pstmt_tOracleOutput_3.setNull(36, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(36, archmasivo.GRDMILITARES_ID);
}

                        if(archmasivo.FUERZAS_ID == null) {
pstmt_tOracleOutput_3.setNull(37, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(37, archmasivo.FUERZAS_ID);
}

                        if(archmasivo.UMILITARES_ID == null) {
pstmt_tOracleOutput_3.setNull(38, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(38, archmasivo.UMILITARES_ID);
}

                        if(archmasivo.PRINCIPAL == null) {
pstmt_tOracleOutput_3.setNull(39, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(39, archmasivo.PRINCIPAL);
}

                        if(archmasivo.ESTADO == null) {
pstmt_tOracleOutput_3.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(40, archmasivo.ESTADO);
}

                        if(archmasivo.TVINCULACIONES_ID == null) {
pstmt_tOracleOutput_3.setNull(41, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(41, archmasivo.TVINCULACIONES_ID);
}

                        if(archmasivo.FECHA_INGRESO != null) {
pstmt_tOracleOutput_3.setObject(42, new java.sql.Timestamp(archmasivo.FECHA_INGRESO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_3.setNull(42, java.sql.Types.DATE);
}

                        if(archmasivo.ESTADOS_ID == null) {
pstmt_tOracleOutput_3.setNull(43, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(43, archmasivo.ESTADOS_ID);
}

                        if(archmasivo.USUARIOS_ID == null) {
pstmt_tOracleOutput_3.setNull(44, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(44, archmasivo.USUARIOS_ID);
}

                        if(archmasivo.MOTIVOSESTADO_ID == null) {
pstmt_tOracleOutput_3.setNull(45, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(45, archmasivo.MOTIVOSESTADO_ID);
}

                        if(archmasivo.FECHA != null) {
pstmt_tOracleOutput_3.setObject(46, new java.sql.Timestamp(archmasivo.FECHA.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_3.setNull(46, java.sql.Types.DATE);
}

                        if(archmasivo.MOTIVO == null) {
pstmt_tOracleOutput_3.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(47, archmasivo.MOTIVO);
}

                        if(archmasivo.RNOVEDADES_ID == null) {
pstmt_tOracleOutput_3.setNull(48, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(48, archmasivo.RNOVEDADES_ID);
}

                        if(archmasivo.VANTERIOR == null) {
pstmt_tOracleOutput_3.setNull(49, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(49, archmasivo.VANTERIOR);
}

                        if(archmasivo.VACTUAL == null) {
pstmt_tOracleOutput_3.setNull(50, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(50, archmasivo.VACTUAL);
}

                        pstmt_tOracleOutput_3.setInt(51, archmasivo.PROCESOS_ID);

                try {
                    nb_line_tOracleOutput_3++;
                    int processedCount_tOracleOutput_3 = pstmt_tOracleOutput_3.executeUpdate();
                    insertedCount_tOracleOutput_3 += processedCount_tOracleOutput_3;
                    rowsToCommitCount_tOracleOutput_3 += processedCount_tOracleOutput_3;
                } catch(java.lang.Exception e_tOracleOutput_3) {
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
                    whetherReject_tOracleOutput_3 = true;
                            System.err.print(e_tOracleOutput_3.getMessage());
                }

 


	tos_count_tOracleOutput_3++;

/**
 * [tOracleOutput_3 main ] stop
 */
	
	/**
	 * [tOracleOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	

 



/**
 * [tOracleOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	

 



/**
 * [tOracleOutput_3 process_data_end ] stop
 */

} // End of branch "archmasivo"




// Start of branch "valTdocumentos_id"
if(valTdocumentos_id != null) { 



	
	/**
	 * [tJavaRow_5 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"valTdocumentos_id"
						
						);
					}
					

    //Code generate according to input schema and output schema
row4.TDOCUMENTOS_ID = valTdocumentos_id.TDOCUMENTOS_ID;
row4.DOCUMENTO = valTdocumentos_id.DOCUMENTO;
//row4.MENSAJE = valTdocumentos_id.MENSAJE;
//row4.TDOCUMENTOS_ID = valTdocumentos_id.TDOCUMENTOS_ID;
if (valTdocumentos_id.TDOCUMENTOS_ID==0){
   if (context.mensaje == null){
   context.mensaje = "Tipo documento no encontrado";}
   else {
   context.mensaje = context.mensaje +" Tipo documento no encontrado";
   }
   }
if (valTdocumentos_id.SEXOS_ID==0) {
   if (context.mensaje == null){
   context.mensaje= "Codigo de sexo no encontrado";}
   else {
   context.mensaje = context.mensaje +" - Codigo de sexo no encontrado";
   }
   }
if (valTdocumentos_id.ESTCIVILES_ID==0) {
   if (context.mensaje == null){
   context.mensaje = "Estado civil no encontrado";}
   else {
   context.mensaje = context.mensaje +" - Estado civil no encontrado";
   }
   }
if (valTdocumentos_id.TDISCAPACIDADES_ID==0) {
   if (context.mensaje == null){
   context.mensaje = "Codigo de discapacidad no encontrado";}
   else {
   context.mensaje = context.mensaje +" - Codigo de discapacidad no encontrado";
   }
   }
if (valTdocumentos_id.ZRESIDENCIAS==0) {
   if (context.mensaje == null){
   context.mensaje = "Codigo de zresidencias no encontrado";}
   else {
   context.mensaje = context.mensaje +" - Codigo de zresidencias no encontrado";
   }
   }
if (valTdocumentos_id.LUGAR_RESIDENCIA==0) {
   if (context.mensaje == null){
   context.mensaje = "Lugar de residencia no encontrado";}
   else {
   context.mensaje = context.mensaje +" - Lugar de residencia no encontrado";
   }
   }
if (valTdocumentos_id.GSANGUINEOS_ID==0) {
   if (context.mensaje == null){
   context.mensaje = "Grupo sanguíneo no encontrado";}
   else {
   context.mensaje = context.mensaje +" - Grupo sanguíneo no encontrado";
   }
   }
if (valTdocumentos_id.OCUPACIONES_ID==0) {
   if (context.mensaje == null){
   context.mensaje = "Codigo de ocupación no encontrado";}
   else {
   context.mensaje = context.mensaje +" - Codigo de ocupación no encontrado";
   }
   }
if (valTdocumentos_id.ETNICAS_ID==0) {
   if (context.mensaje == null){
   context.mensaje = "Grupo étnico no encontrado";}
   else {
   context.mensaje = context.mensaje +" - Grupo étnico no encontrado";
   }
   }
if (valTdocumentos_id.NSOCIOECONOMICOS_ID==0) {
   if (context.mensaje == null){
   context.mensaje = "Nivel socioeconómico no encontrado";}
   else {
   context.mensaje = context.mensaje +" - Nivel socioeconómico no encontrado";
   }
   }
if (valTdocumentos_id.TVIVIENDA_ID==0) {
   if (context.mensaje == null){
   context.mensaje = "Tipo de vivienda no encontrado";}
   else {
   context.mensaje = context.mensaje +" - Tipo de vivienda no encontrado";
   }
   }
if (valTdocumentos_id.NEDUCATIVOS_ID==0) {
   if (context.mensaje == null){
   context.mensaje = "Nivel educativo no encontrado";}
   else {
   context.mensaje = context.mensaje +" - Nivel educativo no encontrado";
   }
   }
if (valTdocumentos_id.ESMADSCRITO==0) {
   if (context.mensaje == null){
   context.mensaje = "ESM no encontrado";}
   else {
   context.mensaje = context.mensaje +" - ESM no encontrado";
   }
   }
if (valTdocumentos_id.ENTAPORTANTES_ID==0) {
   if (context.mensaje == null){
   context.mensaje = "Entidad aportante no encontrada";}
   else {
   context.mensaje = context.mensaje +" - Entidad aportante no encontrada";
   }
   }
if (valTdocumentos_id.GRDMILITARES_ID==0) {
   if (context.mensaje == null){
   context.mensaje = "Grado militar no encontrado";}
   else {
   context.mensaje = context.mensaje +" - Grado militar no encontrado";
   }
   }
if (valTdocumentos_id.FUERZAS_ID==0) {
   if (context.mensaje == null){
   context.mensaje = "Fuerza no encontrado";}
   else {
   context.mensaje = context.mensaje +" - Fuerza no encontrado";
   }
   }
if (valTdocumentos_id.UMILITARES_ID==0) {
   if (context.mensaje == null){
   context.mensaje = "Unidad militar no encontrado";}
   else {
   context.mensaje = context.mensaje +" - Unidad militar no encontrado";
   }
   }
if (valTdocumentos_id.TVINCULACIONES_ID==0) {
   if (context.mensaje == null){
   context.mensaje = "Tipo de vinculación no existente";}
   else {
   context.mensaje = context.mensaje +" - Tipo de vinculación no existente";
   }
   }
if (valTdocumentos_id.MOTIVOSESTADO_ID==0) {
   if (context.mensaje == null){
  context.mensaje = "Motivo no encontrado";}
   else {
   context.mensaje = context.mensaje +" - Motivo no encontrado";
   }
   }


   
row4.MENSAJE = context.mensaje;
    nb_line_tJavaRow_5++;   

 


	tos_count_tJavaRow_5++;

/**
 * [tJavaRow_5 main ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					



        whetherReject_tOracleOutput_2 = false;
                        if(row4.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_2.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_2.setInt(1, row4.TDOCUMENTOS_ID);
}

                        if(row4.DOCUMENTO == null) {
pstmt_tOracleOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(2, row4.DOCUMENTO);
}

                        if(row4.MENSAJE == null) {
pstmt_tOracleOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(3, row4.MENSAJE);
}

                try {
                    nb_line_tOracleOutput_2++;
                    int processedCount_tOracleOutput_2 = pstmt_tOracleOutput_2.executeUpdate();
                    insertedCount_tOracleOutput_2 += processedCount_tOracleOutput_2;
                    rowsToCommitCount_tOracleOutput_2 += processedCount_tOracleOutput_2;
                } catch(java.lang.Exception e_tOracleOutput_2) {
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
                    whetherReject_tOracleOutput_2 = true;
                            System.err.print(e_tOracleOutput_2.getMessage());
                }

 


	tos_count_tOracleOutput_2++;

/**
 * [tOracleOutput_2 main ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_end ] stop
 */

} // End of branch "valTdocumentos_id"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());




/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tJavaRow_4 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

globalMap.put("tJavaRow_4_NB_LINE",nb_line_tJavaRow_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tJavaRow_4", true);
end_Hash.put("tJavaRow_4", System.currentTimeMillis());




/**
 * [tJavaRow_4 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tOracleOutput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	
	



	
        if(pstmt_tOracleOutput_3 != null) {
			
				pstmt_tOracleOutput_3.close();
				resourceMap.remove("pstmt_tOracleOutput_3");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_3", true);

	
	nb_line_deleted_tOracleOutput_3=nb_line_deleted_tOracleOutput_3+ deletedCount_tOracleOutput_3;
	nb_line_update_tOracleOutput_3=nb_line_update_tOracleOutput_3 + updatedCount_tOracleOutput_3;
	nb_line_inserted_tOracleOutput_3=nb_line_inserted_tOracleOutput_3 + insertedCount_tOracleOutput_3;
	nb_line_rejected_tOracleOutput_3=nb_line_rejected_tOracleOutput_3 + rejectedCount_tOracleOutput_3;
	
        globalMap.put("tOracleOutput_3_NB_LINE",nb_line_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_UPDATED",nb_line_update_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_3);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"archmasivo");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_3", true);
end_Hash.put("tOracleOutput_3", System.currentTimeMillis());




/**
 * [tOracleOutput_3 end ] stop
 */




	
	/**
	 * [tJavaRow_5 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

globalMap.put("tJavaRow_5_NB_LINE",nb_line_tJavaRow_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"valTdocumentos_id");
			  	}
			  	
 

ok_Hash.put("tJavaRow_5", true);
end_Hash.put("tJavaRow_5", System.currentTimeMillis());




/**
 * [tJavaRow_5 end ] stop
 */

	
	/**
	 * [tOracleOutput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
	



	
        if(pstmt_tOracleOutput_2 != null) {
			
				pstmt_tOracleOutput_2.close();
				resourceMap.remove("pstmt_tOracleOutput_2");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_2", true);

	
	nb_line_deleted_tOracleOutput_2=nb_line_deleted_tOracleOutput_2+ deletedCount_tOracleOutput_2;
	nb_line_update_tOracleOutput_2=nb_line_update_tOracleOutput_2 + updatedCount_tOracleOutput_2;
	nb_line_inserted_tOracleOutput_2=nb_line_inserted_tOracleOutput_2 + insertedCount_tOracleOutput_2;
	nb_line_rejected_tOracleOutput_2=nb_line_rejected_tOracleOutput_2 + rejectedCount_tOracleOutput_2;
	
        globalMap.put("tOracleOutput_2_NB_LINE",nb_line_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_UPDATED",nb_line_update_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_2);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_2", true);
end_Hash.put("tOracleOutput_2", System.currentTimeMillis());




/**
 * [tOracleOutput_2 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tOracleInput_18Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tOracleOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_3 = null;
                if ((pstmtToClose_tOracleOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_3")) != null) {
                    pstmtToClose_tOracleOutput_3.close();
                }
    }
 



/**
 * [tOracleOutput_3 finally ] stop
 */




	
	/**
	 * [tJavaRow_5 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 finally ] stop
 */

	
	/**
	 * [tOracleOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_2 = null;
                if ((pstmtToClose_tOracleOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_2")) != null) {
                    pstmtToClose_tOracleOutput_2.close();
                }
    }
 



/**
 * [tOracleOutput_2 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row76Struct implements routines.system.IPersistableRow<row76Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return null;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return null;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String FECHA_DE_INGRESO;

				public String getFECHA_DE_INGRESO () {
					return this.FECHA_DE_INGRESO;
				}

				public Boolean FECHA_DE_INGRESOIsNullable(){
				    return true;
				}
				public Boolean FECHA_DE_INGRESOIsKey(){
				    return false;
				}
				public Integer FECHA_DE_INGRESOLength(){
				    return null;
				}
				public Integer FECHA_DE_INGRESOPrecision(){
				    return null;
				}
				public String FECHA_DE_INGRESODefault(){
				
					return null;
				
				}
				public String FECHA_DE_INGRESOComment(){
				
				    return "";
				
				}
				public String FECHA_DE_INGRESOPattern(){
				
					return "";
				
				}
				public String FECHA_DE_INGRESOOriginalDbColumnName(){
				
					return "FECHA_DE_INGRESO";
				
				}

				
			    public String FECHA_FIN_AFILIACION;

				public String getFECHA_FIN_AFILIACION () {
					return this.FECHA_FIN_AFILIACION;
				}

				public Boolean FECHA_FIN_AFILIACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_FIN_AFILIACIONIsKey(){
				    return false;
				}
				public Integer FECHA_FIN_AFILIACIONLength(){
				    return null;
				}
				public Integer FECHA_FIN_AFILIACIONPrecision(){
				    return null;
				}
				public String FECHA_FIN_AFILIACIONDefault(){
				
					return null;
				
				}
				public String FECHA_FIN_AFILIACIONComment(){
				
				    return "";
				
				}
				public String FECHA_FIN_AFILIACIONPattern(){
				
					return "";
				
				}
				public String FECHA_FIN_AFILIACIONOriginalDbColumnName(){
				
					return "FECHA_FIN_AFILIACION";
				
				}

				
			    public String FECHA_EXPEDICION_DOCUMENTO;

				public String getFECHA_EXPEDICION_DOCUMENTO () {
					return this.FECHA_EXPEDICION_DOCUMENTO;
				}

				public Boolean FECHA_EXPEDICION_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_EXPEDICION_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOLength(){
				    return null;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOPrecision(){
				    return null;
				}
				public String FECHA_EXPEDICION_DOCUMENTODefault(){
				
					return null;
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOOriginalDbColumnName(){
				
					return "FECHA_EXPEDICION_DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_DE_INGRESO = readString(dis);
					
					this.FECHA_FIN_AFILIACION = readString(dis);
					
					this.FECHA_EXPEDICION_DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_DE_INGRESO = readString(dis);
					
					this.FECHA_FIN_AFILIACION = readString(dis);
					
					this.FECHA_EXPEDICION_DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_DE_INGRESO,dos);
					
					// String
				
						writeString(this.FECHA_FIN_AFILIACION,dos);
					
					// String
				
						writeString(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_DE_INGRESO,dos);
					
					// String
				
						writeString(this.FECHA_FIN_AFILIACION,dos);
					
					// String
				
						writeString(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",FECHA_DE_INGRESO="+FECHA_DE_INGRESO);
		sb.append(",FECHA_FIN_AFILIACION="+FECHA_FIN_AFILIACION);
		sb.append(",FECHA_EXPEDICION_DOCUMENTO="+FECHA_EXPEDICION_DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row76Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row74Struct implements routines.system.IPersistableRow<row74Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String FECHA_NACIMIENTO;

				public String getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return null;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return null;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String FECHA_DE_INGRESO;

				public String getFECHA_DE_INGRESO () {
					return this.FECHA_DE_INGRESO;
				}

				public Boolean FECHA_DE_INGRESOIsNullable(){
				    return true;
				}
				public Boolean FECHA_DE_INGRESOIsKey(){
				    return false;
				}
				public Integer FECHA_DE_INGRESOLength(){
				    return null;
				}
				public Integer FECHA_DE_INGRESOPrecision(){
				    return null;
				}
				public String FECHA_DE_INGRESODefault(){
				
					return null;
				
				}
				public String FECHA_DE_INGRESOComment(){
				
				    return "";
				
				}
				public String FECHA_DE_INGRESOPattern(){
				
					return "";
				
				}
				public String FECHA_DE_INGRESOOriginalDbColumnName(){
				
					return "FECHA_DE_INGRESO";
				
				}

				
			    public String FECHA_FIN_AFILIACION;

				public String getFECHA_FIN_AFILIACION () {
					return this.FECHA_FIN_AFILIACION;
				}

				public Boolean FECHA_FIN_AFILIACIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_FIN_AFILIACIONIsKey(){
				    return false;
				}
				public Integer FECHA_FIN_AFILIACIONLength(){
				    return null;
				}
				public Integer FECHA_FIN_AFILIACIONPrecision(){
				    return null;
				}
				public String FECHA_FIN_AFILIACIONDefault(){
				
					return null;
				
				}
				public String FECHA_FIN_AFILIACIONComment(){
				
				    return "";
				
				}
				public String FECHA_FIN_AFILIACIONPattern(){
				
					return "";
				
				}
				public String FECHA_FIN_AFILIACIONOriginalDbColumnName(){
				
					return "FECHA_FIN_AFILIACION";
				
				}

				
			    public String FECHA_EXPEDICION_DOCUMENTO;

				public String getFECHA_EXPEDICION_DOCUMENTO () {
					return this.FECHA_EXPEDICION_DOCUMENTO;
				}

				public Boolean FECHA_EXPEDICION_DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_EXPEDICION_DOCUMENTOIsKey(){
				    return false;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOLength(){
				    return null;
				}
				public Integer FECHA_EXPEDICION_DOCUMENTOPrecision(){
				    return null;
				}
				public String FECHA_EXPEDICION_DOCUMENTODefault(){
				
					return null;
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOComment(){
				
				    return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOPattern(){
				
					return "";
				
				}
				public String FECHA_EXPEDICION_DOCUMENTOOriginalDbColumnName(){
				
					return "FECHA_EXPEDICION_DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_DE_INGRESO = readString(dis);
					
					this.FECHA_FIN_AFILIACION = readString(dis);
					
					this.FECHA_EXPEDICION_DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.FECHA_NACIMIENTO = readString(dis);
					
					this.FECHA_DE_INGRESO = readString(dis);
					
					this.FECHA_FIN_AFILIACION = readString(dis);
					
					this.FECHA_EXPEDICION_DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_DE_INGRESO,dos);
					
					// String
				
						writeString(this.FECHA_FIN_AFILIACION,dos);
					
					// String
				
						writeString(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.FECHA_DE_INGRESO,dos);
					
					// String
				
						writeString(this.FECHA_FIN_AFILIACION,dos);
					
					// String
				
						writeString(this.FECHA_EXPEDICION_DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",FECHA_NACIMIENTO="+FECHA_NACIMIENTO);
		sb.append(",FECHA_DE_INGRESO="+FECHA_DE_INGRESO);
		sb.append(",FECHA_FIN_AFILIACION="+FECHA_FIN_AFILIACION);
		sb.append(",FECHA_EXPEDICION_DOCUMENTO="+FECHA_EXPEDICION_DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row74Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row74Struct row74 = new row74Struct();
row76Struct row76 = new row76Struct();





	
	/**
	 * [tOracleOutput_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_23", false);
		start_Hash.put("tOracleOutput_23", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_23";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row76");
					}
				
		int tos_count_tOracleOutput_23 = 0;
		






    
    int nb_line_tOracleOutput_23 = 0;
    int nb_line_update_tOracleOutput_23 = 0;
    int nb_line_inserted_tOracleOutput_23 = 0;
    int nb_line_deleted_tOracleOutput_23 = 0;
    int nb_line_rejected_tOracleOutput_23 = 0;

    int tmp_batchUpdateCount_tOracleOutput_23 = 0;

    int deletedCount_tOracleOutput_23=0;
    int updatedCount_tOracleOutput_23=0;
    int insertedCount_tOracleOutput_23=0;
    int rowsToCommitCount_tOracleOutput_23=0;
    int rejectedCount_tOracleOutput_23=0;

    boolean whetherReject_tOracleOutput_23 = false;

    java.sql.Connection conn_tOracleOutput_23 = null;

    //optional table
    String dbschema_tOracleOutput_23 = null;
    String tableName_tOracleOutput_23 = null;
        dbschema_tOracleOutput_23 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_23 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_23=0;

        if(dbschema_tOracleOutput_23 == null || dbschema_tOracleOutput_23.trim().length() == 0) {
            tableName_tOracleOutput_23 = ("TST_ERRCMASIVO");
        } else {
            tableName_tOracleOutput_23 = dbschema_tOracleOutput_23 + "." + ("TST_ERRCMASIVO");
        }
                String insert_tOracleOutput_23 = "INSERT INTO " + tableName_tOracleOutput_23 + " (TDOCUMENTOS_ID,DOCUMENTO,FECHA_NACIMIENTO,FECHA_DE_INGRESO,FECHA_FIN_AFILIACION,FECHA_EXPEDICION_DOCUMENTO,MENSAJE) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_23 = conn_tOracleOutput_23.prepareStatement(insert_tOracleOutput_23);
                        resourceMap.put("pstmt_tOracleOutput_23", pstmt_tOracleOutput_23);





 



/**
 * [tOracleOutput_23 begin ] stop
 */



	
	/**
	 * [tJavaRow_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_27", false);
		start_Hash.put("tJavaRow_27", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_27";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row74");
					}
				
		int tos_count_tJavaRow_27 = 0;
		

int nb_line_tJavaRow_27 = 0;

 



/**
 * [tJavaRow_27 begin ] stop
 */



	
	/**
	 * [tOracleInput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_18", false);
		start_Hash.put("tOracleInput_18", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_18";
	
	
		int tos_count_tOracleInput_18 = 0;
		
	


	
		    int nb_line_tOracleInput_18 = 0;
		    java.sql.Connection conn_tOracleInput_18 = null;
				conn_tOracleInput_18 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_18 = false;
				boolean isConnectionWrapped_tOracleInput_18 = !(conn_tOracleInput_18 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_18.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_18 = null;
                if (isConnectionWrapped_tOracleInput_18) {
					unwrappedOraConn_tOracleInput_18 = conn_tOracleInput_18.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_18 != null) {
                        isTimeZoneNull_tOracleInput_18 = (unwrappedOraConn_tOracleInput_18.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_18 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_18).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_18) {
					java.sql.Statement stmtGetTZ_tOracleInput_18 = conn_tOracleInput_18.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_18 = stmtGetTZ_tOracleInput_18.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_18 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_18.next()) {
						sessionTimezone_tOracleInput_18 = rsGetTZ_tOracleInput_18.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_18 && unwrappedOraConn_tOracleInput_18 != null) {
                        unwrappedOraConn_tOracleInput_18.setSessionTimeZone(sessionTimezone_tOracleInput_18);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_18).setSessionTimeZone(sessionTimezone_tOracleInput_18);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_18 = conn_tOracleInput_18.createStatement();

		    String dbquery_tOracleInput_18 = "select gtd.id tdocumentos_id , ta.documento,fecha_nacimiento,  fecha_de_ingreso, fecha_fin_afiliacion, FECHA_EXPEDICION"
+"_DOCUMENTO,\n       '' mensaje\nfrom tst_archivo ta\n left join gen_tdocumentos gtd on (ta.tipo_de_documento = gtd.sigla"
+" and gtd.estregistro_id = 1)\nwhere fecha_nacimiento = 'Invalida' \n   or fecha_de_ingreso = 'Invalida' \n   or FECHA_EX"
+"PEDICION_DOCUMENTO = 'Invalida' \n   or fecha_fin_afiliacion = 'Invalida'";
		    

		    globalMap.put("tOracleInput_18_QUERY",dbquery_tOracleInput_18);

		    java.sql.ResultSet rs_tOracleInput_18 = null;

		    try {
		    	rs_tOracleInput_18 = stmt_tOracleInput_18.executeQuery(dbquery_tOracleInput_18);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_18 = rs_tOracleInput_18.getMetaData();
		    	int colQtyInRs_tOracleInput_18 = rsmd_tOracleInput_18.getColumnCount();

		    String tmpContent_tOracleInput_18 = null;
		    
		    
		    while (rs_tOracleInput_18.next()) {
		        nb_line_tOracleInput_18++;
		        
							if(colQtyInRs_tOracleInput_18 < 1) {
								row74.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_18.getObject(1) != null) {
						row74.TDOCUMENTOS_ID = rs_tOracleInput_18.getInt(1);
					} else {
				
						row74.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_18 < 2) {
								row74.DOCUMENTO = null;
							} else {
	                         		
        	row74.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 3) {
								row74.FECHA_NACIMIENTO = null;
							} else {
	                         		
        	row74.FECHA_NACIMIENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 4) {
								row74.FECHA_DE_INGRESO = null;
							} else {
	                         		
        	row74.FECHA_DE_INGRESO = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 5) {
								row74.FECHA_FIN_AFILIACION = null;
							} else {
	                         		
        	row74.FECHA_FIN_AFILIACION = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 6) {
								row74.FECHA_EXPEDICION_DOCUMENTO = null;
							} else {
	                         		
        	row74.FECHA_EXPEDICION_DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 7) {
								row74.MENSAJE = null;
							} else {
	                         		
        	row74.MENSAJE = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 7, false);
		                    }
					




 



/**
 * [tOracleInput_18 begin ] stop
 */
	
	/**
	 * [tOracleInput_18 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 


	tos_count_tOracleInput_18++;

/**
 * [tOracleInput_18 main ] stop
 */
	
	/**
	 * [tOracleInput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_27 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_27";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row74"
						
						);
					}
					

    //Code generate according to input schema and output schema
row76.TDOCUMENTOS_ID = row74.TDOCUMENTOS_ID;
row76.DOCUMENTO = row74.DOCUMENTO;


if (row74.FECHA_NACIMIENTO.equals("Invalida")) {
   if (context.mensaje == null){
  context.mensaje = "Fecha de nacimiento no valida";}
   else {
   context.mensaje = context.mensaje +" - Fecha de nacimiento no valida";
   }
   }

if (row74.FECHA_DE_INGRESO.equals("Invalida")) {
   if (context.mensaje == null){
  context.mensaje = "Fecha de ingreso no valida";}
   else {
   context.mensaje = context.mensaje +" - Fecha de ingreso no valida";
   }
   }
   
if (row74.FECHA_FIN_AFILIACION.equals("Invalida")) {
   if (context.mensaje == null){
  context.mensaje = "Fecha de caducidad no valida";}
   else {
   context.mensaje = context.mensaje +" - Fecha de caducidad no valida";
   }
   }

if (row74.FECHA_EXPEDICION_DOCUMENTO.equals("Invalida")) {
   if (context.mensaje == null){
  context.mensaje = "Fecha de expedición del documento no valida";}
   else {
   context.mensaje = context.mensaje +" - Fecha de expedición del documento no valida";
   }
   }

row76.MENSAJE = context.mensaje;
    nb_line_tJavaRow_27++;   

 


	tos_count_tJavaRow_27++;

/**
 * [tJavaRow_27 main ] stop
 */
	
	/**
	 * [tJavaRow_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_27";
	
	

 



/**
 * [tJavaRow_27 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_23 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_23";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row76"
						
						);
					}
					



        whetherReject_tOracleOutput_23 = false;
                        if(row76.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_23.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_23.setInt(1, row76.TDOCUMENTOS_ID);
}

                        if(row76.DOCUMENTO == null) {
pstmt_tOracleOutput_23.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_23.setString(2, row76.DOCUMENTO);
}

                        if(row76.FECHA_NACIMIENTO == null) {
pstmt_tOracleOutput_23.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_23.setString(3, row76.FECHA_NACIMIENTO);
}

                        if(row76.FECHA_DE_INGRESO == null) {
pstmt_tOracleOutput_23.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_23.setString(4, row76.FECHA_DE_INGRESO);
}

                        if(row76.FECHA_FIN_AFILIACION == null) {
pstmt_tOracleOutput_23.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_23.setString(5, row76.FECHA_FIN_AFILIACION);
}

                        if(row76.FECHA_EXPEDICION_DOCUMENTO == null) {
pstmt_tOracleOutput_23.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_23.setString(6, row76.FECHA_EXPEDICION_DOCUMENTO);
}

                        if(row76.MENSAJE == null) {
pstmt_tOracleOutput_23.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_23.setString(7, row76.MENSAJE);
}

                try {
                    nb_line_tOracleOutput_23++;
                    int processedCount_tOracleOutput_23 = pstmt_tOracleOutput_23.executeUpdate();
                    insertedCount_tOracleOutput_23 += processedCount_tOracleOutput_23;
                    rowsToCommitCount_tOracleOutput_23 += processedCount_tOracleOutput_23;
                } catch(java.lang.Exception e_tOracleOutput_23) {
globalMap.put("tOracleOutput_23_ERROR_MESSAGE",e_tOracleOutput_23.getMessage());
                    whetherReject_tOracleOutput_23 = true;
                            System.err.print(e_tOracleOutput_23.getMessage());
                }

 


	tos_count_tOracleOutput_23++;

/**
 * [tOracleOutput_23 main ] stop
 */
	
	/**
	 * [tOracleOutput_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_23";
	
	

 



/**
 * [tOracleOutput_23 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_23";
	
	

 



/**
 * [tOracleOutput_23 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_27";
	
	

 



/**
 * [tJavaRow_27 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_18 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

}
}finally{
	if (rs_tOracleInput_18 != null) {
		rs_tOracleInput_18.close();
	}
	if (stmt_tOracleInput_18 != null) {
		stmt_tOracleInput_18.close();
	}
}

globalMap.put("tOracleInput_18_NB_LINE",nb_line_tOracleInput_18);
 

ok_Hash.put("tOracleInput_18", true);
end_Hash.put("tOracleInput_18", System.currentTimeMillis());




/**
 * [tOracleInput_18 end ] stop
 */

	
	/**
	 * [tJavaRow_27 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_27";
	
	

globalMap.put("tJavaRow_27_NB_LINE",nb_line_tJavaRow_27);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row74");
			  	}
			  	
 

ok_Hash.put("tJavaRow_27", true);
end_Hash.put("tJavaRow_27", System.currentTimeMillis());




/**
 * [tJavaRow_27 end ] stop
 */

	
	/**
	 * [tOracleOutput_23 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_23";
	
	
	



	
        if(pstmt_tOracleOutput_23 != null) {
			
				pstmt_tOracleOutput_23.close();
				resourceMap.remove("pstmt_tOracleOutput_23");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_23", true);

	
	nb_line_deleted_tOracleOutput_23=nb_line_deleted_tOracleOutput_23+ deletedCount_tOracleOutput_23;
	nb_line_update_tOracleOutput_23=nb_line_update_tOracleOutput_23 + updatedCount_tOracleOutput_23;
	nb_line_inserted_tOracleOutput_23=nb_line_inserted_tOracleOutput_23 + insertedCount_tOracleOutput_23;
	nb_line_rejected_tOracleOutput_23=nb_line_rejected_tOracleOutput_23 + rejectedCount_tOracleOutput_23;
	
        globalMap.put("tOracleOutput_23_NB_LINE",nb_line_tOracleOutput_23);
        globalMap.put("tOracleOutput_23_NB_LINE_UPDATED",nb_line_update_tOracleOutput_23);
        globalMap.put("tOracleOutput_23_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_23);
        globalMap.put("tOracleOutput_23_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_23);
        globalMap.put("tOracleOutput_23_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_23);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row76");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_23", true);
end_Hash.put("tOracleOutput_23", System.currentTimeMillis());




/**
 * [tOracleOutput_23 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_18:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk14", 0, "ok");
								} 
							
							tOracleInput_16Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_18 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 finally ] stop
 */

	
	/**
	 * [tJavaRow_27 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_27";
	
	

 



/**
 * [tJavaRow_27 finally ] stop
 */

	
	/**
	 * [tOracleOutput_23 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_23";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_23") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_23 = null;
                if ((pstmtToClose_tOracleOutput_23 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_23")) != null) {
                    pstmtToClose_tOracleOutput_23.close();
                }
    }
 



/**
 * [tOracleOutput_23 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_18_SUBPROCESS_STATE", 1);
	}
	


public static class row63Struct implements routines.system.IPersistableRow<row63Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer REGISTROS;

				public Integer getREGISTROS () {
					return this.REGISTROS;
				}

				public Boolean REGISTROSIsNullable(){
				    return true;
				}
				public Boolean REGISTROSIsKey(){
				    return false;
				}
				public Integer REGISTROSLength(){
				    return 0;
				}
				public Integer REGISTROSPrecision(){
				    return 0;
				}
				public String REGISTROSDefault(){
				
					return "";
				
				}
				public String REGISTROSComment(){
				
				    return "";
				
				}
				public String REGISTROSPattern(){
				
					return "";
				
				}
				public String REGISTROSOriginalDbColumnName(){
				
					return "REGISTROS";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.REGISTROS = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.REGISTROS = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.REGISTROS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.REGISTROS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("REGISTROS="+String.valueOf(REGISTROS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row63Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row63Struct row63 = new row63Struct();




	
	/**
	 * [tJavaRow_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_24", false);
		start_Hash.put("tJavaRow_24", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_24";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row63");
					}
				
		int tos_count_tJavaRow_24 = 0;
		

int nb_line_tJavaRow_24 = 0;

 



/**
 * [tJavaRow_24 begin ] stop
 */



	
	/**
	 * [tOracleInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_16", false);
		start_Hash.put("tOracleInput_16", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_16";
	
	
		int tos_count_tOracleInput_16 = 0;
		
	


	
		    int nb_line_tOracleInput_16 = 0;
		    java.sql.Connection conn_tOracleInput_16 = null;
				conn_tOracleInput_16 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_16 = false;
				boolean isConnectionWrapped_tOracleInput_16 = !(conn_tOracleInput_16 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_16.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_16 = null;
                if (isConnectionWrapped_tOracleInput_16) {
					unwrappedOraConn_tOracleInput_16 = conn_tOracleInput_16.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_16 != null) {
                        isTimeZoneNull_tOracleInput_16 = (unwrappedOraConn_tOracleInput_16.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_16 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_16).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_16) {
					java.sql.Statement stmtGetTZ_tOracleInput_16 = conn_tOracleInput_16.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_16 = stmtGetTZ_tOracleInput_16.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_16 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_16.next()) {
						sessionTimezone_tOracleInput_16 = rsGetTZ_tOracleInput_16.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_16 && unwrappedOraConn_tOracleInput_16 != null) {
                        unwrappedOraConn_tOracleInput_16.setSessionTimeZone(sessionTimezone_tOracleInput_16);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_16).setSessionTimeZone(sessionTimezone_tOracleInput_16);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_16 = conn_tOracleInput_16.createStatement();

		    String dbquery_tOracleInput_16 = "select count(1) registros\n  from tst_errcmasivo";
		    

		    globalMap.put("tOracleInput_16_QUERY",dbquery_tOracleInput_16);

		    java.sql.ResultSet rs_tOracleInput_16 = null;

		    try {
		    	rs_tOracleInput_16 = stmt_tOracleInput_16.executeQuery(dbquery_tOracleInput_16);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_16 = rs_tOracleInput_16.getMetaData();
		    	int colQtyInRs_tOracleInput_16 = rsmd_tOracleInput_16.getColumnCount();

		    String tmpContent_tOracleInput_16 = null;
		    
		    
		    while (rs_tOracleInput_16.next()) {
		        nb_line_tOracleInput_16++;
		        
							if(colQtyInRs_tOracleInput_16 < 1) {
								row63.REGISTROS = null;
							} else {
		                          
					if(rs_tOracleInput_16.getObject(1) != null) {
						row63.REGISTROS = rs_tOracleInput_16.getInt(1);
					} else {
				
						row63.REGISTROS = null;
					}
		                    }
					




 



/**
 * [tOracleInput_16 begin ] stop
 */
	
	/**
	 * [tOracleInput_16 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 


	tos_count_tOracleInput_16++;

/**
 * [tOracleInput_16 main ] stop
 */
	
	/**
	 * [tOracleInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_24 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_24";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row63"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.regestructura = row63.REGISTROS;

    nb_line_tJavaRow_24++;   

 


	tos_count_tJavaRow_24++;

/**
 * [tJavaRow_24 main ] stop
 */
	
	/**
	 * [tJavaRow_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_24";
	
	

 



/**
 * [tJavaRow_24 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_24";
	
	

 



/**
 * [tJavaRow_24 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_16 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

}
}finally{
	if (rs_tOracleInput_16 != null) {
		rs_tOracleInput_16.close();
	}
	if (stmt_tOracleInput_16 != null) {
		stmt_tOracleInput_16.close();
	}
}

globalMap.put("tOracleInput_16_NB_LINE",nb_line_tOracleInput_16);
 

ok_Hash.put("tOracleInput_16", true);
end_Hash.put("tOracleInput_16", System.currentTimeMillis());




/**
 * [tOracleInput_16 end ] stop
 */

	
	/**
	 * [tJavaRow_24 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_24";
	
	

globalMap.put("tJavaRow_24_NB_LINE",nb_line_tJavaRow_24);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row63");
			  	}
			  	
 

ok_Hash.put("tJavaRow_24", true);
end_Hash.put("tJavaRow_24", System.currentTimeMillis());

   			if (context.regestructura >= context.cregistros) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If24", 0, "true");
					}
				tFixedFlowInput_18Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If24", 0, "false");
					}   	 
   				}
   			if (context.regestructura < context.cregistros) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If25", 0, "true");
					}
				tOracleInput_10Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If25", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_24 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_16 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 finally ] stop
 */

	
	/**
	 * [tJavaRow_24 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_24";
	
	

 



/**
 * [tJavaRow_24 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_16_SUBPROCESS_STATE", 1);
	}
	


public static class row62Struct implements routines.system.IPersistableRow<row62Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer archivos_id_;

				public Integer getArchivos_id_ () {
					return this.archivos_id_;
				}

				public Boolean archivos_id_IsNullable(){
				    return true;
				}
				public Boolean archivos_id_IsKey(){
				    return false;
				}
				public Integer archivos_id_Length(){
				    return null;
				}
				public Integer archivos_id_Precision(){
				    return null;
				}
				public String archivos_id_Default(){
				
					return null;
				
				}
				public String archivos_id_Comment(){
				
				    return "";
				
				}
				public String archivos_id_Pattern(){
				
					return "";
				
				}
				public String archivos_id_OriginalDbColumnName(){
				
					return "archivos_id_";
				
				}

				
			    public Integer estado_;

				public Integer getEstado_ () {
					return this.estado_;
				}

				public Boolean estado_IsNullable(){
				    return true;
				}
				public Boolean estado_IsKey(){
				    return false;
				}
				public Integer estado_Length(){
				    return null;
				}
				public Integer estado_Precision(){
				    return null;
				}
				public String estado_Default(){
				
					return null;
				
				}
				public String estado_Comment(){
				
				    return "";
				
				}
				public String estado_Pattern(){
				
					return "";
				
				}
				public String estado_OriginalDbColumnName(){
				
					return "estado_";
				
				}

				
			    public java.util.Date finicio_;

				public java.util.Date getFinicio_ () {
					return this.finicio_;
				}

				public Boolean finicio_IsNullable(){
				    return true;
				}
				public Boolean finicio_IsKey(){
				    return false;
				}
				public Integer finicio_Length(){
				    return null;
				}
				public Integer finicio_Precision(){
				    return null;
				}
				public String finicio_Default(){
				
					return null;
				
				}
				public String finicio_Comment(){
				
				    return "";
				
				}
				public String finicio_Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String finicio_OriginalDbColumnName(){
				
					return "finicio_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("archivos_id_="+String.valueOf(archivos_id_));
		sb.append(",estado_="+String.valueOf(estado_));
		sb.append(",finicio_="+String.valueOf(finicio_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row62Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row62Struct row62 = new row62Struct();




	
	/**
	 * [tOracleSP_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_10", false);
		start_Hash.put("tOracleSP_10", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row62");
					}
				
		int tos_count_tOracleSP_10 = 0;
		

	java.sql.Connection connection_tOracleSP_10 = null;
	connection_tOracleSP_10 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_2");
	

java.sql.CallableStatement statement_tOracleSP_10 = connection_tOracleSP_10.prepareCall("{call " + "cms2.updestadoarchivo" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_10;
String tmpString_tOracleSP_10;

 



/**
 * [tOracleSP_10 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_18", false);
		start_Hash.put("tFixedFlowInput_18", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_18";
	
	
		int tos_count_tFixedFlowInput_18 = 0;
		

	    for (int i_tFixedFlowInput_18 = 0 ; i_tFixedFlowInput_18 < 1 ; i_tFixedFlowInput_18++) {
	                	            	
    	            		row62.archivos_id_ = context.afiarchivos_id;
    	            	        	            	
    	            		row62.estado_ = 8;
    	            	        	            	
    	            		row62.finicio_ = context.vfinicio;
    	            	

 



/**
 * [tFixedFlowInput_18 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_18 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_18";
	
	

 


	tos_count_tFixedFlowInput_18++;

/**
 * [tFixedFlowInput_18 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_18";
	
	

 



/**
 * [tFixedFlowInput_18 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_10 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row62"
						
						);
					}
					

			// code for the argument 1 (archivos_id_) of type 'IN AUTOMAPPING'
    					if (row62.archivos_id_ == null) {
    						statement_tOracleSP_10.setNull(1, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_10.setInt(1, row62.archivos_id_);
    					}
    					
			// code for the argument 2 (estado_) of type 'IN AUTOMAPPING'
    					if (row62.estado_ == null) {
    						statement_tOracleSP_10.setNull(2, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_10.setInt(2, row62.estado_);
    					}
    					
			// code for the argument 3 (finicio_) of type 'IN TIMESTAMP'
    					if (row62.finicio_ == null) {
    						statement_tOracleSP_10.setNull(3, java.sql.Types.DATE);
    					} else {
    					
    					statement_tOracleSP_10.setTimestamp(3, new java.sql.Timestamp(row62.finicio_.getTime()));
    					
    					}
    					
		statement_tOracleSP_10.execute();
		

 


	tos_count_tOracleSP_10++;

/**
 * [tOracleSP_10 main ] stop
 */
	
	/**
	 * [tOracleSP_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_10";
	
	

 



/**
 * [tOracleSP_10 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_10";
	
	

 



/**
 * [tOracleSP_10 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_18";
	
	

 



/**
 * [tFixedFlowInput_18 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_18 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_18";
	
	

        }
        globalMap.put("tFixedFlowInput_18_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_18", true);
end_Hash.put("tFixedFlowInput_18", System.currentTimeMillis());




/**
 * [tFixedFlowInput_18 end ] stop
 */

	
	/**
	 * [tOracleSP_10 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_10";
	
	


	statement_tOracleSP_10.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row62");
			  	}
			  	
 

ok_Hash.put("tOracleSP_10", true);
end_Hash.put("tOracleSP_10", System.currentTimeMillis());




/**
 * [tOracleSP_10 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_18 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_18";
	
	

 



/**
 * [tFixedFlowInput_18 finally ] stop
 */

	
	/**
	 * [tOracleSP_10 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_10";
	
	

 



/**
 * [tOracleSP_10 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_18_SUBPROCESS_STATE", 1);
	}
	


public static class row38Struct implements routines.system.IPersistableRow<row38Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer REGISTROS;

				public Integer getREGISTROS () {
					return this.REGISTROS;
				}

				public Boolean REGISTROSIsNullable(){
				    return true;
				}
				public Boolean REGISTROSIsKey(){
				    return false;
				}
				public Integer REGISTROSLength(){
				    return 0;
				}
				public Integer REGISTROSPrecision(){
				    return 0;
				}
				public String REGISTROSDefault(){
				
					return "";
				
				}
				public String REGISTROSComment(){
				
				    return "";
				
				}
				public String REGISTROSPattern(){
				
					return "";
				
				}
				public String REGISTROSOriginalDbColumnName(){
				
					return "REGISTROS";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.REGISTROS = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.REGISTROS = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.REGISTROS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.REGISTROS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("REGISTROS="+String.valueOf(REGISTROS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row38Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row38Struct row38 = new row38Struct();




	
	/**
	 * [tJavaRow_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_17", false);
		start_Hash.put("tJavaRow_17", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_17";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row38");
					}
				
		int tos_count_tJavaRow_17 = 0;
		

int nb_line_tJavaRow_17 = 0;

 



/**
 * [tJavaRow_17 begin ] stop
 */



	
	/**
	 * [tOracleInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_10", false);
		start_Hash.put("tOracleInput_10", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_10";
	
	
		int tos_count_tOracleInput_10 = 0;
		
	


	
		    int nb_line_tOracleInput_10 = 0;
		    java.sql.Connection conn_tOracleInput_10 = null;
				conn_tOracleInput_10 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_10 = false;
				boolean isConnectionWrapped_tOracleInput_10 = !(conn_tOracleInput_10 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_10.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_10 = null;
                if (isConnectionWrapped_tOracleInput_10) {
					unwrappedOraConn_tOracleInput_10 = conn_tOracleInput_10.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_10 != null) {
                        isTimeZoneNull_tOracleInput_10 = (unwrappedOraConn_tOracleInput_10.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_10 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_10).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_10) {
					java.sql.Statement stmtGetTZ_tOracleInput_10 = conn_tOracleInput_10.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_10 = stmtGetTZ_tOracleInput_10.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_10 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_10.next()) {
						sessionTimezone_tOracleInput_10 = rsGetTZ_tOracleInput_10.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_10 && unwrappedOraConn_tOracleInput_10 != null) {
                        unwrappedOraConn_tOracleInput_10.setSessionTimeZone(sessionTimezone_tOracleInput_10);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_10).setSessionTimeZone(sessionTimezone_tOracleInput_10);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_10 = conn_tOracleInput_10.createStatement();

		    String dbquery_tOracleInput_10 = "select count(1) registros\n  from tst_carguemasivo";
		    

		    globalMap.put("tOracleInput_10_QUERY",dbquery_tOracleInput_10);

		    java.sql.ResultSet rs_tOracleInput_10 = null;

		    try {
		    	rs_tOracleInput_10 = stmt_tOracleInput_10.executeQuery(dbquery_tOracleInput_10);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_10 = rs_tOracleInput_10.getMetaData();
		    	int colQtyInRs_tOracleInput_10 = rsmd_tOracleInput_10.getColumnCount();

		    String tmpContent_tOracleInput_10 = null;
		    
		    
		    while (rs_tOracleInput_10.next()) {
		        nb_line_tOracleInput_10++;
		        
							if(colQtyInRs_tOracleInput_10 < 1) {
								row38.REGISTROS = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(1) != null) {
						row38.REGISTROS = rs_tOracleInput_10.getInt(1);
					} else {
				
						row38.REGISTROS = null;
					}
		                    }
					




 



/**
 * [tOracleInput_10 begin ] stop
 */
	
	/**
	 * [tOracleInput_10 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 


	tos_count_tOracleInput_10++;

/**
 * [tOracleInput_10 main ] stop
 */
	
	/**
	 * [tOracleInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_17 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_17";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row38"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.cregistros = 0;
context.cregistros = row38.REGISTROS;
context.numregexitoso = 0;
    nb_line_tJavaRow_17++;   

 


	tos_count_tJavaRow_17++;

/**
 * [tJavaRow_17 main ] stop
 */
	
	/**
	 * [tJavaRow_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_17";
	
	

 



/**
 * [tJavaRow_17 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_17";
	
	

 



/**
 * [tJavaRow_17 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_10 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

}
}finally{
	if (rs_tOracleInput_10 != null) {
		rs_tOracleInput_10.close();
	}
	if (stmt_tOracleInput_10 != null) {
		stmt_tOracleInput_10.close();
	}
}

globalMap.put("tOracleInput_10_NB_LINE",nb_line_tOracleInput_10);
 

ok_Hash.put("tOracleInput_10", true);
end_Hash.put("tOracleInput_10", System.currentTimeMillis());




/**
 * [tOracleInput_10 end ] stop
 */

	
	/**
	 * [tJavaRow_17 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_17";
	
	

globalMap.put("tJavaRow_17_NB_LINE",nb_line_tJavaRow_17);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row38");
			  	}
			  	
 

ok_Hash.put("tJavaRow_17", true);
end_Hash.put("tJavaRow_17", System.currentTimeMillis());

   			if (context.cregistros > 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If8", 0, "true");
					}
				tOracleInput_17Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If8", 0, "false");
					}   	 
   				}
   			if (context.cregistros == 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If6", 0, "true");
					}
				tFixedFlowInput_8Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If6", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_17 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_10 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 finally ] stop
 */

	
	/**
	 * [tJavaRow_17 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_17";
	
	

 



/**
 * [tJavaRow_17 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row73Struct implements routines.system.IPersistableRow<row73Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return "";
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row73Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row72Struct implements routines.system.IPersistableRow<row72Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row72Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row71Struct implements routines.system.IPersistableRow<row71Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row71Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row70Struct implements routines.system.IPersistableRow<row70Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return true;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return "";
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.MENSAJE = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",MENSAJE="+MENSAJE);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row70Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row70Struct row70 = new row70Struct();
row71Struct row71 = new row71Struct();
row72Struct row72 = new row72Struct();
row73Struct row73 = new row73Struct();







	
	/**
	 * [tOracleOutput_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_22", false);
		start_Hash.put("tOracleOutput_22", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_22";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row73");
					}
				
		int tos_count_tOracleOutput_22 = 0;
		






        int updateKeyCount_tOracleOutput_22 = 2;
        if(updateKeyCount_tOracleOutput_22 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_22 == 3 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_22 = 0;
    int nb_line_update_tOracleOutput_22 = 0;
    int nb_line_inserted_tOracleOutput_22 = 0;
    int nb_line_deleted_tOracleOutput_22 = 0;
    int nb_line_rejected_tOracleOutput_22 = 0;

    int tmp_batchUpdateCount_tOracleOutput_22 = 0;

    int deletedCount_tOracleOutput_22=0;
    int updatedCount_tOracleOutput_22=0;
    int insertedCount_tOracleOutput_22=0;
    int rowsToCommitCount_tOracleOutput_22=0;
    int rejectedCount_tOracleOutput_22=0;

    boolean whetherReject_tOracleOutput_22 = false;

    java.sql.Connection conn_tOracleOutput_22 = null;

    //optional table
    String dbschema_tOracleOutput_22 = null;
    String tableName_tOracleOutput_22 = null;
        dbschema_tOracleOutput_22 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_22 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_22=0;

        if(dbschema_tOracleOutput_22 == null || dbschema_tOracleOutput_22.trim().length() == 0) {
            tableName_tOracleOutput_22 = ("TST_CARGUEMASIVO");
        } else {
            tableName_tOracleOutput_22 = dbschema_tOracleOutput_22 + "." + ("TST_CARGUEMASIVO");
        }
                String update_tOracleOutput_22 = "UPDATE " + tableName_tOracleOutput_22 + " SET PROCESADO = ? WHERE TDOCUMENTOS_ID = ? AND DOCUMENTO = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_22 = conn_tOracleOutput_22.prepareStatement(update_tOracleOutput_22);
                resourceMap.put("pstmt_tOracleOutput_22", pstmt_tOracleOutput_22);





 



/**
 * [tOracleOutput_22 begin ] stop
 */



	
	/**
	 * [tJavaRow_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_26", false);
		start_Hash.put("tJavaRow_26", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_26";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row72");
					}
				
		int tos_count_tJavaRow_26 = 0;
		

int nb_line_tJavaRow_26 = 0;

 



/**
 * [tJavaRow_26 begin ] stop
 */



	
	/**
	 * [tOracleOutput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_21", false);
		start_Hash.put("tOracleOutput_21", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_21";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row71");
					}
				
		int tos_count_tOracleOutput_21 = 0;
		






    
    int nb_line_tOracleOutput_21 = 0;
    int nb_line_update_tOracleOutput_21 = 0;
    int nb_line_inserted_tOracleOutput_21 = 0;
    int nb_line_deleted_tOracleOutput_21 = 0;
    int nb_line_rejected_tOracleOutput_21 = 0;

    int tmp_batchUpdateCount_tOracleOutput_21 = 0;

    int deletedCount_tOracleOutput_21=0;
    int updatedCount_tOracleOutput_21=0;
    int insertedCount_tOracleOutput_21=0;
    int rowsToCommitCount_tOracleOutput_21=0;
    int rejectedCount_tOracleOutput_21=0;

    boolean whetherReject_tOracleOutput_21 = false;

    java.sql.Connection conn_tOracleOutput_21 = null;

    //optional table
    String dbschema_tOracleOutput_21 = null;
    String tableName_tOracleOutput_21 = null;
        dbschema_tOracleOutput_21 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_21 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_21=0;

        if(dbschema_tOracleOutput_21 == null || dbschema_tOracleOutput_21.trim().length() == 0) {
            tableName_tOracleOutput_21 = ("TST_ERRCMASIVO");
        } else {
            tableName_tOracleOutput_21 = dbschema_tOracleOutput_21 + "." + ("TST_ERRCMASIVO");
        }
                String insert_tOracleOutput_21 = "INSERT INTO " + tableName_tOracleOutput_21 + " (TDOCUMENTOS_ID,DOCUMENTO,MENSAJE) VALUES (?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_21 = conn_tOracleOutput_21.prepareStatement(insert_tOracleOutput_21);
                        resourceMap.put("pstmt_tOracleOutput_21", pstmt_tOracleOutput_21);





 



/**
 * [tOracleOutput_21 begin ] stop
 */



	
	/**
	 * [tJavaRow_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_23", false);
		start_Hash.put("tJavaRow_23", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_23";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row70");
					}
				
		int tos_count_tJavaRow_23 = 0;
		

int nb_line_tJavaRow_23 = 0;

 



/**
 * [tJavaRow_23 begin ] stop
 */



	
	/**
	 * [tOracleInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_17", false);
		start_Hash.put("tOracleInput_17", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_17";
	
	
		int tos_count_tOracleInput_17 = 0;
		
	


	
		    int nb_line_tOracleInput_17 = 0;
		    java.sql.Connection conn_tOracleInput_17 = null;
				conn_tOracleInput_17 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_17 = false;
				boolean isConnectionWrapped_tOracleInput_17 = !(conn_tOracleInput_17 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_17.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_17 = null;
                if (isConnectionWrapped_tOracleInput_17) {
					unwrappedOraConn_tOracleInput_17 = conn_tOracleInput_17.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_17 != null) {
                        isTimeZoneNull_tOracleInput_17 = (unwrappedOraConn_tOracleInput_17.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_17 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_17).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_17) {
					java.sql.Statement stmtGetTZ_tOracleInput_17 = conn_tOracleInput_17.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_17 = stmtGetTZ_tOracleInput_17.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_17 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_17.next()) {
						sessionTimezone_tOracleInput_17 = rsGetTZ_tOracleInput_17.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_17 && unwrappedOraConn_tOracleInput_17 != null) {
                        unwrappedOraConn_tOracleInput_17.setSessionTimeZone(sessionTimezone_tOracleInput_17);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_17).setSessionTimeZone(sessionTimezone_tOracleInput_17);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_17 = conn_tOracleInput_17.createStatement();

		    String dbquery_tOracleInput_17 = "select    tc.tdocumentos_id\n        , tc.documento\n        , cond.mensaje\n        , cond.procesado \nfrom tst_cargue"
+"masivo  tc \ninner join ( \n  select    count(1) total\n          , tdocumentos_id, documento\n          ,'Persona dupli"
+"cada en el archivo (documento, tipo de documento)' mensaje\n          , 9 procesado\n  from tst_carguemasivo\n  group by"
+" tdocumentos_id, documento\n  having count(1) > 1 \n) cond   on cond.tdocumentos_id = tc.tdocumentos_id \n        and co"
+"nd.documento = tc.documento";
		    

		    globalMap.put("tOracleInput_17_QUERY",dbquery_tOracleInput_17);

		    java.sql.ResultSet rs_tOracleInput_17 = null;

		    try {
		    	rs_tOracleInput_17 = stmt_tOracleInput_17.executeQuery(dbquery_tOracleInput_17);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_17 = rs_tOracleInput_17.getMetaData();
		    	int colQtyInRs_tOracleInput_17 = rsmd_tOracleInput_17.getColumnCount();

		    String tmpContent_tOracleInput_17 = null;
		    
		    
		    while (rs_tOracleInput_17.next()) {
		        nb_line_tOracleInput_17++;
		        
							if(colQtyInRs_tOracleInput_17 < 1) {
								row70.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(1) != null) {
						row70.TDOCUMENTOS_ID = rs_tOracleInput_17.getInt(1);
					} else {
				
						row70.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_17 < 2) {
								row70.DOCUMENTO = null;
							} else {
	                         		
        	row70.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_17 < 3) {
								row70.MENSAJE = null;
							} else {
	                         		
        	row70.MENSAJE = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_17 < 4) {
								row70.PROCESADO = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(4) != null) {
						row70.PROCESADO = rs_tOracleInput_17.getInt(4);
					} else {
				
						row70.PROCESADO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_17 begin ] stop
 */
	
	/**
	 * [tOracleInput_17 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 


	tos_count_tOracleInput_17++;

/**
 * [tOracleInput_17 main ] stop
 */
	
	/**
	 * [tOracleInput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_23 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_23";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row70"
						
						);
					}
					

    //Code generate according to input schema and output schema
row71.TDOCUMENTOS_ID = row70.TDOCUMENTOS_ID;
row71.DOCUMENTO = row70.DOCUMENTO;
row71.MENSAJE = row70.MENSAJE;

    nb_line_tJavaRow_23++;   

 


	tos_count_tJavaRow_23++;

/**
 * [tJavaRow_23 main ] stop
 */
	
	/**
	 * [tJavaRow_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_23";
	
	

 



/**
 * [tJavaRow_23 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_21 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_21";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row71"
						
						);
					}
					



            row72 = null;
        whetherReject_tOracleOutput_21 = false;
                        if(row71.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_21.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_21.setInt(1, row71.TDOCUMENTOS_ID);
}

                        if(row71.DOCUMENTO == null) {
pstmt_tOracleOutput_21.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_21.setString(2, row71.DOCUMENTO);
}

                        if(row71.MENSAJE == null) {
pstmt_tOracleOutput_21.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_21.setString(3, row71.MENSAJE);
}

                try {
                    nb_line_tOracleOutput_21++;
                    int processedCount_tOracleOutput_21 = pstmt_tOracleOutput_21.executeUpdate();
                    insertedCount_tOracleOutput_21 += processedCount_tOracleOutput_21;
                    rowsToCommitCount_tOracleOutput_21 += processedCount_tOracleOutput_21;
                } catch(java.lang.Exception e_tOracleOutput_21) {
globalMap.put("tOracleOutput_21_ERROR_MESSAGE",e_tOracleOutput_21.getMessage());
                    whetherReject_tOracleOutput_21 = true;
                            System.err.print(e_tOracleOutput_21.getMessage());
                }
            if(!whetherReject_tOracleOutput_21) {
                            row72 = new row72Struct();
                                row72.TDOCUMENTOS_ID = row71.TDOCUMENTOS_ID;
                                row72.DOCUMENTO = row71.DOCUMENTO;
                                row72.MENSAJE = row71.MENSAJE;
            }

 


	tos_count_tOracleOutput_21++;

/**
 * [tOracleOutput_21 main ] stop
 */
	
	/**
	 * [tOracleOutput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_21";
	
	

 



/**
 * [tOracleOutput_21 process_data_begin ] stop
 */
// Start of branch "row72"
if(row72 != null) { 



	
	/**
	 * [tJavaRow_26 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_26";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row72"
						
						);
					}
					

    //Code generate according to input schema and output schema
row73.TDOCUMENTOS_ID = row72.TDOCUMENTOS_ID;
row73.DOCUMENTO = row72.DOCUMENTO;
row73.PROCESADO = 9;

    nb_line_tJavaRow_26++;   

 


	tos_count_tJavaRow_26++;

/**
 * [tJavaRow_26 main ] stop
 */
	
	/**
	 * [tJavaRow_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_26";
	
	

 



/**
 * [tJavaRow_26 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_22 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_22";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row73"
						
						);
					}
					



        whetherReject_tOracleOutput_22 = false;
                    if(row73.PROCESADO == null) {
pstmt_tOracleOutput_22.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_22.setInt(1, row73.PROCESADO);
}


                    if(row73.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_22.setNull(2 + count_tOracleOutput_22, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_22.setInt(2 + count_tOracleOutput_22, row73.TDOCUMENTOS_ID);
}


                    if(row73.DOCUMENTO == null) {
pstmt_tOracleOutput_22.setNull(3 + count_tOracleOutput_22, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_22.setString(3 + count_tOracleOutput_22, row73.DOCUMENTO);
}

                try {
                    nb_line_tOracleOutput_22++;
                    int processedCount_tOracleOutput_22 = pstmt_tOracleOutput_22.executeUpdate();
                    updatedCount_tOracleOutput_22 += processedCount_tOracleOutput_22;
                    rowsToCommitCount_tOracleOutput_22 += processedCount_tOracleOutput_22;
                } catch(java.lang.Exception e_tOracleOutput_22) {
globalMap.put("tOracleOutput_22_ERROR_MESSAGE",e_tOracleOutput_22.getMessage());
                    whetherReject_tOracleOutput_22 = true;
                            System.err.print(e_tOracleOutput_22.getMessage());
                }

 


	tos_count_tOracleOutput_22++;

/**
 * [tOracleOutput_22 main ] stop
 */
	
	/**
	 * [tOracleOutput_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_22";
	
	

 



/**
 * [tOracleOutput_22 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_22";
	
	

 



/**
 * [tOracleOutput_22 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_26";
	
	

 



/**
 * [tJavaRow_26 process_data_end ] stop
 */

} // End of branch "row72"




	
	/**
	 * [tOracleOutput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_21";
	
	

 



/**
 * [tOracleOutput_21 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_23";
	
	

 



/**
 * [tJavaRow_23 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_17 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

}
}finally{
	if (rs_tOracleInput_17 != null) {
		rs_tOracleInput_17.close();
	}
	if (stmt_tOracleInput_17 != null) {
		stmt_tOracleInput_17.close();
	}
}

globalMap.put("tOracleInput_17_NB_LINE",nb_line_tOracleInput_17);
 

ok_Hash.put("tOracleInput_17", true);
end_Hash.put("tOracleInput_17", System.currentTimeMillis());




/**
 * [tOracleInput_17 end ] stop
 */

	
	/**
	 * [tJavaRow_23 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_23";
	
	

globalMap.put("tJavaRow_23_NB_LINE",nb_line_tJavaRow_23);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row70");
			  	}
			  	
 

ok_Hash.put("tJavaRow_23", true);
end_Hash.put("tJavaRow_23", System.currentTimeMillis());




/**
 * [tJavaRow_23 end ] stop
 */

	
	/**
	 * [tOracleOutput_21 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_21";
	
	
	



	
        if(pstmt_tOracleOutput_21 != null) {
			
				pstmt_tOracleOutput_21.close();
				resourceMap.remove("pstmt_tOracleOutput_21");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_21", true);

	
	nb_line_deleted_tOracleOutput_21=nb_line_deleted_tOracleOutput_21+ deletedCount_tOracleOutput_21;
	nb_line_update_tOracleOutput_21=nb_line_update_tOracleOutput_21 + updatedCount_tOracleOutput_21;
	nb_line_inserted_tOracleOutput_21=nb_line_inserted_tOracleOutput_21 + insertedCount_tOracleOutput_21;
	nb_line_rejected_tOracleOutput_21=nb_line_rejected_tOracleOutput_21 + rejectedCount_tOracleOutput_21;
	
        globalMap.put("tOracleOutput_21_NB_LINE",nb_line_tOracleOutput_21);
        globalMap.put("tOracleOutput_21_NB_LINE_UPDATED",nb_line_update_tOracleOutput_21);
        globalMap.put("tOracleOutput_21_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_21);
        globalMap.put("tOracleOutput_21_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_21);
        globalMap.put("tOracleOutput_21_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_21);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row71");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_21", true);
end_Hash.put("tOracleOutput_21", System.currentTimeMillis());




/**
 * [tOracleOutput_21 end ] stop
 */

	
	/**
	 * [tJavaRow_26 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_26";
	
	

globalMap.put("tJavaRow_26_NB_LINE",nb_line_tJavaRow_26);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row72");
			  	}
			  	
 

ok_Hash.put("tJavaRow_26", true);
end_Hash.put("tJavaRow_26", System.currentTimeMillis());




/**
 * [tJavaRow_26 end ] stop
 */

	
	/**
	 * [tOracleOutput_22 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_22";
	
	
	



	
        if(pstmt_tOracleOutput_22 != null) {
			
				pstmt_tOracleOutput_22.close();
				resourceMap.remove("pstmt_tOracleOutput_22");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_22", true);

	
	nb_line_deleted_tOracleOutput_22=nb_line_deleted_tOracleOutput_22+ deletedCount_tOracleOutput_22;
	nb_line_update_tOracleOutput_22=nb_line_update_tOracleOutput_22 + updatedCount_tOracleOutput_22;
	nb_line_inserted_tOracleOutput_22=nb_line_inserted_tOracleOutput_22 + insertedCount_tOracleOutput_22;
	nb_line_rejected_tOracleOutput_22=nb_line_rejected_tOracleOutput_22 + rejectedCount_tOracleOutput_22;
	
        globalMap.put("tOracleOutput_22_NB_LINE",nb_line_tOracleOutput_22);
        globalMap.put("tOracleOutput_22_NB_LINE_UPDATED",nb_line_update_tOracleOutput_22);
        globalMap.put("tOracleOutput_22_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_22);
        globalMap.put("tOracleOutput_22_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_22);
        globalMap.put("tOracleOutput_22_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_22);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row73");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_22", true);
end_Hash.put("tOracleOutput_22", System.currentTimeMillis());




/**
 * [tOracleOutput_22 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_17:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tOracleInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_17 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 finally ] stop
 */

	
	/**
	 * [tJavaRow_23 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_23";
	
	

 



/**
 * [tJavaRow_23 finally ] stop
 */

	
	/**
	 * [tOracleOutput_21 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_21";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_21") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_21 = null;
                if ((pstmtToClose_tOracleOutput_21 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_21")) != null) {
                    pstmtToClose_tOracleOutput_21.close();
                }
    }
 



/**
 * [tOracleOutput_21 finally ] stop
 */

	
	/**
	 * [tJavaRow_26 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_26";
	
	

 



/**
 * [tJavaRow_26 finally ] stop
 */

	
	/**
	 * [tOracleOutput_22 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_22";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_22") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_22 = null;
                if ((pstmtToClose_tOracleOutput_22 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_22")) != null) {
                    pstmtToClose_tOracleOutput_22.close();
                }
    }
 



/**
 * [tOracleOutput_22 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_17_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public int PERSONAS_ID;

				public int getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public int PROCESADO;

				public int getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return false;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return "";
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
			        this.PROCESADO = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
			        this.PROCESADO = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public int PERSONAS_ID;

				public int getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return false;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public int PERSONAS_ID;

				public int getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public int PROCESADO;

				public int getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return false;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return "";
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
			        this.PROCESADO = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
			        this.PROCESADO = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public int PERSONAS_ID;

				public int getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return false;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public int PERSONAS_ID;

				public int getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public int PROCESADO;

				public int getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return false;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return "";
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
			        this.PROCESADO = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
			        this.PROCESADO = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public int PERSONAS_ID;

				public int getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return false;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public int PERSONAS_ID;

				public int getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public int PROCESADO;

				public int getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return false;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return "";
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
			        this.PROCESADO = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
			        this.PROCESADO = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public int PERSONAS_ID;

				public int getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return false;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public int PERSONAS_ID;

				public int getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public int PROCESADO;

				public int getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return false;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return "";
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
			        this.PROCESADO = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
			        this.PROCESADO = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public int PERSONAS_ID;

				public int getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return false;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class TDocDocPNomPApellidoStruct implements routines.system.IPersistableRow<TDocDocPNomPApellidoStruct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public int PERSONAS_ID;

				public int getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public int PROCESADO;

				public int getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return false;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return "";
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return false;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
			        this.PROCESADO = dis.readInt();
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
			        this.PROCESADO = dis.readInt();
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESADO);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESADO);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(TDocDocPNomPApellidoStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class TDocDocumentoStruct implements routines.system.IPersistableRow<TDocDocumentoStruct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 400;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 400;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 400;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 400;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public int PERSONAS_ID;

				public int getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return false;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				
			    public int PROCESADO;

				public int getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return false;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return "";
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				
			    public java.util.Date FECHA_NACIMIENTO;

				public java.util.Date getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 0;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
					this.MENSAJE = readString(dis);
					
			        this.PROCESADO = dis.readInt();
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
					this.MENSAJE = readString(dis);
					
			        this.PROCESADO = dis.readInt();
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
					// int
				
		            	dos.writeInt(this.PROCESADO);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
					// int
				
		            	dos.writeInt(this.PROCESADO);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",MENSAJE="+MENSAJE);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
		sb.append(",FECHA_NACIMIENTO="+String.valueOf(FECHA_NACIMIENTO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(TDocDocumentoStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class NomApelFnacimientoStruct implements routines.system.IPersistableRow<NomApelFnacimientoStruct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 400;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 400;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 400;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 400;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public java.util.Date FECHA_NACIMIENTO;

				public java.util.Date getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 0;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String NOMBRES;

				public String getNOMBRES () {
					return this.NOMBRES;
				}

				public Boolean NOMBRESIsNullable(){
				    return true;
				}
				public Boolean NOMBRESIsKey(){
				    return false;
				}
				public Integer NOMBRESLength(){
				    return 1600;
				}
				public Integer NOMBRESPrecision(){
				    return 0;
				}
				public String NOMBRESDefault(){
				
					return null;
				
				}
				public String NOMBRESComment(){
				
				    return "";
				
				}
				public String NOMBRESPattern(){
				
					return "";
				
				}
				public String NOMBRESOriginalDbColumnName(){
				
					return "NOMBRES";
				
				}

				
			    public int PERSONAS_ID;

				public int getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public int PROCESADO;

				public int getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return false;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return "";
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return false;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
					this.NOMBRES = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
			        this.PROCESADO = dis.readInt();
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
					this.NOMBRES = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
			        this.PROCESADO = dis.readInt();
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.NOMBRES,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESADO);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.NOMBRES,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESADO);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",FECHA_NACIMIENTO="+String.valueOf(FECHA_NACIMIENTO));
		sb.append(",NOMBRES="+NOMBRES);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(NomApelFnacimientoStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class PNomPApeDocumentoStruct implements routines.system.IPersistableRow<PNomPApeDocumentoStruct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 400;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 400;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 400;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 400;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public java.util.Date FECHA_NACIMIENTO;

				public java.util.Date getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 0;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public int PERSONAS_ID;

				public int getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public int PROCESADO;

				public int getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return false;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return "";
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return false;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
			        this.PROCESADO = dis.readInt();
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
			        this.PROCESADO = dis.readInt();
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESADO);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESADO);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",FECHA_NACIMIENTO="+String.valueOf(FECHA_NACIMIENTO));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(PNomPApeDocumentoStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class NomApellidosStruct implements routines.system.IPersistableRow<NomApellidosStruct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 400;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 400;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 400;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 400;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public java.util.Date FECHA_NACIMIENTO;

				public java.util.Date getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 0;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String NOMBRES;

				public String getNOMBRES () {
					return this.NOMBRES;
				}

				public Boolean NOMBRESIsNullable(){
				    return true;
				}
				public Boolean NOMBRESIsKey(){
				    return false;
				}
				public Integer NOMBRESLength(){
				    return 1600;
				}
				public Integer NOMBRESPrecision(){
				    return 0;
				}
				public String NOMBRESDefault(){
				
					return null;
				
				}
				public String NOMBRESComment(){
				
				    return "";
				
				}
				public String NOMBRESPattern(){
				
					return "";
				
				}
				public String NOMBRESOriginalDbColumnName(){
				
					return "NOMBRES";
				
				}

				
			    public int PERSONAS_ID;

				public int getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public int PROCESADO;

				public int getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return false;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return "";
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				
			    public String MENSAJE;

				public String getMENSAJE () {
					return this.MENSAJE;
				}

				public Boolean MENSAJEIsNullable(){
				    return false;
				}
				public Boolean MENSAJEIsKey(){
				    return false;
				}
				public Integer MENSAJELength(){
				    return null;
				}
				public Integer MENSAJEPrecision(){
				    return null;
				}
				public String MENSAJEDefault(){
				
					return null;
				
				}
				public String MENSAJEComment(){
				
				    return "";
				
				}
				public String MENSAJEPattern(){
				
					return "";
				
				}
				public String MENSAJEOriginalDbColumnName(){
				
					return "MENSAJE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
					this.NOMBRES = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
			        this.PROCESADO = dis.readInt();
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
					this.NOMBRES = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
			        this.PROCESADO = dis.readInt();
					
					this.MENSAJE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.NOMBRES,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESADO);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.NOMBRES,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// int
				
		            	dos.writeInt(this.PROCESADO);
					
					// String
				
						writeString(this.MENSAJE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",FECHA_NACIMIENTO="+String.valueOf(FECHA_NACIMIENTO));
		sb.append(",NOMBRES="+NOMBRES);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
		sb.append(",MENSAJE="+MENSAJE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(NomApellidosStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 400;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 400;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 400;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 400;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public java.util.Date FECHA_NACIMIENTO;

				public java.util.Date getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 0;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String NOMBRES;

				public String getNOMBRES () {
					return this.NOMBRES;
				}

				public Boolean NOMBRESIsNullable(){
				    return true;
				}
				public Boolean NOMBRESIsKey(){
				    return false;
				}
				public Integer NOMBRESLength(){
				    return 1600;
				}
				public Integer NOMBRESPrecision(){
				    return 0;
				}
				public String NOMBRESDefault(){
				
					return null;
				
				}
				public String NOMBRESComment(){
				
				    return "";
				
				}
				public String NOMBRESPattern(){
				
					return "";
				
				}
				public String NOMBRESOriginalDbColumnName(){
				
					return "NOMBRES";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
					this.NOMBRES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
					this.NOMBRES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.NOMBRES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.NOMBRES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",FECHA_NACIMIENTO="+String.valueOf(FECHA_NACIMIENTO));
		sb.append(",NOMBRES="+NOMBRES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_3Struct implements routines.system.IPersistableRow<after_tOracleInput_3Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 400;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 400;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 400;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 400;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public java.util.Date FECHA_NACIMIENTO;

				public java.util.Date getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 0;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String NOMBRES;

				public String getNOMBRES () {
					return this.NOMBRES;
				}

				public Boolean NOMBRESIsNullable(){
				    return true;
				}
				public Boolean NOMBRESIsKey(){
				    return false;
				}
				public Integer NOMBRESLength(){
				    return 1600;
				}
				public Integer NOMBRESPrecision(){
				    return 0;
				}
				public String NOMBRESDefault(){
				
					return null;
				
				}
				public String NOMBRESComment(){
				
				    return "";
				
				}
				public String NOMBRESPattern(){
				
					return "";
				
				}
				public String NOMBRESOriginalDbColumnName(){
				
					return "NOMBRES";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
					this.NOMBRES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
					this.NOMBRES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.NOMBRES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.NOMBRES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",FECHA_NACIMIENTO="+String.valueOf(FECHA_NACIMIENTO));
		sb.append(",NOMBRES="+NOMBRES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_5Process(globalMap);

		row7Struct row7 = new row7Struct();
TDocDocPNomPApellidoStruct TDocDocPNomPApellido = new TDocDocPNomPApellidoStruct();
row8Struct row8 = new row8Struct();
row10Struct row10 = new row10Struct();
TDocDocumentoStruct TDocDocumento = new TDocDocumentoStruct();
row29Struct row29 = new row29Struct();
row30Struct row30 = new row30Struct();
NomApelFnacimientoStruct NomApelFnacimiento = new NomApelFnacimientoStruct();
row13Struct row13 = new row13Struct();
row14Struct row14 = new row14Struct();
PNomPApeDocumentoStruct PNomPApeDocumento = new PNomPApeDocumentoStruct();
row11Struct row11 = new row11Struct();
row12Struct row12 = new row12Struct();
NomApellidosStruct NomApellidos = new NomApellidosStruct();
row15Struct row15 = new row15Struct();
row16Struct row16 = new row16Struct();







	
	/**
	 * [tOracleOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_9", false);
		start_Hash.put("tOracleOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tOracleOutput_9 = 0;
		






        int updateKeyCount_tOracleOutput_9 = 2;
        if(updateKeyCount_tOracleOutput_9 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_9 == 4 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_9 = 0;
    int nb_line_update_tOracleOutput_9 = 0;
    int nb_line_inserted_tOracleOutput_9 = 0;
    int nb_line_deleted_tOracleOutput_9 = 0;
    int nb_line_rejected_tOracleOutput_9 = 0;

    int tmp_batchUpdateCount_tOracleOutput_9 = 0;

    int deletedCount_tOracleOutput_9=0;
    int updatedCount_tOracleOutput_9=0;
    int insertedCount_tOracleOutput_9=0;
    int rowsToCommitCount_tOracleOutput_9=0;
    int rejectedCount_tOracleOutput_9=0;

    boolean whetherReject_tOracleOutput_9 = false;

    java.sql.Connection conn_tOracleOutput_9 = null;

    //optional table
    String dbschema_tOracleOutput_9 = null;
    String tableName_tOracleOutput_9 = null;
        dbschema_tOracleOutput_9 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_9 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_9=0;

        if(dbschema_tOracleOutput_9 == null || dbschema_tOracleOutput_9.trim().length() == 0) {
            tableName_tOracleOutput_9 = ("TST_CARGUEMASIVO");
        } else {
            tableName_tOracleOutput_9 = dbschema_tOracleOutput_9 + "." + ("TST_CARGUEMASIVO");
        }
                String update_tOracleOutput_9 = "UPDATE " + tableName_tOracleOutput_9 + " SET PERSONAS_ID = ?,PROCESADO = ? WHERE TDOCUMENTOS_ID = ? AND DOCUMENTO = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_9 = conn_tOracleOutput_9.prepareStatement(update_tOracleOutput_9);
                resourceMap.put("pstmt_tOracleOutput_9", pstmt_tOracleOutput_9);





 



/**
 * [tOracleOutput_9 begin ] stop
 */



	
	/**
	 * [tJavaRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_6", false);
		start_Hash.put("tJavaRow_6", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tJavaRow_6 = 0;
		

int nb_line_tJavaRow_6 = 0;

 



/**
 * [tJavaRow_6 begin ] stop
 */



	
	/**
	 * [tOracleOutput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_17", false);
		start_Hash.put("tOracleOutput_17", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_17";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"TDocDocPNomPApellido");
					}
				
		int tos_count_tOracleOutput_17 = 0;
		






    
    int nb_line_tOracleOutput_17 = 0;
    int nb_line_update_tOracleOutput_17 = 0;
    int nb_line_inserted_tOracleOutput_17 = 0;
    int nb_line_deleted_tOracleOutput_17 = 0;
    int nb_line_rejected_tOracleOutput_17 = 0;

    int tmp_batchUpdateCount_tOracleOutput_17 = 0;

    int deletedCount_tOracleOutput_17=0;
    int updatedCount_tOracleOutput_17=0;
    int insertedCount_tOracleOutput_17=0;
    int rowsToCommitCount_tOracleOutput_17=0;
    int rejectedCount_tOracleOutput_17=0;

    boolean whetherReject_tOracleOutput_17 = false;

    java.sql.Connection conn_tOracleOutput_17 = null;

    //optional table
    String dbschema_tOracleOutput_17 = null;
    String tableName_tOracleOutput_17 = null;
        dbschema_tOracleOutput_17 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_17 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_17=0;

        if(dbschema_tOracleOutput_17 == null || dbschema_tOracleOutput_17.trim().length() == 0) {
            tableName_tOracleOutput_17 = ("TST_ERRCMASIVO");
        } else {
            tableName_tOracleOutput_17 = dbschema_tOracleOutput_17 + "." + ("TST_ERRCMASIVO");
        }
                String insert_tOracleOutput_17 = "INSERT INTO " + tableName_tOracleOutput_17 + " (TDOCUMENTOS_ID,DOCUMENTO,PERSONAS_ID,MENSAJE) VALUES (?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_17 = conn_tOracleOutput_17.prepareStatement(insert_tOracleOutput_17);
                        resourceMap.put("pstmt_tOracleOutput_17", pstmt_tOracleOutput_17);





 



/**
 * [tOracleOutput_17 begin ] stop
 */






	
	/**
	 * [tOracleOutput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_19", false);
		start_Hash.put("tOracleOutput_19", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_19";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tOracleOutput_19 = 0;
		






        int updateKeyCount_tOracleOutput_19 = 2;
        if(updateKeyCount_tOracleOutput_19 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_19 == 4 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_19 = 0;
    int nb_line_update_tOracleOutput_19 = 0;
    int nb_line_inserted_tOracleOutput_19 = 0;
    int nb_line_deleted_tOracleOutput_19 = 0;
    int nb_line_rejected_tOracleOutput_19 = 0;

    int tmp_batchUpdateCount_tOracleOutput_19 = 0;

    int deletedCount_tOracleOutput_19=0;
    int updatedCount_tOracleOutput_19=0;
    int insertedCount_tOracleOutput_19=0;
    int rowsToCommitCount_tOracleOutput_19=0;
    int rejectedCount_tOracleOutput_19=0;

    boolean whetherReject_tOracleOutput_19 = false;

    java.sql.Connection conn_tOracleOutput_19 = null;

    //optional table
    String dbschema_tOracleOutput_19 = null;
    String tableName_tOracleOutput_19 = null;
        dbschema_tOracleOutput_19 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_19 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_19=0;

        if(dbschema_tOracleOutput_19 == null || dbschema_tOracleOutput_19.trim().length() == 0) {
            tableName_tOracleOutput_19 = ("TST_CARGUEMASIVO");
        } else {
            tableName_tOracleOutput_19 = dbschema_tOracleOutput_19 + "." + ("TST_CARGUEMASIVO");
        }
                String update_tOracleOutput_19 = "UPDATE " + tableName_tOracleOutput_19 + " SET PERSONAS_ID = ?,PROCESADO = ? WHERE TDOCUMENTOS_ID = ? AND DOCUMENTO = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_19 = conn_tOracleOutput_19.prepareStatement(update_tOracleOutput_19);
                resourceMap.put("pstmt_tOracleOutput_19", pstmt_tOracleOutput_19);





 



/**
 * [tOracleOutput_19 begin ] stop
 */



	
	/**
	 * [tJavaRow_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_14", false);
		start_Hash.put("tJavaRow_14", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row29");
					}
				
		int tos_count_tJavaRow_14 = 0;
		

int nb_line_tJavaRow_14 = 0;

 



/**
 * [tJavaRow_14 begin ] stop
 */



	
	/**
	 * [tOracleOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_8", false);
		start_Hash.put("tOracleOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"TDocDocumento");
					}
				
		int tos_count_tOracleOutput_8 = 0;
		






    
    int nb_line_tOracleOutput_8 = 0;
    int nb_line_update_tOracleOutput_8 = 0;
    int nb_line_inserted_tOracleOutput_8 = 0;
    int nb_line_deleted_tOracleOutput_8 = 0;
    int nb_line_rejected_tOracleOutput_8 = 0;

    int tmp_batchUpdateCount_tOracleOutput_8 = 0;

    int deletedCount_tOracleOutput_8=0;
    int updatedCount_tOracleOutput_8=0;
    int insertedCount_tOracleOutput_8=0;
    int rowsToCommitCount_tOracleOutput_8=0;
    int rejectedCount_tOracleOutput_8=0;

    boolean whetherReject_tOracleOutput_8 = false;

    java.sql.Connection conn_tOracleOutput_8 = null;

    //optional table
    String dbschema_tOracleOutput_8 = null;
    String tableName_tOracleOutput_8 = null;
        dbschema_tOracleOutput_8 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_8 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_8=0;

        if(dbschema_tOracleOutput_8 == null || dbschema_tOracleOutput_8.trim().length() == 0) {
            tableName_tOracleOutput_8 = ("TST_ERRCMASIVO");
        } else {
            tableName_tOracleOutput_8 = dbschema_tOracleOutput_8 + "." + ("TST_ERRCMASIVO");
        }
                String insert_tOracleOutput_8 = "INSERT INTO " + tableName_tOracleOutput_8 + " (TDOCUMENTOS_ID,DOCUMENTO,PERSONAS_ID,MENSAJE) VALUES (?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_8 = conn_tOracleOutput_8.prepareStatement(insert_tOracleOutput_8);
                        resourceMap.put("pstmt_tOracleOutput_8", pstmt_tOracleOutput_8);





 



/**
 * [tOracleOutput_8 begin ] stop
 */






	
	/**
	 * [tOracleOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_10", false);
		start_Hash.put("tOracleOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tOracleOutput_10 = 0;
		






        int updateKeyCount_tOracleOutput_10 = 2;
        if(updateKeyCount_tOracleOutput_10 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_10 == 4 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_10 = 0;
    int nb_line_update_tOracleOutput_10 = 0;
    int nb_line_inserted_tOracleOutput_10 = 0;
    int nb_line_deleted_tOracleOutput_10 = 0;
    int nb_line_rejected_tOracleOutput_10 = 0;

    int tmp_batchUpdateCount_tOracleOutput_10 = 0;

    int deletedCount_tOracleOutput_10=0;
    int updatedCount_tOracleOutput_10=0;
    int insertedCount_tOracleOutput_10=0;
    int rowsToCommitCount_tOracleOutput_10=0;
    int rejectedCount_tOracleOutput_10=0;

    boolean whetherReject_tOracleOutput_10 = false;

    java.sql.Connection conn_tOracleOutput_10 = null;

    //optional table
    String dbschema_tOracleOutput_10 = null;
    String tableName_tOracleOutput_10 = null;
        dbschema_tOracleOutput_10 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_10 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_10=0;

        if(dbschema_tOracleOutput_10 == null || dbschema_tOracleOutput_10.trim().length() == 0) {
            tableName_tOracleOutput_10 = ("TST_CARGUEMASIVO");
        } else {
            tableName_tOracleOutput_10 = dbschema_tOracleOutput_10 + "." + ("TST_CARGUEMASIVO");
        }
                String update_tOracleOutput_10 = "UPDATE " + tableName_tOracleOutput_10 + " SET PERSONAS_ID = ?,PROCESADO = ? WHERE TDOCUMENTOS_ID = ? AND DOCUMENTO = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_10 = conn_tOracleOutput_10.prepareStatement(update_tOracleOutput_10);
                resourceMap.put("pstmt_tOracleOutput_10", pstmt_tOracleOutput_10);





 



/**
 * [tOracleOutput_10 begin ] stop
 */



	
	/**
	 * [tJavaRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_8", false);
		start_Hash.put("tJavaRow_8", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tJavaRow_8 = 0;
		

int nb_line_tJavaRow_8 = 0;

 



/**
 * [tJavaRow_8 begin ] stop
 */



	
	/**
	 * [tOracleOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_7", false);
		start_Hash.put("tOracleOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"NomApelFnacimiento");
					}
				
		int tos_count_tOracleOutput_7 = 0;
		






    
    int nb_line_tOracleOutput_7 = 0;
    int nb_line_update_tOracleOutput_7 = 0;
    int nb_line_inserted_tOracleOutput_7 = 0;
    int nb_line_deleted_tOracleOutput_7 = 0;
    int nb_line_rejected_tOracleOutput_7 = 0;

    int tmp_batchUpdateCount_tOracleOutput_7 = 0;

    int deletedCount_tOracleOutput_7=0;
    int updatedCount_tOracleOutput_7=0;
    int insertedCount_tOracleOutput_7=0;
    int rowsToCommitCount_tOracleOutput_7=0;
    int rejectedCount_tOracleOutput_7=0;

    boolean whetherReject_tOracleOutput_7 = false;

    java.sql.Connection conn_tOracleOutput_7 = null;

    //optional table
    String dbschema_tOracleOutput_7 = null;
    String tableName_tOracleOutput_7 = null;
        dbschema_tOracleOutput_7 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_7 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_7=0;

        if(dbschema_tOracleOutput_7 == null || dbschema_tOracleOutput_7.trim().length() == 0) {
            tableName_tOracleOutput_7 = ("TST_ERRCMASIVO");
        } else {
            tableName_tOracleOutput_7 = dbschema_tOracleOutput_7 + "." + ("TST_ERRCMASIVO");
        }
                String insert_tOracleOutput_7 = "INSERT INTO " + tableName_tOracleOutput_7 + " (TDOCUMENTOS_ID,DOCUMENTO,PERSONAS_ID,MENSAJE) VALUES (?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_7 = conn_tOracleOutput_7.prepareStatement(insert_tOracleOutput_7);
                        resourceMap.put("pstmt_tOracleOutput_7", pstmt_tOracleOutput_7);





 



/**
 * [tOracleOutput_7 begin ] stop
 */






	
	/**
	 * [tOracleOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_6", false);
		start_Hash.put("tOracleOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tOracleOutput_6 = 0;
		






        int updateKeyCount_tOracleOutput_6 = 2;
        if(updateKeyCount_tOracleOutput_6 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_6 == 4 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_6 = 0;
    int nb_line_update_tOracleOutput_6 = 0;
    int nb_line_inserted_tOracleOutput_6 = 0;
    int nb_line_deleted_tOracleOutput_6 = 0;
    int nb_line_rejected_tOracleOutput_6 = 0;

    int tmp_batchUpdateCount_tOracleOutput_6 = 0;

    int deletedCount_tOracleOutput_6=0;
    int updatedCount_tOracleOutput_6=0;
    int insertedCount_tOracleOutput_6=0;
    int rowsToCommitCount_tOracleOutput_6=0;
    int rejectedCount_tOracleOutput_6=0;

    boolean whetherReject_tOracleOutput_6 = false;

    java.sql.Connection conn_tOracleOutput_6 = null;

    //optional table
    String dbschema_tOracleOutput_6 = null;
    String tableName_tOracleOutput_6 = null;
        dbschema_tOracleOutput_6 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_6 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_6=0;

        if(dbschema_tOracleOutput_6 == null || dbschema_tOracleOutput_6.trim().length() == 0) {
            tableName_tOracleOutput_6 = ("TST_CARGUEMASIVO");
        } else {
            tableName_tOracleOutput_6 = dbschema_tOracleOutput_6 + "." + ("TST_CARGUEMASIVO");
        }
                String update_tOracleOutput_6 = "UPDATE " + tableName_tOracleOutput_6 + " SET PERSONAS_ID = ?,PROCESADO = ? WHERE TDOCUMENTOS_ID = ? AND DOCUMENTO = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_6 = conn_tOracleOutput_6.prepareStatement(update_tOracleOutput_6);
                resourceMap.put("pstmt_tOracleOutput_6", pstmt_tOracleOutput_6);





 



/**
 * [tOracleOutput_6 begin ] stop
 */



	
	/**
	 * [tJavaRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_7", false);
		start_Hash.put("tJavaRow_7", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tJavaRow_7 = 0;
		

int nb_line_tJavaRow_7 = 0;

 



/**
 * [tJavaRow_7 begin ] stop
 */



	
	/**
	 * [tOracleOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_5", false);
		start_Hash.put("tOracleOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"PNomPApeDocumento");
					}
				
		int tos_count_tOracleOutput_5 = 0;
		






    
    int nb_line_tOracleOutput_5 = 0;
    int nb_line_update_tOracleOutput_5 = 0;
    int nb_line_inserted_tOracleOutput_5 = 0;
    int nb_line_deleted_tOracleOutput_5 = 0;
    int nb_line_rejected_tOracleOutput_5 = 0;

    int tmp_batchUpdateCount_tOracleOutput_5 = 0;

    int deletedCount_tOracleOutput_5=0;
    int updatedCount_tOracleOutput_5=0;
    int insertedCount_tOracleOutput_5=0;
    int rowsToCommitCount_tOracleOutput_5=0;
    int rejectedCount_tOracleOutput_5=0;

    boolean whetherReject_tOracleOutput_5 = false;

    java.sql.Connection conn_tOracleOutput_5 = null;

    //optional table
    String dbschema_tOracleOutput_5 = null;
    String tableName_tOracleOutput_5 = null;
        dbschema_tOracleOutput_5 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_5=0;

        if(dbschema_tOracleOutput_5 == null || dbschema_tOracleOutput_5.trim().length() == 0) {
            tableName_tOracleOutput_5 = ("TST_ERRCMASIVO");
        } else {
            tableName_tOracleOutput_5 = dbschema_tOracleOutput_5 + "." + ("TST_ERRCMASIVO");
        }
                String insert_tOracleOutput_5 = "INSERT INTO " + tableName_tOracleOutput_5 + " (TDOCUMENTOS_ID,DOCUMENTO,PERSONAS_ID,MENSAJE) VALUES (?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_5 = conn_tOracleOutput_5.prepareStatement(insert_tOracleOutput_5);
                        resourceMap.put("pstmt_tOracleOutput_5", pstmt_tOracleOutput_5);





 



/**
 * [tOracleOutput_5 begin ] stop
 */






	
	/**
	 * [tOracleOutput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_12", false);
		start_Hash.put("tOracleOutput_12", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tOracleOutput_12 = 0;
		






        int updateKeyCount_tOracleOutput_12 = 2;
        if(updateKeyCount_tOracleOutput_12 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_12 == 4 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_12 = 0;
    int nb_line_update_tOracleOutput_12 = 0;
    int nb_line_inserted_tOracleOutput_12 = 0;
    int nb_line_deleted_tOracleOutput_12 = 0;
    int nb_line_rejected_tOracleOutput_12 = 0;

    int tmp_batchUpdateCount_tOracleOutput_12 = 0;

    int deletedCount_tOracleOutput_12=0;
    int updatedCount_tOracleOutput_12=0;
    int insertedCount_tOracleOutput_12=0;
    int rowsToCommitCount_tOracleOutput_12=0;
    int rejectedCount_tOracleOutput_12=0;

    boolean whetherReject_tOracleOutput_12 = false;

    java.sql.Connection conn_tOracleOutput_12 = null;

    //optional table
    String dbschema_tOracleOutput_12 = null;
    String tableName_tOracleOutput_12 = null;
        dbschema_tOracleOutput_12 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_12 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_12=0;

        if(dbschema_tOracleOutput_12 == null || dbschema_tOracleOutput_12.trim().length() == 0) {
            tableName_tOracleOutput_12 = ("TST_CARGUEMASIVO");
        } else {
            tableName_tOracleOutput_12 = dbschema_tOracleOutput_12 + "." + ("TST_CARGUEMASIVO");
        }
                String update_tOracleOutput_12 = "UPDATE " + tableName_tOracleOutput_12 + " SET PERSONAS_ID = ?,PROCESADO = ? WHERE TDOCUMENTOS_ID = ? AND DOCUMENTO = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_12 = conn_tOracleOutput_12.prepareStatement(update_tOracleOutput_12);
                resourceMap.put("pstmt_tOracleOutput_12", pstmt_tOracleOutput_12);





 



/**
 * [tOracleOutput_12 begin ] stop
 */



	
	/**
	 * [tJavaRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_9", false);
		start_Hash.put("tJavaRow_9", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tJavaRow_9 = 0;
		

int nb_line_tJavaRow_9 = 0;

 



/**
 * [tJavaRow_9 begin ] stop
 */



	
	/**
	 * [tOracleOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_11", false);
		start_Hash.put("tOracleOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"NomApellidos");
					}
				
		int tos_count_tOracleOutput_11 = 0;
		






    
    int nb_line_tOracleOutput_11 = 0;
    int nb_line_update_tOracleOutput_11 = 0;
    int nb_line_inserted_tOracleOutput_11 = 0;
    int nb_line_deleted_tOracleOutput_11 = 0;
    int nb_line_rejected_tOracleOutput_11 = 0;

    int tmp_batchUpdateCount_tOracleOutput_11 = 0;

    int deletedCount_tOracleOutput_11=0;
    int updatedCount_tOracleOutput_11=0;
    int insertedCount_tOracleOutput_11=0;
    int rowsToCommitCount_tOracleOutput_11=0;
    int rejectedCount_tOracleOutput_11=0;

    boolean whetherReject_tOracleOutput_11 = false;

    java.sql.Connection conn_tOracleOutput_11 = null;

    //optional table
    String dbschema_tOracleOutput_11 = null;
    String tableName_tOracleOutput_11 = null;
        dbschema_tOracleOutput_11 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_11 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_11=0;

        if(dbschema_tOracleOutput_11 == null || dbschema_tOracleOutput_11.trim().length() == 0) {
            tableName_tOracleOutput_11 = ("TST_ERRCMASIVO");
        } else {
            tableName_tOracleOutput_11 = dbschema_tOracleOutput_11 + "." + ("TST_ERRCMASIVO");
        }
                String insert_tOracleOutput_11 = "INSERT INTO " + tableName_tOracleOutput_11 + " (TDOCUMENTOS_ID,DOCUMENTO,PERSONAS_ID,MENSAJE) VALUES (?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_11 = conn_tOracleOutput_11.prepareStatement(insert_tOracleOutput_11);
                        resourceMap.put("pstmt_tOracleOutput_11", pstmt_tOracleOutput_11);





 



/**
 * [tOracleOutput_11 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
					globalMap.get( "tHash_Lookup_row9" ))
					;					
					
	
		tHash_Lookup_row9.initGet();
	

row9Struct row9HashKey = new row9Struct();
row9Struct row9Default = new row9Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
	int cmTdocumento;
	int gpTdocumento;
	String cmDocumento;
	String gpDocumento;
	java.util.Date cmFnacimiento;
	java.util.Date gpFnacimiento;
	String cmPNombre;
	String gpPNombre;
	String cmPApellido;
	String gpPApellido;
	String cmNombres;
	String gpNombres;
	int procesado;
	String mensaje;
	String var1;
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
TDocDocPNomPApellidoStruct TDocDocPNomPApellido_tmp = new TDocDocPNomPApellidoStruct();
TDocDocumentoStruct TDocDocumento_tmp = new TDocDocumentoStruct();
NomApelFnacimientoStruct NomApelFnacimiento_tmp = new NomApelFnacimientoStruct();
PNomPApeDocumentoStruct PNomPApeDocumento_tmp = new PNomPApeDocumentoStruct();
NomApellidosStruct NomApellidos_tmp = new NomApellidosStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				conn_tOracleInput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_3 = false;
				boolean isConnectionWrapped_tOracleInput_3 = !(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_3 = null;
                if (isConnectionWrapped_tOracleInput_3) {
					unwrappedOraConn_tOracleInput_3 = conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_3 != null) {
                        isTimeZoneNull_tOracleInput_3 = (unwrappedOraConn_tOracleInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_3 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_3) {
					java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_3.next()) {
						sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_3 && unwrappedOraConn_tOracleInput_3 != null) {
                        unwrappedOraConn_tOracleInput_3.setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement();

		    String dbquery_tOracleInput_3 = "select \ntdocumentos_id, \ntrim(documento) documento, \ntrim(primer_nombre) primer_nombre,\n trim(segundo_nombre) segun"
+"do_nombre,\ntrim(primer_apellido) primer_apellido, \ntrim(segundo_apellido) segundo_apellido, \ntrunc(fecha_nacimiento) "
+"fecha_nacimiento,\ntrim(primer_nombre)||trim(segundo_nombre)||trim(primer_apellido)||trim(segundo_apellido) nombres \nfr"
+"om tst_carguemasivo\nwhere procesado is null";
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row7.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(1) != null) {
						row7.TDOCUMENTOS_ID = rs_tOracleInput_3.getInt(1);
					} else {
				
						row7.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 2) {
								row7.DOCUMENTO = null;
							} else {
	                         		
        	row7.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 2, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 3) {
								row7.PRIMER_NOMBRE = null;
							} else {
	                         		
        	row7.PRIMER_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 3, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 4) {
								row7.SEGUNDO_NOMBRE = null;
							} else {
	                         		
        	row7.SEGUNDO_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 4, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 5) {
								row7.PRIMER_APELLIDO = null;
							} else {
	                         		
        	row7.PRIMER_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 5, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 6) {
								row7.SEGUNDO_APELLIDO = null;
							} else {
	                         		
        	row7.SEGUNDO_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 6, true);
		                    }
							if(colQtyInRs_tOracleInput_3 < 7) {
								row7.FECHA_NACIMIENTO = null;
							} else {
										
			row7.FECHA_NACIMIENTO = routines.system.JDBCUtil.getDate(rs_tOracleInput_3, 7);
		                    }
							if(colQtyInRs_tOracleInput_3 < 8) {
								row7.NOMBRES = null;
							} else {
	                         		
        	row7.NOMBRES = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 8, false);
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
						row9Struct row9 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row9.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow9 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow9 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row9 != null && tHash_Lookup_row9.hasNext()) || forceLooprow9) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row9'
									
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								
								if(!forceLooprow9) { // G 46
								
							
								 
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow9 = false;
									 	
							
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;
Var.cmTdocumento = row7.TDOCUMENTOS_ID ;
Var.gpTdocumento = row9.TDOCUMENTOS_ID ;
Var.cmDocumento = row7.DOCUMENTO ;
Var.gpDocumento = row9.DOCUMENTO ;
Var.cmFnacimiento = row7.FECHA_NACIMIENTO ;
Var.gpFnacimiento = row9.FECHA_NACIMIENTO ;
Var.cmPNombre = row7.PRIMER_NOMBRE ;
Var.gpPNombre = row9.PRIMER_NOMBRE ;
Var.cmPApellido = row7.PRIMER_APELLIDO ;
Var.gpPApellido = row9.PRIMER_APELLIDO ;
Var.cmNombres = row7.NOMBRES ;
Var.gpNombres = row9.NOMBRES ;
Var.procesado = 0;
Var.mensaje = null;
Var.var1 = null;// ###############################
        // ###############################
        // # Output tables

TDocDocPNomPApellido = null;
TDocDocumento = null;
NomApelFnacimiento = null;
PNomPApeDocumento = null;
NomApellidos = null;


// # Output table : 'TDocDocPNomPApellido'
// # Filter conditions 
if( 

Var.cmTdocumento ==  Var.gpTdocumento &&  Var.cmDocumento.compareTo(Var.gpDocumento) ==0 &&  Var.cmPNombre.compareTo(Var.gpPNombre) ==0 &&  Var.cmPApellido.compareTo(Var.gpPApellido) ==0

 ) {
TDocDocPNomPApellido_tmp.TDOCUMENTOS_ID = row7.TDOCUMENTOS_ID ;
TDocDocPNomPApellido_tmp.DOCUMENTO = row7.DOCUMENTO ;
TDocDocPNomPApellido_tmp.PERSONAS_ID = row9.PERSONAS_ID ;
TDocDocPNomPApellido_tmp.PROCESADO = Var.procesado = 2 ;
TDocDocPNomPApellido_tmp.MENSAJE = Var.mensaje = "Nombres y documento identidad" ;
TDocDocPNomPApellido = TDocDocPNomPApellido_tmp;
} // closing filter/reject

// # Output table : 'TDocDocumento'
// # Filter conditions 
if( 

Var.cmTdocumento ==  Var.gpTdocumento && Var.cmDocumento.compareTo(Var.gpDocumento)==0 &&  Var.procesado ==0

 ) {
TDocDocumento_tmp.TDOCUMENTOS_ID = row7.TDOCUMENTOS_ID ;
TDocDocumento_tmp.DOCUMENTO = row7.DOCUMENTO ;
TDocDocumento_tmp.PRIMER_NOMBRE = row7.PRIMER_NOMBRE ;
TDocDocumento_tmp.SEGUNDO_NOMBRE = row7.SEGUNDO_NOMBRE ;
TDocDocumento_tmp.PRIMER_APELLIDO = row7.PRIMER_APELLIDO ;
TDocDocumento_tmp.SEGUNDO_APELLIDO = row7.SEGUNDO_APELLIDO ;
TDocDocumento_tmp.PERSONAS_ID = row9.PERSONAS_ID ;
TDocDocumento_tmp.MENSAJE = Var.mensaje = "Ya existe documento y tipo documento diferencia en datos de nombre y apellido" ;
TDocDocumento_tmp.PROCESADO = Var.procesado = 3 ;
TDocDocumento_tmp.FECHA_NACIMIENTO = row7.FECHA_NACIMIENTO ;
TDocDocumento = TDocDocumento_tmp;
} // closing filter/reject

// # Output table : 'NomApelFnacimiento'
// # Filter conditions 
if( 

Var.cmNombres.compareTo(Var.gpNombres == null ? "ISNULL":Var.gpNombres) ==0 &&  Var.cmFnacimiento.compareTo( Var.gpFnacimiento == null ? TalendDate.getCurrentDate():Var.gpFnacimiento)==0&&  Var.procesado ==0

 ) {
NomApelFnacimiento_tmp.TDOCUMENTOS_ID = row7.TDOCUMENTOS_ID ;
NomApelFnacimiento_tmp.DOCUMENTO = row7.DOCUMENTO ;
NomApelFnacimiento_tmp.PRIMER_NOMBRE = row7.PRIMER_NOMBRE ;
NomApelFnacimiento_tmp.SEGUNDO_NOMBRE = row7.SEGUNDO_NOMBRE ;
NomApelFnacimiento_tmp.PRIMER_APELLIDO = row7.PRIMER_APELLIDO ;
NomApelFnacimiento_tmp.SEGUNDO_APELLIDO = row7.SEGUNDO_APELLIDO ;
NomApelFnacimiento_tmp.FECHA_NACIMIENTO = row7.FECHA_NACIMIENTO ;
NomApelFnacimiento_tmp.NOMBRES = row7.NOMBRES ;
NomApelFnacimiento_tmp.PERSONAS_ID = row9.PERSONAS_ID ;
NomApelFnacimiento_tmp.PROCESADO = Var.procesado = 5 ;
NomApelFnacimiento_tmp.MENSAJE = Var.mensaje = "Nombre, apellido y fecha nacimiento" ;
NomApelFnacimiento = NomApelFnacimiento_tmp;
} // closing filter/reject

// # Output table : 'PNomPApeDocumento'
// # Filter conditions 
if( 

Var.cmPNombre.compareTo(Var.gpNombres == null ? "ISNULL":Var.gpNombres)==0 &&  Var.cmPApellido.compareTo(Var.gpPApellido== null ? "ISNULL":Var.gpPApellido)==0 && Var.cmDocumento.compareTo(Var.gpDocumento== null ? "ISNULL":Var.gpDocumento)==0 &&  Var.procesado ==0

 ) {
PNomPApeDocumento_tmp.TDOCUMENTOS_ID = row7.TDOCUMENTOS_ID ;
PNomPApeDocumento_tmp.DOCUMENTO = row7.DOCUMENTO ;
PNomPApeDocumento_tmp.PRIMER_NOMBRE = row7.PRIMER_NOMBRE ;
PNomPApeDocumento_tmp.SEGUNDO_NOMBRE = row7.SEGUNDO_NOMBRE ;
PNomPApeDocumento_tmp.PRIMER_APELLIDO = row7.PRIMER_APELLIDO ;
PNomPApeDocumento_tmp.SEGUNDO_APELLIDO = row7.SEGUNDO_APELLIDO ;
PNomPApeDocumento_tmp.FECHA_NACIMIENTO = row7.FECHA_NACIMIENTO ;
PNomPApeDocumento_tmp.PERSONAS_ID = row9.PERSONAS_ID ;
PNomPApeDocumento_tmp.PROCESADO = Var.procesado = 4;
PNomPApeDocumento_tmp.MENSAJE = Var.mensaje = "Primer nombre, primer apellido y documento" ;
PNomPApeDocumento = PNomPApeDocumento_tmp;
} // closing filter/reject

// # Output table : 'NomApellidos'
// # Filter conditions 
if( 

Var.cmNombres.compareTo( Var.gpNombres == null ? "ISNULL": Var.gpNombres)==0 &&  Var.procesado ==0

 ) {
NomApellidos_tmp.TDOCUMENTOS_ID = row7.TDOCUMENTOS_ID ;
NomApellidos_tmp.DOCUMENTO = row7.DOCUMENTO ;
NomApellidos_tmp.PRIMER_NOMBRE = row7.PRIMER_NOMBRE ;
NomApellidos_tmp.SEGUNDO_NOMBRE = row7.SEGUNDO_NOMBRE ;
NomApellidos_tmp.PRIMER_APELLIDO = row7.PRIMER_APELLIDO ;
NomApellidos_tmp.SEGUNDO_APELLIDO = row7.SEGUNDO_APELLIDO ;
NomApellidos_tmp.FECHA_NACIMIENTO = row7.FECHA_NACIMIENTO ;
NomApellidos_tmp.NOMBRES = row7.NOMBRES ;
NomApellidos_tmp.PERSONAS_ID = row9.PERSONAS_ID ;
NomApellidos_tmp.PROCESADO = Var.procesado = 6 ;
NomApellidos_tmp.MENSAJE = Var.mensaje = "Nombres y Apellidos" ;
NomApellidos = NomApellidos_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "TDocDocPNomPApellido"
if(TDocDocPNomPApellido != null) { 



	
	/**
	 * [tOracleOutput_17 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_17";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"TDocDocPNomPApellido"
						
						);
					}
					



            row8 = null;
        whetherReject_tOracleOutput_17 = false;
                        if(TDocDocPNomPApellido.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_17.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_17.setInt(1, TDocDocPNomPApellido.TDOCUMENTOS_ID);
}

                        if(TDocDocPNomPApellido.DOCUMENTO == null) {
pstmt_tOracleOutput_17.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_17.setString(2, TDocDocPNomPApellido.DOCUMENTO);
}

                        pstmt_tOracleOutput_17.setInt(3, TDocDocPNomPApellido.PERSONAS_ID);

                        if(TDocDocPNomPApellido.MENSAJE == null) {
pstmt_tOracleOutput_17.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_17.setString(4, TDocDocPNomPApellido.MENSAJE);
}

                try {
                    nb_line_tOracleOutput_17++;
                    int processedCount_tOracleOutput_17 = pstmt_tOracleOutput_17.executeUpdate();
                    insertedCount_tOracleOutput_17 += processedCount_tOracleOutput_17;
                    rowsToCommitCount_tOracleOutput_17 += processedCount_tOracleOutput_17;
                } catch(java.lang.Exception e_tOracleOutput_17) {
globalMap.put("tOracleOutput_17_ERROR_MESSAGE",e_tOracleOutput_17.getMessage());
                    whetherReject_tOracleOutput_17 = true;
                            System.err.print(e_tOracleOutput_17.getMessage());
                }
            if(!whetherReject_tOracleOutput_17) {
                            row8 = new row8Struct();
                                row8.TDOCUMENTOS_ID = TDocDocPNomPApellido.TDOCUMENTOS_ID;
                                row8.DOCUMENTO = TDocDocPNomPApellido.DOCUMENTO;
                                row8.PERSONAS_ID = TDocDocPNomPApellido.PERSONAS_ID;
                                row8.MENSAJE = TDocDocPNomPApellido.MENSAJE;
            }

 


	tos_count_tOracleOutput_17++;

/**
 * [tOracleOutput_17 main ] stop
 */
	
	/**
	 * [tOracleOutput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_17";
	
	

 



/**
 * [tOracleOutput_17 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tJavaRow_6 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					

    //Code generate according to input schema and output schema
row10.TDOCUMENTOS_ID = row8.TDOCUMENTOS_ID;
row10.DOCUMENTO = row8.DOCUMENTO;
row10.PERSONAS_ID = row8.PERSONAS_ID;
row10.PROCESADO = 2;

    nb_line_tJavaRow_6++;   

 


	tos_count_tJavaRow_6++;

/**
 * [tJavaRow_6 main ] stop
 */
	
	/**
	 * [tJavaRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_9 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					



        whetherReject_tOracleOutput_9 = false;
                    pstmt_tOracleOutput_9.setInt(1, row10.PERSONAS_ID);

                    pstmt_tOracleOutput_9.setInt(2, row10.PROCESADO);


                    if(row10.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_9.setNull(3 + count_tOracleOutput_9, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_9.setInt(3 + count_tOracleOutput_9, row10.TDOCUMENTOS_ID);
}


                    if(row10.DOCUMENTO == null) {
pstmt_tOracleOutput_9.setNull(4 + count_tOracleOutput_9, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(4 + count_tOracleOutput_9, row10.DOCUMENTO);
}

                try {
                    nb_line_tOracleOutput_9++;
                    int processedCount_tOracleOutput_9 = pstmt_tOracleOutput_9.executeUpdate();
                    updatedCount_tOracleOutput_9 += processedCount_tOracleOutput_9;
                    rowsToCommitCount_tOracleOutput_9 += processedCount_tOracleOutput_9;
                } catch(java.lang.Exception e_tOracleOutput_9) {
globalMap.put("tOracleOutput_9_ERROR_MESSAGE",e_tOracleOutput_9.getMessage());
                    whetherReject_tOracleOutput_9 = true;
                            System.err.print(e_tOracleOutput_9.getMessage());
                }

 


	tos_count_tOracleOutput_9++;

/**
 * [tOracleOutput_9 main ] stop
 */
	
	/**
	 * [tOracleOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	

 



/**
 * [tOracleOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	

 



/**
 * [tOracleOutput_9 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tOracleOutput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_17";
	
	

 



/**
 * [tOracleOutput_17 process_data_end ] stop
 */

} // End of branch "TDocDocPNomPApellido"




// Start of branch "TDocDocumento"
if(TDocDocumento != null) { 



	
	/**
	 * [tOracleOutput_8 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"TDocDocumento"
						
						);
					}
					



            row29 = null;
        whetherReject_tOracleOutput_8 = false;
                        if(TDocDocumento.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_8.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_8.setInt(1, TDocDocumento.TDOCUMENTOS_ID);
}

                        if(TDocDocumento.DOCUMENTO == null) {
pstmt_tOracleOutput_8.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_8.setString(2, TDocDocumento.DOCUMENTO);
}

                        pstmt_tOracleOutput_8.setInt(3, TDocDocumento.PERSONAS_ID);

                        if(TDocDocumento.MENSAJE == null) {
pstmt_tOracleOutput_8.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_8.setString(4, TDocDocumento.MENSAJE);
}

                try {
                    nb_line_tOracleOutput_8++;
                    int processedCount_tOracleOutput_8 = pstmt_tOracleOutput_8.executeUpdate();
                    insertedCount_tOracleOutput_8 += processedCount_tOracleOutput_8;
                    rowsToCommitCount_tOracleOutput_8 += processedCount_tOracleOutput_8;
                } catch(java.lang.Exception e_tOracleOutput_8) {
globalMap.put("tOracleOutput_8_ERROR_MESSAGE",e_tOracleOutput_8.getMessage());
                    whetherReject_tOracleOutput_8 = true;
                            System.err.print(e_tOracleOutput_8.getMessage());
                }
            if(!whetherReject_tOracleOutput_8) {
                            row29 = new row29Struct();
                                row29.TDOCUMENTOS_ID = TDocDocumento.TDOCUMENTOS_ID;
                                row29.DOCUMENTO = TDocDocumento.DOCUMENTO;
                                row29.PERSONAS_ID = TDocDocumento.PERSONAS_ID;
                                row29.MENSAJE = TDocDocumento.MENSAJE;
            }

 


	tos_count_tOracleOutput_8++;

/**
 * [tOracleOutput_8 main ] stop
 */
	
	/**
	 * [tOracleOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	

 



/**
 * [tOracleOutput_8 process_data_begin ] stop
 */
// Start of branch "row29"
if(row29 != null) { 



	
	/**
	 * [tJavaRow_14 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row29"
						
						);
					}
					

    //Code generate according to input schema and output schema
row30.TDOCUMENTOS_ID = row29.TDOCUMENTOS_ID;
row30.DOCUMENTO = row29.DOCUMENTO;
row30.PERSONAS_ID = row29.PERSONAS_ID;
row30.PROCESADO = 3;

    nb_line_tJavaRow_14++;   

 


	tos_count_tJavaRow_14++;

/**
 * [tJavaRow_14 main ] stop
 */
	
	/**
	 * [tJavaRow_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_14";
	
	

 



/**
 * [tJavaRow_14 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_19 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_19";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row30"
						
						);
					}
					



        whetherReject_tOracleOutput_19 = false;
                    pstmt_tOracleOutput_19.setInt(1, row30.PERSONAS_ID);

                    pstmt_tOracleOutput_19.setInt(2, row30.PROCESADO);


                    if(row30.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_19.setNull(3 + count_tOracleOutput_19, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_19.setInt(3 + count_tOracleOutput_19, row30.TDOCUMENTOS_ID);
}


                    if(row30.DOCUMENTO == null) {
pstmt_tOracleOutput_19.setNull(4 + count_tOracleOutput_19, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_19.setString(4 + count_tOracleOutput_19, row30.DOCUMENTO);
}

                try {
                    nb_line_tOracleOutput_19++;
                    int processedCount_tOracleOutput_19 = pstmt_tOracleOutput_19.executeUpdate();
                    updatedCount_tOracleOutput_19 += processedCount_tOracleOutput_19;
                    rowsToCommitCount_tOracleOutput_19 += processedCount_tOracleOutput_19;
                } catch(java.lang.Exception e_tOracleOutput_19) {
globalMap.put("tOracleOutput_19_ERROR_MESSAGE",e_tOracleOutput_19.getMessage());
                    whetherReject_tOracleOutput_19 = true;
                            System.err.print(e_tOracleOutput_19.getMessage());
                }

 


	tos_count_tOracleOutput_19++;

/**
 * [tOracleOutput_19 main ] stop
 */
	
	/**
	 * [tOracleOutput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_19";
	
	

 



/**
 * [tOracleOutput_19 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_19";
	
	

 



/**
 * [tOracleOutput_19 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_14";
	
	

 



/**
 * [tJavaRow_14 process_data_end ] stop
 */

} // End of branch "row29"




	
	/**
	 * [tOracleOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	

 



/**
 * [tOracleOutput_8 process_data_end ] stop
 */

} // End of branch "TDocDocumento"




// Start of branch "NomApelFnacimiento"
if(NomApelFnacimiento != null) { 



	
	/**
	 * [tOracleOutput_7 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"NomApelFnacimiento"
						
						);
					}
					



            row13 = null;
        whetherReject_tOracleOutput_7 = false;
                        if(NomApelFnacimiento.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_7.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_7.setInt(1, NomApelFnacimiento.TDOCUMENTOS_ID);
}

                        if(NomApelFnacimiento.DOCUMENTO == null) {
pstmt_tOracleOutput_7.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_7.setString(2, NomApelFnacimiento.DOCUMENTO);
}

                        pstmt_tOracleOutput_7.setInt(3, NomApelFnacimiento.PERSONAS_ID);

                        if(NomApelFnacimiento.MENSAJE == null) {
pstmt_tOracleOutput_7.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_7.setString(4, NomApelFnacimiento.MENSAJE);
}

                try {
                    nb_line_tOracleOutput_7++;
                    int processedCount_tOracleOutput_7 = pstmt_tOracleOutput_7.executeUpdate();
                    insertedCount_tOracleOutput_7 += processedCount_tOracleOutput_7;
                    rowsToCommitCount_tOracleOutput_7 += processedCount_tOracleOutput_7;
                } catch(java.lang.Exception e_tOracleOutput_7) {
globalMap.put("tOracleOutput_7_ERROR_MESSAGE",e_tOracleOutput_7.getMessage());
                    whetherReject_tOracleOutput_7 = true;
                            System.err.print(e_tOracleOutput_7.getMessage());
                }
            if(!whetherReject_tOracleOutput_7) {
                            row13 = new row13Struct();
                                row13.TDOCUMENTOS_ID = NomApelFnacimiento.TDOCUMENTOS_ID;
                                row13.DOCUMENTO = NomApelFnacimiento.DOCUMENTO;
                                row13.PERSONAS_ID = NomApelFnacimiento.PERSONAS_ID;
                                row13.MENSAJE = NomApelFnacimiento.MENSAJE;
            }

 


	tos_count_tOracleOutput_7++;

/**
 * [tOracleOutput_7 main ] stop
 */
	
	/**
	 * [tOracleOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	

 



/**
 * [tOracleOutput_7 process_data_begin ] stop
 */
// Start of branch "row13"
if(row13 != null) { 



	
	/**
	 * [tJavaRow_8 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					

    //Code generate according to input schema and output schema
row14.TDOCUMENTOS_ID = row13.TDOCUMENTOS_ID;
row14.DOCUMENTO = row13.DOCUMENTO;
row14.PERSONAS_ID = row13.PERSONAS_ID;
row14.PROCESADO = 5;

    nb_line_tJavaRow_8++;   

 


	tos_count_tJavaRow_8++;

/**
 * [tJavaRow_8 main ] stop
 */
	
	/**
	 * [tJavaRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_10 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					



        whetherReject_tOracleOutput_10 = false;
                    pstmt_tOracleOutput_10.setInt(1, row14.PERSONAS_ID);

                    pstmt_tOracleOutput_10.setInt(2, row14.PROCESADO);


                    if(row14.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_10.setNull(3 + count_tOracleOutput_10, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_10.setInt(3 + count_tOracleOutput_10, row14.TDOCUMENTOS_ID);
}


                    if(row14.DOCUMENTO == null) {
pstmt_tOracleOutput_10.setNull(4 + count_tOracleOutput_10, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(4 + count_tOracleOutput_10, row14.DOCUMENTO);
}

                try {
                    nb_line_tOracleOutput_10++;
                    int processedCount_tOracleOutput_10 = pstmt_tOracleOutput_10.executeUpdate();
                    updatedCount_tOracleOutput_10 += processedCount_tOracleOutput_10;
                    rowsToCommitCount_tOracleOutput_10 += processedCount_tOracleOutput_10;
                } catch(java.lang.Exception e_tOracleOutput_10) {
globalMap.put("tOracleOutput_10_ERROR_MESSAGE",e_tOracleOutput_10.getMessage());
                    whetherReject_tOracleOutput_10 = true;
                            System.err.print(e_tOracleOutput_10.getMessage());
                }

 


	tos_count_tOracleOutput_10++;

/**
 * [tOracleOutput_10 main ] stop
 */
	
	/**
	 * [tOracleOutput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	

 



/**
 * [tOracleOutput_10 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	

 



/**
 * [tOracleOutput_10 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 process_data_end ] stop
 */

} // End of branch "row13"




	
	/**
	 * [tOracleOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	

 



/**
 * [tOracleOutput_7 process_data_end ] stop
 */

} // End of branch "NomApelFnacimiento"




// Start of branch "PNomPApeDocumento"
if(PNomPApeDocumento != null) { 



	
	/**
	 * [tOracleOutput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"PNomPApeDocumento"
						
						);
					}
					



            row11 = null;
        whetherReject_tOracleOutput_5 = false;
                        if(PNomPApeDocumento.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_5.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_5.setInt(1, PNomPApeDocumento.TDOCUMENTOS_ID);
}

                        if(PNomPApeDocumento.DOCUMENTO == null) {
pstmt_tOracleOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_5.setString(2, PNomPApeDocumento.DOCUMENTO);
}

                        pstmt_tOracleOutput_5.setInt(3, PNomPApeDocumento.PERSONAS_ID);

                        if(PNomPApeDocumento.MENSAJE == null) {
pstmt_tOracleOutput_5.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_5.setString(4, PNomPApeDocumento.MENSAJE);
}

                try {
                    nb_line_tOracleOutput_5++;
                    int processedCount_tOracleOutput_5 = pstmt_tOracleOutput_5.executeUpdate();
                    insertedCount_tOracleOutput_5 += processedCount_tOracleOutput_5;
                    rowsToCommitCount_tOracleOutput_5 += processedCount_tOracleOutput_5;
                } catch(java.lang.Exception e_tOracleOutput_5) {
globalMap.put("tOracleOutput_5_ERROR_MESSAGE",e_tOracleOutput_5.getMessage());
                    whetherReject_tOracleOutput_5 = true;
                            System.err.print(e_tOracleOutput_5.getMessage());
                }
            if(!whetherReject_tOracleOutput_5) {
                            row11 = new row11Struct();
                                row11.TDOCUMENTOS_ID = PNomPApeDocumento.TDOCUMENTOS_ID;
                                row11.DOCUMENTO = PNomPApeDocumento.DOCUMENTO;
                                row11.PERSONAS_ID = PNomPApeDocumento.PERSONAS_ID;
                                row11.MENSAJE = PNomPApeDocumento.MENSAJE;
            }

 


	tos_count_tOracleOutput_5++;

/**
 * [tOracleOutput_5 main ] stop
 */
	
	/**
	 * [tOracleOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	

 



/**
 * [tOracleOutput_5 process_data_begin ] stop
 */
// Start of branch "row11"
if(row11 != null) { 



	
	/**
	 * [tJavaRow_7 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					

    //Code generate according to input schema and output schema
row12.TDOCUMENTOS_ID = row11.TDOCUMENTOS_ID;
row12.DOCUMENTO = row11.DOCUMENTO;
row12.PERSONAS_ID = row11.PERSONAS_ID;
row12.PROCESADO = 4;

    nb_line_tJavaRow_7++;   

 


	tos_count_tJavaRow_7++;

/**
 * [tJavaRow_7 main ] stop
 */
	
	/**
	 * [tJavaRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					



        whetherReject_tOracleOutput_6 = false;
                    pstmt_tOracleOutput_6.setInt(1, row12.PERSONAS_ID);

                    pstmt_tOracleOutput_6.setInt(2, row12.PROCESADO);


                    if(row12.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_6.setNull(3 + count_tOracleOutput_6, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_6.setInt(3 + count_tOracleOutput_6, row12.TDOCUMENTOS_ID);
}


                    if(row12.DOCUMENTO == null) {
pstmt_tOracleOutput_6.setNull(4 + count_tOracleOutput_6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_6.setString(4 + count_tOracleOutput_6, row12.DOCUMENTO);
}

                try {
                    nb_line_tOracleOutput_6++;
                    int processedCount_tOracleOutput_6 = pstmt_tOracleOutput_6.executeUpdate();
                    updatedCount_tOracleOutput_6 += processedCount_tOracleOutput_6;
                    rowsToCommitCount_tOracleOutput_6 += processedCount_tOracleOutput_6;
                } catch(java.lang.Exception e_tOracleOutput_6) {
globalMap.put("tOracleOutput_6_ERROR_MESSAGE",e_tOracleOutput_6.getMessage());
                    whetherReject_tOracleOutput_6 = true;
                            System.err.print(e_tOracleOutput_6.getMessage());
                }

 


	tos_count_tOracleOutput_6++;

/**
 * [tOracleOutput_6 main ] stop
 */
	
	/**
	 * [tOracleOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	

 



/**
 * [tOracleOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	

 



/**
 * [tOracleOutput_6 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_end ] stop
 */

} // End of branch "row11"




	
	/**
	 * [tOracleOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	

 



/**
 * [tOracleOutput_5 process_data_end ] stop
 */

} // End of branch "PNomPApeDocumento"




// Start of branch "NomApellidos"
if(NomApellidos != null) { 



	
	/**
	 * [tOracleOutput_11 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"NomApellidos"
						
						);
					}
					



            row15 = null;
        whetherReject_tOracleOutput_11 = false;
                        if(NomApellidos.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_11.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_11.setInt(1, NomApellidos.TDOCUMENTOS_ID);
}

                        if(NomApellidos.DOCUMENTO == null) {
pstmt_tOracleOutput_11.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_11.setString(2, NomApellidos.DOCUMENTO);
}

                        pstmt_tOracleOutput_11.setInt(3, NomApellidos.PERSONAS_ID);

                        if(NomApellidos.MENSAJE == null) {
pstmt_tOracleOutput_11.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_11.setString(4, NomApellidos.MENSAJE);
}

                try {
                    nb_line_tOracleOutput_11++;
                    int processedCount_tOracleOutput_11 = pstmt_tOracleOutput_11.executeUpdate();
                    insertedCount_tOracleOutput_11 += processedCount_tOracleOutput_11;
                    rowsToCommitCount_tOracleOutput_11 += processedCount_tOracleOutput_11;
                } catch(java.lang.Exception e_tOracleOutput_11) {
globalMap.put("tOracleOutput_11_ERROR_MESSAGE",e_tOracleOutput_11.getMessage());
                    whetherReject_tOracleOutput_11 = true;
                            System.err.print(e_tOracleOutput_11.getMessage());
                }
            if(!whetherReject_tOracleOutput_11) {
                            row15 = new row15Struct();
                                row15.TDOCUMENTOS_ID = NomApellidos.TDOCUMENTOS_ID;
                                row15.DOCUMENTO = NomApellidos.DOCUMENTO;
                                row15.PERSONAS_ID = NomApellidos.PERSONAS_ID;
                                row15.MENSAJE = NomApellidos.MENSAJE;
            }

 


	tos_count_tOracleOutput_11++;

/**
 * [tOracleOutput_11 main ] stop
 */
	
	/**
	 * [tOracleOutput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	

 



/**
 * [tOracleOutput_11 process_data_begin ] stop
 */
// Start of branch "row15"
if(row15 != null) { 



	
	/**
	 * [tJavaRow_9 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					

    //Code generate according to input schema and output schema
row16.TDOCUMENTOS_ID = row15.TDOCUMENTOS_ID;
row16.DOCUMENTO = row15.DOCUMENTO;
row16.PERSONAS_ID = row15.PERSONAS_ID;
row16.PROCESADO = 6;

    nb_line_tJavaRow_9++;   

 


	tos_count_tJavaRow_9++;

/**
 * [tJavaRow_9 main ] stop
 */
	
	/**
	 * [tJavaRow_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

 



/**
 * [tJavaRow_9 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_12 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					



        whetherReject_tOracleOutput_12 = false;
                    pstmt_tOracleOutput_12.setInt(1, row16.PERSONAS_ID);

                    pstmt_tOracleOutput_12.setInt(2, row16.PROCESADO);


                    if(row16.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_12.setNull(3 + count_tOracleOutput_12, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_12.setInt(3 + count_tOracleOutput_12, row16.TDOCUMENTOS_ID);
}


                    if(row16.DOCUMENTO == null) {
pstmt_tOracleOutput_12.setNull(4 + count_tOracleOutput_12, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_12.setString(4 + count_tOracleOutput_12, row16.DOCUMENTO);
}

                try {
                    nb_line_tOracleOutput_12++;
                    int processedCount_tOracleOutput_12 = pstmt_tOracleOutput_12.executeUpdate();
                    updatedCount_tOracleOutput_12 += processedCount_tOracleOutput_12;
                    rowsToCommitCount_tOracleOutput_12 += processedCount_tOracleOutput_12;
                } catch(java.lang.Exception e_tOracleOutput_12) {
globalMap.put("tOracleOutput_12_ERROR_MESSAGE",e_tOracleOutput_12.getMessage());
                    whetherReject_tOracleOutput_12 = true;
                            System.err.print(e_tOracleOutput_12.getMessage());
                }

 


	tos_count_tOracleOutput_12++;

/**
 * [tOracleOutput_12 main ] stop
 */
	
	/**
	 * [tOracleOutput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	

 



/**
 * [tOracleOutput_12 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	

 



/**
 * [tOracleOutput_12 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

 



/**
 * [tJavaRow_9 process_data_end ] stop
 */

} // End of branch "row15"




	
	/**
	 * [tOracleOutput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	

 



/**
 * [tOracleOutput_11 process_data_end ] stop
 */

} // End of branch "NomApellidos"



	
		} // close loop of lookup 'row9' // G_TM_M_043
	
	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row9 != null) {
						tHash_Lookup_row9.endGet();
					}
					globalMap.remove( "tHash_Lookup_row9" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tOracleOutput_17 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_17";
	
	
	



	
        if(pstmt_tOracleOutput_17 != null) {
			
				pstmt_tOracleOutput_17.close();
				resourceMap.remove("pstmt_tOracleOutput_17");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_17", true);

	
	nb_line_deleted_tOracleOutput_17=nb_line_deleted_tOracleOutput_17+ deletedCount_tOracleOutput_17;
	nb_line_update_tOracleOutput_17=nb_line_update_tOracleOutput_17 + updatedCount_tOracleOutput_17;
	nb_line_inserted_tOracleOutput_17=nb_line_inserted_tOracleOutput_17 + insertedCount_tOracleOutput_17;
	nb_line_rejected_tOracleOutput_17=nb_line_rejected_tOracleOutput_17 + rejectedCount_tOracleOutput_17;
	
        globalMap.put("tOracleOutput_17_NB_LINE",nb_line_tOracleOutput_17);
        globalMap.put("tOracleOutput_17_NB_LINE_UPDATED",nb_line_update_tOracleOutput_17);
        globalMap.put("tOracleOutput_17_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_17);
        globalMap.put("tOracleOutput_17_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_17);
        globalMap.put("tOracleOutput_17_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_17);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"TDocDocPNomPApellido");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_17", true);
end_Hash.put("tOracleOutput_17", System.currentTimeMillis());




/**
 * [tOracleOutput_17 end ] stop
 */

	
	/**
	 * [tJavaRow_6 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

globalMap.put("tJavaRow_6_NB_LINE",nb_line_tJavaRow_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tJavaRow_6", true);
end_Hash.put("tJavaRow_6", System.currentTimeMillis());




/**
 * [tJavaRow_6 end ] stop
 */

	
	/**
	 * [tOracleOutput_9 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	
	



	
        if(pstmt_tOracleOutput_9 != null) {
			
				pstmt_tOracleOutput_9.close();
				resourceMap.remove("pstmt_tOracleOutput_9");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_9", true);

	
	nb_line_deleted_tOracleOutput_9=nb_line_deleted_tOracleOutput_9+ deletedCount_tOracleOutput_9;
	nb_line_update_tOracleOutput_9=nb_line_update_tOracleOutput_9 + updatedCount_tOracleOutput_9;
	nb_line_inserted_tOracleOutput_9=nb_line_inserted_tOracleOutput_9 + insertedCount_tOracleOutput_9;
	nb_line_rejected_tOracleOutput_9=nb_line_rejected_tOracleOutput_9 + rejectedCount_tOracleOutput_9;
	
        globalMap.put("tOracleOutput_9_NB_LINE",nb_line_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_UPDATED",nb_line_update_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_9);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_9", true);
end_Hash.put("tOracleOutput_9", System.currentTimeMillis());




/**
 * [tOracleOutput_9 end ] stop
 */










	
	/**
	 * [tOracleOutput_8 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	
	



	
        if(pstmt_tOracleOutput_8 != null) {
			
				pstmt_tOracleOutput_8.close();
				resourceMap.remove("pstmt_tOracleOutput_8");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_8", true);

	
	nb_line_deleted_tOracleOutput_8=nb_line_deleted_tOracleOutput_8+ deletedCount_tOracleOutput_8;
	nb_line_update_tOracleOutput_8=nb_line_update_tOracleOutput_8 + updatedCount_tOracleOutput_8;
	nb_line_inserted_tOracleOutput_8=nb_line_inserted_tOracleOutput_8 + insertedCount_tOracleOutput_8;
	nb_line_rejected_tOracleOutput_8=nb_line_rejected_tOracleOutput_8 + rejectedCount_tOracleOutput_8;
	
        globalMap.put("tOracleOutput_8_NB_LINE",nb_line_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_UPDATED",nb_line_update_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_8);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"TDocDocumento");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_8", true);
end_Hash.put("tOracleOutput_8", System.currentTimeMillis());




/**
 * [tOracleOutput_8 end ] stop
 */

	
	/**
	 * [tJavaRow_14 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_14";
	
	

globalMap.put("tJavaRow_14_NB_LINE",nb_line_tJavaRow_14);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row29");
			  	}
			  	
 

ok_Hash.put("tJavaRow_14", true);
end_Hash.put("tJavaRow_14", System.currentTimeMillis());




/**
 * [tJavaRow_14 end ] stop
 */

	
	/**
	 * [tOracleOutput_19 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_19";
	
	
	



	
        if(pstmt_tOracleOutput_19 != null) {
			
				pstmt_tOracleOutput_19.close();
				resourceMap.remove("pstmt_tOracleOutput_19");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_19", true);

	
	nb_line_deleted_tOracleOutput_19=nb_line_deleted_tOracleOutput_19+ deletedCount_tOracleOutput_19;
	nb_line_update_tOracleOutput_19=nb_line_update_tOracleOutput_19 + updatedCount_tOracleOutput_19;
	nb_line_inserted_tOracleOutput_19=nb_line_inserted_tOracleOutput_19 + insertedCount_tOracleOutput_19;
	nb_line_rejected_tOracleOutput_19=nb_line_rejected_tOracleOutput_19 + rejectedCount_tOracleOutput_19;
	
        globalMap.put("tOracleOutput_19_NB_LINE",nb_line_tOracleOutput_19);
        globalMap.put("tOracleOutput_19_NB_LINE_UPDATED",nb_line_update_tOracleOutput_19);
        globalMap.put("tOracleOutput_19_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_19);
        globalMap.put("tOracleOutput_19_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_19);
        globalMap.put("tOracleOutput_19_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_19);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_19", true);
end_Hash.put("tOracleOutput_19", System.currentTimeMillis());




/**
 * [tOracleOutput_19 end ] stop
 */










	
	/**
	 * [tOracleOutput_7 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	
	



	
        if(pstmt_tOracleOutput_7 != null) {
			
				pstmt_tOracleOutput_7.close();
				resourceMap.remove("pstmt_tOracleOutput_7");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_7", true);

	
	nb_line_deleted_tOracleOutput_7=nb_line_deleted_tOracleOutput_7+ deletedCount_tOracleOutput_7;
	nb_line_update_tOracleOutput_7=nb_line_update_tOracleOutput_7 + updatedCount_tOracleOutput_7;
	nb_line_inserted_tOracleOutput_7=nb_line_inserted_tOracleOutput_7 + insertedCount_tOracleOutput_7;
	nb_line_rejected_tOracleOutput_7=nb_line_rejected_tOracleOutput_7 + rejectedCount_tOracleOutput_7;
	
        globalMap.put("tOracleOutput_7_NB_LINE",nb_line_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_UPDATED",nb_line_update_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_7);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"NomApelFnacimiento");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_7", true);
end_Hash.put("tOracleOutput_7", System.currentTimeMillis());




/**
 * [tOracleOutput_7 end ] stop
 */

	
	/**
	 * [tJavaRow_8 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

globalMap.put("tJavaRow_8_NB_LINE",nb_line_tJavaRow_8);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tJavaRow_8", true);
end_Hash.put("tJavaRow_8", System.currentTimeMillis());




/**
 * [tJavaRow_8 end ] stop
 */

	
	/**
	 * [tOracleOutput_10 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	
	



	
        if(pstmt_tOracleOutput_10 != null) {
			
				pstmt_tOracleOutput_10.close();
				resourceMap.remove("pstmt_tOracleOutput_10");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_10", true);

	
	nb_line_deleted_tOracleOutput_10=nb_line_deleted_tOracleOutput_10+ deletedCount_tOracleOutput_10;
	nb_line_update_tOracleOutput_10=nb_line_update_tOracleOutput_10 + updatedCount_tOracleOutput_10;
	nb_line_inserted_tOracleOutput_10=nb_line_inserted_tOracleOutput_10 + insertedCount_tOracleOutput_10;
	nb_line_rejected_tOracleOutput_10=nb_line_rejected_tOracleOutput_10 + rejectedCount_tOracleOutput_10;
	
        globalMap.put("tOracleOutput_10_NB_LINE",nb_line_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_UPDATED",nb_line_update_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_10);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_10", true);
end_Hash.put("tOracleOutput_10", System.currentTimeMillis());




/**
 * [tOracleOutput_10 end ] stop
 */










	
	/**
	 * [tOracleOutput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	
	



	
        if(pstmt_tOracleOutput_5 != null) {
			
				pstmt_tOracleOutput_5.close();
				resourceMap.remove("pstmt_tOracleOutput_5");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_5", true);

	
	nb_line_deleted_tOracleOutput_5=nb_line_deleted_tOracleOutput_5+ deletedCount_tOracleOutput_5;
	nb_line_update_tOracleOutput_5=nb_line_update_tOracleOutput_5 + updatedCount_tOracleOutput_5;
	nb_line_inserted_tOracleOutput_5=nb_line_inserted_tOracleOutput_5 + insertedCount_tOracleOutput_5;
	nb_line_rejected_tOracleOutput_5=nb_line_rejected_tOracleOutput_5 + rejectedCount_tOracleOutput_5;
	
        globalMap.put("tOracleOutput_5_NB_LINE",nb_line_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_UPDATED",nb_line_update_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_5);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"PNomPApeDocumento");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_5", true);
end_Hash.put("tOracleOutput_5", System.currentTimeMillis());




/**
 * [tOracleOutput_5 end ] stop
 */

	
	/**
	 * [tJavaRow_7 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

globalMap.put("tJavaRow_7_NB_LINE",nb_line_tJavaRow_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tJavaRow_7", true);
end_Hash.put("tJavaRow_7", System.currentTimeMillis());




/**
 * [tJavaRow_7 end ] stop
 */

	
	/**
	 * [tOracleOutput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	
	



	
        if(pstmt_tOracleOutput_6 != null) {
			
				pstmt_tOracleOutput_6.close();
				resourceMap.remove("pstmt_tOracleOutput_6");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_6", true);

	
	nb_line_deleted_tOracleOutput_6=nb_line_deleted_tOracleOutput_6+ deletedCount_tOracleOutput_6;
	nb_line_update_tOracleOutput_6=nb_line_update_tOracleOutput_6 + updatedCount_tOracleOutput_6;
	nb_line_inserted_tOracleOutput_6=nb_line_inserted_tOracleOutput_6 + insertedCount_tOracleOutput_6;
	nb_line_rejected_tOracleOutput_6=nb_line_rejected_tOracleOutput_6 + rejectedCount_tOracleOutput_6;
	
        globalMap.put("tOracleOutput_6_NB_LINE",nb_line_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_UPDATED",nb_line_update_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_6);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_6", true);
end_Hash.put("tOracleOutput_6", System.currentTimeMillis());




/**
 * [tOracleOutput_6 end ] stop
 */










	
	/**
	 * [tOracleOutput_11 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	
	



	
        if(pstmt_tOracleOutput_11 != null) {
			
				pstmt_tOracleOutput_11.close();
				resourceMap.remove("pstmt_tOracleOutput_11");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_11", true);

	
	nb_line_deleted_tOracleOutput_11=nb_line_deleted_tOracleOutput_11+ deletedCount_tOracleOutput_11;
	nb_line_update_tOracleOutput_11=nb_line_update_tOracleOutput_11 + updatedCount_tOracleOutput_11;
	nb_line_inserted_tOracleOutput_11=nb_line_inserted_tOracleOutput_11 + insertedCount_tOracleOutput_11;
	nb_line_rejected_tOracleOutput_11=nb_line_rejected_tOracleOutput_11 + rejectedCount_tOracleOutput_11;
	
        globalMap.put("tOracleOutput_11_NB_LINE",nb_line_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_UPDATED",nb_line_update_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_11);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"NomApellidos");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_11", true);
end_Hash.put("tOracleOutput_11", System.currentTimeMillis());




/**
 * [tOracleOutput_11 end ] stop
 */

	
	/**
	 * [tJavaRow_9 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

globalMap.put("tJavaRow_9_NB_LINE",nb_line_tJavaRow_9);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tJavaRow_9", true);
end_Hash.put("tJavaRow_9", System.currentTimeMillis());




/**
 * [tJavaRow_9 end ] stop
 */

	
	/**
	 * [tOracleOutput_12 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	
	



	
        if(pstmt_tOracleOutput_12 != null) {
			
				pstmt_tOracleOutput_12.close();
				resourceMap.remove("pstmt_tOracleOutput_12");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_12", true);

	
	nb_line_deleted_tOracleOutput_12=nb_line_deleted_tOracleOutput_12+ deletedCount_tOracleOutput_12;
	nb_line_update_tOracleOutput_12=nb_line_update_tOracleOutput_12 + updatedCount_tOracleOutput_12;
	nb_line_inserted_tOracleOutput_12=nb_line_inserted_tOracleOutput_12 + insertedCount_tOracleOutput_12;
	nb_line_rejected_tOracleOutput_12=nb_line_rejected_tOracleOutput_12 + rejectedCount_tOracleOutput_12;
	
        globalMap.put("tOracleOutput_12_NB_LINE",nb_line_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_UPDATED",nb_line_update_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_12);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_12", true);
end_Hash.put("tOracleOutput_12", System.currentTimeMillis());




/**
 * [tOracleOutput_12 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tOracleInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row9"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tOracleOutput_17 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_17";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_17") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_17 = null;
                if ((pstmtToClose_tOracleOutput_17 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_17")) != null) {
                    pstmtToClose_tOracleOutput_17.close();
                }
    }
 



/**
 * [tOracleOutput_17 finally ] stop
 */

	
	/**
	 * [tJavaRow_6 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 finally ] stop
 */

	
	/**
	 * [tOracleOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_9") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_9 = null;
                if ((pstmtToClose_tOracleOutput_9 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_9")) != null) {
                    pstmtToClose_tOracleOutput_9.close();
                }
    }
 



/**
 * [tOracleOutput_9 finally ] stop
 */










	
	/**
	 * [tOracleOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_8") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_8 = null;
                if ((pstmtToClose_tOracleOutput_8 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_8")) != null) {
                    pstmtToClose_tOracleOutput_8.close();
                }
    }
 



/**
 * [tOracleOutput_8 finally ] stop
 */

	
	/**
	 * [tJavaRow_14 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_14";
	
	

 



/**
 * [tJavaRow_14 finally ] stop
 */

	
	/**
	 * [tOracleOutput_19 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_19";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_19") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_19 = null;
                if ((pstmtToClose_tOracleOutput_19 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_19")) != null) {
                    pstmtToClose_tOracleOutput_19.close();
                }
    }
 



/**
 * [tOracleOutput_19 finally ] stop
 */










	
	/**
	 * [tOracleOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_7") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_7 = null;
                if ((pstmtToClose_tOracleOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_7")) != null) {
                    pstmtToClose_tOracleOutput_7.close();
                }
    }
 



/**
 * [tOracleOutput_7 finally ] stop
 */

	
	/**
	 * [tJavaRow_8 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 finally ] stop
 */

	
	/**
	 * [tOracleOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_10") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_10 = null;
                if ((pstmtToClose_tOracleOutput_10 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_10")) != null) {
                    pstmtToClose_tOracleOutput_10.close();
                }
    }
 



/**
 * [tOracleOutput_10 finally ] stop
 */










	
	/**
	 * [tOracleOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_5 = null;
                if ((pstmtToClose_tOracleOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_5")) != null) {
                    pstmtToClose_tOracleOutput_5.close();
                }
    }
 



/**
 * [tOracleOutput_5 finally ] stop
 */

	
	/**
	 * [tJavaRow_7 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 finally ] stop
 */

	
	/**
	 * [tOracleOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_6 = null;
                if ((pstmtToClose_tOracleOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_6")) != null) {
                    pstmtToClose_tOracleOutput_6.close();
                }
    }
 



/**
 * [tOracleOutput_6 finally ] stop
 */










	
	/**
	 * [tOracleOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_11") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_11 = null;
                if ((pstmtToClose_tOracleOutput_11 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_11")) != null) {
                    pstmtToClose_tOracleOutput_11.close();
                }
    }
 



/**
 * [tOracleOutput_11 finally ] stop
 */

	
	/**
	 * [tJavaRow_9 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

 



/**
 * [tJavaRow_9 finally ] stop
 */

	
	/**
	 * [tOracleOutput_12 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_12") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_12 = null;
                if ((pstmtToClose_tOracleOutput_12 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_12")) != null) {
                    pstmtToClose_tOracleOutput_12.close();
                }
    }
 



/**
 * [tOracleOutput_12 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return 0;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return "";
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PERSONAS_ID;

				public Integer getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PERSONAS_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PERSONAS_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PERSONAS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PERSONAS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PERSONAS_ID;

				public Integer getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return null;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PERSONAS_ID = readInteger(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PERSONAS_ID = readInteger(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PERSONAS_ID,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PERSONAS_ID,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PERSONAS_ID;

				public Integer getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return null;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return null;
				}
				public String AFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public Integer PLANAFILIACIONES_ID;

				public Integer getPLANAFILIACIONES_ID () {
					return this.PLANAFILIACIONES_ID;
				}

				public Boolean PLANAFILIACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean PLANAFILIACIONES_IDIsKey(){
				    return false;
				}
				public Integer PLANAFILIACIONES_IDLength(){
				    return 0;
				}
				public Integer PLANAFILIACIONES_IDPrecision(){
				    return null;
				}
				public String PLANAFILIACIONES_IDDefault(){
				
					return "";
				
				}
				public String PLANAFILIACIONES_IDComment(){
				
				    return "";
				
				}
				public String PLANAFILIACIONES_IDPattern(){
				
					return "";
				
				}
				public String PLANAFILIACIONES_IDOriginalDbColumnName(){
				
					return "PLANAFILIACIONES_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PERSONAS_ID = readInteger(dis);
					
			        this.AFILIADOS_ID = dis.readInt();
					
						this.PLANAFILIACIONES_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PERSONAS_ID = readInteger(dis);
					
			        this.AFILIADOS_ID = dis.readInt();
					
						this.PLANAFILIACIONES_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PERSONAS_ID,dos);
					
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// Integer
				
						writeInteger(this.PLANAFILIACIONES_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PERSONAS_ID,dos);
					
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// Integer
				
						writeInteger(this.PLANAFILIACIONES_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PLANAFILIACIONES_ID="+String.valueOf(PLANAFILIACIONES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PERSONAS_ID;

				public Integer getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return null;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return null;
				}
				public String AFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public Integer PLANAFILIACIONES_ID;

				public Integer getPLANAFILIACIONES_ID () {
					return this.PLANAFILIACIONES_ID;
				}

				public Boolean PLANAFILIACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean PLANAFILIACIONES_IDIsKey(){
				    return false;
				}
				public Integer PLANAFILIACIONES_IDLength(){
				    return 0;
				}
				public Integer PLANAFILIACIONES_IDPrecision(){
				    return null;
				}
				public String PLANAFILIACIONES_IDDefault(){
				
					return "";
				
				}
				public String PLANAFILIACIONES_IDComment(){
				
				    return "";
				
				}
				public String PLANAFILIACIONES_IDPattern(){
				
					return "";
				
				}
				public String PLANAFILIACIONES_IDOriginalDbColumnName(){
				
					return "PLANAFILIACIONES_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PERSONAS_ID = readInteger(dis);
					
			        this.AFILIADOS_ID = dis.readInt();
					
						this.PLANAFILIACIONES_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PERSONAS_ID = readInteger(dis);
					
			        this.AFILIADOS_ID = dis.readInt();
					
						this.PLANAFILIACIONES_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PERSONAS_ID,dos);
					
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// Integer
				
						writeInteger(this.PLANAFILIACIONES_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PERSONAS_ID,dos);
					
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// Integer
				
						writeInteger(this.PLANAFILIACIONES_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PLANAFILIACIONES_ID="+String.valueOf(PLANAFILIACIONES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class IxAfiliadosStruct implements routines.system.IPersistableRow<IxAfiliadosStruct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PERSONAS_ID;

				public Integer getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return null;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return null;
				}
				public String AFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public Integer PLANAFILIACIONES_ID;

				public Integer getPLANAFILIACIONES_ID () {
					return this.PLANAFILIACIONES_ID;
				}

				public Boolean PLANAFILIACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean PLANAFILIACIONES_IDIsKey(){
				    return false;
				}
				public Integer PLANAFILIACIONES_IDLength(){
				    return 0;
				}
				public Integer PLANAFILIACIONES_IDPrecision(){
				    return null;
				}
				public String PLANAFILIACIONES_IDDefault(){
				
					return "";
				
				}
				public String PLANAFILIACIONES_IDComment(){
				
				    return "";
				
				}
				public String PLANAFILIACIONES_IDPattern(){
				
					return "";
				
				}
				public String PLANAFILIACIONES_IDOriginalDbColumnName(){
				
					return "PLANAFILIACIONES_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PERSONAS_ID = readInteger(dis);
					
			        this.AFILIADOS_ID = dis.readInt();
					
						this.PLANAFILIACIONES_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PERSONAS_ID = readInteger(dis);
					
			        this.AFILIADOS_ID = dis.readInt();
					
						this.PLANAFILIACIONES_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PERSONAS_ID,dos);
					
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// Integer
				
						writeInteger(this.PLANAFILIACIONES_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PERSONAS_ID,dos);
					
					// int
				
		            	dos.writeInt(this.AFILIADOS_ID);
					
					// Integer
				
						writeInteger(this.PLANAFILIACIONES_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PLANAFILIACIONES_ID="+String.valueOf(PLANAFILIACIONES_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(IxAfiliadosStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class IxPersonaStruct implements routines.system.IPersistableRow<IxPersonaStruct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PERSONAS_ID;

				public Integer getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PERSONAS_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PERSONAS_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PERSONAS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PERSONAS_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(IxPersonaStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class IxCargaStruct implements routines.system.IPersistableRow<IxCargaStruct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return 0;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return "";
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(IxCargaStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PERSONAS_ID;

				public Integer getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return 0;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return "";
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PERSONAS_ID = readInteger(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PERSONAS_ID = readInteger(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PERSONAS_ID,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PERSONAS_ID,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_4Struct implements routines.system.IPersistableRow<after_tOracleInput_4Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer PERSONAS_ID;

				public Integer getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public Integer PROCESADO;

				public Integer getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return 0;
				}
				public Integer PROCESADOPrecision(){
				    return null;
				}
				public String PROCESADODefault(){
				
					return "";
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PERSONAS_ID = readInteger(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.PERSONAS_ID = readInteger(dis);
					
						this.PROCESADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PERSONAS_ID,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.PERSONAS_ID,dos);
					
					// Integer
				
						writeInteger(this.PROCESADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",PROCESADO="+String.valueOf(PROCESADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_6Process(globalMap);

		row17Struct row17 = new row17Struct();
IxAfiliadosStruct IxAfiliados = new IxAfiliadosStruct();
row20Struct row20 = new row20Struct();
row27Struct row27 = new row27Struct();
row28Struct row28 = new row28Struct();
IxPersonaStruct IxPersona = new IxPersonaStruct();
row24Struct row24 = new row24Struct();
IxCargaStruct IxCarga = new IxCargaStruct();
row25Struct row25 = new row25Struct();








	
	/**
	 * [tOracleOutput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_18", false);
		start_Hash.put("tOracleOutput_18", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_18";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tOracleOutput_18 = 0;
		






        int updateKeyCount_tOracleOutput_18 = 3;
        if(updateKeyCount_tOracleOutput_18 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_18 == 4 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_18 = 0;
    int nb_line_update_tOracleOutput_18 = 0;
    int nb_line_inserted_tOracleOutput_18 = 0;
    int nb_line_deleted_tOracleOutput_18 = 0;
    int nb_line_rejected_tOracleOutput_18 = 0;

    int tmp_batchUpdateCount_tOracleOutput_18 = 0;

    int deletedCount_tOracleOutput_18=0;
    int updatedCount_tOracleOutput_18=0;
    int insertedCount_tOracleOutput_18=0;
    int rowsToCommitCount_tOracleOutput_18=0;
    int rejectedCount_tOracleOutput_18=0;

    boolean whetherReject_tOracleOutput_18 = false;

    java.sql.Connection conn_tOracleOutput_18 = null;

    //optional table
    String dbschema_tOracleOutput_18 = null;
    String tableName_tOracleOutput_18 = null;
        dbschema_tOracleOutput_18 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_18 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_18=0;

        if(dbschema_tOracleOutput_18 == null || dbschema_tOracleOutput_18.trim().length() == 0) {
            tableName_tOracleOutput_18 = ("TST_CARGUEMASIVO");
        } else {
            tableName_tOracleOutput_18 = dbschema_tOracleOutput_18 + "." + ("TST_CARGUEMASIVO");
        }
                String update_tOracleOutput_18 = "UPDATE " + tableName_tOracleOutput_18 + " SET PROCESADO = ? WHERE TDOCUMENTOS_ID = ? AND DOCUMENTO = ? AND PERSONAS_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_18 = conn_tOracleOutput_18.prepareStatement(update_tOracleOutput_18);
                resourceMap.put("pstmt_tOracleOutput_18", pstmt_tOracleOutput_18);





 



/**
 * [tOracleOutput_18 begin ] stop
 */



	
	/**
	 * [tJavaRow_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_13", false);
		start_Hash.put("tJavaRow_13", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tJavaRow_13 = 0;
		

int nb_line_tJavaRow_13 = 0;

 



/**
 * [tJavaRow_13 begin ] stop
 */



	
	/**
	 * [tOracleOutput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_13", false);
		start_Hash.put("tOracleOutput_13", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tOracleOutput_13 = 0;
		






        int updateKeyCount_tOracleOutput_13 = 3;
        if(updateKeyCount_tOracleOutput_13 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_13 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_13 = 0;
    int nb_line_update_tOracleOutput_13 = 0;
    int nb_line_inserted_tOracleOutput_13 = 0;
    int nb_line_deleted_tOracleOutput_13 = 0;
    int nb_line_rejected_tOracleOutput_13 = 0;

    int tmp_batchUpdateCount_tOracleOutput_13 = 0;

    int deletedCount_tOracleOutput_13=0;
    int updatedCount_tOracleOutput_13=0;
    int insertedCount_tOracleOutput_13=0;
    int rowsToCommitCount_tOracleOutput_13=0;
    int rejectedCount_tOracleOutput_13=0;

    boolean whetherReject_tOracleOutput_13 = false;

    java.sql.Connection conn_tOracleOutput_13 = null;

    //optional table
    String dbschema_tOracleOutput_13 = null;
    String tableName_tOracleOutput_13 = null;
        dbschema_tOracleOutput_13 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_13 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_13=0;

        if(dbschema_tOracleOutput_13 == null || dbschema_tOracleOutput_13.trim().length() == 0) {
            tableName_tOracleOutput_13 = ("TST_ERRCMASIVO");
        } else {
            tableName_tOracleOutput_13 = dbschema_tOracleOutput_13 + "." + ("TST_ERRCMASIVO");
        }
                String update_tOracleOutput_13 = "UPDATE " + tableName_tOracleOutput_13 + " SET AFILIADOS_ID = ?,PLANAFILIACIONES_ID = ? WHERE TDOCUMENTOS_ID = ? AND DOCUMENTO = ? AND PERSONAS_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_13 = conn_tOracleOutput_13.prepareStatement(update_tOracleOutput_13);
                resourceMap.put("pstmt_tOracleOutput_13", pstmt_tOracleOutput_13);





 



/**
 * [tOracleOutput_13 begin ] stop
 */



	
	/**
	 * [tJavaRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_10", false);
		start_Hash.put("tJavaRow_10", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"IxAfiliados");
					}
				
		int tos_count_tJavaRow_10 = 0;
		

int nb_line_tJavaRow_10 = 0;

 



/**
 * [tJavaRow_10 begin ] stop
 */





	
	/**
	 * [tOracleOutput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_15", false);
		start_Hash.put("tOracleOutput_15", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_15";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row24");
					}
				
		int tos_count_tOracleOutput_15 = 0;
		






        int deleteKeyCount_tOracleOutput_15 = 3;
        if(deleteKeyCount_tOracleOutput_15 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
    
    int nb_line_tOracleOutput_15 = 0;
    int nb_line_update_tOracleOutput_15 = 0;
    int nb_line_inserted_tOracleOutput_15 = 0;
    int nb_line_deleted_tOracleOutput_15 = 0;
    int nb_line_rejected_tOracleOutput_15 = 0;

    int tmp_batchUpdateCount_tOracleOutput_15 = 0;

    int deletedCount_tOracleOutput_15=0;
    int updatedCount_tOracleOutput_15=0;
    int insertedCount_tOracleOutput_15=0;
    int rowsToCommitCount_tOracleOutput_15=0;
    int rejectedCount_tOracleOutput_15=0;

    boolean whetherReject_tOracleOutput_15 = false;

    java.sql.Connection conn_tOracleOutput_15 = null;

    //optional table
    String dbschema_tOracleOutput_15 = null;
    String tableName_tOracleOutput_15 = null;
        dbschema_tOracleOutput_15 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_15 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_15=0;

        if(dbschema_tOracleOutput_15 == null || dbschema_tOracleOutput_15.trim().length() == 0) {
            tableName_tOracleOutput_15 = ("TST_ERRCMASIVO");
        } else {
            tableName_tOracleOutput_15 = dbschema_tOracleOutput_15 + "." + ("TST_ERRCMASIVO");
        }
                String delete_tOracleOutput_15 = "DELETE FROM " + tableName_tOracleOutput_15 + " WHERE TDOCUMENTOS_ID = ? AND DOCUMENTO = ? AND PERSONAS_ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_15 = conn_tOracleOutput_15.prepareStatement(delete_tOracleOutput_15);
                resourceMap.put("pstmt_tOracleOutput_15", pstmt_tOracleOutput_15);





 



/**
 * [tOracleOutput_15 begin ] stop
 */



	
	/**
	 * [tJavaRow_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_11", false);
		start_Hash.put("tJavaRow_11", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"IxPersona");
					}
				
		int tos_count_tJavaRow_11 = 0;
		

int nb_line_tJavaRow_11 = 0;

 



/**
 * [tJavaRow_11 begin ] stop
 */





	
	/**
	 * [tOracleOutput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_16", false);
		start_Hash.put("tOracleOutput_16", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_16";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tOracleOutput_16 = 0;
		






        int updateKeyCount_tOracleOutput_16 = 2;
        if(updateKeyCount_tOracleOutput_16 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_16 == 3 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_16 = 0;
    int nb_line_update_tOracleOutput_16 = 0;
    int nb_line_inserted_tOracleOutput_16 = 0;
    int nb_line_deleted_tOracleOutput_16 = 0;
    int nb_line_rejected_tOracleOutput_16 = 0;

    int tmp_batchUpdateCount_tOracleOutput_16 = 0;

    int deletedCount_tOracleOutput_16=0;
    int updatedCount_tOracleOutput_16=0;
    int insertedCount_tOracleOutput_16=0;
    int rowsToCommitCount_tOracleOutput_16=0;
    int rejectedCount_tOracleOutput_16=0;

    boolean whetherReject_tOracleOutput_16 = false;

    java.sql.Connection conn_tOracleOutput_16 = null;

    //optional table
    String dbschema_tOracleOutput_16 = null;
    String tableName_tOracleOutput_16 = null;
        dbschema_tOracleOutput_16 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_16 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_16=0;

        if(dbschema_tOracleOutput_16 == null || dbschema_tOracleOutput_16.trim().length() == 0) {
            tableName_tOracleOutput_16 = ("TST_CARGUEMASIVO");
        } else {
            tableName_tOracleOutput_16 = dbschema_tOracleOutput_16 + "." + ("TST_CARGUEMASIVO");
        }
                String update_tOracleOutput_16 = "UPDATE " + tableName_tOracleOutput_16 + " SET PROCESADO = ? WHERE TDOCUMENTOS_ID = ? AND DOCUMENTO = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_16 = conn_tOracleOutput_16.prepareStatement(update_tOracleOutput_16);
                resourceMap.put("pstmt_tOracleOutput_16", pstmt_tOracleOutput_16);





 



/**
 * [tOracleOutput_16 begin ] stop
 */



	
	/**
	 * [tJavaRow_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_12", false);
		start_Hash.put("tJavaRow_12", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"IxCarga");
					}
				
		int tos_count_tJavaRow_12 = 0;
		

int nb_line_tJavaRow_12 = 0;

 



/**
 * [tJavaRow_12 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) 
					globalMap.get( "tHash_Lookup_row18" ))
					;					
					
	

row18Struct row18HashKey = new row18Struct();
row18Struct row18Default = new row18Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
IxAfiliadosStruct IxAfiliados_tmp = new IxAfiliadosStruct();
IxPersonaStruct IxPersona_tmp = new IxPersonaStruct();
IxCargaStruct IxCarga_tmp = new IxCargaStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tOracleInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_4", false);
		start_Hash.put("tOracleInput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_4";
	
	
		int tos_count_tOracleInput_4 = 0;
		
	


	
		    int nb_line_tOracleInput_4 = 0;
		    java.sql.Connection conn_tOracleInput_4 = null;
				conn_tOracleInput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_4 = false;
				boolean isConnectionWrapped_tOracleInput_4 = !(conn_tOracleInput_4 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_4 = null;
                if (isConnectionWrapped_tOracleInput_4) {
					unwrappedOraConn_tOracleInput_4 = conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_4 != null) {
                        isTimeZoneNull_tOracleInput_4 = (unwrappedOraConn_tOracleInput_4.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_4 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_4).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_4) {
					java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_4.next()) {
						sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_4 && unwrappedOraConn_tOracleInput_4 != null) {
                        unwrappedOraConn_tOracleInput_4.setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement();

		    String dbquery_tOracleInput_4 = "select tdocumentos_id, documento, personas_id, procesado \nfrom tst_carguemasivo\nwhere (procesado != 9  or procesado i"
+"s null) "
;
		    

		    globalMap.put("tOracleInput_4_QUERY",dbquery_tOracleInput_4);

		    java.sql.ResultSet rs_tOracleInput_4 = null;

		    try {
		    	rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
		    	int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

		    String tmpContent_tOracleInput_4 = null;
		    
		    
		    while (rs_tOracleInput_4.next()) {
		        nb_line_tOracleInput_4++;
		        
							if(colQtyInRs_tOracleInput_4 < 1) {
								row17.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(1) != null) {
						row17.TDOCUMENTOS_ID = rs_tOracleInput_4.getInt(1);
					} else {
				
						row17.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 2) {
								row17.DOCUMENTO = null;
							} else {
	                         		
        	row17.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 3) {
								row17.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(3) != null) {
						row17.PERSONAS_ID = rs_tOracleInput_4.getInt(3);
					} else {
				
						row17.PERSONAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 4) {
								row17.PROCESADO = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(4) != null) {
						row17.PROCESADO = rs_tOracleInput_4.getInt(4);
					} else {
				
						row17.PROCESADO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_4 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 


	tos_count_tOracleInput_4++;

/**
 * [tOracleInput_4 main ] stop
 */
	
	/**
	 * [tOracleInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
						row18Struct row18 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row18" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow18 = false;
       		  	    	
       		  	    	
 							row18Struct row18ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
	                        		    	Object exprKeyValue_row18__PERSONAS_ID = row17.PERSONAS_ID ;
	                        		    	if(exprKeyValue_row18__PERSONAS_ID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_4 = true;
	                        		    	} else {
                        		    			row18HashKey.PERSONAS_ID = (int)(Integer) exprKeyValue_row18__PERSONAS_ID;
                        		    		}
                        		    		

								
		                        	row18HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_4) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row18.lookup( row18HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row18 != null && tHash_Lookup_row18.getCount(row18HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row18' and it contains more one result from keys :  row18.PERSONAS_ID = '" + row18HashKey.PERSONAS_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row18Struct fromLookup_row18 = null;
							row18 = row18Default;
										 
							
								 
							
							
								if (tHash_Lookup_row18 !=null && tHash_Lookup_row18.hasNext()) { // G 099
								
							
								
								fromLookup_row18 = tHash_Lookup_row18.next();

							
							
								} // G 099
							
							

							if(fromLookup_row18 != null) {
								row18 = fromLookup_row18;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

IxAfiliados = null;
IxPersona = null;
IxCarga = null;

boolean rejected_tMap_4 = true;

// # Output table : 'IxAfiliados'
// # Filter conditions 
if( 

row18.AFILIADOS_ID > 0

 ) {
rejected_tMap_4 = false;
IxAfiliados_tmp.TDOCUMENTOS_ID = row17.TDOCUMENTOS_ID ;
IxAfiliados_tmp.DOCUMENTO = row17.DOCUMENTO ;
IxAfiliados_tmp.PERSONAS_ID = row17.PERSONAS_ID ;
IxAfiliados_tmp.AFILIADOS_ID = row18.AFILIADOS_ID ;
IxAfiliados_tmp.PLANAFILIACIONES_ID = row18.PLANAFILIACIONES_ID ;
IxAfiliados = IxAfiliados_tmp;
} // closing filter/reject

// # Output table : 'IxPersona'
// # Filter conditions 
if( 

row18.AFILIADOS_ID ==0 &&  row17.PERSONAS_ID !=null &&  ( row17.PROCESADO != null ? row17.PROCESADO == 2: false )

 ) {
rejected_tMap_4 = false;
IxPersona_tmp.TDOCUMENTOS_ID = row17.TDOCUMENTOS_ID ;
IxPersona_tmp.DOCUMENTO = row17.DOCUMENTO ;
IxPersona_tmp.PERSONAS_ID = row17.PERSONAS_ID ;
IxPersona = IxPersona_tmp;
} // closing filter/reject
// ###### START REJECTS ##### 

// # Output reject table : 'IxCarga'
// # Filter conditions 
if( rejected_tMap_4 && (

 row17.PERSONAS_ID ==null


) ) {
IxCarga_tmp.TDOCUMENTOS_ID = row17.TDOCUMENTOS_ID ;
IxCarga_tmp.DOCUMENTO = row17.DOCUMENTO ;
IxCarga_tmp.PROCESADO = 1;
IxCarga = IxCarga_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "IxAfiliados"
if(IxAfiliados != null) { 



	
	/**
	 * [tJavaRow_10 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"IxAfiliados"
						
						);
					}
					

    //Code generate according to input schema and output schema
row20.TDOCUMENTOS_ID = IxAfiliados.TDOCUMENTOS_ID;
row20.DOCUMENTO = IxAfiliados.DOCUMENTO;
row20.PERSONAS_ID = IxAfiliados.PERSONAS_ID;
row20.AFILIADOS_ID = IxAfiliados.AFILIADOS_ID;
row20.PLANAFILIACIONES_ID = IxAfiliados.PLANAFILIACIONES_ID;

    nb_line_tJavaRow_10++;   

 


	tos_count_tJavaRow_10++;

/**
 * [tJavaRow_10 main ] stop
 */
	
	/**
	 * [tJavaRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

 



/**
 * [tJavaRow_10 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_13 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row20"
						
						);
					}
					



            row27 = null;
        whetherReject_tOracleOutput_13 = false;
                    pstmt_tOracleOutput_13.setInt(1, row20.AFILIADOS_ID);

                    if(row20.PLANAFILIACIONES_ID == null) {
pstmt_tOracleOutput_13.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_13.setInt(2, row20.PLANAFILIACIONES_ID);
}


                    if(row20.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_13.setNull(3 + count_tOracleOutput_13, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_13.setInt(3 + count_tOracleOutput_13, row20.TDOCUMENTOS_ID);
}


                    if(row20.DOCUMENTO == null) {
pstmt_tOracleOutput_13.setNull(4 + count_tOracleOutput_13, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_13.setString(4 + count_tOracleOutput_13, row20.DOCUMENTO);
}


                    if(row20.PERSONAS_ID == null) {
pstmt_tOracleOutput_13.setNull(5 + count_tOracleOutput_13, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_13.setInt(5 + count_tOracleOutput_13, row20.PERSONAS_ID);
}

                try {
                    nb_line_tOracleOutput_13++;
                    int processedCount_tOracleOutput_13 = pstmt_tOracleOutput_13.executeUpdate();
                    updatedCount_tOracleOutput_13 += processedCount_tOracleOutput_13;
                    rowsToCommitCount_tOracleOutput_13 += processedCount_tOracleOutput_13;
                } catch(java.lang.Exception e_tOracleOutput_13) {
globalMap.put("tOracleOutput_13_ERROR_MESSAGE",e_tOracleOutput_13.getMessage());
                    whetherReject_tOracleOutput_13 = true;
                            System.err.print(e_tOracleOutput_13.getMessage());
                }
            if(!whetherReject_tOracleOutput_13) {
                            row27 = new row27Struct();
                                row27.TDOCUMENTOS_ID = row20.TDOCUMENTOS_ID;
                                row27.DOCUMENTO = row20.DOCUMENTO;
                                row27.PERSONAS_ID = row20.PERSONAS_ID;
                                row27.AFILIADOS_ID = row20.AFILIADOS_ID;
                                row27.PLANAFILIACIONES_ID = row20.PLANAFILIACIONES_ID;
            }

 


	tos_count_tOracleOutput_13++;

/**
 * [tOracleOutput_13 main ] stop
 */
	
	/**
	 * [tOracleOutput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	

 



/**
 * [tOracleOutput_13 process_data_begin ] stop
 */
// Start of branch "row27"
if(row27 != null) { 



	
	/**
	 * [tJavaRow_13 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row27"
						
						);
					}
					

    //Code generate according to input schema and output schema
row28.TDOCUMENTOS_ID = row27.TDOCUMENTOS_ID;
row28.DOCUMENTO = row27.DOCUMENTO;
row28.PERSONAS_ID = row27.PERSONAS_ID;
row28.PROCESADO = 12;


    nb_line_tJavaRow_13++;   

 


	tos_count_tJavaRow_13++;

/**
 * [tJavaRow_13 main ] stop
 */
	
	/**
	 * [tJavaRow_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_13";
	
	

 



/**
 * [tJavaRow_13 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_18 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_18";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row28"
						
						);
					}
					



        whetherReject_tOracleOutput_18 = false;
                    if(row28.PROCESADO == null) {
pstmt_tOracleOutput_18.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_18.setInt(1, row28.PROCESADO);
}


                    if(row28.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_18.setNull(2 + count_tOracleOutput_18, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_18.setInt(2 + count_tOracleOutput_18, row28.TDOCUMENTOS_ID);
}


                    if(row28.DOCUMENTO == null) {
pstmt_tOracleOutput_18.setNull(3 + count_tOracleOutput_18, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_18.setString(3 + count_tOracleOutput_18, row28.DOCUMENTO);
}


                    if(row28.PERSONAS_ID == null) {
pstmt_tOracleOutput_18.setNull(4 + count_tOracleOutput_18, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_18.setInt(4 + count_tOracleOutput_18, row28.PERSONAS_ID);
}

                try {
                    nb_line_tOracleOutput_18++;
                    int processedCount_tOracleOutput_18 = pstmt_tOracleOutput_18.executeUpdate();
                    updatedCount_tOracleOutput_18 += processedCount_tOracleOutput_18;
                    rowsToCommitCount_tOracleOutput_18 += processedCount_tOracleOutput_18;
                } catch(java.lang.Exception e_tOracleOutput_18) {
globalMap.put("tOracleOutput_18_ERROR_MESSAGE",e_tOracleOutput_18.getMessage());
                    whetherReject_tOracleOutput_18 = true;
                            System.err.print(e_tOracleOutput_18.getMessage());
                }

 


	tos_count_tOracleOutput_18++;

/**
 * [tOracleOutput_18 main ] stop
 */
	
	/**
	 * [tOracleOutput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_18";
	
	

 



/**
 * [tOracleOutput_18 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_18";
	
	

 



/**
 * [tOracleOutput_18 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_13";
	
	

 



/**
 * [tJavaRow_13 process_data_end ] stop
 */

} // End of branch "row27"




	
	/**
	 * [tOracleOutput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	

 



/**
 * [tOracleOutput_13 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

 



/**
 * [tJavaRow_10 process_data_end ] stop
 */

} // End of branch "IxAfiliados"




// Start of branch "IxPersona"
if(IxPersona != null) { 



	
	/**
	 * [tJavaRow_11 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"IxPersona"
						
						);
					}
					

    //Code generate according to input schema and output schema
row24.TDOCUMENTOS_ID = IxPersona.TDOCUMENTOS_ID;
row24.DOCUMENTO = IxPersona.DOCUMENTO;
row24.PERSONAS_ID = IxPersona.PERSONAS_ID;

/*
System.out.println( "PERSONAS_ID: "+IxPersona.PERSONAS_ID );
System.out.println( "TDOCUMENTO_ID: "+IxPersona.TDOCUMENTOS_ID );
System.out.println( "DOCUMENTOS_ID: "+IxPersona.DOCUMENTO );*/
    nb_line_tJavaRow_11++;   

 


	tos_count_tJavaRow_11++;

/**
 * [tJavaRow_11 main ] stop
 */
	
	/**
	 * [tJavaRow_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";
	
	

 



/**
 * [tJavaRow_11 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_15 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row24"
						
						);
					}
					



        whetherReject_tOracleOutput_15 = false;
                    if(row24.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_15.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_15.setInt(1, row24.TDOCUMENTOS_ID);
}

                    if(row24.DOCUMENTO == null) {
pstmt_tOracleOutput_15.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_15.setString(2, row24.DOCUMENTO);
}

                    if(row24.PERSONAS_ID == null) {
pstmt_tOracleOutput_15.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_15.setInt(3, row24.PERSONAS_ID);
}

                try {
                    int processedCount_tOracleOutput_15 = pstmt_tOracleOutput_15.executeUpdate();
                    deletedCount_tOracleOutput_15 += processedCount_tOracleOutput_15;
                    rowsToCommitCount_tOracleOutput_15 += processedCount_tOracleOutput_15;
                    nb_line_tOracleOutput_15++;
                } catch(java.lang.Exception e_tOracleOutput_15) {
globalMap.put("tOracleOutput_15_ERROR_MESSAGE",e_tOracleOutput_15.getMessage());
                    whetherReject_tOracleOutput_15 = true;
                        nb_line_tOracleOutput_15++;
                            System.err.print(e_tOracleOutput_15.getMessage());
                }

 


	tos_count_tOracleOutput_15++;

/**
 * [tOracleOutput_15 main ] stop
 */
	
	/**
	 * [tOracleOutput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	

 



/**
 * [tOracleOutput_15 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	

 



/**
 * [tOracleOutput_15 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";
	
	

 



/**
 * [tJavaRow_11 process_data_end ] stop
 */

} // End of branch "IxPersona"




// Start of branch "IxCarga"
if(IxCarga != null) { 



	
	/**
	 * [tJavaRow_12 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"IxCarga"
						
						);
					}
					

    //Code generate according to input schema and output schema
row25.TDOCUMENTOS_ID = IxCarga.TDOCUMENTOS_ID;
row25.DOCUMENTO = IxCarga.DOCUMENTO;
row25.PROCESADO = IxCarga.PROCESADO;

    nb_line_tJavaRow_12++;   

 


	tos_count_tJavaRow_12++;

/**
 * [tJavaRow_12 main ] stop
 */
	
	/**
	 * [tJavaRow_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";
	
	

 



/**
 * [tJavaRow_12 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_16 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_16";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row25"
						
						);
					}
					



        whetherReject_tOracleOutput_16 = false;
                    if(row25.PROCESADO == null) {
pstmt_tOracleOutput_16.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_16.setInt(1, row25.PROCESADO);
}


                    if(row25.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_16.setNull(2 + count_tOracleOutput_16, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_16.setInt(2 + count_tOracleOutput_16, row25.TDOCUMENTOS_ID);
}


                    if(row25.DOCUMENTO == null) {
pstmt_tOracleOutput_16.setNull(3 + count_tOracleOutput_16, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_16.setString(3 + count_tOracleOutput_16, row25.DOCUMENTO);
}

                try {
                    nb_line_tOracleOutput_16++;
                    int processedCount_tOracleOutput_16 = pstmt_tOracleOutput_16.executeUpdate();
                    updatedCount_tOracleOutput_16 += processedCount_tOracleOutput_16;
                    rowsToCommitCount_tOracleOutput_16 += processedCount_tOracleOutput_16;
                } catch(java.lang.Exception e_tOracleOutput_16) {
globalMap.put("tOracleOutput_16_ERROR_MESSAGE",e_tOracleOutput_16.getMessage());
                    whetherReject_tOracleOutput_16 = true;
                            System.err.print(e_tOracleOutput_16.getMessage());
                }

 


	tos_count_tOracleOutput_16++;

/**
 * [tOracleOutput_16 main ] stop
 */
	
	/**
	 * [tOracleOutput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_16";
	
	

 



/**
 * [tOracleOutput_16 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_16";
	
	

 



/**
 * [tOracleOutput_16 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";
	
	

 



/**
 * [tJavaRow_12 process_data_end ] stop
 */

} // End of branch "IxCarga"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

}
}finally{
	if (rs_tOracleInput_4 != null) {
		rs_tOracleInput_4.close();
	}
	if (stmt_tOracleInput_4 != null) {
		stmt_tOracleInput_4.close();
	}
}

globalMap.put("tOracleInput_4_NB_LINE",nb_line_tOracleInput_4);
 

ok_Hash.put("tOracleInput_4", true);
end_Hash.put("tOracleInput_4", System.currentTimeMillis());




/**
 * [tOracleInput_4 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row18 != null) {
						tHash_Lookup_row18.endGet();
					}
					globalMap.remove( "tHash_Lookup_row18" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tJavaRow_10 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

globalMap.put("tJavaRow_10_NB_LINE",nb_line_tJavaRow_10);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"IxAfiliados");
			  	}
			  	
 

ok_Hash.put("tJavaRow_10", true);
end_Hash.put("tJavaRow_10", System.currentTimeMillis());




/**
 * [tJavaRow_10 end ] stop
 */

	
	/**
	 * [tOracleOutput_13 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	
	



	
        if(pstmt_tOracleOutput_13 != null) {
			
				pstmt_tOracleOutput_13.close();
				resourceMap.remove("pstmt_tOracleOutput_13");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_13", true);

	
	nb_line_deleted_tOracleOutput_13=nb_line_deleted_tOracleOutput_13+ deletedCount_tOracleOutput_13;
	nb_line_update_tOracleOutput_13=nb_line_update_tOracleOutput_13 + updatedCount_tOracleOutput_13;
	nb_line_inserted_tOracleOutput_13=nb_line_inserted_tOracleOutput_13 + insertedCount_tOracleOutput_13;
	nb_line_rejected_tOracleOutput_13=nb_line_rejected_tOracleOutput_13 + rejectedCount_tOracleOutput_13;
	
        globalMap.put("tOracleOutput_13_NB_LINE",nb_line_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_UPDATED",nb_line_update_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_13);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_13", true);
end_Hash.put("tOracleOutput_13", System.currentTimeMillis());




/**
 * [tOracleOutput_13 end ] stop
 */

	
	/**
	 * [tJavaRow_13 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_13";
	
	

globalMap.put("tJavaRow_13_NB_LINE",nb_line_tJavaRow_13);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tJavaRow_13", true);
end_Hash.put("tJavaRow_13", System.currentTimeMillis());




/**
 * [tJavaRow_13 end ] stop
 */

	
	/**
	 * [tOracleOutput_18 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_18";
	
	
	



	
        if(pstmt_tOracleOutput_18 != null) {
			
				pstmt_tOracleOutput_18.close();
				resourceMap.remove("pstmt_tOracleOutput_18");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_18", true);

	
	nb_line_deleted_tOracleOutput_18=nb_line_deleted_tOracleOutput_18+ deletedCount_tOracleOutput_18;
	nb_line_update_tOracleOutput_18=nb_line_update_tOracleOutput_18 + updatedCount_tOracleOutput_18;
	nb_line_inserted_tOracleOutput_18=nb_line_inserted_tOracleOutput_18 + insertedCount_tOracleOutput_18;
	nb_line_rejected_tOracleOutput_18=nb_line_rejected_tOracleOutput_18 + rejectedCount_tOracleOutput_18;
	
        globalMap.put("tOracleOutput_18_NB_LINE",nb_line_tOracleOutput_18);
        globalMap.put("tOracleOutput_18_NB_LINE_UPDATED",nb_line_update_tOracleOutput_18);
        globalMap.put("tOracleOutput_18_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_18);
        globalMap.put("tOracleOutput_18_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_18);
        globalMap.put("tOracleOutput_18_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_18);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_18", true);
end_Hash.put("tOracleOutput_18", System.currentTimeMillis());




/**
 * [tOracleOutput_18 end ] stop
 */













	
	/**
	 * [tJavaRow_11 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";
	
	

globalMap.put("tJavaRow_11_NB_LINE",nb_line_tJavaRow_11);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"IxPersona");
			  	}
			  	
 

ok_Hash.put("tJavaRow_11", true);
end_Hash.put("tJavaRow_11", System.currentTimeMillis());




/**
 * [tJavaRow_11 end ] stop
 */

	
	/**
	 * [tOracleOutput_15 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	
	



	
        if(pstmt_tOracleOutput_15 != null) {
			
				pstmt_tOracleOutput_15.close();
				resourceMap.remove("pstmt_tOracleOutput_15");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_15", true);

	
	nb_line_deleted_tOracleOutput_15=nb_line_deleted_tOracleOutput_15+ deletedCount_tOracleOutput_15;
	nb_line_update_tOracleOutput_15=nb_line_update_tOracleOutput_15 + updatedCount_tOracleOutput_15;
	nb_line_inserted_tOracleOutput_15=nb_line_inserted_tOracleOutput_15 + insertedCount_tOracleOutput_15;
	nb_line_rejected_tOracleOutput_15=nb_line_rejected_tOracleOutput_15 + rejectedCount_tOracleOutput_15;
	
        globalMap.put("tOracleOutput_15_NB_LINE",nb_line_tOracleOutput_15);
        globalMap.put("tOracleOutput_15_NB_LINE_UPDATED",nb_line_update_tOracleOutput_15);
        globalMap.put("tOracleOutput_15_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_15);
        globalMap.put("tOracleOutput_15_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_15);
        globalMap.put("tOracleOutput_15_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_15);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row24");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_15", true);
end_Hash.put("tOracleOutput_15", System.currentTimeMillis());




/**
 * [tOracleOutput_15 end ] stop
 */







	
	/**
	 * [tJavaRow_12 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";
	
	

globalMap.put("tJavaRow_12_NB_LINE",nb_line_tJavaRow_12);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"IxCarga");
			  	}
			  	
 

ok_Hash.put("tJavaRow_12", true);
end_Hash.put("tJavaRow_12", System.currentTimeMillis());




/**
 * [tJavaRow_12 end ] stop
 */

	
	/**
	 * [tOracleOutput_16 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_16";
	
	
	



	
        if(pstmt_tOracleOutput_16 != null) {
			
				pstmt_tOracleOutput_16.close();
				resourceMap.remove("pstmt_tOracleOutput_16");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_16", true);

	
	nb_line_deleted_tOracleOutput_16=nb_line_deleted_tOracleOutput_16+ deletedCount_tOracleOutput_16;
	nb_line_update_tOracleOutput_16=nb_line_update_tOracleOutput_16 + updatedCount_tOracleOutput_16;
	nb_line_inserted_tOracleOutput_16=nb_line_inserted_tOracleOutput_16 + insertedCount_tOracleOutput_16;
	nb_line_rejected_tOracleOutput_16=nb_line_rejected_tOracleOutput_16 + rejectedCount_tOracleOutput_16;
	
        globalMap.put("tOracleOutput_16_NB_LINE",nb_line_tOracleOutput_16);
        globalMap.put("tOracleOutput_16_NB_LINE_UPDATED",nb_line_update_tOracleOutput_16);
        globalMap.put("tOracleOutput_16_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_16);
        globalMap.put("tOracleOutput_16_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_16);
        globalMap.put("tOracleOutput_16_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_16);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_16", true);
end_Hash.put("tOracleOutput_16", System.currentTimeMillis());




/**
 * [tOracleOutput_16 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tOracleInput_12Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row18"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tJavaRow_10 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

 



/**
 * [tJavaRow_10 finally ] stop
 */

	
	/**
	 * [tOracleOutput_13 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_13") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_13 = null;
                if ((pstmtToClose_tOracleOutput_13 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_13")) != null) {
                    pstmtToClose_tOracleOutput_13.close();
                }
    }
 



/**
 * [tOracleOutput_13 finally ] stop
 */

	
	/**
	 * [tJavaRow_13 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_13";
	
	

 



/**
 * [tJavaRow_13 finally ] stop
 */

	
	/**
	 * [tOracleOutput_18 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_18";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_18") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_18 = null;
                if ((pstmtToClose_tOracleOutput_18 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_18")) != null) {
                    pstmtToClose_tOracleOutput_18.close();
                }
    }
 



/**
 * [tOracleOutput_18 finally ] stop
 */













	
	/**
	 * [tJavaRow_11 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";
	
	

 



/**
 * [tJavaRow_11 finally ] stop
 */

	
	/**
	 * [tOracleOutput_15 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_15";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_15") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_15 = null;
                if ((pstmtToClose_tOracleOutput_15 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_15")) != null) {
                    pstmtToClose_tOracleOutput_15.close();
                }
    }
 



/**
 * [tOracleOutput_15 finally ] stop
 */







	
	/**
	 * [tJavaRow_12 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";
	
	

 



/**
 * [tJavaRow_12 finally ] stop
 */

	
	/**
	 * [tOracleOutput_16 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_16";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_16") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_16 = null;
                if ((pstmtToClose_tOracleOutput_16 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_16")) != null) {
                    pstmtToClose_tOracleOutput_16.close();
                }
    }
 



/**
 * [tOracleOutput_16 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row41Struct implements routines.system.IPersistableRow<row41Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer REGISTROS;

				public Integer getREGISTROS () {
					return this.REGISTROS;
				}

				public Boolean REGISTROSIsNullable(){
				    return true;
				}
				public Boolean REGISTROSIsKey(){
				    return false;
				}
				public Integer REGISTROSLength(){
				    return 0;
				}
				public Integer REGISTROSPrecision(){
				    return 0;
				}
				public String REGISTROSDefault(){
				
					return "";
				
				}
				public String REGISTROSComment(){
				
				    return "";
				
				}
				public String REGISTROSPattern(){
				
					return "";
				
				}
				public String REGISTROSOriginalDbColumnName(){
				
					return "REGISTROS";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.REGISTROS = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.REGISTROS = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.REGISTROS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.REGISTROS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("REGISTROS="+String.valueOf(REGISTROS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row41Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row41Struct row41 = new row41Struct();




	
	/**
	 * [tJavaRow_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_18", false);
		start_Hash.put("tJavaRow_18", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_18";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row41");
					}
				
		int tos_count_tJavaRow_18 = 0;
		

int nb_line_tJavaRow_18 = 0;

 



/**
 * [tJavaRow_18 begin ] stop
 */



	
	/**
	 * [tOracleInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_12", false);
		start_Hash.put("tOracleInput_12", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_12";
	
	
		int tos_count_tOracleInput_12 = 0;
		
	


	
		    int nb_line_tOracleInput_12 = 0;
		    java.sql.Connection conn_tOracleInput_12 = null;
				conn_tOracleInput_12 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_12 = false;
				boolean isConnectionWrapped_tOracleInput_12 = !(conn_tOracleInput_12 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_12.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_12 = null;
                if (isConnectionWrapped_tOracleInput_12) {
					unwrappedOraConn_tOracleInput_12 = conn_tOracleInput_12.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_12 != null) {
                        isTimeZoneNull_tOracleInput_12 = (unwrappedOraConn_tOracleInput_12.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_12 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_12).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_12) {
					java.sql.Statement stmtGetTZ_tOracleInput_12 = conn_tOracleInput_12.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_12 = stmtGetTZ_tOracleInput_12.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_12 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_12.next()) {
						sessionTimezone_tOracleInput_12 = rsGetTZ_tOracleInput_12.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_12 && unwrappedOraConn_tOracleInput_12 != null) {
                        unwrappedOraConn_tOracleInput_12.setSessionTimeZone(sessionTimezone_tOracleInput_12);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_12).setSessionTimeZone(sessionTimezone_tOracleInput_12);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_12 = conn_tOracleInput_12.createStatement();

		    String dbquery_tOracleInput_12 = "select count(1) registros\n  from tst_carguemasivo\n  where procesado = 1";
		    

		    globalMap.put("tOracleInput_12_QUERY",dbquery_tOracleInput_12);

		    java.sql.ResultSet rs_tOracleInput_12 = null;

		    try {
		    	rs_tOracleInput_12 = stmt_tOracleInput_12.executeQuery(dbquery_tOracleInput_12);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_12 = rs_tOracleInput_12.getMetaData();
		    	int colQtyInRs_tOracleInput_12 = rsmd_tOracleInput_12.getColumnCount();

		    String tmpContent_tOracleInput_12 = null;
		    
		    
		    while (rs_tOracleInput_12.next()) {
		        nb_line_tOracleInput_12++;
		        
							if(colQtyInRs_tOracleInput_12 < 1) {
								row41.REGISTROS = null;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(1) != null) {
						row41.REGISTROS = rs_tOracleInput_12.getInt(1);
					} else {
				
						row41.REGISTROS = null;
					}
		                    }
					




 



/**
 * [tOracleInput_12 begin ] stop
 */
	
	/**
	 * [tOracleInput_12 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 


	tos_count_tOracleInput_12++;

/**
 * [tOracleInput_12 main ] stop
 */
	
	/**
	 * [tOracleInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_18 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_18";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row41"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.cregistros = row41.REGISTROS;

    nb_line_tJavaRow_18++;   

 


	tos_count_tJavaRow_18++;

/**
 * [tJavaRow_18 main ] stop
 */
	
	/**
	 * [tJavaRow_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_18";
	
	

 



/**
 * [tJavaRow_18 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_18";
	
	

 



/**
 * [tJavaRow_18 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_12 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

}
}finally{
	if (rs_tOracleInput_12 != null) {
		rs_tOracleInput_12.close();
	}
	if (stmt_tOracleInput_12 != null) {
		stmt_tOracleInput_12.close();
	}
}

globalMap.put("tOracleInput_12_NB_LINE",nb_line_tOracleInput_12);
 

ok_Hash.put("tOracleInput_12", true);
end_Hash.put("tOracleInput_12", System.currentTimeMillis());




/**
 * [tOracleInput_12 end ] stop
 */

	
	/**
	 * [tJavaRow_18 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_18";
	
	

globalMap.put("tJavaRow_18_NB_LINE",nb_line_tJavaRow_18);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row41");
			  	}
			  	
 

ok_Hash.put("tJavaRow_18", true);
end_Hash.put("tJavaRow_18", System.currentTimeMillis());

   			if (context.cregistros > 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If10", 0, "true");
					}
				tOracleInput_7Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If10", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_18 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_12:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
								} 
							
							tOracleInput_13Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_12 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 finally ] stop
 */

	
	/**
	 * [tJavaRow_18 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_18";
	
	

 



/**
 * [tJavaRow_18 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class InsPersonasStruct implements routines.system.IPersistableRow<InsPersonasStruct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 400;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 400;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 400;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 400;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer SEXO_ID;

				public Integer getSEXO_ID () {
					return this.SEXO_ID;
				}

				public Boolean SEXO_IDIsNullable(){
				    return true;
				}
				public Boolean SEXO_IDIsKey(){
				    return false;
				}
				public Integer SEXO_IDLength(){
				    return 0;
				}
				public Integer SEXO_IDPrecision(){
				    return null;
				}
				public String SEXO_IDDefault(){
				
					return "";
				
				}
				public String SEXO_IDComment(){
				
				    return "";
				
				}
				public String SEXO_IDPattern(){
				
					return "";
				
				}
				public String SEXO_IDOriginalDbColumnName(){
				
					return "SEXO_ID";
				
				}

				
			    public String DIRECCION;

				public String getDIRECCION () {
					return this.DIRECCION;
				}

				public Boolean DIRECCIONIsNullable(){
				    return true;
				}
				public Boolean DIRECCIONIsKey(){
				    return false;
				}
				public Integer DIRECCIONLength(){
				    return 400;
				}
				public Integer DIRECCIONPrecision(){
				    return 0;
				}
				public String DIRECCIONDefault(){
				
					return null;
				
				}
				public String DIRECCIONComment(){
				
				    return "";
				
				}
				public String DIRECCIONPattern(){
				
					return "";
				
				}
				public String DIRECCIONOriginalDbColumnName(){
				
					return "DIRECCION";
				
				}

				
			    public String TELEFONO;

				public String getTELEFONO () {
					return this.TELEFONO;
				}

				public Boolean TELEFONOIsNullable(){
				    return true;
				}
				public Boolean TELEFONOIsKey(){
				    return false;
				}
				public Integer TELEFONOLength(){
				    return 400;
				}
				public Integer TELEFONOPrecision(){
				    return 0;
				}
				public String TELEFONODefault(){
				
					return null;
				
				}
				public String TELEFONOComment(){
				
				    return "";
				
				}
				public String TELEFONOPattern(){
				
					return "";
				
				}
				public String TELEFONOOriginalDbColumnName(){
				
					return "TELEFONO";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return 400;
				}
				public Integer CELULARPrecision(){
				    return 0;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public String EMAIL;

				public String getEMAIL () {
					return this.EMAIL;
				}

				public Boolean EMAILIsNullable(){
				    return true;
				}
				public Boolean EMAILIsKey(){
				    return false;
				}
				public Integer EMAILLength(){
				    return 400;
				}
				public Integer EMAILPrecision(){
				    return 0;
				}
				public String EMAILDefault(){
				
					return null;
				
				}
				public String EMAILComment(){
				
				    return "";
				
				}
				public String EMAILPattern(){
				
					return "";
				
				}
				public String EMAILOriginalDbColumnName(){
				
					return "EMAIL";
				
				}

				
			    public java.util.Date FECHA_NACIMIENTO;

				public java.util.Date getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 0;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public Integer GSANGUINEOS_ID;

				public Integer getGSANGUINEOS_ID () {
					return this.GSANGUINEOS_ID;
				}

				public Boolean GSANGUINEOS_IDIsNullable(){
				    return true;
				}
				public Boolean GSANGUINEOS_IDIsKey(){
				    return false;
				}
				public Integer GSANGUINEOS_IDLength(){
				    return 0;
				}
				public Integer GSANGUINEOS_IDPrecision(){
				    return null;
				}
				public String GSANGUINEOS_IDDefault(){
				
					return "";
				
				}
				public String GSANGUINEOS_IDComment(){
				
				    return "";
				
				}
				public String GSANGUINEOS_IDPattern(){
				
					return "";
				
				}
				public String GSANGUINEOS_IDOriginalDbColumnName(){
				
					return "GSANGUINEOS_ID";
				
				}

				
			    public Integer NEDUCATIVOS_ID;

				public Integer getNEDUCATIVOS_ID () {
					return this.NEDUCATIVOS_ID;
				}

				public Boolean NEDUCATIVOS_IDIsNullable(){
				    return true;
				}
				public Boolean NEDUCATIVOS_IDIsKey(){
				    return false;
				}
				public Integer NEDUCATIVOS_IDLength(){
				    return 0;
				}
				public Integer NEDUCATIVOS_IDPrecision(){
				    return null;
				}
				public String NEDUCATIVOS_IDDefault(){
				
					return "";
				
				}
				public String NEDUCATIVOS_IDComment(){
				
				    return "";
				
				}
				public String NEDUCATIVOS_IDPattern(){
				
					return "";
				
				}
				public String NEDUCATIVOS_IDOriginalDbColumnName(){
				
					return "NEDUCATIVOS_ID";
				
				}

				
			    public Integer LUGAR_RESIDENCIA;

				public Integer getLUGAR_RESIDENCIA () {
					return this.LUGAR_RESIDENCIA;
				}

				public Boolean LUGAR_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean LUGAR_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer LUGAR_RESIDENCIALength(){
				    return 0;
				}
				public Integer LUGAR_RESIDENCIAPrecision(){
				    return null;
				}
				public String LUGAR_RESIDENCIADefault(){
				
					return "";
				
				}
				public String LUGAR_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String LUGAR_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String LUGAR_RESIDENCIAOriginalDbColumnName(){
				
					return "LUGAR_RESIDENCIA";
				
				}

				
			    public Integer ZRESIDENCIAS;

				public Integer getZRESIDENCIAS () {
					return this.ZRESIDENCIAS;
				}

				public Boolean ZRESIDENCIASIsNullable(){
				    return true;
				}
				public Boolean ZRESIDENCIASIsKey(){
				    return false;
				}
				public Integer ZRESIDENCIASLength(){
				    return 0;
				}
				public Integer ZRESIDENCIASPrecision(){
				    return null;
				}
				public String ZRESIDENCIASDefault(){
				
					return "";
				
				}
				public String ZRESIDENCIASComment(){
				
				    return "";
				
				}
				public String ZRESIDENCIASPattern(){
				
					return "";
				
				}
				public String ZRESIDENCIASOriginalDbColumnName(){
				
					return "ZRESIDENCIAS";
				
				}

				
			    public Integer ESMADSCRITO;

				public Integer getESMADSCRITO () {
					return this.ESMADSCRITO;
				}

				public Boolean ESMADSCRITOIsNullable(){
				    return true;
				}
				public Boolean ESMADSCRITOIsKey(){
				    return false;
				}
				public Integer ESMADSCRITOLength(){
				    return 0;
				}
				public Integer ESMADSCRITOPrecision(){
				    return null;
				}
				public String ESMADSCRITODefault(){
				
					return "";
				
				}
				public String ESMADSCRITOComment(){
				
				    return "";
				
				}
				public String ESMADSCRITOPattern(){
				
					return "";
				
				}
				public String ESMADSCRITOOriginalDbColumnName(){
				
					return "ESMADSCRITO";
				
				}

				
			    public Integer ETNICAS_ID;

				public Integer getETNICAS_ID () {
					return this.ETNICAS_ID;
				}

				public Boolean ETNICAS_IDIsNullable(){
				    return true;
				}
				public Boolean ETNICAS_IDIsKey(){
				    return false;
				}
				public Integer ETNICAS_IDLength(){
				    return 0;
				}
				public Integer ETNICAS_IDPrecision(){
				    return null;
				}
				public String ETNICAS_IDDefault(){
				
					return "";
				
				}
				public String ETNICAS_IDComment(){
				
				    return "";
				
				}
				public String ETNICAS_IDPattern(){
				
					return "";
				
				}
				public String ETNICAS_IDOriginalDbColumnName(){
				
					return "ETNICAS_ID";
				
				}

				
			    public Integer NSOCIOECONOMICOS_ID;

				public Integer getNSOCIOECONOMICOS_ID () {
					return this.NSOCIOECONOMICOS_ID;
				}

				public Boolean NSOCIOECONOMICOS_IDIsNullable(){
				    return true;
				}
				public Boolean NSOCIOECONOMICOS_IDIsKey(){
				    return false;
				}
				public Integer NSOCIOECONOMICOS_IDLength(){
				    return 0;
				}
				public Integer NSOCIOECONOMICOS_IDPrecision(){
				    return null;
				}
				public String NSOCIOECONOMICOS_IDDefault(){
				
					return "";
				
				}
				public String NSOCIOECONOMICOS_IDComment(){
				
				    return "";
				
				}
				public String NSOCIOECONOMICOS_IDPattern(){
				
					return "";
				
				}
				public String NSOCIOECONOMICOS_IDOriginalDbColumnName(){
				
					return "NSOCIOECONOMICOS_ID";
				
				}

				
			    public Integer OCUPACIONES_ID;

				public Integer getOCUPACIONES_ID () {
					return this.OCUPACIONES_ID;
				}

				public Boolean OCUPACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean OCUPACIONES_IDIsKey(){
				    return false;
				}
				public Integer OCUPACIONES_IDLength(){
				    return 0;
				}
				public Integer OCUPACIONES_IDPrecision(){
				    return null;
				}
				public String OCUPACIONES_IDDefault(){
				
					return "";
				
				}
				public String OCUPACIONES_IDComment(){
				
				    return "";
				
				}
				public String OCUPACIONES_IDPattern(){
				
					return "";
				
				}
				public String OCUPACIONES_IDOriginalDbColumnName(){
				
					return "OCUPACIONES_ID";
				
				}

				
			    public Integer ESTCIVILES_ID;

				public Integer getESTCIVILES_ID () {
					return this.ESTCIVILES_ID;
				}

				public Boolean ESTCIVILES_IDIsNullable(){
				    return true;
				}
				public Boolean ESTCIVILES_IDIsKey(){
				    return false;
				}
				public Integer ESTCIVILES_IDLength(){
				    return 0;
				}
				public Integer ESTCIVILES_IDPrecision(){
				    return null;
				}
				public String ESTCIVILES_IDDefault(){
				
					return "";
				
				}
				public String ESTCIVILES_IDComment(){
				
				    return "";
				
				}
				public String ESTCIVILES_IDPattern(){
				
					return "";
				
				}
				public String ESTCIVILES_IDOriginalDbColumnName(){
				
					return "ESTCIVILES_ID";
				
				}

				
			    public Double ESTATURA;

				public Double getESTATURA () {
					return this.ESTATURA;
				}

				public Boolean ESTATURAIsNullable(){
				    return true;
				}
				public Boolean ESTATURAIsKey(){
				    return false;
				}
				public Integer ESTATURALength(){
				    return 10;
				}
				public Integer ESTATURAPrecision(){
				    return 2;
				}
				public String ESTATURADefault(){
				
					return "";
				
				}
				public String ESTATURAComment(){
				
				    return "";
				
				}
				public String ESTATURAPattern(){
				
					return "";
				
				}
				public String ESTATURAOriginalDbColumnName(){
				
					return "ESTATURA";
				
				}

				
			    public Integer TDISCAPACIDADES_ID;

				public Integer getTDISCAPACIDADES_ID () {
					return this.TDISCAPACIDADES_ID;
				}

				public Boolean TDISCAPACIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean TDISCAPACIDADES_IDIsKey(){
				    return false;
				}
				public Integer TDISCAPACIDADES_IDLength(){
				    return 0;
				}
				public Integer TDISCAPACIDADES_IDPrecision(){
				    return null;
				}
				public String TDISCAPACIDADES_IDDefault(){
				
					return "";
				
				}
				public String TDISCAPACIDADES_IDComment(){
				
				    return "";
				
				}
				public String TDISCAPACIDADES_IDPattern(){
				
					return "";
				
				}
				public String TDISCAPACIDADES_IDOriginalDbColumnName(){
				
					return "TDISCAPACIDADES_ID";
				
				}

				
			    public Integer TVIVIENDA_ID;

				public Integer getTVIVIENDA_ID () {
					return this.TVIVIENDA_ID;
				}

				public Boolean TVIVIENDA_IDIsNullable(){
				    return true;
				}
				public Boolean TVIVIENDA_IDIsKey(){
				    return false;
				}
				public Integer TVIVIENDA_IDLength(){
				    return 0;
				}
				public Integer TVIVIENDA_IDPrecision(){
				    return null;
				}
				public String TVIVIENDA_IDDefault(){
				
					return "";
				
				}
				public String TVIVIENDA_IDComment(){
				
				    return "";
				
				}
				public String TVIVIENDA_IDPattern(){
				
					return "";
				
				}
				public String TVIVIENDA_IDOriginalDbColumnName(){
				
					return "TVIVIENDA_ID";
				
				}

				
			    public Integer LOCALIDADES_ID;

				public Integer getLOCALIDADES_ID () {
					return this.LOCALIDADES_ID;
				}

				public Boolean LOCALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean LOCALIDADES_IDIsKey(){
				    return false;
				}
				public Integer LOCALIDADES_IDLength(){
				    return 0;
				}
				public Integer LOCALIDADES_IDPrecision(){
				    return null;
				}
				public String LOCALIDADES_IDDefault(){
				
					return "";
				
				}
				public String LOCALIDADES_IDComment(){
				
				    return "";
				
				}
				public String LOCALIDADES_IDPattern(){
				
					return "";
				
				}
				public String LOCALIDADES_IDOriginalDbColumnName(){
				
					return "LOCALIDADES_ID";
				
				}

				
			    public Integer LUGAR_NACIMIENTO;

				public Integer getLUGAR_NACIMIENTO () {
					return this.LUGAR_NACIMIENTO;
				}

				public Boolean LUGAR_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean LUGAR_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer LUGAR_NACIMIENTOLength(){
				    return null;
				}
				public Integer LUGAR_NACIMIENTOPrecision(){
				    return null;
				}
				public String LUGAR_NACIMIENTODefault(){
				
					return null;
				
				}
				public String LUGAR_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String LUGAR_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String LUGAR_NACIMIENTOOriginalDbColumnName(){
				
					return "LUGAR_NACIMIENTO";
				
				}

				
			    public Integer LUGAR_EXPEDICION;

				public Integer getLUGAR_EXPEDICION () {
					return this.LUGAR_EXPEDICION;
				}

				public Boolean LUGAR_EXPEDICIONIsNullable(){
				    return true;
				}
				public Boolean LUGAR_EXPEDICIONIsKey(){
				    return false;
				}
				public Integer LUGAR_EXPEDICIONLength(){
				    return null;
				}
				public Integer LUGAR_EXPEDICIONPrecision(){
				    return null;
				}
				public String LUGAR_EXPEDICIONDefault(){
				
					return null;
				
				}
				public String LUGAR_EXPEDICIONComment(){
				
				    return "";
				
				}
				public String LUGAR_EXPEDICIONPattern(){
				
					return "";
				
				}
				public String LUGAR_EXPEDICIONOriginalDbColumnName(){
				
					return "LUGAR_EXPEDICION";
				
				}

				
			    public java.util.Date FECHA_EXPEDICION;

				public java.util.Date getFECHA_EXPEDICION () {
					return this.FECHA_EXPEDICION;
				}

				public Boolean FECHA_EXPEDICIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_EXPEDICIONIsKey(){
				    return false;
				}
				public Integer FECHA_EXPEDICIONLength(){
				    return null;
				}
				public Integer FECHA_EXPEDICIONPrecision(){
				    return null;
				}
				public String FECHA_EXPEDICIONDefault(){
				
					return null;
				
				}
				public String FECHA_EXPEDICIONComment(){
				
				    return "";
				
				}
				public String FECHA_EXPEDICIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_EXPEDICIONOriginalDbColumnName(){
				
					return "FECHA_EXPEDICION";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.SEXO_ID = readInteger(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.EMAIL = readString(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
						this.GSANGUINEOS_ID = readInteger(dis);
					
						this.NEDUCATIVOS_ID = readInteger(dis);
					
						this.LUGAR_RESIDENCIA = readInteger(dis);
					
						this.ZRESIDENCIAS = readInteger(dis);
					
						this.ESMADSCRITO = readInteger(dis);
					
						this.ETNICAS_ID = readInteger(dis);
					
						this.NSOCIOECONOMICOS_ID = readInteger(dis);
					
						this.OCUPACIONES_ID = readInteger(dis);
					
						this.ESTCIVILES_ID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESTATURA = null;
           				} else {
           			    	this.ESTATURA = dis.readDouble();
           				}
					
						this.TDISCAPACIDADES_ID = readInteger(dis);
					
						this.TVIVIENDA_ID = readInteger(dis);
					
						this.LOCALIDADES_ID = readInteger(dis);
					
						this.LUGAR_NACIMIENTO = readInteger(dis);
					
						this.LUGAR_EXPEDICION = readInteger(dis);
					
					this.FECHA_EXPEDICION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.SEXO_ID = readInteger(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.EMAIL = readString(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
						this.GSANGUINEOS_ID = readInteger(dis);
					
						this.NEDUCATIVOS_ID = readInteger(dis);
					
						this.LUGAR_RESIDENCIA = readInteger(dis);
					
						this.ZRESIDENCIAS = readInteger(dis);
					
						this.ESMADSCRITO = readInteger(dis);
					
						this.ETNICAS_ID = readInteger(dis);
					
						this.NSOCIOECONOMICOS_ID = readInteger(dis);
					
						this.OCUPACIONES_ID = readInteger(dis);
					
						this.ESTCIVILES_ID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESTATURA = null;
           				} else {
           			    	this.ESTATURA = dis.readDouble();
           				}
					
						this.TDISCAPACIDADES_ID = readInteger(dis);
					
						this.TVIVIENDA_ID = readInteger(dis);
					
						this.LOCALIDADES_ID = readInteger(dis);
					
						this.LUGAR_NACIMIENTO = readInteger(dis);
					
						this.LUGAR_EXPEDICION = readInteger(dis);
					
					this.FECHA_EXPEDICION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.SEXO_ID,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.GSANGUINEOS_ID,dos);
					
					// Integer
				
						writeInteger(this.NEDUCATIVOS_ID,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_RESIDENCIA,dos);
					
					// Integer
				
						writeInteger(this.ZRESIDENCIAS,dos);
					
					// Integer
				
						writeInteger(this.ESMADSCRITO,dos);
					
					// Integer
				
						writeInteger(this.ETNICAS_ID,dos);
					
					// Integer
				
						writeInteger(this.NSOCIOECONOMICOS_ID,dos);
					
					// Integer
				
						writeInteger(this.OCUPACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.ESTCIVILES_ID,dos);
					
					// Double
				
						if(this.ESTATURA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ESTATURA);
		            	}
					
					// Integer
				
						writeInteger(this.TDISCAPACIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.TVIVIENDA_ID,dos);
					
					// Integer
				
						writeInteger(this.LOCALIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_EXPEDICION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_EXPEDICION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.SEXO_ID,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.GSANGUINEOS_ID,dos);
					
					// Integer
				
						writeInteger(this.NEDUCATIVOS_ID,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_RESIDENCIA,dos);
					
					// Integer
				
						writeInteger(this.ZRESIDENCIAS,dos);
					
					// Integer
				
						writeInteger(this.ESMADSCRITO,dos);
					
					// Integer
				
						writeInteger(this.ETNICAS_ID,dos);
					
					// Integer
				
						writeInteger(this.NSOCIOECONOMICOS_ID,dos);
					
					// Integer
				
						writeInteger(this.OCUPACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.ESTCIVILES_ID,dos);
					
					// Double
				
						if(this.ESTATURA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ESTATURA);
		            	}
					
					// Integer
				
						writeInteger(this.TDISCAPACIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.TVIVIENDA_ID,dos);
					
					// Integer
				
						writeInteger(this.LOCALIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_EXPEDICION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_EXPEDICION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",SEXO_ID="+String.valueOf(SEXO_ID));
		sb.append(",DIRECCION="+DIRECCION);
		sb.append(",TELEFONO="+TELEFONO);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",EMAIL="+EMAIL);
		sb.append(",FECHA_NACIMIENTO="+String.valueOf(FECHA_NACIMIENTO));
		sb.append(",GSANGUINEOS_ID="+String.valueOf(GSANGUINEOS_ID));
		sb.append(",NEDUCATIVOS_ID="+String.valueOf(NEDUCATIVOS_ID));
		sb.append(",LUGAR_RESIDENCIA="+String.valueOf(LUGAR_RESIDENCIA));
		sb.append(",ZRESIDENCIAS="+String.valueOf(ZRESIDENCIAS));
		sb.append(",ESMADSCRITO="+String.valueOf(ESMADSCRITO));
		sb.append(",ETNICAS_ID="+String.valueOf(ETNICAS_ID));
		sb.append(",NSOCIOECONOMICOS_ID="+String.valueOf(NSOCIOECONOMICOS_ID));
		sb.append(",OCUPACIONES_ID="+String.valueOf(OCUPACIONES_ID));
		sb.append(",ESTCIVILES_ID="+String.valueOf(ESTCIVILES_ID));
		sb.append(",ESTATURA="+String.valueOf(ESTATURA));
		sb.append(",TDISCAPACIDADES_ID="+String.valueOf(TDISCAPACIDADES_ID));
		sb.append(",TVIVIENDA_ID="+String.valueOf(TVIVIENDA_ID));
		sb.append(",LOCALIDADES_ID="+String.valueOf(LOCALIDADES_ID));
		sb.append(",LUGAR_NACIMIENTO="+String.valueOf(LUGAR_NACIMIENTO));
		sb.append(",LUGAR_EXPEDICION="+String.valueOf(LUGAR_EXPEDICION));
		sb.append(",FECHA_EXPEDICION="+String.valueOf(FECHA_EXPEDICION));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(InsPersonasStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 400;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return 400;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return 0;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return null;
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 400;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return 400;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return 0;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return null;
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public Integer TDOCUMENTOS_ID;

				public Integer getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 400;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public Integer SEXO_ID;

				public Integer getSEXO_ID () {
					return this.SEXO_ID;
				}

				public Boolean SEXO_IDIsNullable(){
				    return true;
				}
				public Boolean SEXO_IDIsKey(){
				    return false;
				}
				public Integer SEXO_IDLength(){
				    return 0;
				}
				public Integer SEXO_IDPrecision(){
				    return null;
				}
				public String SEXO_IDDefault(){
				
					return "";
				
				}
				public String SEXO_IDComment(){
				
				    return "";
				
				}
				public String SEXO_IDPattern(){
				
					return "";
				
				}
				public String SEXO_IDOriginalDbColumnName(){
				
					return "SEXO_ID";
				
				}

				
			    public String DIRECCION;

				public String getDIRECCION () {
					return this.DIRECCION;
				}

				public Boolean DIRECCIONIsNullable(){
				    return true;
				}
				public Boolean DIRECCIONIsKey(){
				    return false;
				}
				public Integer DIRECCIONLength(){
				    return 400;
				}
				public Integer DIRECCIONPrecision(){
				    return 0;
				}
				public String DIRECCIONDefault(){
				
					return null;
				
				}
				public String DIRECCIONComment(){
				
				    return "";
				
				}
				public String DIRECCIONPattern(){
				
					return "";
				
				}
				public String DIRECCIONOriginalDbColumnName(){
				
					return "DIRECCION";
				
				}

				
			    public String TELEFONO;

				public String getTELEFONO () {
					return this.TELEFONO;
				}

				public Boolean TELEFONOIsNullable(){
				    return true;
				}
				public Boolean TELEFONOIsKey(){
				    return false;
				}
				public Integer TELEFONOLength(){
				    return 400;
				}
				public Integer TELEFONOPrecision(){
				    return 0;
				}
				public String TELEFONODefault(){
				
					return null;
				
				}
				public String TELEFONOComment(){
				
				    return "";
				
				}
				public String TELEFONOPattern(){
				
					return "";
				
				}
				public String TELEFONOOriginalDbColumnName(){
				
					return "TELEFONO";
				
				}

				
			    public String CELULAR;

				public String getCELULAR () {
					return this.CELULAR;
				}

				public Boolean CELULARIsNullable(){
				    return true;
				}
				public Boolean CELULARIsKey(){
				    return false;
				}
				public Integer CELULARLength(){
				    return 400;
				}
				public Integer CELULARPrecision(){
				    return 0;
				}
				public String CELULARDefault(){
				
					return null;
				
				}
				public String CELULARComment(){
				
				    return "";
				
				}
				public String CELULARPattern(){
				
					return "";
				
				}
				public String CELULAROriginalDbColumnName(){
				
					return "CELULAR";
				
				}

				
			    public String EMAIL;

				public String getEMAIL () {
					return this.EMAIL;
				}

				public Boolean EMAILIsNullable(){
				    return true;
				}
				public Boolean EMAILIsKey(){
				    return false;
				}
				public Integer EMAILLength(){
				    return 400;
				}
				public Integer EMAILPrecision(){
				    return 0;
				}
				public String EMAILDefault(){
				
					return null;
				
				}
				public String EMAILComment(){
				
				    return "";
				
				}
				public String EMAILPattern(){
				
					return "";
				
				}
				public String EMAILOriginalDbColumnName(){
				
					return "EMAIL";
				
				}

				
			    public java.util.Date FECHA_NACIMIENTO;

				public java.util.Date getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 0;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public Integer GSANGUINEOS_ID;

				public Integer getGSANGUINEOS_ID () {
					return this.GSANGUINEOS_ID;
				}

				public Boolean GSANGUINEOS_IDIsNullable(){
				    return true;
				}
				public Boolean GSANGUINEOS_IDIsKey(){
				    return false;
				}
				public Integer GSANGUINEOS_IDLength(){
				    return 0;
				}
				public Integer GSANGUINEOS_IDPrecision(){
				    return null;
				}
				public String GSANGUINEOS_IDDefault(){
				
					return "";
				
				}
				public String GSANGUINEOS_IDComment(){
				
				    return "";
				
				}
				public String GSANGUINEOS_IDPattern(){
				
					return "";
				
				}
				public String GSANGUINEOS_IDOriginalDbColumnName(){
				
					return "GSANGUINEOS_ID";
				
				}

				
			    public Integer NEDUCATIVOS_ID;

				public Integer getNEDUCATIVOS_ID () {
					return this.NEDUCATIVOS_ID;
				}

				public Boolean NEDUCATIVOS_IDIsNullable(){
				    return true;
				}
				public Boolean NEDUCATIVOS_IDIsKey(){
				    return false;
				}
				public Integer NEDUCATIVOS_IDLength(){
				    return 0;
				}
				public Integer NEDUCATIVOS_IDPrecision(){
				    return null;
				}
				public String NEDUCATIVOS_IDDefault(){
				
					return "";
				
				}
				public String NEDUCATIVOS_IDComment(){
				
				    return "";
				
				}
				public String NEDUCATIVOS_IDPattern(){
				
					return "";
				
				}
				public String NEDUCATIVOS_IDOriginalDbColumnName(){
				
					return "NEDUCATIVOS_ID";
				
				}

				
			    public Integer LUGAR_RESIDENCIA;

				public Integer getLUGAR_RESIDENCIA () {
					return this.LUGAR_RESIDENCIA;
				}

				public Boolean LUGAR_RESIDENCIAIsNullable(){
				    return true;
				}
				public Boolean LUGAR_RESIDENCIAIsKey(){
				    return false;
				}
				public Integer LUGAR_RESIDENCIALength(){
				    return 0;
				}
				public Integer LUGAR_RESIDENCIAPrecision(){
				    return null;
				}
				public String LUGAR_RESIDENCIADefault(){
				
					return "";
				
				}
				public String LUGAR_RESIDENCIAComment(){
				
				    return "";
				
				}
				public String LUGAR_RESIDENCIAPattern(){
				
					return "";
				
				}
				public String LUGAR_RESIDENCIAOriginalDbColumnName(){
				
					return "LUGAR_RESIDENCIA";
				
				}

				
			    public Integer ZRESIDENCIAS;

				public Integer getZRESIDENCIAS () {
					return this.ZRESIDENCIAS;
				}

				public Boolean ZRESIDENCIASIsNullable(){
				    return true;
				}
				public Boolean ZRESIDENCIASIsKey(){
				    return false;
				}
				public Integer ZRESIDENCIASLength(){
				    return 0;
				}
				public Integer ZRESIDENCIASPrecision(){
				    return null;
				}
				public String ZRESIDENCIASDefault(){
				
					return "";
				
				}
				public String ZRESIDENCIASComment(){
				
				    return "";
				
				}
				public String ZRESIDENCIASPattern(){
				
					return "";
				
				}
				public String ZRESIDENCIASOriginalDbColumnName(){
				
					return "ZRESIDENCIAS";
				
				}

				
			    public Integer ESMADSCRITO;

				public Integer getESMADSCRITO () {
					return this.ESMADSCRITO;
				}

				public Boolean ESMADSCRITOIsNullable(){
				    return true;
				}
				public Boolean ESMADSCRITOIsKey(){
				    return false;
				}
				public Integer ESMADSCRITOLength(){
				    return 0;
				}
				public Integer ESMADSCRITOPrecision(){
				    return null;
				}
				public String ESMADSCRITODefault(){
				
					return "";
				
				}
				public String ESMADSCRITOComment(){
				
				    return "";
				
				}
				public String ESMADSCRITOPattern(){
				
					return "";
				
				}
				public String ESMADSCRITOOriginalDbColumnName(){
				
					return "ESMADSCRITO";
				
				}

				
			    public Integer ETNICAS_ID;

				public Integer getETNICAS_ID () {
					return this.ETNICAS_ID;
				}

				public Boolean ETNICAS_IDIsNullable(){
				    return true;
				}
				public Boolean ETNICAS_IDIsKey(){
				    return false;
				}
				public Integer ETNICAS_IDLength(){
				    return 0;
				}
				public Integer ETNICAS_IDPrecision(){
				    return null;
				}
				public String ETNICAS_IDDefault(){
				
					return "";
				
				}
				public String ETNICAS_IDComment(){
				
				    return "";
				
				}
				public String ETNICAS_IDPattern(){
				
					return "";
				
				}
				public String ETNICAS_IDOriginalDbColumnName(){
				
					return "ETNICAS_ID";
				
				}

				
			    public Integer NSOCIOECONOMICOS_ID;

				public Integer getNSOCIOECONOMICOS_ID () {
					return this.NSOCIOECONOMICOS_ID;
				}

				public Boolean NSOCIOECONOMICOS_IDIsNullable(){
				    return true;
				}
				public Boolean NSOCIOECONOMICOS_IDIsKey(){
				    return false;
				}
				public Integer NSOCIOECONOMICOS_IDLength(){
				    return 0;
				}
				public Integer NSOCIOECONOMICOS_IDPrecision(){
				    return null;
				}
				public String NSOCIOECONOMICOS_IDDefault(){
				
					return "";
				
				}
				public String NSOCIOECONOMICOS_IDComment(){
				
				    return "";
				
				}
				public String NSOCIOECONOMICOS_IDPattern(){
				
					return "";
				
				}
				public String NSOCIOECONOMICOS_IDOriginalDbColumnName(){
				
					return "NSOCIOECONOMICOS_ID";
				
				}

				
			    public Integer OCUPACIONES_ID;

				public Integer getOCUPACIONES_ID () {
					return this.OCUPACIONES_ID;
				}

				public Boolean OCUPACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean OCUPACIONES_IDIsKey(){
				    return false;
				}
				public Integer OCUPACIONES_IDLength(){
				    return 0;
				}
				public Integer OCUPACIONES_IDPrecision(){
				    return null;
				}
				public String OCUPACIONES_IDDefault(){
				
					return "";
				
				}
				public String OCUPACIONES_IDComment(){
				
				    return "";
				
				}
				public String OCUPACIONES_IDPattern(){
				
					return "";
				
				}
				public String OCUPACIONES_IDOriginalDbColumnName(){
				
					return "OCUPACIONES_ID";
				
				}

				
			    public Integer ESTCIVILES_ID;

				public Integer getESTCIVILES_ID () {
					return this.ESTCIVILES_ID;
				}

				public Boolean ESTCIVILES_IDIsNullable(){
				    return true;
				}
				public Boolean ESTCIVILES_IDIsKey(){
				    return false;
				}
				public Integer ESTCIVILES_IDLength(){
				    return 0;
				}
				public Integer ESTCIVILES_IDPrecision(){
				    return null;
				}
				public String ESTCIVILES_IDDefault(){
				
					return "";
				
				}
				public String ESTCIVILES_IDComment(){
				
				    return "";
				
				}
				public String ESTCIVILES_IDPattern(){
				
					return "";
				
				}
				public String ESTCIVILES_IDOriginalDbColumnName(){
				
					return "ESTCIVILES_ID";
				
				}

				
			    public Double ESTATURA;

				public Double getESTATURA () {
					return this.ESTATURA;
				}

				public Boolean ESTATURAIsNullable(){
				    return true;
				}
				public Boolean ESTATURAIsKey(){
				    return false;
				}
				public Integer ESTATURALength(){
				    return 10;
				}
				public Integer ESTATURAPrecision(){
				    return 2;
				}
				public String ESTATURADefault(){
				
					return "";
				
				}
				public String ESTATURAComment(){
				
				    return "";
				
				}
				public String ESTATURAPattern(){
				
					return "";
				
				}
				public String ESTATURAOriginalDbColumnName(){
				
					return "ESTATURA";
				
				}

				
			    public Integer TDISCAPACIDADES_ID;

				public Integer getTDISCAPACIDADES_ID () {
					return this.TDISCAPACIDADES_ID;
				}

				public Boolean TDISCAPACIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean TDISCAPACIDADES_IDIsKey(){
				    return false;
				}
				public Integer TDISCAPACIDADES_IDLength(){
				    return 0;
				}
				public Integer TDISCAPACIDADES_IDPrecision(){
				    return null;
				}
				public String TDISCAPACIDADES_IDDefault(){
				
					return "";
				
				}
				public String TDISCAPACIDADES_IDComment(){
				
				    return "";
				
				}
				public String TDISCAPACIDADES_IDPattern(){
				
					return "";
				
				}
				public String TDISCAPACIDADES_IDOriginalDbColumnName(){
				
					return "TDISCAPACIDADES_ID";
				
				}

				
			    public Integer TVIVIENDA_ID;

				public Integer getTVIVIENDA_ID () {
					return this.TVIVIENDA_ID;
				}

				public Boolean TVIVIENDA_IDIsNullable(){
				    return true;
				}
				public Boolean TVIVIENDA_IDIsKey(){
				    return false;
				}
				public Integer TVIVIENDA_IDLength(){
				    return 0;
				}
				public Integer TVIVIENDA_IDPrecision(){
				    return null;
				}
				public String TVIVIENDA_IDDefault(){
				
					return "";
				
				}
				public String TVIVIENDA_IDComment(){
				
				    return "";
				
				}
				public String TVIVIENDA_IDPattern(){
				
					return "";
				
				}
				public String TVIVIENDA_IDOriginalDbColumnName(){
				
					return "TVIVIENDA_ID";
				
				}

				
			    public Integer LOCALIDADES_ID;

				public Integer getLOCALIDADES_ID () {
					return this.LOCALIDADES_ID;
				}

				public Boolean LOCALIDADES_IDIsNullable(){
				    return true;
				}
				public Boolean LOCALIDADES_IDIsKey(){
				    return false;
				}
				public Integer LOCALIDADES_IDLength(){
				    return 0;
				}
				public Integer LOCALIDADES_IDPrecision(){
				    return null;
				}
				public String LOCALIDADES_IDDefault(){
				
					return "";
				
				}
				public String LOCALIDADES_IDComment(){
				
				    return "";
				
				}
				public String LOCALIDADES_IDPattern(){
				
					return "";
				
				}
				public String LOCALIDADES_IDOriginalDbColumnName(){
				
					return "LOCALIDADES_ID";
				
				}

				
			    public Integer LUGAR_NACIMIENTO;

				public Integer getLUGAR_NACIMIENTO () {
					return this.LUGAR_NACIMIENTO;
				}

				public Boolean LUGAR_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean LUGAR_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer LUGAR_NACIMIENTOLength(){
				    return null;
				}
				public Integer LUGAR_NACIMIENTOPrecision(){
				    return null;
				}
				public String LUGAR_NACIMIENTODefault(){
				
					return null;
				
				}
				public String LUGAR_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String LUGAR_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String LUGAR_NACIMIENTOOriginalDbColumnName(){
				
					return "LUGAR_NACIMIENTO";
				
				}

				
			    public Integer LUGAR_EXPEDICION;

				public Integer getLUGAR_EXPEDICION () {
					return this.LUGAR_EXPEDICION;
				}

				public Boolean LUGAR_EXPEDICIONIsNullable(){
				    return true;
				}
				public Boolean LUGAR_EXPEDICIONIsKey(){
				    return false;
				}
				public Integer LUGAR_EXPEDICIONLength(){
				    return null;
				}
				public Integer LUGAR_EXPEDICIONPrecision(){
				    return null;
				}
				public String LUGAR_EXPEDICIONDefault(){
				
					return null;
				
				}
				public String LUGAR_EXPEDICIONComment(){
				
				    return "";
				
				}
				public String LUGAR_EXPEDICIONPattern(){
				
					return "";
				
				}
				public String LUGAR_EXPEDICIONOriginalDbColumnName(){
				
					return "LUGAR_EXPEDICION";
				
				}

				
			    public java.util.Date FECHA_EXPEDICION;

				public java.util.Date getFECHA_EXPEDICION () {
					return this.FECHA_EXPEDICION;
				}

				public Boolean FECHA_EXPEDICIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_EXPEDICIONIsKey(){
				    return false;
				}
				public Integer FECHA_EXPEDICIONLength(){
				    return null;
				}
				public Integer FECHA_EXPEDICIONPrecision(){
				    return null;
				}
				public String FECHA_EXPEDICIONDefault(){
				
					return null;
				
				}
				public String FECHA_EXPEDICIONComment(){
				
				    return "";
				
				}
				public String FECHA_EXPEDICIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_EXPEDICIONOriginalDbColumnName(){
				
					return "FECHA_EXPEDICION";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.SEXO_ID = readInteger(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.EMAIL = readString(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
						this.GSANGUINEOS_ID = readInteger(dis);
					
						this.NEDUCATIVOS_ID = readInteger(dis);
					
						this.LUGAR_RESIDENCIA = readInteger(dis);
					
						this.ZRESIDENCIAS = readInteger(dis);
					
						this.ESMADSCRITO = readInteger(dis);
					
						this.ETNICAS_ID = readInteger(dis);
					
						this.NSOCIOECONOMICOS_ID = readInteger(dis);
					
						this.OCUPACIONES_ID = readInteger(dis);
					
						this.ESTCIVILES_ID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESTATURA = null;
           				} else {
           			    	this.ESTATURA = dis.readDouble();
           				}
					
						this.TDISCAPACIDADES_ID = readInteger(dis);
					
						this.TVIVIENDA_ID = readInteger(dis);
					
						this.LOCALIDADES_ID = readInteger(dis);
					
						this.LUGAR_NACIMIENTO = readInteger(dis);
					
						this.LUGAR_EXPEDICION = readInteger(dis);
					
					this.FECHA_EXPEDICION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
						this.TDOCUMENTOS_ID = readInteger(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.SEXO_ID = readInteger(dis);
					
					this.DIRECCION = readString(dis);
					
					this.TELEFONO = readString(dis);
					
					this.CELULAR = readString(dis);
					
					this.EMAIL = readString(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
						this.GSANGUINEOS_ID = readInteger(dis);
					
						this.NEDUCATIVOS_ID = readInteger(dis);
					
						this.LUGAR_RESIDENCIA = readInteger(dis);
					
						this.ZRESIDENCIAS = readInteger(dis);
					
						this.ESMADSCRITO = readInteger(dis);
					
						this.ETNICAS_ID = readInteger(dis);
					
						this.NSOCIOECONOMICOS_ID = readInteger(dis);
					
						this.OCUPACIONES_ID = readInteger(dis);
					
						this.ESTCIVILES_ID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ESTATURA = null;
           				} else {
           			    	this.ESTATURA = dis.readDouble();
           				}
					
						this.TDISCAPACIDADES_ID = readInteger(dis);
					
						this.TVIVIENDA_ID = readInteger(dis);
					
						this.LOCALIDADES_ID = readInteger(dis);
					
						this.LUGAR_NACIMIENTO = readInteger(dis);
					
						this.LUGAR_EXPEDICION = readInteger(dis);
					
					this.FECHA_EXPEDICION = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.SEXO_ID,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.GSANGUINEOS_ID,dos);
					
					// Integer
				
						writeInteger(this.NEDUCATIVOS_ID,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_RESIDENCIA,dos);
					
					// Integer
				
						writeInteger(this.ZRESIDENCIAS,dos);
					
					// Integer
				
						writeInteger(this.ESMADSCRITO,dos);
					
					// Integer
				
						writeInteger(this.ETNICAS_ID,dos);
					
					// Integer
				
						writeInteger(this.NSOCIOECONOMICOS_ID,dos);
					
					// Integer
				
						writeInteger(this.OCUPACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.ESTCIVILES_ID,dos);
					
					// Double
				
						if(this.ESTATURA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ESTATURA);
		            	}
					
					// Integer
				
						writeInteger(this.TDISCAPACIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.TVIVIENDA_ID,dos);
					
					// Integer
				
						writeInteger(this.LOCALIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_EXPEDICION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_EXPEDICION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// Integer
				
						writeInteger(this.TDOCUMENTOS_ID,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// Integer
				
						writeInteger(this.SEXO_ID,dos);
					
					// String
				
						writeString(this.DIRECCION,dos);
					
					// String
				
						writeString(this.TELEFONO,dos);
					
					// String
				
						writeString(this.CELULAR,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.GSANGUINEOS_ID,dos);
					
					// Integer
				
						writeInteger(this.NEDUCATIVOS_ID,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_RESIDENCIA,dos);
					
					// Integer
				
						writeInteger(this.ZRESIDENCIAS,dos);
					
					// Integer
				
						writeInteger(this.ESMADSCRITO,dos);
					
					// Integer
				
						writeInteger(this.ETNICAS_ID,dos);
					
					// Integer
				
						writeInteger(this.NSOCIOECONOMICOS_ID,dos);
					
					// Integer
				
						writeInteger(this.OCUPACIONES_ID,dos);
					
					// Integer
				
						writeInteger(this.ESTCIVILES_ID,dos);
					
					// Double
				
						if(this.ESTATURA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ESTATURA);
		            	}
					
					// Integer
				
						writeInteger(this.TDISCAPACIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.TVIVIENDA_ID,dos);
					
					// Integer
				
						writeInteger(this.LOCALIDADES_ID,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_NACIMIENTO,dos);
					
					// Integer
				
						writeInteger(this.LUGAR_EXPEDICION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_EXPEDICION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",SEXO_ID="+String.valueOf(SEXO_ID));
		sb.append(",DIRECCION="+DIRECCION);
		sb.append(",TELEFONO="+TELEFONO);
		sb.append(",CELULAR="+CELULAR);
		sb.append(",EMAIL="+EMAIL);
		sb.append(",FECHA_NACIMIENTO="+String.valueOf(FECHA_NACIMIENTO));
		sb.append(",GSANGUINEOS_ID="+String.valueOf(GSANGUINEOS_ID));
		sb.append(",NEDUCATIVOS_ID="+String.valueOf(NEDUCATIVOS_ID));
		sb.append(",LUGAR_RESIDENCIA="+String.valueOf(LUGAR_RESIDENCIA));
		sb.append(",ZRESIDENCIAS="+String.valueOf(ZRESIDENCIAS));
		sb.append(",ESMADSCRITO="+String.valueOf(ESMADSCRITO));
		sb.append(",ETNICAS_ID="+String.valueOf(ETNICAS_ID));
		sb.append(",NSOCIOECONOMICOS_ID="+String.valueOf(NSOCIOECONOMICOS_ID));
		sb.append(",OCUPACIONES_ID="+String.valueOf(OCUPACIONES_ID));
		sb.append(",ESTCIVILES_ID="+String.valueOf(ESTCIVILES_ID));
		sb.append(",ESTATURA="+String.valueOf(ESTATURA));
		sb.append(",TDISCAPACIDADES_ID="+String.valueOf(TDISCAPACIDADES_ID));
		sb.append(",TVIVIENDA_ID="+String.valueOf(TVIVIENDA_ID));
		sb.append(",LOCALIDADES_ID="+String.valueOf(LOCALIDADES_ID));
		sb.append(",LUGAR_NACIMIENTO="+String.valueOf(LUGAR_NACIMIENTO));
		sb.append(",LUGAR_EXPEDICION="+String.valueOf(LUGAR_EXPEDICION));
		sb.append(",FECHA_EXPEDICION="+String.valueOf(FECHA_EXPEDICION));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row26Struct row26 = new row26Struct();
InsPersonasStruct InsPersonas = new InsPersonasStruct();





	
	/**
	 * [tOracleOutput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_14", false);
		start_Hash.put("tOracleOutput_14", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"InsPersonas");
					}
				
		int tos_count_tOracleOutput_14 = 0;
		






    
    int nb_line_tOracleOutput_14 = 0;
    int nb_line_update_tOracleOutput_14 = 0;
    int nb_line_inserted_tOracleOutput_14 = 0;
    int nb_line_deleted_tOracleOutput_14 = 0;
    int nb_line_rejected_tOracleOutput_14 = 0;

    int tmp_batchUpdateCount_tOracleOutput_14 = 0;

    int deletedCount_tOracleOutput_14=0;
    int updatedCount_tOracleOutput_14=0;
    int insertedCount_tOracleOutput_14=0;
    int rowsToCommitCount_tOracleOutput_14=0;
    int rejectedCount_tOracleOutput_14=0;

    boolean whetherReject_tOracleOutput_14 = false;

    java.sql.Connection conn_tOracleOutput_14 = null;

    //optional table
    String dbschema_tOracleOutput_14 = null;
    String tableName_tOracleOutput_14 = null;
        dbschema_tOracleOutput_14 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_14 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_14=0;

        if(dbschema_tOracleOutput_14 == null || dbschema_tOracleOutput_14.trim().length() == 0) {
            tableName_tOracleOutput_14 = ("GEN_PERSONAS");
        } else {
            tableName_tOracleOutput_14 = dbschema_tOracleOutput_14 + "." + ("GEN_PERSONAS");
        }
                String insert_tOracleOutput_14 = "INSERT INTO " + tableName_tOracleOutput_14 + " (PRIMER_NOMBRE,SEGUNDO_NOMBRE,PRIMER_APELLIDO,SEGUNDO_APELLIDO,TDOCUMENTOS_ID,DOCUMENTO,SEXO_ID,DIRECCION,TELEFONO,CELULAR,EMAIL,FECHA_NACIMIENTO,GSANGUINEOS_ID,NEDUCATIVOS_ID,LUGAR_RESIDENCIA,ZRESIDENCIAS,ESMADSCRITO,ETNICAS_ID,NSOCIOECONOMICOS_ID,OCUPACIONES_ID,ESTCIVILES_ID,ESTATURA,TDISCAPACIDADES_ID,TVIVIENDA_ID,LOCALIDADES_ID,LUGAR_NACIMIENTO,LUGAR_EXPEDICION,FECHA_EXPEDICION) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_14 = conn_tOracleOutput_14.prepareStatement(insert_tOracleOutput_14);
                        resourceMap.put("pstmt_tOracleOutput_14", pstmt_tOracleOutput_14);





 



/**
 * [tOracleOutput_14 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row26");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
InsPersonasStruct InsPersonas_tmp = new InsPersonasStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tOracleInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_7", false);
		start_Hash.put("tOracleInput_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_7";
	
	
		int tos_count_tOracleInput_7 = 0;
		
	


	
		    int nb_line_tOracleInput_7 = 0;
		    java.sql.Connection conn_tOracleInput_7 = null;
				conn_tOracleInput_7 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_7 = false;
				boolean isConnectionWrapped_tOracleInput_7 = !(conn_tOracleInput_7 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_7.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_7 = null;
                if (isConnectionWrapped_tOracleInput_7) {
					unwrappedOraConn_tOracleInput_7 = conn_tOracleInput_7.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_7 != null) {
                        isTimeZoneNull_tOracleInput_7 = (unwrappedOraConn_tOracleInput_7.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_7 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_7).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_7) {
					java.sql.Statement stmtGetTZ_tOracleInput_7 = conn_tOracleInput_7.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_7 = stmtGetTZ_tOracleInput_7.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_7 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_7.next()) {
						sessionTimezone_tOracleInput_7 = rsGetTZ_tOracleInput_7.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_7 && unwrappedOraConn_tOracleInput_7 != null) {
                        unwrappedOraConn_tOracleInput_7.setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_7).setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_7 = conn_tOracleInput_7.createStatement();

		    String dbquery_tOracleInput_7 = "select primer_nombre, \n	   segundo_nombre, \n	   primer_apellido, \n	   segundo_apellido,\n       tdocumentos_id, \n  "
+"     documento, \n       sexos_id sexo_id,\n       direccion, \n       telefono,\n       celular, \n       correo_electr"
+"onico email, \n       fecha_nacimiento, \n       gsanguineos_id,\n       neducativos_id, \n       lugar_residencia, \n  "
+"     zresidencias, \n       esmadscrito, \n       etnicas_id, \n       nsocioeconomicos_id, \n       ocupaciones_id, \n "
+"      estciviles_id, \n       estatura, \n       tdiscapacidades_id, \n       tvivienda_id,  \n       decode(localidades"
+"_id,0, null, localidades_id) localidades_id,\n       LUGAR_NACIMIENTO,\n       LUGAR_EXP_DOC AS LUGAR_EXPEDICION,\n     "
+"  FECHA_EXPEDICION_DOCUMENTO AS FECHA_EXPEDICION\n from tst_carguemasivo\n where procesado = 1";
		    

		    globalMap.put("tOracleInput_7_QUERY",dbquery_tOracleInput_7);

		    java.sql.ResultSet rs_tOracleInput_7 = null;

		    try {
		    	rs_tOracleInput_7 = stmt_tOracleInput_7.executeQuery(dbquery_tOracleInput_7);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_7 = rs_tOracleInput_7.getMetaData();
		    	int colQtyInRs_tOracleInput_7 = rsmd_tOracleInput_7.getColumnCount();

		    String tmpContent_tOracleInput_7 = null;
		    
		    
		    while (rs_tOracleInput_7.next()) {
		        nb_line_tOracleInput_7++;
		        
							if(colQtyInRs_tOracleInput_7 < 1) {
								row26.PRIMER_NOMBRE = null;
							} else {
	                         		
        	row26.PRIMER_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 2) {
								row26.SEGUNDO_NOMBRE = null;
							} else {
	                         		
        	row26.SEGUNDO_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 3) {
								row26.PRIMER_APELLIDO = null;
							} else {
	                         		
        	row26.PRIMER_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 4) {
								row26.SEGUNDO_APELLIDO = null;
							} else {
	                         		
        	row26.SEGUNDO_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 5) {
								row26.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(5) != null) {
						row26.TDOCUMENTOS_ID = rs_tOracleInput_7.getInt(5);
					} else {
				
						row26.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 6) {
								row26.DOCUMENTO = null;
							} else {
	                         		
        	row26.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 7) {
								row26.SEXO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(7) != null) {
						row26.SEXO_ID = rs_tOracleInput_7.getInt(7);
					} else {
				
						row26.SEXO_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 8) {
								row26.DIRECCION = null;
							} else {
	                         		
        	row26.DIRECCION = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 9) {
								row26.TELEFONO = null;
							} else {
	                         		
        	row26.TELEFONO = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 10) {
								row26.CELULAR = null;
							} else {
	                         		
        	row26.CELULAR = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 11) {
								row26.EMAIL = null;
							} else {
	                         		
        	row26.EMAIL = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 12) {
								row26.FECHA_NACIMIENTO = null;
							} else {
										
			row26.FECHA_NACIMIENTO = routines.system.JDBCUtil.getDate(rs_tOracleInput_7, 12);
		                    }
							if(colQtyInRs_tOracleInput_7 < 13) {
								row26.GSANGUINEOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(13) != null) {
						row26.GSANGUINEOS_ID = rs_tOracleInput_7.getInt(13);
					} else {
				
						row26.GSANGUINEOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 14) {
								row26.NEDUCATIVOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(14) != null) {
						row26.NEDUCATIVOS_ID = rs_tOracleInput_7.getInt(14);
					} else {
				
						row26.NEDUCATIVOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 15) {
								row26.LUGAR_RESIDENCIA = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(15) != null) {
						row26.LUGAR_RESIDENCIA = rs_tOracleInput_7.getInt(15);
					} else {
				
						row26.LUGAR_RESIDENCIA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 16) {
								row26.ZRESIDENCIAS = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(16) != null) {
						row26.ZRESIDENCIAS = rs_tOracleInput_7.getInt(16);
					} else {
				
						row26.ZRESIDENCIAS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 17) {
								row26.ESMADSCRITO = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(17) != null) {
						row26.ESMADSCRITO = rs_tOracleInput_7.getInt(17);
					} else {
				
						row26.ESMADSCRITO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 18) {
								row26.ETNICAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(18) != null) {
						row26.ETNICAS_ID = rs_tOracleInput_7.getInt(18);
					} else {
				
						row26.ETNICAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 19) {
								row26.NSOCIOECONOMICOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(19) != null) {
						row26.NSOCIOECONOMICOS_ID = rs_tOracleInput_7.getInt(19);
					} else {
				
						row26.NSOCIOECONOMICOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 20) {
								row26.OCUPACIONES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(20) != null) {
						row26.OCUPACIONES_ID = rs_tOracleInput_7.getInt(20);
					} else {
				
						row26.OCUPACIONES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 21) {
								row26.ESTCIVILES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(21) != null) {
						row26.ESTCIVILES_ID = rs_tOracleInput_7.getInt(21);
					} else {
				
						row26.ESTCIVILES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 22) {
								row26.ESTATURA = null;
							} else {
	                         		
				row26.ESTATURA = routines.system.JDBCUtil.getDoubleObject(rs_tOracleInput_7, 22);
		                    }
							if(colQtyInRs_tOracleInput_7 < 23) {
								row26.TDISCAPACIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(23) != null) {
						row26.TDISCAPACIDADES_ID = rs_tOracleInput_7.getInt(23);
					} else {
				
						row26.TDISCAPACIDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 24) {
								row26.TVIVIENDA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(24) != null) {
						row26.TVIVIENDA_ID = rs_tOracleInput_7.getInt(24);
					} else {
				
						row26.TVIVIENDA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 25) {
								row26.LOCALIDADES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(25) != null) {
						row26.LOCALIDADES_ID = rs_tOracleInput_7.getInt(25);
					} else {
				
						row26.LOCALIDADES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 26) {
								row26.LUGAR_NACIMIENTO = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(26) != null) {
						row26.LUGAR_NACIMIENTO = rs_tOracleInput_7.getInt(26);
					} else {
				
						row26.LUGAR_NACIMIENTO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 27) {
								row26.LUGAR_EXPEDICION = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(27) != null) {
						row26.LUGAR_EXPEDICION = rs_tOracleInput_7.getInt(27);
					} else {
				
						row26.LUGAR_EXPEDICION = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 28) {
								row26.FECHA_EXPEDICION = null;
							} else {
										
			row26.FECHA_EXPEDICION = routines.system.JDBCUtil.getDate(rs_tOracleInput_7, 28);
		                    }
					




 



/**
 * [tOracleInput_7 begin ] stop
 */
	
	/**
	 * [tOracleInput_7 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 


	tos_count_tOracleInput_7++;

/**
 * [tOracleInput_7 main ] stop
 */
	
	/**
	 * [tOracleInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row26"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

InsPersonas = null;


// # Output table : 'InsPersonas'
InsPersonas_tmp.PRIMER_NOMBRE = row26.PRIMER_NOMBRE ;
InsPersonas_tmp.SEGUNDO_NOMBRE = row26.SEGUNDO_NOMBRE ;
InsPersonas_tmp.PRIMER_APELLIDO = row26.PRIMER_APELLIDO ;
InsPersonas_tmp.SEGUNDO_APELLIDO = row26.SEGUNDO_APELLIDO ;
InsPersonas_tmp.TDOCUMENTOS_ID = row26.TDOCUMENTOS_ID ;
InsPersonas_tmp.DOCUMENTO = row26.DOCUMENTO ;
InsPersonas_tmp.SEXO_ID = row26.SEXO_ID ;
InsPersonas_tmp.DIRECCION = row26.DIRECCION ;
InsPersonas_tmp.TELEFONO = row26.TELEFONO ;
InsPersonas_tmp.CELULAR = row26.CELULAR ;
InsPersonas_tmp.EMAIL = row26.EMAIL ;
InsPersonas_tmp.FECHA_NACIMIENTO = row26.FECHA_NACIMIENTO ;
InsPersonas_tmp.GSANGUINEOS_ID = row26.GSANGUINEOS_ID ;
InsPersonas_tmp.NEDUCATIVOS_ID = row26.NEDUCATIVOS_ID ;
InsPersonas_tmp.LUGAR_RESIDENCIA = row26.LUGAR_RESIDENCIA ;
InsPersonas_tmp.ZRESIDENCIAS = row26.ZRESIDENCIAS ;
InsPersonas_tmp.ESMADSCRITO = row26.ESMADSCRITO ;
InsPersonas_tmp.ETNICAS_ID = row26.ETNICAS_ID ;
InsPersonas_tmp.NSOCIOECONOMICOS_ID = row26.NSOCIOECONOMICOS_ID ;
InsPersonas_tmp.OCUPACIONES_ID = row26.OCUPACIONES_ID ;
InsPersonas_tmp.ESTCIVILES_ID = row26.ESTCIVILES_ID ;
InsPersonas_tmp.ESTATURA = row26.ESTATURA ;
InsPersonas_tmp.TDISCAPACIDADES_ID = row26.TDISCAPACIDADES_ID ;
InsPersonas_tmp.TVIVIENDA_ID = row26.TVIVIENDA_ID ;
InsPersonas_tmp.LOCALIDADES_ID = row26.LOCALIDADES_ID ;
InsPersonas_tmp.LUGAR_NACIMIENTO = row26.LUGAR_NACIMIENTO;
InsPersonas_tmp.LUGAR_EXPEDICION = row26.LUGAR_EXPEDICION;
InsPersonas_tmp.FECHA_EXPEDICION = row26.FECHA_EXPEDICION;
InsPersonas = InsPersonas_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "InsPersonas"
if(InsPersonas != null) { 



	
	/**
	 * [tOracleOutput_14 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"InsPersonas"
						
						);
					}
					



        whetherReject_tOracleOutput_14 = false;
                        if(InsPersonas.PRIMER_NOMBRE == null) {
pstmt_tOracleOutput_14.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_14.setString(1, InsPersonas.PRIMER_NOMBRE);
}

                        if(InsPersonas.SEGUNDO_NOMBRE == null) {
pstmt_tOracleOutput_14.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_14.setString(2, InsPersonas.SEGUNDO_NOMBRE);
}

                        if(InsPersonas.PRIMER_APELLIDO == null) {
pstmt_tOracleOutput_14.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_14.setString(3, InsPersonas.PRIMER_APELLIDO);
}

                        if(InsPersonas.SEGUNDO_APELLIDO == null) {
pstmt_tOracleOutput_14.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_14.setString(4, InsPersonas.SEGUNDO_APELLIDO);
}

                        if(InsPersonas.TDOCUMENTOS_ID == null) {
pstmt_tOracleOutput_14.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_14.setInt(5, InsPersonas.TDOCUMENTOS_ID);
}

                        if(InsPersonas.DOCUMENTO == null) {
pstmt_tOracleOutput_14.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_14.setString(6, InsPersonas.DOCUMENTO);
}

                        if(InsPersonas.SEXO_ID == null) {
pstmt_tOracleOutput_14.setNull(7, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_14.setInt(7, InsPersonas.SEXO_ID);
}

                        if(InsPersonas.DIRECCION == null) {
pstmt_tOracleOutput_14.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_14.setString(8, InsPersonas.DIRECCION);
}

                        if(InsPersonas.TELEFONO == null) {
pstmt_tOracleOutput_14.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_14.setString(9, InsPersonas.TELEFONO);
}

                        if(InsPersonas.CELULAR == null) {
pstmt_tOracleOutput_14.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_14.setString(10, InsPersonas.CELULAR);
}

                        if(InsPersonas.EMAIL == null) {
pstmt_tOracleOutput_14.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_14.setString(11, InsPersonas.EMAIL);
}

                        if(InsPersonas.FECHA_NACIMIENTO != null) {
pstmt_tOracleOutput_14.setObject(12, new java.sql.Timestamp(InsPersonas.FECHA_NACIMIENTO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_14.setNull(12, java.sql.Types.DATE);
}

                        if(InsPersonas.GSANGUINEOS_ID == null) {
pstmt_tOracleOutput_14.setNull(13, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_14.setInt(13, InsPersonas.GSANGUINEOS_ID);
}

                        if(InsPersonas.NEDUCATIVOS_ID == null) {
pstmt_tOracleOutput_14.setNull(14, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_14.setInt(14, InsPersonas.NEDUCATIVOS_ID);
}

                        if(InsPersonas.LUGAR_RESIDENCIA == null) {
pstmt_tOracleOutput_14.setNull(15, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_14.setInt(15, InsPersonas.LUGAR_RESIDENCIA);
}

                        if(InsPersonas.ZRESIDENCIAS == null) {
pstmt_tOracleOutput_14.setNull(16, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_14.setInt(16, InsPersonas.ZRESIDENCIAS);
}

                        if(InsPersonas.ESMADSCRITO == null) {
pstmt_tOracleOutput_14.setNull(17, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_14.setInt(17, InsPersonas.ESMADSCRITO);
}

                        if(InsPersonas.ETNICAS_ID == null) {
pstmt_tOracleOutput_14.setNull(18, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_14.setInt(18, InsPersonas.ETNICAS_ID);
}

                        if(InsPersonas.NSOCIOECONOMICOS_ID == null) {
pstmt_tOracleOutput_14.setNull(19, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_14.setInt(19, InsPersonas.NSOCIOECONOMICOS_ID);
}

                        if(InsPersonas.OCUPACIONES_ID == null) {
pstmt_tOracleOutput_14.setNull(20, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_14.setInt(20, InsPersonas.OCUPACIONES_ID);
}

                        if(InsPersonas.ESTCIVILES_ID == null) {
pstmt_tOracleOutput_14.setNull(21, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_14.setInt(21, InsPersonas.ESTCIVILES_ID);
}

                        if(InsPersonas.ESTATURA == null) {
pstmt_tOracleOutput_14.setNull(22, java.sql.Types.DOUBLE);
} else {pstmt_tOracleOutput_14.setDouble(22, InsPersonas.ESTATURA);
}

                        if(InsPersonas.TDISCAPACIDADES_ID == null) {
pstmt_tOracleOutput_14.setNull(23, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_14.setInt(23, InsPersonas.TDISCAPACIDADES_ID);
}

                        if(InsPersonas.TVIVIENDA_ID == null) {
pstmt_tOracleOutput_14.setNull(24, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_14.setInt(24, InsPersonas.TVIVIENDA_ID);
}

                        if(InsPersonas.LOCALIDADES_ID == null) {
pstmt_tOracleOutput_14.setNull(25, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_14.setInt(25, InsPersonas.LOCALIDADES_ID);
}

                        if(InsPersonas.LUGAR_NACIMIENTO == null) {
pstmt_tOracleOutput_14.setNull(26, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_14.setInt(26, InsPersonas.LUGAR_NACIMIENTO);
}

                        if(InsPersonas.LUGAR_EXPEDICION == null) {
pstmt_tOracleOutput_14.setNull(27, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_14.setInt(27, InsPersonas.LUGAR_EXPEDICION);
}

                        if(InsPersonas.FECHA_EXPEDICION != null) {
pstmt_tOracleOutput_14.setObject(28, new java.sql.Timestamp(InsPersonas.FECHA_EXPEDICION.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_14.setNull(28, java.sql.Types.DATE);
}

                try {
                    nb_line_tOracleOutput_14++;
                    int processedCount_tOracleOutput_14 = pstmt_tOracleOutput_14.executeUpdate();
                    insertedCount_tOracleOutput_14 += processedCount_tOracleOutput_14;
                    rowsToCommitCount_tOracleOutput_14 += processedCount_tOracleOutput_14;
                } catch(java.lang.Exception e_tOracleOutput_14) {
globalMap.put("tOracleOutput_14_ERROR_MESSAGE",e_tOracleOutput_14.getMessage());
                    whetherReject_tOracleOutput_14 = true;
                            System.err.print(e_tOracleOutput_14.getMessage());
                }

 


	tos_count_tOracleOutput_14++;

/**
 * [tOracleOutput_14 main ] stop
 */
	
	/**
	 * [tOracleOutput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	

 



/**
 * [tOracleOutput_14 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	

 



/**
 * [tOracleOutput_14 process_data_end ] stop
 */

} // End of branch "InsPersonas"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_7 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

}
}finally{
	if (rs_tOracleInput_7 != null) {
		rs_tOracleInput_7.close();
	}
	if (stmt_tOracleInput_7 != null) {
		stmt_tOracleInput_7.close();
	}
}

globalMap.put("tOracleInput_7_NB_LINE",nb_line_tOracleInput_7);
 

ok_Hash.put("tOracleInput_7", true);
end_Hash.put("tOracleInput_7", System.currentTimeMillis());




/**
 * [tOracleInput_7 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row26");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tOracleOutput_14 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	
	



	
        if(pstmt_tOracleOutput_14 != null) {
			
				pstmt_tOracleOutput_14.close();
				resourceMap.remove("pstmt_tOracleOutput_14");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_14", true);

	
	nb_line_deleted_tOracleOutput_14=nb_line_deleted_tOracleOutput_14+ deletedCount_tOracleOutput_14;
	nb_line_update_tOracleOutput_14=nb_line_update_tOracleOutput_14 + updatedCount_tOracleOutput_14;
	nb_line_inserted_tOracleOutput_14=nb_line_inserted_tOracleOutput_14 + insertedCount_tOracleOutput_14;
	nb_line_rejected_tOracleOutput_14=nb_line_rejected_tOracleOutput_14 + rejectedCount_tOracleOutput_14;
	
        globalMap.put("tOracleOutput_14_NB_LINE",nb_line_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_UPDATED",nb_line_update_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_14);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"InsPersonas");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_14", true);
end_Hash.put("tOracleOutput_14", System.currentTimeMillis());




/**
 * [tOracleOutput_14 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tOracleOutput_14 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_14") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_14 = null;
                if ((pstmtToClose_tOracleOutput_14 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_14")) != null) {
                    pstmtToClose_tOracleOutput_14.close();
                }
    }
 



/**
 * [tOracleOutput_14 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row44Struct implements routines.system.IPersistableRow<row44Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer REGISTROS;

				public Integer getREGISTROS () {
					return this.REGISTROS;
				}

				public Boolean REGISTROSIsNullable(){
				    return true;
				}
				public Boolean REGISTROSIsKey(){
				    return false;
				}
				public Integer REGISTROSLength(){
				    return 0;
				}
				public Integer REGISTROSPrecision(){
				    return 0;
				}
				public String REGISTROSDefault(){
				
					return "";
				
				}
				public String REGISTROSComment(){
				
				    return "";
				
				}
				public String REGISTROSPattern(){
				
					return "";
				
				}
				public String REGISTROSOriginalDbColumnName(){
				
					return "REGISTROS";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.REGISTROS = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.REGISTROS = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.REGISTROS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.REGISTROS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("REGISTROS="+String.valueOf(REGISTROS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row44Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row44Struct row44 = new row44Struct();




	
	/**
	 * [tJavaRow_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_19", false);
		start_Hash.put("tJavaRow_19", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_19";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row44");
					}
				
		int tos_count_tJavaRow_19 = 0;
		

int nb_line_tJavaRow_19 = 0;

 



/**
 * [tJavaRow_19 begin ] stop
 */



	
	/**
	 * [tOracleInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_13", false);
		start_Hash.put("tOracleInput_13", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_13";
	
	
		int tos_count_tOracleInput_13 = 0;
		
	


	
		    int nb_line_tOracleInput_13 = 0;
		    java.sql.Connection conn_tOracleInput_13 = null;
				conn_tOracleInput_13 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_13 = false;
				boolean isConnectionWrapped_tOracleInput_13 = !(conn_tOracleInput_13 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_13.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_13 = null;
                if (isConnectionWrapped_tOracleInput_13) {
					unwrappedOraConn_tOracleInput_13 = conn_tOracleInput_13.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_13 != null) {
                        isTimeZoneNull_tOracleInput_13 = (unwrappedOraConn_tOracleInput_13.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_13 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_13).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_13) {
					java.sql.Statement stmtGetTZ_tOracleInput_13 = conn_tOracleInput_13.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_13 = stmtGetTZ_tOracleInput_13.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_13 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_13.next()) {
						sessionTimezone_tOracleInput_13 = rsGetTZ_tOracleInput_13.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_13 && unwrappedOraConn_tOracleInput_13 != null) {
                        unwrappedOraConn_tOracleInput_13.setSessionTimeZone(sessionTimezone_tOracleInput_13);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_13).setSessionTimeZone(sessionTimezone_tOracleInput_13);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_13 = conn_tOracleInput_13.createStatement();

		    String dbquery_tOracleInput_13 = "select count(1) registros\n  from tst_carguemasivo\n  where procesado in (1,2)";
		    

		    globalMap.put("tOracleInput_13_QUERY",dbquery_tOracleInput_13);

		    java.sql.ResultSet rs_tOracleInput_13 = null;

		    try {
		    	rs_tOracleInput_13 = stmt_tOracleInput_13.executeQuery(dbquery_tOracleInput_13);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_13 = rs_tOracleInput_13.getMetaData();
		    	int colQtyInRs_tOracleInput_13 = rsmd_tOracleInput_13.getColumnCount();

		    String tmpContent_tOracleInput_13 = null;
		    
		    
		    while (rs_tOracleInput_13.next()) {
		        nb_line_tOracleInput_13++;
		        
							if(colQtyInRs_tOracleInput_13 < 1) {
								row44.REGISTROS = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(1) != null) {
						row44.REGISTROS = rs_tOracleInput_13.getInt(1);
					} else {
				
						row44.REGISTROS = null;
					}
		                    }
					




 



/**
 * [tOracleInput_13 begin ] stop
 */
	
	/**
	 * [tOracleInput_13 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 


	tos_count_tOracleInput_13++;

/**
 * [tOracleInput_13 main ] stop
 */
	
	/**
	 * [tOracleInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_19 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_19";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row44"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.cregistros = row44.REGISTROS;

    nb_line_tJavaRow_19++;   

 


	tos_count_tJavaRow_19++;

/**
 * [tJavaRow_19 main ] stop
 */
	
	/**
	 * [tJavaRow_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_19";
	
	

 



/**
 * [tJavaRow_19 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_19";
	
	

 



/**
 * [tJavaRow_19 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_13 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

}
}finally{
	if (rs_tOracleInput_13 != null) {
		rs_tOracleInput_13.close();
	}
	if (stmt_tOracleInput_13 != null) {
		stmt_tOracleInput_13.close();
	}
}

globalMap.put("tOracleInput_13_NB_LINE",nb_line_tOracleInput_13);
 

ok_Hash.put("tOracleInput_13", true);
end_Hash.put("tOracleInput_13", System.currentTimeMillis());




/**
 * [tOracleInput_13 end ] stop
 */

	
	/**
	 * [tJavaRow_19 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_19";
	
	

globalMap.put("tJavaRow_19_NB_LINE",nb_line_tJavaRow_19);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row44");
			  	}
			  	
 

ok_Hash.put("tJavaRow_19", true);
end_Hash.put("tJavaRow_19", System.currentTimeMillis());

   			if (context.cregistros == 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If12", 0, "true");
					}
				tFixedFlowInput_9Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If12", 0, "false");
					}   	 
   				}
   			if (context.cregistros > 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If11", 0, "true");
					}
				tFixedFlowInput_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If11", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_19 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_13 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 finally ] stop
 */

	
	/**
	 * [tJavaRow_19 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_19";
	
	

 



/**
 * [tJavaRow_19 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class row49Struct implements routines.system.IPersistableRow<row49Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer archivos_id_;

				public Integer getArchivos_id_ () {
					return this.archivos_id_;
				}

				public Boolean archivos_id_IsNullable(){
				    return true;
				}
				public Boolean archivos_id_IsKey(){
				    return false;
				}
				public Integer archivos_id_Length(){
				    return null;
				}
				public Integer archivos_id_Precision(){
				    return null;
				}
				public String archivos_id_Default(){
				
					return null;
				
				}
				public String archivos_id_Comment(){
				
				    return "";
				
				}
				public String archivos_id_Pattern(){
				
					return "";
				
				}
				public String archivos_id_OriginalDbColumnName(){
				
					return "archivos_id_";
				
				}

				
			    public Integer estado_;

				public Integer getEstado_ () {
					return this.estado_;
				}

				public Boolean estado_IsNullable(){
				    return true;
				}
				public Boolean estado_IsKey(){
				    return false;
				}
				public Integer estado_Length(){
				    return null;
				}
				public Integer estado_Precision(){
				    return null;
				}
				public String estado_Default(){
				
					return null;
				
				}
				public String estado_Comment(){
				
				    return "";
				
				}
				public String estado_Pattern(){
				
					return "";
				
				}
				public String estado_OriginalDbColumnName(){
				
					return "estado_";
				
				}

				
			    public java.util.Date finicio_;

				public java.util.Date getFinicio_ () {
					return this.finicio_;
				}

				public Boolean finicio_IsNullable(){
				    return true;
				}
				public Boolean finicio_IsKey(){
				    return false;
				}
				public Integer finicio_Length(){
				    return null;
				}
				public Integer finicio_Precision(){
				    return null;
				}
				public String finicio_Default(){
				
					return null;
				
				}
				public String finicio_Comment(){
				
				    return "";
				
				}
				public String finicio_Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String finicio_OriginalDbColumnName(){
				
					return "finicio_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("archivos_id_="+String.valueOf(archivos_id_));
		sb.append(",estado_="+String.valueOf(estado_));
		sb.append(",finicio_="+String.valueOf(finicio_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row49Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row49Struct row49 = new row49Struct();




	
	/**
	 * [tOracleSP_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_5", false);
		start_Hash.put("tOracleSP_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row49");
					}
				
		int tos_count_tOracleSP_5 = 0;
		

	java.sql.Connection connection_tOracleSP_5 = null;
	connection_tOracleSP_5 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_2");
	

java.sql.CallableStatement statement_tOracleSP_5 = connection_tOracleSP_5.prepareCall("{call " + "cms2.updestadoarchivo" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_5;
String tmpString_tOracleSP_5;

 



/**
 * [tOracleSP_5 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_9", false);
		start_Hash.put("tFixedFlowInput_9", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_9";
	
	
		int tos_count_tFixedFlowInput_9 = 0;
		

	    for (int i_tFixedFlowInput_9 = 0 ; i_tFixedFlowInput_9 < 1 ; i_tFixedFlowInput_9++) {
	                	            	
    	            		row49.archivos_id_ = context.afiarchivos_id;
    	            	        	            	
    	            		row49.estado_ = 8;
    	            	        	            	
    	            		row49.finicio_ = context.vfinicio;
    	            	

 



/**
 * [tFixedFlowInput_9 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_9 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_9";
	
	

 


	tos_count_tFixedFlowInput_9++;

/**
 * [tFixedFlowInput_9 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_9";
	
	

 



/**
 * [tFixedFlowInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_5 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row49"
						
						);
					}
					

			// code for the argument 1 (archivos_id_) of type 'IN AUTOMAPPING'
    					if (row49.archivos_id_ == null) {
    						statement_tOracleSP_5.setNull(1, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_5.setInt(1, row49.archivos_id_);
    					}
    					
			// code for the argument 2 (estado_) of type 'IN AUTOMAPPING'
    					if (row49.estado_ == null) {
    						statement_tOracleSP_5.setNull(2, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_5.setInt(2, row49.estado_);
    					}
    					
			// code for the argument 3 (finicio_) of type 'IN TIMESTAMP'
    					if (row49.finicio_ == null) {
    						statement_tOracleSP_5.setNull(3, java.sql.Types.DATE);
    					} else {
    					
    					statement_tOracleSP_5.setTimestamp(3, new java.sql.Timestamp(row49.finicio_.getTime()));
    					
    					}
    					
		statement_tOracleSP_5.execute();
		

 


	tos_count_tOracleSP_5++;

/**
 * [tOracleSP_5 main ] stop
 */
	
	/**
	 * [tOracleSP_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_5";
	
	

 



/**
 * [tOracleSP_5 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_5";
	
	

 



/**
 * [tOracleSP_5 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_9";
	
	

 



/**
 * [tFixedFlowInput_9 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_9 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_9";
	
	

        }
        globalMap.put("tFixedFlowInput_9_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_9", true);
end_Hash.put("tFixedFlowInput_9", System.currentTimeMillis());




/**
 * [tFixedFlowInput_9 end ] stop
 */

	
	/**
	 * [tOracleSP_5 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_5";
	
	


	statement_tOracleSP_5.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row49");
			  	}
			  	
 

ok_Hash.put("tOracleSP_5", true);
end_Hash.put("tOracleSP_5", System.currentTimeMillis());

   			if (context.cregistros == 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If16", 0, "true");
					}
				tFixedFlowInput_7Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If16", 0, "false");
					}   	 
   				}



/**
 * [tOracleSP_5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_9 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_9";
	
	

 



/**
 * [tFixedFlowInput_9 finally ] stop
 */

	
	/**
	 * [tOracleSP_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_5";
	
	

 



/**
 * [tOracleSP_5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row46Struct implements routines.system.IPersistableRow<row46Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String respuesta;

				public String getRespuesta () {
					return this.respuesta;
				}

				public Boolean respuestaIsNullable(){
				    return true;
				}
				public Boolean respuestaIsKey(){
				    return false;
				}
				public Integer respuestaLength(){
				    return null;
				}
				public Integer respuestaPrecision(){
				    return null;
				}
				public String respuestaDefault(){
				
					return null;
				
				}
				public String respuestaComment(){
				
				    return "";
				
				}
				public String respuestaPattern(){
				
					return "";
				
				}
				public String respuestaOriginalDbColumnName(){
				
					return "respuesta";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("respuesta="+respuesta);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row46Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row45Struct implements routines.system.IPersistableRow<row45Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String respuesta;

				public String getRespuesta () {
					return this.respuesta;
				}

				public Boolean respuestaIsNullable(){
				    return true;
				}
				public Boolean respuestaIsKey(){
				    return false;
				}
				public Integer respuestaLength(){
				    return null;
				}
				public Integer respuestaPrecision(){
				    return null;
				}
				public String respuestaDefault(){
				
					return null;
				
				}
				public String respuestaComment(){
				
				    return "";
				
				}
				public String respuestaPattern(){
				
					return "";
				
				}
				public String respuestaOriginalDbColumnName(){
				
					return "respuesta";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("respuesta="+respuesta);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row45Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row45Struct row45 = new row45Struct();
row45Struct row46 = row45;





	
	/**
	 * [tDie_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_5", false);
		start_Hash.put("tDie_5", System.currentTimeMillis());
		
	
	currentComponent="tDie_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row46");
					}
				
		int tos_count_tDie_5 = 0;
		

 



/**
 * [tDie_5 begin ] stop
 */



	
	/**
	 * [tBufferOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_5", false);
		start_Hash.put("tBufferOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row45");
					}
				
		int tos_count_tBufferOutput_5 = 0;
		

 



/**
 * [tBufferOutput_5 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_7", false);
		start_Hash.put("tFixedFlowInput_7", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_7";
	
	
		int tos_count_tFixedFlowInput_7 = 0;
		

	    for (int i_tFixedFlowInput_7 = 0 ; i_tFixedFlowInput_7 < 1 ; i_tFixedFlowInput_7++) {
	                	            	
    	            		row45.respuesta = "ERROR: Validar log de errores - no existen personas para procesar";
    	            	

 



/**
 * [tFixedFlowInput_7 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_7 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";
	
	

 


	tos_count_tFixedFlowInput_7++;

/**
 * [tFixedFlowInput_7 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";
	
	

 



/**
 * [tFixedFlowInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tBufferOutput_5 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row45"
						
						);
					}
					



String[] row_tBufferOutput_5=new String[]{"",};		
	    if(row45.respuesta != null){
	        
	            row_tBufferOutput_5[0] = row45.respuesta;
	                        			    
	    }else{
	    	row_tBufferOutput_5[0] = null;
	    }
	globalBuffer.add(row_tBufferOutput_5);	
	
 
     row46 = row45;


	tos_count_tBufferOutput_5++;

/**
 * [tBufferOutput_5 main ] stop
 */
	
	/**
	 * [tBufferOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_5";
	
	

 



/**
 * [tBufferOutput_5 process_data_begin ] stop
 */

	
	/**
	 * [tDie_5 main ] start
	 */

	

	
	
	currentComponent="tDie_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row46"
						
						);
					}
					

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_5", 5, "ERROR:  Validar log de errores - no existen personas para procesar", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_5_DIE_PRIORITY", 5);
	System.err.println("ERROR:  Validar log de errores - no existen personas para procesar");
	
	globalMap.put("tDie_5_DIE_MESSAGE", "ERROR:  Validar log de errores - no existen personas para procesar");
	globalMap.put("tDie_5_DIE_MESSAGES", "ERROR:  Validar log de errores - no existen personas para procesar");
	
	} catch (Exception | Error e_tDie_5) {
	    globalMap.put("tDie_5_ERROR_MESSAGE",e_tDie_5.getMessage());
		logIgnoredError(String.format("tDie_5 - tDie failed to log message due to internal error: %s", e_tDie_5), e_tDie_5);
	}
	
	currentComponent = "tDie_5";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_5_DIE_CODE", errorCode);        

    
	if(true){	
		TDieException e_tDie_5 = new TDieException();

		

		throw e_tDie_5;
	}

 


	tos_count_tDie_5++;

/**
 * [tDie_5 main ] stop
 */
	
	/**
	 * [tDie_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_5";
	
	

 



/**
 * [tDie_5 process_data_begin ] stop
 */
	
	/**
	 * [tDie_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_5";
	
	

 



/**
 * [tDie_5 process_data_end ] stop
 */



	
	/**
	 * [tBufferOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_5";
	
	

 



/**
 * [tBufferOutput_5 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";
	
	

 



/**
 * [tFixedFlowInput_7 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_7 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";
	
	

        }
        globalMap.put("tFixedFlowInput_7_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_7", true);
end_Hash.put("tFixedFlowInput_7", System.currentTimeMillis());




/**
 * [tFixedFlowInput_7 end ] stop
 */

	
	/**
	 * [tBufferOutput_5 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_5";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row45");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_5", true);
end_Hash.put("tBufferOutput_5", System.currentTimeMillis());




/**
 * [tBufferOutput_5 end ] stop
 */

	
	/**
	 * [tDie_5 end ] start
	 */

	

	
	
	currentComponent="tDie_5";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row46");
			  	}
			  	
 

ok_Hash.put("tDie_5", true);
end_Hash.put("tDie_5", System.currentTimeMillis());




/**
 * [tDie_5 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_7 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";
	
	

 



/**
 * [tFixedFlowInput_7 finally ] stop
 */

	
	/**
	 * [tBufferOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_5";
	
	

 



/**
 * [tBufferOutput_5 finally ] stop
 */

	
	/**
	 * [tDie_5 finally ] start
	 */

	

	
	
	currentComponent="tDie_5";
	
	

 



/**
 * [tDie_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row52Struct implements routines.system.IPersistableRow<row52Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer numregexitoso;

				public Integer getNumregexitoso () {
					return this.numregexitoso;
				}

				public Boolean numregexitosoIsNullable(){
				    return true;
				}
				public Boolean numregexitosoIsKey(){
				    return false;
				}
				public Integer numregexitosoLength(){
				    return null;
				}
				public Integer numregexitosoPrecision(){
				    return null;
				}
				public String numregexitosoDefault(){
				
					return null;
				
				}
				public String numregexitosoComment(){
				
				    return "";
				
				}
				public String numregexitosoPattern(){
				
					return "";
				
				}
				public String numregexitosoOriginalDbColumnName(){
				
					return "numregexitoso";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.numregexitoso = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.numregexitoso = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.numregexitoso,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.numregexitoso,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("numregexitoso="+String.valueOf(numregexitoso));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row52Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer numregexitoso;

				public Integer getNumregexitoso () {
					return this.numregexitoso;
				}

				public Boolean numregexitosoIsNullable(){
				    return true;
				}
				public Boolean numregexitosoIsKey(){
				    return false;
				}
				public Integer numregexitosoLength(){
				    return null;
				}
				public Integer numregexitosoPrecision(){
				    return null;
				}
				public String numregexitosoDefault(){
				
					return null;
				
				}
				public String numregexitosoComment(){
				
				    return "";
				
				}
				public String numregexitosoPattern(){
				
					return "";
				
				}
				public String numregexitosoOriginalDbColumnName(){
				
					return "numregexitoso";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.numregexitoso = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.numregexitoso = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.numregexitoso,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.numregexitoso,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("numregexitoso="+String.valueOf(numregexitoso));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row19Struct row19 = new row19Struct();
row52Struct row52 = new row52Struct();





	
	/**
	 * [tJavaRow_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_21", false);
		start_Hash.put("tJavaRow_21", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_21";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row52");
					}
				
		int tos_count_tJavaRow_21 = 0;
		

int nb_line_tJavaRow_21 = 0;

 



/**
 * [tJavaRow_21 begin ] stop
 */



	
	/**
	 * [tOracleSP_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_2", false);
		start_Hash.put("tOracleSP_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tOracleSP_2 = 0;
		

	java.sql.Connection connection_tOracleSP_2 = null;
	connection_tOracleSP_2 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_2");
	

java.sql.CallableStatement statement_tOracleSP_2 = connection_tOracleSP_2.prepareCall("{call " + "cms2.insafiliaciones" + "(?)}");

java.sql.Timestamp tmpDate_tOracleSP_2;
String tmpString_tOracleSP_2;

 



/**
 * [tOracleSP_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_2", false);
		start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_2";
	
	
		int tos_count_tFixedFlowInput_2 = 0;
		

	    for (int i_tFixedFlowInput_2 = 0 ; i_tFixedFlowInput_2 < 1 ; i_tFixedFlowInput_2++) {
	                	            	
    	            		row19.numregexitoso = null;        	            	
    	            	

 



/**
 * [tFixedFlowInput_2 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 


	tos_count_tFixedFlowInput_2++;

/**
 * [tFixedFlowInput_2 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_2 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row19"
						
						);
					}
					

			// code for the argument 1 (numregexitoso) of type 'OUT AUTOMAPPING'
					statement_tOracleSP_2.registerOutParameter(1, java.sql.Types.INTEGER);
		statement_tOracleSP_2.execute();
		
									row52.numregexitoso = statement_tOracleSP_2.getInt(1);
									
									if (statement_tOracleSP_2.wasNull()) {
										row52.numregexitoso = null;
									}
									

 


	tos_count_tOracleSP_2++;

/**
 * [tOracleSP_2 main ] stop
 */
	
	/**
	 * [tOracleSP_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_21 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_21";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row52"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.numregexitoso = row52.numregexitoso;

    nb_line_tJavaRow_21++;   

 


	tos_count_tJavaRow_21++;

/**
 * [tJavaRow_21 main ] stop
 */
	
	/**
	 * [tJavaRow_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_21";
	
	

 



/**
 * [tJavaRow_21 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_21";
	
	

 



/**
 * [tJavaRow_21 process_data_end ] stop
 */



	
	/**
	 * [tOracleSP_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

        }
        globalMap.put("tFixedFlowInput_2_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_2", true);
end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());




/**
 * [tFixedFlowInput_2 end ] stop
 */

	
	/**
	 * [tOracleSP_2 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	


	statement_tOracleSP_2.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tOracleSP_2", true);
end_Hash.put("tOracleSP_2", System.currentTimeMillis());




/**
 * [tOracleSP_2 end ] stop
 */

	
	/**
	 * [tJavaRow_21 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_21";
	
	

globalMap.put("tJavaRow_21_NB_LINE",nb_line_tJavaRow_21);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row52");
			  	}
			  	
 

ok_Hash.put("tJavaRow_21", true);
end_Hash.put("tJavaRow_21", System.currentTimeMillis());




/**
 * [tJavaRow_21 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_2 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 finally ] stop
 */

	
	/**
	 * [tOracleSP_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_21 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_21";
	
	

 



/**
 * [tJavaRow_21 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row43Struct implements routines.system.IPersistableRow<row43Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer archivos_id_;

				public Integer getArchivos_id_ () {
					return this.archivos_id_;
				}

				public Boolean archivos_id_IsNullable(){
				    return true;
				}
				public Boolean archivos_id_IsKey(){
				    return false;
				}
				public Integer archivos_id_Length(){
				    return null;
				}
				public Integer archivos_id_Precision(){
				    return null;
				}
				public String archivos_id_Default(){
				
					return null;
				
				}
				public String archivos_id_Comment(){
				
				    return "";
				
				}
				public String archivos_id_Pattern(){
				
					return "";
				
				}
				public String archivos_id_OriginalDbColumnName(){
				
					return "archivos_id_";
				
				}

				
			    public Integer estado_;

				public Integer getEstado_ () {
					return this.estado_;
				}

				public Boolean estado_IsNullable(){
				    return true;
				}
				public Boolean estado_IsKey(){
				    return false;
				}
				public Integer estado_Length(){
				    return null;
				}
				public Integer estado_Precision(){
				    return null;
				}
				public String estado_Default(){
				
					return null;
				
				}
				public String estado_Comment(){
				
				    return "";
				
				}
				public String estado_Pattern(){
				
					return "";
				
				}
				public String estado_OriginalDbColumnName(){
				
					return "estado_";
				
				}

				
			    public java.util.Date finicio_;

				public java.util.Date getFinicio_ () {
					return this.finicio_;
				}

				public Boolean finicio_IsNullable(){
				    return true;
				}
				public Boolean finicio_IsKey(){
				    return false;
				}
				public Integer finicio_Length(){
				    return null;
				}
				public Integer finicio_Precision(){
				    return null;
				}
				public String finicio_Default(){
				
					return null;
				
				}
				public String finicio_Comment(){
				
				    return "";
				
				}
				public String finicio_Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String finicio_OriginalDbColumnName(){
				
					return "finicio_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("archivos_id_="+String.valueOf(archivos_id_));
		sb.append(",estado_="+String.valueOf(estado_));
		sb.append(",finicio_="+String.valueOf(finicio_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row43Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row43Struct row43 = new row43Struct();




	
	/**
	 * [tOracleSP_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_4", false);
		start_Hash.put("tOracleSP_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row43");
					}
				
		int tos_count_tOracleSP_4 = 0;
		

	java.sql.Connection connection_tOracleSP_4 = null;
	connection_tOracleSP_4 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_2");
	

java.sql.CallableStatement statement_tOracleSP_4 = connection_tOracleSP_4.prepareCall("{call " + "cms2.updestadoarchivo" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_4;
String tmpString_tOracleSP_4;

 



/**
 * [tOracleSP_4 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_8", false);
		start_Hash.put("tFixedFlowInput_8", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_8";
	
	
		int tos_count_tFixedFlowInput_8 = 0;
		

	    for (int i_tFixedFlowInput_8 = 0 ; i_tFixedFlowInput_8 < 1 ; i_tFixedFlowInput_8++) {
	                	            	
    	            		row43.archivos_id_ = context.afiarchivos_id;
    	            	        	            	
    	            		row43.estado_ = 8;
    	            	        	            	
    	            		row43.finicio_ = context.vfinicio;
    	            	

 



/**
 * [tFixedFlowInput_8 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_8 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";
	
	

 


	tos_count_tFixedFlowInput_8++;

/**
 * [tFixedFlowInput_8 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";
	
	

 



/**
 * [tFixedFlowInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_4 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row43"
						
						);
					}
					

			// code for the argument 1 (archivos_id_) of type 'IN AUTOMAPPING'
    					if (row43.archivos_id_ == null) {
    						statement_tOracleSP_4.setNull(1, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_4.setInt(1, row43.archivos_id_);
    					}
    					
			// code for the argument 2 (estado_) of type 'IN AUTOMAPPING'
    					if (row43.estado_ == null) {
    						statement_tOracleSP_4.setNull(2, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_4.setInt(2, row43.estado_);
    					}
    					
			// code for the argument 3 (finicio_) of type 'IN TIMESTAMP'
    					if (row43.finicio_ == null) {
    						statement_tOracleSP_4.setNull(3, java.sql.Types.DATE);
    					} else {
    					
    					statement_tOracleSP_4.setTimestamp(3, new java.sql.Timestamp(row43.finicio_.getTime()));
    					
    					}
    					
		statement_tOracleSP_4.execute();
		

 


	tos_count_tOracleSP_4++;

/**
 * [tOracleSP_4 main ] stop
 */
	
	/**
	 * [tOracleSP_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_4";
	
	

 



/**
 * [tOracleSP_4 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_4";
	
	

 



/**
 * [tOracleSP_4 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";
	
	

 



/**
 * [tFixedFlowInput_8 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_8 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";
	
	

        }
        globalMap.put("tFixedFlowInput_8_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_8", true);
end_Hash.put("tFixedFlowInput_8", System.currentTimeMillis());




/**
 * [tFixedFlowInput_8 end ] stop
 */

	
	/**
	 * [tOracleSP_4 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_4";
	
	


	statement_tOracleSP_4.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row43");
			  	}
			  	
 

ok_Hash.put("tOracleSP_4", true);
end_Hash.put("tOracleSP_4", System.currentTimeMillis());

   			if (context.cregistros == 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If15", 0, "true");
					}
				tFixedFlowInput_5Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If15", 0, "false");
					}   	 
   				}



/**
 * [tOracleSP_4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_8 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";
	
	

 



/**
 * [tFixedFlowInput_8 finally ] stop
 */

	
	/**
	 * [tOracleSP_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_4";
	
	

 



/**
 * [tOracleSP_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row40Struct implements routines.system.IPersistableRow<row40Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String respuesta;

				public String getRespuesta () {
					return this.respuesta;
				}

				public Boolean respuestaIsNullable(){
				    return true;
				}
				public Boolean respuestaIsKey(){
				    return false;
				}
				public Integer respuestaLength(){
				    return null;
				}
				public Integer respuestaPrecision(){
				    return null;
				}
				public String respuestaDefault(){
				
					return null;
				
				}
				public String respuestaComment(){
				
				    return "";
				
				}
				public String respuestaPattern(){
				
					return "";
				
				}
				public String respuestaOriginalDbColumnName(){
				
					return "respuesta";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("respuesta="+respuesta);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row40Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row39Struct implements routines.system.IPersistableRow<row39Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String respuesta;

				public String getRespuesta () {
					return this.respuesta;
				}

				public Boolean respuestaIsNullable(){
				    return true;
				}
				public Boolean respuestaIsKey(){
				    return false;
				}
				public Integer respuestaLength(){
				    return null;
				}
				public Integer respuestaPrecision(){
				    return null;
				}
				public String respuestaDefault(){
				
					return null;
				
				}
				public String respuestaComment(){
				
				    return "";
				
				}
				public String respuestaPattern(){
				
					return "";
				
				}
				public String respuestaOriginalDbColumnName(){
				
					return "respuesta";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("respuesta="+respuesta);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row39Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row39Struct row39 = new row39Struct();
row39Struct row40 = row39;





	
	/**
	 * [tDie_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_3", false);
		start_Hash.put("tDie_3", System.currentTimeMillis());
		
	
	currentComponent="tDie_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row40");
					}
				
		int tos_count_tDie_3 = 0;
		

 



/**
 * [tDie_3 begin ] stop
 */



	
	/**
	 * [tBufferOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_3", false);
		start_Hash.put("tBufferOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row39");
					}
				
		int tos_count_tBufferOutput_3 = 0;
		

 



/**
 * [tBufferOutput_3 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_5", false);
		start_Hash.put("tFixedFlowInput_5", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_5";
	
	
		int tos_count_tFixedFlowInput_5 = 0;
		

	    for (int i_tFixedFlowInput_5 = 0 ; i_tFixedFlowInput_5 < 1 ; i_tFixedFlowInput_5++) {
	                	            	
    	            		row39.respuesta = "ERROR: El arhivo no supera las validaciones de estructura";
    	            	

 



/**
 * [tFixedFlowInput_5 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 


	tos_count_tFixedFlowInput_5++;

/**
 * [tFixedFlowInput_5 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 



/**
 * [tFixedFlowInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tBufferOutput_3 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row39"
						
						);
					}
					



String[] row_tBufferOutput_3=new String[]{"",};		
	    if(row39.respuesta != null){
	        
	            row_tBufferOutput_3[0] = row39.respuesta;
	                        			    
	    }else{
	    	row_tBufferOutput_3[0] = null;
	    }
	globalBuffer.add(row_tBufferOutput_3);	
	
 
     row40 = row39;


	tos_count_tBufferOutput_3++;

/**
 * [tBufferOutput_3 main ] stop
 */
	
	/**
	 * [tBufferOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_3";
	
	

 



/**
 * [tBufferOutput_3 process_data_begin ] stop
 */

	
	/**
	 * [tDie_3 main ] start
	 */

	

	
	
	currentComponent="tDie_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row40"
						
						);
					}
					

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_3", 5, "ERROR: El archivo no supera las validaciones de estructura", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_3_DIE_PRIORITY", 5);
	System.err.println("ERROR: El archivo no supera las validaciones de estructura");
	
	globalMap.put("tDie_3_DIE_MESSAGE", "ERROR: El archivo no supera las validaciones de estructura");
	globalMap.put("tDie_3_DIE_MESSAGES", "ERROR: El archivo no supera las validaciones de estructura");
	
	} catch (Exception | Error e_tDie_3) {
	    globalMap.put("tDie_3_ERROR_MESSAGE",e_tDie_3.getMessage());
		logIgnoredError(String.format("tDie_3 - tDie failed to log message due to internal error: %s", e_tDie_3), e_tDie_3);
	}
	
	currentComponent = "tDie_3";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_3_DIE_CODE", errorCode);        

    
	if(true){	
		TDieException e_tDie_3 = new TDieException();

		

		throw e_tDie_3;
	}

 


	tos_count_tDie_3++;

/**
 * [tDie_3 main ] stop
 */
	
	/**
	 * [tDie_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_3";
	
	

 



/**
 * [tDie_3 process_data_begin ] stop
 */
	
	/**
	 * [tDie_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_3";
	
	

 



/**
 * [tDie_3 process_data_end ] stop
 */



	
	/**
	 * [tBufferOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_3";
	
	

 



/**
 * [tBufferOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 



/**
 * [tFixedFlowInput_5 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

        }
        globalMap.put("tFixedFlowInput_5_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_5", true);
end_Hash.put("tFixedFlowInput_5", System.currentTimeMillis());




/**
 * [tFixedFlowInput_5 end ] stop
 */

	
	/**
	 * [tBufferOutput_3 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_3";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row39");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_3", true);
end_Hash.put("tBufferOutput_3", System.currentTimeMillis());




/**
 * [tBufferOutput_3 end ] stop
 */

	
	/**
	 * [tDie_3 end ] start
	 */

	

	
	
	currentComponent="tDie_3";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row40");
			  	}
			  	
 

ok_Hash.put("tDie_3", true);
end_Hash.put("tDie_3", System.currentTimeMillis());




/**
 * [tDie_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_5 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 



/**
 * [tFixedFlowInput_5 finally ] stop
 */

	
	/**
	 * [tBufferOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_3";
	
	

 



/**
 * [tBufferOutput_3 finally ] stop
 */

	
	/**
	 * [tDie_3 finally ] start
	 */

	

	
	
	currentComponent="tDie_3";
	
	

 



/**
 * [tDie_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row81Struct implements routines.system.IPersistableRow<row81Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String respuesta;

				public String getRespuesta () {
					return this.respuesta;
				}

				public Boolean respuestaIsNullable(){
				    return true;
				}
				public Boolean respuestaIsKey(){
				    return false;
				}
				public Integer respuestaLength(){
				    return null;
				}
				public Integer respuestaPrecision(){
				    return null;
				}
				public String respuestaDefault(){
				
					return null;
				
				}
				public String respuestaComment(){
				
				    return "";
				
				}
				public String respuestaPattern(){
				
					return "";
				
				}
				public String respuestaOriginalDbColumnName(){
				
					return "respuesta";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("respuesta="+respuesta);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row81Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row80Struct implements routines.system.IPersistableRow<row80Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String respuesta;

				public String getRespuesta () {
					return this.respuesta;
				}

				public Boolean respuestaIsNullable(){
				    return true;
				}
				public Boolean respuestaIsKey(){
				    return false;
				}
				public Integer respuestaLength(){
				    return null;
				}
				public Integer respuestaPrecision(){
				    return null;
				}
				public String respuestaDefault(){
				
					return null;
				
				}
				public String respuestaComment(){
				
				    return "";
				
				}
				public String respuestaPattern(){
				
					return "";
				
				}
				public String respuestaOriginalDbColumnName(){
				
					return "respuesta";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("respuesta="+respuesta);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row80Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_24Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_24_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row80Struct row80 = new row80Struct();
row80Struct row81 = row80;





	
	/**
	 * [tDie_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_8", false);
		start_Hash.put("tDie_8", System.currentTimeMillis());
		
	
	currentComponent="tDie_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row81");
					}
				
		int tos_count_tDie_8 = 0;
		

 



/**
 * [tDie_8 begin ] stop
 */



	
	/**
	 * [tBufferOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_8", false);
		start_Hash.put("tBufferOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row80");
					}
				
		int tos_count_tBufferOutput_8 = 0;
		

 



/**
 * [tBufferOutput_8 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_24", false);
		start_Hash.put("tFixedFlowInput_24", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_24";
	
	
		int tos_count_tFixedFlowInput_24 = 0;
		

	    for (int i_tFixedFlowInput_24 = 0 ; i_tFixedFlowInput_24 < 1 ; i_tFixedFlowInput_24++) {
	                	            	
    	            		row80.respuesta = "ERROR: No fue posible actualizar el estado de procesamiento del archivo";
    	            	

 



/**
 * [tFixedFlowInput_24 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_24 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_24";
	
	

 


	tos_count_tFixedFlowInput_24++;

/**
 * [tFixedFlowInput_24 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_24";
	
	

 



/**
 * [tFixedFlowInput_24 process_data_begin ] stop
 */

	
	/**
	 * [tBufferOutput_8 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row80"
						
						);
					}
					



String[] row_tBufferOutput_8=new String[]{"",};		
	    if(row80.respuesta != null){
	        
	            row_tBufferOutput_8[0] = row80.respuesta;
	                        			    
	    }else{
	    	row_tBufferOutput_8[0] = null;
	    }
	globalBuffer.add(row_tBufferOutput_8);	
	
 
     row81 = row80;


	tos_count_tBufferOutput_8++;

/**
 * [tBufferOutput_8 main ] stop
 */
	
	/**
	 * [tBufferOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_8";
	
	

 



/**
 * [tBufferOutput_8 process_data_begin ] stop
 */

	
	/**
	 * [tDie_8 main ] start
	 */

	

	
	
	currentComponent="tDie_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row81"
						
						);
					}
					

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_8", 5, "ERROR: No fue posible actualizar el estado de procesamiento del archivo", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_8_DIE_PRIORITY", 5);
	System.err.println("ERROR: No fue posible actualizar el estado de procesamiento del archivo");
	
	globalMap.put("tDie_8_DIE_MESSAGE", "ERROR: No fue posible actualizar el estado de procesamiento del archivo");
	globalMap.put("tDie_8_DIE_MESSAGES", "ERROR: No fue posible actualizar el estado de procesamiento del archivo");
	
	} catch (Exception | Error e_tDie_8) {
	    globalMap.put("tDie_8_ERROR_MESSAGE",e_tDie_8.getMessage());
		logIgnoredError(String.format("tDie_8 - tDie failed to log message due to internal error: %s", e_tDie_8), e_tDie_8);
	}
	
	currentComponent = "tDie_8";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_8_DIE_CODE", errorCode);        

    
	if(true){	
		TDieException e_tDie_8 = new TDieException();

		

		throw e_tDie_8;
	}

 


	tos_count_tDie_8++;

/**
 * [tDie_8 main ] stop
 */
	
	/**
	 * [tDie_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_8";
	
	

 



/**
 * [tDie_8 process_data_begin ] stop
 */
	
	/**
	 * [tDie_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_8";
	
	

 



/**
 * [tDie_8 process_data_end ] stop
 */



	
	/**
	 * [tBufferOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_8";
	
	

 



/**
 * [tBufferOutput_8 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_24";
	
	

 



/**
 * [tFixedFlowInput_24 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_24 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_24";
	
	

        }
        globalMap.put("tFixedFlowInput_24_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_24", true);
end_Hash.put("tFixedFlowInput_24", System.currentTimeMillis());




/**
 * [tFixedFlowInput_24 end ] stop
 */

	
	/**
	 * [tBufferOutput_8 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_8";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row80");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_8", true);
end_Hash.put("tBufferOutput_8", System.currentTimeMillis());




/**
 * [tBufferOutput_8 end ] stop
 */

	
	/**
	 * [tDie_8 end ] start
	 */

	

	
	
	currentComponent="tDie_8";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row81");
			  	}
			  	
 

ok_Hash.put("tDie_8", true);
end_Hash.put("tDie_8", System.currentTimeMillis());




/**
 * [tDie_8 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_24 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_24";
	
	

 



/**
 * [tFixedFlowInput_24 finally ] stop
 */

	
	/**
	 * [tBufferOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_8";
	
	

 



/**
 * [tBufferOutput_8 finally ] stop
 */

	
	/**
	 * [tDie_8 finally ] start
	 */

	

	
	
	currentComponent="tDie_8";
	
	

 



/**
 * [tDie_8 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_24_SUBPROCESS_STATE", 1);
	}
	


public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer archivos_id_;

				public Integer getArchivos_id_ () {
					return this.archivos_id_;
				}

				public Boolean archivos_id_IsNullable(){
				    return true;
				}
				public Boolean archivos_id_IsKey(){
				    return false;
				}
				public Integer archivos_id_Length(){
				    return null;
				}
				public Integer archivos_id_Precision(){
				    return null;
				}
				public String archivos_id_Default(){
				
					return null;
				
				}
				public String archivos_id_Comment(){
				
				    return "";
				
				}
				public String archivos_id_Pattern(){
				
					return "";
				
				}
				public String archivos_id_OriginalDbColumnName(){
				
					return "archivos_id_";
				
				}

				
			    public Integer estado_;

				public Integer getEstado_ () {
					return this.estado_;
				}

				public Boolean estado_IsNullable(){
				    return true;
				}
				public Boolean estado_IsKey(){
				    return false;
				}
				public Integer estado_Length(){
				    return null;
				}
				public Integer estado_Precision(){
				    return null;
				}
				public String estado_Default(){
				
					return null;
				
				}
				public String estado_Comment(){
				
				    return "";
				
				}
				public String estado_Pattern(){
				
					return "";
				
				}
				public String estado_OriginalDbColumnName(){
				
					return "estado_";
				
				}

				
			    public java.util.Date finicio_;

				public java.util.Date getFinicio_ () {
					return this.finicio_;
				}

				public Boolean finicio_IsNullable(){
				    return true;
				}
				public Boolean finicio_IsKey(){
				    return false;
				}
				public Integer finicio_Length(){
				    return null;
				}
				public Integer finicio_Precision(){
				    return null;
				}
				public String finicio_Default(){
				
					return null;
				
				}
				public String finicio_Comment(){
				
				    return "";
				
				}
				public String finicio_Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String finicio_OriginalDbColumnName(){
				
					return "finicio_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("archivos_id_="+String.valueOf(archivos_id_));
		sb.append(",estado_="+String.valueOf(estado_));
		sb.append(",finicio_="+String.valueOf(finicio_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row22Struct row22 = new row22Struct();




	
	/**
	 * [tOracleSP_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_7", false);
		start_Hash.put("tOracleSP_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tOracleSP_7 = 0;
		

	java.sql.Connection connection_tOracleSP_7 = null;
	connection_tOracleSP_7 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_2");
	

java.sql.CallableStatement statement_tOracleSP_7 = connection_tOracleSP_7.prepareCall("{call " + "cms2.updestadoarchivo" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_7;
String tmpString_tOracleSP_7;

 



/**
 * [tOracleSP_7 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_11", false);
		start_Hash.put("tFixedFlowInput_11", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_11";
	
	
		int tos_count_tFixedFlowInput_11 = 0;
		

	    for (int i_tFixedFlowInput_11 = 0 ; i_tFixedFlowInput_11 < 1 ; i_tFixedFlowInput_11++) {
	                	            	
    	            		row22.archivos_id_ = context.afiarchivos_id;
    	            	        	            	
    	            		row22.estado_ = 7;
    	            	        	            	
    	            		row22.finicio_ = context.vfinicio;
    	            	

 



/**
 * [tFixedFlowInput_11 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_11 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_11";
	
	

 


	tos_count_tFixedFlowInput_11++;

/**
 * [tFixedFlowInput_11 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_11";
	
	

 



/**
 * [tFixedFlowInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_7 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row22"
						
						);
					}
					

			// code for the argument 1 (archivos_id_) of type 'IN AUTOMAPPING'
    					if (row22.archivos_id_ == null) {
    						statement_tOracleSP_7.setNull(1, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_7.setInt(1, row22.archivos_id_);
    					}
    					
			// code for the argument 2 (estado_) of type 'IN AUTOMAPPING'
    					if (row22.estado_ == null) {
    						statement_tOracleSP_7.setNull(2, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_7.setInt(2, row22.estado_);
    					}
    					
			// code for the argument 3 (finicio_) of type 'IN TIMESTAMP'
    					if (row22.finicio_ == null) {
    						statement_tOracleSP_7.setNull(3, java.sql.Types.DATE);
    					} else {
    					
    					statement_tOracleSP_7.setTimestamp(3, new java.sql.Timestamp(row22.finicio_.getTime()));
    					
    					}
    					
		statement_tOracleSP_7.execute();
		

 


	tos_count_tOracleSP_7++;

/**
 * [tOracleSP_7 main ] stop
 */
	
	/**
	 * [tOracleSP_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_7";
	
	

 



/**
 * [tOracleSP_7 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_7";
	
	

 



/**
 * [tOracleSP_7 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_11";
	
	

 



/**
 * [tFixedFlowInput_11 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_11 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_11";
	
	

        }
        globalMap.put("tFixedFlowInput_11_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_11", true);
end_Hash.put("tFixedFlowInput_11", System.currentTimeMillis());




/**
 * [tFixedFlowInput_11 end ] stop
 */

	
	/**
	 * [tOracleSP_7 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_7";
	
	


	statement_tOracleSP_7.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tOracleSP_7", true);
end_Hash.put("tOracleSP_7", System.currentTimeMillis());

   			if (context.cregistros == 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If19", 0, "true");
					}
				tFixedFlowInput_3Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If19", 0, "false");
					}   	 
   				}



/**
 * [tOracleSP_7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_11 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_11";
	
	

 



/**
 * [tFixedFlowInput_11 finally ] stop
 */

	
	/**
	 * [tOracleSP_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_7";
	
	

 



/**
 * [tOracleSP_7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String respuesta;

				public String getRespuesta () {
					return this.respuesta;
				}

				public Boolean respuestaIsNullable(){
				    return true;
				}
				public Boolean respuestaIsKey(){
				    return false;
				}
				public Integer respuestaLength(){
				    return null;
				}
				public Integer respuestaPrecision(){
				    return null;
				}
				public String respuestaDefault(){
				
					return null;
				
				}
				public String respuestaComment(){
				
				    return "";
				
				}
				public String respuestaPattern(){
				
					return "";
				
				}
				public String respuestaOriginalDbColumnName(){
				
					return "respuesta";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("respuesta="+respuesta);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String respuesta;

				public String getRespuesta () {
					return this.respuesta;
				}

				public Boolean respuestaIsNullable(){
				    return true;
				}
				public Boolean respuestaIsKey(){
				    return false;
				}
				public Integer respuestaLength(){
				    return null;
				}
				public Integer respuestaPrecision(){
				    return null;
				}
				public String respuestaDefault(){
				
					return null;
				
				}
				public String respuestaComment(){
				
				    return "";
				
				}
				public String respuestaPattern(){
				
					return "";
				
				}
				public String respuestaOriginalDbColumnName(){
				
					return "respuesta";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.respuesta = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.respuesta,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("respuesta="+respuesta);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row33Struct row33 = new row33Struct();
row33Struct row34 = row33;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */



	
	/**
	 * [tBufferOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_1", false);
		start_Hash.put("tBufferOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row33");
					}
				
		int tos_count_tBufferOutput_1 = 0;
		

 



/**
 * [tBufferOutput_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_3", false);
		start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_3";
	
	
		int tos_count_tFixedFlowInput_3 = 0;
		

	    for (int i_tFixedFlowInput_3 = 0 ; i_tFixedFlowInput_3 < 1 ; i_tFixedFlowInput_3++) {
	                	            	
    	            		row33.respuesta = "ERROR: No se encuentra el id del archivo en AFI_ARCHIVOS";
    	            	

 



/**
 * [tFixedFlowInput_3 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 


	tos_count_tFixedFlowInput_3++;

/**
 * [tFixedFlowInput_3 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tBufferOutput_1 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row33"
						
						);
					}
					



String[] row_tBufferOutput_1=new String[]{"",};		
	    if(row33.respuesta != null){
	        
	            row_tBufferOutput_1[0] = row33.respuesta;
	                        			    
	    }else{
	    	row_tBufferOutput_1[0] = null;
	    }
	globalBuffer.add(row_tBufferOutput_1);	
	
 
     row34 = row33;


	tos_count_tBufferOutput_1++;

/**
 * [tBufferOutput_1 main ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

 



/**
 * [tBufferOutput_1 process_data_begin ] stop
 */

	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row34"
						
						);
					}
					

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_1", 5, "ERROR: No se encuentra el id del archivo en AFI_ARCHIVOS", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("ERROR: No se encuentra el id del archivo en AFI_ARCHIVOS");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "ERROR: No se encuentra el id del archivo en AFI_ARCHIVOS");
	globalMap.put("tDie_1_DIE_MESSAGES", "ERROR: No se encuentra el id del archivo en AFI_ARCHIVOS");
	
	} catch (Exception | Error e_tDie_1) {
	    globalMap.put("tDie_1_ERROR_MESSAGE",e_tDie_1.getMessage());
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        

    
	if(true){	
		TDieException e_tDie_1 = new TDieException();

		

		throw e_tDie_1;
	}

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_end ] stop
 */



	
	/**
	 * [tBufferOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

 



/**
 * [tBufferOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

        }
        globalMap.put("tFixedFlowInput_3_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_3", true);
end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());




/**
 * [tFixedFlowInput_3 end ] stop
 */

	
	/**
	 * [tBufferOutput_1 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row33");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_1", true);
end_Hash.put("tBufferOutput_1", System.currentTimeMillis());




/**
 * [tBufferOutput_1 end ] stop
 */

	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_3 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 finally ] stop
 */

	
	/**
	 * [tBufferOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";
	
	

 



/**
 * [tBufferOutput_1 finally ] stop
 */

	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row64_0Struct implements routines.system.IPersistableRow<row64_0Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String HOST;

				public String getHOST () {
					return this.HOST;
				}

				public Boolean HOSTIsNullable(){
				    return true;
				}
				public Boolean HOSTIsKey(){
				    return false;
				}
				public Integer HOSTLength(){
				    return null;
				}
				public Integer HOSTPrecision(){
				    return null;
				}
				public String HOSTDefault(){
				
					return null;
				
				}
				public String HOSTComment(){
				
				    return "";
				
				}
				public String HOSTPattern(){
				
					return "";
				
				}
				public String HOSTOriginalDbColumnName(){
				
					return "HOST";
				
				}

				
			    public String PUERTO;

				public String getPUERTO () {
					return this.PUERTO;
				}

				public Boolean PUERTOIsNullable(){
				    return true;
				}
				public Boolean PUERTOIsKey(){
				    return false;
				}
				public Integer PUERTOLength(){
				    return null;
				}
				public Integer PUERTOPrecision(){
				    return null;
				}
				public String PUERTODefault(){
				
					return null;
				
				}
				public String PUERTOComment(){
				
				    return "";
				
				}
				public String PUERTOPattern(){
				
					return "";
				
				}
				public String PUERTOOriginalDbColumnName(){
				
					return "PUERTO";
				
				}

				
			    public Integer ID_ARCHIVO;

				public Integer getID_ARCHIVO () {
					return this.ID_ARCHIVO;
				}

				public Boolean ID_ARCHIVOIsNullable(){
				    return true;
				}
				public Boolean ID_ARCHIVOIsKey(){
				    return false;
				}
				public Integer ID_ARCHIVOLength(){
				    return null;
				}
				public Integer ID_ARCHIVOPrecision(){
				    return null;
				}
				public String ID_ARCHIVODefault(){
				
					return null;
				
				}
				public String ID_ARCHIVOComment(){
				
				    return "";
				
				}
				public String ID_ARCHIVOPattern(){
				
					return "";
				
				}
				public String ID_ARCHIVOOriginalDbColumnName(){
				
					return "ID_ARCHIVO";
				
				}

				
			    public String RESPUESTA;

				public String getRESPUESTA () {
					return this.RESPUESTA;
				}

				public Boolean RESPUESTAIsNullable(){
				    return true;
				}
				public Boolean RESPUESTAIsKey(){
				    return false;
				}
				public Integer RESPUESTALength(){
				    return null;
				}
				public Integer RESPUESTAPrecision(){
				    return null;
				}
				public String RESPUESTADefault(){
				
					return null;
				
				}
				public String RESPUESTAComment(){
				
				    return "";
				
				}
				public String RESPUESTAPattern(){
				
					return "";
				
				}
				public String RESPUESTAOriginalDbColumnName(){
				
					return "RESPUESTA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.HOST = readString(dis);
					
					this.PUERTO = readString(dis);
					
						this.ID_ARCHIVO = readInteger(dis);
					
					this.RESPUESTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.HOST = readString(dis);
					
					this.PUERTO = readString(dis);
					
						this.ID_ARCHIVO = readInteger(dis);
					
					this.RESPUESTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.HOST,dos);
					
					// String
				
						writeString(this.PUERTO,dos);
					
					// Integer
				
						writeInteger(this.ID_ARCHIVO,dos);
					
					// String
				
						writeString(this.RESPUESTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.HOST,dos);
					
					// String
				
						writeString(this.PUERTO,dos);
					
					// Integer
				
						writeInteger(this.ID_ARCHIVO,dos);
					
					// String
				
						writeString(this.RESPUESTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("HOST="+HOST);
		sb.append(",PUERTO="+PUERTO);
		sb.append(",ID_ARCHIVO="+String.valueOf(ID_ARCHIVO));
		sb.append(",RESPUESTA="+RESPUESTA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row64_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row65Struct implements routines.system.IPersistableRow<row65Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String HOST;

				public String getHOST () {
					return this.HOST;
				}

				public Boolean HOSTIsNullable(){
				    return true;
				}
				public Boolean HOSTIsKey(){
				    return false;
				}
				public Integer HOSTLength(){
				    return null;
				}
				public Integer HOSTPrecision(){
				    return null;
				}
				public String HOSTDefault(){
				
					return null;
				
				}
				public String HOSTComment(){
				
				    return "";
				
				}
				public String HOSTPattern(){
				
					return "";
				
				}
				public String HOSTOriginalDbColumnName(){
				
					return "HOST";
				
				}

				
			    public String PUERTO;

				public String getPUERTO () {
					return this.PUERTO;
				}

				public Boolean PUERTOIsNullable(){
				    return true;
				}
				public Boolean PUERTOIsKey(){
				    return false;
				}
				public Integer PUERTOLength(){
				    return null;
				}
				public Integer PUERTOPrecision(){
				    return null;
				}
				public String PUERTODefault(){
				
					return null;
				
				}
				public String PUERTOComment(){
				
				    return "";
				
				}
				public String PUERTOPattern(){
				
					return "";
				
				}
				public String PUERTOOriginalDbColumnName(){
				
					return "PUERTO";
				
				}

				
			    public Integer ID_ARCHIVO;

				public Integer getID_ARCHIVO () {
					return this.ID_ARCHIVO;
				}

				public Boolean ID_ARCHIVOIsNullable(){
				    return true;
				}
				public Boolean ID_ARCHIVOIsKey(){
				    return false;
				}
				public Integer ID_ARCHIVOLength(){
				    return null;
				}
				public Integer ID_ARCHIVOPrecision(){
				    return null;
				}
				public String ID_ARCHIVODefault(){
				
					return null;
				
				}
				public String ID_ARCHIVOComment(){
				
				    return "";
				
				}
				public String ID_ARCHIVOPattern(){
				
					return "";
				
				}
				public String ID_ARCHIVOOriginalDbColumnName(){
				
					return "ID_ARCHIVO";
				
				}

				
			    public String RESPUESTA;

				public String getRESPUESTA () {
					return this.RESPUESTA;
				}

				public Boolean RESPUESTAIsNullable(){
				    return true;
				}
				public Boolean RESPUESTAIsKey(){
				    return false;
				}
				public Integer RESPUESTALength(){
				    return null;
				}
				public Integer RESPUESTAPrecision(){
				    return null;
				}
				public String RESPUESTADefault(){
				
					return null;
				
				}
				public String RESPUESTAComment(){
				
				    return "";
				
				}
				public String RESPUESTAPattern(){
				
					return "";
				
				}
				public String RESPUESTAOriginalDbColumnName(){
				
					return "RESPUESTA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.HOST = readString(dis);
					
					this.PUERTO = readString(dis);
					
						this.ID_ARCHIVO = readInteger(dis);
					
					this.RESPUESTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.HOST = readString(dis);
					
					this.PUERTO = readString(dis);
					
						this.ID_ARCHIVO = readInteger(dis);
					
					this.RESPUESTA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.HOST,dos);
					
					// String
				
						writeString(this.PUERTO,dos);
					
					// Integer
				
						writeInteger(this.ID_ARCHIVO,dos);
					
					// String
				
						writeString(this.RESPUESTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.HOST,dos);
					
					// String
				
						writeString(this.PUERTO,dos);
					
					// Integer
				
						writeInteger(this.ID_ARCHIVO,dos);
					
					// String
				
						writeString(this.RESPUESTA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("HOST="+HOST);
		sb.append(",PUERTO="+PUERTO);
		sb.append(",ID_ARCHIVO="+String.valueOf(ID_ARCHIVO));
		sb.append(",RESPUESTA="+RESPUESTA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row65Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row65Struct row65 = new row65Struct();
row65Struct row64_0 = row65;





	
	/**
	 * [tDie_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_6", false);
		start_Hash.put("tDie_6", System.currentTimeMillis());
		
	
	currentComponent="tDie_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row64_0");
					}
				
		int tos_count_tDie_6 = 0;
		

 



/**
 * [tDie_6 begin ] stop
 */



	
	/**
	 * [tBufferOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_6", false);
		start_Hash.put("tBufferOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row65");
					}
				
		int tos_count_tBufferOutput_6 = 0;
		

 



/**
 * [tBufferOutput_6 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_19", false);
		start_Hash.put("tFixedFlowInput_19", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_19";
	
	
		int tos_count_tFixedFlowInput_19 = 0;
		

	    for (int i_tFixedFlowInput_19 = 0 ; i_tFixedFlowInput_19 < 1 ; i_tFixedFlowInput_19++) {
	                	            	
    	            		row65.HOST = context.host;
    	            	        	            	
    	            		row65.PUERTO = context.port;
    	            	        	            	
    	            		row65.ID_ARCHIVO = context.afiarchivos_id;
    	            	        	            	
    	            		row65.RESPUESTA = "ERROR: Archivo XML no encontrado";
    	            	

 



/**
 * [tFixedFlowInput_19 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_19 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_19";
	
	

 


	tos_count_tFixedFlowInput_19++;

/**
 * [tFixedFlowInput_19 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_19";
	
	

 



/**
 * [tFixedFlowInput_19 process_data_begin ] stop
 */

	
	/**
	 * [tBufferOutput_6 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row65"
						
						);
					}
					



String[] row_tBufferOutput_6=new String[]{"","","","",};		
	    if(row65.HOST != null){
	        
	            row_tBufferOutput_6[0] = row65.HOST;
	                        			    
	    }else{
	    	row_tBufferOutput_6[0] = null;
	    }
	    if(row65.PUERTO != null){
	        
	            row_tBufferOutput_6[1] = row65.PUERTO;
	                        			    
	    }else{
	    	row_tBufferOutput_6[1] = null;
	    }
	    if(row65.ID_ARCHIVO != null){
	        
	            row_tBufferOutput_6[2] = String.valueOf(row65.ID_ARCHIVO);
	                        			    
	    }else{
	    	row_tBufferOutput_6[2] = null;
	    }
	    if(row65.RESPUESTA != null){
	        
	            row_tBufferOutput_6[3] = row65.RESPUESTA;
	                        			    
	    }else{
	    	row_tBufferOutput_6[3] = null;
	    }
	globalBuffer.add(row_tBufferOutput_6);	
	
 
     row64_0 = row65;


	tos_count_tBufferOutput_6++;

/**
 * [tBufferOutput_6 main ] stop
 */
	
	/**
	 * [tBufferOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_6";
	
	

 



/**
 * [tBufferOutput_6 process_data_begin ] stop
 */

	
	/**
	 * [tDie_6 main ] start
	 */

	

	
	
	currentComponent="tDie_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row64_0"
						
						);
					}
					

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_6", 5, "Archivo XML no encontrado", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_6_DIE_PRIORITY", 5);
	System.err.println("Archivo XML no encontrado");
	
	globalMap.put("tDie_6_DIE_MESSAGE", "Archivo XML no encontrado");
	globalMap.put("tDie_6_DIE_MESSAGES", "Archivo XML no encontrado");
	
	} catch (Exception | Error e_tDie_6) {
	    globalMap.put("tDie_6_ERROR_MESSAGE",e_tDie_6.getMessage());
		logIgnoredError(String.format("tDie_6 - tDie failed to log message due to internal error: %s", e_tDie_6), e_tDie_6);
	}
	
	currentComponent = "tDie_6";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_6_DIE_CODE", errorCode);        

    
	if(true){	
		TDieException e_tDie_6 = new TDieException();

		

		throw e_tDie_6;
	}

 


	tos_count_tDie_6++;

/**
 * [tDie_6 main ] stop
 */
	
	/**
	 * [tDie_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_6";
	
	

 



/**
 * [tDie_6 process_data_begin ] stop
 */
	
	/**
	 * [tDie_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_6";
	
	

 



/**
 * [tDie_6 process_data_end ] stop
 */



	
	/**
	 * [tBufferOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_6";
	
	

 



/**
 * [tBufferOutput_6 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_19";
	
	

 



/**
 * [tFixedFlowInput_19 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_19 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_19";
	
	

        }
        globalMap.put("tFixedFlowInput_19_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_19", true);
end_Hash.put("tFixedFlowInput_19", System.currentTimeMillis());




/**
 * [tFixedFlowInput_19 end ] stop
 */

	
	/**
	 * [tBufferOutput_6 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_6";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row65");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_6", true);
end_Hash.put("tBufferOutput_6", System.currentTimeMillis());




/**
 * [tBufferOutput_6 end ] stop
 */

	
	/**
	 * [tDie_6 end ] start
	 */

	

	
	
	currentComponent="tDie_6";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row64_0");
			  	}
			  	
 

ok_Hash.put("tDie_6", true);
end_Hash.put("tDie_6", System.currentTimeMillis());




/**
 * [tDie_6 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_19 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_19";
	
	

 



/**
 * [tFixedFlowInput_19 finally ] stop
 */

	
	/**
	 * [tBufferOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_6";
	
	

 



/**
 * [tBufferOutput_6 finally ] stop
 */

	
	/**
	 * [tDie_6 finally ] start
	 */

	

	
	
	currentComponent="tDie_6";
	
	

 



/**
 * [tDie_6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_19_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public int TDOCUMENTOS_ID;

				public int getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public int PERSONAS_ID;

				public int getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return 100;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return 0;
				}
				public String PRIMER_NOMBREDefault(){
				
					return null;
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return 100;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return 0;
				}
				public String PRIMER_APELLIDODefault(){
				
					return null;
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public java.util.Date FECHA_NACIMIENTO;

				public java.util.Date getFECHA_NACIMIENTO () {
					return this.FECHA_NACIMIENTO;
				}

				public Boolean FECHA_NACIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_NACIMIENTOIsKey(){
				    return false;
				}
				public Integer FECHA_NACIMIENTOLength(){
				    return 0;
				}
				public Integer FECHA_NACIMIENTOPrecision(){
				    return 0;
				}
				public String FECHA_NACIMIENTODefault(){
				
					return null;
				
				}
				public String FECHA_NACIMIENTOComment(){
				
				    return "";
				
				}
				public String FECHA_NACIMIENTOPattern(){
				
					return "";
				
				}
				public String FECHA_NACIMIENTOOriginalDbColumnName(){
				
					return "FECHA_NACIMIENTO";
				
				}

				
			    public String NOMBRES;

				public String getNOMBRES () {
					return this.NOMBRES;
				}

				public Boolean NOMBRESIsNullable(){
				    return true;
				}
				public Boolean NOMBRESIsKey(){
				    return false;
				}
				public Integer NOMBRESLength(){
				    return 400;
				}
				public Integer NOMBRESPrecision(){
				    return 0;
				}
				public String NOMBRESDefault(){
				
					return null;
				
				}
				public String NOMBRESComment(){
				
				    return "";
				
				}
				public String NOMBRESPattern(){
				
					return "";
				
				}
				public String NOMBRESOriginalDbColumnName(){
				
					return "NOMBRES";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
			        this.TDOCUMENTOS_ID = dis.readInt();
					
					this.DOCUMENTO = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
					this.NOMBRES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
			        this.TDOCUMENTOS_ID = dis.readInt();
					
					this.DOCUMENTO = readString(dis);
					
			        this.PERSONAS_ID = dis.readInt();
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.FECHA_NACIMIENTO = readDate(dis);
					
					this.NOMBRES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.TDOCUMENTOS_ID);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.NOMBRES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.TDOCUMENTOS_ID);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_NACIMIENTO,dos);
					
					// String
				
						writeString(this.NOMBRES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",FECHA_NACIMIENTO="+String.valueOf(FECHA_NACIMIENTO));
		sb.append(",NOMBRES="+NOMBRES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tAdvancedHash_row9 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row9", false);
		start_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tAdvancedHash_row9 = 0;
		

			   		// connection name:row9
			   		// source node:tOracleInput_5 - inputs:(after_tOracleInput_3) outputs:(row9,row9) | target node:tAdvancedHash_row9 - inputs:(row9) outputs:()
			   		// linked node: tMap_3 - inputs:(row7,row9) outputs:(TDocDocPNomPApellido,TDocDocumento,NomApelFnacimiento,PNomPApeDocumento,NomApellidos)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row9Struct>getLookup(matchingModeEnum_row9);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row9 begin ] stop
 */



	
	/**
	 * [tOracleInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_5", false);
		start_Hash.put("tOracleInput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_5";
	
	
		int tos_count_tOracleInput_5 = 0;
		
	


	
		    int nb_line_tOracleInput_5 = 0;
		    java.sql.Connection conn_tOracleInput_5 = null;
				conn_tOracleInput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_5 = false;
				boolean isConnectionWrapped_tOracleInput_5 = !(conn_tOracleInput_5 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_5 = null;
                if (isConnectionWrapped_tOracleInput_5) {
					unwrappedOraConn_tOracleInput_5 = conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_5 != null) {
                        isTimeZoneNull_tOracleInput_5 = (unwrappedOraConn_tOracleInput_5.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_5 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_5).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_5) {
					java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_5 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_5.next()) {
						sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_5 && unwrappedOraConn_tOracleInput_5 != null) {
                        unwrappedOraConn_tOracleInput_5.setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_5).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_5.setFetchSize(1000);


		    String dbquery_tOracleInput_5 = 
"select \ndistinct\n gp.tdocumentos_id, \ngp.documento, \ngp.id personas_id, \n trim(gp.primer_nombre) primer_nombre, \n"
+"trim(gp.primer_apellido) primer_apellido, \n trunc(nvl(gp.fecha_nacimiento,\nto_date('01/01/1901','dd/mm/yyyy'))) fecha_"
+"nacimiento,\ntrim(gp.primer_nombre)||trim(gp.segundo_nombre)||trim(gp.primer_apellido)||trim(gp.segundo_apellido) nombre"
+"s\n  from gen_personas gp, tst_carguemasivo cm\n  where (trim(gp.primer_nombre) = trim(cm.primer_nombre)\n    and trim(g"
+"p.primer_apellido) = trim(cm.primer_apellido))\n\nunion \n\nselect\n distinct \ngp.tdocumentos_id, \ngp.documento, \ngp."
+"id personas_id, \n trim(gp.primer_nombre) primer_nombre, \ntrim(gp.primer_apellido) primer_apellido, \n trunc(nvl(gp.fec"
+"ha_nacimiento,to_date('01/01/1901','dd/mm/yyyy'))) fecha_nacimiento,\ntrim(gp.primer_nombre)||trim(gp.segundo_nombre)||t"
+"rim(gp.primer_apellido)||trim(gp.segundo_apellido) nombres\n  from gen_personas gp, tst_carguemasivo cm\n  where trim(gp"
+".documento) = trim(cm.documento)";
		    

		    globalMap.put("tOracleInput_5_QUERY",dbquery_tOracleInput_5);

		    java.sql.ResultSet rs_tOracleInput_5 = null;

		    try {
		    	rs_tOracleInput_5 = stmt_tOracleInput_5.executeQuery(dbquery_tOracleInput_5);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5.getMetaData();
		    	int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5.getColumnCount();

		    String tmpContent_tOracleInput_5 = null;
		    
		    
		    while (rs_tOracleInput_5.next()) {
		        nb_line_tOracleInput_5++;
		        
							if(colQtyInRs_tOracleInput_5 < 1) {
								row9.TDOCUMENTOS_ID = 0;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(1) != null) {
						row9.TDOCUMENTOS_ID = rs_tOracleInput_5.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 2) {
								row9.DOCUMENTO = null;
							} else {
	                         		
        	row9.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 2, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 3) {
								row9.PERSONAS_ID = 0;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(3) != null) {
						row9.PERSONAS_ID = rs_tOracleInput_5.getInt(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 4) {
								row9.PRIMER_NOMBRE = null;
							} else {
	                         		
        	row9.PRIMER_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 4, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 5) {
								row9.PRIMER_APELLIDO = null;
							} else {
	                         		
        	row9.PRIMER_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 5, true);
		                    }
							if(colQtyInRs_tOracleInput_5 < 6) {
								row9.FECHA_NACIMIENTO = null;
							} else {
										
			row9.FECHA_NACIMIENTO = routines.system.JDBCUtil.getDate(rs_tOracleInput_5, 6);
		                    }
							if(colQtyInRs_tOracleInput_5 < 7) {
								row9.NOMBRES = null;
							} else {
	                         		
        	row9.NOMBRES = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 7, false);
		                    }
					




 



/**
 * [tOracleInput_5 begin ] stop
 */
	
	/**
	 * [tOracleInput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 


	tos_count_tOracleInput_5++;

/**
 * [tOracleInput_5 main ] stop
 */
	
	/**
	 * [tOracleInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					


			   
			   

					row9Struct row9_HashRow = new row9Struct();
		   	   	   
				
				row9_HashRow.TDOCUMENTOS_ID = row9.TDOCUMENTOS_ID;
				
				row9_HashRow.DOCUMENTO = row9.DOCUMENTO;
				
				row9_HashRow.PERSONAS_ID = row9.PERSONAS_ID;
				
				row9_HashRow.PRIMER_NOMBRE = row9.PRIMER_NOMBRE;
				
				row9_HashRow.PRIMER_APELLIDO = row9.PRIMER_APELLIDO;
				
				row9_HashRow.FECHA_NACIMIENTO = row9.FECHA_NACIMIENTO;
				
				row9_HashRow.NOMBRES = row9.NOMBRES;
				
			tHash_Lookup_row9.put(row9_HashRow);
			
            




 


	tos_count_tAdvancedHash_row9++;

/**
 * [tAdvancedHash_row9 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

}
}finally{
	if (rs_tOracleInput_5 != null) {
		rs_tOracleInput_5.close();
	}
	if (stmt_tOracleInput_5 != null) {
		stmt_tOracleInput_5.close();
	}
}

globalMap.put("tOracleInput_5_NB_LINE",nb_line_tOracleInput_5);
 

ok_Hash.put("tOracleInput_5", true);
end_Hash.put("tOracleInput_5", System.currentTimeMillis());




/**
 * [tOracleInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

tHash_Lookup_row9.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row9", true);
end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());




/**
 * [tAdvancedHash_row9 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row18Struct implements routines.system.IPersistableComparableLookupRow<row18Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int AFILIADOS_ID;

				public int getAFILIADOS_ID () {
					return this.AFILIADOS_ID;
				}

				public Boolean AFILIADOS_IDIsNullable(){
				    return false;
				}
				public Boolean AFILIADOS_IDIsKey(){
				    return false;
				}
				public Integer AFILIADOS_IDLength(){
				    return 0;
				}
				public Integer AFILIADOS_IDPrecision(){
				    return null;
				}
				public String AFILIADOS_IDDefault(){
				
					return "";
				
				}
				public String AFILIADOS_IDComment(){
				
				    return "";
				
				}
				public String AFILIADOS_IDPattern(){
				
					return "";
				
				}
				public String AFILIADOS_IDOriginalDbColumnName(){
				
					return "AFILIADOS_ID";
				
				}

				
			    public Integer PLANAFILIACIONES_ID;

				public Integer getPLANAFILIACIONES_ID () {
					return this.PLANAFILIACIONES_ID;
				}

				public Boolean PLANAFILIACIONES_IDIsNullable(){
				    return true;
				}
				public Boolean PLANAFILIACIONES_IDIsKey(){
				    return false;
				}
				public Integer PLANAFILIACIONES_IDLength(){
				    return 0;
				}
				public Integer PLANAFILIACIONES_IDPrecision(){
				    return null;
				}
				public String PLANAFILIACIONES_IDDefault(){
				
					return "";
				
				}
				public String PLANAFILIACIONES_IDComment(){
				
				    return "";
				
				}
				public String PLANAFILIACIONES_IDPattern(){
				
					return "";
				
				}
				public String PLANAFILIACIONES_IDOriginalDbColumnName(){
				
					return "PLANAFILIACIONES_ID";
				
				}

				
			    public int PERSONAS_ID;

				public int getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.PERSONAS_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row18Struct other = (row18Struct) obj;
		
						if (this.PERSONAS_ID != other.PERSONAS_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row18Struct other) {

		other.AFILIADOS_ID = this.AFILIADOS_ID;
	            other.PLANAFILIACIONES_ID = this.PLANAFILIACIONES_ID;
	            other.PERSONAS_ID = this.PERSONAS_ID;
	            
	}

	public void copyKeysDataTo(row18Struct other) {

		other.PERSONAS_ID = this.PERSONAS_ID;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
			        this.PERSONAS_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
			        this.PERSONAS_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.PERSONAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.AFILIADOS_ID = dis.readInt();
					
						this.PLANAFILIACIONES_ID = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.AFILIADOS_ID = objectIn.readInt();
					
						this.PLANAFILIACIONES_ID = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.AFILIADOS_ID);
					
					writeInteger(this.PLANAFILIACIONES_ID, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.AFILIADOS_ID);
					
					writeInteger(this.PLANAFILIACIONES_ID, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AFILIADOS_ID="+String.valueOf(AFILIADOS_ID));
		sb.append(",PLANAFILIACIONES_ID="+String.valueOf(PLANAFILIACIONES_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PERSONAS_ID, other.PERSONAS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row18Struct row18 = new row18Struct();




	
	/**
	 * [tAdvancedHash_row18 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row18", false);
		start_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row18";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tAdvancedHash_row18 = 0;
		

			   		// connection name:row18
			   		// source node:tOracleInput_6 - inputs:(after_tOracleInput_4) outputs:(row18,row18) | target node:tAdvancedHash_row18 - inputs:(row18) outputs:()
			   		// linked node: tMap_4 - inputs:(row17,row18) outputs:(IxAfiliados,IxPersona,IxCarga)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row18 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row18Struct>getLookup(matchingModeEnum_row18);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row18", tHash_Lookup_row18);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row18 begin ] stop
 */



	
	/**
	 * [tOracleInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_6", false);
		start_Hash.put("tOracleInput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_6";
	
	
		int tos_count_tOracleInput_6 = 0;
		
	


	
		    int nb_line_tOracleInput_6 = 0;
		    java.sql.Connection conn_tOracleInput_6 = null;
				conn_tOracleInput_6 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_6 = false;
				boolean isConnectionWrapped_tOracleInput_6 = !(conn_tOracleInput_6 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_6.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_6 = null;
                if (isConnectionWrapped_tOracleInput_6) {
					unwrappedOraConn_tOracleInput_6 = conn_tOracleInput_6.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_6 != null) {
                        isTimeZoneNull_tOracleInput_6 = (unwrappedOraConn_tOracleInput_6.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_6 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_6).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_6) {
					java.sql.Statement stmtGetTZ_tOracleInput_6 = conn_tOracleInput_6.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_6 = stmtGetTZ_tOracleInput_6.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_6 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_6.next()) {
						sessionTimezone_tOracleInput_6 = rsGetTZ_tOracleInput_6.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_6 && unwrappedOraConn_tOracleInput_6 != null) {
                        unwrappedOraConn_tOracleInput_6.setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_6).setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_6 = conn_tOracleInput_6.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_6.setFetchSize(1000);


		    String dbquery_tOracleInput_6 = "select ga.id afiliados_id, ga.planafiliaciones_id, ga.personas_id\n  from gen_afiliados ga\n   inner join tst_carguemas"
+"ivo cm on (ga.personas_id = cm.personas_id)\n  where cm.procesado is not null\n    and cm.personas_id is not null"

;
		    

		    globalMap.put("tOracleInput_6_QUERY",dbquery_tOracleInput_6);

		    java.sql.ResultSet rs_tOracleInput_6 = null;

		    try {
		    	rs_tOracleInput_6 = stmt_tOracleInput_6.executeQuery(dbquery_tOracleInput_6);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_6 = rs_tOracleInput_6.getMetaData();
		    	int colQtyInRs_tOracleInput_6 = rsmd_tOracleInput_6.getColumnCount();

		    String tmpContent_tOracleInput_6 = null;
		    
		    
		    while (rs_tOracleInput_6.next()) {
		        nb_line_tOracleInput_6++;
		        
							if(colQtyInRs_tOracleInput_6 < 1) {
								row18.AFILIADOS_ID = 0;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(1) != null) {
						row18.AFILIADOS_ID = rs_tOracleInput_6.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 2) {
								row18.PLANAFILIACIONES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(2) != null) {
						row18.PLANAFILIACIONES_ID = rs_tOracleInput_6.getInt(2);
					} else {
				
						row18.PLANAFILIACIONES_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 3) {
								row18.PERSONAS_ID = 0;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(3) != null) {
						row18.PERSONAS_ID = rs_tOracleInput_6.getInt(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_6 begin ] stop
 */
	
	/**
	 * [tOracleInput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 


	tos_count_tOracleInput_6++;

/**
 * [tOracleInput_6 main ] stop
 */
	
	/**
	 * [tOracleInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					


			   
			   

					row18Struct row18_HashRow = new row18Struct();
		   	   	   
				
				row18_HashRow.AFILIADOS_ID = row18.AFILIADOS_ID;
				
				row18_HashRow.PLANAFILIACIONES_ID = row18.PLANAFILIACIONES_ID;
				
				row18_HashRow.PERSONAS_ID = row18.PERSONAS_ID;
				
			tHash_Lookup_row18.put(row18_HashRow);
			
            




 


	tos_count_tAdvancedHash_row18++;

/**
 * [tAdvancedHash_row18 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	

 



/**
 * [tAdvancedHash_row18 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row18 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	

 



/**
 * [tAdvancedHash_row18 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

}
}finally{
	if (rs_tOracleInput_6 != null) {
		rs_tOracleInput_6.close();
	}
	if (stmt_tOracleInput_6 != null) {
		stmt_tOracleInput_6.close();
	}
}

globalMap.put("tOracleInput_6_NB_LINE",nb_line_tOracleInput_6);
 

ok_Hash.put("tOracleInput_6", true);
end_Hash.put("tOracleInput_6", System.currentTimeMillis());




/**
 * [tOracleInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	

tHash_Lookup_row18.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row18", true);
end_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());




/**
 * [tAdvancedHash_row18 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	

 



/**
 * [tAdvancedHash_row18 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


context.estadoexc = "Fail";
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tLogCatcher_1Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class row68Struct implements routines.system.IPersistableRow<row68Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return "";
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return "";
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return "";
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return "";
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return "";
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return "";
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return "";
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return "";
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return "";
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return "";
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row68Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row67Struct implements routines.system.IPersistableRow<row67Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return "";
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return "";
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return "";
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return "";
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return "";
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return "";
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return "";
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return "";
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return "";
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return "";
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row67Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row67Struct row67 = new row67Struct();
row67Struct row68 = row67;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row68");
					}
				
		int tos_count_tRunJob_1 = 0;
		
class DealChildJobLibrary_tRunJob_1 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new java.io.ObjectInputStream(new java.io.FileInputStream(crcMapPath)) {
				@Override
				public Class<?> resolveClass(java.io.ObjectStreamClass desc) throws java.io.IOException, ClassNotFoundException {
					if(!"java.util.HashMap".equals(desc.getName())) {
						throw new java.io.InvalidClassException("Unauthorized deserialization attempt : " + desc.getName());
					}
					return super.resolveClass(desc);
				}
			};
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

	class JVMArgumentHelper_tRunJob_1 {
		
		
		
		private void addClasspath(java.util.List<String> target_argument_list, String job_origin_classpath) {
			
			String extra_classpath = null;
			String path_separator = System.getProperty("path.separator");
			if (path_separator != null && path_separator.length() > 1) {
				throw new RuntimeException("path separator should be single character");
			}
			
			if(extra_classpath!=null && !extra_classpath.isEmpty()) {
				if(extra_classpath.endsWith(path_separator)) {
					target_argument_list.add(extra_classpath+job_origin_classpath);
				} else if(extra_classpath.contains(path_separator)) {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				} else if(extra_classpath.endsWith(":")) {
					target_argument_list.add(extra_classpath.replace(":", path_separator)+job_origin_classpath);
				} else if(extra_classpath.endsWith(";")) {
					target_argument_list.add(extra_classpath.replace(";", path_separator)+job_origin_classpath);
				} else if(extra_classpath.contains(":")) {
					target_argument_list.add(concatStr(extra_classpath.replace(":", path_separator), path_separator, job_origin_classpath));
				} else if(extra_classpath.contains(";")) {
					target_argument_list.add(concatStr(extra_classpath.replace(";", path_separator), path_separator, job_origin_classpath));
				} else {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				}
				return;
			}
			
			target_argument_list.add(job_origin_classpath);
		}
		
		private String concatStr(String s1, String s2, String s3) {
			java.lang.StringBuilder strB = new java.lang.StringBuilder();
			strB.append(s1).append(s2).append(s3);
			return strB.toString();
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			addArgumentsTo(target_argument_list, argument_from_child, false);
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child, boolean isCP) {
			if(isCP) {
				addClasspath(target_argument_list, argument_from_child);
				return;
			}
		
			
			
			
			target_argument_list.add(argument_from_child);
			
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_1 jvm_argument_helper_tRunJob_1 = new JVMArgumentHelper_tRunJob_1();
	
	String audit_jar_path_tRunJob_1 = System.getProperty("classpath.extended");
	

 



/**
 * [tRunJob_1 begin ] stop
 */



	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row67");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.logerror)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        if(fileToDelete_tFileOutputDelimited_2.exists()) {
                            fileToDelete_tFileOutputDelimited_2.delete();
                        }
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row67.type = lcm.getType();
		row67.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row67.priority = lcm.getPriority();
		row67.message = lcm.getMessage();
		row67.code = lcm.getCode();
		
		row67.moment = java.util.Calendar.getInstance().getTime();
	
    	row67.pid = pid;
		row67.root_pid = rootPid;
		row67.father_pid = fatherPid;
	
    	row67.project = projectName;
    	row67.job = jobName;
    	row67.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row67"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row67.moment != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(row67.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row67.pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row67.pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row67.root_pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row67.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row67.father_pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row67.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row67.project != null) {
                        sb_tFileOutputDelimited_2.append(
                            row67.project
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row67.job != null) {
                        sb_tFileOutputDelimited_2.append(
                            row67.job
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row67.context != null) {
                        sb_tFileOutputDelimited_2.append(
                            row67.context
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row67.priority != null) {
                        sb_tFileOutputDelimited_2.append(
                            row67.priority
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row67.type != null) {
                        sb_tFileOutputDelimited_2.append(
                            row67.type
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row67.origin != null) {
                        sb_tFileOutputDelimited_2.append(
                            row67.origin
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row67.message != null) {
                        sb_tFileOutputDelimited_2.append(
                            row67.message
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row67.code != null) {
                        sb_tFileOutputDelimited_2.append(
                            row67.code
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 
     row68 = row67;


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */

	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row68"
						
						);
					}
					
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
			
			String osName_tRunJob_1 = System.getProperty("os.name");
			if (osName_tRunJob_1 != null && osName_tRunJob_1.toLowerCase(java.util.Locale.US).startsWith("win")){
				
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
              					String classpath_tRunJob_1_5 = ".;../lib/routines.jar;../lib/log4j-slf4j-impl-2.17.1.jar;../lib/log4j-api-2.17.1.jar;../lib/log4j-core-2.17.1.jar;../lib/activation-1.1.jar;../lib/jakarta.mail-1.6.7.jar;../lib/xpathutil-1.0.0.jar;../lib/slf4j-api-1.7.34.jar;../lib/crypto-utils-7.1.16.jar;../lib/jboss-marshalling-2.0.12.Final.jar;../lib/dom4j-2.1.3.jar;../lib/jaxen-1.1.6.jar;mail_1_3.jar;";
              					
              					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
	        					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5), true);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "afi_cargue_masivo.mail_1_3.Mail");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
		      					String classpath_tRunJob_1_5 = ".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/log4j-slf4j-impl-2.17.1.jar:$ROOT_PATH/../lib/log4j-api-2.17.1.jar:$ROOT_PATH/../lib/log4j-core-2.17.1.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/jakarta.mail-1.6.7.jar:$ROOT_PATH/../lib/xpathutil-1.0.0.jar:$ROOT_PATH/../lib/slf4j-api-1.7.34.jar:$ROOT_PATH/../lib/crypto-utils-7.1.16.jar:$ROOT_PATH/../lib/jboss-marshalling-2.0.12.Final.jar:$ROOT_PATH/../lib/dom4j-2.1.3.jar:$ROOT_PATH/../lib/jaxen-1.1.6.jar:$ROOT_PATH/mail_1_3.jar:";
		      					
		      					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5).replace("$ROOT_PATH",System.getProperty("user.dir")), true);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "afi_cargue_masivo.mail_1_3.Mail");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "$@");
		      				
			}

			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = row68.moment;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param moment=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param moment=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param moment=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("moment", obj_tRunJob_1);
	
		obj_tRunJob_1 = row68.project;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param project=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param project=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param project=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("project", obj_tRunJob_1);
	
		obj_tRunJob_1 = row68.job;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param job=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param job=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param job=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("job", obj_tRunJob_1);
	
		obj_tRunJob_1 = row68.context;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param context=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param context=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param context=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("context", obj_tRunJob_1);
	
		obj_tRunJob_1 = row68.origin;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param origin=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param origin=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param origin=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("origin", obj_tRunJob_1);
	
		obj_tRunJob_1 = row68.message;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param message=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param message=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param message=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("message", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_origen", obj_tRunJob_1);
	
	
				class ConsoleHelper_tRunJob_1 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_1 consoleHelper_tRunJob_1 = new ConsoleHelper_tRunJob_1();

		Runtime runtime_tRunJob_1 = Runtime.getRuntime();
		Process ps_tRunJob_1 = null;
		
		//0 indicates normal termination
        int result_tRunJob_1;
        StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
        try {
            ps_tRunJob_1 = runtime_tRunJob_1.exec((String[])paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

            Thread normal_tRunJob_1 = consoleHelper_tRunJob_1.getNormalThread(ps_tRunJob_1);
            normal_tRunJob_1.start();

            Thread error_tRunJob_1 = consoleHelper_tRunJob_1.getErrorThread(ps_tRunJob_1, errorMsg_tRunJob_1);
            error_tRunJob_1.start();

            result_tRunJob_1 = ps_tRunJob_1.waitFor();
            normal_tRunJob_1.join();
            error_tRunJob_1.join();
        } catch (ThreadDeath tde) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",tde.getMessage());
            ps_tRunJob_1.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_1_CHILD_RETURN_CODE",result_tRunJob_1);
		if(result_tRunJob_1 != 0){
   			globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_1.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_1 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_1.toString());
			
  		}

		

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row67");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */

	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row68");
			  	}
			  	
 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */

	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
	
 



/**
 * [tRunJob_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tOracleInput_19Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row82Struct implements routines.system.IPersistableRow<row82Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer ESTADO;

				public Integer getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.ESTADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.ESTADO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESTADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESTADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESTADO="+String.valueOf(ESTADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row82Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row82Struct row82 = new row82Struct();




	
	/**
	 * [tJavaRow_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_28", false);
		start_Hash.put("tJavaRow_28", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_28";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row82");
					}
				
		int tos_count_tJavaRow_28 = 0;
		

int nb_line_tJavaRow_28 = 0;

 



/**
 * [tJavaRow_28 begin ] stop
 */



	
	/**
	 * [tOracleInput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_19", false);
		start_Hash.put("tOracleInput_19", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_19";
	
	
		int tos_count_tOracleInput_19 = 0;
		
	


	
		    int nb_line_tOracleInput_19 = 0;
		    java.sql.Connection conn_tOracleInput_19 = null;
				conn_tOracleInput_19 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_19 = false;
				boolean isConnectionWrapped_tOracleInput_19 = !(conn_tOracleInput_19 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_19.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_19 = null;
                if (isConnectionWrapped_tOracleInput_19) {
					unwrappedOraConn_tOracleInput_19 = conn_tOracleInput_19.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_19 != null) {
                        isTimeZoneNull_tOracleInput_19 = (unwrappedOraConn_tOracleInput_19.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_19 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_19).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_19) {
					java.sql.Statement stmtGetTZ_tOracleInput_19 = conn_tOracleInput_19.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_19 = stmtGetTZ_tOracleInput_19.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_19 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_19.next()) {
						sessionTimezone_tOracleInput_19 = rsGetTZ_tOracleInput_19.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_19 && unwrappedOraConn_tOracleInput_19 != null) {
                        unwrappedOraConn_tOracleInput_19.setSessionTimeZone(sessionTimezone_tOracleInput_19);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_19).setSessionTimeZone(sessionTimezone_tOracleInput_19);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_19 = conn_tOracleInput_19.createStatement();

		    String dbquery_tOracleInput_19 = "select aa.estado\n  from afi_archivos aa\n   inner join afi_tarchivos at on (aa.tarchivos_id = at.id)\n  where at.codig"
+"o = 7\n     and aa.extension = 'txt'\n     and aa.id =" + context.afiarchivos_id;
		    

		    globalMap.put("tOracleInput_19_QUERY",dbquery_tOracleInput_19);

		    java.sql.ResultSet rs_tOracleInput_19 = null;

		    try {
		    	rs_tOracleInput_19 = stmt_tOracleInput_19.executeQuery(dbquery_tOracleInput_19);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_19 = rs_tOracleInput_19.getMetaData();
		    	int colQtyInRs_tOracleInput_19 = rsmd_tOracleInput_19.getColumnCount();

		    String tmpContent_tOracleInput_19 = null;
		    
		    
		    while (rs_tOracleInput_19.next()) {
		        nb_line_tOracleInput_19++;
		        
							if(colQtyInRs_tOracleInput_19 < 1) {
								row82.ESTADO = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(1) != null) {
						row82.ESTADO = rs_tOracleInput_19.getInt(1);
					} else {
				
						row82.ESTADO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_19 begin ] stop
 */
	
	/**
	 * [tOracleInput_19 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 


	tos_count_tOracleInput_19++;

/**
 * [tOracleInput_19 main ] stop
 */
	
	/**
	 * [tOracleInput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_28 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_28";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row82"
						
						);
					}
					

    if (row82.ESTADO == 6){
  context.vestado = 7;
  }
else
  {
  context.vestado = row82.ESTADO;
  }


    nb_line_tJavaRow_28++;   

 


	tos_count_tJavaRow_28++;

/**
 * [tJavaRow_28 main ] stop
 */
	
	/**
	 * [tJavaRow_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_28";
	
	

 



/**
 * [tJavaRow_28 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_28";
	
	

 



/**
 * [tJavaRow_28 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_19 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

}
}finally{
	if (rs_tOracleInput_19 != null) {
		rs_tOracleInput_19.close();
	}
	if (stmt_tOracleInput_19 != null) {
		stmt_tOracleInput_19.close();
	}
}

globalMap.put("tOracleInput_19_NB_LINE",nb_line_tOracleInput_19);
 

ok_Hash.put("tOracleInput_19", true);
end_Hash.put("tOracleInput_19", System.currentTimeMillis());




/**
 * [tOracleInput_19 end ] stop
 */

	
	/**
	 * [tJavaRow_28 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_28";
	
	

globalMap.put("tJavaRow_28_NB_LINE",nb_line_tJavaRow_28);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row82");
			  	}
			  	
 

ok_Hash.put("tJavaRow_28", true);
end_Hash.put("tJavaRow_28", System.currentTimeMillis());

   			if (context.vestado != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If37", 0, "true");
					}
				tOracleInput_11Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If37", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_28 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_19 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 finally ] stop
 */

	
	/**
	 * [tJavaRow_28 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_28";
	
	

 



/**
 * [tJavaRow_28 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_19_SUBPROCESS_STATE", 1);
	}
	


public static class row55Struct implements routines.system.IPersistableRow<row55Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer TOTAL;

				public Integer getTOTAL () {
					return this.TOTAL;
				}

				public Boolean TOTALIsNullable(){
				    return true;
				}
				public Boolean TOTALIsKey(){
				    return false;
				}
				public Integer TOTALLength(){
				    return 0;
				}
				public Integer TOTALPrecision(){
				    return null;
				}
				public String TOTALDefault(){
				
					return "";
				
				}
				public String TOTALComment(){
				
				    return "";
				
				}
				public String TOTALPattern(){
				
					return "";
				
				}
				public String TOTALOriginalDbColumnName(){
				
					return "TOTAL";
				
				}

				
			    public String PROCESADO;

				public String getPROCESADO () {
					return this.PROCESADO;
				}

				public Boolean PROCESADOIsNullable(){
				    return true;
				}
				public Boolean PROCESADOIsKey(){
				    return false;
				}
				public Integer PROCESADOLength(){
				    return 13;
				}
				public Integer PROCESADOPrecision(){
				    return 0;
				}
				public String PROCESADODefault(){
				
					return null;
				
				}
				public String PROCESADOComment(){
				
				    return "";
				
				}
				public String PROCESADOPattern(){
				
					return "";
				
				}
				public String PROCESADOOriginalDbColumnName(){
				
					return "PROCESADO";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 14;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TOTAL = readInteger(dis);
					
					this.PROCESADO = readString(dis);
					
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.TOTAL = readInteger(dis);
					
					this.PROCESADO = readString(dis);
					
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
					// String
				
						writeString(this.PROCESADO,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.TOTAL,dos);
					
					// String
				
						writeString(this.PROCESADO,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TOTAL="+String.valueOf(TOTAL));
		sb.append(",PROCESADO="+PROCESADO);
		sb.append(",NOMBRE="+NOMBRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row55Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row55Struct row55 = new row55Struct();




	
	/**
	 * [tJavaRow_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_20", false);
		start_Hash.put("tJavaRow_20", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_20";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row55");
					}
				
		int tos_count_tJavaRow_20 = 0;
		

int nb_line_tJavaRow_20 = 0;

 



/**
 * [tJavaRow_20 begin ] stop
 */



	
	/**
	 * [tOracleInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_11", false);
		start_Hash.put("tOracleInput_11", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_11";
	
	
		int tos_count_tOracleInput_11 = 0;
		
	


	
		    int nb_line_tOracleInput_11 = 0;
		    java.sql.Connection conn_tOracleInput_11 = null;
				conn_tOracleInput_11 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_11 = false;
				boolean isConnectionWrapped_tOracleInput_11 = !(conn_tOracleInput_11 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_11.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_11 = null;
                if (isConnectionWrapped_tOracleInput_11) {
					unwrappedOraConn_tOracleInput_11 = conn_tOracleInput_11.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_11 != null) {
                        isTimeZoneNull_tOracleInput_11 = (unwrappedOraConn_tOracleInput_11.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_11 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_11).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_11) {
					java.sql.Statement stmtGetTZ_tOracleInput_11 = conn_tOracleInput_11.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_11 = stmtGetTZ_tOracleInput_11.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_11 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_11.next()) {
						sessionTimezone_tOracleInput_11 = rsGetTZ_tOracleInput_11.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_11 && unwrappedOraConn_tOracleInput_11 != null) {
                        unwrappedOraConn_tOracleInput_11.setSessionTimeZone(sessionTimezone_tOracleInput_11);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_11).setSessionTimeZone(sessionTimezone_tOracleInput_11);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_11 = conn_tOracleInput_11.createStatement();

		    String dbquery_tOracleInput_11 = "select count(1)  total, nvl(decode(tc.procesado, 1, 'Personas', 2, 'Afiliados'),0) Procesado,  to_char(sysdate,'ddmmyyy"
+"yhhmiss') nombre\nfrom tst_carguemasivo tc\n inner join gen_personas gp on (tc.documento = gp.documento)\n inner join ge"
+"n_afiliados ga on (ga.personas_id = gp.id) \nwhere procesado in (1,2)\n  and trunc(ga.fregistro) = (select trunc(fecha_i"
+"nicio) from afi_archivos where id = "+context.afiarchivos_id+")\ngroup by decode(tc.procesado, 1, 'Personas', 2, 'Afiliados')\nunion\nselect count(1), 'Estructura',  to_char(sysdate"
+",'ddmmyyyyhhmiss') nombre\nfrom tst_errcmasivo\nwhere personas_id is null\nunion\nselect count(1), 'Calidad_Datos',  to_"
+"char(sysdate,'ddmmyyyyhhmiss') nombre\nfrom tst_carguemasivo\nwhere procesado not in (1,2,9)";
		    

		    globalMap.put("tOracleInput_11_QUERY",dbquery_tOracleInput_11);

		    java.sql.ResultSet rs_tOracleInput_11 = null;

		    try {
		    	rs_tOracleInput_11 = stmt_tOracleInput_11.executeQuery(dbquery_tOracleInput_11);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_11 = rs_tOracleInput_11.getMetaData();
		    	int colQtyInRs_tOracleInput_11 = rsmd_tOracleInput_11.getColumnCount();

		    String tmpContent_tOracleInput_11 = null;
		    
		    
		    while (rs_tOracleInput_11.next()) {
		        nb_line_tOracleInput_11++;
		        
							if(colQtyInRs_tOracleInput_11 < 1) {
								row55.TOTAL = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(1) != null) {
						row55.TOTAL = rs_tOracleInput_11.getInt(1);
					} else {
				
						row55.TOTAL = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 2) {
								row55.PROCESADO = null;
							} else {
	                         		
        	row55.PROCESADO = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 3) {
								row55.NOMBRE = null;
							} else {
	                         		
        	row55.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 3, false);
		                    }
					




 



/**
 * [tOracleInput_11 begin ] stop
 */
	
	/**
	 * [tOracleInput_11 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 


	tos_count_tOracleInput_11++;

/**
 * [tOracleInput_11 main ] stop
 */
	
	/**
	 * [tOracleInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_20 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_20";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row55"
						
						);
					}
					

    //Code generate according to input schema and output schema

//context.numregexitoso =25;


context.vnombre = row55.NOMBRE;
context.vtarchivos_id = 16;

if (row55.PROCESADO.compareTo("Personas") == 0 ){
    context.regpersonas = row55.TOTAL;
}
if (row55.PROCESADO.compareTo("Afiliados") == 0) {
    context.regafiliados = row55.TOTAL;
}
if (row55.PROCESADO.compareTo("Estructura") == 0) {
    context.regestructura = row55.TOTAL;
}
if (row55.PROCESADO.compareTo("Calidad_Datos") == 0) {
    context.regduplicados = row55.TOTAL;
}

if (context.regpersonas == null){
    context.regpersonas = 0;
}

if (context.regafiliados == null){
    context.regafiliados = 0;
}

if ( context.regestructura == null ) {
	context.regestructura = 0;
}

if ( context.regduplicados == null ) {
	context.regduplicados = 0;
}

    nb_line_tJavaRow_20++;   

 


	tos_count_tJavaRow_20++;

/**
 * [tJavaRow_20 main ] stop
 */
	
	/**
	 * [tJavaRow_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_20";
	
	

 



/**
 * [tJavaRow_20 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_20";
	
	

 



/**
 * [tJavaRow_20 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_11 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

}
}finally{
	if (rs_tOracleInput_11 != null) {
		rs_tOracleInput_11.close();
	}
	if (stmt_tOracleInput_11 != null) {
		stmt_tOracleInput_11.close();
	}
}

globalMap.put("tOracleInput_11_NB_LINE",nb_line_tOracleInput_11);
 

ok_Hash.put("tOracleInput_11", true);
end_Hash.put("tOracleInput_11", System.currentTimeMillis());




/**
 * [tOracleInput_11 end ] stop
 */

	
	/**
	 * [tJavaRow_20 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_20";
	
	

globalMap.put("tJavaRow_20_NB_LINE",nb_line_tJavaRow_20);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row55");
			  	}
			  	
 

ok_Hash.put("tJavaRow_20", true);
end_Hash.put("tJavaRow_20", System.currentTimeMillis());

   			if (context.numregexitoso == 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If30", 0, "true");
					}
				tFixedFlowInput_13Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If30", 0, "false");
					}   	 
   				}
   			if (context.numregexitoso>0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If29", 0, "true");
					}
				tFixedFlowInput_10Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If29", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_20 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_11:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tOracleInput_14Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_11 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 finally ] stop
 */

	
	/**
	 * [tJavaRow_20 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_20";
	
	

 



/**
 * [tJavaRow_20 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row64Struct implements routines.system.IPersistableRow<row64Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String contenido;

				public String getContenido () {
					return this.contenido;
				}

				public Boolean contenidoIsNullable(){
				    return true;
				}
				public Boolean contenidoIsKey(){
				    return false;
				}
				public Integer contenidoLength(){
				    return null;
				}
				public Integer contenidoPrecision(){
				    return null;
				}
				public String contenidoDefault(){
				
					return null;
				
				}
				public String contenidoComment(){
				
				    return "";
				
				}
				public String contenidoPattern(){
				
					return "";
				
				}
				public String contenidoOriginalDbColumnName(){
				
					return "contenido";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.contenido = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.contenido = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.contenido,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.contenido,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("contenido="+contenido);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row64Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row64Struct row64 = new row64Struct();




	
	/**
	 * [tFileOutputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_3", false);
		start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row64");
					}
				
		int tos_count_tFileOutputDelimited_3 = 0;
		

String fileName_tFileOutputDelimited_3 = "";
    fileName_tFileOutputDelimited_3 = (new java.io.File(java.nio.file.Paths.get(".").toAbsolutePath().normalize().toString()+"/AFICMSV_"+context.vnombre+".txt")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_3 = null;
    String extension_tFileOutputDelimited_3 = null;
    String directory_tFileOutputDelimited_3 = null;
    if((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        }
        directory_tFileOutputDelimited_3 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_3 = true;
    java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
    globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
            int nb_line_tFileOutputDelimited_3 = 0;
            int splitedFileNo_tFileOutputDelimited_3 = 0;
            int currentRow_tFileOutputDelimited_3 = 0;

            final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
                        if(!dir_tFileOutputDelimited_3.exists()) {
                            dir_tFileOutputDelimited_3.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_3 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
                        if(fileToDelete_tFileOutputDelimited_3.exists()) {
                            fileToDelete_tFileOutputDelimited_3.delete();
                        }
                        outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);


resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

 



/**
 * [tFileOutputDelimited_3 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_13", false);
		start_Hash.put("tFixedFlowInput_13", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_13";
	
	
		int tos_count_tFixedFlowInput_13 = 0;
		

	int nb_line_tFixedFlowInput_13 = 0;
	List<row64Struct> cacheList_tFixedFlowInput_13 = new java.util.ArrayList<row64Struct>();
	row64 = new row64Struct();        	            	
	row64.contenido = "===============================================================================================================================================";
	cacheList_tFixedFlowInput_13.add(row64);
	row64 = new row64Struct();        	            	
	row64.contenido = "***************************************************** PROCESO DE CARGUE MASIVO GAVD ****************************************************";
	cacheList_tFixedFlowInput_13.add(row64);
	row64 = new row64Struct();        	            	
	row64.contenido = "==  Fecha de inicio de ejecución (YYYY-MM-DD h24:mm:ss): "+TalendDate.getCurrentDate();
	cacheList_tFixedFlowInput_13.add(row64);
	row64 = new row64Struct();        	            	
	row64.contenido = "===============================================================================================================================================";
	cacheList_tFixedFlowInput_13.add(row64);
	row64 = new row64Struct();        	            	
	row64.contenido = "*************************************************** ERROR EN PROCESAMIENTO DE CARGUE***************************************************";
	cacheList_tFixedFlowInput_13.add(row64);
	row64 = new row64Struct();        	            	
	row64.contenido = "--> Total registros procesados: ".concat(Integer.toString(context.regpersonas+context.regafiliados+context.regestructura+context.regduplicados));
	cacheList_tFixedFlowInput_13.add(row64);
	row64 = new row64Struct();        	            	
	row64.contenido = "--> Registros no procesados exitosamente: ".concat(Integer.toString(context.regestructura+context.regduplicados));
	cacheList_tFixedFlowInput_13.add(row64);
	row64 = new row64Struct();        	            	
	row64.contenido = "===============================================================================================================================================";
	cacheList_tFixedFlowInput_13.add(row64);
	for (int i_tFixedFlowInput_13 = 0 ; i_tFixedFlowInput_13 < 1 ; i_tFixedFlowInput_13++) {	
		for(row64Struct tmpRow_tFixedFlowInput_13 : cacheList_tFixedFlowInput_13){
			nb_line_tFixedFlowInput_13 ++;		
			row64 = tmpRow_tFixedFlowInput_13;

 



/**
 * [tFixedFlowInput_13 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_13 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_13";
	
	

 


	tos_count_tFixedFlowInput_13++;

/**
 * [tFixedFlowInput_13 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_13";
	
	

 



/**
 * [tFixedFlowInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row64"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
                            if(row64.contenido != null) {
                        sb_tFileOutputDelimited_3.append(
                            row64.contenido
                        );
                            }
                    sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);


                    nb_line_tFileOutputDelimited_3++;
                    resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

                        outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());




 


	tos_count_tFileOutputDelimited_3++;

/**
 * [tFileOutputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";
	
	

 



/**
 * [tFileOutputDelimited_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";
	
	

 



/**
 * [tFileOutputDelimited_3 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_13";
	
	

 



/**
 * [tFixedFlowInput_13 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_13 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_13";
	
	

		}
	}
	cacheList_tFixedFlowInput_13.clear();
	globalMap.put("tFixedFlowInput_13_NB_LINE", nb_line_tFixedFlowInput_13);

 

ok_Hash.put("tFixedFlowInput_13", true);
end_Hash.put("tFixedFlowInput_13", System.currentTimeMillis());




/**
 * [tFixedFlowInput_13 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";
	
	



		
			
					if(outtFileOutputDelimited_3!=null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}
				
				globalMap.put("tFileOutputDelimited_3_NB_LINE",nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_3", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row64");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_3", true);
end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

   			if (context.numregexitoso == 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If32", 0, "true");
					}
				tFixedFlowInput_14Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If32", 0, "false");
					}   	 
   				}



/**
 * [tFileOutputDelimited_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_13 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_13";
	
	

 



/**
 * [tFixedFlowInput_13 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_3") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_3");
						if(outtFileOutputDelimited_3!=null) {
							outtFileOutputDelimited_3.flush();
							outtFileOutputDelimited_3.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class row58Struct implements routines.system.IPersistableRow<row58Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer estado;

				public Integer getEstado () {
					return this.estado;
				}

				public Boolean estadoIsNullable(){
				    return true;
				}
				public Boolean estadoIsKey(){
				    return false;
				}
				public Integer estadoLength(){
				    return null;
				}
				public Integer estadoPrecision(){
				    return null;
				}
				public String estadoDefault(){
				
					return null;
				
				}
				public String estadoComment(){
				
				    return "";
				
				}
				public String estadoPattern(){
				
					return "";
				
				}
				public String estadoOriginalDbColumnName(){
				
					return "estado";
				
				}

				
			    public String archivo;

				public String getArchivo () {
					return this.archivo;
				}

				public Boolean archivoIsNullable(){
				    return true;
				}
				public Boolean archivoIsKey(){
				    return false;
				}
				public Integer archivoLength(){
				    return null;
				}
				public Integer archivoPrecision(){
				    return null;
				}
				public String archivoDefault(){
				
					return null;
				
				}
				public String archivoComment(){
				
				    return "";
				
				}
				public String archivoPattern(){
				
					return "";
				
				}
				public String archivoOriginalDbColumnName(){
				
					return "archivo";
				
				}

				
			    public Integer tarchivos_id;

				public Integer getTarchivos_id () {
					return this.tarchivos_id;
				}

				public Boolean tarchivos_idIsNullable(){
				    return true;
				}
				public Boolean tarchivos_idIsKey(){
				    return false;
				}
				public Integer tarchivos_idLength(){
				    return null;
				}
				public Integer tarchivos_idPrecision(){
				    return null;
				}
				public String tarchivos_idDefault(){
				
					return null;
				
				}
				public String tarchivos_idComment(){
				
				    return "";
				
				}
				public String tarchivos_idPattern(){
				
					return "";
				
				}
				public String tarchivos_idOriginalDbColumnName(){
				
					return "tarchivos_id";
				
				}

				
			    public Integer usuarios_id;

				public Integer getUsuarios_id () {
					return this.usuarios_id;
				}

				public Boolean usuarios_idIsNullable(){
				    return true;
				}
				public Boolean usuarios_idIsKey(){
				    return false;
				}
				public Integer usuarios_idLength(){
				    return null;
				}
				public Integer usuarios_idPrecision(){
				    return null;
				}
				public String usuarios_idDefault(){
				
					return null;
				
				}
				public String usuarios_idComment(){
				
				    return "";
				
				}
				public String usuarios_idPattern(){
				
					return "";
				
				}
				public String usuarios_idOriginalDbColumnName(){
				
					return "usuarios_id";
				
				}

				
			    public String codigo;

				public String getCodigo () {
					return this.codigo;
				}

				public Boolean codigoIsNullable(){
				    return true;
				}
				public Boolean codigoIsKey(){
				    return false;
				}
				public Integer codigoLength(){
				    return null;
				}
				public Integer codigoPrecision(){
				    return null;
				}
				public String codigoDefault(){
				
					return null;
				
				}
				public String codigoComment(){
				
				    return "";
				
				}
				public String codigoPattern(){
				
					return "";
				
				}
				public String codigoOriginalDbColumnName(){
				
					return "codigo";
				
				}

				
			    public String archivofs;

				public String getArchivofs () {
					return this.archivofs;
				}

				public Boolean archivofsIsNullable(){
				    return true;
				}
				public Boolean archivofsIsKey(){
				    return false;
				}
				public Integer archivofsLength(){
				    return null;
				}
				public Integer archivofsPrecision(){
				    return null;
				}
				public String archivofsDefault(){
				
					return null;
				
				}
				public String archivofsComment(){
				
				    return "";
				
				}
				public String archivofsPattern(){
				
					return "";
				
				}
				public String archivofsOriginalDbColumnName(){
				
					return "archivofs";
				
				}

				
			    public java.util.Date fecha;

				public java.util.Date getFecha () {
					return this.fecha;
				}

				public Boolean fechaIsNullable(){
				    return true;
				}
				public Boolean fechaIsKey(){
				    return false;
				}
				public Integer fechaLength(){
				    return null;
				}
				public Integer fechaPrecision(){
				    return null;
				}
				public String fechaDefault(){
				
					return null;
				
				}
				public String fechaComment(){
				
				    return "";
				
				}
				public String fechaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fechaOriginalDbColumnName(){
				
					return "fecha";
				
				}

				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}

				public Boolean extensionIsNullable(){
				    return true;
				}
				public Boolean extensionIsKey(){
				    return false;
				}
				public Integer extensionLength(){
				    return null;
				}
				public Integer extensionPrecision(){
				    return null;
				}
				public String extensionDefault(){
				
					return null;
				
				}
				public String extensionComment(){
				
				    return "";
				
				}
				public String extensionPattern(){
				
					return "";
				
				}
				public String extensionOriginalDbColumnName(){
				
					return "extension";
				
				}

				
			    public Object contenido;

				public Object getContenido () {
					return this.contenido;
				}

				public Boolean contenidoIsNullable(){
				    return true;
				}
				public Boolean contenidoIsKey(){
				    return false;
				}
				public Integer contenidoLength(){
				    return null;
				}
				public Integer contenidoPrecision(){
				    return null;
				}
				public String contenidoDefault(){
				
					return null;
				
				}
				public String contenidoComment(){
				
				    return "";
				
				}
				public String contenidoPattern(){
				
					return "";
				
				}
				public String contenidoOriginalDbColumnName(){
				
					return "contenido";
				
				}

				
			    public Integer padre_id;

				public Integer getPadre_id () {
					return this.padre_id;
				}

				public Boolean padre_idIsNullable(){
				    return true;
				}
				public Boolean padre_idIsKey(){
				    return false;
				}
				public Integer padre_idLength(){
				    return null;
				}
				public Integer padre_idPrecision(){
				    return null;
				}
				public String padre_idDefault(){
				
					return null;
				
				}
				public String padre_idComment(){
				
				    return "";
				
				}
				public String padre_idPattern(){
				
					return "";
				
				}
				public String padre_idOriginalDbColumnName(){
				
					return "padre_id";
				
				}

				
			    public java.util.Date fecha_inicio;

				public java.util.Date getFecha_inicio () {
					return this.fecha_inicio;
				}

				public Boolean fecha_inicioIsNullable(){
				    return true;
				}
				public Boolean fecha_inicioIsKey(){
				    return false;
				}
				public Integer fecha_inicioLength(){
				    return null;
				}
				public Integer fecha_inicioPrecision(){
				    return null;
				}
				public String fecha_inicioDefault(){
				
					return null;
				
				}
				public String fecha_inicioComment(){
				
				    return "";
				
				}
				public String fecha_inicioPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fecha_inicioOriginalDbColumnName(){
				
					return "fecha_inicio";
				
				}

				
			    public java.util.Date fecha_fin;

				public java.util.Date getFecha_fin () {
					return this.fecha_fin;
				}

				public Boolean fecha_finIsNullable(){
				    return true;
				}
				public Boolean fecha_finIsKey(){
				    return false;
				}
				public Integer fecha_finLength(){
				    return null;
				}
				public Integer fecha_finPrecision(){
				    return null;
				}
				public String fecha_finDefault(){
				
					return null;
				
				}
				public String fecha_finComment(){
				
				    return "";
				
				}
				public String fecha_finPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fecha_finOriginalDbColumnName(){
				
					return "fecha_fin";
				
				}

				
			    public Integer procesos_id;

				public Integer getProcesos_id () {
					return this.procesos_id;
				}

				public Boolean procesos_idIsNullable(){
				    return true;
				}
				public Boolean procesos_idIsKey(){
				    return false;
				}
				public Integer procesos_idLength(){
				    return null;
				}
				public Integer procesos_idPrecision(){
				    return null;
				}
				public String procesos_idDefault(){
				
					return null;
				
				}
				public String procesos_idComment(){
				
				    return "";
				
				}
				public String procesos_idPattern(){
				
					return "";
				
				}
				public String procesos_idOriginalDbColumnName(){
				
					return "proceso_id";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.estado = readInteger(dis);
					
					this.archivo = readString(dis);
					
						this.tarchivos_id = readInteger(dis);
					
						this.usuarios_id = readInteger(dis);
					
					this.codigo = readString(dis);
					
					this.archivofs = readString(dis);
					
					this.fecha = readDate(dis);
					
					this.extension = readString(dis);
					
						this.contenido = (Object) dis.readObject();
					
						this.padre_id = readInteger(dis);
					
					this.fecha_inicio = readDate(dis);
					
					this.fecha_fin = readDate(dis);
					
						this.procesos_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.estado = readInteger(dis);
					
					this.archivo = readString(dis);
					
						this.tarchivos_id = readInteger(dis);
					
						this.usuarios_id = readInteger(dis);
					
					this.codigo = readString(dis);
					
					this.archivofs = readString(dis);
					
					this.fecha = readDate(dis);
					
					this.extension = readString(dis);
					
						this.contenido = (Object) dis.readObject();
					
						this.padre_id = readInteger(dis);
					
					this.fecha_inicio = readDate(dis);
					
					this.fecha_fin = readDate(dis);
					
						this.procesos_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.estado,dos);
					
					// String
				
						writeString(this.archivo,dos);
					
					// Integer
				
						writeInteger(this.tarchivos_id,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id,dos);
					
					// String
				
						writeString(this.codigo,dos);
					
					// String
				
						writeString(this.archivofs,dos);
					
					// java.util.Date
				
						writeDate(this.fecha,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// Object
				
       			    	dos.writeObject(this.contenido);
					
					// Integer
				
						writeInteger(this.padre_id,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_fin,dos);
					
					// Integer
				
						writeInteger(this.procesos_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.estado,dos);
					
					// String
				
						writeString(this.archivo,dos);
					
					// Integer
				
						writeInteger(this.tarchivos_id,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id,dos);
					
					// String
				
						writeString(this.codigo,dos);
					
					// String
				
						writeString(this.archivofs,dos);
					
					// java.util.Date
				
						writeDate(this.fecha,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.contenido);
					
					// Integer
				
						writeInteger(this.padre_id,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_fin,dos);
					
					// Integer
				
						writeInteger(this.procesos_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("estado="+String.valueOf(estado));
		sb.append(",archivo="+archivo);
		sb.append(",tarchivos_id="+String.valueOf(tarchivos_id));
		sb.append(",usuarios_id="+String.valueOf(usuarios_id));
		sb.append(",codigo="+codigo);
		sb.append(",archivofs="+archivofs);
		sb.append(",fecha="+String.valueOf(fecha));
		sb.append(",extension="+extension);
		sb.append(",contenido="+String.valueOf(contenido));
		sb.append(",padre_id="+String.valueOf(padre_id));
		sb.append(",fecha_inicio="+String.valueOf(fecha_inicio));
		sb.append(",fecha_fin="+String.valueOf(fecha_fin));
		sb.append(",procesos_id="+String.valueOf(procesos_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row58Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row57Struct implements routines.system.IPersistableRow<row57Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer estado;

				public Integer getEstado () {
					return this.estado;
				}

				public Boolean estadoIsNullable(){
				    return true;
				}
				public Boolean estadoIsKey(){
				    return false;
				}
				public Integer estadoLength(){
				    return null;
				}
				public Integer estadoPrecision(){
				    return null;
				}
				public String estadoDefault(){
				
					return null;
				
				}
				public String estadoComment(){
				
				    return "";
				
				}
				public String estadoPattern(){
				
					return "";
				
				}
				public String estadoOriginalDbColumnName(){
				
					return "estado";
				
				}

				
			    public String archivo;

				public String getArchivo () {
					return this.archivo;
				}

				public Boolean archivoIsNullable(){
				    return true;
				}
				public Boolean archivoIsKey(){
				    return false;
				}
				public Integer archivoLength(){
				    return null;
				}
				public Integer archivoPrecision(){
				    return null;
				}
				public String archivoDefault(){
				
					return null;
				
				}
				public String archivoComment(){
				
				    return "";
				
				}
				public String archivoPattern(){
				
					return "";
				
				}
				public String archivoOriginalDbColumnName(){
				
					return "archivo";
				
				}

				
			    public Integer tarchivos_id;

				public Integer getTarchivos_id () {
					return this.tarchivos_id;
				}

				public Boolean tarchivos_idIsNullable(){
				    return true;
				}
				public Boolean tarchivos_idIsKey(){
				    return false;
				}
				public Integer tarchivos_idLength(){
				    return null;
				}
				public Integer tarchivos_idPrecision(){
				    return null;
				}
				public String tarchivos_idDefault(){
				
					return null;
				
				}
				public String tarchivos_idComment(){
				
				    return "";
				
				}
				public String tarchivos_idPattern(){
				
					return "";
				
				}
				public String tarchivos_idOriginalDbColumnName(){
				
					return "tarchivos_id";
				
				}

				
			    public Integer usuarios_id;

				public Integer getUsuarios_id () {
					return this.usuarios_id;
				}

				public Boolean usuarios_idIsNullable(){
				    return true;
				}
				public Boolean usuarios_idIsKey(){
				    return false;
				}
				public Integer usuarios_idLength(){
				    return null;
				}
				public Integer usuarios_idPrecision(){
				    return null;
				}
				public String usuarios_idDefault(){
				
					return null;
				
				}
				public String usuarios_idComment(){
				
				    return "";
				
				}
				public String usuarios_idPattern(){
				
					return "";
				
				}
				public String usuarios_idOriginalDbColumnName(){
				
					return "usuarios_id";
				
				}

				
			    public String codigo;

				public String getCodigo () {
					return this.codigo;
				}

				public Boolean codigoIsNullable(){
				    return true;
				}
				public Boolean codigoIsKey(){
				    return false;
				}
				public Integer codigoLength(){
				    return null;
				}
				public Integer codigoPrecision(){
				    return null;
				}
				public String codigoDefault(){
				
					return null;
				
				}
				public String codigoComment(){
				
				    return "";
				
				}
				public String codigoPattern(){
				
					return "";
				
				}
				public String codigoOriginalDbColumnName(){
				
					return "codigo";
				
				}

				
			    public String archivofs;

				public String getArchivofs () {
					return this.archivofs;
				}

				public Boolean archivofsIsNullable(){
				    return true;
				}
				public Boolean archivofsIsKey(){
				    return false;
				}
				public Integer archivofsLength(){
				    return null;
				}
				public Integer archivofsPrecision(){
				    return null;
				}
				public String archivofsDefault(){
				
					return null;
				
				}
				public String archivofsComment(){
				
				    return "";
				
				}
				public String archivofsPattern(){
				
					return "";
				
				}
				public String archivofsOriginalDbColumnName(){
				
					return "archivofs";
				
				}

				
			    public java.util.Date fecha;

				public java.util.Date getFecha () {
					return this.fecha;
				}

				public Boolean fechaIsNullable(){
				    return true;
				}
				public Boolean fechaIsKey(){
				    return false;
				}
				public Integer fechaLength(){
				    return null;
				}
				public Integer fechaPrecision(){
				    return null;
				}
				public String fechaDefault(){
				
					return null;
				
				}
				public String fechaComment(){
				
				    return "";
				
				}
				public String fechaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fechaOriginalDbColumnName(){
				
					return "fecha";
				
				}

				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}

				public Boolean extensionIsNullable(){
				    return true;
				}
				public Boolean extensionIsKey(){
				    return false;
				}
				public Integer extensionLength(){
				    return null;
				}
				public Integer extensionPrecision(){
				    return null;
				}
				public String extensionDefault(){
				
					return null;
				
				}
				public String extensionComment(){
				
				    return "";
				
				}
				public String extensionPattern(){
				
					return "";
				
				}
				public String extensionOriginalDbColumnName(){
				
					return "extension";
				
				}

				
			    public Object contenido;

				public Object getContenido () {
					return this.contenido;
				}

				public Boolean contenidoIsNullable(){
				    return true;
				}
				public Boolean contenidoIsKey(){
				    return false;
				}
				public Integer contenidoLength(){
				    return null;
				}
				public Integer contenidoPrecision(){
				    return null;
				}
				public String contenidoDefault(){
				
					return null;
				
				}
				public String contenidoComment(){
				
				    return "";
				
				}
				public String contenidoPattern(){
				
					return "";
				
				}
				public String contenidoOriginalDbColumnName(){
				
					return "contenido";
				
				}

				
			    public Integer padre_id;

				public Integer getPadre_id () {
					return this.padre_id;
				}

				public Boolean padre_idIsNullable(){
				    return true;
				}
				public Boolean padre_idIsKey(){
				    return false;
				}
				public Integer padre_idLength(){
				    return null;
				}
				public Integer padre_idPrecision(){
				    return null;
				}
				public String padre_idDefault(){
				
					return null;
				
				}
				public String padre_idComment(){
				
				    return "";
				
				}
				public String padre_idPattern(){
				
					return "";
				
				}
				public String padre_idOriginalDbColumnName(){
				
					return "padre_id";
				
				}

				
			    public java.util.Date fecha_inicio;

				public java.util.Date getFecha_inicio () {
					return this.fecha_inicio;
				}

				public Boolean fecha_inicioIsNullable(){
				    return true;
				}
				public Boolean fecha_inicioIsKey(){
				    return false;
				}
				public Integer fecha_inicioLength(){
				    return null;
				}
				public Integer fecha_inicioPrecision(){
				    return null;
				}
				public String fecha_inicioDefault(){
				
					return null;
				
				}
				public String fecha_inicioComment(){
				
				    return "";
				
				}
				public String fecha_inicioPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fecha_inicioOriginalDbColumnName(){
				
					return "fecha_inicio";
				
				}

				
			    public java.util.Date fecha_fin;

				public java.util.Date getFecha_fin () {
					return this.fecha_fin;
				}

				public Boolean fecha_finIsNullable(){
				    return true;
				}
				public Boolean fecha_finIsKey(){
				    return false;
				}
				public Integer fecha_finLength(){
				    return null;
				}
				public Integer fecha_finPrecision(){
				    return null;
				}
				public String fecha_finDefault(){
				
					return null;
				
				}
				public String fecha_finComment(){
				
				    return "";
				
				}
				public String fecha_finPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fecha_finOriginalDbColumnName(){
				
					return "fecha_fin";
				
				}

				
			    public Integer procesos_id;

				public Integer getProcesos_id () {
					return this.procesos_id;
				}

				public Boolean procesos_idIsNullable(){
				    return true;
				}
				public Boolean procesos_idIsKey(){
				    return false;
				}
				public Integer procesos_idLength(){
				    return null;
				}
				public Integer procesos_idPrecision(){
				    return null;
				}
				public String procesos_idDefault(){
				
					return null;
				
				}
				public String procesos_idComment(){
				
				    return "";
				
				}
				public String procesos_idPattern(){
				
					return "";
				
				}
				public String procesos_idOriginalDbColumnName(){
				
					return "proceso_id";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.estado = readInteger(dis);
					
					this.archivo = readString(dis);
					
						this.tarchivos_id = readInteger(dis);
					
						this.usuarios_id = readInteger(dis);
					
					this.codigo = readString(dis);
					
					this.archivofs = readString(dis);
					
					this.fecha = readDate(dis);
					
					this.extension = readString(dis);
					
						this.contenido = (Object) dis.readObject();
					
						this.padre_id = readInteger(dis);
					
					this.fecha_inicio = readDate(dis);
					
					this.fecha_fin = readDate(dis);
					
						this.procesos_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.estado = readInteger(dis);
					
					this.archivo = readString(dis);
					
						this.tarchivos_id = readInteger(dis);
					
						this.usuarios_id = readInteger(dis);
					
					this.codigo = readString(dis);
					
					this.archivofs = readString(dis);
					
					this.fecha = readDate(dis);
					
					this.extension = readString(dis);
					
						this.contenido = (Object) dis.readObject();
					
						this.padre_id = readInteger(dis);
					
					this.fecha_inicio = readDate(dis);
					
					this.fecha_fin = readDate(dis);
					
						this.procesos_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.estado,dos);
					
					// String
				
						writeString(this.archivo,dos);
					
					// Integer
				
						writeInteger(this.tarchivos_id,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id,dos);
					
					// String
				
						writeString(this.codigo,dos);
					
					// String
				
						writeString(this.archivofs,dos);
					
					// java.util.Date
				
						writeDate(this.fecha,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// Object
				
       			    	dos.writeObject(this.contenido);
					
					// Integer
				
						writeInteger(this.padre_id,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_fin,dos);
					
					// Integer
				
						writeInteger(this.procesos_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.estado,dos);
					
					// String
				
						writeString(this.archivo,dos);
					
					// Integer
				
						writeInteger(this.tarchivos_id,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id,dos);
					
					// String
				
						writeString(this.codigo,dos);
					
					// String
				
						writeString(this.archivofs,dos);
					
					// java.util.Date
				
						writeDate(this.fecha,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.contenido);
					
					// Integer
				
						writeInteger(this.padre_id,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_fin,dos);
					
					// Integer
				
						writeInteger(this.procesos_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("estado="+String.valueOf(estado));
		sb.append(",archivo="+archivo);
		sb.append(",tarchivos_id="+String.valueOf(tarchivos_id));
		sb.append(",usuarios_id="+String.valueOf(usuarios_id));
		sb.append(",codigo="+codigo);
		sb.append(",archivofs="+archivofs);
		sb.append(",fecha="+String.valueOf(fecha));
		sb.append(",extension="+extension);
		sb.append(",contenido="+String.valueOf(contenido));
		sb.append(",padre_id="+String.valueOf(padre_id));
		sb.append(",fecha_inicio="+String.valueOf(fecha_inicio));
		sb.append(",fecha_fin="+String.valueOf(fecha_fin));
		sb.append(",procesos_id="+String.valueOf(procesos_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row57Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row57Struct row57 = new row57Struct();
row58Struct row58 = new row58Struct();





	
	/**
	 * [tFileDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_1", false);
		start_Hash.put("tFileDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row58");
					}
				
		int tos_count_tFileDelete_1 = 0;
		

 



/**
 * [tFileDelete_1 begin ] stop
 */



	
	/**
	 * [tOracleOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_4", false);
		start_Hash.put("tOracleOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row57");
					}
				
		int tos_count_tOracleOutput_4 = 0;
		






    
    int nb_line_tOracleOutput_4 = 0;
    int nb_line_update_tOracleOutput_4 = 0;
    int nb_line_inserted_tOracleOutput_4 = 0;
    int nb_line_deleted_tOracleOutput_4 = 0;
    int nb_line_rejected_tOracleOutput_4 = 0;

    int tmp_batchUpdateCount_tOracleOutput_4 = 0;

    int deletedCount_tOracleOutput_4=0;
    int updatedCount_tOracleOutput_4=0;
    int insertedCount_tOracleOutput_4=0;
    int rowsToCommitCount_tOracleOutput_4=0;
    int rejectedCount_tOracleOutput_4=0;

    boolean whetherReject_tOracleOutput_4 = false;

    java.sql.Connection conn_tOracleOutput_4 = null;

    //optional table
    String dbschema_tOracleOutput_4 = null;
    String tableName_tOracleOutput_4 = null;
        dbschema_tOracleOutput_4 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_4=0;

        if(dbschema_tOracleOutput_4 == null || dbschema_tOracleOutput_4.trim().length() == 0) {
            tableName_tOracleOutput_4 = ("AFI_ARCHIVOS");
        } else {
            tableName_tOracleOutput_4 = dbschema_tOracleOutput_4 + "." + ("AFI_ARCHIVOS");
        }
                String insert_tOracleOutput_4 = "INSERT INTO " + tableName_tOracleOutput_4 + " (estado,archivo,tarchivos_id,usuarios_id,codigo,archivofs,fecha,extension,contenido,padre_id,fecha_inicio,fecha_fin,proceso_id) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_4 = conn_tOracleOutput_4.prepareStatement(insert_tOracleOutput_4);
                        resourceMap.put("pstmt_tOracleOutput_4", pstmt_tOracleOutput_4);

        class BlobTypeUtil_tOracleOutput_4 {
            public Object getBLOB(Object data, java.sql.Connection conn) throws java.sql.SQLException {
            	boolean containBlobFromOtherDB = false;
                if(!(data instanceof java.sql.Blob) || (data instanceof oracle.sql.BLOB && !containBlobFromOtherDB)) {
                	return data;
                }

                oracle.sql.BLOB blob = null;
                java.io.InputStream in = null;
                java.io.OutputStream out = null;
                try{
                	//in
                	java.sql.Blob blobData = (java.sql.Blob) data;
                	in = blobData.getBinaryStream();

                	//out
                	blob = oracle.sql.BLOB.createTemporary(conn, true, oracle.sql.BLOB.DURATION_SESSION);
                    blob.open(oracle.sql.BLOB.MODE_READWRITE);
                    //blob = conn.createBlob(); oracle jdbc don't support it
                	out = blob.setBinaryStream(1);

                    byte[] cache = new byte[8192];
                    int len = 0;
                    while ((len = in.read(cache)) != -1) {
                        out.write(cache, 0, len);
                    }

                    return blob;
                } catch(java.sql.SQLException sqlexp){
globalMap.put("tOracleOutput_4_ERROR_MESSAGE",sqlexp.getMessage());
                	if(blob!=null) {
                		try {
                    		blob.freeTemporary();
                    	} catch(java.sql.SQLException e_tOracleOutput_4) {
                    		//keep quiet
                    	}
                    }
                    sqlexp.printStackTrace();
                } catch(java.lang.Exception exp){
globalMap.put("tOracleOutput_4_ERROR_MESSAGE",exp.getMessage());
                   	if(blob!=null) {
                		try {
                    		blob.freeTemporary();
                    	} catch(java.sql.SQLException e_tOracleOutput_4) {
                    		//keep quiet
                    	}
                    }
                    exp.printStackTrace();
                } finally {
                	if(out!=null) {
                		try {
                			out.flush();
                    		out.close();
                    	} catch(java.io.IOException e_tOracleOutput_4) {
                    		//keep quiet
                    	}
                    }

            	 	if(in!=null) {
                		try {
                    		in.close();
                    	} catch(java.io.IOException e_tOracleOutput_4) {
                    		//keep quiet
                    	}
                    }

                    if(blob!=null) {
                		try {
                    		blob.close();
                    	} catch(java.sql.SQLException e_tOracleOutput_4) {
                    		//keep quiet
                    	}
                    }
                }

                return null;

            }

        }
        BlobTypeUtil_tOracleOutput_4 blobTypeUtil_tOracleOutput_4=new BlobTypeUtil_tOracleOutput_4();





 



/**
 * [tOracleOutput_4 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_14", false);
		start_Hash.put("tFixedFlowInput_14", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_14";
	
	
		int tos_count_tFixedFlowInput_14 = 0;
		

	    for (int i_tFixedFlowInput_14 = 0 ; i_tFixedFlowInput_14 < 1 ; i_tFixedFlowInput_14++) {
	                	            	
    	            		row57.estado = context.vestado;
    	            	        	            	
    	            		row57.archivo = "AFICMSV_"+context.vnombre+".txt";
    	            	        	            	
    	            		row57.tarchivos_id = context.vtarchivos_id;
    	            	        	            	
    	            		row57.usuarios_id = context.vusuarios_id;
    	            	        	            	
    	            		row57.codigo = "AFI_CMSV";
    	            	        	            	
    	            		row57.archivofs = "AFICMSV_"+context.vnombre;
    	            	        	            	
    	            		row57.fecha = TalendDate.getCurrentDate();
    	            	        	            	
    	            		row57.extension = "txt";
    	            	        	            	
    	            		row57.contenido = ExtraerBlob.ByteArrayFromFile(java.nio.file.Paths.get(".").toAbsolutePath().normalize().toString()+"/AFICMSV_"+context.vnombre+".txt");
    	            	        	            	
    	            		row57.padre_id = context.afiarchivos_id;
    	            	        	            	
    	            		row57.fecha_inicio = context.vfinicio;
    	            	        	            	
    	            		row57.fecha_fin = TalendDate.getCurrentDate();
    	            	        	            	
    	            		row57.procesos_id = context.vprocesos_id;
    	            	

 



/**
 * [tFixedFlowInput_14 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_14 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_14";
	
	

 


	tos_count_tFixedFlowInput_14++;

/**
 * [tFixedFlowInput_14 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_14";
	
	

 



/**
 * [tFixedFlowInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row57"
						
						);
					}
					



            row58 = null;
        whetherReject_tOracleOutput_4 = false;
                        if(row57.estado == null) {
pstmt_tOracleOutput_4.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_4.setInt(1, row57.estado);
}

                        if(row57.archivo == null) {
pstmt_tOracleOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_4.setString(2, row57.archivo);
}

                        if(row57.tarchivos_id == null) {
pstmt_tOracleOutput_4.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_4.setInt(3, row57.tarchivos_id);
}

                        if(row57.usuarios_id == null) {
pstmt_tOracleOutput_4.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_4.setInt(4, row57.usuarios_id);
}

                        if(row57.codigo == null) {
pstmt_tOracleOutput_4.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_4.setString(5, row57.codigo);
}

                        if(row57.archivofs == null) {
pstmt_tOracleOutput_4.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_4.setString(6, row57.archivofs);
}

                        if(row57.fecha != null) {
pstmt_tOracleOutput_4.setObject(7, new java.sql.Timestamp(row57.fecha.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_4.setNull(7, java.sql.Types.DATE);
}

                        if(row57.extension == null) {
pstmt_tOracleOutput_4.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_4.setString(8, row57.extension);
}

                        if(row57.contenido == null) {
pstmt_tOracleOutput_4.setNull(9, java.sql.Types.BLOB);
} else {pstmt_tOracleOutput_4.setObject(9,  blobTypeUtil_tOracleOutput_4.getBLOB(row57.contenido, conn_tOracleOutput_4));
}

                        if(row57.padre_id == null) {
pstmt_tOracleOutput_4.setNull(10, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_4.setInt(10, row57.padre_id);
}

                        if(row57.fecha_inicio != null) {
pstmt_tOracleOutput_4.setObject(11, new java.sql.Timestamp(row57.fecha_inicio.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_4.setNull(11, java.sql.Types.DATE);
}

                        if(row57.fecha_fin != null) {
pstmt_tOracleOutput_4.setObject(12, new java.sql.Timestamp(row57.fecha_fin.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_4.setNull(12, java.sql.Types.DATE);
}

                        if(row57.procesos_id == null) {
pstmt_tOracleOutput_4.setNull(13, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_4.setInt(13, row57.procesos_id);
}

                try {
                    nb_line_tOracleOutput_4++;
                    int processedCount_tOracleOutput_4 = pstmt_tOracleOutput_4.executeUpdate();
                    insertedCount_tOracleOutput_4 += processedCount_tOracleOutput_4;
                    rowsToCommitCount_tOracleOutput_4 += processedCount_tOracleOutput_4;
                } catch(java.lang.Exception e_tOracleOutput_4) {
globalMap.put("tOracleOutput_4_ERROR_MESSAGE",e_tOracleOutput_4.getMessage());
                    whetherReject_tOracleOutput_4 = true;
                            System.err.print(e_tOracleOutput_4.getMessage());
                }
            if(!whetherReject_tOracleOutput_4) {
                            row58 = new row58Struct();
                                row58.estado = row57.estado;
                                row58.archivo = row57.archivo;
                                row58.tarchivos_id = row57.tarchivos_id;
                                row58.usuarios_id = row57.usuarios_id;
                                row58.codigo = row57.codigo;
                                row58.archivofs = row57.archivofs;
                                row58.fecha = row57.fecha;
                                row58.extension = row57.extension;
                                row58.contenido = row57.contenido;
                                row58.padre_id = row57.padre_id;
                                row58.fecha_inicio = row57.fecha_inicio;
                                row58.fecha_fin = row57.fecha_fin;
                                row58.procesos_id = row57.procesos_id;
            }

 


	tos_count_tOracleOutput_4++;

/**
 * [tOracleOutput_4 main ] stop
 */
	
	/**
	 * [tOracleOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	

 



/**
 * [tOracleOutput_4 process_data_begin ] stop
 */
// Start of branch "row58"
if(row58 != null) { 



	
	/**
	 * [tFileDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row58"
						
						);
					}
					

 

class DeleteFoldertFileDelete_1{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_1=new java.io.File(java.nio.file.Paths.get(".").toAbsolutePath().normalize().toString()+"/AFICMSV_"+context.vnombre+".txt");
    if(file_tFileDelete_1.exists()&& file_tFileDelete_1.isFile()){
    	if(file_tFileDelete_1.delete()){
    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_1_DELETE_PATH",java.nio.file.Paths.get(".").toAbsolutePath().normalize().toString()+"/AFICMSV_"+context.vnombre+".txt");
 


	tos_count_tFileDelete_1++;

/**
 * [tFileDelete_1 main ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 process_data_end ] stop
 */

} // End of branch "row58"




	
	/**
	 * [tOracleOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	

 



/**
 * [tOracleOutput_4 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_14";
	
	

 



/**
 * [tFixedFlowInput_14 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_14 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_14";
	
	

        }
        globalMap.put("tFixedFlowInput_14_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_14", true);
end_Hash.put("tFixedFlowInput_14", System.currentTimeMillis());




/**
 * [tFixedFlowInput_14 end ] stop
 */

	
	/**
	 * [tOracleOutput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	
	



	
        if(pstmt_tOracleOutput_4 != null) {
			
				pstmt_tOracleOutput_4.close();
				resourceMap.remove("pstmt_tOracleOutput_4");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_4", true);

	
	nb_line_deleted_tOracleOutput_4=nb_line_deleted_tOracleOutput_4+ deletedCount_tOracleOutput_4;
	nb_line_update_tOracleOutput_4=nb_line_update_tOracleOutput_4 + updatedCount_tOracleOutput_4;
	nb_line_inserted_tOracleOutput_4=nb_line_inserted_tOracleOutput_4 + insertedCount_tOracleOutput_4;
	nb_line_rejected_tOracleOutput_4=nb_line_rejected_tOracleOutput_4 + rejectedCount_tOracleOutput_4;
	
        globalMap.put("tOracleOutput_4_NB_LINE",nb_line_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_UPDATED",nb_line_update_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_4);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row57");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_4", true);
end_Hash.put("tOracleOutput_4", System.currentTimeMillis());




/**
 * [tOracleOutput_4 end ] stop
 */

	
	/**
	 * [tFileDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row58");
			  	}
			  	
 

ok_Hash.put("tFileDelete_1", true);
end_Hash.put("tFileDelete_1", System.currentTimeMillis());

   			if (context.numregexitoso==0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If34", 0, "true");
					}
				tFixedFlowInput_21Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If34", 0, "false");
					}   	 
   				}
   			if (context.numregexitoso>0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If33", 0, "true");
					}
				tFixedFlowInput_15Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If33", 0, "false");
					}   	 
   				}



/**
 * [tFileDelete_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_14 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_14";
	
	

 



/**
 * [tFixedFlowInput_14 finally ] stop
 */

	
	/**
	 * [tOracleOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_4 = null;
                if ((pstmtToClose_tOracleOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_4")) != null) {
                    pstmtToClose_tOracleOutput_4.close();
                }
    }
 



/**
 * [tOracleOutput_4 finally ] stop
 */

	
	/**
	 * [tFileDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_14_SUBPROCESS_STATE", 1);
	}
	


public static class row47Struct implements routines.system.IPersistableRow<row47Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer archivos_id_;

				public Integer getArchivos_id_ () {
					return this.archivos_id_;
				}

				public Boolean archivos_id_IsNullable(){
				    return true;
				}
				public Boolean archivos_id_IsKey(){
				    return false;
				}
				public Integer archivos_id_Length(){
				    return null;
				}
				public Integer archivos_id_Precision(){
				    return null;
				}
				public String archivos_id_Default(){
				
					return null;
				
				}
				public String archivos_id_Comment(){
				
				    return "";
				
				}
				public String archivos_id_Pattern(){
				
					return "";
				
				}
				public String archivos_id_OriginalDbColumnName(){
				
					return "archivos_id_";
				
				}

				
			    public Integer estado_;

				public Integer getEstado_ () {
					return this.estado_;
				}

				public Boolean estado_IsNullable(){
				    return true;
				}
				public Boolean estado_IsKey(){
				    return false;
				}
				public Integer estado_Length(){
				    return null;
				}
				public Integer estado_Precision(){
				    return null;
				}
				public String estado_Default(){
				
					return null;
				
				}
				public String estado_Comment(){
				
				    return "";
				
				}
				public String estado_Pattern(){
				
					return "";
				
				}
				public String estado_OriginalDbColumnName(){
				
					return "estado_";
				
				}

				
			    public java.util.Date finicio_;

				public java.util.Date getFinicio_ () {
					return this.finicio_;
				}

				public Boolean finicio_IsNullable(){
				    return true;
				}
				public Boolean finicio_IsKey(){
				    return false;
				}
				public Integer finicio_Length(){
				    return null;
				}
				public Integer finicio_Precision(){
				    return null;
				}
				public String finicio_Default(){
				
					return null;
				
				}
				public String finicio_Comment(){
				
				    return "";
				
				}
				public String finicio_Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String finicio_OriginalDbColumnName(){
				
					return "finicio_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("archivos_id_="+String.valueOf(archivos_id_));
		sb.append(",estado_="+String.valueOf(estado_));
		sb.append(",finicio_="+String.valueOf(finicio_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row47Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_21_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row47Struct row47 = new row47Struct();




	
	/**
	 * [tOracleSP_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_11", false);
		start_Hash.put("tOracleSP_11", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row47");
					}
				
		int tos_count_tOracleSP_11 = 0;
		

	java.sql.Connection connection_tOracleSP_11 = null;
	connection_tOracleSP_11 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_2");
	

java.sql.CallableStatement statement_tOracleSP_11 = connection_tOracleSP_11.prepareCall("{call " + "cms2.updestadoarchivo" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_11;
String tmpString_tOracleSP_11;

 



/**
 * [tOracleSP_11 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_21", false);
		start_Hash.put("tFixedFlowInput_21", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_21";
	
	
		int tos_count_tFixedFlowInput_21 = 0;
		

	    for (int i_tFixedFlowInput_21 = 0 ; i_tFixedFlowInput_21 < 1 ; i_tFixedFlowInput_21++) {
	                	            	
    	            		row47.archivos_id_ = context.afiarchivos_id;
    	            	        	            	
    	            		row47.estado_ = 8;
    	            	        	            	
    	            		row47.finicio_ = context.vfinicio;
    	            	

 



/**
 * [tFixedFlowInput_21 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_21 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_21";
	
	

 


	tos_count_tFixedFlowInput_21++;

/**
 * [tFixedFlowInput_21 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_21";
	
	

 



/**
 * [tFixedFlowInput_21 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_11 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row47"
						
						);
					}
					

			// code for the argument 1 (archivos_id_) of type 'IN AUTOMAPPING'
    					if (row47.archivos_id_ == null) {
    						statement_tOracleSP_11.setNull(1, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_11.setInt(1, row47.archivos_id_);
    					}
    					
			// code for the argument 2 (estado_) of type 'IN AUTOMAPPING'
    					if (row47.estado_ == null) {
    						statement_tOracleSP_11.setNull(2, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_11.setInt(2, row47.estado_);
    					}
    					
			// code for the argument 3 (finicio_) of type 'IN TIMESTAMP'
    					if (row47.finicio_ == null) {
    						statement_tOracleSP_11.setNull(3, java.sql.Types.DATE);
    					} else {
    					
    					statement_tOracleSP_11.setTimestamp(3, new java.sql.Timestamp(row47.finicio_.getTime()));
    					
    					}
    					
		statement_tOracleSP_11.execute();
		

 


	tos_count_tOracleSP_11++;

/**
 * [tOracleSP_11 main ] stop
 */
	
	/**
	 * [tOracleSP_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_11";
	
	

 



/**
 * [tOracleSP_11 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_11";
	
	

 



/**
 * [tOracleSP_11 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_21";
	
	

 



/**
 * [tFixedFlowInput_21 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_21 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_21";
	
	

        }
        globalMap.put("tFixedFlowInput_21_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_21", true);
end_Hash.put("tFixedFlowInput_21", System.currentTimeMillis());




/**
 * [tFixedFlowInput_21 end ] stop
 */

	
	/**
	 * [tOracleSP_11 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_11";
	
	


	statement_tOracleSP_11.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row47");
			  	}
			  	
 

ok_Hash.put("tOracleSP_11", true);
end_Hash.put("tOracleSP_11", System.currentTimeMillis());




/**
 * [tOracleSP_11 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_21 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_21";
	
	

 



/**
 * [tFixedFlowInput_21 finally ] stop
 */

	
	/**
	 * [tOracleSP_11 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_11";
	
	

 



/**
 * [tOracleSP_11 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_21_SUBPROCESS_STATE", 1);
	}
	


public static class row50Struct implements routines.system.IPersistableRow<row50Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer archivos_id_;

				public Integer getArchivos_id_ () {
					return this.archivos_id_;
				}

				public Boolean archivos_id_IsNullable(){
				    return true;
				}
				public Boolean archivos_id_IsKey(){
				    return false;
				}
				public Integer archivos_id_Length(){
				    return null;
				}
				public Integer archivos_id_Precision(){
				    return null;
				}
				public String archivos_id_Default(){
				
					return null;
				
				}
				public String archivos_id_Comment(){
				
				    return "";
				
				}
				public String archivos_id_Pattern(){
				
					return "";
				
				}
				public String archivos_id_OriginalDbColumnName(){
				
					return "archivos_id_";
				
				}

				
			    public Integer estado_;

				public Integer getEstado_ () {
					return this.estado_;
				}

				public Boolean estado_IsNullable(){
				    return true;
				}
				public Boolean estado_IsKey(){
				    return false;
				}
				public Integer estado_Length(){
				    return null;
				}
				public Integer estado_Precision(){
				    return null;
				}
				public String estado_Default(){
				
					return null;
				
				}
				public String estado_Comment(){
				
				    return "";
				
				}
				public String estado_Pattern(){
				
					return "";
				
				}
				public String estado_OriginalDbColumnName(){
				
					return "estado_";
				
				}

				
			    public java.util.Date finicio_;

				public java.util.Date getFinicio_ () {
					return this.finicio_;
				}

				public Boolean finicio_IsNullable(){
				    return true;
				}
				public Boolean finicio_IsKey(){
				    return false;
				}
				public Integer finicio_Length(){
				    return null;
				}
				public Integer finicio_Precision(){
				    return null;
				}
				public String finicio_Default(){
				
					return null;
				
				}
				public String finicio_Comment(){
				
				    return "";
				
				}
				public String finicio_Pattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String finicio_OriginalDbColumnName(){
				
					return "finicio_";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.archivos_id_ = readInteger(dis);
					
						this.estado_ = readInteger(dis);
					
					this.finicio_ = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.archivos_id_,dos);
					
					// Integer
				
						writeInteger(this.estado_,dos);
					
					// java.util.Date
				
						writeDate(this.finicio_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("archivos_id_="+String.valueOf(archivos_id_));
		sb.append(",estado_="+String.valueOf(estado_));
		sb.append(",finicio_="+String.valueOf(finicio_));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row50Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row50Struct row50 = new row50Struct();




	
	/**
	 * [tOracleSP_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_6", false);
		start_Hash.put("tOracleSP_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row50");
					}
				
		int tos_count_tOracleSP_6 = 0;
		

	java.sql.Connection connection_tOracleSP_6 = null;
	connection_tOracleSP_6 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_2");
	

java.sql.CallableStatement statement_tOracleSP_6 = connection_tOracleSP_6.prepareCall("{call " + "cms2.updestadoarchivo" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_6;
String tmpString_tOracleSP_6;

 



/**
 * [tOracleSP_6 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_15", false);
		start_Hash.put("tFixedFlowInput_15", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_15";
	
	
		int tos_count_tFixedFlowInput_15 = 0;
		

	    for (int i_tFixedFlowInput_15 = 0 ; i_tFixedFlowInput_15 < 1 ; i_tFixedFlowInput_15++) {
	                	            	
    	            		row50.archivos_id_ = context.afiarchivos_id;
    	            	        	            	
    	            		row50.estado_ = 6;
    	            	        	            	
    	            		row50.finicio_ = context.vfinicio;
    	            	

 



/**
 * [tFixedFlowInput_15 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_15 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_15";
	
	

 


	tos_count_tFixedFlowInput_15++;

/**
 * [tFixedFlowInput_15 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_15";
	
	

 



/**
 * [tFixedFlowInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_6 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row50"
						
						);
					}
					

			// code for the argument 1 (archivos_id_) of type 'IN AUTOMAPPING'
    					if (row50.archivos_id_ == null) {
    						statement_tOracleSP_6.setNull(1, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_6.setInt(1, row50.archivos_id_);
    					}
    					
			// code for the argument 2 (estado_) of type 'IN AUTOMAPPING'
    					if (row50.estado_ == null) {
    						statement_tOracleSP_6.setNull(2, java.sql.Types.INTEGER);
    					} else {
    					
                        statement_tOracleSP_6.setInt(2, row50.estado_);
    					}
    					
			// code for the argument 3 (finicio_) of type 'IN TIMESTAMP'
    					if (row50.finicio_ == null) {
    						statement_tOracleSP_6.setNull(3, java.sql.Types.DATE);
    					} else {
    					
    					statement_tOracleSP_6.setTimestamp(3, new java.sql.Timestamp(row50.finicio_.getTime()));
    					
    					}
    					
		statement_tOracleSP_6.execute();
		

 


	tos_count_tOracleSP_6++;

/**
 * [tOracleSP_6 main ] stop
 */
	
	/**
	 * [tOracleSP_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_6";
	
	

 



/**
 * [tOracleSP_6 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_6";
	
	

 



/**
 * [tOracleSP_6 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_15";
	
	

 



/**
 * [tFixedFlowInput_15 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_15 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_15";
	
	

        }
        globalMap.put("tFixedFlowInput_15_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_15", true);
end_Hash.put("tFixedFlowInput_15", System.currentTimeMillis());




/**
 * [tFixedFlowInput_15 end ] stop
 */

	
	/**
	 * [tOracleSP_6 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_6";
	
	


	statement_tOracleSP_6.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row50");
			  	}
			  	
 

ok_Hash.put("tOracleSP_6", true);
end_Hash.put("tOracleSP_6", System.currentTimeMillis());




/**
 * [tOracleSP_6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_15 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_15";
	
	

 



/**
 * [tFixedFlowInput_15 finally ] stop
 */

	
	/**
	 * [tOracleSP_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_6";
	
	

 



/**
 * [tOracleSP_6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_15_SUBPROCESS_STATE", 1);
	}
	


public static class row56Struct implements routines.system.IPersistableRow<row56Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String contenido;

				public String getContenido () {
					return this.contenido;
				}

				public Boolean contenidoIsNullable(){
				    return true;
				}
				public Boolean contenidoIsKey(){
				    return false;
				}
				public Integer contenidoLength(){
				    return null;
				}
				public Integer contenidoPrecision(){
				    return null;
				}
				public String contenidoDefault(){
				
					return null;
				
				}
				public String contenidoComment(){
				
				    return "";
				
				}
				public String contenidoPattern(){
				
					return "";
				
				}
				public String contenidoOriginalDbColumnName(){
				
					return "contenido";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.contenido = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.contenido = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.contenido,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.contenido,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("contenido="+contenido);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row56Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row56Struct row56 = new row56Struct();




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row56");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(java.nio.file.Paths.get(".").toAbsolutePath().normalize().toString()+"/AFICMSV_"+context.vnombre+".txt")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_10", false);
		start_Hash.put("tFixedFlowInput_10", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_10";
	
	
		int tos_count_tFixedFlowInput_10 = 0;
		

	int nb_line_tFixedFlowInput_10 = 0;
	List<row56Struct> cacheList_tFixedFlowInput_10 = new java.util.ArrayList<row56Struct>();
	row56 = new row56Struct();        	            	
	row56.contenido = "===============================================================================================================================================";
	cacheList_tFixedFlowInput_10.add(row56);
	row56 = new row56Struct();        	            	
	row56.contenido = "***************************************************** PROCESO DE CARGUE MASIVO GAVD ****************************************************";
	cacheList_tFixedFlowInput_10.add(row56);
	row56 = new row56Struct();        	            	
	row56.contenido = "==  Fecha de inicio de ejecución (YYYY-MM-DD h24:mm:ss): "+TalendDate.getCurrentDate();
	cacheList_tFixedFlowInput_10.add(row56);
	row56 = new row56Struct();        	            	
	row56.contenido = "===============================================================================================================================================";
	cacheList_tFixedFlowInput_10.add(row56);
	row56 = new row56Struct();        	            	
	row56.contenido = "****************************************************** RESUMEN PROCESAMIENTO ***********************************************************";
	cacheList_tFixedFlowInput_10.add(row56);
	row56 = new row56Struct();        	            	
	row56.contenido = "--> Total registros procesados: ".concat(Integer.toString(context.regpersonas+context.regafiliados+context.regestructura+context.regduplicados));
	cacheList_tFixedFlowInput_10.add(row56);
	row56 = new row56Struct();        	            	
	row56.contenido = "--> Registros procesados exitosamente: ".concat(Integer.toString(context.regpersonas+context.regafiliados));
	cacheList_tFixedFlowInput_10.add(row56);
	row56 = new row56Struct();        	            	
	row56.contenido = "--> Registros no procesados exitosamente: ".concat(Integer.toString(context.regestructura+context.regduplicados));
	cacheList_tFixedFlowInput_10.add(row56);
	row56 = new row56Struct();        	            	
	row56.contenido = "===============================================================================================================================================";
	cacheList_tFixedFlowInput_10.add(row56);
	row56 = new row56Struct();        	            	
	row56.contenido = "***************************************************** DETALLE PROCESAMIENTO ************************************************************";
	cacheList_tFixedFlowInput_10.add(row56);
	row56 = new row56Struct();        	            	
	row56.contenido = "--> Personas y afiliaciones nuevas creadas: "+context.regpersonas;
	cacheList_tFixedFlowInput_10.add(row56);
	row56 = new row56Struct();        	            	
	row56.contenido = "--> Afiliaciones nuevas con personas existentes: "+context.regafiliados;
	cacheList_tFixedFlowInput_10.add(row56);
	row56 = new row56Struct();        	            	
	row56.contenido = "--> Errores en estructura de archivo: "+context.regestructura;
	cacheList_tFixedFlowInput_10.add(row56);
	row56 = new row56Struct();        	            	
	row56.contenido = "--> Errores por consistencia en datos personas: "+context.regduplicados;
	cacheList_tFixedFlowInput_10.add(row56);
	row56 = new row56Struct();        	            	
	row56.contenido = "==  Fecha final de ejecución: "+(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss.SSS",TalendDate.getCurrentDate()));
	cacheList_tFixedFlowInput_10.add(row56);
	for (int i_tFixedFlowInput_10 = 0 ; i_tFixedFlowInput_10 < 1 ; i_tFixedFlowInput_10++) {	
		for(row56Struct tmpRow_tFixedFlowInput_10 : cacheList_tFixedFlowInput_10){
			nb_line_tFixedFlowInput_10 ++;		
			row56 = tmpRow_tFixedFlowInput_10;

 



/**
 * [tFixedFlowInput_10 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_10 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_10";
	
	

 


	tos_count_tFixedFlowInput_10++;

/**
 * [tFixedFlowInput_10 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_10";
	
	

 



/**
 * [tFixedFlowInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row56"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row56.contenido != null) {
                        sb_tFileOutputDelimited_1.append(
                            row56.contenido
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_10";
	
	

 



/**
 * [tFixedFlowInput_10 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_10 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_10";
	
	

		}
	}
	cacheList_tFixedFlowInput_10.clear();
	globalMap.put("tFixedFlowInput_10_NB_LINE", nb_line_tFixedFlowInput_10);

 

ok_Hash.put("tFixedFlowInput_10", true);
end_Hash.put("tFixedFlowInput_10", System.currentTimeMillis());




/**
 * [tFixedFlowInput_10 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row56");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

   			if (context.numregexitoso>0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If31", 0, "true");
					}
				tFixedFlowInput_14Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If31", 0, "false");
					}   	 
   				}



/**
 * [tFileOutputDelimited_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_10 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_10";
	
	

 



/**
 * [tFixedFlowInput_10 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row48Struct implements routines.system.IPersistableRow<row48Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer REGISTROS;

				public Integer getREGISTROS () {
					return this.REGISTROS;
				}

				public Boolean REGISTROSIsNullable(){
				    return true;
				}
				public Boolean REGISTROSIsKey(){
				    return false;
				}
				public Integer REGISTROSLength(){
				    return 0;
				}
				public Integer REGISTROSPrecision(){
				    return 0;
				}
				public String REGISTROSDefault(){
				
					return "";
				
				}
				public String REGISTROSComment(){
				
				    return "";
				
				}
				public String REGISTROSPattern(){
				
					return "";
				
				}
				public String REGISTROSOriginalDbColumnName(){
				
					return "REGISTROS";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return true;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 14;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.REGISTROS = readInteger(dis);
					
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.REGISTROS = readInteger(dis);
					
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.REGISTROS,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.REGISTROS,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("REGISTROS="+String.valueOf(REGISTROS));
		sb.append(",NOMBRE="+NOMBRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row48Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row48Struct row48 = new row48Struct();




	
	/**
	 * [tJavaRow_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_22", false);
		start_Hash.put("tJavaRow_22", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_22";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row48");
					}
				
		int tos_count_tJavaRow_22 = 0;
		

int nb_line_tJavaRow_22 = 0;

 



/**
 * [tJavaRow_22 begin ] stop
 */



	
	/**
	 * [tOracleInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_14", false);
		start_Hash.put("tOracleInput_14", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_14";
	
	
		int tos_count_tOracleInput_14 = 0;
		
	


	
		    int nb_line_tOracleInput_14 = 0;
		    java.sql.Connection conn_tOracleInput_14 = null;
				conn_tOracleInput_14 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_14 = false;
				boolean isConnectionWrapped_tOracleInput_14 = !(conn_tOracleInput_14 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_14.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_14 = null;
                if (isConnectionWrapped_tOracleInput_14) {
					unwrappedOraConn_tOracleInput_14 = conn_tOracleInput_14.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_14 != null) {
                        isTimeZoneNull_tOracleInput_14 = (unwrappedOraConn_tOracleInput_14.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_14 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_14).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_14) {
					java.sql.Statement stmtGetTZ_tOracleInput_14 = conn_tOracleInput_14.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_14 = stmtGetTZ_tOracleInput_14.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_14 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_14.next()) {
						sessionTimezone_tOracleInput_14 = rsGetTZ_tOracleInput_14.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_14 && unwrappedOraConn_tOracleInput_14 != null) {
                        unwrappedOraConn_tOracleInput_14.setSessionTimeZone(sessionTimezone_tOracleInput_14);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_14).setSessionTimeZone(sessionTimezone_tOracleInput_14);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_14 = conn_tOracleInput_14.createStatement();

		    String dbquery_tOracleInput_14 = "select count(1) registros, to_char(sysdate,'ddmmyyyyhhmiss') nombre\n  from tst_errcmasivo";
		    

		    globalMap.put("tOracleInput_14_QUERY",dbquery_tOracleInput_14);

		    java.sql.ResultSet rs_tOracleInput_14 = null;

		    try {
		    	rs_tOracleInput_14 = stmt_tOracleInput_14.executeQuery(dbquery_tOracleInput_14);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_14 = rs_tOracleInput_14.getMetaData();
		    	int colQtyInRs_tOracleInput_14 = rsmd_tOracleInput_14.getColumnCount();

		    String tmpContent_tOracleInput_14 = null;
		    
		    
		    while (rs_tOracleInput_14.next()) {
		        nb_line_tOracleInput_14++;
		        
							if(colQtyInRs_tOracleInput_14 < 1) {
								row48.REGISTROS = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(1) != null) {
						row48.REGISTROS = rs_tOracleInput_14.getInt(1);
					} else {
				
						row48.REGISTROS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 2) {
								row48.NOMBRE = null;
							} else {
	                         		
        	row48.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 2, false);
		                    }
					




 



/**
 * [tOracleInput_14 begin ] stop
 */
	
	/**
	 * [tOracleInput_14 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 


	tos_count_tOracleInput_14++;

/**
 * [tOracleInput_14 main ] stop
 */
	
	/**
	 * [tOracleInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_22 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_22";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row48"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.cregistros = row48.REGISTROS;
context.vnombre = row48.NOMBRE;
context.vtarchivos_id = 16;



////////////////////////////////
context.vusuarios_id = 7229;
    nb_line_tJavaRow_22++;   

 


	tos_count_tJavaRow_22++;

/**
 * [tJavaRow_22 main ] stop
 */
	
	/**
	 * [tJavaRow_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_22";
	
	

 



/**
 * [tJavaRow_22 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_22";
	
	

 



/**
 * [tJavaRow_22 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_14 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

}
}finally{
	if (rs_tOracleInput_14 != null) {
		rs_tOracleInput_14.close();
	}
	if (stmt_tOracleInput_14 != null) {
		stmt_tOracleInput_14.close();
	}
}

globalMap.put("tOracleInput_14_NB_LINE",nb_line_tOracleInput_14);
 

ok_Hash.put("tOracleInput_14", true);
end_Hash.put("tOracleInput_14", System.currentTimeMillis());




/**
 * [tOracleInput_14 end ] stop
 */

	
	/**
	 * [tJavaRow_22 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_22";
	
	

globalMap.put("tJavaRow_22_NB_LINE",nb_line_tJavaRow_22);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row48");
			  	}
			  	
 

ok_Hash.put("tJavaRow_22", true);
end_Hash.put("tJavaRow_22", System.currentTimeMillis());

   			if (context.cregistros > 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If35", 0, "true");
					}
				tOracleInput_15Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If35", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_22 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_14 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 finally ] stop
 */

	
	/**
	 * [tJavaRow_22 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_22";
	
	

 



/**
 * [tJavaRow_22 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_14_SUBPROCESS_STATE", 1);
	}
	


public static class row53Struct implements routines.system.IPersistableRow<row53Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 5;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 100;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public String TEXTO;

				public String getTEXTO () {
					return this.TEXTO;
				}

				public Boolean TEXTOIsNullable(){
				    return true;
				}
				public Boolean TEXTOIsKey(){
				    return false;
				}
				public Integer TEXTOLength(){
				    return 4000;
				}
				public Integer TEXTOPrecision(){
				    return 0;
				}
				public String TEXTODefault(){
				
					return null;
				
				}
				public String TEXTOComment(){
				
				    return "";
				
				}
				public String TEXTOPattern(){
				
					return "";
				
				}
				public String TEXTOOriginalDbColumnName(){
				
					return "TEXTO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.TEXTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
					this.TEXTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.TEXTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// String
				
						writeString(this.TEXTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SIGLA="+SIGLA);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TEXTO="+TEXTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row53Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row53Struct row53 = new row53Struct();




	
	/**
	 * [tFileOutputPositional_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputPositional_1", false);
		start_Hash.put("tFileOutputPositional_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputPositional_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row53");
					}
				
		int tos_count_tFileOutputPositional_1 = 0;
		

        if (false) {
            throw new RuntimeException("tFileOutputPositional doesn't support to work with tSetDynamicSchema when 'Guess schema from file' option is activated");
        }
		int nb_line_tFileOutputPositional_1 = 0;
		resourceMap.put("nb_line_tFileOutputPositional_1", nb_line_tFileOutputPositional_1);
				
		class PositionUtil_tFileOutputPositional_1{
		
              void writeHeader_0(String tempStringBtFileOutputPositional_1,int tempLengthBtFileOutputPositional_1,final java.io.BufferedWriter outtFileOutputPositional_1)throws IOException,java.io.UnsupportedEncodingException{
              
                 int tempLengthMtFileOutputPositional_1= 0;
    			//get  and format output String begin				
    			tempStringBtFileOutputPositional_1="SIGLA";
    			
    			tempLengthBtFileOutputPositional_1=tempStringBtFileOutputPositional_1.length();
    			
    			
            	if (tempLengthBtFileOutputPositional_1 > 10) {
                }else if(tempLengthBtFileOutputPositional_1<10){
                    StringBuilder resulttFileOutputPositional_1 = new StringBuilder();
                        resulttFileOutputPositional_1.append(tempStringBtFileOutputPositional_1);
                        for(int itFileOutputPositional_1=0; itFileOutputPositional_1< 10-tempLengthBtFileOutputPositional_1; itFileOutputPositional_1++){
                            resulttFileOutputPositional_1.append(' ');
                        }
                        tempStringBtFileOutputPositional_1 = resulttFileOutputPositional_1.toString();       
                }
                //get  and format output String end
    			outtFileOutputPositional_1.write(tempStringBtFileOutputPositional_1);
    			//get  and format output String begin				
    			tempStringBtFileOutputPositional_1="DOCUMENTO";
    			
    			tempLengthBtFileOutputPositional_1=tempStringBtFileOutputPositional_1.length();
    			
    			
            	if (tempLengthBtFileOutputPositional_1 > 20) {
                }else if(tempLengthBtFileOutputPositional_1<20){
                    StringBuilder resulttFileOutputPositional_1 = new StringBuilder();
                        resulttFileOutputPositional_1.append(tempStringBtFileOutputPositional_1);
                        for(int itFileOutputPositional_1=0; itFileOutputPositional_1< 20-tempLengthBtFileOutputPositional_1; itFileOutputPositional_1++){
                            resulttFileOutputPositional_1.append(' ');
                        }
                        tempStringBtFileOutputPositional_1 = resulttFileOutputPositional_1.toString();       
                }
                //get  and format output String end
    			outtFileOutputPositional_1.write(tempStringBtFileOutputPositional_1);
    			//get  and format output String begin				
    			tempStringBtFileOutputPositional_1="TEXTO";
    			
    			tempLengthBtFileOutputPositional_1=tempStringBtFileOutputPositional_1.length();
    			
    			
            	if (tempLengthBtFileOutputPositional_1 > 4000) {
                }else if(tempLengthBtFileOutputPositional_1<4000){
                    StringBuilder resulttFileOutputPositional_1 = new StringBuilder();
                        resulttFileOutputPositional_1.append(tempStringBtFileOutputPositional_1);
                        for(int itFileOutputPositional_1=0; itFileOutputPositional_1< 4000-tempLengthBtFileOutputPositional_1; itFileOutputPositional_1++){
                            resulttFileOutputPositional_1.append(' ');
                        }
                        tempStringBtFileOutputPositional_1 = resulttFileOutputPositional_1.toString();       
                }
                //get  and format output String end
    			outtFileOutputPositional_1.write(tempStringBtFileOutputPositional_1);
              }  
				  void setValue_0(final row53Struct row53,StringBuilder sb_tFileOutputPositional_1,String tempStringMtFileOutputPositional_1,int tempLengthMtFileOutputPositional_1)throws IOException,java.io.UnsupportedEncodingException{
				//get  and format output String begin
    			tempStringMtFileOutputPositional_1=
					(row53.SIGLA == null) ? 
					"": row53.SIGLA ;
				
    			tempLengthMtFileOutputPositional_1=tempStringMtFileOutputPositional_1.length();
    			
    			
            	if (tempLengthMtFileOutputPositional_1 >=10) {
                        sb_tFileOutputPositional_1.append(tempStringMtFileOutputPositional_1);
                }else if(tempLengthMtFileOutputPositional_1<10){
                   
                        sb_tFileOutputPositional_1.append(tempStringMtFileOutputPositional_1);
                        for(int i_tFileOutputPositional_1=0; i_tFileOutputPositional_1< 10-tempLengthMtFileOutputPositional_1; i_tFileOutputPositional_1++){
                            sb_tFileOutputPositional_1.append(' ');
                        }
                               
                }
                //get  and format output String end				
			
				//get  and format output String begin
    			tempStringMtFileOutputPositional_1=
					(row53.DOCUMENTO == null) ? 
					"": row53.DOCUMENTO ;
				
    			tempLengthMtFileOutputPositional_1=tempStringMtFileOutputPositional_1.length();
    			
    			
            	if (tempLengthMtFileOutputPositional_1 >=20) {
                        sb_tFileOutputPositional_1.append(tempStringMtFileOutputPositional_1);
                }else if(tempLengthMtFileOutputPositional_1<20){
                   
                        sb_tFileOutputPositional_1.append(tempStringMtFileOutputPositional_1);
                        for(int i_tFileOutputPositional_1=0; i_tFileOutputPositional_1< 20-tempLengthMtFileOutputPositional_1; i_tFileOutputPositional_1++){
                            sb_tFileOutputPositional_1.append(' ');
                        }
                               
                }
                //get  and format output String end				
			
				//get  and format output String begin
    			tempStringMtFileOutputPositional_1=
					(row53.TEXTO == null) ? 
					"": row53.TEXTO ;
				
    			tempLengthMtFileOutputPositional_1=tempStringMtFileOutputPositional_1.length();
    			
    			
            	if (tempLengthMtFileOutputPositional_1 >=4000) {
                        sb_tFileOutputPositional_1.append(tempStringMtFileOutputPositional_1);
                }else if(tempLengthMtFileOutputPositional_1<4000){
                   
                        sb_tFileOutputPositional_1.append(tempStringMtFileOutputPositional_1);
                        for(int i_tFileOutputPositional_1=0; i_tFileOutputPositional_1< 4000-tempLengthMtFileOutputPositional_1; i_tFileOutputPositional_1++){
                            sb_tFileOutputPositional_1.append(' ');
                        }
                               
                }
                //get  and format output String end				
			
                   }
		
		}
		
		PositionUtil_tFileOutputPositional_1 positionUtil_tFileOutputPositional_1=new PositionUtil_tFileOutputPositional_1();
		
		String fileNewName_tFileOutputPositional_1 = java.nio.file.Paths.get(".").toAbsolutePath().normalize().toString()+"/ERR_AFICMSV_"+context.vnombre+".txt";
		java.io.File createFiletFileOutputPositional_1 = new java.io.File(fileNewName_tFileOutputPositional_1);
		boolean isFileGenerated_tFileOutputPositional_1 = true;
		resourceMap.put("createFiletFileOutputPositional_1", createFiletFileOutputPositional_1);
		resourceMap.put("isFileGenerated_tFileOutputPositional_1", isFileGenerated_tFileOutputPositional_1);
		if(createFiletFileOutputPositional_1.exists()){
			isFileGenerated_tFileOutputPositional_1 = false;
			resourceMap.put("isFileGenerated_tFileOutputPositional_1", isFileGenerated_tFileOutputPositional_1);
		}
        //create directory only if not exists
        java.io.File parentFile_tFileOutputPositional_1 = createFiletFileOutputPositional_1.getParentFile();
        if(parentFile_tFileOutputPositional_1 != null && !parentFile_tFileOutputPositional_1.exists()) {
            parentFile_tFileOutputPositional_1.mkdirs();
        }
		final java.io.BufferedWriter outtFileOutputPositional_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
        		new java.io.FileOutputStream(fileNewName_tFileOutputPositional_1, true),"ISO-8859-15"));
        		resourceMap.put("outtFileOutputPositional_1", outtFileOutputPositional_1);
		if(createFiletFileOutputPositional_1.length()==0){
    		
    		String tempStringBtFileOutputPositional_1=null;
    		int tempLengthBtFileOutputPositional_1=0;
            positionUtil_tFileOutputPositional_1.writeHeader_0(tempStringBtFileOutputPositional_1,tempLengthBtFileOutputPositional_1,outtFileOutputPositional_1);
    		outtFileOutputPositional_1.write("\n");
    	}

 



/**
 * [tFileOutputPositional_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_15", false);
		start_Hash.put("tOracleInput_15", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_15";
	
	
		int tos_count_tOracleInput_15 = 0;
		
	


	
		    int nb_line_tOracleInput_15 = 0;
		    java.sql.Connection conn_tOracleInput_15 = null;
				conn_tOracleInput_15 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_15 = false;
				boolean isConnectionWrapped_tOracleInput_15 = !(conn_tOracleInput_15 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_15.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_15 = null;
                if (isConnectionWrapped_tOracleInput_15) {
					unwrappedOraConn_tOracleInput_15 = conn_tOracleInput_15.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_15 != null) {
                        isTimeZoneNull_tOracleInput_15 = (unwrappedOraConn_tOracleInput_15.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_15 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_15).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_15) {
					java.sql.Statement stmtGetTZ_tOracleInput_15 = conn_tOracleInput_15.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_15 = stmtGetTZ_tOracleInput_15.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_15 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_15.next()) {
						sessionTimezone_tOracleInput_15 = rsGetTZ_tOracleInput_15.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_15 && unwrappedOraConn_tOracleInput_15 != null) {
                        unwrappedOraConn_tOracleInput_15.setSessionTimeZone(sessionTimezone_tOracleInput_15);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_15).setSessionTimeZone(sessionTimezone_tOracleInput_15);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_15 = conn_tOracleInput_15.createStatement();

		    String dbquery_tOracleInput_15 = "select sigla, documento, \n       decode(afiliados_id,null, decode(personas_id, null, mensaje, persona), afiliado) text"
+"o\nfrom (select gt.sigla, te.documento, 'Error validacion estructura: '||te.mensaje mensaje, \n       'Persona encontrad"
+"a:'||primer_nombre||' '||segundo_nombre||' '||primer_apellido||' '||segundo_apellido||' coincidencia '||mensaje persona,"
+"\n       'Persona encontrada:'||primer_nombre||' '||segundo_nombre||' '||primer_apellido||' '||segundo_apellido||' coinc"
+"idencia '||mensaje|| ' Adscrito al plan:'||upper(ap.descripcion) afiliado,\n       te.personas_id, te.afiliados_id\n    "
+"  from tst_errcmasivo te\n       inner join gen_tdocumentos gt on (te.tdocumentos_id = gt.id)\n       left join gen_pers"
+"onas gp on (te.personas_id = gp.id)\n       left join gen_afiliados ga on (te.afiliados_id = ga.id)\n       left join af"
+"i_planafiliaciones ap on (te.planafiliaciones_id = ap.id))";
		    

		    globalMap.put("tOracleInput_15_QUERY",dbquery_tOracleInput_15);

		    java.sql.ResultSet rs_tOracleInput_15 = null;

		    try {
		    	rs_tOracleInput_15 = stmt_tOracleInput_15.executeQuery(dbquery_tOracleInput_15);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_15 = rs_tOracleInput_15.getMetaData();
		    	int colQtyInRs_tOracleInput_15 = rsmd_tOracleInput_15.getColumnCount();

		    String tmpContent_tOracleInput_15 = null;
		    
		    
		    while (rs_tOracleInput_15.next()) {
		        nb_line_tOracleInput_15++;
		        
							if(colQtyInRs_tOracleInput_15 < 1) {
								row53.SIGLA = null;
							} else {
	                         		
        	row53.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_15 < 2) {
								row53.DOCUMENTO = null;
							} else {
	                         		
        	row53.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_15 < 3) {
								row53.TEXTO = null;
							} else {
	                         		
        	row53.TEXTO = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 3, false);
		                    }
					




 



/**
 * [tOracleInput_15 begin ] stop
 */
	
	/**
	 * [tOracleInput_15 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 


	tos_count_tOracleInput_15++;

/**
 * [tOracleInput_15 main ] stop
 */
	
	/**
	 * [tOracleInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputPositional_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputPositional_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row53"
						
						);
					}
					



				String tempStringMtFileOutputPositional_1= null;
				
				int tempLengthMtFileOutputPositional_1= 0;
				
				StringBuilder sb_tFileOutputPositional_1 = new StringBuilder();
    				positionUtil_tFileOutputPositional_1.setValue_0(row53,sb_tFileOutputPositional_1,tempStringMtFileOutputPositional_1,tempLengthMtFileOutputPositional_1);
			sb_tFileOutputPositional_1.append("\n");
			
			outtFileOutputPositional_1.write(sb_tFileOutputPositional_1.toString());
    		
    		 						
			nb_line_tFileOutputPositional_1++;
			resourceMap.put("nb_line_tFileOutputPositional_1", nb_line_tFileOutputPositional_1);

 


	tos_count_tFileOutputPositional_1++;

/**
 * [tFileOutputPositional_1 main ] stop
 */
	
	/**
	 * [tFileOutputPositional_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputPositional_1";
	
	

 



/**
 * [tFileOutputPositional_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputPositional_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputPositional_1";
	
	

 



/**
 * [tFileOutputPositional_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_15 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

}
}finally{
	if (rs_tOracleInput_15 != null) {
		rs_tOracleInput_15.close();
	}
	if (stmt_tOracleInput_15 != null) {
		stmt_tOracleInput_15.close();
	}
}

globalMap.put("tOracleInput_15_NB_LINE",nb_line_tOracleInput_15);
 

ok_Hash.put("tOracleInput_15", true);
end_Hash.put("tOracleInput_15", System.currentTimeMillis());




/**
 * [tOracleInput_15 end ] stop
 */

	
	/**
	 * [tFileOutputPositional_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputPositional_1";
	
	
	
	
	
	
	outtFileOutputPositional_1.close();
	
	globalMap.put("tFileOutputPositional_1_NB_LINE",nb_line_tFileOutputPositional_1);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row53");
			  	}
			  	
 

ok_Hash.put("tFileOutputPositional_1", true);
end_Hash.put("tFileOutputPositional_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tFixedFlowInput_22Process(globalMap);



/**
 * [tFileOutputPositional_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_15 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 finally ] stop
 */

	
	/**
	 * [tFileOutputPositional_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputPositional_1";
	
	
	
	
	
	java.io.Writer outtFileOutputPositional_1 = (java.io.Writer)resourceMap.get("outtFileOutputPositional_1");
	outtFileOutputPositional_1.close();
	

 



/**
 * [tFileOutputPositional_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_15_SUBPROCESS_STATE", 1);
	}
	


public static class row78Struct implements routines.system.IPersistableRow<row78Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer estado;

				public Integer getEstado () {
					return this.estado;
				}

				public Boolean estadoIsNullable(){
				    return true;
				}
				public Boolean estadoIsKey(){
				    return false;
				}
				public Integer estadoLength(){
				    return null;
				}
				public Integer estadoPrecision(){
				    return null;
				}
				public String estadoDefault(){
				
					return null;
				
				}
				public String estadoComment(){
				
				    return "";
				
				}
				public String estadoPattern(){
				
					return "";
				
				}
				public String estadoOriginalDbColumnName(){
				
					return "estado";
				
				}

				
			    public String archivo;

				public String getArchivo () {
					return this.archivo;
				}

				public Boolean archivoIsNullable(){
				    return true;
				}
				public Boolean archivoIsKey(){
				    return false;
				}
				public Integer archivoLength(){
				    return null;
				}
				public Integer archivoPrecision(){
				    return null;
				}
				public String archivoDefault(){
				
					return null;
				
				}
				public String archivoComment(){
				
				    return "";
				
				}
				public String archivoPattern(){
				
					return "";
				
				}
				public String archivoOriginalDbColumnName(){
				
					return "archivo";
				
				}

				
			    public Integer tarchivos_id;

				public Integer getTarchivos_id () {
					return this.tarchivos_id;
				}

				public Boolean tarchivos_idIsNullable(){
				    return true;
				}
				public Boolean tarchivos_idIsKey(){
				    return false;
				}
				public Integer tarchivos_idLength(){
				    return null;
				}
				public Integer tarchivos_idPrecision(){
				    return null;
				}
				public String tarchivos_idDefault(){
				
					return null;
				
				}
				public String tarchivos_idComment(){
				
				    return "";
				
				}
				public String tarchivos_idPattern(){
				
					return "";
				
				}
				public String tarchivos_idOriginalDbColumnName(){
				
					return "tarchivos_id";
				
				}

				
			    public Integer usuarios_id;

				public Integer getUsuarios_id () {
					return this.usuarios_id;
				}

				public Boolean usuarios_idIsNullable(){
				    return true;
				}
				public Boolean usuarios_idIsKey(){
				    return false;
				}
				public Integer usuarios_idLength(){
				    return null;
				}
				public Integer usuarios_idPrecision(){
				    return null;
				}
				public String usuarios_idDefault(){
				
					return null;
				
				}
				public String usuarios_idComment(){
				
				    return "";
				
				}
				public String usuarios_idPattern(){
				
					return "";
				
				}
				public String usuarios_idOriginalDbColumnName(){
				
					return "usuarios_id";
				
				}

				
			    public String codigo;

				public String getCodigo () {
					return this.codigo;
				}

				public Boolean codigoIsNullable(){
				    return true;
				}
				public Boolean codigoIsKey(){
				    return false;
				}
				public Integer codigoLength(){
				    return null;
				}
				public Integer codigoPrecision(){
				    return null;
				}
				public String codigoDefault(){
				
					return null;
				
				}
				public String codigoComment(){
				
				    return "";
				
				}
				public String codigoPattern(){
				
					return "";
				
				}
				public String codigoOriginalDbColumnName(){
				
					return "codigo";
				
				}

				
			    public String archivofs;

				public String getArchivofs () {
					return this.archivofs;
				}

				public Boolean archivofsIsNullable(){
				    return true;
				}
				public Boolean archivofsIsKey(){
				    return false;
				}
				public Integer archivofsLength(){
				    return null;
				}
				public Integer archivofsPrecision(){
				    return null;
				}
				public String archivofsDefault(){
				
					return null;
				
				}
				public String archivofsComment(){
				
				    return "";
				
				}
				public String archivofsPattern(){
				
					return "";
				
				}
				public String archivofsOriginalDbColumnName(){
				
					return "archivofs";
				
				}

				
			    public java.util.Date fecha;

				public java.util.Date getFecha () {
					return this.fecha;
				}

				public Boolean fechaIsNullable(){
				    return true;
				}
				public Boolean fechaIsKey(){
				    return false;
				}
				public Integer fechaLength(){
				    return null;
				}
				public Integer fechaPrecision(){
				    return null;
				}
				public String fechaDefault(){
				
					return null;
				
				}
				public String fechaComment(){
				
				    return "";
				
				}
				public String fechaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fechaOriginalDbColumnName(){
				
					return "fecha";
				
				}

				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}

				public Boolean extensionIsNullable(){
				    return true;
				}
				public Boolean extensionIsKey(){
				    return false;
				}
				public Integer extensionLength(){
				    return null;
				}
				public Integer extensionPrecision(){
				    return null;
				}
				public String extensionDefault(){
				
					return null;
				
				}
				public String extensionComment(){
				
				    return "";
				
				}
				public String extensionPattern(){
				
					return "";
				
				}
				public String extensionOriginalDbColumnName(){
				
					return "extension";
				
				}

				
			    public Object contenido;

				public Object getContenido () {
					return this.contenido;
				}

				public Boolean contenidoIsNullable(){
				    return true;
				}
				public Boolean contenidoIsKey(){
				    return false;
				}
				public Integer contenidoLength(){
				    return null;
				}
				public Integer contenidoPrecision(){
				    return null;
				}
				public String contenidoDefault(){
				
					return null;
				
				}
				public String contenidoComment(){
				
				    return "";
				
				}
				public String contenidoPattern(){
				
					return "";
				
				}
				public String contenidoOriginalDbColumnName(){
				
					return "contenido";
				
				}

				
			    public Integer padre_id;

				public Integer getPadre_id () {
					return this.padre_id;
				}

				public Boolean padre_idIsNullable(){
				    return true;
				}
				public Boolean padre_idIsKey(){
				    return false;
				}
				public Integer padre_idLength(){
				    return null;
				}
				public Integer padre_idPrecision(){
				    return null;
				}
				public String padre_idDefault(){
				
					return null;
				
				}
				public String padre_idComment(){
				
				    return "";
				
				}
				public String padre_idPattern(){
				
					return "";
				
				}
				public String padre_idOriginalDbColumnName(){
				
					return "padre_id";
				
				}

				
			    public java.util.Date fecha_inicio;

				public java.util.Date getFecha_inicio () {
					return this.fecha_inicio;
				}

				public Boolean fecha_inicioIsNullable(){
				    return true;
				}
				public Boolean fecha_inicioIsKey(){
				    return false;
				}
				public Integer fecha_inicioLength(){
				    return null;
				}
				public Integer fecha_inicioPrecision(){
				    return null;
				}
				public String fecha_inicioDefault(){
				
					return null;
				
				}
				public String fecha_inicioComment(){
				
				    return "";
				
				}
				public String fecha_inicioPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fecha_inicioOriginalDbColumnName(){
				
					return "fecha_inicio";
				
				}

				
			    public java.util.Date fecha_fin;

				public java.util.Date getFecha_fin () {
					return this.fecha_fin;
				}

				public Boolean fecha_finIsNullable(){
				    return true;
				}
				public Boolean fecha_finIsKey(){
				    return false;
				}
				public Integer fecha_finLength(){
				    return null;
				}
				public Integer fecha_finPrecision(){
				    return null;
				}
				public String fecha_finDefault(){
				
					return null;
				
				}
				public String fecha_finComment(){
				
				    return "";
				
				}
				public String fecha_finPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fecha_finOriginalDbColumnName(){
				
					return "fecha_fin";
				
				}

				
			    public Integer procesos_id;

				public Integer getProcesos_id () {
					return this.procesos_id;
				}

				public Boolean procesos_idIsNullable(){
				    return true;
				}
				public Boolean procesos_idIsKey(){
				    return false;
				}
				public Integer procesos_idLength(){
				    return null;
				}
				public Integer procesos_idPrecision(){
				    return null;
				}
				public String procesos_idDefault(){
				
					return null;
				
				}
				public String procesos_idComment(){
				
				    return "";
				
				}
				public String procesos_idPattern(){
				
					return "";
				
				}
				public String procesos_idOriginalDbColumnName(){
				
					return "proceso_id";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.estado = readInteger(dis);
					
					this.archivo = readString(dis);
					
						this.tarchivos_id = readInteger(dis);
					
						this.usuarios_id = readInteger(dis);
					
					this.codigo = readString(dis);
					
					this.archivofs = readString(dis);
					
					this.fecha = readDate(dis);
					
					this.extension = readString(dis);
					
						this.contenido = (Object) dis.readObject();
					
						this.padre_id = readInteger(dis);
					
					this.fecha_inicio = readDate(dis);
					
					this.fecha_fin = readDate(dis);
					
						this.procesos_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.estado = readInteger(dis);
					
					this.archivo = readString(dis);
					
						this.tarchivos_id = readInteger(dis);
					
						this.usuarios_id = readInteger(dis);
					
					this.codigo = readString(dis);
					
					this.archivofs = readString(dis);
					
					this.fecha = readDate(dis);
					
					this.extension = readString(dis);
					
						this.contenido = (Object) dis.readObject();
					
						this.padre_id = readInteger(dis);
					
					this.fecha_inicio = readDate(dis);
					
					this.fecha_fin = readDate(dis);
					
						this.procesos_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.estado,dos);
					
					// String
				
						writeString(this.archivo,dos);
					
					// Integer
				
						writeInteger(this.tarchivos_id,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id,dos);
					
					// String
				
						writeString(this.codigo,dos);
					
					// String
				
						writeString(this.archivofs,dos);
					
					// java.util.Date
				
						writeDate(this.fecha,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// Object
				
       			    	dos.writeObject(this.contenido);
					
					// Integer
				
						writeInteger(this.padre_id,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_fin,dos);
					
					// Integer
				
						writeInteger(this.procesos_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.estado,dos);
					
					// String
				
						writeString(this.archivo,dos);
					
					// Integer
				
						writeInteger(this.tarchivos_id,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id,dos);
					
					// String
				
						writeString(this.codigo,dos);
					
					// String
				
						writeString(this.archivofs,dos);
					
					// java.util.Date
				
						writeDate(this.fecha,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.contenido);
					
					// Integer
				
						writeInteger(this.padre_id,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_fin,dos);
					
					// Integer
				
						writeInteger(this.procesos_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("estado="+String.valueOf(estado));
		sb.append(",archivo="+archivo);
		sb.append(",tarchivos_id="+String.valueOf(tarchivos_id));
		sb.append(",usuarios_id="+String.valueOf(usuarios_id));
		sb.append(",codigo="+codigo);
		sb.append(",archivofs="+archivofs);
		sb.append(",fecha="+String.valueOf(fecha));
		sb.append(",extension="+extension);
		sb.append(",contenido="+String.valueOf(contenido));
		sb.append(",padre_id="+String.valueOf(padre_id));
		sb.append(",fecha_inicio="+String.valueOf(fecha_inicio));
		sb.append(",fecha_fin="+String.valueOf(fecha_fin));
		sb.append(",procesos_id="+String.valueOf(procesos_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row78Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row69Struct implements routines.system.IPersistableRow<row69Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer estado;

				public Integer getEstado () {
					return this.estado;
				}

				public Boolean estadoIsNullable(){
				    return true;
				}
				public Boolean estadoIsKey(){
				    return false;
				}
				public Integer estadoLength(){
				    return null;
				}
				public Integer estadoPrecision(){
				    return null;
				}
				public String estadoDefault(){
				
					return null;
				
				}
				public String estadoComment(){
				
				    return "";
				
				}
				public String estadoPattern(){
				
					return "";
				
				}
				public String estadoOriginalDbColumnName(){
				
					return "estado";
				
				}

				
			    public String archivo;

				public String getArchivo () {
					return this.archivo;
				}

				public Boolean archivoIsNullable(){
				    return true;
				}
				public Boolean archivoIsKey(){
				    return false;
				}
				public Integer archivoLength(){
				    return null;
				}
				public Integer archivoPrecision(){
				    return null;
				}
				public String archivoDefault(){
				
					return null;
				
				}
				public String archivoComment(){
				
				    return "";
				
				}
				public String archivoPattern(){
				
					return "";
				
				}
				public String archivoOriginalDbColumnName(){
				
					return "archivo";
				
				}

				
			    public Integer tarchivos_id;

				public Integer getTarchivos_id () {
					return this.tarchivos_id;
				}

				public Boolean tarchivos_idIsNullable(){
				    return true;
				}
				public Boolean tarchivos_idIsKey(){
				    return false;
				}
				public Integer tarchivos_idLength(){
				    return null;
				}
				public Integer tarchivos_idPrecision(){
				    return null;
				}
				public String tarchivos_idDefault(){
				
					return null;
				
				}
				public String tarchivos_idComment(){
				
				    return "";
				
				}
				public String tarchivos_idPattern(){
				
					return "";
				
				}
				public String tarchivos_idOriginalDbColumnName(){
				
					return "tarchivos_id";
				
				}

				
			    public Integer usuarios_id;

				public Integer getUsuarios_id () {
					return this.usuarios_id;
				}

				public Boolean usuarios_idIsNullable(){
				    return true;
				}
				public Boolean usuarios_idIsKey(){
				    return false;
				}
				public Integer usuarios_idLength(){
				    return null;
				}
				public Integer usuarios_idPrecision(){
				    return null;
				}
				public String usuarios_idDefault(){
				
					return null;
				
				}
				public String usuarios_idComment(){
				
				    return "";
				
				}
				public String usuarios_idPattern(){
				
					return "";
				
				}
				public String usuarios_idOriginalDbColumnName(){
				
					return "usuarios_id";
				
				}

				
			    public String codigo;

				public String getCodigo () {
					return this.codigo;
				}

				public Boolean codigoIsNullable(){
				    return true;
				}
				public Boolean codigoIsKey(){
				    return false;
				}
				public Integer codigoLength(){
				    return null;
				}
				public Integer codigoPrecision(){
				    return null;
				}
				public String codigoDefault(){
				
					return null;
				
				}
				public String codigoComment(){
				
				    return "";
				
				}
				public String codigoPattern(){
				
					return "";
				
				}
				public String codigoOriginalDbColumnName(){
				
					return "codigo";
				
				}

				
			    public String archivofs;

				public String getArchivofs () {
					return this.archivofs;
				}

				public Boolean archivofsIsNullable(){
				    return true;
				}
				public Boolean archivofsIsKey(){
				    return false;
				}
				public Integer archivofsLength(){
				    return null;
				}
				public Integer archivofsPrecision(){
				    return null;
				}
				public String archivofsDefault(){
				
					return null;
				
				}
				public String archivofsComment(){
				
				    return "";
				
				}
				public String archivofsPattern(){
				
					return "";
				
				}
				public String archivofsOriginalDbColumnName(){
				
					return "archivofs";
				
				}

				
			    public java.util.Date fecha;

				public java.util.Date getFecha () {
					return this.fecha;
				}

				public Boolean fechaIsNullable(){
				    return true;
				}
				public Boolean fechaIsKey(){
				    return false;
				}
				public Integer fechaLength(){
				    return null;
				}
				public Integer fechaPrecision(){
				    return null;
				}
				public String fechaDefault(){
				
					return null;
				
				}
				public String fechaComment(){
				
				    return "";
				
				}
				public String fechaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fechaOriginalDbColumnName(){
				
					return "fecha";
				
				}

				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}

				public Boolean extensionIsNullable(){
				    return true;
				}
				public Boolean extensionIsKey(){
				    return false;
				}
				public Integer extensionLength(){
				    return null;
				}
				public Integer extensionPrecision(){
				    return null;
				}
				public String extensionDefault(){
				
					return null;
				
				}
				public String extensionComment(){
				
				    return "";
				
				}
				public String extensionPattern(){
				
					return "";
				
				}
				public String extensionOriginalDbColumnName(){
				
					return "extension";
				
				}

				
			    public Object contenido;

				public Object getContenido () {
					return this.contenido;
				}

				public Boolean contenidoIsNullable(){
				    return true;
				}
				public Boolean contenidoIsKey(){
				    return false;
				}
				public Integer contenidoLength(){
				    return null;
				}
				public Integer contenidoPrecision(){
				    return null;
				}
				public String contenidoDefault(){
				
					return null;
				
				}
				public String contenidoComment(){
				
				    return "";
				
				}
				public String contenidoPattern(){
				
					return "";
				
				}
				public String contenidoOriginalDbColumnName(){
				
					return "contenido";
				
				}

				
			    public Integer padre_id;

				public Integer getPadre_id () {
					return this.padre_id;
				}

				public Boolean padre_idIsNullable(){
				    return true;
				}
				public Boolean padre_idIsKey(){
				    return false;
				}
				public Integer padre_idLength(){
				    return null;
				}
				public Integer padre_idPrecision(){
				    return null;
				}
				public String padre_idDefault(){
				
					return null;
				
				}
				public String padre_idComment(){
				
				    return "";
				
				}
				public String padre_idPattern(){
				
					return "";
				
				}
				public String padre_idOriginalDbColumnName(){
				
					return "padre_id";
				
				}

				
			    public java.util.Date fecha_inicio;

				public java.util.Date getFecha_inicio () {
					return this.fecha_inicio;
				}

				public Boolean fecha_inicioIsNullable(){
				    return true;
				}
				public Boolean fecha_inicioIsKey(){
				    return false;
				}
				public Integer fecha_inicioLength(){
				    return null;
				}
				public Integer fecha_inicioPrecision(){
				    return null;
				}
				public String fecha_inicioDefault(){
				
					return null;
				
				}
				public String fecha_inicioComment(){
				
				    return "";
				
				}
				public String fecha_inicioPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fecha_inicioOriginalDbColumnName(){
				
					return "fecha_inicio";
				
				}

				
			    public java.util.Date fecha_fin;

				public java.util.Date getFecha_fin () {
					return this.fecha_fin;
				}

				public Boolean fecha_finIsNullable(){
				    return true;
				}
				public Boolean fecha_finIsKey(){
				    return false;
				}
				public Integer fecha_finLength(){
				    return null;
				}
				public Integer fecha_finPrecision(){
				    return null;
				}
				public String fecha_finDefault(){
				
					return null;
				
				}
				public String fecha_finComment(){
				
				    return "";
				
				}
				public String fecha_finPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fecha_finOriginalDbColumnName(){
				
					return "fecha_fin";
				
				}

				
			    public Integer procesos_id;

				public Integer getProcesos_id () {
					return this.procesos_id;
				}

				public Boolean procesos_idIsNullable(){
				    return true;
				}
				public Boolean procesos_idIsKey(){
				    return false;
				}
				public Integer procesos_idLength(){
				    return null;
				}
				public Integer procesos_idPrecision(){
				    return null;
				}
				public String procesos_idDefault(){
				
					return null;
				
				}
				public String procesos_idComment(){
				
				    return "";
				
				}
				public String procesos_idPattern(){
				
					return "";
				
				}
				public String procesos_idOriginalDbColumnName(){
				
					return "proceso_id";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.estado = readInteger(dis);
					
					this.archivo = readString(dis);
					
						this.tarchivos_id = readInteger(dis);
					
						this.usuarios_id = readInteger(dis);
					
					this.codigo = readString(dis);
					
					this.archivofs = readString(dis);
					
					this.fecha = readDate(dis);
					
					this.extension = readString(dis);
					
						this.contenido = (Object) dis.readObject();
					
						this.padre_id = readInteger(dis);
					
					this.fecha_inicio = readDate(dis);
					
					this.fecha_fin = readDate(dis);
					
						this.procesos_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.estado = readInteger(dis);
					
					this.archivo = readString(dis);
					
						this.tarchivos_id = readInteger(dis);
					
						this.usuarios_id = readInteger(dis);
					
					this.codigo = readString(dis);
					
					this.archivofs = readString(dis);
					
					this.fecha = readDate(dis);
					
					this.extension = readString(dis);
					
						this.contenido = (Object) dis.readObject();
					
						this.padre_id = readInteger(dis);
					
					this.fecha_inicio = readDate(dis);
					
					this.fecha_fin = readDate(dis);
					
						this.procesos_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.estado,dos);
					
					// String
				
						writeString(this.archivo,dos);
					
					// Integer
				
						writeInteger(this.tarchivos_id,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id,dos);
					
					// String
				
						writeString(this.codigo,dos);
					
					// String
				
						writeString(this.archivofs,dos);
					
					// java.util.Date
				
						writeDate(this.fecha,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// Object
				
       			    	dos.writeObject(this.contenido);
					
					// Integer
				
						writeInteger(this.padre_id,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_fin,dos);
					
					// Integer
				
						writeInteger(this.procesos_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.estado,dos);
					
					// String
				
						writeString(this.archivo,dos);
					
					// Integer
				
						writeInteger(this.tarchivos_id,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id,dos);
					
					// String
				
						writeString(this.codigo,dos);
					
					// String
				
						writeString(this.archivofs,dos);
					
					// java.util.Date
				
						writeDate(this.fecha,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.contenido);
					
					// Integer
				
						writeInteger(this.padre_id,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_fin,dos);
					
					// Integer
				
						writeInteger(this.procesos_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("estado="+String.valueOf(estado));
		sb.append(",archivo="+archivo);
		sb.append(",tarchivos_id="+String.valueOf(tarchivos_id));
		sb.append(",usuarios_id="+String.valueOf(usuarios_id));
		sb.append(",codigo="+codigo);
		sb.append(",archivofs="+archivofs);
		sb.append(",fecha="+String.valueOf(fecha));
		sb.append(",extension="+extension);
		sb.append(",contenido="+String.valueOf(contenido));
		sb.append(",padre_id="+String.valueOf(padre_id));
		sb.append(",fecha_inicio="+String.valueOf(fecha_inicio));
		sb.append(",fecha_fin="+String.valueOf(fecha_fin));
		sb.append(",procesos_id="+String.valueOf(procesos_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row69Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row54Struct implements routines.system.IPersistableRow<row54Struct> {
    final static byte[] commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];
    static byte[] commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[0];

	
			    public Integer estado;

				public Integer getEstado () {
					return this.estado;
				}

				public Boolean estadoIsNullable(){
				    return true;
				}
				public Boolean estadoIsKey(){
				    return false;
				}
				public Integer estadoLength(){
				    return null;
				}
				public Integer estadoPrecision(){
				    return null;
				}
				public String estadoDefault(){
				
					return null;
				
				}
				public String estadoComment(){
				
				    return "";
				
				}
				public String estadoPattern(){
				
					return "";
				
				}
				public String estadoOriginalDbColumnName(){
				
					return "estado";
				
				}

				
			    public String archivo;

				public String getArchivo () {
					return this.archivo;
				}

				public Boolean archivoIsNullable(){
				    return true;
				}
				public Boolean archivoIsKey(){
				    return false;
				}
				public Integer archivoLength(){
				    return null;
				}
				public Integer archivoPrecision(){
				    return null;
				}
				public String archivoDefault(){
				
					return null;
				
				}
				public String archivoComment(){
				
				    return "";
				
				}
				public String archivoPattern(){
				
					return "";
				
				}
				public String archivoOriginalDbColumnName(){
				
					return "archivo";
				
				}

				
			    public Integer tarchivos_id;

				public Integer getTarchivos_id () {
					return this.tarchivos_id;
				}

				public Boolean tarchivos_idIsNullable(){
				    return true;
				}
				public Boolean tarchivos_idIsKey(){
				    return false;
				}
				public Integer tarchivos_idLength(){
				    return null;
				}
				public Integer tarchivos_idPrecision(){
				    return null;
				}
				public String tarchivos_idDefault(){
				
					return null;
				
				}
				public String tarchivos_idComment(){
				
				    return "";
				
				}
				public String tarchivos_idPattern(){
				
					return "";
				
				}
				public String tarchivos_idOriginalDbColumnName(){
				
					return "tarchivos_id";
				
				}

				
			    public Integer usuarios_id;

				public Integer getUsuarios_id () {
					return this.usuarios_id;
				}

				public Boolean usuarios_idIsNullable(){
				    return true;
				}
				public Boolean usuarios_idIsKey(){
				    return false;
				}
				public Integer usuarios_idLength(){
				    return null;
				}
				public Integer usuarios_idPrecision(){
				    return null;
				}
				public String usuarios_idDefault(){
				
					return null;
				
				}
				public String usuarios_idComment(){
				
				    return "";
				
				}
				public String usuarios_idPattern(){
				
					return "";
				
				}
				public String usuarios_idOriginalDbColumnName(){
				
					return "usuarios_id";
				
				}

				
			    public String codigo;

				public String getCodigo () {
					return this.codigo;
				}

				public Boolean codigoIsNullable(){
				    return true;
				}
				public Boolean codigoIsKey(){
				    return false;
				}
				public Integer codigoLength(){
				    return null;
				}
				public Integer codigoPrecision(){
				    return null;
				}
				public String codigoDefault(){
				
					return null;
				
				}
				public String codigoComment(){
				
				    return "";
				
				}
				public String codigoPattern(){
				
					return "";
				
				}
				public String codigoOriginalDbColumnName(){
				
					return "codigo";
				
				}

				
			    public String archivofs;

				public String getArchivofs () {
					return this.archivofs;
				}

				public Boolean archivofsIsNullable(){
				    return true;
				}
				public Boolean archivofsIsKey(){
				    return false;
				}
				public Integer archivofsLength(){
				    return null;
				}
				public Integer archivofsPrecision(){
				    return null;
				}
				public String archivofsDefault(){
				
					return null;
				
				}
				public String archivofsComment(){
				
				    return "";
				
				}
				public String archivofsPattern(){
				
					return "";
				
				}
				public String archivofsOriginalDbColumnName(){
				
					return "archivofs";
				
				}

				
			    public java.util.Date fecha;

				public java.util.Date getFecha () {
					return this.fecha;
				}

				public Boolean fechaIsNullable(){
				    return true;
				}
				public Boolean fechaIsKey(){
				    return false;
				}
				public Integer fechaLength(){
				    return null;
				}
				public Integer fechaPrecision(){
				    return null;
				}
				public String fechaDefault(){
				
					return null;
				
				}
				public String fechaComment(){
				
				    return "";
				
				}
				public String fechaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fechaOriginalDbColumnName(){
				
					return "fecha";
				
				}

				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}

				public Boolean extensionIsNullable(){
				    return true;
				}
				public Boolean extensionIsKey(){
				    return false;
				}
				public Integer extensionLength(){
				    return null;
				}
				public Integer extensionPrecision(){
				    return null;
				}
				public String extensionDefault(){
				
					return null;
				
				}
				public String extensionComment(){
				
				    return "";
				
				}
				public String extensionPattern(){
				
					return "";
				
				}
				public String extensionOriginalDbColumnName(){
				
					return "extension";
				
				}

				
			    public Object contenido;

				public Object getContenido () {
					return this.contenido;
				}

				public Boolean contenidoIsNullable(){
				    return true;
				}
				public Boolean contenidoIsKey(){
				    return false;
				}
				public Integer contenidoLength(){
				    return null;
				}
				public Integer contenidoPrecision(){
				    return null;
				}
				public String contenidoDefault(){
				
					return null;
				
				}
				public String contenidoComment(){
				
				    return "";
				
				}
				public String contenidoPattern(){
				
					return "";
				
				}
				public String contenidoOriginalDbColumnName(){
				
					return "contenido";
				
				}

				
			    public Integer padre_id;

				public Integer getPadre_id () {
					return this.padre_id;
				}

				public Boolean padre_idIsNullable(){
				    return true;
				}
				public Boolean padre_idIsKey(){
				    return false;
				}
				public Integer padre_idLength(){
				    return null;
				}
				public Integer padre_idPrecision(){
				    return null;
				}
				public String padre_idDefault(){
				
					return null;
				
				}
				public String padre_idComment(){
				
				    return "";
				
				}
				public String padre_idPattern(){
				
					return "";
				
				}
				public String padre_idOriginalDbColumnName(){
				
					return "padre_id";
				
				}

				
			    public java.util.Date fecha_inicio;

				public java.util.Date getFecha_inicio () {
					return this.fecha_inicio;
				}

				public Boolean fecha_inicioIsNullable(){
				    return true;
				}
				public Boolean fecha_inicioIsKey(){
				    return false;
				}
				public Integer fecha_inicioLength(){
				    return null;
				}
				public Integer fecha_inicioPrecision(){
				    return null;
				}
				public String fecha_inicioDefault(){
				
					return null;
				
				}
				public String fecha_inicioComment(){
				
				    return "";
				
				}
				public String fecha_inicioPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fecha_inicioOriginalDbColumnName(){
				
					return "fecha_inicio";
				
				}

				
			    public java.util.Date fecha_fin;

				public java.util.Date getFecha_fin () {
					return this.fecha_fin;
				}

				public Boolean fecha_finIsNullable(){
				    return true;
				}
				public Boolean fecha_finIsKey(){
				    return false;
				}
				public Integer fecha_finLength(){
				    return null;
				}
				public Integer fecha_finPrecision(){
				    return null;
				}
				public String fecha_finDefault(){
				
					return null;
				
				}
				public String fecha_finComment(){
				
				    return "";
				
				}
				public String fecha_finPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String fecha_finOriginalDbColumnName(){
				
					return "fecha_fin";
				
				}

				
			    public Integer procesos_id;

				public Integer getProcesos_id () {
					return this.procesos_id;
				}

				public Boolean procesos_idIsNullable(){
				    return true;
				}
				public Boolean procesos_idIsKey(){
				    return false;
				}
				public Integer procesos_idLength(){
				    return null;
				}
				public Integer procesos_idPrecision(){
				    return null;
				}
				public String procesos_idDefault(){
				
					return null;
				
				}
				public String procesos_idComment(){
				
				    return "";
				
				}
				public String procesos_idPattern(){
				
					return "";
				
				}
				public String procesos_idOriginalDbColumnName(){
				
					return "proceso_id";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length) {
				if(length < 1024 && commonByteArray_AFI_CARGUE_MASIVO_carguemasivo.length == 0) {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[1024];
				} else {
   					commonByteArray_AFI_CARGUE_MASIVO_carguemasivo = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length);
			strReturn = new String(commonByteArray_AFI_CARGUE_MASIVO_carguemasivo, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.estado = readInteger(dis);
					
					this.archivo = readString(dis);
					
						this.tarchivos_id = readInteger(dis);
					
						this.usuarios_id = readInteger(dis);
					
					this.codigo = readString(dis);
					
					this.archivofs = readString(dis);
					
					this.fecha = readDate(dis);
					
					this.extension = readString(dis);
					
						this.contenido = (Object) dis.readObject();
					
						this.padre_id = readInteger(dis);
					
					this.fecha_inicio = readDate(dis);
					
					this.fecha_fin = readDate(dis);
					
						this.procesos_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AFI_CARGUE_MASIVO_carguemasivo) {

        	try {

        		int length = 0;
		
						this.estado = readInteger(dis);
					
					this.archivo = readString(dis);
					
						this.tarchivos_id = readInteger(dis);
					
						this.usuarios_id = readInteger(dis);
					
					this.codigo = readString(dis);
					
					this.archivofs = readString(dis);
					
					this.fecha = readDate(dis);
					
					this.extension = readString(dis);
					
						this.contenido = (Object) dis.readObject();
					
						this.padre_id = readInteger(dis);
					
					this.fecha_inicio = readDate(dis);
					
					this.fecha_fin = readDate(dis);
					
						this.procesos_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.estado,dos);
					
					// String
				
						writeString(this.archivo,dos);
					
					// Integer
				
						writeInteger(this.tarchivos_id,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id,dos);
					
					// String
				
						writeString(this.codigo,dos);
					
					// String
				
						writeString(this.archivofs,dos);
					
					// java.util.Date
				
						writeDate(this.fecha,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// Object
				
       			    	dos.writeObject(this.contenido);
					
					// Integer
				
						writeInteger(this.padre_id,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_fin,dos);
					
					// Integer
				
						writeInteger(this.procesos_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.estado,dos);
					
					// String
				
						writeString(this.archivo,dos);
					
					// Integer
				
						writeInteger(this.tarchivos_id,dos);
					
					// Integer
				
						writeInteger(this.usuarios_id,dos);
					
					// String
				
						writeString(this.codigo,dos);
					
					// String
				
						writeString(this.archivofs,dos);
					
					// java.util.Date
				
						writeDate(this.fecha,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// Object
				
						dos.clearInstanceCache();
						dos.writeObject(this.contenido);
					
					// Integer
				
						writeInteger(this.padre_id,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_inicio,dos);
					
					// java.util.Date
				
						writeDate(this.fecha_fin,dos);
					
					// Integer
				
						writeInteger(this.procesos_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("estado="+String.valueOf(estado));
		sb.append(",archivo="+archivo);
		sb.append(",tarchivos_id="+String.valueOf(tarchivos_id));
		sb.append(",usuarios_id="+String.valueOf(usuarios_id));
		sb.append(",codigo="+codigo);
		sb.append(",archivofs="+archivofs);
		sb.append(",fecha="+String.valueOf(fecha));
		sb.append(",extension="+extension);
		sb.append(",contenido="+String.valueOf(contenido));
		sb.append(",padre_id="+String.valueOf(padre_id));
		sb.append(",fecha_inicio="+String.valueOf(fecha_inicio));
		sb.append(",fecha_fin="+String.valueOf(fecha_fin));
		sb.append(",procesos_id="+String.valueOf(procesos_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row54Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_22Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_22_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row54Struct row54 = new row54Struct();
row69Struct row69 = new row69Struct();
row69Struct row78 = row69;






	
	/**
	 * [tOracleCommit_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleCommit_2", false);
		start_Hash.put("tOracleCommit_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleCommit_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row78");
					}
				
		int tos_count_tOracleCommit_2 = 0;
		

 



/**
 * [tOracleCommit_2 begin ] stop
 */



	
	/**
	 * [tFileDelete_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_2", false);
		start_Hash.put("tFileDelete_2", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row69");
					}
				
		int tos_count_tFileDelete_2 = 0;
		

 



/**
 * [tFileDelete_2 begin ] stop
 */



	
	/**
	 * [tOracleOutput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_20", false);
		start_Hash.put("tOracleOutput_20", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_20";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row54");
					}
				
		int tos_count_tOracleOutput_20 = 0;
		






    
    int nb_line_tOracleOutput_20 = 0;
    int nb_line_update_tOracleOutput_20 = 0;
    int nb_line_inserted_tOracleOutput_20 = 0;
    int nb_line_deleted_tOracleOutput_20 = 0;
    int nb_line_rejected_tOracleOutput_20 = 0;

    int tmp_batchUpdateCount_tOracleOutput_20 = 0;

    int deletedCount_tOracleOutput_20=0;
    int updatedCount_tOracleOutput_20=0;
    int insertedCount_tOracleOutput_20=0;
    int rowsToCommitCount_tOracleOutput_20=0;
    int rejectedCount_tOracleOutput_20=0;

    boolean whetherReject_tOracleOutput_20 = false;

    java.sql.Connection conn_tOracleOutput_20 = null;

    //optional table
    String dbschema_tOracleOutput_20 = null;
    String tableName_tOracleOutput_20 = null;
        dbschema_tOracleOutput_20 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_20 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_20=0;

        if(dbschema_tOracleOutput_20 == null || dbschema_tOracleOutput_20.trim().length() == 0) {
            tableName_tOracleOutput_20 = ("AFI_ARCHIVOS");
        } else {
            tableName_tOracleOutput_20 = dbschema_tOracleOutput_20 + "." + ("AFI_ARCHIVOS");
        }
                String insert_tOracleOutput_20 = "INSERT INTO " + tableName_tOracleOutput_20 + " (estado,archivo,tarchivos_id,usuarios_id,codigo,archivofs,fecha,extension,contenido,padre_id,fecha_inicio,fecha_fin,proceso_id) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_20 = conn_tOracleOutput_20.prepareStatement(insert_tOracleOutput_20);
                        resourceMap.put("pstmt_tOracleOutput_20", pstmt_tOracleOutput_20);

        class BlobTypeUtil_tOracleOutput_20 {
            public Object getBLOB(Object data, java.sql.Connection conn) throws java.sql.SQLException {
            	boolean containBlobFromOtherDB = false;
                if(!(data instanceof java.sql.Blob) || (data instanceof oracle.sql.BLOB && !containBlobFromOtherDB)) {
                	return data;
                }

                oracle.sql.BLOB blob = null;
                java.io.InputStream in = null;
                java.io.OutputStream out = null;
                try{
                	//in
                	java.sql.Blob blobData = (java.sql.Blob) data;
                	in = blobData.getBinaryStream();

                	//out
                	blob = oracle.sql.BLOB.createTemporary(conn, true, oracle.sql.BLOB.DURATION_SESSION);
                    blob.open(oracle.sql.BLOB.MODE_READWRITE);
                    //blob = conn.createBlob(); oracle jdbc don't support it
                	out = blob.setBinaryStream(1);

                    byte[] cache = new byte[8192];
                    int len = 0;
                    while ((len = in.read(cache)) != -1) {
                        out.write(cache, 0, len);
                    }

                    return blob;
                } catch(java.sql.SQLException sqlexp){
globalMap.put("tOracleOutput_20_ERROR_MESSAGE",sqlexp.getMessage());
                	if(blob!=null) {
                		try {
                    		blob.freeTemporary();
                    	} catch(java.sql.SQLException e_tOracleOutput_20) {
                    		//keep quiet
                    	}
                    }
                    sqlexp.printStackTrace();
                } catch(java.lang.Exception exp){
globalMap.put("tOracleOutput_20_ERROR_MESSAGE",exp.getMessage());
                   	if(blob!=null) {
                		try {
                    		blob.freeTemporary();
                    	} catch(java.sql.SQLException e_tOracleOutput_20) {
                    		//keep quiet
                    	}
                    }
                    exp.printStackTrace();
                } finally {
                	if(out!=null) {
                		try {
                			out.flush();
                    		out.close();
                    	} catch(java.io.IOException e_tOracleOutput_20) {
                    		//keep quiet
                    	}
                    }

            	 	if(in!=null) {
                		try {
                    		in.close();
                    	} catch(java.io.IOException e_tOracleOutput_20) {
                    		//keep quiet
                    	}
                    }

                    if(blob!=null) {
                		try {
                    		blob.close();
                    	} catch(java.sql.SQLException e_tOracleOutput_20) {
                    		//keep quiet
                    	}
                    }
                }

                return null;

            }

        }
        BlobTypeUtil_tOracleOutput_20 blobTypeUtil_tOracleOutput_20=new BlobTypeUtil_tOracleOutput_20();





 



/**
 * [tOracleOutput_20 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_22", false);
		start_Hash.put("tFixedFlowInput_22", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_22";
	
	
		int tos_count_tFixedFlowInput_22 = 0;
		

	    for (int i_tFixedFlowInput_22 = 0 ; i_tFixedFlowInput_22 < 1 ; i_tFixedFlowInput_22++) {
	                	            	
    	            		row54.estado = context.vestado;
    	            	        	            	
    	            		row54.archivo = "ERR_AFICMSV_"+context.vnombre+".txt";
    	            	        	            	
    	            		row54.tarchivos_id = context.vtarchivos_id;
    	            	        	            	
    	            		row54.usuarios_id = context.vusuarios_id;
    	            	        	            	
    	            		row54.codigo = "AFI_CMSV";
    	            	        	            	
    	            		row54.archivofs = "ERR_AFICMSV_"+context.vnombre;
    	            	        	            	
    	            		row54.fecha = TalendDate.getCurrentDate();
    	            	        	            	
    	            		row54.extension = "txt";
    	            	        	            	
    	            		row54.contenido = ExtraerBlob.ByteArrayFromFile(java.nio.file.Paths.get(".").toAbsolutePath().normalize().toString()+"/ERR_AFICMSV_"+context.vnombre+".txt");
    	            	        	            	
    	            		row54.padre_id = context.afiarchivos_id;
    	            	        	            	
    	            		row54.fecha_inicio = context.vfinicio;
    	            	        	            	
    	            		row54.fecha_fin = TalendDate.getCurrentDate();
    	            	        	            	
    	            		row54.procesos_id = context.vprocesos_id;
    	            	

 



/**
 * [tFixedFlowInput_22 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_22 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_22";
	
	

 


	tos_count_tFixedFlowInput_22++;

/**
 * [tFixedFlowInput_22 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_22";
	
	

 



/**
 * [tFixedFlowInput_22 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_20 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_20";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row54"
						
						);
					}
					



            row69 = null;
        whetherReject_tOracleOutput_20 = false;
                        if(row54.estado == null) {
pstmt_tOracleOutput_20.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_20.setInt(1, row54.estado);
}

                        if(row54.archivo == null) {
pstmt_tOracleOutput_20.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_20.setString(2, row54.archivo);
}

                        if(row54.tarchivos_id == null) {
pstmt_tOracleOutput_20.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_20.setInt(3, row54.tarchivos_id);
}

                        if(row54.usuarios_id == null) {
pstmt_tOracleOutput_20.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_20.setInt(4, row54.usuarios_id);
}

                        if(row54.codigo == null) {
pstmt_tOracleOutput_20.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_20.setString(5, row54.codigo);
}

                        if(row54.archivofs == null) {
pstmt_tOracleOutput_20.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_20.setString(6, row54.archivofs);
}

                        if(row54.fecha != null) {
pstmt_tOracleOutput_20.setObject(7, new java.sql.Timestamp(row54.fecha.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_20.setNull(7, java.sql.Types.DATE);
}

                        if(row54.extension == null) {
pstmt_tOracleOutput_20.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_20.setString(8, row54.extension);
}

                        if(row54.contenido == null) {
pstmt_tOracleOutput_20.setNull(9, java.sql.Types.BLOB);
} else {pstmt_tOracleOutput_20.setObject(9,  blobTypeUtil_tOracleOutput_20.getBLOB(row54.contenido, conn_tOracleOutput_20));
}

                        if(row54.padre_id == null) {
pstmt_tOracleOutput_20.setNull(10, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_20.setInt(10, row54.padre_id);
}

                        if(row54.fecha_inicio != null) {
pstmt_tOracleOutput_20.setObject(11, new java.sql.Timestamp(row54.fecha_inicio.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_20.setNull(11, java.sql.Types.DATE);
}

                        if(row54.fecha_fin != null) {
pstmt_tOracleOutput_20.setObject(12, new java.sql.Timestamp(row54.fecha_fin.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_20.setNull(12, java.sql.Types.DATE);
}

                        if(row54.procesos_id == null) {
pstmt_tOracleOutput_20.setNull(13, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_20.setInt(13, row54.procesos_id);
}

                try {
                    nb_line_tOracleOutput_20++;
                    int processedCount_tOracleOutput_20 = pstmt_tOracleOutput_20.executeUpdate();
                    insertedCount_tOracleOutput_20 += processedCount_tOracleOutput_20;
                    rowsToCommitCount_tOracleOutput_20 += processedCount_tOracleOutput_20;
                } catch(java.lang.Exception e_tOracleOutput_20) {
globalMap.put("tOracleOutput_20_ERROR_MESSAGE",e_tOracleOutput_20.getMessage());
                    whetherReject_tOracleOutput_20 = true;
                            System.err.print(e_tOracleOutput_20.getMessage());
                }
            if(!whetherReject_tOracleOutput_20) {
                            row69 = new row69Struct();
                                row69.estado = row54.estado;
                                row69.archivo = row54.archivo;
                                row69.tarchivos_id = row54.tarchivos_id;
                                row69.usuarios_id = row54.usuarios_id;
                                row69.codigo = row54.codigo;
                                row69.archivofs = row54.archivofs;
                                row69.fecha = row54.fecha;
                                row69.extension = row54.extension;
                                row69.contenido = row54.contenido;
                                row69.padre_id = row54.padre_id;
                                row69.fecha_inicio = row54.fecha_inicio;
                                row69.fecha_fin = row54.fecha_fin;
                                row69.procesos_id = row54.procesos_id;
            }

 


	tos_count_tOracleOutput_20++;

/**
 * [tOracleOutput_20 main ] stop
 */
	
	/**
	 * [tOracleOutput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_20";
	
	

 



/**
 * [tOracleOutput_20 process_data_begin ] stop
 */
// Start of branch "row69"
if(row69 != null) { 



	
	/**
	 * [tFileDelete_2 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row69"
						
						);
					}
					

 

class DeleteFoldertFileDelete_2{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_2=new java.io.File(java.nio.file.Paths.get(".").toAbsolutePath().normalize().toString()+"/ERR_AFICMSV_"+context.vnombre+".txt");
    if(file_tFileDelete_2.exists()&& file_tFileDelete_2.isFile()){
    	if(file_tFileDelete_2.delete()){
    		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_2_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_2.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_2.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_2_DELETE_PATH",java.nio.file.Paths.get(".").toAbsolutePath().normalize().toString()+"/ERR_AFICMSV_"+context.vnombre+".txt");
 
     row78 = row69;


	tos_count_tFileDelete_2++;

/**
 * [tFileDelete_2 main ] stop
 */
	
	/**
	 * [tFileDelete_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

 



/**
 * [tFileDelete_2 process_data_begin ] stop
 */

	
	/**
	 * [tOracleCommit_2 main ] start
	 */

	

	
	
	currentComponent="tOracleCommit_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row78"
						
						);
					}
					

	java.sql.Connection conn_tOracleCommit_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");

if(conn_tOracleCommit_2 != null && !conn_tOracleCommit_2.isClosed()) {
	
		try{
	
			
			conn_tOracleCommit_2.commit();
			
	
		}finally{
			
			conn_tOracleCommit_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_2"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    }
	
}

 


	tos_count_tOracleCommit_2++;

/**
 * [tOracleCommit_2 main ] stop
 */
	
	/**
	 * [tOracleCommit_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleCommit_2";
	
	

 



/**
 * [tOracleCommit_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleCommit_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_2";
	
	

 



/**
 * [tOracleCommit_2 process_data_end ] stop
 */



	
	/**
	 * [tFileDelete_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

 



/**
 * [tFileDelete_2 process_data_end ] stop
 */

} // End of branch "row69"




	
	/**
	 * [tOracleOutput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_20";
	
	

 



/**
 * [tOracleOutput_20 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_22";
	
	

 



/**
 * [tFixedFlowInput_22 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_22 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_22";
	
	

        }
        globalMap.put("tFixedFlowInput_22_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_22", true);
end_Hash.put("tFixedFlowInput_22", System.currentTimeMillis());




/**
 * [tFixedFlowInput_22 end ] stop
 */

	
	/**
	 * [tOracleOutput_20 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_20";
	
	
	



	
        if(pstmt_tOracleOutput_20 != null) {
			
				pstmt_tOracleOutput_20.close();
				resourceMap.remove("pstmt_tOracleOutput_20");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_20", true);

	
	nb_line_deleted_tOracleOutput_20=nb_line_deleted_tOracleOutput_20+ deletedCount_tOracleOutput_20;
	nb_line_update_tOracleOutput_20=nb_line_update_tOracleOutput_20 + updatedCount_tOracleOutput_20;
	nb_line_inserted_tOracleOutput_20=nb_line_inserted_tOracleOutput_20 + insertedCount_tOracleOutput_20;
	nb_line_rejected_tOracleOutput_20=nb_line_rejected_tOracleOutput_20 + rejectedCount_tOracleOutput_20;
	
        globalMap.put("tOracleOutput_20_NB_LINE",nb_line_tOracleOutput_20);
        globalMap.put("tOracleOutput_20_NB_LINE_UPDATED",nb_line_update_tOracleOutput_20);
        globalMap.put("tOracleOutput_20_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_20);
        globalMap.put("tOracleOutput_20_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_20);
        globalMap.put("tOracleOutput_20_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_20);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row54");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_20", true);
end_Hash.put("tOracleOutput_20", System.currentTimeMillis());




/**
 * [tOracleOutput_20 end ] stop
 */

	
	/**
	 * [tFileDelete_2 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row69");
			  	}
			  	
 

ok_Hash.put("tFileDelete_2", true);
end_Hash.put("tFileDelete_2", System.currentTimeMillis());




/**
 * [tFileDelete_2 end ] stop
 */

	
	/**
	 * [tOracleCommit_2 end ] start
	 */

	

	
	
	currentComponent="tOracleCommit_2";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row78");
			  	}
			  	
 

ok_Hash.put("tOracleCommit_2", true);
end_Hash.put("tOracleCommit_2", System.currentTimeMillis());




/**
 * [tOracleCommit_2 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_22 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_22";
	
	

 



/**
 * [tFixedFlowInput_22 finally ] stop
 */

	
	/**
	 * [tOracleOutput_20 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_20";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_20") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_20 = null;
                if ((pstmtToClose_tOracleOutput_20 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_20")) != null) {
                    pstmtToClose_tOracleOutput_20.close();
                }
    }
 



/**
 * [tOracleOutput_20 finally ] stop
 */

	
	/**
	 * [tFileDelete_2 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";
	
	

 



/**
 * [tFileDelete_2 finally ] stop
 */

	
	/**
	 * [tOracleCommit_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleCommit_2";
	
	

 



/**
 * [tOracleCommit_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_22_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final carguemasivo carguemasivoClass = new carguemasivo();

        int exitCode = carguemasivoClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = (String[][])globalBuffer.toArray(new String[globalBuffer.size()][]);

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        		hastBufferOutput = true;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = carguemasivo.class.getClassLoader().getResourceAsStream("afi_cargue_masivo/carguemasivo_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = carguemasivo.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("contenido", "id_Object");
                        if(context.getStringValue("contenido") == null) {
                            context.contenido = null;
                        } else {
                            context.contenido=(Object) context.getProperty("contenido");
                        }
                        context.setContextType("vprocesos_id", "id_Integer");
                        if(context.getStringValue("vprocesos_id") == null) {
                            context.vprocesos_id = null;
                        } else {
                            try{
                                context.vprocesos_id=routines.system.ParserUtils.parseTo_Integer (context.getProperty("vprocesos_id"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vprocesos_id", e.getMessage()));
                                context.vprocesos_id=null;
                            }
                        }
                        context.setContextType("mensaje", "id_String");
                        if(context.getStringValue("mensaje") == null) {
                            context.mensaje = null;
                        } else {
                            context.mensaje=(String) context.getProperty("mensaje");
                        }
                        context.setContextType("cregistros", "id_Integer");
                        if(context.getStringValue("cregistros") == null) {
                            context.cregistros = null;
                        } else {
                            try{
                                context.cregistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("cregistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "cregistros", e.getMessage()));
                                context.cregistros=null;
                            }
                        }
                        context.setContextType("varchivos_id", "id_Integer");
                        if(context.getStringValue("varchivos_id") == null) {
                            context.varchivos_id = null;
                        } else {
                            try{
                                context.varchivos_id=routines.system.ParserUtils.parseTo_Integer (context.getProperty("varchivos_id"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "varchivos_id", e.getMessage()));
                                context.varchivos_id=null;
                            }
                        }
                        context.setContextType("vrespuesta", "id_String");
                        if(context.getStringValue("vrespuesta") == null) {
                            context.vrespuesta = null;
                        } else {
                            context.vrespuesta=(String) context.getProperty("vrespuesta");
                        }
                        context.setContextType("vfinicio", "id_Date");
                        if(context.getStringValue("vfinicio") == null) {
                            context.vfinicio = null;
                        } else {
                            String context_vfinicio_value = context.getProperty("vfinicio");
                            try{
                                if (context_vfinicio_value == null){
                                    context_vfinicio_value = "";
                                }
                                int context_vfinicio_pos = context_vfinicio_value.indexOf(";");
                                String context_vfinicio_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_vfinicio_pos > -1){
                                    context_vfinicio_pattern = context_vfinicio_value.substring(0, context_vfinicio_pos);
                                    context_vfinicio_value = context_vfinicio_value.substring(context_vfinicio_pos + 1);
                                }

                                context.vfinicio=(java.util.Date)(new java.text.SimpleDateFormat(context_vfinicio_pattern).parse(context_vfinicio_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_vfinicio_longValue = Long.valueOf(context_vfinicio_value);
                                    context.vfinicio = new java.util.Date(context_vfinicio_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "vfinicio", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.vfinicio=null;
                                }
                            }
                        }
                        context.setContextType("vindsal", "id_Integer");
                        if(context.getStringValue("vindsal") == null) {
                            context.vindsal = null;
                        } else {
                            try{
                                context.vindsal=routines.system.ParserUtils.parseTo_Integer (context.getProperty("vindsal"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vindsal", e.getMessage()));
                                context.vindsal=null;
                            }
                        }
                        context.setContextType("vestado", "id_Integer");
                        if(context.getStringValue("vestado") == null) {
                            context.vestado = null;
                        } else {
                            try{
                                context.vestado=routines.system.ParserUtils.parseTo_Integer (context.getProperty("vestado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vestado", e.getMessage()));
                                context.vestado=null;
                            }
                        }
                        context.setContextType("numregexitoso", "id_Integer");
                        if(context.getStringValue("numregexitoso") == null) {
                            context.numregexitoso = null;
                        } else {
                            try{
                                context.numregexitoso=routines.system.ParserUtils.parseTo_Integer (context.getProperty("numregexitoso"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "numregexitoso", e.getMessage()));
                                context.numregexitoso=null;
                            }
                        }
                        context.setContextType("vtarchivos_id", "id_Integer");
                        if(context.getStringValue("vtarchivos_id") == null) {
                            context.vtarchivos_id = null;
                        } else {
                            try{
                                context.vtarchivos_id=routines.system.ParserUtils.parseTo_Integer (context.getProperty("vtarchivos_id"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vtarchivos_id", e.getMessage()));
                                context.vtarchivos_id=null;
                            }
                        }
                        context.setContextType("vusuarios_id", "id_Integer");
                        if(context.getStringValue("vusuarios_id") == null) {
                            context.vusuarios_id = null;
                        } else {
                            try{
                                context.vusuarios_id=routines.system.ParserUtils.parseTo_Integer (context.getProperty("vusuarios_id"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vusuarios_id", e.getMessage()));
                                context.vusuarios_id=null;
                            }
                        }
                        context.setContextType("vnombre", "id_String");
                        if(context.getStringValue("vnombre") == null) {
                            context.vnombre = null;
                        } else {
                            context.vnombre=(String) context.getProperty("vnombre");
                        }
                        context.setContextType("regafiliados", "id_Integer");
                        if(context.getStringValue("regafiliados") == null) {
                            context.regafiliados = null;
                        } else {
                            try{
                                context.regafiliados=routines.system.ParserUtils.parseTo_Integer (context.getProperty("regafiliados"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "regafiliados", e.getMessage()));
                                context.regafiliados=null;
                            }
                        }
                        context.setContextType("regestructura", "id_Integer");
                        if(context.getStringValue("regestructura") == null) {
                            context.regestructura = null;
                        } else {
                            try{
                                context.regestructura=routines.system.ParserUtils.parseTo_Integer (context.getProperty("regestructura"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "regestructura", e.getMessage()));
                                context.regestructura=null;
                            }
                        }
                        context.setContextType("regduplicados", "id_Integer");
                        if(context.getStringValue("regduplicados") == null) {
                            context.regduplicados = null;
                        } else {
                            try{
                                context.regduplicados=routines.system.ParserUtils.parseTo_Integer (context.getProperty("regduplicados"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "regduplicados", e.getMessage()));
                                context.regduplicados=null;
                            }
                        }
                        context.setContextType("regpersonas", "id_Integer");
                        if(context.getStringValue("regpersonas") == null) {
                            context.regpersonas = null;
                        } else {
                            try{
                                context.regpersonas=routines.system.ParserUtils.parseTo_Integer (context.getProperty("regpersonas"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "regpersonas", e.getMessage()));
                                context.regpersonas=null;
                            }
                        }
                        context.setContextType("schema", "id_String");
                        if(context.getStringValue("schema") == null) {
                            context.schema = null;
                        } else {
                            context.schema=(String) context.getProperty("schema");
                        }
                        context.setContextType("sid", "id_String");
                        if(context.getStringValue("sid") == null) {
                            context.sid = null;
                        } else {
                            context.sid=(String) context.getProperty("sid");
                        }
                        context.setContextType("bdpwd", "id_String");
                        if(context.getStringValue("bdpwd") == null) {
                            context.bdpwd = null;
                        } else {
                            context.bdpwd=(String) context.getProperty("bdpwd");
                        }
                        context.setContextType("vmsg_error", "id_String");
                        if(context.getStringValue("vmsg_error") == null) {
                            context.vmsg_error = null;
                        } else {
                            context.vmsg_error=(String) context.getProperty("vmsg_error");
                        }
                        context.setContextType("port", "id_String");
                        if(context.getStringValue("port") == null) {
                            context.port = null;
                        } else {
                            context.port=(String) context.getProperty("port");
                        }
                        context.setContextType("host", "id_String");
                        if(context.getStringValue("host") == null) {
                            context.host = null;
                        } else {
                            context.host=(String) context.getProperty("host");
                        }
                        context.setContextType("bduser", "id_String");
                        if(context.getStringValue("bduser") == null) {
                            context.bduser = null;
                        } else {
                            context.bduser=(String) context.getProperty("bduser");
                        }
                        context.setContextType("estadoexc", "id_String");
                        if(context.getStringValue("estadoexc") == null) {
                            context.estadoexc = null;
                        } else {
                            context.estadoexc=(String) context.getProperty("estadoexc");
                        }
                        context.setContextType("logerror", "id_String");
                        if(context.getStringValue("logerror") == null) {
                            context.logerror = null;
                        } else {
                            context.logerror=(String) context.getProperty("logerror");
                        }
                        context.setContextType("db_origen_Server", "id_String");
                        if(context.getStringValue("db_origen_Server") == null) {
                            context.db_origen_Server = null;
                        } else {
                            context.db_origen_Server=(String) context.getProperty("db_origen_Server");
                        }
                        context.setContextType("db_origen_Login", "id_String");
                        if(context.getStringValue("db_origen_Login") == null) {
                            context.db_origen_Login = null;
                        } else {
                            context.db_origen_Login=(String) context.getProperty("db_origen_Login");
                        }
                        context.setContextType("db_origen_ServiceName", "id_String");
                        if(context.getStringValue("db_origen_ServiceName") == null) {
                            context.db_origen_ServiceName = null;
                        } else {
                            context.db_origen_ServiceName=(String) context.getProperty("db_origen_ServiceName");
                        }
                        context.setContextType("db_origen_Schema", "id_String");
                        if(context.getStringValue("db_origen_Schema") == null) {
                            context.db_origen_Schema = null;
                        } else {
                            context.db_origen_Schema=(String) context.getProperty("db_origen_Schema");
                        }
                        context.setContextType("db_origen_Password", "id_Password");
                        if(context.getStringValue("db_origen_Password") == null) {
                            context.db_origen_Password = null;
                        } else {
                            String pwd_db_origen_Password_value = context.getProperty("db_origen_Password");
                            context.db_origen_Password = null;
                            if(pwd_db_origen_Password_value!=null) {
                                if(context_param.containsKey("db_origen_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_origen_Password = pwd_db_origen_Password_value;
                                } else if (!pwd_db_origen_Password_value.isEmpty()) {
                                    try {
                                        context.db_origen_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_origen_Password_value);
                                        context.put("db_origen_Password",context.db_origen_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_origen_AdditionalParams", "id_String");
                        if(context.getStringValue("db_origen_AdditionalParams") == null) {
                            context.db_origen_AdditionalParams = null;
                        } else {
                            context.db_origen_AdditionalParams=(String) context.getProperty("db_origen_AdditionalParams");
                        }
                        context.setContextType("db_origen_Port", "id_String");
                        if(context.getStringValue("db_origen_Port") == null) {
                            context.db_origen_Port = null;
                        } else {
                            context.db_origen_Port=(String) context.getProperty("db_origen_Port");
                        }
                        context.setContextType("afiarchivos_id", "id_Integer");
                        if(context.getStringValue("afiarchivos_id") == null) {
                            context.afiarchivos_id = null;
                        } else {
                            try{
                                context.afiarchivos_id=routines.system.ParserUtils.parseTo_Integer (context.getProperty("afiarchivos_id"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "afiarchivos_id", e.getMessage()));
                                context.afiarchivos_id=null;
                            }
                        }
                        context.setContextType("ACTUALIZACION_TOTAL", "id_Boolean");
                        if(context.getStringValue("ACTUALIZACION_TOTAL") == null) {
                            context.ACTUALIZACION_TOTAL = null;
                        } else {
                            try{
                                context.ACTUALIZACION_TOTAL=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("ACTUALIZACION_TOTAL"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ACTUALIZACION_TOTAL", e.getMessage()));
                                context.ACTUALIZACION_TOTAL=null;
                            }
                        }
                        context.setContextType("FECHA_TERMINACION", "id_String");
                        if(context.getStringValue("FECHA_TERMINACION") == null) {
                            context.FECHA_TERMINACION = null;
                        } else {
                            context.FECHA_TERMINACION=(String) context.getProperty("FECHA_TERMINACION");
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("LOGS_STAT", "id_String");
                        if(context.getStringValue("LOGS_STAT") == null) {
                            context.LOGS_STAT = null;
                        } else {
                            context.LOGS_STAT=(String) context.getProperty("LOGS_STAT");
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("FANTERIOR", "id_String");
                        if(context.getStringValue("FANTERIOR") == null) {
                            context.FANTERIOR = null;
                        } else {
                            context.FANTERIOR=(String) context.getProperty("FANTERIOR");
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("ESTADO", "id_String");
                        if(context.getStringValue("ESTADO") == null) {
                            context.ESTADO = null;
                        } else {
                            context.ESTADO=(String) context.getProperty("ESTADO");
                        }
                        context.setContextType("BODEGA", "id_String");
                        if(context.getStringValue("BODEGA") == null) {
                            context.BODEGA = null;
                        } else {
                            context.BODEGA=(String) context.getProperty("BODEGA");
                        }
                        context.setContextType("RutaSistema", "id_String");
                        if(context.getStringValue("RutaSistema") == null) {
                            context.RutaSistema = null;
                        } else {
                            context.RutaSistema=(String) context.getProperty("RutaSistema");
                        }
                        context.setContextType("ID_SOLICITUD", "id_Integer");
                        if(context.getStringValue("ID_SOLICITUD") == null) {
                            context.ID_SOLICITUD = null;
                        } else {
                            try{
                                context.ID_SOLICITUD=routines.system.ParserUtils.parseTo_Integer (context.getProperty("ID_SOLICITUD"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ID_SOLICITUD", e.getMessage()));
                                context.ID_SOLICITUD=null;
                            }
                        }
                        context.setContextType("LAST_DAYS", "id_Integer");
                        if(context.getStringValue("LAST_DAYS") == null) {
                            context.LAST_DAYS = null;
                        } else {
                            try{
                                context.LAST_DAYS=routines.system.ParserUtils.parseTo_Integer (context.getProperty("LAST_DAYS"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "LAST_DAYS", e.getMessage()));
                                context.LAST_DAYS=null;
                            }
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("ERROR", "id_String");
                        if(context.getStringValue("ERROR") == null) {
                            context.ERROR = null;
                        } else {
                            context.ERROR=(String) context.getProperty("ERROR");
                        }
                        context.setContextType("CONDITION", "id_String");
                        if(context.getStringValue("CONDITION") == null) {
                            context.CONDITION = null;
                        } else {
                            context.CONDITION=(String) context.getProperty("CONDITION");
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                        context.setContextType("cantidad_archivos", "id_Integer");
                        if(context.getStringValue("cantidad_archivos") == null) {
                            context.cantidad_archivos = null;
                        } else {
                            try{
                                context.cantidad_archivos=routines.system.ParserUtils.parseTo_Integer (context.getProperty("cantidad_archivos"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "cantidad_archivos", e.getMessage()));
                                context.cantidad_archivos=null;
                            }
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("contenido")) {
                context.contenido = (Object) parentContextMap.get("contenido");
            }if (parentContextMap.containsKey("vprocesos_id")) {
                context.vprocesos_id = (Integer) parentContextMap.get("vprocesos_id");
            }if (parentContextMap.containsKey("mensaje")) {
                context.mensaje = (String) parentContextMap.get("mensaje");
            }if (parentContextMap.containsKey("cregistros")) {
                context.cregistros = (Integer) parentContextMap.get("cregistros");
            }if (parentContextMap.containsKey("varchivos_id")) {
                context.varchivos_id = (Integer) parentContextMap.get("varchivos_id");
            }if (parentContextMap.containsKey("vrespuesta")) {
                context.vrespuesta = (String) parentContextMap.get("vrespuesta");
            }if (parentContextMap.containsKey("vfinicio")) {
                context.vfinicio = (java.util.Date) parentContextMap.get("vfinicio");
            }if (parentContextMap.containsKey("vindsal")) {
                context.vindsal = (Integer) parentContextMap.get("vindsal");
            }if (parentContextMap.containsKey("vestado")) {
                context.vestado = (Integer) parentContextMap.get("vestado");
            }if (parentContextMap.containsKey("numregexitoso")) {
                context.numregexitoso = (Integer) parentContextMap.get("numregexitoso");
            }if (parentContextMap.containsKey("vtarchivos_id")) {
                context.vtarchivos_id = (Integer) parentContextMap.get("vtarchivos_id");
            }if (parentContextMap.containsKey("vusuarios_id")) {
                context.vusuarios_id = (Integer) parentContextMap.get("vusuarios_id");
            }if (parentContextMap.containsKey("vnombre")) {
                context.vnombre = (String) parentContextMap.get("vnombre");
            }if (parentContextMap.containsKey("regafiliados")) {
                context.regafiliados = (Integer) parentContextMap.get("regafiliados");
            }if (parentContextMap.containsKey("regestructura")) {
                context.regestructura = (Integer) parentContextMap.get("regestructura");
            }if (parentContextMap.containsKey("regduplicados")) {
                context.regduplicados = (Integer) parentContextMap.get("regduplicados");
            }if (parentContextMap.containsKey("regpersonas")) {
                context.regpersonas = (Integer) parentContextMap.get("regpersonas");
            }if (parentContextMap.containsKey("schema")) {
                context.schema = (String) parentContextMap.get("schema");
            }if (parentContextMap.containsKey("sid")) {
                context.sid = (String) parentContextMap.get("sid");
            }if (parentContextMap.containsKey("bdpwd")) {
                context.bdpwd = (String) parentContextMap.get("bdpwd");
            }if (parentContextMap.containsKey("vmsg_error")) {
                context.vmsg_error = (String) parentContextMap.get("vmsg_error");
            }if (parentContextMap.containsKey("port")) {
                context.port = (String) parentContextMap.get("port");
            }if (parentContextMap.containsKey("host")) {
                context.host = (String) parentContextMap.get("host");
            }if (parentContextMap.containsKey("bduser")) {
                context.bduser = (String) parentContextMap.get("bduser");
            }if (parentContextMap.containsKey("estadoexc")) {
                context.estadoexc = (String) parentContextMap.get("estadoexc");
            }if (parentContextMap.containsKey("logerror")) {
                context.logerror = (String) parentContextMap.get("logerror");
            }if (parentContextMap.containsKey("db_origen_Server")) {
                context.db_origen_Server = (String) parentContextMap.get("db_origen_Server");
            }if (parentContextMap.containsKey("db_origen_Login")) {
                context.db_origen_Login = (String) parentContextMap.get("db_origen_Login");
            }if (parentContextMap.containsKey("db_origen_ServiceName")) {
                context.db_origen_ServiceName = (String) parentContextMap.get("db_origen_ServiceName");
            }if (parentContextMap.containsKey("db_origen_Schema")) {
                context.db_origen_Schema = (String) parentContextMap.get("db_origen_Schema");
            }if (parentContextMap.containsKey("db_origen_Password")) {
                context.db_origen_Password = (java.lang.String) parentContextMap.get("db_origen_Password");
            }if (parentContextMap.containsKey("db_origen_AdditionalParams")) {
                context.db_origen_AdditionalParams = (String) parentContextMap.get("db_origen_AdditionalParams");
            }if (parentContextMap.containsKey("db_origen_Port")) {
                context.db_origen_Port = (String) parentContextMap.get("db_origen_Port");
            }if (parentContextMap.containsKey("afiarchivos_id")) {
                context.afiarchivos_id = (Integer) parentContextMap.get("afiarchivos_id");
            }if (parentContextMap.containsKey("ACTUALIZACION_TOTAL")) {
                context.ACTUALIZACION_TOTAL = (Boolean) parentContextMap.get("ACTUALIZACION_TOTAL");
            }if (parentContextMap.containsKey("FECHA_TERMINACION")) {
                context.FECHA_TERMINACION = (String) parentContextMap.get("FECHA_TERMINACION");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("LOGS_STAT")) {
                context.LOGS_STAT = (String) parentContextMap.get("LOGS_STAT");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("FANTERIOR")) {
                context.FANTERIOR = (String) parentContextMap.get("FANTERIOR");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("ESTADO")) {
                context.ESTADO = (String) parentContextMap.get("ESTADO");
            }if (parentContextMap.containsKey("BODEGA")) {
                context.BODEGA = (String) parentContextMap.get("BODEGA");
            }if (parentContextMap.containsKey("RutaSistema")) {
                context.RutaSistema = (String) parentContextMap.get("RutaSistema");
            }if (parentContextMap.containsKey("ID_SOLICITUD")) {
                context.ID_SOLICITUD = (Integer) parentContextMap.get("ID_SOLICITUD");
            }if (parentContextMap.containsKey("LAST_DAYS")) {
                context.LAST_DAYS = (Integer) parentContextMap.get("LAST_DAYS");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("ERROR")) {
                context.ERROR = (String) parentContextMap.get("ERROR");
            }if (parentContextMap.containsKey("CONDITION")) {
                context.CONDITION = (String) parentContextMap.get("CONDITION");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }if (parentContextMap.containsKey("cantidad_archivos")) {
                context.cantidad_archivos = (Integer) parentContextMap.get("cantidad_archivos");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("db_origen_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tJava_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

e_tJava_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : carguemasivo");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_2", globalMap.get("conn_tOracleConnection_2"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     2226385 characters generated by Talend Open Studio for ESB 
 *     on the October 28, 2024, 2:28:06 PM COT
 ************************************************************************************************/